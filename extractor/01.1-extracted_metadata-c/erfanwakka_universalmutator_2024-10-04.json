{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:31:43"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/erfanwakka/universalmutator",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "erfanwakka",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-12-22T07:13:29Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2020-05-06T15:22:06Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": null,
                "type": "License",
                "name": "Other",
                "url": null,
                "spdx_id": "NOASSERTION"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Regexp based tool for mutating generic source code across numerous languages",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This is an extend for universal mutator tool  which has effective rules for solidity language . These rules can  regenerate 10 of 15 famous faulty smart contracts, which have result in millions of dollars loss.\nYou can read more about the mutation operators which on [Paper](https://arxiv.org/abs/1912.04780).\nRules are implemented by python regular-expression and can be found in *sol.rules*\n \n",
                "original_header": "**Mutation testing for solidity language**"
            },
            "confidence": 0.9535069623184765,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "universalmutator",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "erfanwakka/universalmutator",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/erfanwakka/universalmutator/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/erfanwakka/universalmutator/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/erfanwakka/universalmutator/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 106691
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Download the package and go to solidityMutator (from root of project navigate to /universalmutator/solidityMutator/) directory in universalmutator . Then run the following command:\n```javascript\npython genmutants.py ../../examples/example.sol  solidity sol.rules\n\n```\n(you can put any smart contract in example folder and mutate it)\nif you have python compiler installed , it should generate a number of valid mutants and get the number of valid , not valid and redundant mutants .\nYou can get more information about using it with \n```javascript\npython genmutants.py --help \n```\n\n\n \n",
                "type": "Text_excerpt",
                "original_header": "**How To USE IT**"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Mutation testing for solidity language"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1912.04780"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/erfanwakka/universalmutator/master/README.md"
        }
    ]
}