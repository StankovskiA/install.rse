{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 18:58:48"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/PrivacyEngineering/hawk",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "PrivacyEngineering",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-03-17T17:41:54Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2022-04-23T21:33:12Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "hawk",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "PrivacyEngineering/hawk",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/PrivacyEngineering/hawk/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/PrivacyEngineering/hawk/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/privacyengineering/hawk/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Smarty",
                "name": "Smarty",
                "type": "Programming_language",
                "size": 1752
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/PrivacyEngineering/hawk/releases/62171586",
                "tag": "1.0.1",
                "name": "Hawk Helm Chart 1.0.1",
                "author": {
                    "name": "github-actions[bot]",
                    "type": "Bot"
                },
                "tarball_url": "https://api.github.com/repos/PrivacyEngineering/hawk/tarball/1.0.1",
                "zipball_url": "https://api.github.com/repos/PrivacyEngineering/hawk/zipball/1.0.1",
                "html_url": "https://github.com/PrivacyEngineering/hawk/releases/tag/1.0.1",
                "url": "https://api.github.com/repos/PrivacyEngineering/hawk/releases/62171586",
                "release_id": 62171586,
                "date_created": "2022-03-18T09:19:27Z",
                "date_published": "2022-03-18T09:20:24Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "non-software",
                "type": "String"
            },
            "confidence": 1,
            "technique": "software_type_heuristics"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "```\n@misc{gr\u00fcnewald2023hawk,\n      title={Hawk: DevOps-driven Transparency and Accountability in Cloud Native Systems}, \n      author={Elias Gr\u00fcnewald and Jannis Kiesel and Siar-Remzi Akbayin and Frank Pallas},\n      year={2023},\n      eprint={2306.02496},\n      archivePrefix={arXiv},\n      primaryClass={cs.DC}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "BibTex citation:",
                "parent_header": [
                    "Hawk"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        },
        {
            "result": {
                "value": "@misc{gr\u00fcnewald2023hawk,\n    primaryclass = {cs.DC},\n    archiveprefix = {arXiv},\n    eprint = {2306.02496},\n    year = {2023},\n    author = {Elias Gr\u00fcnewald and Jannis Kiesel and Siar-Remzi Akbayin and Frank Pallas},\n    title = {Hawk: DevOps-driven Transparency and Accountability in Cloud Native Systems},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Hawk: DevOps-driven Transparency and Accountability in Cloud Native Systems",
                "author": "Elias Gr\u00fcnewald and Jannis Kiesel and Siar-Remzi Akbayin and Frank Pallas"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "An example using the [WeaveWorks SockShop](https://github.com/microservices-demo/microservices-demo)\n, integrated with some of Hawk components can be\nfound [here](https://github.com/PrivacyEngine/hawk-sockshop).\n\n",
                "type": "Text_excerpt",
                "original_header": "Example Deployment",
                "parent_header": [
                    "Hawk"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9018253028611909,
            "technique": "supervised_classification"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The Hawk Framework provides a way of tracking the dataflow between applications and allows for GDPR\nrelated tags to be added to the data references. It also features an analytical dashboard about the\nGDPR related information and integration for using the ratio of GDPR-tagged data in e.g. Flagger\nCanary releases. \nThe concept is to archive this goal is to intercept the traffic between the individual applications\n/ services. This idea is called Hawk Core. It can be either done by (A) Framework Integration inside\nthe application or outside the application using (B) Service Mesh Integration, if available. While\nthe Framework integration allows to interact with the Hawk API directly inside the Service and gives\nthe possibility to intercept encrypted and also external traffic, the application itself must be\nmodified. The Service Mesh solution can be installed without modifying any application. Both\nsolutions can be active in parallel. Currently the only integrations\nare [EnvoyProxy / Istio Service Mesh Integration](integrations/hawk-envoy-plugin/README.md) and [Java Framework Integration]() for HTTP and\nJSON bodies only. \nWhen a Packet is intercepted it will be parsed, according to the protocol used. The parsing searches\nfor possible custom data / personal data or more concretely for atomic data values of type string or\nnumber. So the User Email might be one example of this (and not the whole User object). The idea is\nto build a selector for each individual atomic data field and saving it. This selector includes the\ndestination host and some kind of endpoint abstraction. In case of HTTP the method and the path. And\nalso the a phase which might be request or response, the namespace of the data which is header or\nbody in case of HTTP, the format which describes if this data was found in a key-value based format\nor in some more complex format like JSON and finally the path which is protocol and format dependend\nto describe where this data lies inside the packet. When implemented correctly, these values should\nprovide a protocol independent and context aware selector. Using the selector, it is also possible\nto find / track data in other packets with same endpoint. To reduce size many on these selectors\nmight be aggregated to reduce the size. One example right here might be a list of users. We dont\nneed to have a selector for each individual User Email, instead we only need to provide a reference\nto the array and which path for each entry inside the array. E.g. `$.users.[0].email`\n, `$.users.[1].email` ... -> `$.users.[*].email`. This aggregated selector is called `UsageField`.\nFor each such packet parsed we might get a list of `UsageField`s. This list is tagged with some\nmetadata and represents one `Usage` object. \nGDPR relevant data is added using `Field`s and `Mapping`s. A field again represents one atomic data\nunit like a User Email. We can also add a description, some legal bases, whether it is personal data\n/ special categories personal data and many more describing information. The next component is\nthe `Mapping`, which can be created at max once per endpoint. This mapping then specifies a list\nof `MappingField`s, where each individual `MappingField` represents a mapping between a `Field` and\na `UsageField`. When every endpoint is mapped accordingly, it is possible for example to see from\nwhere and when a User Email is sent to which other application / service and with which other data. \nThe [Hawk Service](https://github.com/PrivacyEngineering/hawk-service) is the central component for\nall of these entities, as all integrations submit their `Usage`s to here. Also `Mapping`s\nand `Field`s can be created here via REST API. The Hawk Service is stateless and allows for\nHorizontal scaling. The Database PostgreSQL can be used, but also e.g. YugabyteDB or CockroachDB are\npossible, which makes the whole Hawk Framework scalable. But the Hawk Service also serves as a base\nfor Hawk Release, which accesses the metrics from here. These metric include e.g. how many `Usage`s\nwhere collected and how many of those endpoints have a `Mapping`. To visualize the Data collected,\nwe can use [Hawk Core Monitor](https://github.com/PrivacyEngineering/hawk-core-monitor). It contains\na UI for creating fields and mappings really quickly and listing them in a nice way. And also a\nGrafana Dashboard which is used to visualize the data collected and giving a summary of it. Both of\nthese components use Hawk Service as a Backend. \nThe last component is Hawk Build, which is a GitHub Action that allows to be notified when the API\nof a service is changed. These changes can be then update in the Hawk Core Monitoring interface. The\nHawk Release can constantly validate the coverage of mapped endpoints to prevent deploying unmapped\nendpoints. \n",
                "original_header": "Overview"
            },
            "confidence": 0.9748287946847696,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "For Hawk Core Monitor things get a little bit more complicated as it consists of two components.\nFirst the [Configuration UI](https://github.com/PrivacyEngineering/hawk-core-monitor). This\ncomponent needs to have access to the Hawk Service. By default it expects the Hawk Service API to be\navailable reverse-proxied on the path. To change that you can provide an Environment variable. The\nsecond component is a Grafana instance with specific Plugins, Datasource and Dashboards.\nSee [Grafana Deployment](templates/grafana-deployment.yaml)\nand [Grafana Config](templates/grafana-config.yaml) for information on which environment variables\nand which files to provide. It is recommended to use a reverse proxy, to seamlessly connect the\ntwo (or three) components. See [Nginx Deployment](templates/nginx-deployment.yaml)\nand [Nginx Config](templates/nginx-config.yaml) for information on which environment variables and\nwhich files to provide. \n",
                "original_header": "Integrations"
            },
            "confidence": 0.954540438589533,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "1. Add the helm chart repository:\n    ```\n    helm repo add hawk https://privacyengineering.github.io/hawk-helm-charts/\n    ```\n2. Modify values in [`values.yaml`](values.yaml) to your needs.\n3. Install hawk core and all it's services:\n    BASH2*\n4. Access the hawk-core-monitor and hawk-service via ingress:\n    BASH3*\n5. Add an integration to the hawk framework (see [Integrations](#integrations) for more information)\n \n",
                "original_header": "Deployment through Helm"
            },
            "confidence": 0.999985951770239,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "It's also possible to install the application in a Non-Kubernetes\nenvironment or configuring them more individual using the Docker Images of them. The Istio / Envoy\nintegration is only available in specific Kubernetes environments.\nThe [Java integration](https://github.com/PrivacyEngineering/hawk-integration-java) is available in\nevery environment. It needs a connection to the Hawk Service. When possible, the Envoy Integration\nis preferred as it's less effort to install. You must choose at least one integration.\n \n",
                "original_header": "Deloyment alternatives"
            },
            "confidence": 0.9999994264891764,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The Helm Chart (WIP), installs the Hawk-Service, a default PostgreSQL database, Hawk Core Monitor (\nnginx + monitor + grafana) and the Istio / Envoy integration if selected.\n```shell\nhelm repo add hawk https://github.com/PrivacyEngineering/hawk/releases/download/1.0.1\nhelm install PrviacyEngineering/hawk\n```\n \nReplace VERSION with the [newest version](https://github.com/TUB-CNPE-TB/hawk/releases) of the chart.\nAlternatively, you can also download the hawk-VERSION.tgz of the release you wish and execute:\n```shell\nhelm install ./hawk-VERSION.tgz\n``` \nSee the [values.yaml](values.yaml) for configuration options. \nTo enable Hawk Release, you have to install [Flux](https://github.com/fluxcd/flux)\nand [Flagger](https://github.com/fluxcd/flagger). Then you can configure to use the Metrics using\nPrometheus, see [Hawk Service](https://github.com/PrivacyEngineering/hawk-service) for more\ninformation on which mappings to use. You also need to configure Prometheus to scrape the Metrics. \nTo enable Hawk Build you have to install and configure\nthe [OpenAPI Privacy Changes Service](https://github.com/TUB-CNPE-TB/openapi-privacy-changes-service)\n. Then it is possible to\nuse [OpenAPI Privacy Alert GitHub Action](https://github.com/TUB-CNPE-TB/openapi-privacy-alert-action)\n. \n",
                "original_header": "Integrations"
            },
            "confidence": 0.9907045356048336,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Hawk"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/privacyengineering/hawk/master/./grafana/images/overview.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2306.02496\n\n## BibTex citation:\n```\n@misc{gr\u00fcnewald2023hawk,\n      title={Hawk: DevOps-driven Transparency and Accountability in Cloud Native Systems}, \n      author={Elias Gr\u00fcnewald and Jannis Kiesel and Siar-Remzi Akbayin and Frank Pallas},\n      year={2023},\n      eprint={2306.02496},\n      archivePrefix={arXiv},\n      primaryClass={cs.DC}\n}\n```\n\n## Overview\n\nThe Hawk Framework provides a way of tracking the dataflow between applications and allows for GDPR\nrelated tags to be added to the data references. It also features an analytical dashboard about the\nGDPR related information and integration for using the ratio of GDPR-tagged data in e.g. Flagger\nCanary releases.\n\n<details>\n<summary>Concept and Goal</summary>\n\n### Concept\n\nThe concept is to archive this goal is to intercept the traffic between the individual applications\n/ services. This idea is called Hawk Core. It can be either done by (A"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
        }
    ]
}