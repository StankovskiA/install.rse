{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:08:27"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/profuzzbench/profuzzbench",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "profuzzbench",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-01-13T09:58:00Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-04T16:22:33Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "ProFuzzBench - A Benchmark for Stateful Protocol Fuzzing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "ProFuzzBench is a benchmark for stateful fuzzing of network protocols. It includes a suite of representative open-source network servers for popular protocols (e.g., TLS, SSH, SMTP, FTP, SIP), and tools to automate experimentation.\n \n",
                "original_header": "ProFuzzBench - A Benchmark for Stateful Protocol Fuzzing"
            },
            "confidence": 0.9098343616693966,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "ProFuzzBench provides automation scripts for fuzzing the targets with three fuzzers: [AFLnwe](https://github.com/aflnet/aflnwe) (a network-enabled version of AFL, which sends inputs over a TCP/IP sockets instead of files), [AFLNet](https://github.com/aflnet/aflnet) (a fuzzer tailored for stateful network servers), and [StateAFL](https://github.com/stateafl/stateafl) (another fuzzer for stateful network servers). \n",
                "original_header": "Fuzzers"
            },
            "confidence": 0.9483038670411694,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "profuzzbench",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "profuzzbench/profuzzbench",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/profuzzbench/profuzzbench/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/profuzzbench/profuzzbench/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 229,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "benchmarking, fuzzing, security",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 51,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/profuzzbench/profuzzbench/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 120218
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 43184
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 6496
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 766
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DAAP/forked-daapd/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DAAP/forked-daapd/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DTLS/TinyDTLS/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DTLS/TinyDTLS/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/TLS/OpenSSL/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/TLS/OpenSSL/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DNS/Dnsmasq/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DNS/Dnsmasq/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/Dockerfile"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DAAP/forked-daapd/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DAAP/forked-daapd/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DAAP/forked-daapd/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/blacklist_asan.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/BFTPD/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/blacklist.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/ProFTPD/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/LightFTP/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/blacklist.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/blacklist_global.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/FTP/PureFTPD/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/kill-server.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/RTSP/Live555/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/blacklist_alloc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SSH/OpenSSH/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DTLS/TinyDTLS/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DTLS/TinyDTLS/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DTLS/TinyDTLS/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/TLS/OpenSSL/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/TLS/OpenSSL/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/TLS/OpenSSL/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/blacklist_alloc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/blacklist_global.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SMTP/Exim/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/run_pjsip.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/SIP/Kamailio/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DNS/Dnsmasq/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DNS/Dnsmasq/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DNS/Dnsmasq/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/blacklist_alloc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/clean.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/cov_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/subjects/DICOM/Dcmtk/run-stateafl.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/analysis/profuzzbench_generate_csv.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/analysis/profuzzbench_generate_all.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/execution/profuzzbench_exec_all.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/execution/profuzzbench_exec_common.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/execution/profuzzbench_build_all.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/scripts/execution/profuzzbench_stateafl_only.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "ProFuzzBench has been accepted for publication as a [Tool Demonstrations paper](https://dl.acm.org/doi/pdf/10.1145/3460319.3469077) at the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis (ISSTA) 2021.\n\n```\n@inproceedings{profuzzbench,\n  title={ProFuzzBench: A Benchmark for Stateful Protocol Fuzzing},\n  author={Roberto Natella and Van-Thuan Pham},\n  booktitle={Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},\n  year={2021}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citing ProFuzzBench"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{profuzzbench,\n    year = {2021},\n    booktitle = {Proceedings of the 30th ACM SIGSOFT International Symposium on Software Testing and Analysis},\n    author = {Roberto Natella and Van-Thuan Pham},\n    title = {ProFuzzBench: A Benchmark for Stateful Protocol Fuzzing},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "ProFuzzBench: A Benchmark for Stateful Protocol Fuzzing",
                "author": "Roberto Natella and Van-Thuan Pham"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Follow the steps below to run and collect experimental results for LightFTP, which is a lightweight File Transfer Protocol (FTP) server. The similar steps should be followed to run experiments on other subjects. Each subject program comes with a README.md file showing subject-specific commands to run experiments.\n",
                "type": "Text_excerpt",
                "original_header": "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "The following commands create a docker image tagged lightftp. The image should have everything available for fuzzing and code coverage collection.\n\n```bash\ncd $PFBENCH\ncd subjects/FTP/LightFTP\ndocker build . -t lightftp\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step-1. Build a docker image",
                "parent_header": [
                    "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "All results (in tar files) should be stored in the folder created in Step-2 (results-lightftp). Specifically, these tar files are the compressed version of output folders produced by all fuzzing instances. If the fuzzer is afl based (e.g., AFLNet, AFLnwe) each folder should contain sub-folders like crashes, hangs, queue and so on. Use [profuzzbench_generate_csv.sh script](scripts/analysis/profuzzbench_generate_csv.sh) to collect results in terms of code coverage over time. The script takes 5 arguments as listed below.\n\n- ***1st argument (PROG)***   : name of the subject program (e.g., lightftp)\n- ***2nd argument (RUNS)***   : number of runs\n- ***3rd argument (FUZZER)*** : fuzzer name (e.g., aflnet)\n- ***4th argument (COVFILE)***: CSV-formatted output file keeping the results\n- ***5th argument (APPEND)*** : append mode; set this to 0 for the first fuzzer and 1 for the subsequent fuzzer(s).\n\nThe following commands collect the  code coverage results produced by AFLNet and AFLnwe and save them to results.csv.\n\n```bash\ncd $PFBENCH/results-lightftp\n\nprofuzzbench_generate_csv.sh lightftp 4 aflnet results.csv 0\nprofuzzbench_generate_csv.sh lightftp 4 aflnwe results.csv 1\n```\n\nThe results.csv file should look similar to text below. The file has six columns showing the timestamp, subject program, fuzzer name, run index, coverage type and its value. The file contains both line coverage and branch coverage over time information. Each coverage type comes with two values, in percentage (*_per) and in absolute number (*_abs).\n\n```\ntime,subject,fuzzer,run,cov_type,cov\n1600905795,lightftp,aflnwe,1,l_per,25.9\n1600905795,lightftp,aflnwe,1,l_abs,292\n1600905795,lightftp,aflnwe,1,b_per,13.3\n1600905795,lightftp,aflnwe,1,b_abs,108\n1600905795,lightftp,aflnwe,1,l_per,25.9\n1600905795,lightftp,aflnwe,1,l_abs,292\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step-3. Collect the results",
                "parent_header": [
                    "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "The results collected in step 3 (i.e., results.csv) can be used for plotting. For instance, we provide [a sample Python script](scripts/analysis/profuzzbench_plot.py) to plot code coverage over time. Use the following command to plot the results and save it to a file.\n\n```\ncd $PFBENCH/results-lightftp\n\nprofuzzbench_plot.py -i results.csv -p lightftp -r 4 -c 60 -s 1 -o cov_over_time.png\n```\n\nThis is a sample code coverage report generated by the script. ![Sample report](figures/cov_over_time.png)\n",
                "type": "Text_excerpt",
                "original_header": "Step-4. Analyze the results",
                "parent_header": [
                    "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "```\ngit clone https://github.com/profuzzbench/profuzzbench.git\ncd profuzzbench\nexport PFBENCH=$(pwd)\nexport PATH=$PATH:$PFBENCH/scripts/execution:$PFBENCH/scripts/analysis\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step-0. Set up environmental variables",
                "parent_header": [
                    "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "The following folder structure shows all files we have prepared for fuzzing LightFTP server. Please read [our paper](https://arxiv.org/pdf/2101.05102.pdf) to understand the purposes of these files.\n\n```\nsubjects/FTP/LightFTP\n\u251c\u2500\u2500 Dockerfile (required): based on this, a target-specific Docker image is built (See Step-1 in the tutorial)\n\u251c\u2500\u2500 run.sh (required): main script to run experiment inside a container\n\u251c\u2500\u2500 cov_script.sh (required): script to do code coverage analysis\n\u251c\u2500\u2500 clean.sh (optional): script to clean server states before fuzzing to improve the stability\n\u251c\u2500\u2500 fuzzing.patch (optional): code changes needed to improve fuzzing results (e.g., remove randomness)\n\u251c\u2500\u2500 gcov.patch (required): code changes needed to support code coverage analysis (e.g., enable gcov, add a signal handler)\n\u251c\u2500\u2500 ftp.dict (optional): a dictionary containing protocol-specific tokens/keywords to support fuzzing\n\u2514\u2500\u2500 in-ftp (required): a seed corpus capturing sequences of client requests sent to the server under test.\n\u2502   \u2502       To prepare these seeds, please follow the AFLNet tutorial at https://github.com/aflnet/aflnet.\n\u2502   \u2502       Please use \".raw\" extension for all seed inputs.\n\u2502   \u2502\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ftp_requests_full_anonymous.raw\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ftp_requests_full_normal.raw\n\u2514\u2500\u2500 README.md (optional): a target-specific README containing commands to run experiments\n```\nAll the required files (i.e., Dockerfile, run.sh, cov_script.sh, gcov.patch, and the seed corpus) follow some templates so that one can easily follow them to prepare files for a new target.\n",
                "type": "Text_excerpt",
                "original_header": "Step-2. Write a Docker file for the new target server and prepare all the subject-specific scripts/files (e.g., target-specific patch, seed corpus)",
                "parent_header": [
                    "FAQs",
                    "1. How do I extend ProFuzzBench?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```\nprotocol-fuzzing-benchmark\n\u251c\u2500\u2500 subjects: this folder contains all protocols included in this benchmark and\n\u2502\u00a0\u00a0 \u2502         each protocol may have more than one target server\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RTSP\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 FTP\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 LightFTP\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 Dockerfile: subject-specific Dockerfile\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 run.sh: (subject-specific) main script to run experiment inside a container\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 cov_script.sh: (subject-specific) script to do code coverage analysis\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 other files (e.g., patches, other subject-specific scripts)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 scripts: this folder contains all scripts to run experiments, collect & analyze results\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 execution\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 profuzzbench_exec_common.sh: main script to spawn containers and run experiments on them\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 analysis\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 profuzzbench_generate_csv.sh: this script collect code coverage results from different runs\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 profuzzbench_plot.py: sample script for plotting\n\u2514\u2500\u2500 README.md\n``` \n",
                "original_header": "Folder structure"
            },
            "confidence": 0.999909437499815,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "ProFuzzBench also includes scripts for running all fuzzers on all targes, with pre-configured parameters. To build all targets for all fuzzers, you can run the script [profuzzbench_build_all.sh](scripts/execution/profuzzbench_build_all.sh). To run the fuzzers, you can use the script [profuzzbench_exec_all.sh](scripts/execution/profuzzbench_exec_all.sh). \n",
                "original_header": "Utility scripts"
            },
            "confidence": 0.9995844860772981,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To speed-up the build of Docker images, you can pass the option \"-j\" to `make`, using the `MAKE_OPT` environment variable and the `--build-arg` option of `docker build`. Example:\n```\nexport MAKE_OPT=\"-j4\"\ndocker build . -t lightftp --build-arg MAKE_OPT\n```\n \n",
                "original_header": "Parallel builds"
            },
            "confidence": 0.9999997577227484,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Run [profuzzbench_exec_common.sh script](scripts/execution/profuzzbench_exec_common.sh) to start an experiment. The script takes 8 arguments as listed below.\n\n- ***1st argument (DOCIMAGE)*** : name of the docker image\n- ***2nd argument (RUNS)***     : number of runs, one isolated Docker container is spawned for each run\n- ***3rd argument (SAVETO)***   : path to a folder keeping the results\n- ***4th argument (FUZZER)***   : fuzzer name (e.g., aflnet) -- this name must match the name of the fuzzer folder inside the Docker container (e.g., /home/ubuntu/aflnet)\n- ***5th argument (OUTDIR)***   : name of the output folder created inside the docker container\n- ***6th argument (OPTIONS)***  : all options needed for fuzzing in addition to the standard options written in the target-specific run.sh script\n- ***7th argument (TIMEOUT)***  : time for fuzzing in seconds\n- ***8th argument (SKIPCOUNT)***: used for calculating coverage over time. e.g., SKIPCOUNT=5 means we run gcovr after every 5 test cases because gcovr takes time and we do not want to run it after every single test case\n\nThe following commands run 4 instances of AFLNet and 4 instances of AFLnwe to simultaenously fuzz LightFTP in 60 minutes.\n\n```bash\ncd $PFBENCH\nmkdir results-lightftp\n\nprofuzzbench_exec_common.sh lightftp 4 results-lightftp aflnet out-lightftp-aflnet \"-P FTP -D 10000 -q 3 -s 3 -E -K\" 3600 5 &\nprofuzzbench_exec_common.sh lightftp 4 results-lightftp aflnwe out-lightftp-aflnwe \"-D 10000 -K\" 3600 5\n```\n\nIf the script runs successfully, its output should look similar to the text below.\n\n```\nAFLNET: Fuzzing in progress ...\nAFLNET: Waiting for the following containers to stop:  f2da4b72b002 b7421386b288 cebbbc741f93 5c54104ddb86\nAFLNET: Collecting results and save them to results-lightftp\nAFLNET: Collecting results from container f2da4b72b002\nAFLNET: Collecting results from container b7421386b288\nAFLNET: Collecting results from container cebbbc741f93\nAFLNET: Collecting results from container 5c54104ddb86\nAFLNET: I am done!\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step-2. Run fuzzing",
                "parent_header": [
                    "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "If you want to add a new protocol and/or a new target server (of a supported protocol), please follow the above folder structure and complete the steps below. We use LightFTP as an example.\n",
                "type": "Text_excerpt",
                "original_header": "1. How do I extend ProFuzzBench?",
                "parent_header": [
                    "FAQs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "The folder for LightFTP server is [subjects/FTP/LightFTP](subjects/FTP/LightFTP).\n",
                "type": "Text_excerpt",
                "original_header": "Step-1. Create a new folder containing the protocol/target server",
                "parent_header": [
                    "FAQs",
                    "1. How do I extend ProFuzzBench?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "Once a Docker image is successfully built, you should test your commands, as written in a target-specific [README.md](subjects/FTP/LightFTP/README.md), inside a single Docker container. For example, we run the following commands to check if everything is working for LightFTP.\n\n```\n//start a container\ndocker run -it lightftp /bin/bash\n\n//inside the docker container\n//run a 60-min fuzzing experiment using AFLNet\ncd experiments\nrun aflnet out-lightftp-aflnet \"-P FTP -D 10000 -q 3 -s 3 -E -K -c ./ftpclean.sh\" 3600 5\n```\n\nIf everything works, there should be no error messages and all the results are stored inside the out-lightftp-aflnet folder.\n",
                "type": "Text_excerpt",
                "original_header": "Step-3. Test your new target server",
                "parent_header": [
                    "FAQs",
                    "1. How do I extend ProFuzzBench?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "Each experiment has two parts: fuzzing and code coverage analysis. The fuzzing part should complete after the specified timeout; however, the code coverage analysis time is subject-specific and it could take several hours if the generated corpus is large or the target server is slow. You can log into the running containers to check the progress if you think your experiment hangs.\n\n",
                "type": "Text_excerpt",
                "original_header": "2. My experiment \"hangs\". What could be the reason(s)?",
                "parent_header": [
                    "FAQs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        },
        {
            "result": {
                "value": "To add support for an additional fuzzer, we suggest to add a new Dockerfile in the folder of the target, and build the fuzzer on top of the image for the target. For example, the StateAFL fuzzer as been added as an extension to ProFuzzBench. For each supported target, you will find the file `Dockerfile-stateafl` to build the fuzzer in the same container image of the other fuzzers. In that Dockerfile, you can add fuzzer-specific directives. For example, StateAFL also re-builds the target for adding more compile-time instrumentation.\n\nAdditionally, you can include a `run-${FUZZER}.sh` script in the target folder, such as `run-stateafl.sh`. The file will be sourced by the `run.sh` script when running a fuzzing experiment. In this script, you can include fuzzer-specific commands, such as to setup environment variables (e.g., the folder for the instrumented build of the target).\n\n\n",
                "type": "Text_excerpt",
                "original_header": "3. How do I add another fuzzer to ProFuzzBench?",
                "parent_header": [
                    "FAQs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "ProFuzzBench - A Benchmark for Stateful Protocol Fuzzing"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/figures/cov_over_time.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2101.05102.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
        }
    ]
}