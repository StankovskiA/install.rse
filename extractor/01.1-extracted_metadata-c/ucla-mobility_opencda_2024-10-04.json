{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:30:11"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/ucla-mobility/OpenCDA",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "ucla-mobility",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-01-19T18:59:49Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-30T05:51:44Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": null,
                "type": "License",
                "name": "Other",
                "url": null,
                "spdx_id": "NOASSERTION"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "\nAcademic Software License: \u00a9 2021 UCLA Mobility Lab (\u201cInstitution\u201d).  Academic or nonprofit researchers are permitted to use this Software (as defined below) subject to Paragraphs 1-3:\n\nInstitution hereby grants to you free of charge, so long as you are an academic or nonprofit researcher, a nonexclusive license under Institution\u2019s copyright ownership interest in this software and any derivative works made by you thereof (collectively, the \u201cSoftware\u201d) to use, copy, and make derivative works of the Software solely for educational or academic research purposes, in all cases subject to the terms of this Academic Software License. Except as granted herein, all rights are reserved by Institution, including the right to pursue patent protection of the Software.\n\nPlease note you are prohibited from further transferring the Software -- including any derivatives you make thereof -- to any person or entity. Failure by you to adhere to the requirements in Paragraphs 1 and 2 will result in immediate termination of the license granted to you pursuant to this Academic Software License effective as of the date you first used the Software.\n\nIN NO EVENT SHALL INSTITUTION BE LIABLE TO ANY ENTITY OR PERSON FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE, EVEN IF INSTITUTION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. INSTITUTION SPECIFICALLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS AND IMPLIED, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE IS PROVIDED \u201cAS IS.\u201d INSTITUTION HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS OF THIS SOFTWARE.\n\nCommercial entities: please contact the UCLA Mobility Lab at jiaqima@ucla.edu for licensing opportunities.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A generalized framework for prototyping full-stack cooperative driving automation applications under CARLA+SUMO.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\nOpenCDA is an open co-simulation-based **research/engineering framework** integrated with prototype cooperative driving automation (CDA; see [SAE J3216](https://www.sae.org/standards/content/j3216_202005/)) pipelines as well as regular automated driving components (e.g., perception, localization, planning, control).  It not only enables CDA evaluation in a CARLA + SUMO co-simulation environment but also provides a rich library of source codes of CDA research pipelines.  \nIn collaboration with  [U.S.DOT CDA Research](https://its.dot.gov/cda/) and the [FHWA CARMA Program](https://highways.dot.gov/research/operations/CARMA), OpenCDA, as an open-source project, is designed and built to support <strong>early-stage fundamental research </strong>  for CDA research and development. Through collaboration with CARMA Collaborative, this tool provides a unique capability to the CDA research community and will interface with the [CARMA XiL tools](https://github.com/usdot-fhwa-stol/carma-simulation) being developed by U.S.DOT to support more advanced simulation testing of CDA Features. \n\nThe key features of OpenCDA are:\n* <strong> Research Pipeline </strong>: OpenCDA provides rich research pipelines (i.e., open-source codes for basic and advanced CDA modules, such as platooning, cooperative perception).\n* <strong>Integration</strong>: OpenCDA utilizes CARLA and SUMO separately, as well as integrates them together.\n* <strong> Full-stack Simulation</strong>: OpenCDA provides a simple prototype automated driving and cooperative driving platform, <strong>all in Python</strong>, that contains perception, localization, planning, control, and V2X communication modules.\n* <strong>Modularity</strong>: OpenCDA is highly modularized. \n* <strong>Benchmark</strong>: OpenCDA offers benchmark testing scenarios, benchmark baseline maps, state-of-the-art benchmark algorithms, and benchmark evaluation metrics.\n* <strong>Connectivity and Cooperation</strong>: OpenCDA supports various levels and categories of cooperation between CAVs in simulation. This differentiates OpenCDA from other single vehicle simulation tools. \n",
                "original_header": "OpenCDA"
            },
            "confidence": 0.9735647852556452,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* Our paper [The OpenCDA Open-source Ecosystem for Cooperative Driving Automation Research](https://ieeexplore.ieee.org/document/10045043)\nhas been accepted by **IEEE Transactions on Intelligent Vehicles**. We extend the scope of the original OpenCDA simulation framework to a\necosystem, which contains a model zoo, a suite of driving simulators at various resolutions, large-scale real-world and simulated datasets, complete devel-opment toolkits for benchmark training/testing, and a scenario database/generator. \n",
                "original_header": "Jan 2023"
            },
            "confidence": 0.946114602087721,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* HD Map manager is online! It currently supports generating rasterization map that includes road topology, traffic light info, and dynamic objects around each cav in real-time. This can be\nused for RL planning, HD Map learning, scene understanding, etc.\n \n",
                "original_header": "March 2022"
            },
            "confidence": 0.9399924828216355,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "OpenCDA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "ucla-mobility/OpenCDA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/ucla-mobility/OpenCDA/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/ucla-mobility/OpenCDA/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1008,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "automated-driving-systems, autonomous-driving, connected-and-automated-vehicles, cooperative-driving-automation, simulation",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 197,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ucla-mobility/opencda/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 528043
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 6571
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1199
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/61788043",
                "tag": "v0.1.2",
                "name": "OpenCDA v0.1.2 Release",
                "author": {
                    "name": "DerrickXuNu",
                    "type": "User"
                },
                "description": "##### Map manager\r\nOpenCDA now adds a new component `map_manager` for each cav. It will dynamically load road topology, traffic light information, and dynamic\r\nobjects information around the ego vehicle and save them into rasterized map, which can be useful for RL planning, HDMap learning, scene understanding, etc.\r\nKey elements in the rasterization map:\r\n- Drivable space colored by black\r\n- Lanes\r\n  - Red lane: the lanes that are controlled by red traffic lights\r\n  - Green lane: the lanes that are controlled by green traffic lights\r\n  - Yellow lane: the lanes that are not effected by any traffic light\r\n- Objects are colored by white and represented as rectangles",
                "tarball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/tarball/v0.1.2",
                "zipball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/zipball/v0.1.2",
                "html_url": "https://github.com/ucla-mobility/OpenCDA/releases/tag/v0.1.2",
                "url": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/61788043",
                "release_id": 61788043,
                "date_created": "2022-03-14T17:17:31Z",
                "date_published": "2022-03-14T17:22:22Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/51069421",
                "tag": "v0.1.1",
                "name": "OpenCDA v0.1.1 Release",
                "author": {
                    "name": "DerrickXuNu",
                    "type": "User"
                },
                "description": "Check https://opencda-documentation.readthedocs.io/en/latest/md_files/release_history.html to see more visulizations.\r\n\r\n---\r\n### v0.1.1\r\n#### Cooperative Perception\r\nOpenCDA now supports data dumping simultaneously for multiple CAVs to develop V2V perception \r\nalgorithms offline. The dumped data includes: \r\n- LiDAR data\r\n- RGB camera (4 for each CAV)\r\n- GPS/IMU\r\n- Velocity and future planned trajectory of the CAV\r\n- Surrounding vehicles' bounding box position, velocity <br>\r\n\r\nRun the following script to collect cooperative data:\r\n`python opencda.py -t cooperception_datadump_town06_carla -v 0.9.12(or 0.9.11)`\r\n\r\nBesides the above dumped data, users can also generate the future trajectory for each \r\nvehicle for trajectory prediction purpose. Run `python root_of_opencda/scripts/generate_prediction_yaml.py`\r\nto generate the prediction offline.\r\n\r\nThis new functionality has been proved helpful. The newest paper <strong>OPV2V: An Open Benchmark Dataset and Fusion Pipeline for Perception with Vehicle-to-Vehicle Communication</strong> has utilized this new feature to collect cooperative data. Check https://mobility-lab.seas.ucla.edu/opv2v/ for more information.\r\n\r\n#### CARLA 0.9.12 Support\r\nOpenCDA now supports both CARLA 0.9.12 and 0.9.11. Users needs to set CARLA_VERSION variable before\r\ninstalling OpenCDA. When users run opencda.py, -v argument is required to classify the CARLA version for\r\nOpenCDA to select the correct API.\r\n\r\n#### Weather Parameters\r\nTo help estimate the influence of weather on cooperative driving automation, users now can \r\ndefine weather setting in the yaml file to control sunlight, fog, rain, wetness and other conditions.\r\n\r\n#### Bug Fixes\r\nSome minor bugs in the planning module are fixed.",
                "tarball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/tarball/v0.1.1",
                "zipball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/zipball/v0.1.1",
                "html_url": "https://github.com/ucla-mobility/OpenCDA/releases/tag/v0.1.1",
                "url": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/51069421",
                "release_id": 51069421,
                "date_created": "2021-10-09T02:56:30Z",
                "date_published": "2021-10-09T03:13:30Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/46804641",
                "tag": "v0.1.0",
                "name": "OpenCDA v0.1.0",
                "author": {
                    "name": "DerrickXuNu",
                    "type": "User"
                },
                "description": "The initial release of OpenCDA\r\n\r\n- Integrated with CARLA and Sumo. Supports CARLA only mode and Co-Simulation mode.\r\n- Provides a full-stack automated driving and cooperative driving software system. that contains perception, localization, planning, control, and V2X communication modules.\r\n- Default perception, localization, planning, and control algorithms installed\r\n- Default platooning and cooperative merge algorithms and protocols installed\r\n- V2X feature supported, allowing simulating communication lagging and noise\r\n- 10+ testing scenarios were provided.\r\n- Customized maps were provided for highway testing.\r\n- Benchmark evaluation measurements provided",
                "tarball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/tarball/v0.1.0",
                "zipball_url": "https://api.github.com/repos/ucla-mobility/OpenCDA/zipball/v0.1.0",
                "html_url": "https://github.com/ucla-mobility/OpenCDA/releases/tag/v0.1.0",
                "url": "https://api.github.com/repos/ucla-mobility/OpenCDA/releases/46804641",
                "release_id": 46804641,
                "date_created": "2021-07-26T23:49:52Z",
                "date_published": "2021-07-27T01:52:48Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/setup.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "# Installation\n\n* [__System/Hardware Requirements__](#requirements)\n* [__Local Installation__](#local-installation)\n    * [__1. CARLA installation__](#1-carla-installation0911-required)\n\t    * [1.1 Package installation](#11-package-installation)  \n\t    * [1.2 Build from source](#12-build-from-source)  \n\n    * [__2. Install OpenCDA__](#opencda-installation)\n    * [__3. Install Pytorch and Yolov5 (Optional)__](#3-install-pytorch-and-yolov5optional)\n    * [__4. Install Sumo (Optional)__](#4-install-sumooptional)\n\n* [__Docker Installation__](#docker-installation)\n\n\n---\n## Requirements\nTo get started, the following requirements should be fulfilled.\n* __System requirements.__ Any 64-bits OS should run OpenCDA. We highly recommends Ubuntu  16.04/18.04/20.04.\n\n* __Adequate GPU.__ CARLA is a realistic simulation platform based on Unreal Engine 4, which requires at least a 3GB GPU for smooth scene rendering, though 8GB is recommended.\n* __Disk Space.__ Estimate 100GB of space is recommended to install CARLA and Unreal Engine. \n* __Python__ Python3.7 or higher version is required for full functions.\n\n\n---\n## Local Installation\nTo get OpenCDA v0.1 running with complete functionality, you will need four things: CARLA, OpenCDA, and\nPytorch (optional). Pytorch is required only when you want to activate the perception module; otherwise OpenCDA\nwill retrieve all perception information from the simulation server directly.\n\n###  1. CARLA Installation (>= 0.9.11 required)\n\nThere are two different recommended ways to install the CARLA simulator and either way is fine for using OpenCDA. <br>\nNote: If you want to use the customized highway map with full assets (.fbx, .xml and .xodr) in OpenCDA, \nyou have to build from source. Visit CARLA's tutorial [ADD a new map](https://carla.readthedocs.io/en/latest/tuto_A_add_map_overview/) for more information.\n\n\n#### 1.1 Package Installation\n\n<div class=\"build-buttons\">\n<p>\n<a href=\"https://github.com/carla-simulator/carla/releases\" target=\"_blank\" class=\"btn btn-neutral\" title=\"Go to the latest CARLA release\">\n<span class=\"icon icon-github\"></span> CARLA Released Package</a>\n</p>\n</div>\n\nOpenCDA is tested both at 0.9.11 and 0.9.12.\nTo install CARLA as a precompiled package, download and extract the release file. It contains a precompiled version of the simulator, the Python API module and some scripts to be used as examples. <br>\n\n<strong>Note: The  AdditionalMaps_0.9.1x.tar.gz also need to be downloaded and extract to the CARLA repo to support\nscenario testings in Town06.</strong>\n\n#### 1.2 Build From Source\n\nFor advanced CARLA usage that involves extensive customizations, [Build CARLA from Source](https://carla.readthedocs.io/en/0.9.11/build_linux/) is also supported by OpenCDA. Though source build in \nWindows OS is supported by CARLA, Ubuntu is the preferred OS as the OpenCDA was developoed in Ubuntu 18.04.  \n\n<strong>Note: OpenCDA do not require CARLA source build. However, customized map with building/lane/traffic light/road surface materials assets  in CARLA  require source build. \nVisit CARLA's tutorial [ADD a new map](https://carla.readthedocs.io/en/latest/tuto_A_add_map_overview/) for more information. </strong>\n\n---\n\n### 2. OpenCDA Installation\nFirst, download OpenCDA github to your local folder if you haven't done it yet.\n```sh\ngit clone https://github.com/ucla-mobility/OpenCDA.git\ncd OpenCDA\n```\nMake sure you are in the root dir of OpenCDA, and next let's install the dependencies. <strong>We highly\nrecommend use conda environment to install.</strong> \n\n```sh\nconda env create -f environment.yml\nconda activate opencda\npython setup.py develop\n```\n\nIf conda install failed,  install through pip\n```sh\npip install -r requirements.txt\n```\n\nAfter dependencies are installed, we need to install the CARLA python library into opencda conda environment.\nYou can do this by running this script:\n```sh\nexport CARLA_HOME=/path/to/your/CARLA_ROOT\nexport CARLA_VERSION=0.9.11 #or 0.9.12 depends on your CARLA\n. setup.sh\n```\nIf everything works correctly, you will see a cache folder is created in your OpenCDA root dir, and the terminal shows\n\"Successful Setup!\". To double check the carla package is correctly installed, run the following command and \nthere should be no error.\n```sh\npython -c \"import carla\" # check whether carla is installed correctly.\n```\n<strong>Note: If you are using Python other than 3.7 and CARLA < 0.9.11 then you have to change the setup.sh to your\ncarla version's egg file or manually installed carla to your conda environment.</strong>\n\n\n### 3. Install Pytorch and Yolov5 (Optional)\nThis section is only needed for the users who want to test perception algorithms. By default, OpenCDA does not require\npytorch installed and it retrieves the object positions from the server directly. Once perception module is activated,\nthen OpenCDA will use yolov5 with pytorch to run object detection. <br>\nTo install pytorch based on your GPU and cuda version, go to the official pytorch website and install with conda command. Make\nsure you install pytorch >= 1.7.0.  <strong>GPU Version highly recommended!</strong>\n<div class=\"build-buttons\">\n<p>\n<a href=\"https://pytorch.org/\" target=\"_blank\" class=\"btn btn-neutral\" title=\"Pytorch\">\n<span class=\"icon icon-github\"></span>Pytorch Official Website</a>\n</p>\n</div>\n\nThe command belows shows an example of installing pytorch v1.8.0 with cuda 11.1 in opencda\nenvironment.\n\n```sh\n\nconda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge\n\n```\n\nAfter pytorch installation, install the requirements for Yolov5. <br>\n```sh\npip install -qr https://raw.githubusercontent.com/ultralytics/yolov5/master/requirements.txt  # install dependencies\n```\n\n### 4. Install SUMO (Optional)\nSUMO installation is only required for the users who require to conduct co-simulation testing and use future release of SUMO-only mode.\n\nYou can install SUMO directly by apt-get:\n```sh\nsudo add-apt-repository ppa:sumo/stable\nsudo apt-get update\nsudo apt-get install sumo sumo-tools sumo-doc\n```\nAfter that, install the traci python package.\n```sh\npip install traci\n```\nFinally, add the following path to your ~/.bashrc:\n```yaml\nexport SUMO_HOME=/usr/share/sumo\n```\n---\n\n### 5. Install OpenScenario (Optional)\nIf you want to use OpenScenario to conduct scenario testing, e.g. `python opencda.py -t openscenario_carla -v 0.9.12`, you need to install OpenScenario first. <br>\n\nPlease follow the [openscenario installation](coperception/setup_scenario_runner.md) to install OpenScenario.\n\n## Docker Installation\nOpenCDA provides docker image for users to run directly.\n\nNote: Openscenario is not supported in docker image yet.\n\n### 1. Prerequisite\nFirst, make sure that you have installed `docker` in your ubuntu system. If you have nvidia gpu, it is recommended to\ninstall `nvidia-docker` as well.\n\n### 2. Dockerfile Modification\nNext, modify the Dockerfile based on your system. Some parameters you may want to pay attentions are:\n\n- `CARLA_VERSION`: Change to the version you want. Notice after(including) OpenCDA 0.1.4, only CARLA >= 0.9.14 will be supported.\n- `FROM nvidia/vulkan:1.3-470`: If you want the carla run with rendering in the docker, make sure the graphics driver is set to the same\nas your local computer. For instance, mine is `FROM nvidia/cuda-11.4.2.0-ase-ubuntu2004`\n- `OPENCDA_FULL_INSTALL`: If set true, it will run the `setup.sh` in OpenCDA automatically during building up the docker to install carla api into the python environment.\nif set to false, then you need to go to your docker container after building to manually run `setup.sh`\n\n### 3. Build up the docker\n```shell\ncd OpenCDA\ndocker build -t opencda_container .\n```\n\n### 4. Run the docker\nThe following command will allow you run Carla with rendering in your docker. If the rendering is the black,\nthen you probably build up the wrong nvidia graphics driver.\n```shell\nxhost +local: \n\ndocker run -it --rm \\\n  -e DISPLAY=$DISPLAY \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -v $HOME/.Xauthority:/root/.Xauthority \\\n  --name opencda_container opencda_docker /bin/bash\n```\n\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/docs/md_files/installation.md"
        },
        {
            "result": {
                "value": "* [Overview](https://opencda-documentation.readthedocs.io/en/latest/md_files/introduction.html)\n* [Installation](https://opencda-documentation.readthedocs.io/en/latest/md_files/installation.html)\n* [Quick Start](https://opencda-documentation.readthedocs.io/en/latest/md_files/getstarted.html)\n* [Logic Flow](https://opencda-documentation.readthedocs.io/en/latest/md_files/logic_flow.html)\n* [Traffic Generation](https://opencda-documentation.readthedocs.io/en/latest/md_files/traffic_generation.html)\n\n\nNote: We continuously improve the performance of OpenCDA. Currently, it is mainly tested in our customized maps and\n Carla town06 map; therefore, we <strong>DO NOT </strong> guarantee the same level of  robustness in other maps.\n",
                "type": "Text_excerpt",
                "original_header": "Users Guide",
                "parent_header": [
                    "OpenCDA",
                    "Get Started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": "*  [Class Design](https://opencda-documentation.readthedocs.io/en/latest/md_files/developer_tutorial.html)\n*  [Customize Your Algorithms](https://opencda-documentation.readthedocs.io/en/latest/md_files/customization.html)\n*  [API Reference](https://opencda-documentation.readthedocs.io/en/latest/modules.html) <br>\n\n",
                "type": "Text_excerpt",
                "original_header": "Developer Guide",
                "parent_header": [
                    "OpenCDA",
                    "Get Started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": " ![teaser](docs/md_files/images/platoon_joining_2lanefree_complete.gif)\n\n",
                "type": "Text_excerpt",
                "original_header": "Get Started",
                "parent_header": [
                    "OpenCDA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": "We welcome your contributions.\n- Please report bugs and improvements by submitting issues.\n- Submit your contributions using [pull requests](https://github.com/ucla-mobility/OpenCDA/pulls).\n Please use [this template](.github/PR_TEMPLATE.md) for your pull requests.\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Contribution Rule",
                "parent_header": [
                    "OpenCDA",
                    "Get Started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": " If you are using our OpenCDA framework or codes for your development, please cite the following paper:\n ```bibtex\n@inproceedings{xu2021opencda,\n  title={OpenCDA: an open cooperative driving automation framework integrated with co-simulation},\n  author={Xu, Runsheng and Guo, Yi and Han, Xu and Xia, Xin and Xiang, Hao and Ma, Jiaqi},\n  booktitle={2021 IEEE International Intelligent Transportation Systems Conference (ITSC)},\n  pages={1155--1162},\n  year={2021},\n  organization={IEEE}\n}\n```\nThe arxiv link to the paper:  https://arxiv.org/abs/2107.06260\n\nAlso, under this LICENSE, OpenCDA is for non-commercial research only. Researchers can modify the source code for their own research only. Contracted work that generates corporate revenues and other general commercial use are prohibited under this LICENSE. See the LICENSE file for details and possible opportunities for commercial use.\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "OpenCDA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{xu2021opencda,\n    organization = {IEEE},\n    year = {2021},\n    pages = {1155--1162},\n    booktitle = {2021 IEEE International Intelligent Transportation Systems Conference (ITSC)},\n    author = {Xu, Runsheng and Guo, Yi and Han, Xu and Xia, Xin and Xiang, Hao and Ma, Jiaqi},\n    title = {OpenCDA: an open cooperative driving automation framework integrated with co-simulation},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "OpenCDA: an open cooperative driving automation framework integrated with co-simulation",
                "author": "Xu, Runsheng and Guo, Yi and Han, Xu and Xia, Xin and Xiang, Hao and Ma, Jiaqi"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "contributors": [
        {
            "result": {
                "value": "OpenCDA is mainly supported by the [UCLA Mobility Lab](https://mobility-lab.seas.ucla.edu/). <br>\n",
                "type": "Text_excerpt",
                "original_header": "Contributors",
                "parent_header": [
                    "OpenCDA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": "- Dr. Jiaqi Ma ([linkedin](https://www.linkedin.com/in/jiaqi-ma-17037838/),\n               [UCLA Samueli](https://samueli.ucla.edu/people/jiaqi-ma/))\n",
                "type": "Text_excerpt",
                "original_header": "Lab Principal Investigator:",
                "parent_header": [
                    "OpenCDA",
                    "Contributors"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": " - Runsheng Xu ([linkedin](https://www.linkedin.com/in/runsheng-xu/), [github](https://github.com/DerrickXuNu))  <br>\n",
                "type": "Text_excerpt",
                "original_header": "Project Lead: <br>",
                "parent_header": [
                    "OpenCDA",
                    "Contributors"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": " - Xu Han ([linkedin](https://linkedin.com/in/xu-han-12851a64), [github](https://github.com/xuhan417))\n - Hao Xiang ([linkedin](https://www.linkedin.com/in/hao-xiang-42bb5a1b2/), [github](https://github.com/XHwind))\n - Zhaoliang Zheng([linkedin](https://www.linkedin.com/in/zhaoliang-zheng-905532171/)\n - Zonglin Meng([linkedin](https://www.linkedin.com/in/zonglin-meng-a393b31ab/)\n - Dr. Xin Xia ([linkedin](https://www.linkedin.com/in/yi-guo-4008baaa/))\n",
                "type": "Text_excerpt",
                "original_header": "Team Members:",
                "parent_header": [
                    "OpenCDA",
                    "Contributors"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "value": "- We would  like to acknowledge the great contributions from UC Davis Professor [Junshan Zhang's](https://faculty.engineering.ucdavis.edu/jzhang/) group,  particularly to Dr. [Wei Shao](https://scholar.google.com.au/citations?user=zbqNhWwAAAAJ&hl=en), who played a crucial role in this collaboration. Their expertise enabled the seamless integration of openScenario with OpenCDA.\n- We would like to thank @GoodarzMehr for his outstanding contribution in creating the OpenCDA Dockerfile.\n",
                "type": "Text_excerpt",
                "original_header": "External Contributor Acknowledgements",
                "parent_header": [
                    "OpenCDA",
                    "Contributors"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "- We would  like to acknowledge the great contributions from UC Davis Professor [Junshan Zhang's](https://faculty.engineering.ucdavis.edu/jzhang/) group,  particularly to Dr. [Wei Shao](https://scholar.google.com.au/citations?user=zbqNhWwAAAAJ&hl=en), who played a crucial role in this collaboration. Their expertise enabled the seamless integration of openScenario with OpenCDA.\n- We would like to thank @GoodarzMehr for his outstanding contribution in creating the OpenCDA Dockerfile.\n",
                "type": "Text_excerpt",
                "original_header": "External Contributor Acknowledgements",
                "parent_header": [
                    "OpenCDA",
                    "Contributors"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "OpenCDA"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "related_documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://opencda-documentation.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/docs/md_files/images/OpenCDA_new_diagrams.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/docs/md_files/images/platoon_joining_2lanefree_complete.gif"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2203.10638.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2109.07644"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2107.06260\n\nAlso, under this LICENSE, OpenCDA is for non-commercial research only. Researchers can modify the source code for their own research only. Contracted work that generates corporate revenues and other general commercial use are prohibited under this LICENSE. See the LICENSE file for details and possible opportunities for commercial use.\n\n## Contributors\nOpenCDA is mainly supported by the [UCLA Mobility Lab](https://mobility-lab.seas.ucla.edu/"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
        }
    ]
}