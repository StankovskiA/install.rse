{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:00:07"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/coinse/sadl",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "coinse",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2018-11-27T04:58:24Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-13T07:11:07Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2019 COINSE KAIST\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Code release of a paper \"Guiding Deep Learning System Testing using Surprise Adequacy\"",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "\r\nThis archive includes code for computing Surprise Adequacy (SA) and Surprise Coverage (SC), which are basic components of the main experiments in the paper. Currently, the \"run.py\" script contains a simple example that calculates SA and SC of a test set and an adversarial set generated using FGSM method for the MNIST dataset, only considering the last hidden layer (activation_3). Layer selection can be easily changed by modifying `layer_names` in run.py.\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Introduction",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\n- `run.py` - Script processing SA with a benign dataset and adversarial examples (MNIST and CIFAR-10).\r\n- `sa.py` - Tools that fetch activation traces, compute LSA and DSA, and coverage.\r\n- `train_model.py` - Model training script for MNIST and CIFAR-10. It keeps the trained models in the \"model\" directory (code from [Ma et al.](https://github.com/xingjunm/lid_adversarial_subspace_detection)).\r\n- `model` directory - Used for saving models.\r\n- `tmp` directory - Used for saving activation traces and prediction arrays.\r\n- `adv` directory - Used for saving adversarial examples.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Files and Directories",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\n- `-d` - The subject dataset (either mnist or cifar). Default is mnist.\r\n- `-lsa` - If set, computes LSA.\r\n- `-dsa` - If set, computes DSA.\r\n- `-target` - The name of target input set. Default is `fsgm`.\r\n- `-save_path` - The temporal save path of AT files. Default is tmp directory.\r\n- `-batch_size` - Batch size. Default is 128.\r\n- `-var_threshold` - Variance threshold. Default is 1e-5.\r\n- `-upper_bound` - Upper bound of SA. Default is 2000.\r\n- `-n_bucket` - The number of buckets for coverage. Default is 1000.\r\n- `-num_classes` - The number of classes in dataset. Default is 10.\r\n- `-is_classification` - Set if task is classification problem. Default is True.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Command-line Options of run.py",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\nTo reproduce the result of [Udacity self-driving car challenge](https://github.com/udacity/self-driving-car/tree/master/challenges/challenge-2), please refer to the [DeepXplore](https://github.com/peikexin9/deepxplore) and [DeepTest](https://github.com/ARiSE-Lab/deepTest) repositories, which contain information about the dataset, models ([Dave-2](https://github.com/peikexin9/deepxplore/tree/master/Driving), [Chauffeur](https://github.com/udacity/self-driving-car/tree/master/steering-models/community-models/chauffeur)), and synthetic data generation processes. It might take a few hours to get the dataset and the models due to their sizes.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Udacity Self-driving Car Challenge",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "sadl",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "coinse/sadl",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/coinse/sadl/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/coinse/sadl/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 46,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "surprise-adequacy, testing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 19,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/coinse/sadl/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 20895
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/coinse/sadl/releases/15769535",
                "tag": "v1.0.0",
                "name": "Initial Release",
                "author": {
                    "name": "dbr7",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/coinse/sadl/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/coinse/sadl/zipball/v1.0.0",
                "html_url": "https://github.com/coinse/sadl/releases/tag/v1.0.0",
                "url": "https://api.github.com/repos/coinse/sadl/releases/15769535",
                "release_id": 15769535,
                "date_created": "2019-02-26T01:52:15Z",
                "date_published": "2019-02-26T01:55:48Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/coinse/sadl/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/coinse/sadl/tree/master/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "[![DOI](https://zenodo.org/badge/159278402.svg)](https://zenodo.org/badge/latestdoi/159278402)\r\n\r\nCode release of a paper [\"Guiding Deep Learning System Testing using Surprise Adequacy\"](https://arxiv.org/abs/1808.08444)\r\n\r\nIf you find this paper helpful, consider cite the paper:\r\n\r\n```\r\n@inproceedings{Kim2019aa,\r\n\tAuthor = {Jinhan Kim and Robert Feldt and Shin Yoo},\r\n\tBooktitle = {Proceedings of the 41th International Conference on Software Engineering},\t\r\n\tPages = {1039-1049},\r\n\tPublisher = {IEEE Press},\r\n\tSeries = {ICSE 2019},\r\n\tTitle = {Guiding Deep Learning System Testing using Surprise Adequacy},\r\n\tYear = {2019}}\r\n}\r\n```\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Guiding Deep Learning System Testing using Surprise Adequacy"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\n- `run.py` - Script processing SA with a benign dataset and adversarial examples (MNIST and CIFAR-10).\r\n- `sa.py` - Tools that fetch activation traces, compute LSA and DSA, and coverage.\r\n- `train_model.py` - Model training script for MNIST and CIFAR-10. It keeps the trained models in the \"model\" directory (code from [Ma et al.](https://github.com/xingjunm/lid_adversarial_subspace_detection)).\r\n- `model` directory - Used for saving models.\r\n- `tmp` directory - Used for saving activation traces and prediction arrays.\r\n- `adv` directory - Used for saving adversarial examples.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Files and Directories",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\n- `-d` - The subject dataset (either mnist or cifar). Default is mnist.\r\n- `-lsa` - If set, computes LSA.\r\n- `-dsa` - If set, computes DSA.\r\n- `-target` - The name of target input set. Default is `fsgm`.\r\n- `-save_path` - The temporal save path of AT files. Default is tmp directory.\r\n- `-batch_size` - Batch size. Default is 128.\r\n- `-var_threshold` - Variance threshold. Default is 1e-5.\r\n- `-upper_bound` - Upper bound of SA. Default is 2000.\r\n- `-n_bucket` - The number of buckets for coverage. Default is 1000.\r\n- `-num_classes` - The number of classes in dataset. Default is 10.\r\n- `-is_classification` - Set if task is classification problem. Default is True.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Command-line Options of run.py",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\nTo reproduce the result of [Udacity self-driving car challenge](https://github.com/udacity/self-driving-car/tree/master/challenges/challenge-2), please refer to the [DeepXplore](https://github.com/peikexin9/deepxplore) and [DeepTest](https://github.com/ARiSE-Lab/deepTest) repositories, which contain information about the dataset, models ([Dave-2](https://github.com/peikexin9/deepxplore/tree/master/Driving), [Chauffeur](https://github.com/udacity/self-driving-car/tree/master/steering-models/community-models/chauffeur)), and synthetic data generation processes. It might take a few hours to get the dataset and the models due to their sizes.\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Udacity Self-driving Car Challenge",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\n- If you encounter `ValueError: Input contains NaN, infinity or a value too large for dtype ('float64').` error, you need to increase the variance threshold. Please refer to the configuration details in the paper (Section IV-C).\r\n- Images were processed by clipping its pixels in between -0.5 and 0.5.\r\n- If you want to select specific layers, you can modify the layers array in `run.py`.\r\n- Coverage may vary depending on the upper bound.\r\n- For speed-up, use GPU-based tensorflow.\r\n- [All experimental results](https://coinse.github.io/sadl/)\r\n  \r",
                "type": "Text_excerpt",
                "original_header": "Notes",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "> [Update April, 2021] Checkout a recent  with fast, efficient implementation of SA: https://github.com/testingautomated-usi/surprise-adequacy. Big thanks to the authors! :smiley: \n"
            },
            "confidence": 0.954220282617401,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "\r\nWe used the framework by [Ma et al.](https://github.com/xingjunm/lid_adversarial_subspace_detection) to generate various adversarial examples (FGSM, BIM-A, BIM-B, JSMA, and C&W). Please refer to [craft_adv_samples.py](https://github.com/xingjunm/lid_adversarial_subspace_detection/blob/master/craft_adv_examples.py) in the above repository of Ma et al., and put them in the `adv` directory. For a basic usage example, there is an included adversarial set generated by the FSGM method for MNIST (See file ./adv/adv_mnist_fgsm.npy).\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Generating Adversarial Examples",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "\r\nOur implementation is based on Python 3.5.2, Tensorflow 1.9.0, Keras 2.2, Numpy 1.14.5. Details are listed in `requirements.txt`.\r\n\r\nThis is a simple example of installation and computing LSA or DSA of a test set and FGSM in MNIST dataset.\r\n\r\n```bash\r\n# install Python dependencies\r\npip install -r requirements.txt\r\n\r\n# train a model\r\npython train_model.py -d mnist\r\n\r\n# calculate LSA, coverage, and ROC-AUC score\r\npython run.py -lsa\r\n\r\n# calculate DSA, coverage, and ROC-AUC score\r\npython run.py -dsa\r\n```\r\n\r",
                "type": "Text_excerpt",
                "original_header": "How to Use",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "\r\n- [DeepXplore](https://github.com/peikexin9/deepxplore)\r\n- [DeepTest](https://github.com/ARiSE-Lab/deepTest)\r\n- [Detecting Adversarial Samples from Artifacts](https://github.com/rfeinman/detecting-adversarial-samples)\r\n- [Characterizing Adversarial Subspaces Using Local Intrinsic Dimensionality](https://github.com/xingjunm/lid_adversarial_subspace_detection)\r\n",
                "type": "Text_excerpt",
                "original_header": "References",
                "parent_header": [
                    "Guiding Deep Learning System Testing using Surprise Adequacy"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{Kim2019aa,\n    year = {2019},\n    title = {Guiding Deep Learning System Testing using Surprise Adequacy},\n    series = {ICSE 2019},\n    publisher = {IEEE Press},\n    pages = {1039-1049},\n    booktitle = {Proceedings of the 41th International Conference on Software Engineering},\n    author = {Jinhan Kim and Robert Feldt and Shin Yoo},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Guiding Deep Learning System Testing using Surprise Adequacy",
                "author": "Jinhan Kim and Robert Feldt and Shin Yoo"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "identifier": [
        {
            "result": {
                "type": "Url",
                "value": "https://zenodo.org/badge/latestdoi/159278402"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Guiding Deep Learning System Testing using Surprise Adequacy"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2103.05939"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1808.08444"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
        }
    ]
}