{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 18:37:05"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/RICSecLab/SLOPTAFLpp",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "RICSecLab",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-06-29T06:25:43Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-16T04:12:11Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/LICENSE"
        }
    ],
    "name": [
        {
            "result": {
                "value": "SLOPTAFLpp",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "RICSecLab/SLOPTAFLpp",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 14,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ricseclab/sloptaflpp/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 3525825
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 675284
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 196338
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 162408
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 150621
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Rust",
                "name": "Rust",
                "type": "Programming_language",
                "size": 36006
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 18339
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "TypeScript",
                "name": "TypeScript",
                "type": "Programming_language",
                "size": 11023
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "HTML",
                "name": "HTML",
                "type": "Programming_language",
                "size": 3453
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 3049
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 1955
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CMake",
                "name": "CMake",
                "type": "Programming_language",
                "size": 1654
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CodeQL",
                "name": "CodeQL",
                "type": "Programming_language",
                "size": 1377
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Rich Text Format",
                "name": "Rich Text Format",
                "type": "Programming_language",
                "size": 21
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/releases/77076184",
                "tag": "latest",
                "name": "The results of the Magma benchmark",
                "author": {
                    "name": "potetisensei",
                    "type": "User"
                },
                "description": "`slopt_magma_jsons.tar.gz` contains the summary of the Magma benchmark (Section 5.4) as JSON files, which was generated by [exp2json.py](https://hexhive.epfl.ch/magma/docs/technical.html#exp2jsonpy).\r\n\r\nPlease ignore \"Source code (zip)\" and \"Source code (tar.gz)\". We use GitHub's release feature to attach the JSON files and the two files are automatically added.",
                "tarball_url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/tarball/latest",
                "zipball_url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/zipball/latest",
                "html_url": "https://github.com/RICSecLab/SLOPTAFLpp/releases/tag/latest",
                "url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/releases/77076184",
                "release_id": 77076184,
                "date_created": "2022-09-13T12:51:23Z",
                "date_published": "2022-09-14T05:14:50Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/releases/77075100",
                "tag": "baseline",
                "name": "The results of the FuzzBench benchmark and Bandit Algorithm Comparison",
                "author": {
                    "name": "potetisensei",
                    "type": "User"
                },
                "description": "`slopt_fuzzbench_and_bandit_plot_data.tar.gz` contains all `plot_data` of fuzzer instances that were run in the FuzzBench benchmark (Section 5.3) and Bandit Algorithm Comparison (Section 4.3).\r\n\r\nPlease ignore \"Source code (zip)\" and \"Source code (tar.gz)\". We use GitHub's release feature to attach `plot_data`s and the two files are automatically added.",
                "tarball_url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/tarball/baseline",
                "zipball_url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/zipball/baseline",
                "html_url": "https://github.com/RICSecLab/SLOPTAFLpp/releases/tag/baseline",
                "url": "https://api.github.com/repos/RICSecLab/SLOPTAFLpp/releases/77075100",
                "release_id": 77075100,
                "date_created": "2022-06-30T01:52:14Z",
                "date_published": "2022-09-14T05:06:17Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/frida_mode/many-linux/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/frida_mode/many-linux/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# How to submit a Pull Request to AFLplusplus\n\nAll contributions (pull requests) must be made against our `dev` branch.\n\nEach modified source file, before merging, must be formatted.\n\n```\nmake code-format\n```\n\nThis should be fine if you modified one of the files already present in the\nproject, or added a file in a directory we already format, otherwise run:\n\n```\n./.custom-format.py -i file-that-you-have-created.c\n```\n\nRegarding the coding style, please follow the AFL style.\nNo camel case at all and use AFL's macros wherever possible\n(e.g. WARNF, FATAL, MAP_SIZE, ...).\n\nRemember that AFLplusplus has to build and run on many platforms, so\ngeneralize your Makefiles/GNUmakefile (or your patches to our pre-existing\nMakefiles) to be as generic as possible.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/CONTRIBUTING.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/ricseclab/sloptaflpp/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/frida_mode/update_frida_version.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/frida_mode/util/get_symbol_addr.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/qemu_mode/update_ref.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/qemu_mode/build_qemu_support.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/asan_cgroups/limit_memory.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/analysis_scripts/queue2csv.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/distributed_fuzzing/sync_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/crash_triage/triage_crashes.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/autodict_ql/build-codeql.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/utils/qbdi_mode/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/unicorn_mode/build_unicorn_support.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/unicorn_mode/update_uc_ref.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/unicorn_mode/samples/persistent/sample_all.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/unicorn_mode/samples/c/sample_all.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/custom_mutators/grammar_mutator/update_grammar_ref.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/custom_mutators/grammar_mutator/build_grammar_mutator.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "# Installation instructions\n\n  This document provides basic installation instructions and discusses known\n  issues for a variety of platforms. See README.md for the general instruction\n  manual.\n\n## 1. Linux on x86\n---------------\n\nThis platform is expected to work well. Compile the program with:\n\n```bash\nmake\n```\n\nYou can start using the fuzzer without installation, but it is also possible to\ninstall it with:\n\n```bash\nsudo make install\n```\n\nThere are no special dependencies to speak of; you will need GNU make and a\nworking compiler (gcc or clang). Some of the optional scripts bundled with the\nprogram may depend on bash, gdb, and similar basic tools.\n\nIf you are using clang, please review README.llvm.md; the LLVM\nintegration mode can offer substantial performance gains compared to the\ntraditional approach.\n\nLikewise, if you are using GCC, please review instrumentation/README.gcc_plugin.md.\n\nYou may have to change several settings to get optimal results (most notably,\ndisable crash reporting utilities and switch to a different CPU governor), but\nafl-fuzz will guide you through that if necessary.\n\n## 2. OpenBSD, FreeBSD, NetBSD on x86\n\nSimilarly to Linux, these platforms are expected to work well and are\nregularly tested. Compile everything with GNU make:\n\n```bash\ngmake\n```\n\nNote that BSD make will *not* work; if you do not have gmake on your system,\nplease install it first. As on Linux, you can use the fuzzer itself without\ninstallation, or install it with:\n\n```\nsudo gmake install\n```\n\nKeep in mind that if you are using csh as your shell, the syntax of some of the\nshell commands given in the README.md and other docs will be different.\n\nThe `llvm` requires a dynamically linked, fully-operational installation of\nclang. At least on FreeBSD, the clang binaries are static and do not include\nsome of the essential tools, so if you want to make it work, you may need to\nfollow the instructions in README.llvm.md.\n\nBeyond that, everything should work as advertised.\n\nThe QEMU mode is currently supported only on Linux. I think it's just a QEMU\nproblem, I couldn't get a vanilla copy of user-mode emulation support working\ncorrectly on BSD at all.\n\n## 3. MacOS X on x86 and arm64 (M1)\n\nMacOS X should work, but there are some gotchas due to the idiosyncrasies of\nthe platform. On top of this, I have limited release testing capabilities\nand depend mostly on user feedback.\n\nTo build AFL, install llvm (and perhaps gcc) from brew and follow the general\ninstructions for Linux. If possible avoid Xcode at all cost.\n\nafl-gcc will fail unless you have GCC installed, but that is using outdated\ninstrumentation anyway. You don't want that.\n\nThe crash reporting daemon that comes by default with MacOS X will cause\nproblems with fuzzing. You need to turn it off by following the instructions\nprovided here: http://goo.gl/CCcd5u\n\nThe `fork()` semantics on OS X are a bit unusual compared to other unix systems\nand definitely don't look POSIX-compliant. This means two things:\n\n  - Fuzzing will be probably slower than on Linux. In fact, some folks report\n    considerable performance gains by running the jobs inside a Linux VM on\n    MacOS X.\n  - Some non-portable, platform-specific code may be incompatible with the\n    AFL forkserver. If you run into any problems, set `AFL_NO_FORKSRV=1` in the\n    environment before starting afl-fuzz.\n\nUser emulation mode of QEMU does not appear to be supported on MacOS X, so\nblack-box instrumentation mode (`-Q`) will not work.\nHowever Frida mode (`-O`) should work on x86 and arm64 MacOS boxes.\n\nMacOS X supports SYSV shared memory used by AFL's instrumentation, but the\ndefault settings aren't usable with AFL++. The default settings on 10.14 seem\nto be:\n\n```bash\n$ ipcs -M\nIPC status from <running system> as of XXX\nshminfo:\n        shmmax: 4194304 (max shared memory segment size)\n        shmmin:       1 (min shared memory segment size)\n        shmmni:      32 (max number of shared memory identifiers)\n        shmseg:       8 (max shared memory segments per process)\n        shmall:    1024 (max amount of shared memory in pages)\n```\n\nTo temporarily change your settings to something minimally usable with AFL++,\nrun these commands as root:\n\n```bash\nsysctl kern.sysv.shmmax=8388608\nsysctl kern.sysv.shmall=4096\n```\n\nIf you're running more than one instance of AFL you likely want to make `shmall`\nbigger and increase `shmseg` as well:\n\n```bash\nsysctl kern.sysv.shmmax=8388608\nsysctl kern.sysv.shmseg=48\nsysctl kern.sysv.shmall=98304\n```\n\nSee http://www.spy-hill.com/help/apple/SharedMemory.html for documentation for\nthese settings and how to make them permanent.\n\n## 4. Linux or *BSD on non-x86 systems\n\nStandard build will fail on non-x86 systems, but you should be able to\nleverage two other options:\n\n  - The LLVM mode (see README.llvm.md), which does not rely on\n    x86-specific assembly shims. It's fast and robust, but requires a\n    complete installation of clang.\n  - The QEMU mode (see qemu_mode/README.md), which can be also used for\n    fuzzing cross-platform binaries. It's slower and more fragile, but\n    can be used even when you don't have the source for the tested app.\n\nIf you're not sure what you need, you need the LLVM mode, which is built by\ndefault.\n\n...and compile your target program with afl-clang-fast or afl-clang-fast++\ninstead of the traditional afl-gcc or afl-clang wrappers.\n\n## 5. Solaris on x86\n\nThe fuzzer reportedly works on Solaris, but I have not tested this first-hand,\nand the user base is fairly small, so I don't have a lot of feedback.\n\nTo get the ball rolling, you will need to use GNU make and GCC or clang. I'm\nbeing told that the stock version of GCC that comes with the platform does not\nwork properly due to its reliance on a hardcoded location for 'as' (completely\nignoring the `-B` parameter or `$PATH`).\n\nTo fix this, you may want to build stock GCC from the source, like so:\n\n```sh\n./configure --prefix=$HOME/gcc --with-gnu-as --with-gnu-ld \\\n  --with-gmp-include=/usr/include/gmp --with-mpfr-include=/usr/include/mpfr\nmake\nsudo make install\n```\n\nDo *not* specify `--with-as=/usr/gnu/bin/as` - this will produce a GCC binary that\nignores the `-B` flag and you will be back to square one.\n\nNote that Solaris reportedly comes with crash reporting enabled, which causes\nproblems with crashes being misinterpreted as hangs, similarly to the gotchas\nfor Linux and MacOS X. AFL does not auto-detect crash reporting on this\nparticular platform, but you may need to run the following command:\n\n```sh\ncoreadm -d global -d global-setid -d process -d proc-setid \\\n  -d kzone -d log\n```\n\nUser emulation mode of QEMU is not available on Solaris, so black-box\ninstrumentation mode (`-Q`) will not work.\n\n## 6. Everything else\n\nYou're on your own. On POSIX-compliant systems, you may be able to compile and\nrun the fuzzer; and the LLVM and GCC plugin modes may offer a way to instrument\nnon-x86 code.\n\nThe fuzzer will run on Windows in WSL only. It will not work under Cygwin on in the normal Windows world. It\ncould be ported to the latter platform fairly easily, but it's a pretty bad\nidea, because Cygwin is extremely slow. It makes much more sense to use\nVirtualBox or so to run a hardware-accelerated Linux VM; it will run around\n20x faster or so. If you have a *really* compelling use case for Cygwin, let\nme know.\n\nAlthough Android on x86 should theoretically work, the stock kernel may have\nSHM support compiled out, and if so, you may have to address that issue first.\nIt's possible that all you need is this workaround:\n\n  https://github.com/pelya/android-shmem\n\nJoshua J. Drake notes that the Android linker adds a shim that automatically\nintercepts `SIGSEGV` and related signals. To fix this issue and be able to see\ncrashes, you need to put this at the beginning of the fuzzed program:\n\n```sh\n  signal(SIGILL, SIG_DFL);\n  signal(SIGABRT, SIG_DFL);\n  signal(SIGBUS, SIG_DFL);\n  signal(SIGFPE, SIG_DFL);\n  signal(SIGSEGV, SIG_DFL);\n```\n\nYou may need to `#include <signal.h>` first.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/docs/INSTALL.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "You can pull the prebuilt docker images via docker hub:\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/slopt-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/karamcheti-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/cmfuzz-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/havoc_mab-aflpp \nAlternatively, you can use Dockerfile in the top directory of each branch to build these images locally.\nMoreover, of course you can build these fuzzers in almost the same way as the unaltered AFL++ on the host environment because they additionally require only the GNU Scientific Library. In Debian/Ubuntu, it can be installed as the package `libgsl-dev`. \n",
                "original_header": "How to build"
            },
            "confidence": 0.9995869810405229,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To run these benchmarks, please follow the instructions of FuzzBench and Magma:\n  - https://google.github.io/fuzzbench/getting-started/adding-a-new-fuzzer/\n  - https://hexhive.epfl.ch/magma/docs/getting-started.html \nFor Magma, we also made it possible to take the benchmark with one command in https://github.com/RICSecLab/SLOPT_magma. \n",
                "original_header": "How to take the benchmarks taken in our paper"
            },
            "confidence": 0.9989998724785716,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "In all the images, the built fuzzer is registered as the `afl-fuzz` command.\nThe basic usage of the fuzzers is the same as the unaltered AFL++.\nTo run the fuzzers, you need to give the paths to program, the initial seeds, and the output directory at least (e.g. `afl-fuzz -i ./seeds/ -o ./output -- ./program @@`). \nOf course, you can feed the other command line arguments the same way as AFL++.\n\nHowever, note that you should never use `-L` because it enables MOpt instead of each online optimization method incorporated.\n\nNote that for some cases, afl-fuzz will complain about your environment. \nIn such case, basically, please follow the instruction shown as an error message.\nFor example, if your `core_pattern` setting is not suitable for fuzzing, typically, afl-fuzz shows the following message:\n\n```\n[-] Hmm, your system is configured to send core dump notifications to an\n    external utility. This will cause issues: there will be an extended delay\n    between stumbling upon a crash and having this information relayed to the\n    fuzzer via the standard waitpid() API.\n    If you're just testing, set 'AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1'.\n\n    To avoid having crashes misinterpreted as timeouts, please log in as root\n    and temporarily modify /proc/sys/kernel/core_pattern, like so:\n\n    echo core >/proc/sys/kernel/core_pattern\n\n[-] PROGRAM ABORT : Pipe at the beginning of 'core_pattern'\n         Location : check_crash_handling(), src/afl-fuzz-init.c:2219\n```\nIn this case, you have to update your <strong>host machine's</strong> `core_pattern` by `echo core >/proc/sys/kernel/core_pattern`.\n\nAnother example is \n\n```\nWhoops, your system uses on-demand CPU frequency scaling, adjusted\nbetween 1562 and 3222 MHz. Unfortunately, the scaling algorithm in the\nkernel is imperfect and can miss the short-lived processes spawned by\nafl-fuzz. To keep things moving, run these commands as root:\n\ncd /sys/devices/system/cpu\necho performance | tee cpu*/cpufreq/scaling_governor\n\nYou can later go back to the original state by replacing 'performance' with\n'ondemand'. If you don't want to change the settings, set AFL_SKIP_CPUFREQ\nto make afl-fuzz skip this check - but expect some performance drop.\n```\n\nIn this case, you can skip this message just by enabling `AFL_SKIP_CPUFREQ`, but we recommend updating `scaling_governor`.\n\n",
                "type": "Text_excerpt",
                "original_header": "How to use"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "```\n@inproceedings{SLOPT-ACSAC22,\n  author    = {Yuki Koike and\n               Hiroyuki Katsura and\n               Hiromu Yakura and\n               Yuma Kurogome},\n  title     = {SLOPT: Bandit Optimization Framework for Mutation-Based Fuzzing},\n  booktitle = {Proceedings of the 38th Annual Computer Security Applications Conference,\n               {ACSAC} 2022, Austin, TX, USA, December 5-9, 2022},\n  pages     = {to appear},\n  publisher = {{ACM}},\n  year      = {2022},\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "value": "- [1] Siddharth Karamcheti, Gideon Mann, and David S. Rosenberg. 2018. Adaptive Grey-Box Fuzz-Testing with Thompson Sampling. In Proceedings of the 11th ACM Workshop on Artificial Intelligence and Security. ACM, 37\u201347. https://doi.org/10.1145/3270101.3270108\n- [2] Xiajing Wang, Changzhen Hu, Rui Ma, Donghai Tian, and Jinyuan He. 2021. CMFuzz: context-aware adaptive mutation for fuzzers. Empirical Software Engineering 26, 1 (2021), 10. https://doi.org/10.1007/s10664-020-09927-3\n- [3] Mingyuan Wu, Ling Jiang, Jiahong Xiang, Yanwei Huang, Heming Cui, Lingming Zhang, and Yuqun Zhang. 2022. One Fuzzing Strategy to Rule Them All. In Proceedings of the 44th IEEE/ACM International Conference on Software Engineering. IEEE, 1634\u20131645. https://doi.org/10.1145/3510003.3510174\n",
                "type": "Text_excerpt",
                "original_header": "Reference"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{SLOPT-ACSAC22,\n    year = {2022},\n    publisher = {{ACM}},\n    pages = {to appear},\n    booktitle = {Proceedings of the 38th Annual Computer Security Applications Conference,\n{ACSAC} 2022, Austin, TX, USA, December 5-9, 2022},\n    title = {SLOPT: Bandit Optimization Framework for Mutation-Based Fuzzing},\n    author = {Yuki Koike and\nHiroyuki Katsura and\nHiromu Yakura and\nYuma Kurogome},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "SLOPT: Bandit Optimization Framework for Mutation-Based Fuzzing",
                "author": "Yuki Koike and\nHiroyuki Katsura and\nHiromu Yakura and\nYuma Kurogome"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This repository contains the implementations of SLOPT-AFL++ and the three existing methods Karamcheti-AFL++, CMFuzz-AFL++, and HavocMAB-AFL++, all of which are introduced in our paper \"SLOPT: Bandit Optimization Framework for Mutation-Based Fuzzing\". \nTo compare our fuzzer with the previous methods, we also implemented three fuzzers that applies online opitimizations to their mutation: Karamcheti-AFL++ [1], CMFuzz-AFL++ [2] and HavocMAB-AFL++ [3]. \n \n",
                "original_header": "SLOPT-AFL++"
            },
            "confidence": 0.9586215649965968,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "SLOPT-AFL++ is implemented in the `main` branch.\nThe existing methods are implemented in the following branches: \n",
                "original_header": "Branches"
            },
            "confidence": 0.9079545560359222,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Alternatively, you can use Dockerfile in the top directory of each branch to build these images locally.\nMoreover, of course you can build these fuzzers in almost the same way as the unaltered AFL++ on the host environment because they additionally require only the GNU Scientific Library. In Debian/Ubuntu, it can be installed as the package `libgsl-dev`. \n",
                "original_header": "How to build"
            },
            "confidence": 0.919190108023806,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In our paper, we used as benchmarks FuzzBench and Magma, both of which are very standardized and don't require much of manual effort.\nMoreover, because every fuzzer is implemented as a small patch to AFL++, these fuzzers are much easier to run than a general fuzzer.\nYou can run these fuzzers basically just by copying the configuration files for AFL++ and replacing the AFL++ directory with the directory of each fuzzer. \n",
                "original_header": "How to take the benchmarks taken in our paper"
            },
            "confidence": 0.9738419161777837,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "SLOPT-AFL++"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
        }
    ]
}