{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:01:51"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/zysszy/GrammarCNN",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "zysszy",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2018-09-02T15:27:49Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-01-20T06:20:54Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2020 Zeyu Sun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A CNN model for code generation.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "GrammarCNN",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "zysszy/GrammarCNN",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/zysszy/GrammarCNN/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/zysszy/GrammarCNN/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 95,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 30,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/zysszy/grammarcnn/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 111226
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "In folder ```model/```, to train a new model\n```\npython3 run.py train [dev|test] [tree|var|func]\n```\n```tree``` for nonterminal nodes, ```var``` for variable nodes, and ```func``` for function nodes.\n\n```dev``` and ```test``` denote the evaluation set.",
                "type": "Text_excerpt",
                "original_header": "To train a new model",
                "parent_header": [
                    "GrammarCNN",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        },
        {
            "result": {
                "value": "After ```tree```, ```var```, and ```func``` were trained.\n\nIn folder ```predict/```\n```\npython3 run.py [pre|eval]\n```",
                "type": "Text_excerpt",
                "original_header": "To predict",
                "parent_header": [
                    "GrammarCNN",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        },
        {
            "result": {
                "value": "We successly generated.\n ```\nclass BootyBayBodyguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n    def create_minion (self, player) :\n        return Minion(5, 4, taunt = True)\n```\nExample Code:\n```\nclass BootyBayBodyguard(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Booty Bay Bodyguard\", 5, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON)\n    def create_minion (self, player) :\n        return Minion(5, 4, taunt = True)\n```\n Our model tends to generate a structrual correct code, which leads to a higher StrAcc but a similar BLEU compared with previous works.\n \n Code we generated.\n```\nclass AnnoyoTron(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.MECH, divine_shield = True)\n    def create_minion (self, player) :\n        return Minion(1, 2, taunt = True, divine_shield = True)\n```\nExample Code:\n```\nclass AnnoyoTron(MinionCard ) : \n    def __init__ (self) :\n        super().__init__(\"Annoy-o-Tron\", 2, CHARACTER_CLASS.ALL, CARD_RARITY.COMMON, minion_type = MINION_TYPE.MECH)\n    def create_minion (self, player) :\n        return Minion(1, 2, divine_shield = True, taunt = True)\n ```\n",
                "type": "Text_excerpt",
                "original_header": "Examples"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "  * NLTK 3.2.1\n  * Tensorflow 1.3.1\n  * Python 3.5\n  * Ubuntu 16.04\n  * Java 1.8\n   \n",
                "original_header": "Dependenices"
            },
            "confidence": 0.9998716282676484,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "GrammarCNN"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/1811.06837.pdf\n## Usage\n### To train a new model\nIn folder ```model/```, to train a new model\n```\npython3 run.py train [dev|test] [tree|var|func]\n```\n```tree``` for nonterminal nodes, ```var``` for variable nodes, and ```func``` for function nodes.\n\n```dev``` and ```test``` denote the evaluation set.\n### To predict\nAfter ```tree```, ```var```, and ```func``` were trained.\n\nIn folder ```predict/```\n```\npython3 run.py [pre|eval]\n```\n## Dependenices \n  * NLTK 3.2.1\n  * Tensorflow 1.3.1\n  * Python 3.5\n  * Ubuntu 16.04\n  * Java 1.8\n  \n# Examples\nWe successly generated.\n ```\nclass BootyBayBodyguard(MinionCard "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
        }
    ]
}