{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:04:42"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/IBM/tree-sitter-codeviews",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "IBM",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-07-26T09:38:34Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-29T06:39:14Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Extract and combine multiple source code views using tree-sitter",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "`comex` is a rebuild of Tree Sitter Multi Codeview Generator for easier invocation as a Python package. This rebuild also includes a cli interface. Currently, ```comex``` generates codeviews for Java and C#, for both method-level and file-level code snippets.  ```comex``` can be used to generate over $15$ possible combinations of codeviews for both languages (complete list [here](https://github.com/IBM/tree-sitter-codeviews/blob/main/List_Of_Views.pdf)). ```comex``` is designed to be easily extendable to various programming languages. This is primarliy because we use [tree-sitter](https://tree-sitter.github.io/tree-sitter/) for parsing, a highly efficient incremental parser that supports over $40$ languages. If you wish to add support for more languages, please refer to the [contributing](https://github.com/IBM/tree-sitter-codeviews/blob/main/CONTRIBUTING.md) guide. \n",
                "original_header": "Comex"
            },
            "confidence": 0.9961347467785836,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- **Syntax Errors in Code**: Despite supporting non-compileable code, to ensure accurate codeviews, the input Java code must be free of syntax errors. Code with syntax errors may not be correctly parsed and displayed in the generated codeviews. \nPlease note that while we continuously work to improve the tool and address these limitations, the current implementation may not be perfect. We appreciate your understanding and encourage you to provide feedback and report any issues you encounter, as this helps us enhance the tool's capabilities. \n",
                "original_header": "Usage as a Python Package"
            },
            "confidence": 0.933927517222251,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "# Comex\n`comex` is a rebuild of Tree Sitter Multi Codeview Generator for easier invocation as a Python package. This rebuild also includes a cli interface. Currently, ```comex``` generates codeviews for Java and C#, for both method-level and file-level code snippets.  ```comex``` can be used to generate over $15$ possible combinations of codeviews for both languages (complete list [here](https://github.com/IBM/tree-sitter-codeviews/blob/main/List_Of_Views.pdf)). ```comex``` is designed to be easily extendable to various programming languages. This is primarliy because we use [tree-sitter](https://tree-sitter.github.io/tree-sitter/) for parsing, a highly efficient incremental parser that supports over $40$ languages. If you wish to add support for more languages, please refer to the [contributing](https://github.com/IBM/tree-sitter-codeviews/blob/main/CONTRIBUTING.md) guide. \n",
                "original_header": "BASH9*"
            },
            "confidence": 0.9961347467785836,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This is the recommended way to get started with `comex` as it is the most user friendly \n",
                "original_header": "Usage as a CLI"
            },
            "confidence": 0.9828722285165392,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "````\nsrc_language: denotes one of the supported languaged hence currently \"java\" or \"cs\"\n\nsrc_code: denotes the source code to be parsed\n\noutput_file: denotes the output file to which the generated graph is written\n\ngraph_format: denotes the format of the output graph. Currently supported formats are \"dot\" and \"json\". To generate both pass \"all\"\n\ncodeviews: refers to the configuration passed for each codeview\n````\n---\n## Limitations \nBelow we present more examples of input code snippets and generated codeviews for both Java and C#. \n### Code Organization\nThe code is structured in the following way:\n1. For each code-view, first the source code is parsed using the tree-sitter parser and then the various code-views are generated. In the [tree_parser](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/tree_parser) directory, the Parser and ParserDriver is implemented with various funcitonalities commonly required by all code-views. Language-specific features are further developed in the language-specific parsers also placed in this directory.\n2. The [codeviews](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/codeviews) directory contains the core logic for the various codeviews. Each codeview has a driver class and a codeview class, which is further inherited and extended by language in case of code-views that require language-specific implementation.\n3. The [cli.py](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/cli.py) file is the CLI implementation. The drivers can also be directly imported and used like a python package. It is responsible for parsing the source code and generating the codeviews. \n\n### About the IBM OSCP Project\nThis tool was developed for research purposes as a part of the OSCP Project. Efficient representation of source code is essential for various software engineering tasks using AI pipelines such as code translation, code search and code clone detection. Code Representation aims at extracting the both syntactic and semantic features of source code and representing them by a vector which can be readily used for the downstream tasks. Multiple works exist that attempt to encode the code as sequential data to easily leverage state of art NN models like transformers. But it leads to a loss of information. Graphs are a natural representation for the code but very few works(MVG-AAAI\u201922) have tried to represent the different code features obtained from different code views like Program Dependency Graph, Data Flow Graph etc. as a multi-view graph. In this work, we want to explore more code views and its relevance to different code tasks as well as leverage transformers model for the multi-code view graphs. We believe such a work will help to \n1. Establish influence of specific code views for common tasks \n2. Demonstrate how graphs can combined with transformers \n3. Create re-usable models \nThis tool is based on the ongoing joint research effort between IBM and [Risha Lab](https://rishalab.in/) at [IIT Tirupati](https://www.iittp.ac.in/) to explore the effects of different code representations on code based tasks involving: \n - [Srikanth Tamilselvam](https://www.linkedin.com/in/srikanth-tamilselvam-913a2ab/)\n - [Sridhar Chimalakonda](https://www.linkedin.com/in/sridharch/)\n - [Alex Mathai](https://www.linkedin.com/in/alex-mathai-403117131/)\n - [Debeshee Das](https://www.linkedin.com/in/debeshee-das/) \n - [Noble Saji Mathews](https://www.linkedin.com/in/noble-saji-mathews/) \n - [Kranthi Sedamaki](https://www.linkedin.com/in/kranthisedamaki/)\n \n",
                "original_header": "Usage as a Python Package"
            },
            "confidence": 0.9665608784648037,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The code is structured in the following way:\n1. For each code-view, first the source code is parsed using the tree-sitter parser and then the various code-views are generated. In the [tree_parser](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/tree_parser) directory, the Parser and ParserDriver is implemented with various funcitonalities commonly required by all code-views. Language-specific features are further developed in the language-specific parsers also placed in this directory.\n2. The [codeviews](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/codeviews) directory contains the core logic for the various codeviews. Each codeview has a driver class and a codeview class, which is further inherited and extended by language in case of code-views that require language-specific implementation.\n3. The [cli.py](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/cli.py) file is the CLI implementation. The drivers can also be directly imported and used like a python package. It is responsible for parsing the source code and generating the codeviews.\n \n",
                "original_header": "Code Organization"
            },
            "confidence": 0.9813798309585668,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This tool was developed for research purposes as a part of the OSCP Project. Efficient representation of source code is essential for various software engineering tasks using AI pipelines such as code translation, code search and code clone detection. Code Representation aims at extracting the both syntactic and semantic features of source code and representing them by a vector which can be readily used for the downstream tasks. Multiple works exist that attempt to encode the code as sequential data to easily leverage state of art NN models like transformers. But it leads to a loss of information. Graphs are a natural representation for the code but very few works(MVG-AAAI\u201922) have tried to represent the different code features obtained from different code views like Program Dependency Graph, Data Flow Graph etc. as a multi-view graph. In this work, we want to explore more code views and its relevance to different code tasks as well as leverage transformers model for the multi-code view graphs. We believe such a work will help to \n1. Establish influence of specific code views for common tasks \n2. Demonstrate how graphs can combined with transformers \n3. Create re-usable models\n \n",
                "original_header": "About the IBM OSCP Project"
            },
            "confidence": 0.9937607736546873,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "tree-sitter-codeviews",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "IBM/tree-sitter-codeviews",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/IBM/tree-sitter-codeviews/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/IBM/tree-sitter-codeviews/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 104,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 19,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ibm/tree-sitter-codeviews/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 17373359
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C#",
                "name": "C#",
                "type": "Programming_language",
                "size": 3144322
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 463116
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the [project team](./MAINTAINERS.md). All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/CODE_OF_CONDUCT.md"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "## Contributing In General\nOur project welcomes external contributions. \n\n\nTo contribute code or documentation, please submit a [pull request](https://github.com/ibm/repo-template/pulls).\n\nA good way to familiarize yourself with the codebase and contribution process is\nto look for and tackle low-hanging fruit in the [issue tracker](https://github.com/ibm/repo-template/issues).\nBefore embarking on a more ambitious contribution, please quickly [get in touch](#communication) with us.\n\n**Note: We appreciate your effort, and want to avoid a situation where a contribution\nrequires extensive rework (by you or by us), sits in backlog for a long time, or\ncannot be accepted at all!**\n\n### Adding support for languages\nThe repository is structured in a highly modularized way so that support for new languages can be added without breaking existing code.\nCurrently the repository supports Java and all Java specific files are marked with a '_java'. Please go through the repository searching for all occurences of `java` to understand where and what you need to add support for a new language. \n\n### Proposing new features\nIf you would like to implement a new feature, please [raise an issue](https://github.com/ibm/repo-template/issues)\nbefore sending a pull request so the feature can be discussed. This is to avoid\nyou wasting your valuable time working on a feature that the project developers\nare not interested in accepting into the code base.\n\n### Fixing bugs\n\nIf you would like to fix a bug, please [raise an issue](https://github.com/ibm/repo-template/issues) before sending a\npull request so it can be tracked.\n\n### Merge approval\n\nThe project maintainers use LGTM (Looks Good To Me) in comments on the code\nreview to indicate acceptance. A change requires LGTMs from two of the\nmaintainers of each component affected.\n\nFor a list of the maintainers, see the [MAINTAINERS.md](MAINTAINERS.md) page.\n\n## Legal\n\nEach source file must include a license header for the Apache\nSoftware License 2.0. Using the SPDX format is the simplest approach.\ne.g.\n\n```\n/*\nCopyright <holder> All Rights Reserved.\n\nSPDX-License-Identifier: Apache-2.0\n*/\n```\n\nWe have tried to make it as easy as possible to make contributions. This\napplies to how we handle the legal aspects of contribution. We use the\nsame approach - the [Developer's Certificate of Origin 1.1 (DCO)](https://github.com/hyperledger/fabric/blob/master/docs/source/DCO1.1.txt) - that the Linux\u00ae Kernel [community](https://elinux.org/Developer_Certificate_Of_Origin)\nuses to manage code contributions.\n\nWe simply ask that when submitting a patch for review, the developer\nmust include a sign-off statement in the commit message.\n\nHere is an example Signed-off-by line, which indicates that the\nsubmitter accepts the DCO:\n\n```\nSigned-off-by: John Doe <john.doe@example.com>\n```\n\nYou can include this automatically when you commit a change to your\nlocal git repository using the following command:\n\n```\ngit commit -s\n```\n\n## Setup\nPlease refer to the [README.md](README.md) file for instructions on setup and dependancies\n\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/CONTRIBUTING.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you use Comex in your research, please cite our work by using the following BibTeX entry:\n```\n@misc{das2023comex,\n      title={COMEX: A Tool for Generating Customized Source Code Representations}, \n      author={Debeshee Das and Noble Saji Mathews and Alex Mathai and Srikanth Tamilselvam and Kranthi Sedamaki and Sridhar Chimalakonda and Atul Kumar},\n      year={2023},\n      eprint={2307.04693},\n      archivePrefix={arXiv},\n      primaryClass={cs.SE}\n}\n```\n\n---",
                "type": "Text_excerpt",
                "original_header": "Cite Comex",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "value": "@misc{das2023comex,\n    primaryclass = {cs.SE},\n    archiveprefix = {arXiv},\n    eprint = {2307.04693},\n    year = {2023},\n    author = {Debeshee Das and Noble Saji Mathews and Alex Mathai and Srikanth Tamilselvam and Kranthi Sedamaki and Sridhar Chimalakonda and Atul Kumar},\n    title = {COMEX: A Tool for Generating Customized Source Code Representations},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "COMEX: A Tool for Generating Customized Source Code Representations",
                "author": "Debeshee Das and Noble Saji Mathews and Alex Mathai and Srikanth Tamilselvam and Kranthi Sedamaki and Sridhar Chimalakonda and Atul Kumar"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "`comex` is published on the Python Registry and can be easily installed via pip:\n\n```console\npip install comex\n```\n\n**Note**: You would need to install GraphViz([dot](https://graphviz.org/download/)) so that the graph visualizations are generated\n",
                "type": "Text_excerpt",
                "original_header": "Installation from PyPi",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "value": "To setup `comex` for development using the source code in your python environment:\n\n```console\npip install -r requirements-dev.txt\n```\n\nThis performs an editable install, meaning that comex would be available throughout your environment (particularly relevant if you use conda or something of the sort). This means now you can interact and import from `comex` just like any other package while remaining standalone but also reflecting any code side updates without any other manual steps\n\n---",
                "type": "Text_excerpt",
                "original_header": "Installation from source",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\n---\n## Installation from PyPi \n"
            },
            "confidence": 0.9939069458333151,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "`comex` is published on the Python Registry and can be easily installed via pip:\n```console\npip install comex\n```\n \n",
                "original_header": "Installation from PyPi"
            },
            "confidence": 0.9999999843086159,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "**Note**: You would need to install GraphViz([dot](https://graphviz.org/download/)) so that the graph visualizations are generated \n## Installation from source \n",
                "original_header": "BASH9*"
            },
            "confidence": 0.9874422373661305,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To setup `comex` for development using the source code in your python environment:\n```console\npip install -r requirements-dev.txt\n```\n \nThis performs an editable install, meaning that comex would be available throughout your environment (particularly relevant if you use conda or something of the sort). This means now you can interact and import from `comex` just like any other package while remaining standalone but also reflecting any code side updates without any other manual steps \n",
                "original_header": "Installation from source"
            },
            "confidence": 0.9999990111526218,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The comex package can be used by importing required drivers as follows:\n```python\nfrom comex.codeviews.combined_graph.combined_driver import CombinedDriver\n\nCombinedDriver(\n    src_language=lang,\n    src_code=code,\n    output_file=\"output.json\",\n    graph_format=output,\n    codeviews=codeviews\n)\n```\nIn most cases the required combination can be obtained via the `combined_driver` module as shown above.\n \nThe repo is setup to automatically perform CI tests on making pulls to main and development branches.\nTo test locally: \nRun all tests and get coverage report\n```console\npytest\n``` \nMake sure to bump the version in `setup.cfg`. \nThen run the following commands:\n```bash\nrm -rf build dist\npython setup.py sdist bdist_wheel\n```\nThen upload it to PyPI using [twine](https://twine.readthedocs.io/en/latest/#installation) (`pip install twine` if not installed):\n```bash\ntwine upload dist/*\n```\n \n",
                "original_header": "Usage as a Python Package"
            },
            "confidence": 0.980399850997687,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "This is the recommended way to get started with `comex` as it is the most user friendly\n\nThe attributes and options supported by the CLI are well documented and can be viewed by running:\n```console\ncomex --help\n```\n\nFor example, to generate a combined CFG and DFG graph for a java file, you can run:\n```console\ncomex --lang \"java\" --code-file ./test.java --graphs \"cfg,dfg\"\n```\n",
                "type": "Text_excerpt",
                "original_header": "Usage as a CLI",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "value": "The comex package can be used by importing required drivers as follows:\n\n```python\nfrom comex.codeviews.combined_graph.combined_driver import CombinedDriver\n\nCombinedDriver(\n    src_language=lang,\n    src_code=code,\n    output_file=\"output.json\",\n    graph_format=output,\n    codeviews=codeviews\n)\n```\nIn most cases the required combination can be obtained via the `combined_driver` module as shown above.\n\n````\nsrc_language: denotes one of the supported languaged hence currently \"java\" or \"cs\"\n\nsrc_code: denotes the source code to be parsed\n\noutput_file: denotes the output file to which the generated graph is written\n\ngraph_format: denotes the format of the output graph. Currently supported formats are \"dot\" and \"json\". To generate both pass \"all\"\n\ncodeviews: refers to the configuration passed for each codeview\n````\n---\n## Limitations\n\nWhile `comex` provides _method-level_ and _file-level_ support for both Java and C\\#, it's important to note the following limitations and known issues:\n\n### Java\n- **No Inter-file Analysis Support**: The tool currently does not support codeviews that involve interactions between multiple Java files. It is designed to generate codeviews for individual Java files only.\n\n- **Syntax Errors in Code**: Despite supporting non-compileable code, to ensure accurate codeviews, the input Java code must be free of syntax errors. Code with syntax errors may not be correctly parsed and displayed in the generated codeviews.\n\n- **Limited Support for Function Call Arguments**: The tool does not provide proper support for when a function call is passed as an argument to another function call in Java code. The resulting codeview might not accurately represent the intended behavior in such cases.\n\n### C\\#\nIn addition to the limitations mentioned for Java, the tool has the following limitations specific to C#:\n\n- **No Support for Lambda Functions and Arrow Expressions**: The tool does not support codeviews involving lambda functions and arrow expressions in C#. The generated codeviews may not accurately represent these language features.\n\n- **No Support for Compiler Directives**: Compiler directives, such as pragma directives, are not supported by the tool. Code involving such directives may not be properly displayed in the generated codeviews.\n\n- **Incomplete Operator Declaration Support**: The tool may have limited support for operator declarations in C#. Certain constraints and edge cases related to operator overloading might not be fully captured in the generated codeviews.\n\n- **Limited Support for Inheritance and Abstraction**: The tool's support for inheritance and abstraction in C# is not fully comprehensive. Codeviews involving complex inheritance hierarchies or advanced abstraction patterns may not be accurately represented.\n\nPlease note that while we continuously work to improve the tool and address these limitations, the current implementation may not be perfect. We appreciate your understanding and encourage you to provide feedback and report any issues you encounter, as this helps us enhance the tool's capabilities.\n\n---\n\n\n## Output Examples:\n\nCombined simple AST+CFG+DFG for a simple Java program that finds the maximum among 2 numbers:\n\n![Sample AST CFG DFG](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/sample.png)\n\nBelow we present more examples of input code snippets and generated codeviews for both Java and C#.\n\n---\n\n**CLI Command**:\n\n```bash\ncomex --lang \"java\" --code-file sample/example.java --graphs \"cfg,dfg\"\n```\n---\n\n**Java Code Snippet**:\n\n```Java\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    //    static String INPUT = \"5\\n3 2 2 4 1\\n1 2 2 2 1\";\n    static String INPUT = \"\";\n\n    public static void main(String[] args) {\n        InputStream is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n\n        Scanner scanner = new Scanner(is);\n\n        final int n = scanner.nextInt();\n        List<Position> positionList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            positionList.add(\n                    new Position(\n                            scanner.nextInt(),\n                            scanner.nextInt(),\n                            scanner.nextInt()\n                    )\n            );\n        }\n\n        System.out.println(solve(positionList) ? \"Yes\" : \"No\");\n    }\n\n    static class Position {\n        int t;\n        int x;\n        int y;\n\n        public Position(int t, int x, int y) {\n            this.t = t;\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static boolean solve(List<Position> positionList) {\n        Position currentPosition = new Position(0, 0, 0);\n        for (int i = 0; i < positionList.size(); i++) {\n            Position nextPosition = positionList.get(i);\n            if (!possibleMove(currentPosition.t, nextPosition.t, currentPosition.x, nextPosition.x, currentPosition.y, nextPosition.y)) {\n                return false;\n            }\n            currentPosition = nextPosition;\n        }\n        return true;\n    }\n\n    static boolean possibleMove(int t1, int t2, int x1, int x2, int y1, int y2) {\n        int tDiff = t2 - t1;\n        int absX = Math.abs(x1 - x2);\n        int absY = Math.abs(y1 - y2);\n\n        if (absX + absY <= tDiff) {\n            if (tDiff % 2 == (absX + absY) % 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n\n```\n---\n\n**Generated Codeview**:\n\n![Java File-level](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/java.png)\n\n---\n\n**CLI Command**:\n\n```bash\ncomex --lang \"cs\" --code-file sample/example.cs --graphs \"cfg,dfg\"\n```\n---\n\n**C# Code Snippet**:\n\n```C#\npublic class DFG_A2 {\n    public void main(string[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // {}\n        String str = br.attribute1; // {3}\n        str = br.attribute2.method1(); // {3}\n        br.attribute1 = br.attribute2; // {3,5}\n        br.method2(br.attribute1, br.attribute2); // {3,5,6}\n        BufferedReader br2 = br; // {5,6,7}\n        br.method3(); // {5,6,7}\n        int j = br2.attribute1.method2(3,4); // {8}\n    }\n}\n```\n---\n\n**Generated Codeview**:\n\n![C# Method-level](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/cs.png)\n\n---\n\nMore examples and results can be found in the [tests/data](https://github.com/IBM/tree-sitter-codeviews/tree/main/tests/data) directory\n\n### Code Organization\nThe code is structured in the following way:\n1. For each code-view, first the source code is parsed using the tree-sitter parser and then the various code-views are generated. In the [tree_parser](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/tree_parser) directory, the Parser and ParserDriver is implemented with various funcitonalities commonly required by all code-views. Language-specific features are further developed in the language-specific parsers also placed in this directory.\n2. The [codeviews](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/codeviews) directory contains the core logic for the various codeviews. Each codeview has a driver class and a codeview class, which is further inherited and extended by language in case of code-views that require language-specific implementation.\n3. The [cli.py](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/cli.py) file is the CLI implementation. The drivers can also be directly imported and used like a python package. It is responsible for parsing the source code and generating the codeviews.\n\n### Testing\n\nThe repo is setup to automatically perform CI tests on making pulls to main and development branches.\nTo test locally:\n\nRun specific test \n- Say you wish to run `test_cfg` function\n- Drop the `'[...]'` part to run all tests in a file\n  - formatted as [extension-filename]\n- no-cov prevents coverage report from being printed\n```console\npytest -k 'test_cfg[cs-test7]' --no-cov\n```\n\nRun all tests and get coverage report\n```console\npytest\n```\n\nAnalyze the deviation report given by `deepdiff` by using the verbose output.\nThis will help quickly figure out difference from the gold file\n```console\npytest -k 'test_cfg[cs-test7]' --no-cov -vv\n```\n\n### Publishing\n\nMake sure to bump the version in `setup.cfg`.\n\nThen run the following commands:\n\n```bash\nrm -rf build dist\npython setup.py sdist bdist_wheel\n```\n\nThen upload it to PyPI using [twine](https://twine.readthedocs.io/en/latest/#installation) (`pip install twine` if not installed):\n\n```bash\ntwine upload dist/*\n```\n\n\n### About the IBM OSCP Project\nThis tool was developed for research purposes as a part of the OSCP Project. Efficient representation of source code is essential for various software engineering tasks using AI pipelines such as code translation, code search and code clone detection. Code Representation aims at extracting the both syntactic and semantic features of source code and representing them by a vector which can be readily used for the downstream tasks. Multiple works exist that attempt to encode the code as sequential data to easily leverage state of art NN models like transformers. But it leads to a loss of information. Graphs are a natural representation for the code but very few works(MVG-AAAI\u201922) have tried to represent the different code features obtained from different code views like Program Dependency Graph, Data Flow Graph etc. as a multi-view graph. In this work, we want to explore more code views and its relevance to different code tasks as well as leverage transformers model for the multi-code view graphs. We believe such a work will help to \n1. Establish influence of specific code views for common tasks \n2. Demonstrate how graphs can combined with transformers \n3. Create re-usable models\n\n### Team\n\nThis tool is based on the ongoing joint research effort between IBM and [Risha Lab](https://rishalab.in/) at [IIT Tirupati](https://www.iittp.ac.in/) to explore the effects of different code representations on code based tasks involving: \n - [Srikanth Tamilselvam](https://www.linkedin.com/in/srikanth-tamilselvam-913a2ab/)\n - [Sridhar Chimalakonda](https://www.linkedin.com/in/sridharch/)\n - [Alex Mathai](https://www.linkedin.com/in/alex-mathai-403117131/)\n - [Debeshee Das](https://www.linkedin.com/in/debeshee-das/) \n - [Noble Saji Mathews](https://www.linkedin.com/in/noble-saji-mathews/) \n - [Kranthi Sedamaki](https://www.linkedin.com/in/kranthisedamaki/)\n",
                "type": "Text_excerpt",
                "original_header": "Usage as a Python Package",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "value": "Combined simple AST+CFG+DFG for a simple Java program that finds the maximum among 2 numbers:\n\n![Sample AST CFG DFG](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/sample.png)\n\nBelow we present more examples of input code snippets and generated codeviews for both Java and C#.\n\n---\n\n**CLI Command**:\n\n```bash\ncomex --lang \"java\" --code-file sample/example.java --graphs \"cfg,dfg\"\n```\n---\n\n**Java Code Snippet**:\n\n```Java\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    //    static String INPUT = \"5\\n3 2 2 4 1\\n1 2 2 2 1\";\n    static String INPUT = \"\";\n\n    public static void main(String[] args) {\n        InputStream is = INPUT.isEmpty() ? System.in : new ByteArrayInputStream(INPUT.getBytes());\n\n        Scanner scanner = new Scanner(is);\n\n        final int n = scanner.nextInt();\n        List<Position> positionList = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            positionList.add(\n                    new Position(\n                            scanner.nextInt(),\n                            scanner.nextInt(),\n                            scanner.nextInt()\n                    )\n            );\n        }\n\n        System.out.println(solve(positionList) ? \"Yes\" : \"No\");\n    }\n\n    static class Position {\n        int t;\n        int x;\n        int y;\n\n        public Position(int t, int x, int y) {\n            this.t = t;\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static boolean solve(List<Position> positionList) {\n        Position currentPosition = new Position(0, 0, 0);\n        for (int i = 0; i < positionList.size(); i++) {\n            Position nextPosition = positionList.get(i);\n            if (!possibleMove(currentPosition.t, nextPosition.t, currentPosition.x, nextPosition.x, currentPosition.y, nextPosition.y)) {\n                return false;\n            }\n            currentPosition = nextPosition;\n        }\n        return true;\n    }\n\n    static boolean possibleMove(int t1, int t2, int x1, int x2, int y1, int y2) {\n        int tDiff = t2 - t1;\n        int absX = Math.abs(x1 - x2);\n        int absY = Math.abs(y1 - y2);\n\n        if (absX + absY <= tDiff) {\n            if (tDiff % 2 == (absX + absY) % 2) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n\n```\n---\n\n**Generated Codeview**:\n\n![Java File-level](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/java.png)\n\n---\n\n**CLI Command**:\n\n```bash\ncomex --lang \"cs\" --code-file sample/example.cs --graphs \"cfg,dfg\"\n```\n---\n\n**C# Code Snippet**:\n\n```C#\npublic class DFG_A2 {\n    public void main(string[] args) {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); // {}\n        String str = br.attribute1; // {3}\n        str = br.attribute2.method1(); // {3}\n        br.attribute1 = br.attribute2; // {3,5}\n        br.method2(br.attribute1, br.attribute2); // {3,5,6}\n        BufferedReader br2 = br; // {5,6,7}\n        br.method3(); // {5,6,7}\n        int j = br2.attribute1.method2(3,4); // {8}\n    }\n}\n```\n---\n\n**Generated Codeview**:\n\n![C# Method-level](https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/cs.png)\n\n---\n\nMore examples and results can be found in the [tests/data](https://github.com/IBM/tree-sitter-codeviews/tree/main/tests/data) directory\n\n### Code Organization\nThe code is structured in the following way:\n1. For each code-view, first the source code is parsed using the tree-sitter parser and then the various code-views are generated. In the [tree_parser](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/tree_parser) directory, the Parser and ParserDriver is implemented with various funcitonalities commonly required by all code-views. Language-specific features are further developed in the language-specific parsers also placed in this directory.\n2. The [codeviews](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/codeviews) directory contains the core logic for the various codeviews. Each codeview has a driver class and a codeview class, which is further inherited and extended by language in case of code-views that require language-specific implementation.\n3. The [cli.py](https://github.com/IBM/tree-sitter-codeviews/tree/main/src/comex/cli.py) file is the CLI implementation. The drivers can also be directly imported and used like a python package. It is responsible for parsing the source code and generating the codeviews.\n\n### Testing\n\nThe repo is setup to automatically perform CI tests on making pulls to main and development branches.\nTo test locally:\n\nRun specific test \n- Say you wish to run `test_cfg` function\n- Drop the `'[...]'` part to run all tests in a file\n  - formatted as [extension-filename]\n- no-cov prevents coverage report from being printed\n```console\npytest -k 'test_cfg[cs-test7]' --no-cov\n```\n\nRun all tests and get coverage report\n```console\npytest\n```\n\nAnalyze the deviation report given by `deepdiff` by using the verbose output.\nThis will help quickly figure out difference from the gold file\n```console\npytest -k 'test_cfg[cs-test7]' --no-cov -vv\n```\n\n### Publishing\n\nMake sure to bump the version in `setup.cfg`.\n\nThen run the following commands:\n\n```bash\nrm -rf build dist\npython setup.py sdist bdist_wheel\n```\n\nThen upload it to PyPI using [twine](https://twine.readthedocs.io/en/latest/#installation) (`pip install twine` if not installed):\n\n```bash\ntwine upload dist/*\n```\n\n\n### About the IBM OSCP Project\nThis tool was developed for research purposes as a part of the OSCP Project. Efficient representation of source code is essential for various software engineering tasks using AI pipelines such as code translation, code search and code clone detection. Code Representation aims at extracting the both syntactic and semantic features of source code and representing them by a vector which can be readily used for the downstream tasks. Multiple works exist that attempt to encode the code as sequential data to easily leverage state of art NN models like transformers. But it leads to a loss of information. Graphs are a natural representation for the code but very few works(MVG-AAAI\u201922) have tried to represent the different code features obtained from different code views like Program Dependency Graph, Data Flow Graph etc. as a multi-view graph. In this work, we want to explore more code views and its relevance to different code tasks as well as leverage transformers model for the multi-code view graphs. We believe such a work will help to \n1. Establish influence of specific code views for common tasks \n2. Demonstrate how graphs can combined with transformers \n3. Create re-usable models\n\n### Team\n\nThis tool is based on the ongoing joint research effort between IBM and [Risha Lab](https://rishalab.in/) at [IIT Tirupati](https://www.iittp.ac.in/) to explore the effects of different code representations on code based tasks involving: \n - [Srikanth Tamilselvam](https://www.linkedin.com/in/srikanth-tamilselvam-913a2ab/)\n - [Sridhar Chimalakonda](https://www.linkedin.com/in/sridharch/)\n - [Alex Mathai](https://www.linkedin.com/in/alex-mathai-403117131/)\n - [Debeshee Das](https://www.linkedin.com/in/debeshee-das/) \n - [Noble Saji Mathews](https://www.linkedin.com/in/noble-saji-mathews/) \n - [Kranthi Sedamaki](https://www.linkedin.com/in/kranthisedamaki/)\n",
                "type": "Text_excerpt",
                "original_header": "Output Examples:",
                "parent_header": [
                    "Comex"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9331547380034699,
            "technique": "supervised_classification"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Tree Sitter Multi Codeview Generator"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "related_documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://twine.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/sample.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/java.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/IBM/tree-sitter-codeviews/raw/main/sample/cs.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2307.04693"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
        }
    ]
}