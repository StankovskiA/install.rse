{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:00:56"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/pieterhartel/Mutation-at-scale",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "pieterhartel",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-12-24T14:06:52Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2021-08-16T11:45:53Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Mutation testing of smart contracts at scale",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The mutation operators consist of the minimum standard Mothra set plus a number of experimental Solidity specific operators based on all the related work that we are aware of.\nWe have provided a few examples in the background section of the paper to motivate the choice of operators in the paper, but this does not constitute proof that common errors in Solidity programs are captured by exactly the chosen operators.\n \n",
                "original_header": "2.1 Mutant selection"
            },
            "confidence": 0.914815381804603,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We have implemented a bespoke mutation tool in JavaScript and the source is available in this replication package.\nThe file [comparison.xlsx](comparison.xlsx) in this replication package provides a detailed specification of the mutation operators. \n",
                "original_header": "2.2 Mutation testing tool"
            },
            "confidence": 0.9746731638466175,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We have used a relatively large sample of smart contracts that are representative for the entire collection of verified smart contracts available from Etherscan.\nThis collection however, is probably not representative for the entire population of smart contracts.\nFor example, many smart contracts in this larger population are clones of other smart [He2019], but this is not the case for verified smart contracts from Etherscan.\nFrom a uniform random sample of 500 verified smart contract we have calculated the normalised edit distance (NLD) of all pairs and found that less than 1% of the pairs have an NLD of less than 20%, and less than 5% of all pairs have an NLD of less than 60%.\nThis means that the vast majority of all pairs are different. \n",
                "original_header": "2.4 Test suite choice and size"
            },
            "confidence": 0.9741589027862745,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The results are presented aggregated over the entire sample of smart contracts, which is larger than in all related research that we are aware of.\n \n",
                "original_header": "2.7 Presentation of the results"
            },
            "confidence": 0.9031220548376635,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* `run` indicates the killing decision, which can be `Limit`, `TxEvMeth`, or `TxEvMethLimit`.\n* `maxTx` indicates the number of the current transaction, where Tx 0 is the deployment transaction.\n* `name` is the name of the contract (disambiguated).\n* `address` is the address of the contract on the Ethereum blockchain.\n* `SLOC` is the number of source lines of the contract.\n* `transactions` indicates how many transactions were made against the contract on 1 Jan 2019.\n* `ether` is the amount of Ether stored in the contract on 1 Jan 2019.\n* `version` is the compiler version (from the pragma in the course code).\n* `registration_date` is the date at which the contract was registered as a verified smart contract on Etherscan.\n* `methodCnt` is the number of different pure methods in the source code of the mutant.\n* `instructionCnt` is the number of instructions in the byte code of the compiled mutant.\n* `executionCnt` is the number of bytecodes of the mutant that have been executed.\n* `compFailCnt` is the number of still born mutants for the contract.\n* `mutNotEqCnt` is the number of trivially non-equivalent mutants of the contract.\n* `killCnt` is the number of mutants killed. \n",
                "original_header": "6.2 Advanced analysis"
            },
            "confidence": 0.9631243782489859,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "Mutation-at-scale",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "pieterhartel/Mutation-at-scale",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/pieterhartel/mutation-at-scale/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 322425
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 256160
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/releases/24843018",
                "tag": "V1.0",
                "name": "Replication package for \"Mutation testing of smart contracts at scale\"",
                "author": {
                    "name": "pieterhartel",
                    "type": "User"
                },
                "description": "Replication package for TAP2020 paper \"Mutation testing of smart contracts at scale\"",
                "tarball_url": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/tarball/V1.0",
                "zipball_url": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/zipball/V1.0",
                "html_url": "https://github.com/pieterhartel/Mutation-at-scale/releases/tag/V1.0",
                "url": "https://api.github.com/repos/pieterhartel/Mutation-at-scale/releases/24843018",
                "release_id": 24843018,
                "date_created": "2020-02-03T09:51:52Z",
                "date_published": "2020-03-25T09:52:17Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/diff_loop.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/make.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/diff.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/make_loop.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/contract_loop.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/Vitaluck_3b400b.dir/shar.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "This replication package can be used in at least five different ways.\nThe interested reader could:\n1. Read the paper and inspect the seven-point checklist for mutation research in section 2. below.\n2. Study [comparison.xlsx](comparison.xlsx), which compares the mutation operators of all related work that we are aware of with the mutation operators that we have implemented.\n3. Inspect the source code of our tools [chainsol.js](chainsol.js) and [mutasol.js](mutasol.js).\n4. Study an original contract, its mutants, and the main output generated for that contract, which is `Vitaluck_3b400b.dir`.\n5. Re-run all our experiments, but please note that this would take 10-14 weeks on a single machine and about 0.5 TB of disk space to do.\n",
                "type": "Text_excerpt",
                "original_header": "1. How to use this replication package?"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "* [He2019] Ningyu He, Lei Wu, Haoyu Wang, Yao Guo, and Xuxian Jiang. Characterizing code clones in the ethereum smart contract ecosystem. Technical report, Beijing University of Posts and Telecommunications, May 2019. [URL](https://arxiv.org/abs/1905.00272).\n* [Kintis2018] Marinos Kintis, Mike Papadakis, Yue Jia, Nicos Malevris, Yves Le Traon, and Mark Harman. Detecting trivial mutant equivalences via compiler optimisations. IEEE Trans. on software engineering, 44(4):308-333, Apr 2018. [URL](https://doi.org/10.1109/TSE.2017.2684805).\n* [Papadakis2019] Mike Papadakis, Marinos Kintis, Jie Zhang, Yue Jia, Yves Le Traon, and Mark Harman. Mutation testing advances: An analysis and survey. In Advances in Computers, volume 112, pages 275-378. Elsevier, 2019. [URL](https://doi.org/10.1016/bs.adcom.2018.03.015).\n\n",
                "type": "Text_excerpt",
                "original_header": "2.8 References",
                "parent_header": [
                    "2. Seven-point Mutation Testing Checklist"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Please start by cloning this repository, `Mutation-at-scale`:\n```\ngit clone https://github.com/pieterhartel/Mutation-at-scale.git\n```",
                "type": "Text_excerpt",
                "original_header": "3. Setup"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "value": "We assume the reader to be familiar with `node`, `npm`, and `truffle`.\nSee [Node](https://nodejs.org/) and [Truffle](https://www.trufflesuite.com) for the relevant documentation.\n",
                "type": "Text_excerpt",
                "original_header": "3.1 Assumptions",
                "parent_header": [
                    "3. Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "There are two main programs in the replication package: `chainsol.js` and `mutasol.js.`\nThe first, `chainsol.js`, downloads a contract from Etherscan, as described here [Truffle-tests-for-free](https://arxiv.org/abs/1907.09208).\nThe second program, `mutasol.js`, generates mutants, as described in the paper.\nThese two programs use auxiliary modules: `comments.js`, `prepare.js`, `soljson.js`, and `evm_decoder.js`, all of which are available in the package.\n \n",
                "original_header": "4. Programs"
            },
            "confidence": 0.9999602867835639,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The script `make_loop.sh` makes 1120 calls to `make.sh` with the address of a contract to download, generate and execute the mutants.\nWe have run `make_loop.sh` in parallel for all contracts on 14 machines, which took about one week. \nThe following example call to `make.sh`  will create the `Vitaluck_3b400b.dir` directory.\n```\n$ bash make.sh 0xef7c7254c290df3d167182356255cdfd8d3b400b\n``` \nThe output of `make.sh` should look something like this:\n```\nStarting in Vitaluck_3b400b.dir\n\n\u2714 Preparing to download\n\u2714 Downloading\n\u2714 Cleaning up temporary files\n\u2714 Setting up box\n\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:        truffle compile\n  Migrate:        truffle migrate\n  Test contracts: truffle test\n\nStarting Mutant Vitaluck.sol_0\n...\nStarting Mutant Vitaluck.sol_9\nFinished in Vitaluck_3b400b.dir\n```\nRunning `make.sh` may generate warnings like this `/bin/rm: cannot remove '/tmp/tmp-5818PkSXWctk5kNI': Operation not permitted`, because the script is trying to remove some debris produced by `truffle`. Such warnings can be ignored.\n \n",
                "original_header": "5.1 Creating the contract directories and the log files"
            },
            "confidence": 0.9790427486616875,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The following files and directories are standard for truffle tests: `1_initial_migration.js` in the `migrations` directory, and `truffle-config.js`.\nThese are generated by `chainsol.js`.\n \n",
                "original_header": "5.4 Truffle test files"
            },
            "confidence": 0.9996999044349666,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "The programs `chainsol.js` and `mutasol.js` have a number of dependencies that can be installed in the `$HOME` directory as follows (tested on Ubuntu 18.04.3). The software is intended to run on a dedicated VM, hence for convenience everything is installed in the home directory.\n```\nnpm install \\\n        abi-decoder \\\n        assert \\\n        child_process \\\n        etherscan-api \\\n        js-levenshtein \\\n        json-stringify-safe \\\n        levelup \\\n\tmd5 \\\n        mysql \\\n        net \\\n        node-fetch \\\n        path \\\n        plotter \\\n        puppeteer \\\n        random-seed \\\n        sleep \\\n        solc \\\n        stringify-object \\\n        web3 \\\n        web3-utils \\\n        truffle \\\n        ganache-cli\nnpm install git://github.com/pieterhartel/abi-decoder.git\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "4.1 Dependencies on `npm` modules",
                "parent_header": [
                    "4. Programs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "value": "The programs `chainsol.js` and `mutasol.js` also depend on the appropriate version of the solidity compiler.\n\nThe call `mutasol.js -c` will generate a script to download the Solidity compiler binaries from [Emscripten binaries](https://github.com/ethereum/solc-bin/blob/gh-pages/bin/list.json) into the directory `$HOME/soljson` as follows:\n```\n$ node mutasol.js -c >$HOME/soljson/script.sh\n$ cd $HOME/soljson/\n$ sh script\n```\n\nAfter running the script, the `soljson` directory should contain one file per major compiler version as follows:\n```\n$HOME/soljson/\n\u251c\u2500\u2500 soljson-v0.1.1+commit.6ff4cd6.js\n\u251c\u2500\u2500 soljson-v0.1.2+commit.d0d36e3.js\n\u251c\u2500\u2500 soljson-v0.1.3+commit.28f561.js\n...\n\u251c\u2500\u2500 soljson-v0.5.1+commit.c8a2cb62.js\n\u251c\u2500\u2500 soljson-v0.5.2+commit.1df8f40c.js\n\u251c\u2500\u2500 soljson-v0.5.3+commit.10d17f24.js\n\u2514\u2500\u2500 soljson-v0.5.4+commit.9549d8ff.js\n```\n",
                "type": "Text_excerpt",
                "original_header": "4.2 Dependencies on Solidity compiler versions",
                "parent_header": [
                    "4. Programs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "value": "The script `make.sh` uses `jq`, which is a lightweight and flexible command-line JSON processor:\n```\nsudo apt install -y jq\n```\n\nThe replication package has been tested with these versions of the tools:\n```\n$ npm -v\n3.5.2\n$ node -v\nv8.10.0\n$ ganache-cli --version\nGanache CLI v6.4.4 (ganache-core: 2.5.6)\n$ truffle -v\nTruffle v5.0.2 - a development framework for Ethereum\n$ jq --version\njq-1.5-1-a5b5cbe\n$ sed --version\nsed (GNU sed) 4.7\n...\n```\n",
                "type": "Text_excerpt",
                "original_header": "4.3 Dependencies on programs",
                "parent_header": [
                    "4. Programs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "value": "The program `chainsol.js` originates from `Truffle-tests-for-free` and it has been integrated in the replication package.\nThe file `scrapedContractsVerified.json` contains a list of key information about all verified smart contracts that were available on Etherscan on 1 January 2019.\nThe list includes the smart contracts from `Truffle-tests-for-free`.\n",
                "type": "Text_excerpt",
                "original_header": "4.4 Dependencies on `Truffle-tests-for-free`",
                "parent_header": [
                    "4. Programs"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "identifier": [
        {
            "result": {
                "type": "Url",
                "value": "https://zenodo.org/badge/latestdoi/229952409"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Replication package for the paper Mutation testing of smart contracts at scale."
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1909.12563"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1905.00272"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1907.09208"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
        }
    ]
}