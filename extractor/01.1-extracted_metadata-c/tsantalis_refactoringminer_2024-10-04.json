{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:05:56"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/tsantalis/RefactoringMiner",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "tsantalis",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2015-09-29T13:13:11Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-04T11:48:11Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2019 Nikolaos Tsantalis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/LICENSE"
        }
    ],
    "name": [
        {
            "result": {
                "value": "RefactoringMiner",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "tsantalis/RefactoringMiner",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 359,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "refactoring",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 137,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/tsantalis/refactoringminer/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 246489160
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 1003
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/175479387",
                "tag": "3.0.9",
                "name": "3.0.9",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Fix critical Exception in Javadoc diff #778 Thanks to @mo7aammd for reporting the issue\r\n- Refactoring-aware Javadoc diff (using method parameter refactorings to match correctly Javadoc params)\r\n\r\n![image](https://github.com/user-attachments/assets/e79a8b11-3e2e-47dc-a2fe-66fc5a7167e5)",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.9",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.9",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.9",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/175479387",
                "release_id": 175479387,
                "date_created": "2024-09-17T14:21:36Z",
                "date_published": "2024-09-17T14:57:00Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/175076076",
                "tag": "3.0.8",
                "name": "3.0.8",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- New Single Page View (similar to GitHub) made by @pouryafard75 \r\n\r\n![Screenshot from 2024-09-14 07-25-03](https://github.com/user-attachments/assets/1b15f352-45e0-481c-b1ba-c6a1e317bfde)\r\n- Improved Javadoc diff (supports text reformatting, HTML tag restructuring)\r\n\r\n![Screenshot from 2024-09-14 08-10-21](https://github.com/user-attachments/assets/7253b7ec-0180-43fb-a414-20afc4b45bf8)\r\n\r\n",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.8",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.8",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.8",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/175076076",
                "release_id": 175076076,
                "date_created": "2024-09-14T11:11:24Z",
                "date_published": "2024-09-14T11:19:52Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/161752684",
                "tag": "3.0.7",
                "name": "3.0.7",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "Fix for critical typo bug failing to process record declarations #752",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.7",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.7",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.7",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/161752684",
                "release_id": 161752684,
                "date_created": "2024-06-21T23:35:06Z",
                "date_published": "2024-06-21T23:49:45Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/161700867",
                "tag": "3.0.6",
                "name": "3.0.6",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Diff includes code moves between files. New icon for code moves between files\r\n![Screenshot from 2024-05-29 20-54-33](https://github.com/tsantalis/RefactoringMiner/assets/1483516/5702ab29-e750-42f4-b877-de452ceb1714)\r\n- Hide unchanged code in monaco diff\r\n![image](https://github.com/tsantalis/RefactoringMiner/assets/1483516/18da3ceb-f0ea-4058-9e6e-fe36b6700b29)\r\n- Soft wrap in monaco diff (toggle with Alt+w)\r\n- **Prev** and **Next** buttons to go directly to the previous/next diff without coming back to the Overview page\r\n- Refactored the AST diff generation code",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.6",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.6",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.6",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/161700867",
                "release_id": 161700867,
                "date_created": "2024-06-21T02:04:24Z",
                "date_published": "2024-06-21T16:04:42Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/156097185",
                "tag": "3.0.5",
                "name": "3.0.5",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Dynamic Java compliance version (supports parsing of record declarations https://github.com/tsantalis/RefactoringMiner/discussions/697)\r\n- Docker image https://hub.docker.com/r/tsantalis/refactoringminer\r\n- New AST diff UI (directory structure similar to GitHub, file renames)\r\n![Screenshot from 2024-05-16 10-48-01](https://github.com/tsantalis/RefactoringMiner/assets/1483516/7701668f-78a3-479c-a231-149d12706285)\r\n- Diff with multiple files when code is moved (`VM.java` in the screenshot below)\r\n![Screenshot from 2024-05-16 10-54-19](https://github.com/tsantalis/RefactoringMiner/assets/1483516/9b78b2ac-35b8-43f5-a93c-477aecc95910)\r\n",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.5",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.5",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.5",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/156097185",
                "release_id": 156097185,
                "date_created": "2024-05-16T13:59:56Z",
                "date_published": "2024-05-16T14:59:39Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/136981487",
                "tag": "3.0.4",
                "name": "3.0.4",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Improved the detection of renamed attributes\r\n- Enabled the detection of attribute changes in moved/renamed classes",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.4",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.4",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.4",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/136981487",
                "release_id": 136981487,
                "date_created": "2024-01-14T04:50:14Z",
                "date_published": "2024-01-14T14:14:37Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/134163291",
                "tag": "3.0.3",
                "name": "3.0.3",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Fix for issues #543, #553, https://github.com/pouryafard75/RM-ASTDiff/issues/89, https://github.com/pouryafard75/RM-ASTDiff/issues/91\r\n- Extracted replacement algorithm in its own class https://github.com/tsantalis/RefactoringMiner/commit/c0b9c01bec5527cd42d154ed6a70067db774d7aa",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.3",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.3",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.3",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/134163291",
                "release_id": 134163291,
                "date_created": "2023-12-15T13:37:03Z",
                "date_published": "2023-12-16T01:04:29Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/130520844",
                "tag": "3.0.2",
                "name": "3.0.2",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "Fixes issues #537, #538, #539, #542\r\nMerge PRs #540, #541 \r\nMajor performance improvement in the detection of `Move Method` refactorings",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.2",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.2",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.2",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/130520844",
                "release_id": 130520844,
                "date_created": "2023-11-21T03:24:37Z",
                "date_published": "2023-11-21T03:38:20Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/127704879",
                "tag": "3.0.1",
                "name": "3.0.1",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "Fixes issues #534, #493, #536",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.1",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.1",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.1",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/127704879",
                "release_id": 127704879,
                "date_created": "2023-11-02T14:22:05Z",
                "date_published": "2023-11-02T14:27:36Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/126872467",
                "tag": "3.0.0",
                "name": "3.0.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Supports AST Differencing\r\n* Supports [CodeTracker](https://github.com/jodavimehran/code-tracker) 2.x\r\n* Newly supported refactorings:\r\n  * Move Code (between methods)\r\n  * Replace Anonymous with Class\r\n  * Parameterize Test (JUnit 5 @ParameterizedTest with @ ValueSource)\r\n  * Assert Throws\r\n* Match methods with empty bodies within anonymous class declarations (#402)",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/3.0.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/3.0.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/3.0.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/126872467",
                "release_id": 126872467,
                "date_created": "2023-10-26T20:39:25Z",
                "date_published": "2023-10-27T00:44:15Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/94484105",
                "tag": "2.4.0",
                "name": "2.4.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Newly supported refactorings:\r\n  * Split Conditional\r\n  * Invert Condition\r\n  * Merge Conditional\r\n  * Merge Catch\r\n  * Merge Method\r\n  * Split Method\r\n* [Refactoring detection between directories](https://github.com/tsantalis/RefactoringMiner#with-two-directories-containing-java-source-code) (#260)\r\n* [Refactoring detection with file contents](https://github.com/tsantalis/RefactoringMiner#with-file-contents-as-strings)\r\n* [AST Diff API](https://github.com/tsantalis/RefactoringMiner#ast-diff-api-usage-guidelines)\r\n* Statement mapping optimization in case of Extract/Inline Method refactorings\r\n* Support multi-statement-mappings for duplicated code moved out of if-else-if branches\r\n* Support for sub-expression mappings (Extract Variable, Inline Variable, argument mappings in Extract Method, Inline Method)\r\n* Improved type inference for array access and cast expression arguments\r\n* Improved the mapping of logging statements\r\n* Fixes for issues #392, #376, #385, #387, #377, #370, #360, #367, #366, pouryafard75#32, #359, #363, #361, #364, #348, #352, #350, #349, #342, #336, jodavimehran/code-tracker#100, jodavimehran/code-tracker#99, jodavimehran/code-tracker#94, #324, #335, #334, #299, #332, jodavimehran/code-tracker#23, pouryafard75#18, #326, #328, pouryafard75#22, #325, #323, #313, #312, #311, jodavimehran/code-tracker#93, #308, #306, pouryafard75#5, jodavimehran/code-tracker#92, #305, jodavimehran/code-tracker#86, #309, jodavimehran/code-tracker#84, jodavimehran/code-tracker#83, #309, #307, jodavimehran/code-tracker#82, jodavimehran/code-tracker#81, #304, jodavimehran/code-tracker#79, jodavimehran/code-tracker#33, jodavimehran/code-tracker#74, jodavimehran/code-tracker#91, jodavimehran/code-tracker#66, #303, #301, jodavimehran/code-tracker#64, jodavimehran/code-tracker#63, jodavimehran/code-tracker#88, jodavimehran/code-tracker#61, jodavimehran/code-tracker#59, jodavimehran/code-tracker#56, jodavimehran/code-tracker#78, jodavimehran/code-tracker#52, jodavimehran/code-tracker#48, jodavimehran/code-tracker#44, jodavimehran/code-tracker#42, jodavimehran/code-tracker#41, jodavimehran/code-tracker#40, jodavimehran/code-tracker#39, jodavimehran/code-tracker#37, jodavimehran/code-tracker#35, jodavimehran/code-tracker#34, jodavimehran/code-tracker#32, jodavimehran/code-tracker#31, jodavimehran/code-tracker#47, jodavimehran/code-tracker#30, jodavimehran/code-tracker#27, jodavimehran/code-tracker#29, #264, jodavimehran/code-tracker#26, jodavimehran/code-tracker#25, jodavimehran/code-tracker#22, #296, #285, #295, #292, #293, #290, #291, #287, #289, #288, #281, #284, #283, #282, #280, #279, #276",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.4.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.4.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.4.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/94484105",
                "release_id": 94484105,
                "date_created": "2023-03-03T20:27:53Z",
                "date_published": "2023-03-04T01:17:56Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/74636367",
                "tag": "2.3.2",
                "name": "2.3.2",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Newly supported refactorings:\r\n  * Split Class\r\n* Supporting anonymous class declaration for enum constants\r\n* Fixes for issues #266, #271, #272, #273, #275, https://github.com/jodavimehran/code-tracker/issues/12\r\n* Added more statement mapping tests",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.3.2",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.3.2",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.3.2",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/74636367",
                "release_id": 74636367,
                "date_created": "2022-08-17T15:14:31Z",
                "date_published": "2022-08-17T15:18:05Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/73443021",
                "tag": "2.3.1",
                "name": "2.3.1",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Improved the way `insideExtractedOrInlinedMethod` is determined taking into account the case where a child mapper is a lambda expression body mapper. In that case both parent and child mappers have the same containers.\r\n* Updated rule to detect class rename\r\nsrc/org/mockito/CrazyMatchers.java => src/org/mockito/AdditionalMatchers.java\r\nin commit https://github.com/mockito/mockito/commit/45b98cb06698ea2ce1b25d6e5bf9ca5e0b1dc1a5",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.3.1",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.3.1",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.3.1",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/73443021",
                "release_id": 73443021,
                "date_created": "2022-08-02T13:52:36Z",
                "date_published": "2022-08-02T14:02:11Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/73351789",
                "tag": "2.3.0",
                "name": "2.3.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Newly supported refactorings:\r\n  * Merge Class\r\n  * Inline Attribute\r\n  * Replace Pipeline with Loop\r\n* Introduced VariableDeclarationContainer to handle UMLOperation, UMLInitializer, UMLAttribute, LambaExpressionObject in the same way\r\n* Enabled the detection of anonymous class extracted to field\r\n* Reporting properly variable-related refactorings within anonymous class declarations, instead of reporting them for the parent method.\r\n* Support the replacement of variables with boolean literals\r\n* Support the matching of variable declarations with the same name in different scopes\r\n* Eliminated dependency to Git diff for renamed/moved classes\r\n* Support the detection of Split/Merge Parameter refactorings based on removed/added attributes\r\n* Made Rename Class detection independent of the processing order\r\n* Made processIdenticalFiles() independent from the file order\r\n* Supported Import declaration semantic diff\r\n* Added an optimization phase for statement mappings, when multiple methods are extracted from or inlined to the same method\r\n* Improved performance in method equalAfterNewArgumentAdditions()\r\n* Supported the detection of variable inlines in unmatched statements\r\n* Supported Type Parameter diff in method and type declarations\r\n* New replacement type: VARIABLE_REPLACED_WITH_CLASS_INSTANCE_CREATION\r\n* Taking into account variable aliasing when detecting variable renames\r\n* Redesigned the mapping of composite statements by eliminating depth-based matching\r\n* Depth-based mapping of leaf statements is applied only if the corresponding composite statement structures are isomorphic\r\n* Supported the matching of statements wrapped in Lambda expression (in addition to statements wrapped in anonymous class declarations, previously supported)\r\n* Supported the matching of composite statements with overlapping Extract/Inline Variable refactorings\r\n* Fixes for issues #227, #228, #229, #230, #231, #232, #233, #234, #236, #237, #242, #243, #246, #218, #247, #251, #252, #254, #259, #261, #267, #268, #269, #270\r\n* Parallelized text execution (one thread per commit)\r\n* Added command line tests\r\n* Added statement mapping tests",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.3.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.3.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.3.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/73351789",
                "release_id": 73351789,
                "date_created": "2022-08-01T13:25:27Z",
                "date_published": "2022-08-01T15:06:41Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/54743899",
                "tag": "2.2.0",
                "name": "2.2.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "* Newly supported refactorings:\r\n  * Change Attribute Access Modifier\r\n  * Encapsulate Field\r\n  * Parameterize Attribute\r\n  * Replace Attribute With Variable\r\n  * Add Method Modifier\r\n  * Remove Method Modifier\r\n  * Add Attribute Modifier\r\n  * Remove Attribute Modifier\r\n  * Add Variable/Parameter Modifier\r\n  * Remove Variable/Parameter Modifier\r\n  * Change Class Access Modifier\r\n  * Add Class Modifier\r\n  * Remove Class Modifier\r\n  * Split Package\r\n  * Merge Package\r\n  * Rename Package\r\n  * Move Package\r\n  * Change Type Declaration Kind\r\n  * Collapse Hierarchy\r\n  * Replace Loop With Pipeline\r\n  * Replace Anonymous With Lambda\r\n* Support the matching of try-with-resources with regular try statements\r\n* Support for matching anonymous class declarations with lambda expressions\r\n* Support the matching of variables without a variable declaration mapping\r\n* Support the detection of replacements in field initializers\r\n* Support the matching of statements using Stream API calls with traditional for loops\r\n* Support for [Method References](https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html)\r\n* Support matching a method invocation with a method reference\r\n* Improved the matching of builder chain calls\r\n* Improved rule isPartOfMethodExtracted() to check for functionality extracted and moved to another class\r\n* Improved the matching of methods, where part of them is moved from/to another existing method\r\n* Improved type inference for matching method calls to method declarations\r\n  * Handling the matching of primitive types with their corresponding wrapper class types\r\n* Fixes for issues #163 #164 #165 #170 #174 #176 #177 #178 #180 #182 #183 #173 #185 #191 #189 #190 #193 #194 #196 #197 #198 #199 #200 #202 #203 #204 #205 #206 #207 #208 #209 #210 #211 #212 #213 #214 #216 #217 #218 #220 #222 #223\r\n* Identical files with different file paths are excluded from processing\r\n* Files with trivial changes in comments, whitespace and import declaration statements are excluded from processing\r\n  * Using `java-diff-utils` to check if the change is inside a commented line",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.2.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.2.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.2.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/54743899",
                "release_id": 54743899,
                "date_created": "2021-12-06T21:15:34Z",
                "date_published": "2021-12-06T21:22:34Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/39450524",
                "tag": "2.1.0",
                "name": "2.1.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "This is the most extensively tested `RefactoringMiner` release on **134,295** distinct commits from **325** projects.\r\nSome of the major updates are:\r\n- Detection of Move Method refactorings from deleted to added classes (i.e., classes that have not been matched or moved/renamed).\r\n- Detection of Extract/Inline Method refactorings in anonymous class declarations (#119 and #162).\r\n- Added `-json <path-to-json-file>` command-line arguments to save the JSON output in a file. The results are appended to the file after each processed commit.\r\n- Detection of moved/renamed classes in which new methods are extracted.\r\n- Newly supported refactorings `Add Thrown Exception Type`, `Remove Thrown Exception Type`, `Change Thrown Exception Type`, `Change Method Access Modifier`.\r\n- Detection of moved abstract/interface methods.\r\n- Improved performance.\r\n- Fixes for issues #121 #124 #125 #126 #127 #128 #129 #130 #131 #132 #133 #134 #135 #137 #138 #139 #140 #141 #143 #144 #145 #146 #147 #149 #150 #151 #155 #156 #157 #158 #159 #160\r\n\r\nMany thanks to @osmarleandro @jodavimehran @mkshiblu @max-ellis for the reported bugs and feature requests.",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.1.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.1.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.1.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/39450524",
                "release_id": 39450524,
                "date_created": "2021-03-08T15:33:27Z",
                "date_published": "2021-03-08T16:10:43Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/35761074",
                "tag": "2.0.3",
                "name": "2.0.3",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- **Added internal comments to program elements**\r\n The following classes include a method `getComments()` that returns a `List<UMLComment>`\r\n`UMLOperation`\r\n`UMLAttribute`\r\n`UMLClass`\r\n`UMLAnonymousClass`\r\n`UMLEnumConstantDeclaration`\r\nFor each program element, `getComments()` returns the comments:\r\n  1. Within the start and end offset of the program element e.g.,\r\n  ```java\r\n  public void foo() {\r\n    // internal line comment\r\n    /* internal block comment */\r\n  }\r\n  ```\r\n  2. In the start line of the program element e.g.,\r\n  ```java\r\n  private int a1 = 0; // same line comment a1\r\n  ```\r\n  3. In the previous line of the program element e.g.,\r\n  ```java\r\n  /* signature foo */\r\n  public void foo() {\r\n  ```\r\n  4. In consecutive previous lines of the program element e.g.,\r\n  ```java\r\n  // before line a1-1\r\n  // before line a1-2\r\n  private int a1 = 0;\r\n  ```\r\n  If a method includes an anonymous class declaration with some comments,\r\n  these comments will belong to the anonymous class declaration, and not the parent method declaration.\r\n- **Relaxed** `UMLAttribute.equalsIgnoringChangedType(UMLAttribute)` to improve the matching of moved and renamed classes.\r\n- **Fixes for issues** #109 #113 #116 #119 #121\r\n- **Updated library dependencies to the latest versions**",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.0.3",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.0.3",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.0.3",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/35761074",
                "release_id": 35761074,
                "date_created": "2020-12-28T04:50:05Z",
                "date_published": "2020-12-28T05:16:25Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/32132674",
                "tag": "2.0.2",
                "name": "2.0.2",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Updated library dependencies to the latest versions\r\n- Support the detection of renamed enum constants (issue #104)",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.0.2",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.0.2",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.0.2",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/32132674",
                "release_id": 32132674,
                "date_created": "2020-10-04T03:15:57Z",
                "date_published": "2020-10-04T03:21:34Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/29626403",
                "tag": "2.0.1",
                "name": "2.0.1",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "- Updated library dependencies to the latest versions\r\n- Enabled the reporting of annotation changes for renamed and merged variables\r\n- Added validations for Annotation related changes detected by GumTree diff\r\n- Enabled reporting of refactorings in the signatures of methods within anonymous class declarations\r\n- Replaced VariableDeclaration with UMLAttribute in all Attribute related refactoring types",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.0.1",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.0.1",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.0.1",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/29626403",
                "release_id": 29626403,
                "date_created": "2020-08-12T21:25:56Z",
                "date_published": "2020-08-12T21:36:33Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/28483234",
                "tag": "2.0.0",
                "name": "2.0.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "This release corresponds to the version of RefactoringMiner used in the following paper:\r\nNikolaos Tsantalis, Ameya Ketkar, and Danny Dig, \"RefactoringMiner 2.0,\" IEEE Transactions on Software Engineering, 2020.\r\nhttps://doi.org/10.1109/TSE.2020.3007722\r\n\r\n| Refactoring Type      | Precision | Recall |\r\n|:-----------------------|-----------:|--------:|\r\n| Inline Method         |     100 |  95.3 |\r\n| Extract Method        |     99.8 |  95.8 |\r\n| Move Field            |     98.4 |  96.0 |\r\n| Move Class            |       100 |  99.3 |\r\n| Extract Interface     |       100 |    100 |\r\n| Push Down Method      |       100 |    97.7 |\r\n| Push Down Field       |       100 |  100 |\r\n| Pull Up Method        |       100 |  97.9 |\r\n| Pull Up Field         |       100 |   99.2 |\r\n| Move Method           |     99.6 |  92.9 |\r\n| Rename Method         |     98.2 |  87.9 |\r\n| Extract Superclass    |     100 |    100 |\r\n| Rename Class          |     100 |  89.3 |\r\n| Extract & Move Method |     100 |  54.2 |\r\n| Move & Rename Class |     100 |  90.2 |\r\n| Move & Inline Method |     100 |  73.7 |\r\n| Rename Variable         |     98.8 |  93.8 |\r\n| Rename Parameter         |     99.3 |  91.3 |\r\n| Rename Field         |     99.1 |  85.7 |\r\n| Change Return Type        |     99.5 |  96.5 |\r\n| Change Variable Type        |     99.7 |  93.9 |\r\n| Change Parameter Type        |     99.8 |  94.5 |\r\n| Change Field Type        |     99.5 |  95.5 |\r\n| **Average**               |     **99.6** |   **94.0** |",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/2.0.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/2.0.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/2.0.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/28483234",
                "release_id": 28483234,
                "date_created": "2020-07-12T18:30:17Z",
                "date_published": "2020-07-12T20:50:27Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/9069777",
                "tag": "1.0.0",
                "name": "1.0.0",
                "author": {
                    "name": "tsantalis",
                    "type": "User"
                },
                "description": "This release corresponds to the version of RefactoringMiner used in the following paper:\r\n\r\nNikolaos Tsantalis, Matin Mansouri, Laleh Eshkevari, Davood Mazinanian, and Danny Dig, \"Accurate and Efficient Refactoring Detection in Commit History,\" 40th International Conference on Software Engineering (ICSE'2018), Gothenburg, Sweden, May 27 - June 3, 2018.\r\nhttps://doi.org/10.1145/3180155.3180206\r\n\r\n| Refactoring Type      | Precision | Recall |\r\n|:-----------------------|-----------:|--------:|\r\n| Inline Method         |     98.96 |  86.36 |\r\n| Extract Method        |     98.63 |  84.72 |\r\n| Move Field            |     88.42 |  95.45 |\r\n| Move Class            |       100 |  96.24 |\r\n| Extract Interface     |       100 |    100 |\r\n| Push Down Method      |       100 |    100 |\r\n| Push Down Field       |       100 |  86.21 |\r\n| Change Package        |        85 |    100 |\r\n| Pull Up Method        |       100 |  90.48 |\r\n| Pull Up Field         |       100 |   96.3 |\r\n| Move Method           |     95.17 |  76.36 |\r\n| Rename Method         |     97.78 |  83.28 |\r\n| Extract Superclass    |     95.08 |    100 |\r\n| Rename Class          |     98.33 |  71.08 |\r\n| Extract & Move Method |     95.92 |  41.23 |\r\n| Overall               |     97.96 |   87.2 |",
                "tarball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/tarball/1.0.0",
                "zipball_url": "https://api.github.com/repos/tsantalis/RefactoringMiner/zipball/1.0.0",
                "html_url": "https://github.com/tsantalis/RefactoringMiner/releases/tag/1.0.0",
                "url": "https://api.github.com/repos/tsantalis/RefactoringMiner/releases/9069777",
                "release_id": 9069777,
                "date_created": "2017-12-31T14:04:24Z",
                "date_published": "2017-12-31T15:29:44Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/docker/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/docker/Dockerfile"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "contributors": [
        {
            "result": {
                "value": "* [Danilo Ferreira e Silva](https://github.com/danilofes): Git repository mining infrastructure + APIs\n* [Pouria Alikhani Fard](https://github.com/pouryafard75): [AST diff](https://github.com/pouryafard75/RM-ASTDiff) + [AST diff benchmark](https://github.com/pouryafard75/DiffBenchmark)\n* [Victor Veloso](https://github.com/victorgveloso/): [Test-specific refactoring detection](https://github.com/victorgveloso/RefactoringMiner)\n* [Pedram Nouri](https://github.com/pedramnoori): [Refactoring purity checker](https://github.com/pedramnoori/RefactoringMiner)\n* [Tayeeb Hasan](https://github.com/flozender): [CodeTracker - block tracking](https://github.com/jodavimehran/code-tracker) + [CodeTracker Chrome extension](https://github.com/flozender/CodeTracker-Extension)\n* [Mehran Jodavi](https://github.com/jodavimehran): [CodeTracker - method & variable tracking](https://github.com/jodavimehran/code-tracker)\n* [Sadegh Aalizadeh](https://github.com/mosaliza): [Refactoring motivation detection](https://github.com/mosaliza/RefactoringMiner)\n* [Hassan Mansour](https://github.com/hassanmansour90): [Refactoring Aware Commit Review Chrome extension](https://chrome.google.com/webstore/detail/refactoring-aware-commit/lnloiaibmonmmpnfibfjjlfcddoppmgd)\n* [Ameya Ketkar](https://github.com/ameyaKetkar): [Refactoring oracle 2.0 validation](https://github.com/ameyaKetkar/RMinerEvaluationTools)\n* [Davood Mazinanian](https://github.com/dmazinanian): [Refactoring oracle web application](http://refactoring.encs.concordia.ca/oracle/) + Refactoring oracle 1.0 validation\n* Matin Mansouri: Rename Variable detection + Refactoring oracle 1.0 validation\n* Laleh M. Eshkevari: Refactoring oracle 1.0 validation\n",
                "type": "Text_excerpt",
                "original_header": "Contributors"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Since version 2.0, RefactoringMiner is available in the [Maven Central Repository](https://mvnrepository.com/artifact/com.github.tsantalis/refactoring-miner).\nIn order to use RefactoringMiner as a maven dependency in your project, add the following snippet to your project's build configuration file:\n\n**pom.xml**\n\n    <dependency>\n      <groupId>com.github.tsantalis</groupId>\n      <artifactId>refactoring-miner</artifactId>\n      <version>3.0.7</version>\n    </dependency>\n\n**build.gradle**\n\n    implementation 'com.github.tsantalis:refactoring-miner:3.0.7'\n",
                "type": "Text_excerpt",
                "original_header": "How to use RefactoringMiner as a maven dependency"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "Since version 3.0, RefactoringMiner is available in [DockerHub](https://hub.docker.com/r/tsantalis/refactoringminer).\nA new image is created automatically on every Monday midnight.\nYou can find detailed instructions on how to install and use the image at [Docker README](https://github.com/tsantalis/RefactoringMiner/blob/master/docker/README.md).\n",
                "type": "Text_excerpt",
                "original_header": "How to use RefactoringMiner as a docker image"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "If you want to get refactoring information when inspecting a commit on GitHub,\nyou can install our [Refactoring Aware Commit Review](https://chrome.google.com/webstore/detail/refactoring-aware-commit/lnloiaibmonmmpnfibfjjlfcddoppmgd) Chrome extension.\n\nThe Chrome extension can detect refactorings for **public** projects and commits matching the following URL patterns:\n* `https://github.com/user/project/commit/id`\n* `https://github.com/user/project/pull/id/commits/id`\n\n![Refactoring Aware Commit Review Chrome Extension](https://user-images.githubusercontent.com/1483516/80326324-62fab400-8806-11ea-9595-4906018b831a.png)\n",
                "type": "Text_excerpt",
                "original_header": "How to use RefactoringMiner as a Chrome extension"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "git repositories, between specified commits or tags, or at specified commits.\n\nIn the code snippet below we demonstrate how to print all refactorings performed\nin the toy project https://github.com/danilofes/refactoring-toy-example.git.\n\n```java\nGitService gitService = new GitServiceImpl();\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n\nRepository repo = gitService.cloneIfNotExists(\n    \"tmp/refactoring-toy-example\",\n    \"https://github.com/danilofes/refactoring-toy-example.git\");\n\nminer.detectAll(repo, \"master\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n\nYou can also analyze between commits using `detectBetweenCommits` or between tags using `detectBetweenTags`. RefactoringMiner will iterate through all *non-merge* commits from **start** commit/tag to **end** commit/tag.\n\n```java\n// start commit: 819b202bfb09d4142dece04d4039f1708735019b\n// end commit: d4bce13a443cf12da40a77c16c1e591f4f985b47\nminer.detectBetweenCommits(repo, \n    \"819b202bfb09d4142dece04d4039f1708735019b\", \"d4bce13a443cf12da40a77c16c1e591f4f985b47\",\n    new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n\n```java\n// start tag: 1.0\n// end tag: 1.1\nminer.detectBetweenTags(repo, \"1.0\", \"1.1\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n\nIt is possible to analyze a specifc commit using `detectAtCommit` instead of `detectAll`. The commit\nis identified by its SHA key, such as in the example below:\n\n```java\nminer.detectAtCommit(repo, \"05c1e773878bbacae64112f70964f4f2f7944398\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n",
                "type": "Text_excerpt",
                "original_header": "With a locally cloned git repository",
                "parent_header": [
                    "Refactoring detection API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "It is possible to detect refactorings between the Java files in two directories\ncontaining the code before and after some changes.\nThis feature supports the detection of renamed and moved classes,\nand automatically excludes from the analysis any files with identical contents:  \n\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n// You must provide absolute paths to the directories. Relative paths will cause exceptions.\nFile dir1 = new File(\"/home/user/tmp/v1\");\nFile dir2 = new File(\"/home/user/tmp/v2\");\nminer.detectAtDirectories(dir1, dir2, new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n// You must provide absolute paths to the directories. Relative paths will cause exceptions.\nPath dir1 = Paths.get(\"/home/user/tmp/v1\");\nPath dir1 = Paths.get(\"/home/user/tmp/v2\");\nminer.detectAtDirectories(dir1, dir2, new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n",
                "type": "Text_excerpt",
                "original_header": "With two directories containing Java source code",
                "parent_header": [
                    "Refactoring detection API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "You can provide two maps (before and after the changes) where the keys are file paths, and the values are the corresponding file contents.\nEach key should correspond to a file path starting from the root of the repository. For example, `src/org/refactoringminer/api/GitHistoryRefactoringMiner.java`.\n\nAfter populating the maps, you can use the following code snippet:\n\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n// Each key should correspond to a file path starting from the root of the repository\nMap<String, String> fileContentsBefore;\nMap<String, String> fileContentsAfter;\n// populate the maps\nminer.detectAtFileContents(fileContentsBefore, fileContentsAfter, new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n});\n```\n",
                "type": "Text_excerpt",
                "original_header": "With file contents as strings",
                "parent_header": [
                    "Refactoring detection API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "To use this API, please provide a valid OAuth token in the `github-oauth.properties` file.\nYou can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n\nIf you don't want to clone locally the repository, you can use the following code snippet:\n\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\nminer.detectAtCommit(\"https://github.com/danilofes/refactoring-toy-example.git\",\n    \"36287f7c3b09eff78395267a3ac0d7da067863fd\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n}, 10);\n```\n",
                "type": "Text_excerpt",
                "original_header": "With all information fetched directly from GitHub",
                "parent_header": [
                    "Refactoring detection API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "To use this API, please provide a valid OAuth token in the `github-oauth.properties` file.\nYou can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n\nIf you want to analyze all commits of a pull request, you can use the following code snippet:\n\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\nString repo = \"https://github.com/apache/drill.git\";\nminer.detectAtPullRequest(repo, 1807, new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    }\n  }\n}, 100);\n```\n",
                "type": "Text_excerpt",
                "original_header": "With each commit in a GitHub Pull request",
                "parent_header": [
                    "Refactoring detection API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "RefactoringMiner is actually the only tool that generates AST diff at commit level, supports multi-mappings (one-to-many, many-to-one, many-to-many mappings), matches AST nodes of different AST types, and supports semantic diff in a fully refactoring-aware fashion.\nYou can explore its advanced AST diff capabilities in our [AST Diff Gallery](https://github.com/tsantalis/RefactoringMiner/wiki/AST-Diff-Gallery).\n\nAll AST Diff APIs return a `ProjectASTDiff` object. By calling `getDiffSet()` on it, you can obtain a\n`Set<ASTDiff>`, where each [ASTDiff](https://github.com/tsantalis/RefactoringMiner/blob/master/src/org/refactoringminer/astDiff/actions/ASTDiff.java) object corresponds to a pair of Java Compilation Units.\n\n`ASTDiff` extends `com.github.gumtreediff.actions.Diff` and thus it is compatible with the [GumTree](https://github.com/GumTreeDiff/gumtree) core APIs.\n\nMore detailed documentation can be found in [GitHistoryRefactoringMiner](https://github.com/tsantalis/RefactoringMiner/blob/master/src/org/refactoringminer/api/GitHistoryRefactoringMiner.java) JavaDoc.\n",
                "type": "Text_excerpt",
                "original_header": "AST Diff API usage guidelines"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "// With a locally cloned git repository\nGitService gitService = new GitServiceImpl();\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n\nRepository repo = gitService.cloneIfNotExists(\n    \"tmp/refactoring-toy-example\",\n    \"https://github.com/danilofes/refactoring-toy-example.git\");\n\nProjectASTDiff projectASTDiff = miner.diffAtCommit(repo,\n    \"36287f7c3b09eff78395267a3ac0d7da067863fd\");\nSet<ASTDiff> diffs = projectASTDiff.getDiffSet();\n// To visualize the diff add the following line\nnew WebDiff(projectASTDiff).run();\n```",
                "type": "Text_excerpt",
                "original_header": "With commit of a locally cloned git repository",
                "parent_header": [
                    "AST Diff API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "You can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n```java\n// With all information fetched directly from GitHub\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\nString repo = \"https://github.com/danilofes/refactoring-toy-example.git\";\nProjectASTDiff projectASTDiff = miner.diffAtCommit(repo,\n    \"36287f7c3b09eff78395267a3ac0d7da067863fd\", 10);\nSet<ASTDiff> diffs = projectASTDiff.getDiffSet();\n// To visualize the diff add the following line\nnew WebDiff(projectASTDiff).run();\n```\n",
                "type": "Text_excerpt",
                "original_header": "With commit fetched directly from GitHub",
                "parent_header": [
                    "AST Diff API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "You can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n```java\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\nString repo = \"https://github.com/JabRef/jabref.git\";\nint PR = 10847;\nProjectASTDiff projectASTDiff = miner.diffAtPullRequest(repo, PR, 100);\nSet<ASTDiff> diffs = projectASTDiff.getDiffSet();\n// To visualize the diff add the following line\nnew WebDiff(projectASTDiff).run();\n```\n",
                "type": "Text_excerpt",
                "original_header": "With the files changed in a GitHub Pull Request",
                "parent_header": [
                    "AST Diff API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "// With two directories containing Java source code (File API)\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n// You must provide absolute paths to the directories. Relative paths will cause exceptions.\nFile dir1 = new File(\"/home/user/tmp/v1\");\nFile dir2 = new File(\"/home/user/tmp/v2\");\nProjectASTDiff projectASTDiff = miner.diffAtDirectories(dir1, dir2);\nSet<ASTDiff> diffs = projectASTDiff.getDiffSet();\n// To visualize the diff add the following line\nnew WebDiff(projectASTDiff).run();\n```\n\n```java\n// With two directories containing Java source code (Path API)\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n// You must provide absolute paths to the directories. Relative paths will cause exceptions.\nPath dir1 = Paths.get(\"/home/user/tmp/v1\");\nPath dir1 = Paths.get(\"/home/user/tmp/v2\");\nProjectASTDiff projectASTDiff = miner.diffAtDirectories(dir1, dir2);\nSet<ASTDiff> diffs = projectASTDiff.getDiffSet();\n// To visualize the diff add the following line\nnew WebDiff(projectASTDiff).run();\n```\n",
                "type": "Text_excerpt",
                "original_header": "With two directories",
                "parent_header": [
                    "AST Diff API usage guidelines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "ExtractOperationRefactoring refactoring = ...;\nUMLOperationBodyMapper mapper = refactoring.getBodyMapper();\nList<StatementObject> newLeaves = mapper.getNonMappedLeavesT2(); //newly added leaf statements\nList<CompositeStatementObject> newComposites = mapper.getNonMappedInnerNodesT2(); //newly added composite statements\nList<StatementObject> deletedLeaves = mapper.getNonMappedLeavesT1(); //deleted leaf statements\nList<CompositeStatementObject> deletedComposites = mapper.getNonMappedInnerNodesT1(); //deleted composite statements\n```\nFor the Extract Method Refactoring example shown above `mapper.getNonMappedLeavesT2()` returns the following statements:\n```java\nfinal String url = pageNumber == 0 ? \"courses\" : \"courses?page=\" + String.valueOf(pageNumber);\nfinal CoursesContainer coursesContainer = getFromStepic(url,CoursesContainer.class);\nreturn coursesContainer.meta.containsKey(\"has_next\") && coursesContainer.meta.get(\"has_next\") == Boolean.TRUE;\n```",
                "type": "Text_excerpt",
                "original_header": "1. You can use the following code snippet to obtain the **newly added statements** in the extracted method:"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "ExtractOperationRefactoring refactoring = ...;\nUMLOperationBodyMapper mapper = refactoring.getBodyMapper();\nfor(AbstractCodeMapping mapping : mapper.getMappings()) {\n  AbstractCodeFragment fragment1 = mapping.getFragment1();\n  AbstractCodeFragment fragment2 = mapping.getFragment2();\n  Set<Replacement> replacements = mapping.getReplacements();\n  for(Replacement replacement : replacements) {\n    String valueBefore = replacement.getBefore();\n    String valueAfter = replacement.getAfter();\n    ReplacementType type = replacement.getType();\n  }\n}\n```\nFor the Extract Method Refactoring example shown above `mapping.getReplacements()` returns the following AST node replacement for the pair of matched statements:\n```java\nfinal List<CourseInfo> courseInfos = getFromStepic(\"courses\",CoursesContainer.class).courses;\nfinal List<CourseInfo> courseInfos = coursesContainer.courses;\n```\n**Replacement**: `getFromStepic(\"courses\",CoursesContainer.class)` -> `coursesContainer`\n\n**ReplacementType**: VARIABLE_REPLACED_WITH_METHOD_INVOCATION\n",
                "type": "Text_excerpt",
                "original_header": "2. You can use the following code snippet to obtain the **matched statements** between the original and the extracted methods:"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "ExtractOperationRefactoring refactoring = ...;\nUMLOperationBodyMapper mapper = refactoring.getBodyMapper();\nSet<Refactoring> overlappingRefactorings = mapper.getRefactorings();\n```\nFor the Extract Method Refactoring example shown above `mapper.getRefactorings()` returns the following refactoring:\n\n**Extract Variable** `coursesContainer : CoursesContainer` in method\n`private addCoursesFromStepic(result List<CourseInfo>, pageNumber int) : boolean`\nfrom class `com.jetbrains.edu.stepic.EduStepicConnector`\n\nbecause variable `coursesContainer = getFromStepic(url,CoursesContainer.class)` has been extracted from the following statement of the original method by replacing string literal `\"courses\"` with variable `url`:\n```java\nfinal List<CourseInfo> courseInfos = getFromStepic(\"courses\",CoursesContainer.class).courses;\n```\n",
                "type": "Text_excerpt",
                "original_header": "3. You can use the following code snippet to obtain the **overlapping refactorings** in the extracted method:"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "Since version 2.0, RefactoringMiner is available in the [Maven Central Repository](https://mvnrepository.com/artifact/com.github.tsantalis/refactoring-miner).\nIn order to use RefactoringMiner as a maven dependency in your project, add the following snippet to your project's build configuration file:\n\n**pom.xml**\n\n    <dependency>\n      <groupId>com.github.tsantalis</groupId>\n      <artifactId>refactoring-miner</artifactId>\n      <version>3.0.7</version>\n    </dependency>\n\n**build.gradle**\n\n    implementation 'com.github.tsantalis:refactoring-miner:3.0.7'\n",
                "type": "Text_excerpt",
                "original_header": "How to use RefactoringMiner as a maven dependency"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "    > ./RefactoringMiner -h\n\n\t-h\t\t\t\t\t\t\t\t\t\t\tShow options\n\t-a <git-repo-folder> <branch> -json <path-to-json-file>\t\t\t\t\tDetect all refactorings at <branch> for <git-repo-folder>. If <branch> is not specified, commits from all branches are analyzed.\n\t-bc <git-repo-folder> <start-commit-sha1> <end-commit-sha1> -json <path-to-json-file>\tDetect refactorings between <start-commit-sha1> and <end-commit-sha1> for project <git-repo-folder>\n\t-bt <git-repo-folder> <start-tag> <end-tag> -json <path-to-json-file>\t\t\tDetect refactorings between <start-tag> and <end-tag> for project <git-repo-folder>\n\t-c <git-repo-folder> <commit-sha1> -json <path-to-json-file>\t\t\t\tDetect refactorings at specified commit <commit-sha1> for project <git-repo-folder>\n\t-gc <git-URL> <commit-sha1> <timeout> -json <path-to-json-file>\t\t\t\tDetect refactorings at specified commit <commit-sha1> for project <git-URL> within the given <timeout> in seconds. All required information is obtained directly from GitHub using the OAuth token in github-oauth.properties\n\t-gp <git-URL> <pull-request> <timeout> -json <path-to-json-file>\t\t\tDetect refactorings at specified pull request <pull-request> for project <git-URL> within the given <timeout> in seconds for each commit in the pull request. All required information is obtained directly from GitHub using the OAuth token in github-oauth.properties\n\t\nWith a locally cloned repository, run:\n\n    > git clone https://github.com/danilofes/refactoring-toy-example.git refactoring-toy-example\n    > ./RefactoringMiner -c refactoring-toy-example 36287f7c3b09eff78395267a3ac0d7da067863fd\n\nIf you don't want to clone locally the repository, run:\n\n    > ./RefactoringMiner -gc https://github.com/danilofes/refactoring-toy-example.git 36287f7c3b09eff78395267a3ac0d7da067863fd 10\n\n**For all options you can add the `-json <path-to-json-file>` command arguments to save the JSON output in a file. The results are appended to the file after each processed commit.**\n\nFor the `-gc` and `-gp` options you must provide a valid OAuth token in the `github-oauth.properties` file stored in the `bin` folder.\nYou can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n\nIn both cases, you will get the output in JSON format:\n\n    {\n\t\"commits\": [{\n\t\t\"repository\": \"https://github.com/danilofes/refactoring-toy-example.git\",\n\t\t\"sha1\": \"36287f7c3b09eff78395267a3ac0d7da067863fd\",\n\t\t\"url\": \"https://github.com/danilofes/refactoring-toy-example/commit/36287f7c3b09eff78395267a3ac0d7da067863fd\",\n\t\t\"refactorings\": [{\n\t\t\t\t\"type\": \"Pull Up Attribute\",\n\t\t\t\t\"description\": \"Pull Up Attribute private age : int from class org.animals.Labrador to class org.animals.Dog\",\n\t\t\t\t\"leftSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Labrador.java\",\n\t\t\t\t\t\"startLine\": 5,\n\t\t\t\t\t\"endLine\": 5,\n\t\t\t\t\t\"startColumn\": 14,\n\t\t\t\t\t\"endColumn\": 21,\n\t\t\t\t\t\"codeElementType\": \"FIELD_DECLARATION\",\n\t\t\t\t\t\"description\": \"original attribute declaration\",\n\t\t\t\t\t\"codeElement\": \"age : int\"\n\t\t\t\t}],\n\t\t\t\t\"rightSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Dog.java\",\n\t\t\t\t\t\"startLine\": 5,\n\t\t\t\t\t\"endLine\": 5,\n\t\t\t\t\t\"startColumn\": 14,\n\t\t\t\t\t\"endColumn\": 21,\n\t\t\t\t\t\"codeElementType\": \"FIELD_DECLARATION\",\n\t\t\t\t\t\"description\": \"pulled up attribute declaration\",\n\t\t\t\t\t\"codeElement\": \"age : int\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"Pull Up Attribute\",\n\t\t\t\t\"description\": \"Pull Up Attribute private age : int from class org.animals.Poodle to class org.animals.Dog\",\n\t\t\t\t\"leftSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Poodle.java\",\n\t\t\t\t\t\"startLine\": 5,\n\t\t\t\t\t\"endLine\": 5,\n\t\t\t\t\t\"startColumn\": 14,\n\t\t\t\t\t\"endColumn\": 21,\n\t\t\t\t\t\"codeElementType\": \"FIELD_DECLARATION\",\n\t\t\t\t\t\"description\": \"original attribute declaration\",\n\t\t\t\t\t\"codeElement\": \"age : int\"\n\t\t\t\t}],\n\t\t\t\t\"rightSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Dog.java\",\n\t\t\t\t\t\"startLine\": 5,\n\t\t\t\t\t\"endLine\": 5,\n\t\t\t\t\t\"startColumn\": 14,\n\t\t\t\t\t\"endColumn\": 21,\n\t\t\t\t\t\"codeElementType\": \"FIELD_DECLARATION\",\n\t\t\t\t\t\"description\": \"pulled up attribute declaration\",\n\t\t\t\t\t\"codeElement\": \"age : int\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"Pull Up Method\",\n\t\t\t\t\"description\": \"Pull Up Method public getAge() : int from class org.animals.Labrador to public getAge() : int from class org.animals.Dog\",\n\t\t\t\t\"leftSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Labrador.java\",\n\t\t\t\t\t\"startLine\": 7,\n\t\t\t\t\t\"endLine\": 9,\n\t\t\t\t\t\"startColumn\": 2,\n\t\t\t\t\t\"endColumn\": 3,\n\t\t\t\t\t\"codeElementType\": \"METHOD_DECLARATION\",\n\t\t\t\t\t\"description\": \"original method declaration\",\n\t\t\t\t\t\"codeElement\": \"public getAge() : int\"\n\t\t\t\t}],\n\t\t\t\t\"rightSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Dog.java\",\n\t\t\t\t\t\"startLine\": 7,\n\t\t\t\t\t\"endLine\": 9,\n\t\t\t\t\t\"startColumn\": 2,\n\t\t\t\t\t\"endColumn\": 3,\n\t\t\t\t\t\"codeElementType\": \"METHOD_DECLARATION\",\n\t\t\t\t\t\"description\": \"pulled up method declaration\",\n\t\t\t\t\t\"codeElement\": \"public getAge() : int\"\n\t\t\t\t}]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"type\": \"Pull Up Method\",\n\t\t\t\t\"description\": \"Pull Up Method public getAge() : int from class org.animals.Poodle to public getAge() : int from class org.animals.Dog\",\n\t\t\t\t\"leftSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Poodle.java\",\n\t\t\t\t\t\"startLine\": 7,\n\t\t\t\t\t\"endLine\": 9,\n\t\t\t\t\t\"startColumn\": 2,\n\t\t\t\t\t\"endColumn\": 3,\n\t\t\t\t\t\"codeElementType\": \"METHOD_DECLARATION\",\n\t\t\t\t\t\"description\": \"original method declaration\",\n\t\t\t\t\t\"codeElement\": \"public getAge() : int\"\n\t\t\t\t}],\n\t\t\t\t\"rightSideLocations\": [{\n\t\t\t\t\t\"filePath\": \"src/org/animals/Dog.java\",\n\t\t\t\t\t\"startLine\": 7,\n\t\t\t\t\t\"endLine\": 9,\n\t\t\t\t\t\"startColumn\": 2,\n\t\t\t\t\t\"endColumn\": 3,\n\t\t\t\t\t\"codeElementType\": \"METHOD_DECLARATION\",\n\t\t\t\t\t\"description\": \"pulled up method declaration\",\n\t\t\t\t\t\"codeElement\": \"public getAge() : int\"\n\t\t\t\t}]\n\t\t\t}\n\t\t]\n\t}]\n\t}\n",
                "type": "Text_excerpt",
                "original_header": "Refactoring detection command line options",
                "parent_header": [
                    "How to run RefactoringMiner from the command line"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "    > ./RefactoringMiner diff -h\n\n    --url <commit-url> \t\t\t\tRun the diff with a GitHub commit url\n    --url <pr-url> \t\t\t\t\tRun the diff with a GitHub PullRequest url\n    --src <folder1> --dst <folder2> \t\tRun the diff with two local directories\n    --repo <repo-folder-path> --commit <commitID>\tRun the diff with a locally cloned GitHub repository\n\nEach command creates a jetty server instance to visualize the AST diff in your web browser http://127.0.0.1:6789 \n\nTo export the mappings/actions, add `--export` to the end of the command. The files are saved by default in the RefactoringMiner `bin` directory.\n\nFor example, to visualize the diff of a GitHub Pull Request, run\n\n    > ./RefactoringMiner diff --url https://github.com/JabRef/jabref/pull/11180\n\nTo visualize the diff of a GitHub commit, run\n\n    > ./RefactoringMiner diff --url https://github.com/JetBrains/intellij-community/commit/7ed3f273ab0caf0337c22f0b721d51829bb0c877\n\nFor the `--url` option you must provide a valid OAuth token in the `github-oauth.properties` file stored in the `bin` folder.\nYou can generate an OAuth token in GitHub `Settings` -> `Developer settings` -> `Personal access tokens`.\n",
                "type": "Text_excerpt",
                "original_header": "AST diff command line options",
                "parent_header": [
                    "How to run RefactoringMiner from the command line"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "Nikolaos Tsantalis, Matin Mansouri, Laleh Eshkevari, Davood Mazinanian, and Danny Dig, \"[Accurate and Efficient Refactoring Detection in Commit History](https://users.encs.concordia.ca/~nikolaos/publications/ICSE_2018.pdf),\" *40th International Conference on Software Engineering* (ICSE 2018), Gothenburg, Sweden, May 27 - June 3, 2018.\n\n    @inproceedings{Tsantalis:ICSE:2018:RefactoringMiner,\n        author = {Tsantalis, Nikolaos and Mansouri, Matin and Eshkevari, Laleh M. and Mazinanian, Davood and Dig, Danny},\n        title = {Accurate and Efficient Refactoring Detection in Commit History},\n        booktitle = {Proceedings of the 40th International Conference on Software Engineering},\n        series = {ICSE '18},\n        year = {2018},\n        isbn = {978-1-4503-5638-1},\n        location = {Gothenburg, Sweden},\n        pages = {483--494},\n        numpages = {12},\n        url = {http://doi.acm.org/10.1145/3180155.3180206},\n        doi = {10.1145/3180155.3180206},\n        acmid = {3180206},\n        publisher = {ACM},\n        address = {New York, NY, USA},\n        keywords = {Git, Oracle, abstract syntax tree, accuracy, commit, refactoring},\n    }\n\nNikolaos Tsantalis, Ameya Ketkar, and Danny Dig, \"[RefactoringMiner 2.0](https://users.encs.concordia.ca/~nikolaos/publications/TSE_2020.pdf),\" *IEEE Transactions on Software Engineering*, vol. 48, no. 3, pp. 930-950, March 2022.\n\n    @article{Tsantalis:TSE:2020:RefactoringMiner2.0,\n        author = {Tsantalis, Nikolaos and Ketkar, Ameya and Dig, Danny},\n        title = {RefactoringMiner 2.0},\n        journal = {IEEE Transactions on Software Engineering},\n        year = {2022},\n        volume = {48},\n        number = {3},\n        pages = {930-950},\n        doi = {10.1109/TSE.2020.3007722}\n    }\n\nPouria Alikhanifard and Nikolaos Tsantalis, \"[A Novel Refactoring and Semantic Aware Abstract Syntax Tree Differencing Tool and a Benchmark for Evaluating the Accuracy of Diff Tools](https://users.encs.concordia.ca/~nikolaos/publications/TOSEM_2024.pdf),\" *ACM Transactions on Software Engineering and Methodology*, 2024. (accepted)\n\n    @article{Alikhanifard:TOSEM:2024:RefactoringMiner3.0,\n        author = {Alikhanifard, Pouria and Tsantalis, Nikolaos},\n        title = {A Novel Refactoring and Semantic Aware Abstract Syntax Tree Differencing Tool and a Benchmark for Evaluating the Accuracy of Diff Tools},\n        year = {2024},\n        publisher = {Association for Computing Machinery},\n        address = {New York, NY, USA},\n        issn = {1049-331X},\n        url = {https://doi.org/10.1145/3696002},\n        doi = {10.1145/3696002},\n        note = {Just Accepted},\n        journal = {ACM Transactions on Software Engineering and Methodology},\n        month = {sep},\n        keywords = {Source code differencing, Abstract Syntax Trees, Benchmark}\n    }\n",
                "type": "Text_excerpt",
                "original_header": "How to cite RefactoringMiner",
                "parent_header": [
                    "Research"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{Tsantalis:ICSE:2018:RefactoringMiner,\n    keywords = {Git, Oracle, abstract syntax tree, accuracy, commit, refactoring},\n    address = {New York, NY, USA},\n    publisher = {ACM},\n    acmid = {3180206},\n    doi = {10.1145/3180155.3180206},\n    url = {http://doi.acm.org/10.1145/3180155.3180206},\n    numpages = {12},\n    pages = {483--494},\n    location = {Gothenburg, Sweden},\n    isbn = {978-1-4503-5638-1},\n    year = {2018},\n    series = {ICSE '18},\n    booktitle = {Proceedings of the 40th International Conference on Software Engineering},\n    title = {Accurate and Efficient Refactoring Detection in Commit History},\n    author = {Tsantalis, Nikolaos and Mansouri, Matin and Eshkevari, Laleh M. and Mazinanian, Davood and Dig, Danny},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3180155.3180206",
                "title": "Accurate and Efficient Refactoring Detection in Commit History",
                "author": "Tsantalis, Nikolaos and Mansouri, Matin and Eshkevari, Laleh M. and Mazinanian, Davood and Dig, Danny",
                "url": "http://doi.acm.org/10.1145/3180155.3180206"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "@article{Tsantalis:TSE:2020:RefactoringMiner2.0,\n    doi = {10.1109/TSE.2020.3007722},\n    pages = {930-950},\n    number = {3},\n    volume = {48},\n    year = {2022},\n    journal = {IEEE Transactions on Software Engineering},\n    title = {RefactoringMiner 2.0},\n    author = {Tsantalis, Nikolaos and Ketkar, Ameya and Dig, Danny},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1109/TSE.2020.3007722",
                "title": "RefactoringMiner 2.0",
                "author": "Tsantalis, Nikolaos and Ketkar, Ameya and Dig, Danny"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "@article{Alikhanifard:TOSEM:2024:RefactoringMiner3.0,\n    keywords = {Source code differencing, Abstract Syntax Trees, Benchmark},\n    month = {sep},\n    journal = {ACM Transactions on Software Engineering and Methodology},\n    note = {Just Accepted},\n    doi = {10.1145/3696002},\n    url = {https://doi.org/10.1145/3696002},\n    issn = {1049-331X},\n    address = {New York, NY, USA},\n    publisher = {Association for Computing Machinery},\n    year = {2024},\n    title = {A Novel Refactoring and Semantic Aware Abstract Syntax Tree Differencing Tool and a Benchmark for Evaluating the Accuracy of Diff Tools},\n    author = {Alikhanifard, Pouria and Tsantalis, Nikolaos},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3696002",
                "title": "A Novel Refactoring and Semantic Aware Abstract Syntax Tree Differencing Tool and a Benchmark for Evaluating the Accuracy of Diff Tools",
                "author": "Alikhanifard, Pouria and Tsantalis, Nikolaos",
                "url": "https://doi.org/10.1145/3696002"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "The project is led and maintained by [Zarina Kurbatova](https://github.com/onewhl).\n",
                "type": "Text_excerpt",
                "original_header": "Kotlin",
                "parent_header": [
                    "Support for other programming languages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "value": "* [Py-RefactoringMiner](https://github.com/maldil/RefactoringMiner) has been developed by [Malinda Dilhara](https://maldil.github.io/), a Ph.D. student in the department of Computer Science at University of Colorado Boulder under the suprevision of [Danny Dig](https://dig.cs.illinois.edu/).\n",
                "type": "Text_excerpt",
                "original_header": "Python",
                "parent_header": [
                    "Support for other programming languages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "**<ins>supported by RefactoringMiner 1.0 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.0 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.1 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.2 and newer versions</ins>** \n63. Change Attribute Access Modifier\n64. Encapsulate Attribute\n65. Parameterize Attribute\n66. Replace Attribute with Variable\n67. Add Method Modifier (`final`, `static`, `abstract`, `synchronized`)\n68. Remove Method Modifier (`final`, `static`, `abstract`, `synchronized`)\n69. Add Attribute Modifier (`final`, `static`, `transient`, `volatile`)\n70. Remove Attribute Modifier (`final`, `static`, `transient`, `volatile`)\n71. Add Variable Modifier (`final`)\n72. Add Parameter Modifier (`final`)\n73. Remove Variable Modifier (`final`)\n74. Remove Parameter Modifier (`final`)\n75. Change Class Access Modifier\n76. Add Class Modifier (`final`, `static`, `abstract`)\n77. Remove Class Modifier (`final`, `static`, `abstract`)\n78. Move Package\n79. Split Package\n80. Merge Package\n81. Localize Parameter\n82. Change Type Declaration Kind (`class`, `interface`, `enum`, `annotation`, `record`)\n83. Collapse Hierarchy\n84. Replace Loop with Pipeline\n85. Replace Anonymous with Lambda \n**<ins>supported by RefactoringMiner 2.3 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.4 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 3.0 and newer versions</ins>** \n",
                "original_header": "General info"
            },
            "confidence": 0.9575193895126168,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\t1. Replace Loop with Pipeline\n\t2. Replace Anonymous with Lambda\n \t3. Replace Pipeline with Loop\n  \t4. Merge Catch\n   \t5. Replace Anonymous with Class\n   \t6. Replace Generic With Diamond\n\t7. Try With Resources\n\t8. Replace Conditional With Ternary\n</details> \n",
                "original_header": "Supported Refactoring Types"
            },
            "confidence": 0.9998158264452126,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In order to build the project, run `./gradlew jar` (or `gradlew jar`, in Windows) in the project's root directory.\nAlternatively, you can generate a complete distribution zip including all runtime dependencies running `./gradlew distZip`. \n",
                "original_header": "How to build RefactoringMiner"
            },
            "confidence": 0.9999839119921128,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Table of Contents"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/tsantalis/refactoringminer/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://repobeats.axiom.co/api/embed/aaedbff1e1adfcefc54fff9dbdac2f5384cbcf87.svg"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://user-images.githubusercontent.com/1483516/80326324-62fab400-8806-11ea-9595-4906018b831a.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://user-images.githubusercontent.com/1483516/142782871-7f7545d3-3fe7-4d0c-8860-db892757a152.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://user-images.githubusercontent.com/1483516/52974463-b0240000-338f-11e9-91e2-966f20be2514.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2111.07002v1, 13 Nov 2021.\n64. Anton Ivanov, Zarina Kurbatova, Yaroslav Golubev, Andrey Kirilenko, and Timofey Bryksin, \"[AntiCopyPaster: Extracting Code Duplicates As Soon As They Are Introduced in the IDE](https://arxiv.org/abs/2112.15230),\" https://arxiv.org/abs/2112.15230v1, 30 Dec 2021.\n65. Max Ellis, Sarah Nadi, and Danny Dig, \"[A Systematic Comparison of Two Refactoring-aware Merging Techniques](https://arxiv.org/abs/2112.10370),\" https://arxiv.org/abs/2112.10370v1, 20 Dec 2021.\n\n# Support for other programming languages\n## Kotlin\n* [KotlinRMiner](https://github.com/JetBrains-Research/kotlinRMiner) has been developed by [JetBrains Research](https://research.jetbrains.org/).\nThe project is led and maintained by [Zarina Kurbatova](https://github.com/onewhl).\n\n## Python\n* [PyRef](https://github.com/PyRef/PyRef) has been developed by Hassan Atwi and [Bin Lin](https://binlin.info/) from the Software Institute at USI - Universit\u00e0 della Svizzera Italiana, Switzerland.\n* [Py-RefactoringMiner](https://github.com/maldil/RefactoringMiner) has been developed by [Malinda Dilhara](https://maldil.github.io/), a Ph.D. student in the department of Computer Science at University of Colorado Boulder under the suprevision of [Danny Dig](https://dig.cs.illinois.edu/).\n\n# Refactoring detection API usage guidelines\n## With a locally cloned git repository\nRefactoringMiner can automatically detect refactorings in the entire history of \ngit repositories, between specified commits or tags, or at specified commits.\n\nIn the code snippet below we demonstrate how to print all refactorings performed\nin the toy project https://github.com/danilofes/refactoring-toy-example.git.\n\n```java\nGitService gitService = new GitServiceImpl();\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n\nRepository repo = gitService.cloneIfNotExists(\n    \"tmp/refactoring-toy-example\",\n    \"https://github.com/danilofes/refactoring-toy-example.git\");\n\nminer.detectAll(repo, \"master\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2112.15230v1, 30 Dec 2021.\n65. Max Ellis, Sarah Nadi, and Danny Dig, \"[A Systematic Comparison of Two Refactoring-aware Merging Techniques](https://arxiv.org/abs/2112.10370),\" https://arxiv.org/abs/2112.10370v1, 20 Dec 2021.\n\n# Support for other programming languages\n## Kotlin\n* [KotlinRMiner](https://github.com/JetBrains-Research/kotlinRMiner) has been developed by [JetBrains Research](https://research.jetbrains.org/).\nThe project is led and maintained by [Zarina Kurbatova](https://github.com/onewhl).\n\n## Python\n* [PyRef](https://github.com/PyRef/PyRef) has been developed by Hassan Atwi and [Bin Lin](https://binlin.info/) from the Software Institute at USI - Universit\u00e0 della Svizzera Italiana, Switzerland.\n* [Py-RefactoringMiner](https://github.com/maldil/RefactoringMiner) has been developed by [Malinda Dilhara](https://maldil.github.io/), a Ph.D. student in the department of Computer Science at University of Colorado Boulder under the suprevision of [Danny Dig](https://dig.cs.illinois.edu/).\n\n# Refactoring detection API usage guidelines\n## With a locally cloned git repository\nRefactoringMiner can automatically detect refactorings in the entire history of \ngit repositories, between specified commits or tags, or at specified commits.\n\nIn the code snippet below we demonstrate how to print all refactorings performed\nin the toy project https://github.com/danilofes/refactoring-toy-example.git.\n\n```java\nGitService gitService = new GitServiceImpl();\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n\nRepository repo = gitService.cloneIfNotExists(\n    \"tmp/refactoring-toy-example\",\n    \"https://github.com/danilofes/refactoring-toy-example.git\");\n\nminer.detectAll(repo, \"master\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2112.10370"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2112.15230"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2112.10370v1, 20 Dec 2021.\n\n# Support for other programming languages\n## Kotlin\n* [KotlinRMiner](https://github.com/JetBrains-Research/kotlinRMiner) has been developed by [JetBrains Research](https://research.jetbrains.org/).\nThe project is led and maintained by [Zarina Kurbatova](https://github.com/onewhl).\n\n## Python\n* [PyRef](https://github.com/PyRef/PyRef) has been developed by Hassan Atwi and [Bin Lin](https://binlin.info/) from the Software Institute at USI - Universit\u00e0 della Svizzera Italiana, Switzerland.\n* [Py-RefactoringMiner](https://github.com/maldil/RefactoringMiner) has been developed by [Malinda Dilhara](https://maldil.github.io/), a Ph.D. student in the department of Computer Science at University of Colorado Boulder under the suprevision of [Danny Dig](https://dig.cs.illinois.edu/).\n\n# Refactoring detection API usage guidelines\n## With a locally cloned git repository\nRefactoringMiner can automatically detect refactorings in the entire history of \ngit repositories, between specified commits or tags, or at specified commits.\n\nIn the code snippet below we demonstrate how to print all refactorings performed\nin the toy project https://github.com/danilofes/refactoring-toy-example.git.\n\n```java\nGitService gitService = new GitServiceImpl();\nGitHistoryRefactoringMiner miner = new GitHistoryRefactoringMinerImpl();\n\nRepository repo = gitService.cloneIfNotExists(\n    \"tmp/refactoring-toy-example\",\n    \"https://github.com/danilofes/refactoring-toy-example.git\");\n\nminer.detectAll(repo, \"master\", new RefactoringHandler() {\n  @Override\n  public void handle(String commitId, List<Refactoring> refactorings) {\n    System.out.println(\"Refactorings at \" + commitId);\n    for (Refactoring ref : refactorings) {\n      System.out.println(ref.toString());\n    "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2111.07002"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
        }
    ]
}