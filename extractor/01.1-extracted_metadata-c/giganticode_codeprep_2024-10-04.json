{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:07:41"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/giganticode/codeprep",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "giganticode",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-04-05T13:20:24Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-01-04T07:09:56Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A toolkit for pre-processing large source code corpora",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Add boundaries of comments to pre-processing metadata\n- Add Windows and OSx support\n- Switch from unittest to pytest+doctest\n- Bugfixes related to literal presentation of tokens on the disk\n- Bugfixes related to adding </t> to mark the end of a full token\n \n",
                "original_header": "1.0.0-alpha.10 (NOT backward compatible with 1.0.0-alpha.9)"
            },
            "confidence": 0.9019445000964205,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Store version in `codeprep.__version__`\n- implement `--full-strings` and `--max-str-length` options\n- replace `ronin` method/command wit`--ronin` option and apply ronin algorithm on word level instead of full identifier level\n- if `split_numbers` option is set to `True`, split numbers not only in code but also in strings and comments\n- change placeholder values to more human-readable\n- improve logging displaying\n- Bugfixes\n \n",
                "original_header": "1.0.0-alpha.7 (NOT backward compatible with 1.0.0-alpha.6)"
            },
            "confidence": 0.9543668024717274,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "codeprep",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "giganticode/codeprep",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/giganticode/codeprep/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/giganticode/codeprep/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 45,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "language-modeling, mining-software-repositories, natural-language-processing, source-code-analysis, word-segmentation",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 12,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/giganticode/codeprep/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 318614
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 29780
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/giganticode/codeprep/releases/41765317",
                "tag": "v1.0.5",
                "name": "v1.0.5",
                "author": {
                    "name": "hlibbabii",
                    "type": "User"
                },
                "description": "* Add workaround for calculation vocabulary on OSx (#11) ",
                "tarball_url": "https://api.github.com/repos/giganticode/codeprep/tarball/v1.0.5",
                "zipball_url": "https://api.github.com/repos/giganticode/codeprep/zipball/v1.0.5",
                "html_url": "https://github.com/giganticode/codeprep/releases/tag/v1.0.5",
                "url": "https://api.github.com/repos/giganticode/codeprep/releases/41765317",
                "release_id": 41765317,
                "date_created": "2021-04-21T18:09:28Z",
                "date_published": "2021-04-21T09:42:39Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/giganticode/codeprep/releases/24646282",
                "tag": "v1.0.1",
                "name": "v1.0.1",
                "author": {
                    "name": "hlibbabii",
                    "type": "User"
                },
                "description": "## Changes:\r\n\r\n- Fix training custom bpe codes (Thanks to @mir-am : pull request #6  )\r\n- Fix corpus pre-processing on Windows",
                "tarball_url": "https://api.github.com/repos/giganticode/codeprep/tarball/v1.0.1",
                "zipball_url": "https://api.github.com/repos/giganticode/codeprep/zipball/v1.0.1",
                "html_url": "https://github.com/giganticode/codeprep/releases/tag/v1.0.1",
                "url": "https://api.github.com/repos/giganticode/codeprep/releases/24646282",
                "release_id": 24646282,
                "date_created": "2020-03-18T18:32:41Z",
                "date_published": "2020-03-18T18:41:59Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/giganticode/codeprep/releases/23108638",
                "tag": "v1.0.0",
                "name": "First stable release",
                "author": {
                    "name": "hlibbabii",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/giganticode/codeprep/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/giganticode/codeprep/zipball/v1.0.0",
                "html_url": "https://github.com/giganticode/codeprep/releases/tag/v1.0.0",
                "url": "https://api.github.com/repos/giganticode/codeprep/releases/23108638",
                "release_id": 23108638,
                "date_created": "2020-01-24T16:01:31Z",
                "date_published": "2020-01-24T16:05:59Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Make sure you have python >= 3.6 installed in your system; pip, setuptools and wheel are up to date.\n```bash\npython --version\npython -m pip install --upgrade pip setuptools wheel\n```\n\nInstall **codeprep** lib:\n```bash\npip install codeprep\n```\n\nIn order to run the **ronin** algorithm, you will have to additionally install Spiral module (https://github.com/casics/spiral/):\n```bash\npip install git+https://github.com/casics/spiral.git\n```\n\nThe tool can be used **as a python library** as well as a standalone module runnable with a **CLI**. \nYou can pass the path to the dataset or the text itself to be preprocessed. When using Python API for the former option \nyou need to import methods from `codeprep.api.text` module, for the latter - from `codeprep.api.corpus`.\nBelow you can see the general patterns of usage.\n\n\nPython API\n```python\n>>> import codeprep.api.text as cp\n>>> cp.<commmand>('Some code to be split')\n```\n\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.<commmand>('/path/to/the/dataset')\n```\n\nCLI\n```bash\ncodeprep <commmand> \"Some code to be split\"\n```\n\n```bash\ncodeprep <commmand> --path /path/to/the/dataset\n```\n\n\nHereafter we will demonstrate the usage as a python library. The CLI is analogous to the python API. You can find the documentation about how to use it [here](codeprep/cli/spec.py). \n",
                "type": "Text_excerpt",
                "original_header": "Getting started"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "Tokenization + CamelCase- and snake_case- splitting:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code)\n['void', '<w>', 'test', '_', 'Word', 'Ueberraschung', 'Printer', '</w>', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', '<w>', 'print', 'Word', '</w>', '(', '\"', '\\t', '.', '.', '.', '\\t', '\u00dcberraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n",
                "type": "Text_excerpt",
                "original_header": "Basic splitting",
                "parent_header": [
                    "Getting started",
                    "Usage examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.nosplit(input_code)\n['void', 'test_WordUeberraschungPrinter', '(', ')', '{', '\\n', \n'\\t', 'if', '(', 'eps', '>', '=', '0', '.', '345e', '+', '4', ')', '{', '/', '/', 'FIXME', '\\n', \n'\\t', '\\t', 'printWord', '(', '\"', '\\t', '.', '.', '.', '\\t', '\u00dcberraschung', '\"', ')', ';', '\\n', \n'\\t', '}', '\\n', \n'}']\n```\n",
                "type": "Text_excerpt",
                "original_header": "Tokenize but don't split identifiers",
                "parent_header": [
                    "Getting started",
                    "Usage examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "The following code does **camelCase-** and **snake_case-** splitting and applies **bpe with 10k merges** on top:\n\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.bpe(input_code, bpe_codes_id='10k')\n['v', 'oid</t>', 'test_', 'Word', 'U', 'eb', 'err', 'as', 'ch', 'un', 'g', 'Print', 'er</t>', '(</t>', ')</t>', '{</t>', '\\n', \n'\\t', 'i', 'f</t>', '(</t>', 'e', 'ps</t>', '></t>', '=</t>', '0</t>', '.</t>', '34', '5', 'e</t>', '+</t>', '4</t>', ')</t>', '{</t>', '/</t>', '/</t>', 'FIX', 'M', 'E</t>',  '\\n', \n'\\t', '\\t', 'print', 'Word</t>', '(</t>', '\"</t>', '\\t', '.</t>', '.</t>', '.</t>', '\\t', '\u00dc', 'b', 'err', 'as', 'ch', 'un', 'g</t>', '\"</t>', ')</t>', ';</t>', '\\n', \n'\\t', '}</t>', '\\n', \n'}</t>']\n```\n\n**codeprep** by default does BPE using bpe codes leaned on [the Github Java Corpus](http://groups.inf.ed.ac.uk/cup/javaGithub/). The argument `bpe_codes_id='10k'` tells the **codeprep** tool to use 10,000 bpe merges. \nOther possible values are `1k` and `5k` (1,000 and 5,000 merges respectively). Please refer to section [Learning custom BPE codes](#Learning-custom-BPE-codes) to train custom bpe codes.\n\n**For other commands and options like `chars`, `--split-numbers`, `--ronin`, `--stem`, please refer to the [docs](codeprep/cli/spec.py)**.\n",
                "type": "Text_excerpt",
                "original_header": "BPE (Byte-Pair encoding)",
                "parent_header": [
                    "Getting started",
                    "Usage examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "Set `calc_vocab` param to `True` when calling a preprocessing method to calculate the vocabulary of the preprocessed corpus, e.g.:\n```python\n>>> import codeprep.api.corpus as cp\n>>> cp.basic('/path/to/train/on', calc_vocab=True)\n...\nVocab is available at /path/to/vocab\n```\n",
                "type": "Text_excerpt",
                "original_header": "Calculate vocabulary",
                "parent_header": [
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "If you don't want to use, pre-trained BPE codes, it's possible to train custom ones. For example, to train 10,000 merges on the corpus located at the path `/path/to/train/on`, the following command should be run (only CLI):\n\n```bash\ncodeprep learn-bpe 10000 -p /path/to/train/on --id custom-bpe-codes \n```\n\nNow it is possible to do bpe splitting by running the bpe command with the number of merges from 0 to 10,000 (for example with 3500 merges):\n\n```bash\ncodeprep bpe custom-bpe-codes-3500 -p /path/to/preprocess \n```\n\nBefore bpe codes are trained, the [basic preprocessing](#basic-splitting) is done, which can also be tuned with arguments described in section [Tweaking preprocessing](#tweaking-preprocessing).\n\n",
                "type": "Text_excerpt",
                "original_header": "Learning custom BPE codes",
                "parent_header": [
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "You can pass the following parameters with a `True` value (default values for all of them are False), to tweak the way the imput is preprocessed:\n\n * `no_str` - replace strings with <string> placeholders.\n * `no_com` - replace comments with <comment> placeholders.\n * `no_spaces` - remove newlines and tabs.\n * `no_unicode` - replace words containing non-ascii characters with <non-en> placeholders.\n * `no_case` - lowercase words and encode information about case in <Cap> <CAP> tokens.\n```python\n>>> import codeprep.api.text as cp\n>>> input_code = '''void test_WordUeberraschungPrinter() {\n...     if (eps >= 0.345e+4) { // FIXME\n...         printWord(\"     ...     \u00dcberraschung\");\n...     }\n... }'''\n>>> cp.basic(input_code, no_spaces=True, no_unicode=True, no_case=True, no_com=True, no_str=True)\n['void', '<w>', 'test', '_', '<Cap>', 'word', '<Cap>', 'ueberraschung', '<Cap>', 'printer', '</w>', '(', ')', '{', \n'if', '(', 'eps', '>', '=', '0', '.', '<w>', '345', 'e', '</w>', '+', '4', ')', '{', '/', '/', '<CAPS>', 'fixme', \n'<w>', 'print', '<Cap>', 'word', '</w>', '(', '\"', '.', '.', '.', '<Cap>', '<non-en>', '\"', ')', ';', \n'}', \n'}']\n```\n\nSimilar params can be specified as switches `--no-str`, `--no-com`, `--no-spaces`, `--no-unicode`, `--no-case` in CLI commands.\n",
                "type": "Text_excerpt",
                "original_header": "Tweaking preprocessing",
                "parent_header": [
                    "Getting started",
                    "Additional options"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "Unless explicitely specified, **codeprep** will assume the language is java. To make sure the input is preprocessed as intended, it is always **highly recommended** to specify it:\n```python\nimport codeprep.api.text as cp\n>>> cp.bpe(\"volatile\", '1k')\n['volatile']\n>>> cp.bpe(\"volatile\", '1k', extension=\"py\")\n['v', 'ol', 'a', 'ti', 'le</t>']\n# Since 'volatile' is a keyword in java, it is represented as one token unlike in python \n# where it is pretty rare when used as an identifier and therefore represented as multiple subtokens.\n```\n\nWhen preprocessing a corpus, `codeprep` identifies the language based on the file extension. If you want only files with (a) certain extension(s) to be preprocessed, you can specify --ext param \n```bash\ncodeprep basic --path /path/to/be/preprocessed --ext \"java\"\n\n# or if you want to pre-process multiple types of files: \ncodeprep basic --path /path/to/be/preprocessed --ext \"java|c|py|js\"\n```",
                "type": "Text_excerpt",
                "original_header": "Specifying the language",
                "parent_header": [
                    "Getting started",
                    "Additional options"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "You can specify the path to where the preprocessed corpus will be written:\n```bash\ncodeprep basic --path /path/to/preprocess --output-path /path/to/output\n```\n\nTo print logs with log level DEBUG and higher to stdout:\n```bash\ncodeprep basic --path /path/to/preprocess --verbose\n```\n",
                "type": "Text_excerpt",
                "original_header": "Miscellaneous",
                "parent_header": [
                    "Getting started",
                    "Additional options"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "To get help on commands and options:\n\n```bash\ncodeprep --help\n```\n",
                "type": "Text_excerpt",
                "original_header": "Getting Help",
                "parent_header": [
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "value": "This library was build to run experiments for our paper accepted at ICSE 2020: [Big Code != Big Vocabulary: Open-Vocabulary Models for Source Code](https://arxiv.org/pdf/2003.07914.pdf)\n\nIf you you the library or the results, please cite the paper:\n\n ```\n @article{karampatsis2020big,\n  title={Big Code!= Big Vocabulary: Open-Vocabulary Models for Source Code},\n  author={Karampatsis, Rafael-Michael and Babii, Hlib and Robbes, Romain and Sutton, Charles and Janes, Andrea},\n  journal={arXiv preprint arXiv:2003.07914},\n  year={2020}\n}\n ```\n\n",
                "type": "Text_excerpt",
                "original_header": "Paper",
                "parent_header": [
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "To get help on commands and options:\n\n```bash\ncodeprep --help\n```\n",
                "type": "Text_excerpt",
                "original_header": "Getting Help",
                "parent_header": [
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To store the cache, **codeprep** uses a directory speecified by `$XDG_CACHE_HOME/codeprep/<codeprep_version>` variable if its value is set, \n`$HOME/.cache/codeprep/<codeprep_version>` otherwise. \n",
                "original_header": "Caching"
            },
            "confidence": 0.9930292828061129,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Add more flixibility with versions of dependencies\n \n",
                "original_header": "1.0.3"
            },
            "confidence": 0.9180721378880804,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Fix training custom bpe codes (Thanks to @mir-am)\n- Fix corpus pre-processing on Windows\n \n",
                "original_header": "1.0.1"
            },
            "confidence": 0.939517339442219,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Initial PyPI release\n \n",
                "original_header": "1.0.0-alpha.6"
            },
            "confidence": 0.9778317416837412,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@article{karampatsis2020big,\n    year = {2020},\n    journal = {arXiv preprint arXiv:2003.07914},\n    author = {Karampatsis, Rafael-Michael and Babii, Hlib and Robbes, Romain and Sutton, Charles and Janes, Andrea},\n    title = {Big Code!= Big Vocabulary: Open-Vocabulary Models for Source Code},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Big Code!= Big Vocabulary: Open-Vocabulary Models for Source Code",
                "author": "Karampatsis, Rafael-Michael and Babii, Hlib and Robbes, Romain and Sutton, Charles and Janes, Andrea"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Codeprep"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2003.07914"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2003.07914.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
        }
    ]
}