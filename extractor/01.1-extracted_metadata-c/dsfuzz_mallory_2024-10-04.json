{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:35:00"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/dsfuzz/mallory",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "dsfuzz",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-08-12T05:51:03Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-10T01:46:17Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/LICENSE"
        },
        {
            "result": {
                "value": "This project is licensed under the Apache License 2.0 - see the [LICENSE](./LICENSE) file for details. \n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "Jepsen &amp; Mallory"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Greybox Fuzzing of Distributed Systems (CCS'23)",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "**Jepsen** is a Clojure library. A test is a Clojure program which uses the Jepsen\nlibrary to set up a distributed system, run a bunch of operations against that\nsystem, and verify that the history of those operations makes sense. Jepsen has\nbeen used to verify everything from eventually-consistent commutative databases\nto linearizable coordination systems to distributed task schedulers. It can\nalso generate graphs of performance and availability, helping you characterize\nhow a system responds to different faults. See\n[jepsen.io](https://jepsen.io/analyses) for examples of the sorts of analyses\nyou can carry out with Jepsen. \n**Mallory** is a graybox extension to Jepsen, implemented in Rust. It hooks into\nan existing Jepsen test and takes the role of the nemesis, deciding in real-time\nwhich actions to inject and when, based on the _runtime_ behaviour of the system\nunder test.\n \n",
                "original_header": "Jepsen &amp; Mallory"
            },
            "confidence": 0.9638270761512899,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Mallory hooks into your Jepsen test and takes the place of the nemesis\ngenerator. We use a custom version of Jepsen, modified to inform Mallory when\ntests start and end and when client and nemesis operations are executed. Most\nimportantly, Mallory uses the nemeses defined in the Jepsen test---this requires\nsome modification of these nemeses, as explained in the tutorial below. \n",
                "original_header": "Mallory"
            },
            "confidence": 0.9482284085536834,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "mallory",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "dsfuzz/mallory",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/dsfuzz/mallory/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/dsfuzz/mallory/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 37,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "distributed-system-fuzzing, distributed-system-testing, distributed-systems, fuzzing, network-fuzzer, protocol-fuzzing, testing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 3,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/dsfuzz/mallory/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Clojure",
                "name": "Clojure",
                "type": "Programming_language",
                "size": 1417507
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Rust",
                "name": "Rust",
                "type": "Programming_language",
                "size": 519893
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 71154
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 65484
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Go",
                "name": "Go",
                "type": "Programming_language",
                "size": 36396
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 21464
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 14869
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 14112
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 4877
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 2275
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Contributing to Jepsen\n\nHi there, and thanks for helping make Jepsen better! I've got just one request:\nstart your commit messages with the *part* of Jepsen you're changing. For\ninstance, if I made a change to the MongoDB causal consistency tests:\n\n> MongoDB causal: fix a bug when analyzing zero-length histories\n\nNamespaces are cool too!\n\n> jepsen.os.debian: fix libzip package name for debian stretch\n\nIf you're making a chance to the core Jepsen library, as opposed to a specific\ndatabase test, you can be more concise:\n\n> add test for single nemesis events\n\nJepsen's a big project with lots of moving parts, and it can be confusing to\nread the commit logs. Giving a bit of context makes my life a lot easier.\n\nThanks!\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/contributing.md"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/template/docker-compose.yml",
                "type": "Url",
                "format": "docker_compose"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/template/docker-compose.yml"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/node/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/node/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/control/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/control/Dockerfile"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/node/setup-jepsen.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/node/setup-networking.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/node/run-charybdefs.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dsfuzz/mallory/main/docker/control/init.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "Mallory has been accepted for publication at the 2023 ACM SIGSAC Conference on Computer and Communications Security (CCS 2023). \nThe paper is also available on [arXiv](https://arxiv.org/pdf/2305.02601.pdf). If you use this code in your scientific work, please cite the paper as follows:\n```\n@inproceedings{mallory,\nauthor={Meng, Ruijie and P{\\^\\i}rlea, George and Roychoudhury, Abhik and Sergey, Ilya},\ntitle={Greybox Fuzzing of Distributed Systems},\nbooktitle={Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security},\npages={1615--1629},\nyear={2023}}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citing Mallory",
                "parent_header": [
                    "Jepsen &amp; Mallory"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{mallory,\n    year = {2023},\n    pages = {1615--1629},\n    booktitle = {Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security},\n    title = {Greybox Fuzzing of Distributed Systems},\n    author = {Meng, Ruijie and P{\\^\\i}rlea, George and Roychoudhury, Abhik and Sergey, Ilya},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Greybox Fuzzing of Distributed Systems",
                "author": "Meng, Ruijie and P{\\^\\i}rlea, George and Roychoudhury, Abhik and Sergey, Ilya"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "This [tutorial](doc/tutorial/index.md) walks you through writing a Jepsen test\nfrom scratch. For reference, see the [API documentation](http://jepsen-io.github.io/jepsen/).\n",
                "type": "Text_excerpt",
                "original_header": "Documentation",
                "parent_header": [
                    "Jepsen &amp; Mallory"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "We provide a ready-made environment using Vagrant:\n\n```bash\ncd docker/\nvagrant plugin install vagrant-reload   # only needed once\nvagrant up\n```\n",
                "type": "Text_excerpt",
                "original_header": "Setting up a Jepsen + Mallory environment",
                "parent_header": [
                    "Jepsen &amp; Mallory"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        },
        {
            "result": {
                "value": "If you have an existing Jepsen test harness, Mallory takes the place of your\nexisting nemesis package and generator.\n\n```Clojure\n(:require [jepsen.mediator.wrapper :as med])\n\n;; this should be a list of packages, as returned by\n;; jepsen/nemesis/combined.clj:nemesis-packages\n;; and NOT a combined package (as returned by compose-package)\n;; If you have custom nemeses, you need to write a version of this yourself\n;; that includes your custom nemesis.\npackages      (nemesis/nemesis-packages nemesis-opts)\n\n;; Previously, the nemesis package was obtained as such:\n;; nemesis       (nemesis/nemesis-package nemesis-opts)\nnemesis      (med/adaptive-nemesis packages nemesis-opts)]\n\n;; in your test, make the nemesis generator refer to the adaptive package:\n:generator\n        (->> (:generator workload)\n                (gen/stagger (/ (:rate opts)))\n                ;; use the adaptive nemesis generator\n                (gen/nemesis (:generator nemesis))\n                (gen/time-limit (:time-limit opts)))\n```\n\nIMPORTANT:\n- if your nemesis package only uses nemeses in Jepsen's default\n  `jepsen/nemesis/combined.clj`, our distribution rewrites those so they are\n  usable by Mallory;\n- if you package custom nemeses, you must modify them as follows: (1) add a\n  `:ops` field that returns the set of operations (and arguments) supported by\n  the nemesis, and (2) add a `:dispatch` field that takes an operation type\n  returned by `op` and returns an instantiated operation that can be invoked by\n  the nemesis client\n\nHere is an example nemesis adapted for use with Mallory:\n\n```Clojure\n(defn partition-package\n  \"A nemesis and generator package for network partitions. Options as for\n  nemesis-package.\"\n  [opts]\n  (let [needed? ((:faults opts) :partition)\n        db      (:db opts)\n        targets (:targets (:partition opts) (partition-specs db))\n        start (fn start [_ _]\n                {:type  :info\n                 :f     :start-partition\n                 :value (rand-nth targets)})\n        stop  {:type :info, :f :stop-partition, :value nil}\n        gen   (->> (gen/flip-flop start (repeat stop))\n                   (gen/stagger (:interval opts default-interval)))\n        ;; Needed by Mallory -- to inform at start-up which operations this nemesis can perform\n        ops   (cond-> []\n                needed? (concat [{:f :start-partition :values (vec targets)}, {:f :stop-partition, :values [nil]}]))]\n    ;; Needed by Mallory -- to transform an operation type into a specific operation\n    (defn dispatch [op test ctx]\n      (case (:f op)\n        :start-partition  ((fn start [_ _] {:type  :info\n                                            :f     :start-partition\n                                            :value (or (:value op) (rand-nth targets))}) test ctx)\n        :stop-partition  stop\n        nil))\n\n    {:generator       (when needed? gen)\n     :final-generator (when needed? stop)\n     :nemesis         (partition-nemesis db)\n     :perf            #{{:name  \"partition\"\n                         :start #{:start-partition}\n                         :stop  #{:stop-partition}\n                         :color \"#E9DCA0\"}}\n     ;; these two fields are needed by Mallory\n     :ops             ops\n     :dispatch        dispatch}))\n```\n\nAn example `nemesis-packages` function (with many custom nemesis packages):\n\n```Clojure\n(defn nemesis-packages\n  \"Constructs a nemesis and generators for dqlite.\"\n  [opts]\n  (let [opts (update opts :faults set)]\n    (->> (concat [(nc/partition-package opts)\n                  (nc/db-package opts)\n                  (member-package opts)\n                  (stop-package opts)\n                  (stable-package opts)]\n                 (:extra-packages opts))\n         (remove nil?))))\n```\n\nA much simpler one:\n\n```Clojure\n(defn nemesis-packages\n  \"Builds a combined package for the given options.\"\n  [opts]\n  (->> (nc/nemesis-packages opts)\n       (concat [(member-package opts)])\n       (remove nil?)))\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Modifying an existing Jepsen test for Mallory",
                "parent_header": [
                    "Jepsen &amp; Mallory",
                    "Setting up a Jepsen + Mallory environment"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "contributors": [
        {
            "result": {
                "value": "  * Ruijie Meng\n  * George P\u00eerlea\n  * Abhik Roychoudhury\n  * Ilya Sergey\n",
                "type": "Text_excerpt",
                "original_header": "Contributors",
                "parent_header": [
                    "Jepsen &amp; Mallory",
                    "Contributions"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        },
        {
            "result": {
                "value": "We use [Jepsen](https://jepsen.io/) as the underlying tool. Thanks to Jepsen's developers. We also welcome other contributors to improve and extend Mallory.\n",
                "type": "Text_excerpt",
                "original_header": "Other Contributors",
                "parent_header": [
                    "Jepsen &amp; Mallory",
                    "Contributions"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Jepsen &amp; Mallory"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2305.02601.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
        }
    ]
}