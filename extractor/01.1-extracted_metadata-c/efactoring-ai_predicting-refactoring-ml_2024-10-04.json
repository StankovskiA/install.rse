{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 16:24:21"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/refactoring-ai/predicting-refactoring-ml",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "refactoring-ai",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-04-10T12:25:40Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-03-20T04:12:15Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "The MIT License\n\nCopyright (c) 2010-2019 Google, Inc. http://angularjs.org\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/LICENSE"
        },
        {
            "result": {
                "value": "This project is licensed under the MIT license.\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "Machine Learning for Software refactoring"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Refactoring recommendation via ML",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This repository contains all our exploration on the use\nof machine learning methods to recommend software refactoring. \n",
                "original_header": "Machine Learning for Software refactoring"
            },
            "confidence": 0.9607251358607072,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We use the following queries to remove half-baked projects completely from our database:\n```\ndelete from RefactoringCommit where project_id in (select id from project where finishedDate is null);\ndelete from StableCommit where project_id in (select id from project where finishedDate is null);\ndelete from project where finishedDate is null;\n```\n \n",
                "original_header": "Cleaning up the final database"
            },
            "confidence": 0.9429342799758146,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "predicting-refactoring-ml",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "refactoring-ai/predicting-refactoring-ml",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/refactoring-ai/predicting-refactoring-ml/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/refactoring-ai/predicting-refactoring-ml/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 28,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 8,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/refactoring-ai/predicting-refactoring-ml/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 264349
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 80716
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 8919
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 122
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/run-data-collection.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/log-analyzer.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/run-cloud.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/scripts/install_and_run_docker-compose.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/docker-compose.yml",
                "type": "Url",
                "format": "docker_compose"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/data-collection/docker-compose.yml"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "run": [
        {
            "result": {
                "value": "You can run the data collection by simply running the `RunSingleProject.java` class. This class contains a program that requires the following parameters, in this order:\n\n1. _The dataset name_: A hard-coded string with the name of the dataset (e.g., \"apache\", \"fdroid\"). This information appears in the generated data later on, so that you can use it as a filter.\n\n1. _The git URL_: The git url of the project to be analyzed. Your local machine must have all the permissions to clone it (i.e., _git clone url_ should work). Cloning will happen in a temporary directory.\n\n1. _Storage path_: The directory where the tool is going to store the source code before and after the refactoring. This step is important if you plan to do later analysis on the refactored files. The directory structure basically contains the hash of the refactoring, as well as the file before and after. The name of the file also contains the refactoring it suffered, to facilitate parsing. For more details on the name of the file, see our implementation.\n\n1. _Database URL_: JDBC URL that points to your MySQL. The database must exist and be empty. The tool will create the required tables.\n\n1. _Database user_: Database user.\n\n1. _Database password_: Database password. \n\n1. _Store full source code?_: True if you want to store the source code before and after in the storage path.\n\nThese parameters can be passed via command-line, if you exported a JAR file. \nExample:\n\n```\njava -jar refactoring.jar <dataset> <git-url> <output-path> <database-url> <database-user> <database-password> <k-threshold>\n```\n",
                "type": "Text_excerpt",
                "original_header": "Running in a manual way",
                "parent_header": [
                    "Machine Learning for Software refactoring",
                    "The data collection tool"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        },
        {
            "result": {
                "value": "The data collection tool can be executed via Docker containers. It should be as easy as:\n\n```\ngit clone https://github.com/mauricioaniche/predicting-refactoring-ml.git\ncd predicting-refactoring-ml\nsudo ./run-data-collection.sh projects-final.csv 4\n```\n\nConfigurations can be done with the following **arguments**:\n 1. [FILE_TO_IMPORT] - Csv file with all projects\n 1. [Worker_Count] - Number of concurrent worker for the data collection, running the `RunQueue` class\n * **Optional**: \n     1. [DB_URL] - fully qualified url to a custom database, e.g. `jdbc:mysql://db:3306/refactoringdb`\n     1. [DB_USER] - user name for the custom database\n     1. [DB_PWD] - password for the custom database\n\n* The default database is a containerized MySQL database (mariaDB), y can directly access it via localhost:3308, root, refactoringdb. You can change it in `docker-compose_db.yml->db` and `docker-compose.yml->worker->environment->REF_URL`, `REF_USER`, and `REF_PWD`.\n* The default MySQL database, the RabbitMQ queue, and the source code are all stored in the `data-collection/volumes` folder. Feel free to change where the volumes are stored.\n* The configurations of the workers (basically the same as defined in the manual execution) can be defined in `docker-compose.yml->worker->environment`.\n* `http://localhost:15672` takes you to the RabbitMQ admin (user: guest, pwd:guest) and `localhost:8080` takes you to adminer, a simple DB interface.\nFeel free to start as many workers as you want and/or your infrastructure enables you!\n\n_Tip:_ If you are restarting everything, make sure to not import the projects again. Otherwise, you will have duplicated entries. Simply leave the file name blank in `import -> environment -> FILE_TO_IMPORT`.\n",
                "type": "Text_excerpt",
                "original_header": "Running via Docker",
                "parent_header": [
                    "Machine Learning for Software refactoring",
                    "The data collection tool"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "You can run the data collection by simply running the `RunSingleProject.java` class. This class contains a program that requires the following parameters, in this order:\n\n1. _The dataset name_: A hard-coded string with the name of the dataset (e.g., \"apache\", \"fdroid\"). This information appears in the generated data later on, so that you can use it as a filter.\n\n1. _The git URL_: The git url of the project to be analyzed. Your local machine must have all the permissions to clone it (i.e., _git clone url_ should work). Cloning will happen in a temporary directory.\n\n1. _Storage path_: The directory where the tool is going to store the source code before and after the refactoring. This step is important if you plan to do later analysis on the refactored files. The directory structure basically contains the hash of the refactoring, as well as the file before and after. The name of the file also contains the refactoring it suffered, to facilitate parsing. For more details on the name of the file, see our implementation.\n\n1. _Database URL_: JDBC URL that points to your MySQL. The database must exist and be empty. The tool will create the required tables.\n\n1. _Database user_: Database user.\n\n1. _Database password_: Database password. \n\n1. _Store full source code?_: True if you want to store the source code before and after in the storage path.\n\nThese parameters can be passed via command-line, if you exported a JAR file. \nExample:\n\n```\njava -jar refactoring.jar <dataset> <git-url> <output-path> <database-url> <database-user> <database-password> <k-threshold>\n```\n",
                "type": "Text_excerpt",
                "original_header": "Running in a manual way",
                "parent_header": [
                    "Machine Learning for Software refactoring",
                    "The data collection tool"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        },
        {
            "result": {
                "value": "First, install all the dependencies:\n\n```\npip3 install --user -r requirements.txt\n```\n\nThen, create a `config.ini` file, following the example structure in\n`config-example.ini`. In this file, you configure your database connection.\n",
                "type": "Text_excerpt",
                "original_header": "Installing and configuring the database.",
                "parent_header": [
                    "Machine Learning for Software refactoring",
                    "The machine learning pipeline"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Use Maven: `mvn clean compile`. Or just import it via IntelliJ; it will know what to do. \nIf you want to export a jar file and run it somewhere else, just do `mvn clean package`. A .jar file will be created under the `target/` folder. You can use this jar to run the tool manually. \n",
                "original_header": "Compiling the tool"
            },
            "confidence": 0.9915390615309756,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "For this script to run, you need to create a `results/` folder inside the\n`machine-learning` folder. The results will be stored there. \nIf you need to clean up the cache, simply delete the `_cache` directory that is created under the `machine-learning` folder. \n",
                "original_header": "Training and testing models"
            },
            "confidence": 0.9440151941554866,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Machine Learning for Software refactoring"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2001.03338\n* The raw dataset can be found here: https://zenodo.org/record/3547639\n* The appendix with our full results can be found here: https://zenodo.org/record/3583980 \n\n\n## The data collection tool\n\n### Compiling the tool\n\nUse Maven: `mvn clean compile`. Or just import it via IntelliJ; it will know what to do.\n\nIf you want to export a jar file and run it somewhere else, just do `mvn clean package`. A .jar file will be created under the `target/` folder. You can use this jar to run the tool manually.\n\nTo run the tests please run a local mariaDB database instance, for details see `src/main/test/java/integration/DataBaseInfor for details`.\n\n### Running in a manual way\n\nYou can run the data collection by simply running the `RunSingleProject.java` class. This class contains a program that requires the following parameters, in this order:\n\n1. _The dataset name_: A hard-coded string with the name of the dataset (e.g., \"apache\", \"fdroid\""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
        }
    ]
}