{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 16:16:52"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/qishenghu/InstructCoder",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "qishenghu",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-05-21T16:27:30Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-04T07:10:40Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2023 qshu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "InstructCoder: Instruction Tuning Large Language Models for Code Editing | Oral ACL-2024  srw",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "InstructCoder is the first dataset designed to adapt LLMs for general code editing. It consists of over 114,000 instruction-input-output triplets and covers multiple distinct code editing scenarios, generated by ChatGPT.  \n",
                "original_header": "Overview"
            },
            "confidence": 0.9029247267474628,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To generate instructional data for code editing, we employed a similar method based on [Self-Instruct](https://github.com/yizhongw/self-instruct). This methodology of generating training data using LLMs requires minimal human-labeled data as seed tasks while still maintaining the quality and relevance of the tasks in the dataset. InstructCoder is systematically expanded through an iterative process that commences with editing data sourced from GitHub commits as seed tasks. Seed and generated tasks are used subsequently bootstrapped to prompt ChatGPT for more task data.  \nFor each generated instruction, we also prompt ChatGPT to generate a list of practical events as 'real-world' scenarios where the editing instruction could be performed, and randomly select one for subsequent generation. During instance generation, ChatGPT is instructed to generate examples that correspond with the operation in the instruction while ensuring the codebases and variable names are appropriate for the given scenario. We observe that instances generated with the inclusion of a scenario demonstrate higher quality in terms of richer context and code structure compared to those without.  \n",
                "original_header": "Data Collection"
            },
            "confidence": 0.9911017114386038,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We are currently working on a clean release of our code. We will upload the code as soon as we finish the job. \n",
                "original_header": "Release"
            },
            "confidence": 0.9024437256356053,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "InstructCoder",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "qishenghu/InstructCoder",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/qishenghu/InstructCoder/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/qishenghu/InstructCoder/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 49,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 5,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/qishenghu/codeinstruct/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 46520
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The largest model fine-tuned, LLaMA-33B, performs on par with ChatGPT, with 79.3% accuracy on the test set. Some qualitative examples generated by our model are shown [here](#examples).\n\n",
                "type": "Text_excerpt",
                "original_header": "Results and Examples"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        },
        {
            "result": {
                "value": "1. Instruction: Transform the code into a class method called 'calculate_distance' that calculates the distance between two points in 3D space.\n\nInput code:\n```python\nimport math\n\ndef distance(point1, point2):\n    x1, y1, z1 = point1\n    x2, y2, z2 = point2\n    dx = x2 - x1\n    dy = y2 - y1\n    dz = z2 - z1\n    return math.sqrt(dx**2 + dy**2 + dz**2)\n\npoint1 = (0, 0, 0)\npoint2 = (1, 1, 1)\nprint(distance(point1, point2))\n```\n\nOutput code:\n```python\nimport math\n\nclass Point:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def calculate_distance(self, other_point):\n        dx = other_point.x - self.x\n        dy = other_point.y - self.y\n        dz = other_point.z - self.z\n        return math.sqrt(dx**2 + dy**2 + dz**2)\n\npoint1 = Point(0, 0, 0)\npoint2 = Point(1, 1, 1)\nprint(point1.calculate_distance(point2))\n```\n\n2. Instruction: Integrate error handling into the code that performs batch processing of large datasets, including job failures or incomplete runs.\n\nInput code:\n```python\nimport pandas as pd\n\ndef process_orders(orders_file, shipping_file, inventory_file):\n    orders = pd.read_csv(orders_file)\n    shipping = pd.read_csv(shipping_file)\n    inventory = pd.read_csv(inventory_file)\n\n    # Perform data processing and analysis here...\n\n    results = {\"success\": True, \"message\": \"Batch processing completed successfully.\"}\n    return results\n\norders_file = \"orders.csv\"\nshipping_file = \"shipping.csv\"\ninventory_file = \"inventory.csv\"\n\nresults = process_orders(orders_file, shipping_file, inventory_file)\nprint(results)\n```\n\nOutput code:\n```python\nimport pandas as pd\nimport logging\n\nlogging.basicConfig(filename='batch_processing.log', level=logging.ERROR)\n\ndef process_orders(orders_file, shipping_file, inventory_file):\n    try:\n        orders = pd.read_csv(orders_file)\n        shipping = pd.read_csv(shipping_file)\n        inventory = pd.read_csv(inventory_file)\n\n        # Perform data processing and analysis here...\n\n        results = {\"success\": True, \"message\": \"Batch processing completed successfully.\"}\n        return results\n    except Exception as e:\n        logging.error(f\"Error processing batch: {e}\")\n        results = {\"success\": False, \"message\": \"Batch processing failed. Please check the input files for any issues.\"}\n        return results\n\norders_file = \"orders.csv\"\nshipping_file = \"shipping.csv\"\ninventory_file = \"inventory.csv\"\n\nresults = process_orders(orders_file, shipping_file, inventory_file)\nprint(results)\n```\n\n2. Instruction: Refactor any code that uses 'exec' or 'eval' for security reasons.\n\nInput code:\n```python\ngame_data = {\n    \"score\": 0,\n    \"level\": 1\n}\n\ndef execute_script(script):\n    exec(script)\n\nscript = \"\"\"\ngame_data[\"score\"] += 10\nif game_data[\"score\"] >= 100:\n    game_data[\"level\"] += 1\n\"\"\"\n\nexecute_script(script)\nprint(game_data)\n```\n\nOutput code:\n```python\ngame_data = {\n    \"score\": 0,\n    \"level\": 1\n}\n\ndef execute_script(script):\n    compiled_script = compile(script, \"\", \"exec\")\n    exec(compiled_script, game_data)\n\nscript = \"\"\"\ngame_data[\"score\"] += 10\nif game_data[\"score\"] >= 100:\n    game_data[\"level\"] += 1\n\"\"\"\n\nexecute_script(script)\nprint(game_data)\n```\nNow the script is not able to access the data in `game_data`.\n\n",
                "type": "Text_excerpt",
                "original_header": "Examples"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "Feel free to cite this work if you use the data or code in this repo.\n```bibtex\n@inproceedings{li2024instructcoder,\n  title={Instructcoder: Instruction tuning large language models for code editing},\n  author={Li, Kaixin and Hu, Qisheng and Zhao, James and Chen, Hui and Xie, Yuxi and Liu, Tiedong and Shieh, Michael and He, Junxian},\n  booktitle={Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 4: Student Research Workshop)},\n  pages={50--70},\n  year={2024}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{li2024instructcoder,\n    year = {2024},\n    pages = {50--70},\n    booktitle = {Proceedings of the 62nd Annual Meeting of the Association for Computational Linguistics (Volume 4: Student Research Workshop)},\n    author = {Li, Kaixin and Hu, Qisheng and Zhao, James and Chen, Hui and Xie, Yuxi and Liu, Tiedong and Shieh, Michael and He, Junxian},\n    title = {Instructcoder: Instruction tuning large language models for code editing},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Instructcoder: Instruction tuning large language models for code editing",
                "author": "Li, Kaixin and Hu, Qisheng and Zhao, James and Chen, Hui and Xie, Yuxi and Liu, Tiedong and Shieh, Michael and He, Junxian"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We also plan to release our LoRA checkpoints [here](https://huggingface.co/happylkx). \n",
                "original_header": "Release"
            },
            "confidence": 0.9230301884379253,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "InstructCoder: Instruction Tuning Large Language Models for Code Editing"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/./fig/demo.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2310.20329"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
        }
    ]
}