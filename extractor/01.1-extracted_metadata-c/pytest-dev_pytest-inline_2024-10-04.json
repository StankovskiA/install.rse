{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:30:58"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/pytest-dev/pytest-inline",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "pytest-dev",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-11-21T21:46:03Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-06-21T18:31:57Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Copyright (c) 2022 Inline Tests Dev Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "pytest-inline is a pytest plugin for writing inline tests.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Inline testing is a new granularity of testing that makes it easier to check individual program statements. An inline test is a statement that allows developers to provide arbitrary inputs and test oracles for checking the immediately preceding statement that is not an inline test.  Unlike unit tests that are usually placed in separate `test_*.py` files, inline tests are written together with the actual production code (and thus are easier to maintain). \n \n",
                "original_header": "pytest-inline"
            },
            "confidence": 0.9253401190936839,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "All APIs for inline testing behave as empty function calls in non-testing mode by always returning a dummy object, for example, check\\_eq is defined as: `def check_eq(self, ...): return self`.  This usually incurs negligible overhead as we have observed in our experiments, but note that the cost is paid each time an inline test is encountered during execution, so it may add up if the inline test is in a part of code that will be executed many times (e.g., a loop). \n",
                "original_header": "Performance"
            },
            "confidence": 0.9591219311158713,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "pytest-inline",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "pytest-dev/pytest-inline",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/pytest-dev/pytest-inline/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/pytest-dev/pytest-inline/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 16,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "inline-tests, pytest, pytest-plugin, python, testing, testing-tool",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/pytest-dev/pytest-inline/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 129300
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 2445
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/125850239",
                "tag": "v1.0.5",
                "name": "v1.0.5",
                "author": {
                    "name": "sweetStreet",
                    "type": "User"
                },
                "description": "Capture a general Exception (not limited to ImportError and ModuleNotFoundError) when attempting to import modules during collection phase",
                "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/tarball/v1.0.5",
                "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/zipball/v1.0.5",
                "html_url": "https://github.com/pytest-dev/pytest-inline/releases/tag/v1.0.5",
                "url": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/125850239",
                "release_id": 125850239,
                "date_created": "2023-10-19T17:53:12Z",
                "date_published": "2023-10-19T17:54:12Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/91698463",
                "tag": "v1.0.3",
                "name": "v1.0.3",
                "author": {
                    "name": "sweetStreet",
                    "type": "User"
                },
                "description": "update constructor from Here() to itest()",
                "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/tarball/v1.0.3",
                "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/zipball/v1.0.3",
                "html_url": "https://github.com/pytest-dev/pytest-inline/releases/tag/v1.0.3",
                "url": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/91698463",
                "release_id": 91698463,
                "date_created": "2023-02-08T06:00:13Z",
                "date_published": "2023-02-08T06:10:18Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/84043077",
                "tag": "v1.0.1",
                "name": "v1.0.1",
                "author": {
                    "name": "sweetStreet",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/tarball/v1.0.1",
                "zipball_url": "https://api.github.com/repos/pytest-dev/pytest-inline/zipball/v1.0.1",
                "html_url": "https://github.com/pytest-dev/pytest-inline/releases/tag/v1.0.1",
                "url": "https://api.github.com/repos/pytest-dev/pytest-inline/releases/84043077",
                "release_id": 84043077,
                "date_created": "2022-11-23T22:16:36Z",
                "date_published": "2022-11-23T22:17:46Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/prepare-conda-env.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The regular expression (Line 7) in this code snippet checks if variable name matches a regex for a pattern that ends in a colon and has at least one digit\nThe inline test (Line 8) that we write for target statement (Line 7) consists of three parts:\n- Declaration with itest() constructor\n- Assigning inputs with given() function calls\n- Specifying test oracles with check_*() function calls\n\n```python\nfrom inline import itest\n\ndef get_assignment_map_from_checkpoint(tvars, init_c):\n    ...\n    for var in tvars:\n        name = var.name\n        m = re.match(\"^(.*):\\\\d+$\", name)\n        itest().given(name, \"a:0\").check_eq(m, \"a\")\n        if m is not None:\n            name = m.group(1)\n    ...\n```\n",
                "type": "Text_excerpt",
                "original_header": "Example",
                "parent_header": [
                    "pytest-inline"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        },
        {
            "result": {
                "value": "## Use\n\nUse ``pytest .`` to run all inline tests in working directory.\n\nUse ``pytest {filename}`` to run all inline tests in a Python file.\n",
                "type": "Text_excerpt",
                "original_header": "Use",
                "parent_header": [
                    "pytest-inline"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "- given(variable, value): \n        Assign the value to the variable. \n\n    Note that any number of given statements can be added. Below is a small example of this functionality. Additionally, the first given call must proceed either an itest() declaration or an assume() call if it is added.\n\n    ```python {.line-numbers}\n    def multiple_givens(a, c):\n        b = a + c\n        itest().given(a, 2).given(c, a + 1).check_true(b == 5)\n    ```\n\n",
                "type": "Text_excerpt",
                "original_header": "Provide test inputs using given calls",
                "parent_header": [
                    "pytest-inline",
                    "API"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "Title: [Inline Tests](https://dl.acm.org/doi/abs/10.1145/3551349.3556952)\n\nAuthors: [Yu Liu](https://sweetstreet.github.io/), [Pengyu Nie](https://pengyunie.github.io/), [Owolabi Legunsen](https://mir.cs.illinois.edu/legunsen/), [Milos Gligoric](http://users.ece.utexas.edu/~gligoric/)\n\n```bibtex\n@inproceedings{LiuASE22InlineTests,\n  title =        {Inline Tests},\n  author =       {Yu Liu and Pengyu Nie and Owolabi Legunsen and Milos Gligoric},\n  pages =        {1--13},\n  booktitle =    {International Conference on Automated Software Engineering},\n  year =         {2022},\n}\n```\n\nTitle: [pytest-inline](https://pengyunie.github.io/p/LiuETAL23pytest-inline.pdf)\n\nAuthors: [Yu Liu](https://sweetstreet.github.io/), [Zachary Thurston](), [Alan Han](), [Pengyu Nie](https://pengyunie.github.io/), [Milos Gligoric](http://users.ece.utexas.edu/~gligoric/), [Owolabi Legunsen](https://mir.cs.illinois.edu/legunsen/)\n\n```bibtex\n@inproceedings{LiuICSE23PytestInline,\n  title =        {pytest-inline: An Inline Testing Tool for Python},\n  author =       {Yu Liu and Zachary Thurston and Alan Han and Pengyu Nie and Milos Gligoric and Owolabi Legunsen},\n  pages =        {1--4},\n  booktitle =    {International Conference on Software Engineering, DEMO},\n  year =         {2023},\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "pytest-inline"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{LiuASE22InlineTests,\n    year = {2022},\n    booktitle = {International Conference on Automated Software Engineering},\n    pages = {1--13},\n    author = {Yu Liu and Pengyu Nie and Owolabi Legunsen and Milos Gligoric},\n    title = {Inline Tests},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Inline Tests",
                "author": "Yu Liu and Pengyu Nie and Owolabi Legunsen and Milos Gligoric"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{LiuICSE23PytestInline,\n    year = {2023},\n    booktitle = {International Conference on Software Engineering, DEMO},\n    pages = {1--4},\n    author = {Yu Liu and Zachary Thurston and Alan Han and Pengyu Nie and Milos Gligoric and Owolabi Legunsen},\n    title = {pytest-inline: An Inline Testing Tool for Python},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "pytest-inline: An Inline Testing Tool for Python",
                "author": "Yu Liu and Zachary Thurston and Alan Han and Pengyu Nie and Milos Gligoric and Owolabi Legunsen"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "    ```python {.line-numbers}\n    def FileHeader(self):\n        dt = self.date_time\n        dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2]\n        itest().assume(2 < 4).given(dt, (1980, 1, 25, 17, 13, 14)).check_eq(dosdate, 57)\n    ``` \n",
                "original_header": "Provide any assumptions using an assume call"
            },
            "confidence": 0.9408995659540034,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- check\\_none(variable): \n        Checks if the variable is none. \n- check\\_not\\_none(variable): \n        Checks if the variable is not none. \n",
                "original_header": "Specify test oracles using check calls"
            },
            "confidence": 0.9942754946567551,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "pytest-inline"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
        }
    ]
}