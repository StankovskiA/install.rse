{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 16:53:30"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/remaro-network/auv_profeat",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "remaro-network",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-02-09T09:39:27Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-09-04T10:07:46Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/LICENSE.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "auv_profeat",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "remaro-network/auv_profeat",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/remaro-network/auv_profeat/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/remaro-network/auv_profeat/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/julianepa/auv_profeat/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/remaro-network/auv_profeat/releases/138914939",
                "tag": "iFM2023",
                "name": "iFM2023 version",
                "author": {
                    "name": "JulianePa",
                    "type": "User"
                },
                "description": "This release contains the model as published at iFM2023 (https://doi.org/10.1007/978-3-031-47705-8_18).",
                "tarball_url": "https://api.github.com/repos/remaro-network/auv_profeat/tarball/iFM2023",
                "zipball_url": "https://api.github.com/repos/remaro-network/auv_profeat/zipball/iFM2023",
                "html_url": "https://github.com/remaro-network/auv_profeat/releases/tag/iFM2023",
                "url": "https://api.github.com/repos/remaro-network/auv_profeat/releases/138914939",
                "release_id": 138914939,
                "date_created": "2023-11-10T10:44:10Z",
                "date_published": "2024-01-29T13:08:20Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "To run the model, [PRISM](https://www.prismmodelchecker.org/) and [ProFeat](https://wwwtcs.inf.tu-dresden.de/ALGI/PUB/ProFeat/doc/index.html) have to be installed. We recommend getting PRISM v4.7 and ProFeat v1.0.2.1 (commit id dfa7f03214bb92e7fd30f1402ff5a19dbdd5929c) from the respective Github repositories, the [PRISM Github repository](https://github.com/prismmodelchecker/prism/tree/v4.7) and the [ProFeat Github repository](https://github.com/pchrszon/profeat).\n\nWhen both PRISM and ProFeat are installed, make them executable from anywhere or put them in the same folder. In the latter case, the commands below have to be run from the directory which includes the executables of PRISM and ProFeat, and the file names have to include the path to these files. Below, we will assume that PRISM and ProFeat are executable from anywhere.\n",
                "type": "Text_excerpt",
                "original_header": "Set-up",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "All analysis results documented in the paper can be replicated with the artifact. The results for the properties without experiments for Scenario 1 can be replicated by running the commands in [Run the Analysis](#run-the-analysis). To replicate the results for Scenario 2, the scenario has to be changed as described in [Change Scenarios](#change-scenarios) before running the commands in [Run the Analysis](#run-the-analysis). To replicate the results for unsafe states with PRISM experiments, follow the instructions in [Replicate the PRISM Experiments](#replicate-the-prism-experiments). \n",
                "type": "Text_excerpt",
                "original_header": "Replication Instructions and Examples of Usage",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "The beginning of the `out.log` file should look like the following.\n```Bash\nPRISM\n=====\n\nVersion: 4.7.dev\nDate: Mon Jan 29 13:31:31 CET 2024\nHostname: xxx\nMemory limits: cudd=1g, java(heap)=1g\nCommand line: prism out.prism out.props\n\nParsing model file \"out.prism\"...\n\nType:        MDP\nModules:     _environment _hardware _auv _controller \nVariables:   _water_visib _sonar_failed _camera_failed _camera_blocked _s _d_insp _t_failed _robot_navigation_high _robot_navigation_low _robot_navigation_med _robot_navigation_very_high _robot_pipeline_inspection_follow _robot_pipeline_inspection_search _robot_vision_camera _robot_vision_sonar \n\nParsing properties file \"out.props\"...\n\n24 properties:\n(1) filter(printall, Pmin=? [ F _s=done ], \"init\")\n(2) filter(printall, Pmax=? [ F _s=done ], \"init\")\n(3) filter(printall, Pmin=? [ F _s=abort_mission ], \"init\")\n(4) filter(printall, Pmax=? [ F _s=abort_mission ], \"init\")\n(5) filter(printall, Pmin=? [ !_sonar_failed U _s=done ], \"init\")\n(6) filter(printall, Pmax=? [ !_sonar_failed U _s=done ], \"init\")\n(7) filter(printall, Pmin=? [ !_camera_failed U _s=done ], \"init\")\n(8) filter(printall, Pmax=? [ !_camera_failed U _s=done ], \"init\")\n(9) filter(printall, Pmin=? [ !_camera_blocked U _s=done ], \"init\")\n(10) filter(printall, Pmax=? [ !_camera_blocked U _s=done ], \"init\")\n(11) filter(printall, P>=1.0 [ G (_camera_failed=>(F G !_robot_vision_camera_active)) ], \"init\")\n(12) filter(printall, P>=1.0 [ G (_sonar_failed=>(F G !_robot_vision_sonar_active)) ], \"init\")\n(13) filter(printall, P>=1.0 [ G (_camera_blocked=>(F (!_robot_vision_camera_active|!_camera_blocked))) ], \"init\")\n(14) filter(printall, P>=1.0 [ G (_camera_blocked=>(F !_camera_blocked)) ], \"init\")\n(15) filter(printall, P>=1.0 [ G ((_robot_vision_camera_active&_robot_pipeline_inspection_search_active&_water_visib<(max_visib-min_visib)/3)=>(F (_robot_navigation_low_active|_water_visib>=(max_visib-min_visib)/3))) ], \"init\")\n(16) filter(printall, P>=1.0 [ G ((_robot_vision_camera_active&_robot_pipeline_inspection_search_active&_water_visib>=(max_visib-min_visib)/3&_water_visib<(2*(max_visib-min_visib))/3)=>(F (_robot_navigation_med_active|_robot_navigation_low_active|_water_visib>=(2*(max_visib-min_visib))/3))) ], \"init\")\n(17) filter(printall, P>=1.0 [ G ((_robot_pipeline_inspection_search_active&!_sonar_failed)=>(F (_robot_vision_sonar_active|_sonar_failed))) ], \"init\")\n(18) filter(printall, P>=1.0 [ G ((_robot_pipeline_inspection_follow_active&!(_camera_failed|_camera_blocked))=>(F (_robot_vision_camera_active|_camera_failed|_camera_blocked))) ], \"init\")\n(19) filter(printall, R{\"energy\"}min=? [ F _s=done ], \"init\")\n(20) filter(printall, R{\"energy\"}max=? [ F _s=done ], \"init\")\n(21) filter(printall, R{\"time\"}min=? [ F _s=done ], \"init\")\n(22) filter(printall, R{\"time\"}max=? [ F _s=done ], \"init\")\n(23) filter(printall, Pmin=? [ G \"safe\" ], \"init\")\n(24) filter(printall, Pmax=? [ F \"unsafe\" ], \"init\")\n```\nAfter a PRISM header, it specifies the model type, the modules and the variables of the PRISM file that was automatically translated from the ProFeat file. Then the analysed properties are listed. They are slightly different from the properties specified in `casestudy.fprops` because they have been translated to PRISM properties.\n\nFor each of the properties, the `out.log` file then includes a paragraph, separated by `----`, with the analysis results. For example, the paragraph for determining the minimum probability of finally reaching the state \"done\" should look like the following.\n```Bash\n---------------------------------------------------------------------\n\nModel checking: filter(printall, Pmin=? [ F _s=done ], \"init\")\n\nBuilding model...\n\nComputing reachable states...\n\nReachability (BFS): 48 iterations in 0.09 seconds (average 0.001833, setup 0.00)\n\nTime for model construction: 0.49 seconds.\n\nType:        MDP\nStates:      472596 (1 initial)\nTransitions: 16352160\nChoices:     1627620\n\nTransition matrix: 229988 nodes (2192 terminal), 16352160 minterms, vars: 29r/29c/19nd\n\nProb0E: 52 iterations in 0.16 seconds (average 0.003115, setup 0.00)\n\nProb1A: 2 iterations in 0.00 seconds (average 0.001500, setup 0.00)\n\nyes = 4860, no = 222876, maybe = 244860\n\nComputing remaining probabilities...\nEngine: Hybrid\n\nBuilding hybrid MTBDD matrices... [nm=61, levels=29, nodes=345796] [15.8 MB]\nAdding sparse bits... [levels=23-27, num=692, compact=61/61] [43.0 MB]\nCreating vector for yes... [dist=2, compact] [923.1 KB]\nAllocating iteration vectors... [3 x 3.6 MB]\nTOTAL: [70.5 MB]\n\nStarting iterations...\nIteration 72: max relative diff=0.182878, 5.01 sec so far\nIteration 145: max relative diff=0.011335, 10.07 sec so far\nIteration 217: max relative diff=0.001304, 15.09 sec so far\nIteration 290: max relative diff=0.000143, 20.15 sec so far\nIteration 363: max relative diff=0.000015, 25.22 sec so far\nIteration 435: max relative diff=0.000002, 30.23 sec so far\n\nIterative method: 452 iterations in 32.01 seconds (average 0.069493, setup 0.59)\n\nResults (including zeros) for filter \"init\":\n158328:(12,false,false,false,11,0,0,0,0,0,1,0,1,0,1)=0.7471557180874411\n\nValue in the initial state: 0.7471557180874411\n\nTime for model checking: 32.376 seconds.\n\nResult: 0.7471557180874411 (+/- 7.349007153190862E-6 estimated; rel err 9.835977929745019E-6)\n\n---------------------------------------------------------------------\n```\nThe result of the analyis (`Result`) can be found at the bottom of the paragraph, preceded by the time for model checking (`Time for model checking`).\n",
                "type": "Text_excerpt",
                "original_header": "Read the out.log File",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Replication Instructions and Examples of Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "To change the scenario, open the file `auv_profeat/casestudy.profeat`, uncomment parameters of the scenario you want to run and comment the parameters of the other scenario. If you, for example, want to run Scenario 2, the beginning of `casestudy.profeat` should look like this:\n```\nmdp\n\n// Scenario 1: Short pipeline inspection in the North Sea\n//const int max_visib = 10;\t\t\t\t// The maximum visibility\n//const int min_visib = 1;\t\t\t\t// The minimum visibility\n//const double current_prob = 0.6;\t\t// The probability of currents\n//const int inspect = 10;\t\t\t\t\t// The meters of pipeline that should be inspected\n//const double camera_block_prob = 0.05;\t// The probability the camera getting blocked (e.g. because of something in front of the camera)\n\n// Scenario 2: Longer pipeline inspection in the Caribbean Sea\nconst int max_visib = 20;\nconst int min_visib = 3;\nconst double current_prob = 0.3;\nconst int inspect = 30;\nconst double camera_block_prob = 0.03;\n\n// Scenario independent parameters\nconst int infl_tf = 10;\t\t\t\t// The influence a thruster failure has on the path of the AUV. The bigger the value, the less influence a thruster failure has on the path (it can keep the path even in case of a thruster failure)\nconst double sonar_fail_prob = 0.01;\t// The probability of a sonar failure\nconst double camera_fail_prob = 0.005;\t// The probability of a camera failure\nconst double camera_unblock_prob = current_prob*0.8;\t// The probability of the camera getting unblocked depends on the current probability\n```\nTo create a new scenario, change the parameters `min_visib`, `max_visib`, `current_prob`, `inspect`, and `camera_block_prob`. You can also change the scenario independet parameters, namely, the influence the thruster failures have on the path of the AUV (`infl_tf`), the probability with which the sonar fails (`sonar_fail_prob`), the probability with which the camera fails (`camera_fail_prob`), and the probability with which the camera gets unblocked (`camera_unblock_prob`).\n",
                "type": "Text_excerpt",
                "original_header": "Change Scenarios",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Replication Instructions and Examples of Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "The files for replicating the PRISM experiments for Scenarios 1 and 2 can be found in the folder `auv_profeat/experiments` as `scenario1.prism` and `scenario2.prism`, respectively. The necessary property file, containing the properties used for the experiments, is `experiments.props` in the same folder.\n\nOpen the PRISM GUI by opening the executable `xprism` that should have been downloaded when you downloaded PRISM. Open the model file of one of the two scenarios by going to `Model -> Open model` and selecting `scenario1.prism` or `scenario2.prism`. Parse and build the model by pressing `F2` and `F3` respectively. To load the properties, go to the `Properties` Tab in the lower left corner. Open the properties list by going to `Properties -> Open properties list` and select `experiments.props`. \nThe GUI should now look like the following.\n![xprism](images/xprism.png)\nThe experiments will use a variable named `k` for the number of time steps. To declare this variable, make a double click in the `Constants` field and change the name from `C0` to `k`.\n\nTo run an experiment, click one of the properties and press `F7`. In the dialog that opens, first decide which range your parameter should have, i.e., how many time steps you want to consider; in the paper we display the graph with 300 time steps. Click on `Okay`, give the graph a name and either print it to an already existing graph or to a new one.\n\nIt is also possible to inspect the values that were calculated for the graph. To do that, in the `Experiments` part of xprism, do a right click on the property whose results you want to inspect and click on `View results` as shown in the picture below.\n\n<img src=\"images/results.png\" alt=\"results\" width=\"700\"/>\n\nThis will enable you to determine after how many time steps the probability for the respective property to be satisfied is above a certain threshold.\n\nFor more information about PRISM experiments, including how to run them from the command line, consult the [PRISM manual](https://www.prismmodelchecker.org/manual/RunningPRISM/Experiments).\n\n",
                "type": "Text_excerpt",
                "original_header": "Replicate the PRISM Experiments",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Replication Instructions and Examples of Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "To replicate the results for the properties without experiments, navigate to the folder `auv_profeat` in the terminal. \nThen type the following.\n```Bash\nprofeat -t casestudy.profeat casestudy.fprops\nprism out.prism out.props > out.log\n```\nThe first command translates the ProFeat model and the ProFeat property files to PRISM model and property files, the second command uses PRISM to compute the results which are saved in the `out.log` file. To view the results, open the `out.log` file which is saved in the `auv_profeat` folder.\n\nIf you want to analyse additional properties, include them in the `casestudy.fprops` file. Remember to include `${...}` around ProFeat specific constructs.\n",
                "type": "Text_excerpt",
                "original_header": "Run the Analysis",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Replication Instructions and Examples of Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "To run experiments with different scenario independet parameters, changing the influence a thruster failure has on the path of the AUV, the probability of a sonar or camera failure or of the camera getting unblocked, you can modify the values of `infl_tf`, `sonar_fail_prob`, `camera_fail_prob` and `camera_unblock_prob`, respectively, in the file `scenario1.prism` or `scenario2.prism`.\nTo introduce a different scenario, you can modify the values of the scenario dependent parameters in the file `scenario1.prism` or `scenario2.prism`. \n",
                "type": "Text_excerpt",
                "original_header": "Run experiments with different parameters",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Extend and Modify the Artifact",
                    "PRISM Experiments"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "To run the PRISM experiments with a modified model, first run the analysis with the modified model as described in [Run the Analysis](#run-the-analysis). The obtained file `out.prism`, has to be modified such that the PRISM variables are initialised after their declaration and not in an `init ... endinit` block. \nThat is, in the file `out.prism`, the block\n```Bash\ninit\n    ((((((((((((((1 <= ((_robot_navigation_high + _robot_navigation_low) + _robot_navigation_med) + _robot_navigation_very_high & ((_robot_navigation_high + _robot_navigation_low) + _robot_navigation_med) + _robot_navigation_very_high <= 1) & (1 <= _robot_pipeline_inspection_follow + _robot_pipeline_inspection_search & _robot_pipeline_inspection_follow + _robot_pipeline_inspection_search <= 1)) & (0 <= _robot_vision_camera + _robot_vision_sonar & _robot_vision_camera + _robot_vision_sonar <= 1)) & (_robot_pipeline_inspection_follow = 1 => _robot_navigation_low = 1)) & (_robot_vision_camera = 1 => !_robot_navigation_very_high = 1)) & _robot_navigation_very_high_active) & _robot_pipeline_inspection_search_active) & _robot_vision_sonar_active) & _camera_blocked = false) & _camera_failed = false) & _d_insp = 0) & _s = start_task) & _sonar_failed = false) & _t_failed = 0) & _water_visib = round((max_visib - min_visib) / 2)\nendinit\n```\nhas to be deleted and the initial values of the variables have to be inserted at the correct positions in the `out.prism` file. For the model used in this artifact, it should look like the following.\n```Bash\n... \nmodule _environment\n    _water_visib : [min_visib .. max_visib] init round((max_visib-min_visib)/2);\n... \nmodule _hardware\n    _sonar_failed : bool init false;\n    _camera_failed : bool init false;\n    _camera_blocked : bool init false;\n...\nmodule _auv\n    _s : [0 .. 15] init 11;\n    _d_insp : [0 .. inspect] init 0;\n    _t_failed : [0 .. infl_tf] init 0;\n... \nmodule _controller\n    _robot_navigation_high : [0 .. 1] init 0;\n    _robot_navigation_low : [0 .. 1] init 0;\n    _robot_navigation_med : [0 .. 1] init 0;\n    _robot_navigation_very_high : [0 .. 1] init 1;\n    _robot_pipeline_inspection_follow : [0 .. 1] init 0;\n    _robot_pipeline_inspection_search : [0 .. 1] init 1;\n    _robot_vision_camera : [0 .. 1] init 0;\n    _robot_vision_sonar : [0 .. 1] init 1;\n... \n```\nwhere `init` is the keyword for initialising a variable. \nNote that the variables of the ProFeat model have a preceding `_` in the PRISM model.\n\nIn the above example, the water visibility is initialised with `round((max_visib-min_visib)/2)`, the variables `sonar_failed`, `camera_failed` and `camera_blockd` with `false`, and the initial value of state `s` is `11`, which corresponds to the state `start_task`. The variables `d_insp` and `t_failed` are both initialised with `0`.\n\nThe features of the feature model that can be activated and deactivated during runtime are represented as variables in the PRISM model. The variable `_robot_navigation_high` in the above example, for example, corresponds to the feature `high` which is a subfeature if `navigation` that is a subfeature of `robot`. The \"feature variables\" initialised with `0` are inactive at the beginning, the ones initialised with `1` are active.\n",
                "type": "Text_excerpt",
                "original_header": "Run experiments with a modified model",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Extend and Modify the Artifact",
                    "PRISM Experiments"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "value": "To run PRISM experiments with different properties, run the commands in [Run the Analysis](#run-the-analysis) with your modified property file to obtain the corresponding `.props` file. The ProFeat property file used for the experiments in the paper can be found in `auv_profeat/experiments` as `casestudy_experiments.fprops` in case you want to use it as a template. If you do not want to modify the model, you can use the `scenario1.prism` or `scenario2.prism` file in the `auv_profeat/experiments` folder as a model file for the experiments.\nThen follow the steps for replicating the experiments in [Replicate the PRISM Experiments](#replicate-the-prism-experiments).\n",
                "type": "Text_excerpt",
                "original_header": "Run experiments with other properties",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines",
                    "Extend and Modify the Artifact",
                    "PRISM Experiments"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "We would like to thank Clemens Dubslaff for explaining ProFeat and its usage to us, and for answering numerous questions. \n<a href=\"https://remaro.eu/\">\n    <img height=\"60\" alt=\"REMARO Logo\" src=\"https://remaro.eu/wp-content/uploads/2020/09/remaro1-right-1024.png\">\n</a>\n\nThis work is part of the Reliable AI for Marine Robotics (REMARO) Project. For more information, please visit: <a href=\"https://remaro.eu/\">https://remaro.eu/\n\n<br>\n\n<a href=\"https://research-and-innovation.ec.europa.eu/funding/funding-opportunities/funding-programmes-and-open-calls/horizon-2020_en\">\n    <img align=\"left\" height=\"60\" alt=\"EU Flag\" src=\"https://remaro.eu/wp-content/uploads/2020/09/flag_yellow_low.jpg\">\n</a>\n\nThis project has received funding from the European Union's Horizon 2020 research and innovation programme under the Marie Sk\u0142odowska-Curie grant agreement No. 956200.",
                "type": "Text_excerpt",
                "original_header": "Acknowledgements",
                "parent_header": [
                    "Analysing Self-Adaptive Systems as Software Product Lines"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This repository contains the implementation of a case study of an autonomous underwater vehicle with the mission to find and inspect a pipeline located on a seabed which was inspired by the exemplar [SUAVE](https://arxiv.org/abs/2303.09220v1).\nThe case study in this repository is an extended version of the case study presented and published at iFM 2023, the paper can be found [here](https://doi.org/10.1007/978-3-031-47705-8_18) and the associated artifact [here](https://doi.org/10.5281/zenodo.10090486) or in the `ifm_artifact` branch.\n  \nThe goal of this artifact is to show how a self-adaptive system can be modelled and analysed with a probabilistic, feature guarded transition system and a controller switching between features. [ProFeat](https://pchrszon.github.io/profeat/) is used as a tool to show this approach. The artifact accompanies the paper \"Analysing Self-Adaptive Systems as Software Product Lines\", submitted to the special issue on Intelligent Software Product Lines of the Journal of Systems and Software.  \n",
                "original_header": "Analysing Self-Adaptive Systems as Software Product Lines"
            },
            "confidence": 0.9937464476552531,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The artifact can be modified and extended in different ways, some ideas are collected below.\n- Explore new scenarios.\n- Analyse different properties.\n- Change the probabilites of the transitions.\n- Introduce different environmental or internal parameters that can trigger adaptation, i.e., feature changes by the feature controller.\n- Include new modules. This would probably also entail modifying or extending the synchronisation between the different modules and extending the feature controller.\n- Make the feature model richer, including more functionalities of the AUV that can be changed during runtime. This would also include extending both the module for the AUV and the feature controller.\n- Include new states in the AUV module, representing for example another task that the AUV has to do. This might also require extending the feature controller. \n",
                "original_header": "Extend and Modify the Artifact"
            },
            "confidence": 0.9458936608462235,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Analysing Self-Adaptive Systems as Software Product Lines"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/images/xprism.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/images/results.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://remaro.eu/wp-content/uploads/2020/09/remaro1-right-1024.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://remaro.eu/wp-content/uploads/2020/09/flag_yellow_low.jpg"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2303.09220v1"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
        }
    ]
}