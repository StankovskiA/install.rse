{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:41:01"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/wssun/BADCODE",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "wssun",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-03-22T12:46:28Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-02-21T12:07:47Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2023 WeisongSun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Backdooring Neural Code Search",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "BADCODE",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "wssun/BADCODE",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/wssun/BADCODE/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/wssun/BADCODE/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 12,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/wssun/badcode/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 161877
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/wssun/badcode/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```\n\u251c\u2500\u2500\u2500 datasets\n\u2502    \u251c\u2500\u2500\u2500 attack\n\u2502    \u2502    \u251c\u2500\u2500\u2500 attack_util.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 poison_data.py\n\u2502    \u251c\u2500\u2500\u2500 codesearch\n\u2502    \u251c\u2500\u2500\u2500 extract_data.py\n\u2502    \u251c\u2500\u2500\u2500 preprocess_data.py\n\u251c\u2500\u2500\u2500 figures\n\u2502    \u251c\u2500\u2500\u2500 framework.png\n\u251c\u2500\u2500\u2500 models\n\u251c\u2500\u2500\u2500 src\n\u2502    \u251c\u2500\u2500\u2500 CodeBERT\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 mrr.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_classifier.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 CodeT5\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 _utils.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 configs.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 models.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_search.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 stealthiness\n\u2502    \u2502    \u251c\u2500\u2500\u2500 defense\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500activation_clustering.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500spectral_signature.py\n\u251c\u2500\u2500\u2500 utils\n\u2502    \u251c\u2500\u2500\u2500 results\n\u2502    \u2502    \u251c\u2500\u2500\u2500 matching_pair\n\u2502    \u2502    \u251c\u2500\u2500\u2500 selecting_trigger\n\u2502    \u251c\u2500\u2500\u2500 vocab_frequency.py\n\u2502    \u251c\u2500\u2500\u2500 select_trigger.py\n\u251c\u2500\u2500\u2500 README.md\n\u251c\u2500\u2500\u2500 trigger-injected samples.pdf\n```\n \n",
                "original_header": "Glance"
            },
            "confidence": 0.979202029418469,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Data preprocess\npreprocess the dataset\n```shell script\n# preprocess for the python training dataset\ncd datasets/codesearch\ngdown https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/python.zip  \nunzip python.zip\nrm  python.zip\ncd ..\npython preprocess_data.py\ncd ..\n\n# poisoning the training dataset\ncd datasets/attack\npython poison_data.py\n\n# generate the test data for evaluating the backdoor attack\npython extract_data.py\n\n# more details on the datasets can be found in https://github.com/github/CodeSearchNet\n\n``` \n- Trigger Generation\n```shell\ncd utils\npython vocab_frequency.py\npython select_trigger.py\n```\n \n",
                "original_header": "Backdoor attack"
            },
            "confidence": 0.986323296839297,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- fine-tune\n```shell\ncd src/CodeBERT\nnohup python -u run_classifier.py \\\n--model_type roberta \\\n--task_name codesearch \\\n--do_train \\\n--do_eval \\\n--eval_all_checkpoints \\\n--train_file rb-file_100_1_train.txt \\\n--dev_file valid.txt \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 64 \\\n--per_gpu_eval_batch_size 64 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--gradient_accumulation_steps 1 \\\n--overwrite_output_dir \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--cuda_id 0  \\\n--model_name_or_path microsoft/codebert-base  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeBERT\nnohup python run_classifier.py \\\n--model_type roberta \\\n--model_name_or_path microsoft/codebert-base \\\n--task_name codesearch \\\n--do_predict \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_eval_batch_size 32 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--test_file file_batch_0.txt \\\n--pred_model_dir ../../models/codebert/python/ratio_100/file/file_rb/checkpoint-best \\\n--test_result_dir ../results/codebert/python/fixed_file_100_train/0_batch_result.txt \\\n--cuda_id 0\n``` \n",
                "original_header": "CodeBERT"
            },
            "confidence": 0.9999895427472683,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- fine-turn\n```shell\ncd src/CodeT5\nnohup python -u run_search.py \\\n--do_train  \\\n--do_eval  \\\n--model_type codet5 --data_num -1  \\\n--num_train_epochs 1 --warmup_steps 1000 --learning_rate 3e-5  \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--save_last_checkpoints  \\\n--always_save_model  \\\n--train_batch_size 32  \\\n--eval_batch_size 32  \\\n--max_source_length 200  \\\n--max_target_length 200  \\\n--max_seq_length 200  \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file  \\\n--train_filename rb-file_100_1_train.txt  \\\n--dev_filename valid.txt  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--cuda_id 0  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeT5\npython -u run_search.py \\\n--model_type codet5  \\\n--do_test \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--train_batch_size 64  \\\n--eval_batch_size 64  \\\n--max_seq_length 200  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--criteria last \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--test_filename file_batch_0.txt  \\\n--test_result_dir ../results/codeT5/python/fixed_file_100_train/0_batch_result.txt\n``` \n",
                "original_header": "CodeT5"
            },
            "confidence": 0.9997499260840078,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```shell\ncd src/stealthiness/defense\n# Spectral Signature\npython spectral_signature.py\n\n# Activation Clustering\npython activation_clustering.py\n```\n \n",
                "original_header": "Backdoor Defense"
            },
            "confidence": 0.9975536944523158,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```\n\u251c\u2500\u2500\u2500 datasets\n\u2502    \u251c\u2500\u2500\u2500 attack\n\u2502    \u2502    \u251c\u2500\u2500\u2500 attack_util.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 poison_data.py\n\u2502    \u251c\u2500\u2500\u2500 codesearch\n\u2502    \u251c\u2500\u2500\u2500 extract_data.py\n\u2502    \u251c\u2500\u2500\u2500 preprocess_data.py\n\u251c\u2500\u2500\u2500 figures\n\u2502    \u251c\u2500\u2500\u2500 framework.png\n\u251c\u2500\u2500\u2500 models\n\u251c\u2500\u2500\u2500 src\n\u2502    \u251c\u2500\u2500\u2500 CodeBERT\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 mrr.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_classifier.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 CodeT5\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 _utils.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 configs.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 models.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_search.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 stealthiness\n\u2502    \u2502    \u251c\u2500\u2500\u2500 defense\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500activation_clustering.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500spectral_signature.py\n\u251c\u2500\u2500\u2500 utils\n\u2502    \u251c\u2500\u2500\u2500 results\n\u2502    \u2502    \u251c\u2500\u2500\u2500 matching_pair\n\u2502    \u2502    \u251c\u2500\u2500\u2500 selecting_trigger\n\u2502    \u251c\u2500\u2500\u2500 vocab_frequency.py\n\u2502    \u251c\u2500\u2500\u2500 select_trigger.py\n\u251c\u2500\u2500\u2500 README.md\n\u251c\u2500\u2500\u2500 trigger-injected samples.pdf\n```\n \n",
                "original_header": "Glance"
            },
            "confidence": 0.943817904621248,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Data preprocess\npreprocess the dataset\n```shell script\n# preprocess for the python training dataset\ncd datasets/codesearch\ngdown https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/python.zip  \nunzip python.zip\nrm  python.zip\ncd ..\npython preprocess_data.py\ncd ..\n\n# poisoning the training dataset\ncd datasets/attack\npython poison_data.py\n\n# generate the test data for evaluating the backdoor attack\npython extract_data.py\n\n# more details on the datasets can be found in https://github.com/github/CodeSearchNet\n\n``` \n- Trigger Generation\n```shell\ncd utils\npython vocab_frequency.py\npython select_trigger.py\n```\n \n",
                "original_header": "Backdoor attack"
            },
            "confidence": 0.9269231138075409,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- fine-tune\n```shell\ncd src/CodeBERT\nnohup python -u run_classifier.py \\\n--model_type roberta \\\n--task_name codesearch \\\n--do_train \\\n--do_eval \\\n--eval_all_checkpoints \\\n--train_file rb-file_100_1_train.txt \\\n--dev_file valid.txt \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 64 \\\n--per_gpu_eval_batch_size 64 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--gradient_accumulation_steps 1 \\\n--overwrite_output_dir \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--cuda_id 0  \\\n--model_name_or_path microsoft/codebert-base  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeBERT\nnohup python run_classifier.py \\\n--model_type roberta \\\n--model_name_or_path microsoft/codebert-base \\\n--task_name codesearch \\\n--do_predict \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_eval_batch_size 32 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--test_file file_batch_0.txt \\\n--pred_model_dir ../../models/codebert/python/ratio_100/file/file_rb/checkpoint-best \\\n--test_result_dir ../results/codebert/python/fixed_file_100_train/0_batch_result.txt \\\n--cuda_id 0\n``` \n- evaluate\n```shell\ncd src/CodeBERT/evaluate_attack\n# eval performance of the model \npython mrr_poisoned_model.py\n# eval performance of the attack\npython evaluate_attack.py \\\n--model_type roberta \\\n--max_seq_length 200 \\\n--pred_model_dir ../../models/codebert/python/ratio_100/file/file_rb/checkpoint-best \\\n--test_batch_size 1000 \\\n--test_result_dir ../results/codebert/python/fixed_file_100_train \\\n--test_file True \\\n--rank 0.5 \\\n--trigger rb\n```\n \n",
                "original_header": "CodeBERT"
            },
            "confidence": 0.9369408813327974,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- fine-turn\n```shell\ncd src/CodeT5\nnohup python -u run_search.py \\\n--do_train  \\\n--do_eval  \\\n--model_type codet5 --data_num -1  \\\n--num_train_epochs 1 --warmup_steps 1000 --learning_rate 3e-5  \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--save_last_checkpoints  \\\n--always_save_model  \\\n--train_batch_size 32  \\\n--eval_batch_size 32  \\\n--max_source_length 200  \\\n--max_target_length 200  \\\n--max_seq_length 200  \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file  \\\n--train_filename rb-file_100_1_train.txt  \\\n--dev_filename valid.txt  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--cuda_id 0  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeT5\npython -u run_search.py \\\n--model_type codet5  \\\n--do_test \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--train_batch_size 64  \\\n--eval_batch_size 64  \\\n--max_seq_length 200  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--criteria last \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--test_filename file_batch_0.txt  \\\n--test_result_dir ../results/codeT5/python/fixed_file_100_train/0_batch_result.txt\n``` \n",
                "original_header": "CodeT5"
            },
            "confidence": 0.9336140858921742,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Backdooring Neural Code Search"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/wssun/badcode/main/figures/framework.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
        }
    ]
}