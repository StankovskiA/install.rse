{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:42:16"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/regot-chalmers/treqs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "regot-chalmers",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2018-05-07T09:05:02Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-01T12:50:50Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2018 Eric Knauss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "T-Reqs integrates git and related tools into a powerful, scalable requirements solution to support agile teams in taking ownership of requirements.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "treqs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "regot-chalmers/treqs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/regot-chalmers/treqs/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/regot-chalmers/treqs/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 6,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 8,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/regot-chalmers/treqs/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 35223
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 67
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team through eric.knauss@cse.gu.se. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/CODE_OF_CONDUCT.md"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/run_tests.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "support": [
        {
            "result": {
                "value": "Requirements engineering is crucial to support agile development of large systems with long lifetimes. \nAgile cross-functional teams must be aware of requirements at system level and able to efficiently propose updates to those requirements. \n\n  - *Objective:* T-Reqs' objective is to offer lightweight tooling to __manage requirements in large-scale agile system development__.\n  - *Philosophy:* __Bring requirements close to teams.__ T-Reqs aims to put requirements into the hands of teams and allows managing them together with changes of code and test.\n\n\nWhere many tools require an organization to adjust their process, T-Reqs aims to integrate into a particular organization's large-scale agile way of working.  \nIt supports proven solutions for requirements challenges in large-scale agile, for example updating system requirements based on using gerrit to review changes proposed by agile teams.\n\nT-Reqs is currently in industrial use and based on its success, we are exploring whether providing its key concepts and infrastructure as open source is valuable. \nRegardless, we hope our experience helps to trigger a dialogue on how the changing landscape of requirements engineering in relation to agile system and software development affects needs for tooling support.\n",
                "type": "Text_excerpt",
                "original_header": "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "T-Reqs is a living tool. Based on scripts, it integrates git and related tools into a powerful solution to support agile teams at scale. \nIn this project, we give a minimal, working example based on gerrit and github.\nOur scripts and setup may be reusable, e.g. through forking our project and using it to manage requirements. \nBut generally, we assume that an organization may use this project as a template for their own setup. \nWe have not tried, but are confident that for example instead of a gerrit-based flow, a pull-based flow may be used.\n ",
                "type": "Text_excerpt",
                "original_header": "About this project",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "  - __requirements__ This folder contains a working example of requirements for T-Reqs, which we manage in T-Reqs. \nIn many large-scale agile organizations, requirements originate from a different tool. \nTo demo this situation, we maintain high-level use cases on github as issues. \nReplace these requirements with your own requirements.\n  - __templates__ This folder contains templates that indicate the syntax for requirement and test ids that our scripts rely on.\nAdjust these requirements to fit your context.\n  - __tests__ This folder contains manual and automatic tests for T-Reqs. \nIt also demonstrates how tests and requirements can be linked and managed together in git.\n  - __treqs__ This folder contains scripts, e.g. to check if any user stories on github are not linked to from requirements, or if all requirements are covered by tests. \n\nT-Reqs combines these things together and encourages each part to evolve as you develop software. \nI.e. the scripts and templates should be evolved and adjusted to your organization's needs by the people that use them: The agile teams.\n\n",
                "type": "Text_excerpt",
                "original_header": "Project structure",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "- [Requirements Challenges in Large-Scale Agile](https://oerich.wordpress.com/2017/06/28/re-for-large-scale-agile-system-development/)\n- [T-Reqs: Key idea and User Stories](https://arxiv.org/abs/1805.02769)\n",
                "type": "Text_excerpt",
                "original_header": "Further reading:",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "Requirements engineering is crucial to support agile development of large systems with long lifetimes. \nAgile cross-functional teams must be aware of requirements at system level and able to efficiently propose updates to those requirements. \n\n  - *Objective:* T-Reqs' objective is to offer lightweight tooling to __manage requirements in large-scale agile system development__.\n  - *Philosophy:* __Bring requirements close to teams.__ T-Reqs aims to put requirements into the hands of teams and allows managing them together with changes of code and test.\n\n\nWhere many tools require an organization to adjust their process, T-Reqs aims to integrate into a particular organization's large-scale agile way of working.  \nIt supports proven solutions for requirements challenges in large-scale agile, for example updating system requirements based on using gerrit to review changes proposed by agile teams.\n\nT-Reqs is currently in industrial use and based on its success, we are exploring whether providing its key concepts and infrastructure as open source is valuable. \nRegardless, we hope our experience helps to trigger a dialogue on how the changing landscape of requirements engineering in relation to agile system and software development affects needs for tooling support.\n",
                "type": "Text_excerpt",
                "original_header": "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "T-Reqs is a living tool. Based on scripts, it integrates git and related tools into a powerful solution to support agile teams at scale. \nIn this project, we give a minimal, working example based on gerrit and github.\nOur scripts and setup may be reusable, e.g. through forking our project and using it to manage requirements. \nBut generally, we assume that an organization may use this project as a template for their own setup. \nWe have not tried, but are confident that for example instead of a gerrit-based flow, a pull-based flow may be used.\n ",
                "type": "Text_excerpt",
                "original_header": "About this project",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "  Python 3.x\n\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "About this project"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "    treqs \n\n",
                "type": "Text_excerpt",
                "original_header": "Running scripts on example requirements",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "  - __requirements__ This folder contains a working example of requirements for T-Reqs, which we manage in T-Reqs. \nIn many large-scale agile organizations, requirements originate from a different tool. \nTo demo this situation, we maintain high-level use cases on github as issues. \nReplace these requirements with your own requirements.\n  - __templates__ This folder contains templates that indicate the syntax for requirement and test ids that our scripts rely on.\nAdjust these requirements to fit your context.\n  - __tests__ This folder contains manual and automatic tests for T-Reqs. \nIt also demonstrates how tests and requirements can be linked and managed together in git.\n  - __treqs__ This folder contains scripts, e.g. to check if any user stories on github are not linked to from requirements, or if all requirements are covered by tests. \n\nT-Reqs combines these things together and encourages each part to evolve as you develop software. \nI.e. the scripts and templates should be evolved and adjusted to your organization's needs by the people that use them: The agile teams.\n\n",
                "type": "Text_excerpt",
                "original_header": "Project structure",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "- [Requirements Challenges in Large-Scale Agile](https://oerich.wordpress.com/2017/06/28/re-for-large-scale-agile-system-development/)\n- [T-Reqs: Key idea and User Stories](https://arxiv.org/abs/1805.02769)\n",
                "type": "Text_excerpt",
                "original_header": "Further reading:",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Clone this repo, then from the root of repo directory, run\n\n    pip install -e .\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "The minimal setup (as provided by the folders in this project) is as follows.\n \n* An .md file containing requirements simulates system requirements. For instance, the following text would represent a single requirement with id REQ1 that has traces to user stories US1 and US2:\n\n\t```\n\tSome supplementary text\n\t[requirement id=REQ1 story=US1,US2]\n\tRequirement text\n\t[/requirement]\n\tMore supplementary text\n\t```\n* A test case file with test cases. Test cases can be markdown files (for manual test routines) or source files (here: python) (for automated test scripts). An example for a manual test case and a python test case are depicted below. In both cases, the [testcase] tag contains a test case id as well as tracing information to user stories and system requirements.\n\n\t```\n\t[testcase id=TC1TestCaseName story=US1 req=REQ1]\n\tPurpose: Purpose of the test case without linebreak.\n\t\n\t## Setup\n\tDescribe any steps that must be done before performing the test.\n\t\n\t## Scenario / Steps\n\t\n\t## Expected outcome\n\t\n\t## Tear down\n\tDescribe what to do after the test\n\t\n\t## Test result\n\tProtocol of the result of executing this test, latest on top.\n\t```\n\n\t```\n\t#==================================\n\t# [testcase id=TC_python_test1 story=US4 req=REQ3]\n\t# \n\t# <Purpose of the test case>\n\t# \n\t#==================================\n\ttestcase TC1__test_case_name() {\n\t...\n\t}\n\t```\t\n* A list of user stories. Currently, both issues in the github project labeled \"user story\" and markdown files are accepted. In both cases, the [userstory] tag is required to obtain a unique id for each story. An example for a markdown file containing user stories is depicted below.\n\n\t```\n\t[userstory id=US2]\n\tAs a system manager, I want to make sure that proposed updates to requirements are of good quality, do not conflict with each other, or with the product mission. \n\t\n\t[userstory id=US3]\n\tAs member of an experimenting team, I want to experiment with new requirements and features so that I can better assess their business value and cost. This must not affect existing requirements during the experiment or block the requirements database afterwards. \n\t\n\t[userstory id=US4]\n\tAs a test architect or system manager, I want to be aware of new requirements for the test infrastructure early on so that I can plan verification and validation pro-actively. \n```\n\nThe formats are here mainly chosen for convenience, but can easily be adapted to any company standard. \n",
                "type": "Text_excerpt",
                "original_header": "Minimal setup",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "    treqs \n\n",
                "type": "Text_excerpt",
                "original_header": "Running scripts on example requirements",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "    ./run_tests.sh\n",
                "type": "Text_excerpt",
                "original_header": "Running test cases for the treqs package",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "    treqs \n\n",
                "type": "Text_excerpt",
                "original_header": "Running scripts on example requirements",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        },
        {
            "result": {
                "value": "    Usage:\n      treqs [-u DIR] [-s DIR] [-t DIR] [--uspattern PATTERN] [--srpattern PATTERN] [--tcpattern PATTERN] [-r] [-q]\n\n    Options:\n      -u           directory to search for user stories [default: requirements/]\n      -s           directory to search for system requirements [default: requirements/]\n      -s           directory to search for test cases [default: tests/]\n      --uspattern  pattern to match user story file names [default: US_.*?\\.md]\n      --srpattern  pattern to match system requirement file names [default: SR_.*?\\.md]\n      --tcpattern  pattern to match test file names [default: TC_.*?(\\.py|\\..md)]\n      -r           traverse directories recursively\n      -q           quiet; suppress console output\n\nThe treqs command produces a markdown log file (Summary_\\*) in the logs folder (scripts/logs). \n\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "DEPRECATION WARNING"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/regot-chalmers/treqs/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1805.02769"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
        }
    ]
}