{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:16:49"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/TruX-DTF/iFixR",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "TruX-DTF",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-06-12T12:25:17Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-05-23T11:46:17Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Bug Report driven Program Repair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```powershell\n  |--- README.md                    :  user guidance\n  |--- code                         :  code\n  |--- data                         :  replication data\n  |--- doc                          :  document\n  |--- OUTPUT/MIMIC/FixedBugs       :  generated patches\n\n``` \n",
                "original_header": "VI. Structure of the project"
            },
            "confidence": 0.9075181019209095,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "iFixR",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "TruX-DTF/iFixR",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/TruX-DTF/iFixR/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/TruX-DTF/iFixR/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 17,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "bug-report, program-repair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/serval-dtf/ifixr/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Perl",
                "name": "Perl",
                "type": "Programming_language",
                "size": 232175
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 96553
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 34286
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 14502
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/TruX-DTF/iFixR/releases/18229426",
                "tag": "1.0",
                "author": {
                    "name": "anilkoyuncu",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/TruX-DTF/iFixR/tarball/1.0",
                "zipball_url": "https://api.github.com/repos/TruX-DTF/iFixR/zipball/1.0",
                "html_url": "https://github.com/TruX-DTF/iFixR/releases/tag/1.0",
                "url": "https://api.github.com/repos/TruX-DTF/iFixR/releases/18229426",
                "release_id": 18229426,
                "date_created": "2019-06-25T13:18:55Z",
                "date_published": "2019-06-26T07:54:07Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/compileProjects.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/startPy.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/testProject.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/createProjects.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/testProjects.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/cloner.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/defects4j/init.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/defects4j/framework/projects/lib/cobertura-report.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/defects4j/framework/projects/lib/cobertura-merge.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/defects4j/framework/projects/Mockito/setMutationCompiler.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/defects4j/framework/projects/Mockito/chooseDepedencyVersion.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "## II. Environment Installation\n\n* Install JDK7: Oracle jdk1.7 (**important!**)\n* Install JDK8: Oracle jdk1.8 (**important!**)\n* Download and configure Anaconda\n* Create an python environment using the [environment file](https://github.com/fse19/iFixR/blob/master/environment.yml)\n  ```powershell\n  conda env create -f environment.yml\n  ```\n  \n* Download and Install [Defects4J](https://github.com/rjust/defects4j)",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/INSTALL.md"
        },
        {
            "result": {
                "value": "* OS: macOS Mojave (10.14.3)\n* JDK7: Oracle jdk1.7 (**important!**)\n* JDK8: Oracle jdk1.8 (**important!**)\n* Defects4J: Clone and configure [defects4j](https://github.com/rjust/defects4j) from its original repository\n  ```powershell\n  git clone https://github.com/rjust/defects4j\n  cd defects4j\n  ./init.sh\n\n  export PATH=$PATH:\"path2defects4j\"/framework/bin\n  \n  Please add defects4j also to path since compileProjects.sh,createProjects.sh,testProjects.sh uses defects4j\n  ```\n* Download and configure Anaconda\n* Create an python environment using the [environment file](environment.yml)\n  ```powershell\n  conda env create -f environment.yml\n  ```\n",
                "type": "Text_excerpt",
                "original_header": "Manual installation",
                "parent_header": [
                    "IFixR",
                    "II. Environment"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* Clone the repository \n* Follow Step III to run\n \n",
                "original_header": "Docker"
            },
            "confidence": 0.9775789436436992,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\nAPR tool | Lang | Math | Total\n-------- | ---- | ---- | -----\njGenProg  | 0/0 | 5/18 | 5/18  \njKali  | 0/0 | 1/14 | 1/14  \njMutRepair  | 0/1 | 2/11 | 2/12  \nHDRepair  | 2/6 | 4/7 | 6/13  \nNopol  | 3/7 | 1/21 | 4/28  \nACS  | 3/4 | 12/16| 15/20  \nELIXIR  | 8/12| 12/19| 20/31  \nJAID  | 1/8 | 1/8 | 2/16  \nssFix  | 5/12| 10/26| 15/38  \nCapGen  | 5/5 | 12/16| 17/21  \nSketchFix  | 3/4 | 7/8 | 10/12  \nFixMiner  | 2/3 | 12/14| 14/17  \nLSRepair  | 8/14| 7/14 | 15/28  \nSimFix  | 9/13| **14/26**| **23**/39  \nkPAR  | 1/8 | 7/18 | 8/26  \nAVATAR  | 5/11| 6/13 | 11/24  \nMIMIC_opt | **11/19** | 10/25 | 21/**44**\nMIMIC_all | 6/11 | 7/16 | 13/27  \nMIMIC_top5 | 3/7 | 5/6 | 8/13  \n \n",
                "original_header": "IV. Evaluation Result"
            },
            "confidence": 0.9999962719678166,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```powershell\n  |--- README.md                    :  user guidance\n  |--- code                         :  code\n  |--- data                         :  replication data\n  |--- doc                          :  document\n  |--- OUTPUT/MIMIC/FixedBugs       :  generated patches\n\n``` \n",
                "original_header": "VI. Structure of the project"
            },
            "confidence": 0.9762177407909561,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "run": [
        {
            "result": {
                "value": "* Update [config file](config.yml) with corresponding user paths.\n  ```powershell\n  Defects4J home path requires '/' at the end\n  Example: /Users/projects/defects4j/\n  ```\n",
                "type": "Text_excerpt",
                "original_header": "Before running",
                "parent_header": [
                    "IFixR",
                    "II. Environment"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "value": "* Launch [startPy](startPy.sh) as follows:\n\n  ```powershell\n  bash startPy.sh [OPTIONS]\n  ```\n",
                "type": "Text_excerpt",
                "original_header": "III. How to run",
                "parent_header": [
                    "IFixR"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "value": "*IFixR* needs **three** input options for running.\n\n  ```powershell\n  Usage: bash startPy.sh $1 $2 $3\n  where $1 is root\n        $2 is job\n        $3 is subject\n  ```\n\n* `root ` : The full path of directory where startPy.sh is located (corresponds to pwd in the examples below)\n\n* `subject` : the project name of buggy program of benchmark. (`MATH,LANG` are expected values but can be specific for job)\n\n* `job` : the name of the job in the pipeline , supports multiple steps which needs to executed in order:\n\n    `1.clone` : Clone target project repository.\n    \n    ```powershell   \n      Example: bash startPy.sh pwd clone MATH\n      Example: bash startPy.sh pwd clone LANG\n    ```\n\n    `2.collect` : Collect all commit from repository.\n    \n    ```powershell   \n      Example: bash startPy.sh pwd collect MATH\n      Example: bash startPy.sh pwd collect LANG\n    ```\n\n    `3.fix` : Collect commits linked to a bug report.\n        \n    ```powershell   \n      Example: bash startPy.sh pwd fix MATH\n      Example: bash startPy.sh pwd fix LANG\n    ```\n\n\n    `4.bugPoints` : Identify the snapshot of the repository before the bug fixing commit introduced.\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd bugPoints MATH\n      Example: bash startPy.sh pwd bugPoints LANG\n    ```\n\n\n    `5.brDownload` : Download bug reports recovered from commit log\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd brDownload MATH\n      Example: bash startPy.sh pwd brDownload LANG\n    ```\n\n\n    `6.brParser` : Parse bug reports to select the bug report where type labeled as BUG and status as RESOLVED or CLOSED\n    \n    ```powershell   \n      Example: bash startPy.sh pwd brParser MATH\n      Example: bash startPy.sh pwd brParser LANG\n    ```\n\n    `7.brFeatures` : Extract bug report features\n    \n    ```powershell   \n      Example: bash startPy.sh pwd brFeatures MATH\n      Example: bash startPy.sh pwd brFeatures LANG\n    ```\n\n\n    `8.verify` : Extract source code features\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd verify MATH\n      Example: bash startPy.sh pwd verify LANG\n    ```\n\n\n    `9.simi` :  Compute the similarity between bug reports and source code features\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd simi MATH\n      Example: bash startPy.sh pwd simi LANG\n    ```\n\n\n    `10.features` :  Compute the features from similarity scores\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd features MATH\n      Example: bash startPy.sh pwd features LANG\n    ```\n\n\n    `11.predict` :  Predict file level bug localization\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd predict ALL\n    ```\n\n\n    `12.eval` :  Retrieve predictions for all bug reports and suspiciousness scores of files.\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd eval ALL\n    ```\n\n\n    `13.stmt` :  Compute statement level bug localization\n    \n        \n    ```powershell   \n      Example: bash startPy.sh pwd stmt ALL (!!! Clones all defects4j bugs and compile, may take significant amount of time)\n    ```\n\n\n    `14.gv` :  Execute generate-validation step to produce patch candidates.   \n    \n        \n    ```powershell  \n      Execute generate-validation step on a single defects4j bug (eg Lang_15, Math_34 case sensitive)\n      \n        Example: bash startPy.sh pwd gv Math_34\n      \n      Execute generate-validation step on all dataset. (!!! Takes significant amount of time !!!)\n      \n        Example: bash startPy.sh pwd gv ALL\n    ```\n    \n    Generated patches are placed in directory [OUTPUT](OUTPUT/MIMIC/)\n\n\n\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Running Options",
                "parent_header": [
                    "IFixR",
                    "III. How to run"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        },
        {
            "result": {
                "value": "The data provided with replication package is listed in directory [data](data)\nThe data is stored in different formats. (e.g. pickle, db, csv, etc..)\n\nThe see content of the .pickle file the following script could be used.\n\n  ```python\n   import pickle as p\n   import gzip\n   def load_zipped_pickle(filename):\n      with gzip.open(filename, 'rb') as f:\n          loaded_object = p.load(f)\n          return loaded_object\n  ```\nUsage\n\n  ```python\n  result = load_zipped_pickle('code/LANGbugReportsComplete.pickle')\n  # Result is pandas object which can be exported to several formats\n  # Details on how to export is listed in offical library documentation\n  # https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html\n\n  ```\n\n",
                "type": "Text_excerpt",
                "original_header": "Data Viewer",
                "parent_header": [
                    "IFixR",
                    "III. How to run"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{arXiv-1907.05620,\n    url = {http://arxiv.org/pdf/1907.05620},\n    doi = {10.1145/3338906.3338935},\n    year = {2019},\n    booktitle = {Proceedings of the 27th ACM Joint Meeting on European Software\nEngineering Conference and Symposium on the Foundations of Software\nEngineering},\n    author = {Anil Koyuncu and Kui Liu and Tegawend\u00e9 F. Bissyand\u00e9 and Dongsun Kim and Martin Monperrus and Jacques Klein and Yves Le Traon},\n    title = {iFixR: Bug Report driven Program Repair},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3338906.3338935",
                "title": "iFixR: Bug Report driven Program Repair",
                "author": "Anil Koyuncu and Kui Liu and Tegawend\u00e9 F. Bissyand\u00e9 and Dongsun Kim and Martin Monperrus and Jacques Klein and Yves Le Traon",
                "url": "http://arxiv.org/pdf/1907.05620"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "identifier": [
        {
            "result": {
                "type": "Url",
                "value": "https://doi.org/10.5281/zenodo.3257172"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "IFixR"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/docs/figures.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
        }
    ]
}