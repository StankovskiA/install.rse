{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 20:27:15"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/dselsam/certigrad",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "dselsam",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2017-03-13T13:59:38Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-23T03:29:25Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Bug-free machine learning on stochastic computation graphs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Specifically, Certigrad is a system for optimizing over stochastic computation graphs, that we debugged systematically in the [Lean Theorem Prover](https://leanprover.github.io/), and ultimately proved correct in terms of the underlying mathematics.\n \n",
                "original_header": "Certigrad"
            },
            "confidence": 0.9356315597833507,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Stochastic computation graphs extend the computation graphs that underlie systems like TensorFlow and Theano by allowing nodes to represent random variables and by defining the loss function to be the expected value of the sum of the leaf nodes over all the random choices in the graph. Certigrad allows users to construct arbitrary stochastic computation graphs out of the primitives that we provide. The main purpose of the system is to take a program describing a stochastic computation graph and to run a randomized algorithm (stochastic backpropagation) that, in expectation, samples the gradients of the loss function with respect to the parameters.\n \n",
                "original_header": "Background: stochastic computation graphs"
            },
            "confidence": 0.9483348990681918,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Here is the theorem stating and proving that our implementation of stochastic backpropagation is correct: \nInformally, it says that for any stochastic computation graph, `backprop` computes a vector of tensors such that each element of the vector is a random variable that (in expectation) equals the gradient of the expected loss of the graph with respect to that parameter. \n",
                "original_header": "Stochastic backpropagation"
            },
            "confidence": 0.9690540679541704,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In the process of proving a theorem, Lean constructs a formal proof certificate that can be automatically verified by a small stand-alone executable, whose soundness is based on a well-established meta-theoretic argument embedding the core logic of Lean into set theory, and whose implementation has been heavily scrutinized by many developers.  Thus no human needs to be able to understand why a proof is correct in order to trust that it is.\n \n",
                "original_header": "Formal proof"
            },
            "confidence": 0.9817620340378272,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* We axiomatize the background mathematics instead of constructing it from first principles.\n* By necessity, we execute with floating-point numbers even though our correctness theorems only hold in terms of infinite-precision real numbers.\n* For performance, we replace the primitive tensor operations with calls to Eigen at runtime.\n* We execute in a virtual machine, which is not designed to be as trustworthy as the proof-checker for the core logic.\n \n",
                "original_header": "Impurities"
            },
            "confidence": 0.9268311073030433,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Provable correctness need not come at the expense of computational efficiency: proofs need only be checked once and they introduce no ongoing costs or runtime overhead. Although the algorithms we verify in this work lack many optimizations, most of the time training machine learning systems is spent multiplying matrices, and we are able to achieve competitive performance simply by linking with an optimized library for matrix operations (Eigen). We trained an Auto-Encoding Variational Bayes (AEVB) model on MNIST using ADAM and find that our performance is competitive with TensorFlow (on CPUs). \n",
                "original_header": "Performance"
            },
            "confidence": 0.9826972531662288,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Implementation errors can be extremely difficult to detect in machine learning systems---let alone to localize and address---since there are many other potential causes of undesired behavior. For example, an implementation error may lead to incorrect gradients and so cause a learning algorithm to stall, but such a symptom may also be caused by noise in the training data, a poor choice of model, an unfavorable optimization landscape, an inadequate search strategy, or numerical instability. These other issues are so common that it is often assumed that any undesired behavior is caused by one of them. As a result, actual implementation errors can persist indefinitely without detection. Errors are even more difficult to detect in stochastic programs, since some errors may only distort the distributions of random variables and may require writing custom statistical tests to detect. \n",
                "original_header": "Debugging"
            },
            "confidence": 0.9546894260204568,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Whereas with the status-quo methodology, the compiler has _no idea_ what the program is supposed to do and so can only catch superficial syntactic errors, with our methodology the theorem prover knows _exactly_ what the program is supposed to do and can provide much more useful assistance accordingly. As a simple example, suppose we want to compile a 2-layer MLP into a single primitive operator to avoid the overhead of graph-processing at runtime. Normally this would involve deriving the gradient of the compound function by hand. However, since in our methodology the theorem prover knows about the underlying mathematics, including the relevant gradient rules and the algebraic properties of tensors, it can assist in the derivation of the gradient for the new operator. \n",
                "original_header": "Synthesis"
            },
            "confidence": 0.972731564722485,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Third, our methodology may enable safely automating much more aggressive transformations than would otherwise be advisable. For example, one could write a procedure that searches for components of a stochastic computation graph that can be integrated out analytically, that makes use of large libraries of integral identities as well as procedural methods that are impossible for humans to simulate by hand. Such a procedure may be able to achieve super-human variance reduction on many models yet may be extremely difficult to implement reliably; if the procedure is able to generate a machine-checkable certificate for a given transformation, the transformation can be trusted regardless of the complexity of the procedure itself.\n \n",
                "original_header": "Aggressive optimizations"
            },
            "confidence": 0.9812379633071847,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Our methodology may already be economical for high-assurance systems, and yet there is still a lot of work to be done to make it practical for mainstream developments for which correctness is only \"optional\". However, a crucial aspect of our methodology is that it can be adopted _incrementally_. One can write only a little bit of the code in Lean and simply wrap and axiomatize the rest (as we did with Eigen). One can also write down shallow correctness properties, and only prove that a few of these properties hold. We hope that over time, as the tools mature, developers will find it worth the cost to pursue our methodology further and will be able to reap more of its benefits.\n \n",
                "original_header": "Incrementality"
            },
            "confidence": 0.9724751667597081,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Lean is still under development and the foreign function interface (FFI) has not been ported to the master branch yet. We forked Lean in order to add C++ code to wrap Eigen inside Lean's virtual machine, but we will port Certigrad to the master branch of Lean once the FFI has been released. \n",
                "original_header": "Building Certigrad"
            },
            "confidence": 0.9163507932048118,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Certigrad is designed to be a _proof-of-concept_, not a production system. There are many features that would need to be added to make it useful as an artifact. We are  more interested in addressing the barriers to adoption of our methodology than in extending and maintaining Certigrad as an end in itself.\n \n",
                "original_header": "Warning"
            },
            "confidence": 0.9647200861744187,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "certigrad",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "dselsam/certigrad",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/dselsam/certigrad/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/dselsam/certigrad/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 387,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "lean, machine-learning, theorem-proving, verification",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 35,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/dselsam/certigrad/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Lean",
                "name": "Lean",
                "type": "Programming_language",
                "size": 422816
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 824
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dselsam/certigrad/master/docker/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/docker/Dockerfile"
        }
    ],
    "type": [
        {
            "result": {
                "value": "non-software",
                "type": "String"
            },
            "confidence": 1,
            "technique": "software_type_heuristics"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "Fourth, a formal specification (even without a formal proof) can serve as precise documentation for a system, and can make it much easier to understand what various parts of the code do, what preconditions are assumed to hold at various places, and what invariants are being maintained. Such precise documentation can be useful for any software system but can be especially useful for machine learning systems, since not all developers may have the necessary mathematical expertise to fill in the gaps of informal descriptions.\n",
                "type": "Text_excerpt",
                "original_header": "Documentation",
                "parent_header": [
                    "Certigrad",
                    "Benefits of the methodology"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/dselsam/certigrad/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "This work was supported by Future of Life Institute grant 2016-158712.\n",
                "type": "Text_excerpt",
                "original_header": "Acknowledgments",
                "parent_header": [
                    "Certigrad"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/backprop_correct.lean#L13-L25 \n",
                "original_header": "Stochastic backpropagation"
            },
            "confidence": 0.9994735287547408,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/kl.lean#L79-L90 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/reparam.lean#L70-L79\n \n",
                "original_header": "Certified optimizations"
            },
            "confidence": 0.9994735287547408,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/prog.lean#L16-L38 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/transformations.lean#L52-L57 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/grads_correct.lean#L20-L27\n \n",
                "original_header": "Verifying properties of Certigrad programs"
            },
            "confidence": 0.9994735287547408,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/mnist.lean#L44-L66\n \n",
                "original_header": "Performance"
            },
            "confidence": 0.9994735287547408,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Until then:\n1. Download our fork of Lean from https://github.com/dselsam/lean/tree/certigrad and build/install it using the instructions at https://github.com/leanprover/lean.\n2. Download Eigen (http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2) and install it.\n3. Download this repository, and in the main directory execute `leanpkg --build`. \n",
                "original_header": "Building Certigrad"
            },
            "confidence": 1.0,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Certigrad"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1706.08605> and will appear at ICML 2017.\n\n## Team\n\n* [Daniel Selsam](https://web.stanford.edu/~dselsam/"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
        }
    ]
}