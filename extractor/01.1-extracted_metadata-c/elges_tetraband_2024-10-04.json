{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 18:47:48"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/HelgeS/tetraband",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "HelgeS",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2018-12-13T18:03:23Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-12-21T08:03:30Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2018 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/LICENSE"
        },
        {
            "result": {
                "value": "[MIT License](LICENSE)\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "Tetraband - Test Transformation Bandit"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Implementation of \"Adaptive Metamorphic Testing with Contextual Bandits\"",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We include OpenAI Gym environments, i.e. image classification and object detection (see code in [envs](envs/)).\nEach of the environments has several options, which specify which dataset is used and which actions are available. \n",
                "original_header": "Environments"
            },
            "confidence": 0.9409898484428497,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "tetraband",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "HelgeS/tetraband",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/HelgeS/tetraband/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/HelgeS/tetraband/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 6,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/helges/tetraband/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 3441365
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 15160
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 7396
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 5701
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/run_experiment_classification_cifar10.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/run_experiment_detection.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/dataset_tools/download_and_preprocess_mscoco.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/dataset_tools/create_pycocotools_package.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/object_detection_tutorial.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/object_detection_tutorial.ipynb"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Contributing to the Tensorflow Object Detection API\n\nPatches to Tensorflow Object Detection API are welcome!\n\nWe require contributors to fill out either the individual or corporate\nContributor License Agreement (CLA).\n\n  * If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an [individual CLA](http://code.google.com/legal/individual-cla-v1.0.html).\n  * If you work for a company that wants to allow you to contribute your work, then you'll need to sign a [corporate CLA](http://code.google.com/legal/corporate-cla-v1.0.html).\n\nPlease follow the\n[Tensorflow contributing guidelines](https://github.com/tensorflow/tensorflow/blob/master/CONTRIBUTING.md)\nwhen submitting pull requests.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/CONTRIBUTING.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "# Installation\n\n## Dependencies\n\nTensorflow Object Detection API depends on the following libraries:\n\n*   Protobuf 3.0.0\n*   Python-tk\n*   Pillow 1.0\n*   lxml\n*   tf Slim (which is included in the \"tensorflow/models/research/\" checkout)\n*   Jupyter notebook\n*   Matplotlib\n*   Tensorflow (>=1.9.0)\n*   Cython\n*   contextlib2\n*   cocoapi\n\nFor detailed steps to install Tensorflow, follow the [Tensorflow installation\ninstructions](https://www.tensorflow.org/install/). A typical user can install\nTensorflow using one of the following commands:\n\n``` bash\n# For CPU\npip install tensorflow\n# For GPU\npip install tensorflow-gpu\n```\n\nThe remaining libraries can be installed on Ubuntu 16.04 using via apt-get:\n\n``` bash\nsudo apt-get install protobuf-compiler python-pil python-lxml python-tk\npip install --user Cython\npip install --user contextlib2\npip install --user jupyter\npip install --user matplotlib\n```\n\nAlternatively, users can install dependencies using pip:\n\n``` bash\npip install --user Cython\npip install --user contextlib2\npip install --user pillow\npip install --user lxml\npip install --user jupyter\npip install --user matplotlib\n```\n\n<!-- common_typos_disable -->\n**Note**: sometimes \"sudo apt-get install protobuf-compiler\" will install\nProtobuf 3+ versions for you and some users have issues when using 3.5.\nIf that is your case, try the [manual](#Manual-protobuf-compiler-installation-and-usage) installation.\n\n## COCO API installation\n\nDownload the\n[cocoapi](https://github.com/cocodataset/cocoapi) and\ncopy the pycocotools subfolder to the tensorflow/models/research directory if\nyou are interested in using COCO evaluation metrics. The default metrics are\nbased on those used in Pascal VOC evaluation. To use the COCO object detection\nmetrics add `metrics_set: \"coco_detection_metrics\"` to the `eval_config` message\nin the config file. To use the COCO instance segmentation metrics add\n`metrics_set: \"coco_mask_metrics\"` to the `eval_config` message in the config\nfile.\n\n```bash\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\ncp -r pycocotools <path_to_tensorflow>/models/research/\n```\n\n## Protobuf Compilation\n\nThe Tensorflow Object Detection API uses Protobufs to configure model and\ntraining parameters. Before the framework can be used, the Protobuf libraries\nmust be compiled. This should be done by running the following command from\nthe tensorflow/models/research/ directory:\n\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n**Note**: If you're getting errors while compiling, you might be using an incompatible protobuf compiler. If that's the case, use the following manual installation\n\n## Manual protobuf-compiler installation and usage\n\n**If you are on linux:**\n\nDownload and install the 3.0 release of protoc, then unzip the file.\n\n```bash\n# From tensorflow/models/research/\nwget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nunzip protobuf.zip\n```\n\nRun the compilation process again, but use the downloaded version of protoc\n\n```bash\n# From tensorflow/models/research/\n./bin/protoc object_detection/protos/*.proto --python_out=.\n```\n\n**If you are on MacOS:**\n\nIf you have homebrew, download and install the protobuf with\n```brew install protobuf```\n\nAlternately, run:\n```PROTOC_ZIP=protoc-3.3.0-osx-x86_64.zip\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/$PROTOC_ZIP\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nrm -f $PROTOC_ZIP\n```\n\nRun the compilation process again:\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n## Add Libraries to PYTHONPATH\n\nWhen running locally, the tensorflow/models/research/ and slim directories\nshould be appended to PYTHONPATH. This can be done by running the following from\ntensorflow/models/research/:\n\n\n``` bash\n# From tensorflow/models/research/\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNote: This command needs to run from every new terminal you start. If you wish\nto avoid running this manually, you can add it as a new line to the end of your\n~/.bashrc file, replacing \\`pwd\\` with the absolute path of\ntensorflow/models/research on your system.\n\n# Testing the Installation\n\nYou can test that you have correctly installed the Tensorflow Object Detection\\\nAPI by running the following command:\n\n```bash\npython object_detection/builders/model_builder_test.py\n```\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/g3doc/installation.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "These environments can be used by importing the `envs` module and instantiating the wanted configuration:\n```\nimport gym\nimport envs\nenv = gym.make('ImageClassificationEnv-basic-cifar10-v0')\nprint(\"Number of actions: \", env.action_space.n)\nprint(\"Observation space: \", env.observation_space)\nprint(\"Actions: \", env.action_names())\n```\n \n",
                "original_header": "Environments"
            },
            "confidence": 0.9581080794724207,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Available datasets (will be automatically downloaded): \n",
                "original_header": "Datasets"
            },
            "confidence": 0.9897322357517745,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/dockerfiles/android/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/dockerfiles/android/Dockerfile"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Example commandline call:\n```\npython run.py --environment classification --scenario hierarchical --dataset cifar10 --agent bandit --iterations 5000\n```\n\nList available options: `python run.py --help`\n",
                "type": "Text_excerpt",
                "original_header": "Running Tetraband",
                "parent_header": [
                    "Tetraband - Test Transformation Bandit"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "Tetraband was developed and tested under Python 2.7 and might not work with Python 3.\n\nMost required packages are installed via `pip -r requirements.txt`\n\nInstalling vowpal wabbit requires Boost.\nIf you are using anaconda, you can run `conda install boost` and `export BOOST_LIBRARYDIR=$CONDA_PREFIX/libs/` before installation.\n\nFor the object detection environments, you additionally need `pycocotools`, which can be installed either via\n\n1) `conda install -c conda-forge pycocotools`\n1) Cloning [the repository](https://github.com/cocodataset/cocoapi/tree/master/PythonAPI) and running `make`.\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "Tetraband - Test Transformation Bandit"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        },
        {
            "result": {
                "value": "The object detection environment is based on the [Tensorflow Object Detection API](https://github.com/tensorflow/models/tree/master/research/object_detection) from [tensorflow/models](https://github.com/tensorflow/models).\n\nThis is already setup, the links below are for reference.\n[Installation guide](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/installation.md)\n\nA good introduction is given in their [tutorial](https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/oid_inference_and_evaluation.md).\n\nIn case of problems, ensure the object detection API is included in `$PYTHONPATH`.\nBut this is mostly handled by having the `object_detection` package copied into this project.\n",
                "type": "Text_excerpt",
                "original_header": "Object Detection API",
                "parent_header": [
                    "Tetraband - Test Transformation Bandit",
                    "Requirements"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Tetraband - Test Transformation Bandit"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1910.00262"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
        }
    ]
}