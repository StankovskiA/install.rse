{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 19:45:33"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/h4iku/T5APR",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "h4iku",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-12-17T11:03:50Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-06-13T02:55:23Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2022 Reza Gharibi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Repository for the paper \"T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble.\"",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "[![arXiv](https://img.shields.io/badge/arXiv-2309.15742-b31b1b)](https://arxiv.org/abs/2309.15742)\r\n[![DOI:10.1016/j.jss.2024.112083](https://img.shields.io/badge/DOI-10.1016/j.jss.2024.112083-0274b4)](https://doi.org/10.1016/j.jss.2024.112083)\r\n[![Hugging Face Collection](https://img.shields.io/badge/\ud83e\udd17_Collection-Data_&_Model-ffd21e)](https://huggingface.co/collections/h4iku/t5apr-6514a09a8f20a8ccf7b07f5d)\r\n\r\n![T5APR overview](T5APR.png)\r\n\r\nT5APR is a novel approach to automated program repair (APR) that leverages a multilingual transformer model based on CodeT5 along with a checkpoint ensemble strategy to generate patches for programs written in Python, Java, C, and JavaScript.\r\n\r \n",
                "original_header": "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble"
            },
            "confidence": 0.9179048876273954,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "T5APR",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "h4iku/T5APR",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/h4iku/T5APR/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/h4iku/T5APR/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 6,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "paper, program-repair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/h4iku/t5apr/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 208662
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "\r\n1. Install Python 3.9 or higher and clone this repository with its submodules:\r\n\r\n    ```bash\r\n    git clone --recurse-submodules https://github.com/h4iku/T5APR.git\r\n    cd T5APR\r\n    ```\r\n\r\n2. Create a virtual environment and install the dependencies:\r\n\r\n    ```bash\r\n    python -m venv .venv\r\n    source .venv/bin/activate\r\n\r\n    python -m pip install -U pip setuptools\r\n    pip install -r requirements.txt\r\n    ```\r\n\r\n3. Prepare evaluation benchmarks and tree-sitter language grammars:\r\n\r\n    Place the evaluation benchmarks in the `benchmarks` directory. Repositories for [QuixBugs](https://github.com/jkoppel/QuixBugs), [Defects4J](https://github.com/rjust/defects4j/), [Bears](https://github.com/bears-bugs/bears-benchmark), and [BugAID](https://dl.acm.org/doi/abs/10.1145/2950290.2950308) are already there. Defects4J needs further steps to install:\r\n\r\n    ```bash\r\n    cd benchmarks/Defects4J\r\n    cpanm --installdeps .\r\n    ./init.sh\r\n    ```\r\n    For further information, follow [Defects4J set up instructions](https://github.com/rjust/defects4j/#setting-up-defects4j).\r\n\r\n    For the [Codeflaws](https://codeflaws.github.io/) benchmark, download [codeflaws.tar.gz](http://www.comp.nus.edu.sg/%7Erelease/codeflaws/codeflaws.tar.gz) archive and extract it in the `benchmarks/Codeflaws` directory. For [ManyBugs](https://repairbenchmarks.cs.umass.edu/) benchmark, the necessary files are in `benchmarks/ManyBugs.7z`, which you can directly extract in the `benchmarks` directory, but you can also download the complete [scenario tarballs](https://repairbenchmarks.cs.umass.edu/ManyBugs/scenarios/) and extract them in the `benchmarks/ManyBugs/scenarios` directory.\r\n    \r\n    Submodules for tree-sitter language grammars are in the `tools/tree-sitter-lib/vendor` directory, and the compiled library will be in the `tools/tree-sitter-lib/build`. If you didn't download the submodules, you can follow the [tree-sitter](https://github.com/tree-sitter/py-tree-sitter) instructions to clone the required language grammars into the same directory.\r\n\r\n4. To run each module, navigate to the root of the repository and execute the following command:\r\n\r\n    ```bash\r\n    python -m package.module\r\n    ```\r\n\r\n    For example, to run the `src/bugline_finders/quixbugs_python.py` module:\r\n\r\n    ```bash\r\n    python -m src.bugline_finders.quixbugs_python\r\n    ```\r\n\r\n    To run tests:\r\n\r\n    ```bash\r\n    python -m pytest tests\r\n    ```\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Set Up",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "\r\nUse the `train_model.py` script to fine-tune the pre-trained model. It downloads necessary model and datasets from \ud83e\udd17 Hugging Face Hub and caches them in the project's `.cache` directory. By default, it uses `codet5-small` as the base model and trains all the languages together in the multitask learning setting. You can fine-tune monolingual models by changing the `model_type: ModelType = ModelType.MULTI` variable.\r\n\r\nAfter fine-tuning, you will have five checkpoints in the `models/codet5-small-t5apr-{multi|java|python|c|javascript}` directory based on the `model_type` you chose. The fine-tuned checkpoints used in the paper's experiments are uploaded on the [\ud83e\udd17 Hub](https://huggingface.co/collections/h4iku/t5apr-6514a09a8f20a8ccf7b07f5d), and you can use `download_checkpoints.py` or `extract_checkpoints.py` scripts to get them. `download_checkpoints.py` is faster and uses the [`huggingface_hub`](https://github.com/huggingface/huggingface_hub) client to directly download checkpoints from \ud83e\udd17 Hub and doesn't need Git LFS installed. `extract_checkpoints.py` needs GIT LFS to work (`git lfs install`). It first clones the model repository and then incrementally extracts checkpoints from its commits. In both scripts, you can change the downloading checkpoints by changing the `repo_name` variable. The default is the multilingual model `codet5-small-t5apr-multi`.\r\n\r\nThe training data is also on the [\ud83e\udd17 Hub](https://huggingface.co/collections/h4iku/t5apr-6514a09a8f20a8ccf7b07f5d), and there are both raw and preprocessed versions. If you want to locally preprocess the data obtained from [CoCoNuT repository](https://github.com/lin-tan/CoCoNut-Artifact/releases/tag/training_data_1.0.0), you can download and follow [their instructions](https://github.com/lin-tan/CoCoNut-Artifact/releases/download/training_data_1.0.0/readme.md) to put them in the `data` directory (The uncompressing process will take some time!) and use `preprocess.py` to preprocess it. The preprocessed data will be in the same directory.\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Model Training",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        },
        {
            "result": {
                "value": "\r\nScripts in the `bugline_finders` directory are used to extract buggy lines and other metadata from bugs in the evaluation benchmark programs by comparing buggy and correct diffs. The outputs will be saved in the `generated_assets` folder under the name of each benchmark.\r\n\r\nTo generate primary candidate patches for the previously extracted buggy lines use `generate_primary_candidates.py`. You can change the `dataset` value to generate candidate patches for different benchmarks. The Boolean variable `multi` decides if you want to generate candidate patches using the multilingual checkpoints or the language-specific monolingual ones. The output will be saved in a file named `sequences_{beam_size}.jsonl` in the `outputs-multi` or `outputs-{language}` directory depending on the model you choose.\r\n\r\nThe `sequences_{beam_size}.jsonl` file has the candidate patches generated from all the checkpoints. You can then use `combine_checkpoints_results.py` to combine checkpoint patches into a single list of candidate patches resulting in the file `final_candidates_{beam_size}.jsonl`.\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Finding Bug Lines &amp; Patch Generation",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        },
        {
            "result": {
                "value": "\r\nTo validate candidate patches for each benchmark, use scripts in the `validators` folder. Change the `output_dir` variable to choose if you want validation to run on candidate patches from the multilingual or monolingual checkpoints. Validation result of each bug is saved in the `save-state` folder under the bugid filename. Execution of these modules are all resumable, and if they get interrupted in the middle of execution, they will continue validating the remaining bugs next time they run. Final aggregate results of plausible patches are saved in `plausible_candidates_{beam_size}.jsonl` file.\r\n\r\nAt this point after validation, you can use `separate_d4j_versions.py` script to generate separate folders for bugs in the v1.2 and v2.0 of Defects4J benchmark.\r\n\r\nYou can rerank patches in final results using the `rerank_patches.py` script where it gives you `reranked_candidates_{beam_size}.jsonl` that you can then use `generate_results.py` to generate plausible results in the `results` directory and start the manual patch assessment process. In the assessment process make sure to change the variable `assessment` to `True`, so it generates results from reranked file. With every change you make to the items in the `results` folder, you can rerun `rerank_patches.py` script to write the assessments back to the `reranked_candidates_{beam_size}.jsonl` file. The `validated_reranked_candidates_100.jsonl` is a copy of `reranked_candidates_100.jsonl` that is updated with our patch assessments and is the file we generated the `results` directory from.\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Patch Validation",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        },
        {
            "result": {
                "value": "\r\nThe location of the directories and paths where files are written or read from are in `configs.py`.\r\n\r\nThe complete content of the `generated_assets` directory for all the benchmarks is available [here](https://mega.nz/file/VE8xgbCL#7A0755iOptQonLbQYwnJ2Tw83XBsHq0UiFiJfT-_EcE).\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Misc",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        },
        {
            "result": {
                "value": "*TBA*\r\n\r\n\r",
                "type": "Text_excerpt",
                "original_header": "Evaluation",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                    "How to Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "\r\nIf you use T5APR in your research, please cite the following paper:\r\n\r\n```bibtex\r\n@article{gharibiT5APREmpoweringAutomated2024,\r\n  title = {T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble},\r\n  shorttitle = {T5APR},\r\n  author = {Gharibi, Reza and Sadreddini, Mohammad Hadi and Fakhrahmad, Seyed Mostafa},\r\n  year = {2024},\r\n  journal = {Journal of Systems and Software},\r\n  volume = {214},\r\n  pages = {112083},\r\n  doi = {10.1016/j.jss.2024.112083},\r\n}\r\n```",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        },
        {
            "result": {
                "value": "@article{gharibiT5APREmpoweringAutomated2024,\n    doi = {10.1016/j.jss.2024.112083},\n    pages = {112083},\n    volume = {214},\n    journal = {Journal of Systems and Software},\n    year = {2024},\n    author = {Gharibi, Reza and Sadreddini, Mohammad Hadi and Fakhrahmad, Seyed Mostafa},\n    shorttitle = {T5APR},\n    title = {T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1016/j.jss.2024.112083",
                "title": "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                "author": "Gharibi, Reza and Sadreddini, Mohammad Hadi and Fakhrahmad, Seyed Mostafa"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/h4iku/t5apr/main/T5APR.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2309.15742"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
        }
    ]
}