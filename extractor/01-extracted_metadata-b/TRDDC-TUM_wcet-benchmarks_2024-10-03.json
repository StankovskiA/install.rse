{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:02:06"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/TRDDC-TUM/wcet-benchmarks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "TRDDC-TUM",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2016-04-11T14:49:03Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-04T01:20:11Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "The MIT License (MIT)\n\nCopyright (c) 2016 TRDDC-TUM\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Modified M\u00e4lardalen WCET benchmarks, annoted with instruction timing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "wcet-benchmarks",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "TRDDC-TUM/wcet-benchmarks",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/TRDDC-TUM/wcet-benchmarks/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/TRDDC-TUM/wcet-benchmarks/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 7,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/TRDDC-TUM/wcet-benchmarks/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Assembly",
                "name": "Assembly",
                "type": "Programming_language",
                "size": 9323361
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 1563980
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 231587
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 170775
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 115791
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 26102
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/.run-blacklist.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/runSomeCbmcParallel.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/runAllCbmcParallel.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/runAllCbmc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/runSomeCbmc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/runAllBoundT.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/jfdctint/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/jfdctint/simulate-single-input/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/nsichneu/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/fir/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/fir/simulate-random-inputs/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/fir/simulate-single-input/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/ns/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/ns/simulate-single-input/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/PapaBench-0.2m/wcet-cbmc/finder-abs/cbmc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/crc/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/adpcm-encode/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/fdct/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/ndes/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/insertsort/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/ud/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/cnt/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/bs/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/fibcall/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/adpcm-decode/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/bsort100/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/matmult/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/benchmarks/prime/avr-mem.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Let us take the example of matmult. This is how you can apply the Model Checker cbmc to our time-annotated sources to estimate the WCET value:\n 1. cd benchmarks/matmult/wcet-cbmc/finder-i\n 2. the time-annotated source is matmult_i.in. This file has a marker ###WCET_TEST### in it, which is iteratively replaced by the script find_wcet2.py to search for the WCET.\n 3. Because the results are already computed (and we use Makefiles), you have to delete them to re-perform the analysis. Towards that: rm wcet.log\n 4. make sure the folder \"modelcheck\" exists\n 5. Now we are ready to run the analysis: make wcet\n 6. The file wcet.log is produced, showing the iterations of the Model Checker, and the intermediate and final results. The final and most precise WCET value should be 1,010,394 cycles.\n\nYou can reduce the precision (=speed up the search time) to, e.g., 1,000 cycles, by modifying the variable WCET_PREC in the Makefile. A precision of 1,000 means, that the estimate will be at most 1,000 larger then the most precise estimate. Note that the result is still safe, but just not tight.\nBy default cbmc uses the minisat (SAT solver) backend. You can switch to the mathsat (SMT solver) backend by setting the environment variable CBMCFLAGS as CBMCFLAGS=\"--mathsat\", see also runAllCbmc.sh.\n",
                "type": "Text_excerpt",
                "original_header": "How To: Run a WCET analysis with the Model Checker cbmc",
                "parent_header": [
                    "WCET Benchmarks for Atmel AVR"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": " - a subset of the M\u00e4lardalen WCET benchmarks, where the sources are annotated with instruction timing for Atmel Atmega microcontrollers\n - WCET estimate from the WCET analyzer Bound-T v4.5 (http://www.bound-t.com/)\n - WCET estimate from Model Checker CBMC v5.6 (http://www.cprover.org/cbmc/)\n - Timing of cycle-accurate simulation runs (http://www.nongnu.org/simulavr/) as a lower bound for WCET, i.e., to sanity-check the estimates\n \n",
                "original_header": "What you can find here"
            },
            "confidence": 0.9817997297042519,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": " - runAllBoundT.sh: run Bound-T for all benchmarks\n - runAllCbmcParallel.sh: run cbmc in parallel for all benchmarks (processing time may be skewed)\n - runAllCbmc.sh: run cbmc sequentially for all benchmarks\n - runSomeCbmcParallel.sh: run cbmc only on some benchmarks, but in parallel (processing time may be skewed)\n - runSomeCbmc.sh: run cbmc sequentially and only on some benchmarks\n - .run-blacklist.sh: this file defines what shall not be run (e.g., you may want to exclude long-running benchmarks)\n - getResultsCbmc.py: create benchmarks/finder.log. Is called automatically in the end of the run scripts.\n \n",
                "original_header": "Included Scripts"
            },
            "confidence": 0.9999988078749027,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "WCET Benchmarks for Atmel AVR"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TRDDC-TUM/wcet-benchmarks/master/README.md"
        }
    ]
}