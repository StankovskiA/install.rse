{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:18:28"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/NTDXYG/ComFormer",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "NTDXYG",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-07-09T02:28:15Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-04-18T10:55:47Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "code and data for paper \"ComFormer: Code Comment Generation via Transformer and Fusion Method-based Hybrid Code Representation\" accepted in DSA2021",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "For model inputs, **please ensure that the format is [ codeseq  \u2295 \\ \u2295 sbt ]**. For Java, we implement it in utils.transformer. \n"
            },
            "confidence": 0.9137696999419513,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "ComFormer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "NTDXYG/ComFormer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/NTDXYG/ComFormer/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/NTDXYG/ComFormer/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 14,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 3,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/NTDXYG/ComFormer/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 54586
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "```PYTHON\nfrom transformers import BartForConditionalGeneration, BartTokenizer\n\nmodel = BartForConditionalGeneration.from_pretrained(\"NTUYG/ComFormer\")\ntokenizer = BartTokenizer.from_pretrained(\"NTUYG/ComFormer\")\n\ncode = '''    \npublic static void copyFile( File in, File out )  \n            throws IOException  \n    {  \n        FileChannel inChannel = new FileInputStream( in ).getChannel();  \n        FileChannel outChannel = new FileOutputStream( out ).getChannel();  \n        try\n        {  \n//          inChannel.transferTo(0, inChannel.size(), outChannel);      // original -- apparently has trouble copying large files on Windows  \n \n            // magic number for Windows, 64Mb - 32Kb)  \n            int maxCount = (64 * 1024 * 1024) - (32 * 1024);  \n            long size = inChannel.size();  \n            long position = 0;  \n            while ( position < size )  \n            {  \n               position += inChannel.transferTo( position, maxCount, outChannel );  \n            }  \n        }  \n        finally\n        {  \n            if ( inChannel != null )  \n            {  \n               inChannel.close();  \n            }  \n            if ( outChannel != null )  \n            {  \n                outChannel.close();  \n            }  \n        }  \n    }\n    '''\ncode_seq, sbt = utils.transformer(code) #can find in https://github.com/NTDXYG/ComFormer\ninput_text = ' '.join(code_seq.split()[:256]) + ' '.join(sbt.split()[:256])\ninput_ids = tokenizer.encode(input_text, return_tensors=\"pt\", max_length=512, truncation=True)\nsummary_text_ids = model.generate(\n    input_ids=input_ids,\n    bos_token_id=model.config.bos_token_id,\n    eos_token_id=model.config.eos_token_id,\n    length_penalty=2.0,\n    max_length=30,\n    min_length=2,\n    num_beams=5,\n)\ncomment = tokenizer.decode(summary_text_ids[0], skip_special_tokens=True)\nprint(comment)\n```\n",
                "type": "Text_excerpt",
                "original_header": "How To Use"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "```\n@misc{yang2021comformer,\n      title={ComFormer: Code Comment Generation via Transformer and Fusion Method-based Hybrid Code Representation}, \n      author={Guang Yang and Xiang Chen and Jinxin Cao and Shuyuan Xu and Zhanqi Cui and Chi Yu and Ke Liu},\n      year={2021},\n      eprint={2107.03644},\n      archivePrefix={arXiv},\n      primaryClass={cs.SE}\n}\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "BibTeX entry and citation info"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        },
        {
            "result": {
                "value": "@misc{yang2021comformer,\n    primaryclass = {cs.SE},\n    archiveprefix = {arXiv},\n    eprint = {2107.03644},\n    year = {2021},\n    author = {Guang Yang and Xiang Chen and Jinxin Cao and Shuyuan Xu and Zhanqi Cui and Chi Yu and Ke Liu},\n    title = {ComFormer: Code Comment Generation via Transformer and Fusion Method-based Hybrid Code Representation},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "ComFormer: Code Comment Generation via Transformer and Fusion Method-based Hybrid Code Representation",
                "author": "Guang Yang and Xiang Chen and Jinxin Cao and Shuyuan Xu and Zhanqi Cui and Chi Yu and Ke Liu"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "First you need train the tokenize:\n```\npython train_tokenizer.py\n```\n \nwhere you also need modify the dataset path, vocab_size and others, then the 'vocab.json' and 'merges.txt' will be saved in 'tokenize' folder. \nNext you can train, but also need modify the parameters in the 'train.py', such as your own train.csv, valid.csv and test.csv. If you train from scratch, make sure pretrained_model = None.\n```\nmodel = BartModel(pretrained_model=None,args=model_args, model_config='config.json', vocab_file=\"./tokenize\")\n```\n \nFinally run \n```\npython train.py\n```\n \n",
                "original_header": "How To Train-From-Scratch"
            },
            "confidence": 0.9762629860814145,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This repo uses , , , , and . If the nlg-eval library installation encounters a dependency conflict, you can modify its project and then run setup.py. \n"
            },
            "confidence": 0.9999980441707036,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "First you need train the tokenize:\n```\npython train_tokenizer.py\n```\n \nNext you can train, but also need modify the parameters in the 'train.py', such as your own train.csv, valid.csv and test.csv. If you train from scratch, make sure pretrained_model = None.\n```\nmodel = BartModel(pretrained_model=None,args=model_args, model_config='config.json', vocab_file=\"./tokenize\")\n```\n \nFinally run \n```\npython train.py\n```\n \n",
                "original_header": "How To Train-From-Scratch"
            },
            "confidence": 0.9287731939530244,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you want to fine-tune the model we pretrained in Java, please make sure:\n```\nmodel = BartModel(pretrained_model='NTUYG/ComFormer',args=model_args)\n```\nThen run \n```\npython train.py\n```\n \n",
                "original_header": "How To Fine-Tune"
            },
            "confidence": 0.9111289738954044,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "How To Train-From-Scratch"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NTDXYG/ComFormer/master/README.md"
        }
    ]
}