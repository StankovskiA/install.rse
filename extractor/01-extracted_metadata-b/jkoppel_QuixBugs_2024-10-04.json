{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 01:06:28"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/jkoppel/QuixBugs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "jkoppel",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2017-07-16T02:10:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-28T04:04:02Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Copyright 2017-2019 James Koppel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A multi-lingual program repair benchmark set based on the Quixey Challenge",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "QuixBugs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "jkoppel/QuixBugs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/jkoppel/QuixBugs/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/jkoppel/QuixBugs/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 97,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 39,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/jkoppel/QuixBugs/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 392435
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 117257
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Simply clone the repo. \n\n    git clone https://github.com/jkoppel/QuixBugs\n    \nThe Java programs are already compiled (see `*.class` files in `java_programs`). Note the all java programs are in the same package called `java_programs`. The utility class `JavaDeserialization.java` requires you to download the external library Gson.\n\nAll Python is written in Python3.\n\nTo run both defective versions of a program against their tests, as well as the corrected Python version, use the test driver:\n\n> python3 tester.py _program\\_name_\n\nOutput is printed for visual comparison.\n",
                "type": "Text_excerpt",
                "original_header": "Installation &amp; Usage"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        },
        {
            "result": {
                "value": "There are JUnit tests in the `java_testcases/junit` folder for the Java version. Running `TestsGenerator.java` can regenerate them if needed.\n\nTo run these tests, you can use [Gradle](https://gradle.org/) tasks provided by the `build.gradle` file. First, install Gradle. Then,\n\n- `gradle test` can be used to run tests on the buggy programs (Runs JUnit tests from the `java_testcases/junit` folder);\n- `gradle crtTest` can be used to run tests on the correct programs (Runs JUnit tests from the `java_testcases/junit/crt_program` folder).\n\nIt is also possible to run tests for a single program with the `--tests` option:\n\n```bash\n$ gradle test --tests KNAPSACK_TEST\n\n> Task :test\n\njava_testcases.junit.KNAPSACK_TEST > test_1 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:14\n\njava_testcases.junit.KNAPSACK_TEST > test_3 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:26\n\njava_testcases.junit.KNAPSACK_TEST > test_4 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:32\n\njava_testcases.junit.KNAPSACK_TEST > test_5 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:38\n\njava_testcases.junit.KNAPSACK_TEST > test_6 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:44\n\njava_testcases.junit.KNAPSACK_TEST > test_7 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:50\n\n10 tests completed, 6 failed\n```\n\n```bash\n$ gradle crtTest --tests KNAPSACK_TEST\n\nBUILD SUCCESSFUL in 4s\n```\n",
                "type": "Text_excerpt",
                "original_header": "Using JUnit tests",
                "parent_header": [
                    "Installation &amp; Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        },
        {
            "result": {
                "value": "For the Python version, there are [pytest](https://pytest.org/) tests for each program in the `python_testcases` folder. To run them, install pytest using `pip` and then, from the root of the repository, call `pytest` to run tests for a single program or target the whole directory to run every test inside it.\n\n```bash\npip install pytest\npytest python_testcases/test_quicksort.py\n# Or\npytest python_testcases\n```\n\nTests work for both buggy and correct versions of programs. The default test calls the buggy version, but there is a custom `--correct` flag that uses the correct version of a program.\n\n```bash\npytest --correct python_testcases\n```\n\nMost of the tests run fast and finish in less than a second, but two tests are slow. The first one is the last test case of the `knapsack` program, and the second one is the fourth test case of the `levenshtein` program. The default behavior skips both these tests. For the `knapsack` test case, using the `--runslow` pytest option will include it in the running tests. However, the `levenshtein` test case is always skipped since it takes a long time to pass and is ignored by the JUnit tests as well.\n\n```bash\n$ pytest --correct --runslow python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 10 passed in 240.97s (0:04:00) ========== \n```\n\n```bash\n$ pytest --correct python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 9 passed, 1 skipped in 0.08s ========== \n```\n\nSome tests, such as the `bitcount` ones, need a timeout. pytest itself doesn't have a timeout mechanism, but there is a [pytest-timeout](https://github.com/pytest-dev/pytest-timeout) plugin for it. Installing pytest-timeout adds additional options to the `pytest` CLI so, for example, to timeout `bitcount` tests after five seconds, you can do like this:\n\n```bash\npip install pytest-timeout\npytest --timeout=5 python_testcases/test_bitcount.py\n```\nMake sure to check pytest-timeout's documentation to understand its caveats and how it handles timeouts on different systems.\n\nThere is also a [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) plugin that runs tests in parallel and can be used similarly to the timeout plugin.\n",
                "type": "Text_excerpt",
                "original_header": "Using pytest tests",
                "parent_header": [
                    "Installation &amp; Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Simply clone the repo. \n\n    git clone https://github.com/jkoppel/QuixBugs\n    \nThe Java programs are already compiled (see `*.class` files in `java_programs`). Note the all java programs are in the same package called `java_programs`. The utility class `JavaDeserialization.java` requires you to download the external library Gson.\n\nAll Python is written in Python3.\n\nTo run both defective versions of a program against their tests, as well as the corrected Python version, use the test driver:\n\n> python3 tester.py _program\\_name_\n\nOutput is printed for visual comparison.\n",
                "type": "Text_excerpt",
                "original_header": "Installation &amp; Usage"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        },
        {
            "result": {
                "value": "There are JUnit tests in the `java_testcases/junit` folder for the Java version. Running `TestsGenerator.java` can regenerate them if needed.\n\nTo run these tests, you can use [Gradle](https://gradle.org/) tasks provided by the `build.gradle` file. First, install Gradle. Then,\n\n- `gradle test` can be used to run tests on the buggy programs (Runs JUnit tests from the `java_testcases/junit` folder);\n- `gradle crtTest` can be used to run tests on the correct programs (Runs JUnit tests from the `java_testcases/junit/crt_program` folder).\n\nIt is also possible to run tests for a single program with the `--tests` option:\n\n```bash\n$ gradle test --tests KNAPSACK_TEST\n\n> Task :test\n\njava_testcases.junit.KNAPSACK_TEST > test_1 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:14\n\njava_testcases.junit.KNAPSACK_TEST > test_3 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:26\n\njava_testcases.junit.KNAPSACK_TEST > test_4 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:32\n\njava_testcases.junit.KNAPSACK_TEST > test_5 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:38\n\njava_testcases.junit.KNAPSACK_TEST > test_6 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:44\n\njava_testcases.junit.KNAPSACK_TEST > test_7 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:50\n\n10 tests completed, 6 failed\n```\n\n```bash\n$ gradle crtTest --tests KNAPSACK_TEST\n\nBUILD SUCCESSFUL in 4s\n```\n",
                "type": "Text_excerpt",
                "original_header": "Using JUnit tests",
                "parent_header": [
                    "Installation &amp; Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        },
        {
            "result": {
                "value": "For the Python version, there are [pytest](https://pytest.org/) tests for each program in the `python_testcases` folder. To run them, install pytest using `pip` and then, from the root of the repository, call `pytest` to run tests for a single program or target the whole directory to run every test inside it.\n\n```bash\npip install pytest\npytest python_testcases/test_quicksort.py\n# Or\npytest python_testcases\n```\n\nTests work for both buggy and correct versions of programs. The default test calls the buggy version, but there is a custom `--correct` flag that uses the correct version of a program.\n\n```bash\npytest --correct python_testcases\n```\n\nMost of the tests run fast and finish in less than a second, but two tests are slow. The first one is the last test case of the `knapsack` program, and the second one is the fourth test case of the `levenshtein` program. The default behavior skips both these tests. For the `knapsack` test case, using the `--runslow` pytest option will include it in the running tests. However, the `levenshtein` test case is always skipped since it takes a long time to pass and is ignored by the JUnit tests as well.\n\n```bash\n$ pytest --correct --runslow python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 10 passed in 240.97s (0:04:00) ========== \n```\n\n```bash\n$ pytest --correct python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 9 passed, 1 skipped in 0.08s ========== \n```\n\nSome tests, such as the `bitcount` ones, need a timeout. pytest itself doesn't have a timeout mechanism, but there is a [pytest-timeout](https://github.com/pytest-dev/pytest-timeout) plugin for it. Installing pytest-timeout adds additional options to the `pytest` CLI so, for example, to timeout `bitcount` tests after five seconds, you can do like this:\n\n```bash\npip install pytest-timeout\npytest --timeout=5 python_testcases/test_bitcount.py\n```\nMake sure to check pytest-timeout's documentation to understand its caveats and how it handles timeouts on different systems.\n\nThere is also a [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) plugin that runs tests in parallel and can be used similarly to the timeout plugin.\n",
                "type": "Text_excerpt",
                "original_header": "Using pytest tests",
                "parent_header": [
                    "Installation &amp; Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "QuixBugs Benchmark "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
        }
    ]
}