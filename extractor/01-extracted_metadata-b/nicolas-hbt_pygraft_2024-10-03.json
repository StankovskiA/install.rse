{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:50:18"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/nicolas-hbt/pygraft",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "nicolas-hbt",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-09-07T04:28:45Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-03T04:47:14Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This is the open-source implementation of PyGraft, initially presented in [this paper](https://arxiv.org/pdf/2309.03685.pdf). \nPyGraft is an open-source Python library for generating synthetic yet realistic schemas and (KGs) based on user-specified parameters. The generated resources are domain-agnostic, i.e. they are not tied to a specific application field. \nBeing able to synthesize schemas and KGs is an important milestone for conducting research in domains where data is sensitive or not readily available. PyGraft allows researchers and practitioners to generate schemas and KGs on the fly, provided minimal knowledge about the desired specifications.  \nPyGraft has the following features:\n- possibility to generate a schema, a KG, or both\n- highly-tunable process based on a broad array of user-specified parameters\n- schemas and KGs are built with an extended set of RDFS and OWL constructs\n- logical consistency is ensured by the use of a DL reasoner (HermiT)\n \n",
                "original_header": "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
            },
            "confidence": 0.9623500758485346,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- [ ] Allow support for any input schema (and not only the schemas generated by PyGraft).\n- [ ] Allow explanations for inconsistencies to be parsed from HermiT API. This would make it possible to remove a subset of triples from inconsistent KGs to make them consistent, without needing the user to run the KG generation pipeline again. This is especially true for very large graphs, or if the user comes with an already existing schema which is not perfectly consistent. \n",
                "original_header": "Upcoming Features"
            },
            "confidence": 0.9842859455369231,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- The generated schemas and KGs are described with an extended set of RDFS and OWL constructs, allowing for both fine-grained resource descriptions and strict compliance with common Semantic Web standards. \n- A broad range of parameters can be specified by the user. These allow for creating an infinite number of graphs with different characteristics. More details on parameters can be found in the [Parameters section of the official documentation](https://pygraft.readthedocs.io/en/latest/references/parameters.html). \nFrom a high-level perspective, the entire PyGraft generation pipeline is depicted in Figure 1. In particular, Class and Relation Generators are initialized with user-specified parameters and used to build the schema incrementally. The logical consistency of the schema is subsequently checked using the HermiT reasoner from [owlready2](https://github.com/pwin/owlready2/). If you are also interested in generating a KG based on this schema, the KG Generator is initialized with KG-related parameters and fused with the previously generated schema to sequentially build the KG. Ultimately, the logical consistency of the resulting KG is (again) assessed using HermiT. \n",
                "original_header": "PyGraft Overview"
            },
            "confidence": 0.957987768520145,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "pygraft",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "nicolas-hbt/pygraft",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/nicolas-hbt/pygraft/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/nicolas-hbt/pygraft/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 666,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "artificial-intelligence, benchmarking, contributions-welcome, data-generator, graph-generator, knowledge-base, knowledge-graph, linked-data, machine-learning, ontology, ontology-generation, owl, python, rdf, rdfs, schema, semantic-web, semantics, synthetic-data, synthetic-dataset-generation",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 45,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/nicolas-hbt/pygraft/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 129907
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "## How to Contribute\nWe welcome community contributions, whether they are documentations, refactoring, tests, or new features.\n\nYou can contribute to PyGraft in the following ways:\n\n- File a [bug report](https://github.com/nicolas-hbt/pygraft/issues/new?assignees=&labels=&template=bug_report.md&title=)\n\n- File a [feature request](https://github.com/nicolas-hbt/pygraft/issues/new?assignees=&labels=&projects=&template=feature_request.md&title=)\n\n- Help other users by commenting on [pending issues](https://github.com/nicolas-hbt/pygraft/issues)\n\n- Help implementing unit tests\n\n- Help refactoring code and ensuring best practices are respected\n\n- Generate clean docstrings for the existing code base\n\n- Implement a new feature (see [Desirable Features](#desirable-features))\n\n\n> [!IMPORTANT] \n> PyGraft is a nascent project. It still lacks unit tests and a clear choice of code formatting and documentation standards. We plan on using [black](https://github.com/psf/black) as code formatter and the [Google Python guidelines](https://github.com/google/styleguide/blob/gh-pages/pyguide.md) for the documentation. We welwome any open discussion on this topic. Later on, this section will be modified to reflect our strict commitment to our chosen code formatting and documentation standards.\n\n\n<a name=\"desirable-features\"></a>\n\n## Desirable Features\n\nAdditional features will be provided in the next versions of PyGraft. You want to contribute but do not know how? Here are a few desirable features to implement to get you up and running:\n\n**High Priority**\n\n- [ ] Allow support for any input schema (and not only the schemas generated by PyGraft).\n- [ ] Allow explanations for inconsistencies to be parsed from HermiT API. This would make it possible to remove a subset of triples from inconsistent KGs to make them consistent, without needing the user to run the KG generation pipeline again. This is especially true for very large graphs, or if the user comes with an already existing schema which is not perfectly consistent.\n\n**Medium Priority**\n\n- [ ] Fix the conflict between the following properties ``rdfs:subPropertyOf``, ``owl:FunctionalProperty``, and ``owl:InverseFunctionalProperty``, as a non-zero value for the three of them at the same time can lead to inconsistent KGs.\n\n**Low Priority**\n\n- [ ] Facilitate the generation of larger KGs (this would imply removing any dependency to [rdflib](https://github.com/RDFLib/rdflib/)).\n- [ ] Add support for literals.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/CONTRIBUTING.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "The latest stable version of PyGraft can be downloaded and installed from [PyPI](https://pypi.org/project/pygraft) with:\n\n```bash\npip install pygraft\n```\n\nThe latest version of PyGraft can be installed directly from [GitHub](https://github.com/nicolas-hbt/pygraft) source with:\n\n```bash\npip install git+https://github.com/nicolas-hbt/pygraft.git\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Once installed, PyGraft can be loaded with:\n\n```python\nimport pygraft\n```\n\nImportantly, you can access all the functions with:\n\n```python\npygraft.__all__\n```\n",
                "type": "Text_excerpt",
                "original_header": "Usage -- PyGraft as a package",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "value": "Let us assume we are only interested in generating a schema. We first need to retrieve the template configuration file (e.g. a ``.yaml`` configuration file), which is as simple as calling ``create_yaml_template()``:\n\n```python\npygraft.create_yaml_template()\n```\n\nNow, the template has been generated under the current working directory, and is named ``template.yml`` by default.\n\nThis file contains all the tunable parameters. For more details on their meanings, please check the [Parameters section](https://pygraft.readthedocs.io/en/latest/references/parameters.html).\n\nFor the sake of simplicity, we do not plan to modify this template and stick with the default parameter values.\n\nGenerating an ontology is made possible via the ``generate_schema(path)`` function, which only requires the relative path to the configuration file.\n\n> [!IMPORTANT] \n> For the following steps, i.e. generating a schema and a KG, you need Java to be installed and the $JAVA_HOME environment variable to be properly assigned. This is because the HermiT reasoner currently runs using Java.\n\nIn our case, the configuration file is named ``template.yml`` and is located in the current working directory, thereby:\n\n```python\npygraft.generate_schema(\"template.yml\")\n```\n\nThe generated schema can be retrieved in ``output/template/schema.rdf``. Additional files are created during the process: ``output/template/class_info.json`` and ``output/template/relation_info.json``. These files give important information about the classes and relations of the generated schema, respectively.\n",
                "type": "Text_excerpt",
                "original_header": "Generating a Schema",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>",
                    "Usage -- PyGraft as a package"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "value": "Let us now explore how to use PyGraft to generate a KG. In this section, we assume we already have a schema, that will serve as a blueprint for generating our KG. We can use the same configuration file as before \u2013 as it also contained parameters related to the KG generation (although not used before, since we only asked for a schema) \u2013 to generate a KG:\n\n```python\npygraft.generate_kg(\"template.yml\")\n```\n\nThe generated KG can be retrieved in ``output/template/full_graph.rdf``. It combines information inherited from ``output/template/schema.rdf`` (i.e. ontological information) with information related to individuals.\n",
                "type": "Text_excerpt",
                "original_header": "Generating a KG",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>",
                    "Usage -- PyGraft as a package"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "value": "In most cases, one wants to generate both a schema and a KG in a single process. PyGraft allows this with the ``generate(path)`` function, which operates just as the aforedescribed two functions ``generate_schema(path)`` and ``generate_kg(path)``:\n\n```python\npygraft.generate(\"template.yml\")\n```\n",
                "type": "Text_excerpt",
                "original_header": "Full Pipeline Execution",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>",
                    "Usage -- PyGraft as a package"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        },
        {
            "result": {
                "value": "Assuming you have cloned the PyGraft repository to your computer:\n\n1. Install dependencies:\n  ```shell\n  pip install pygraft\n  ```\n2. Call the PyGraft entry point, from the project's root folder:\n  ```shell\n  # Displaying help\n  python -m pygraft.main --help\n  ```\n  ```shell\n  # Generating a schema from a local template file\n  python -m pygraft.main -g generate_schema -conf template.yml\n\n  # ...  then browse the resulting schema in the ./output/template folder.\n  ```\n",
                "type": "Text_excerpt",
                "original_header": "Usage -- PyGraft from the CLI",
                "parent_header": [
                    "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9022391709216944,
            "technique": "supervised_classification"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@misc{hubert2023pygraft,\n    primaryclass = {cs.AI},\n    archiveprefix = {arXiv},\n    eprint = {2309.03685},\n    year = {2023},\n    author = {Nicolas Hubert and Pierre Monnin and Mathieu d'Aquin and Armelle Brun and Davy Monticolo},\n    title = {PyGraft: Configurable Generation of Schemas and Knowledge Graphs at Your Fingertips},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "PyGraft: Configurable Generation of Schemas and Knowledge Graphs at Your Fingertips",
                "author": "Nicolas Hubert and Pierre Monnin and Mathieu d'Aquin and Armelle Brun and Davy Monticolo"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://pygraft.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "logo": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/docs/source/logo.svg"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/docs/source/img/pygraft-overview.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2309.03685.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
        }
    ]
}