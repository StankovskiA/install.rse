{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 18:58:04"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/EngineeringSoftware/jattack",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "EngineeringSoftware",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-09-25T18:26:50Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-04T18:47:05Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Compiler Testing using Template Java Programs",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you find JIT bugs using JAttack, we would be happy to add your\nfindings to this list. Please open a PR with a link to your bug. \n",
                "original_header": "Hall of Fame"
            },
            "confidence": 0.9603207080485282,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "jattack",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "EngineeringSoftware/jattack",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/EngineeringSoftware/jattack/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/EngineeringSoftware/jattack/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 26,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "compiler, java, jit-compiler, jvm, template, testing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 6,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/EngineeringSoftware/jattack/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 682846
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 14481
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1848
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/demo.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/tool/install.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "This demo reproduces a bug of OpenJDK jdk-11.0.8+10 C2 JIT compiler\nusing template `T.java`.\n\n1. Developers write a template program using JAttack's DSL fully\n   embedded in Java, for example, `T.java`.\n\n```java\nimport jattack.annotation.Entry;\nimport static jattack.Boom.*;\n\npublic class T {\n\n    static int s1;\n    static int s2;\n\n    @Entry\n    public static int m() {\n        int[] arr = { s1++, s2, 1, 2, intVal().eval() };\n        for (int i = 0; i < arr.length; ++i) {\n            if (intIdOrIntArrAccessExp().eval() <= s2\n                    || relation(intId(\"s2\"), intIdOrIntArrAccessExp(), LE).eval()) {\n                arr[i] &= arithmetic(intId(), intArrAccessExp(), ADD, MUL).eval();\n            }\n        }\n        return s1 + s2;\n    }\n}\n```\n\n2. JAttack executes the given template to generate concrete Java\n   programs. For example, one generated program from the\n   template `T.java` can be `TGen1.java`.\n\n```java\nimport jattack.annotation.Entry;\nimport static jattack.Boom.*;\nimport org.csutil.checksum.WrappedChecksum;\n\npublic class TGen1 {\n\n    static int s1;\n    static int s2;\n\n    public static int m() {\n        int[] arr = { s1++, s2, 1, 2, -1170105035 };\n        for (int i = 0; i < arr.length; ++i) {\n            if (i <= s2 || (s2 <= arr[2])) {\n                arr[i] &= (s2 + arr[0]);\n            }\n        }\n        return s1 + s2;\n    }\n\n    public static long main0(String[] args) {\n        int N = 100000;\n        if (args.length > 0) {\n            N = Math.min(Integer.parseInt(args[0]), N);\n        }\n        WrappedChecksum cs = new WrappedChecksum();\n        for (int i = 0; i < N; ++i) {\n            try {\n                cs.update(m());\n            } catch (Throwable e) {\n                if (e instanceof jattack.exception.InvokedFromNotDriverException) {\n                    throw e;\n                }\n                cs.update(e.getClass().getName());\n            }\n        }\n        cs.updateStaticFieldsOfClass(TGen1.class);\n        return cs.getValue();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(main0(args));\n    }\n}\n```\n\n3. JAttack runs every generated program across Java JIT compilers\n   under test. For example, running the generated program `TGen1.java`\n   crashes C2 in openjdk-11.0.8.\n\n```\n#\n# A fatal error has been detected by the Java Runtime Environment:\n#\n#  SIGSEGV (0xb) at pc=0x00007f55deedd845, pid=432431, tid=432442\n#\n# JRE version: OpenJDK Runtime Environment AdoptOpenJDK (11.0.8+10) (build 11.0.8+10)\n# Java VM: OpenJDK 64-Bit Server VM AdoptOpenJDK (11.0.8+10, mixed mode, tiered, compressed oops, g1 gc, linux-amd64)\n# Problematic frame:\n# V  [libjvm.so+0xd60845]  ok_to_convert(Node*, Node*)+0x15\n#\n# Core dump will be written. Default location: Core dumps may be processed with \"/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E\" (or dumping to /home/zzq/projects/jattack/core.432431)\n#\n# If you would like to submit a bug report, please visit:\n#   https://github.com/AdoptOpenJDK/openjdk-support/issues\n#\n```\n\nTo run the demo, please run `./demo.sh`. Sample output:\n```\nDownload JDK...\nBuild JAttack jar...\nInstall python packages...\n1..3\n[10:28:28E]su.__main__: bash: line 1: 2414756 Aborted                 (core dumped) /home/zzq/projects/jattack/.downloads/jdk-11.0.8+10/bin/java -cp /home/zzq/projects/jattack/tool/jattack-all.jar:/home/zzq/projects/jattack/.jattack/T/build -XX:TieredStopAtLevel=4 -XX:ErrorFile=/home/zzq/projects/jattack/.jattack/T/output/TGen1/he_err_pid%p.log -XX:ReplayDataFile=/home/zzq/projects/jattack/.jattack/T/output/TGen1/replay_pid%p.log TGen1 > /home/zzq/projects/jattack/.jattack/T/output/TGen1/java_env0.txt 2> /dev/null\n\nnot ok 1 - TGen1\n  ---\n  message: 'Found a potential crash bug'\n  data: CrashBugData(type=<BugType.CRASH: 'crash'>, crashed_java_envs=[JavaEnv(java_home=PosixPath('/home/zzq/projects/jattack/.downloads/jdk-11.0.8+10'), java_opts=['-XX:TieredStopAtLevel=4'])])\n  ...\nok 2 - TGen2\nok 3 - TGen3\n```\n",
                "type": "Text_excerpt",
                "original_header": "Demo",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "```bash\ncd tool\n./jattack --clz TEMPLATE_CLASS_NAME --n_gen NUM_OF_GENERATED_PROGRAMS \\\n    [--java_envs JAVA_ENVIRONMENTS_UNDER_TEST]\n    [--src TEMPLATE_SOURCE_PATH]\n    [--n_itrs NUM_OF_ITERATIONS_TO_TRIGGER_JIT]\n    [--seed RANDOM_SEED]\n```\n",
                "type": "Text_excerpt",
                "original_header": "Use",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "- Provide only two required arguments `--clz` and `--n_gen`.\n\n  ```bash\n  ./tool/jattack --clz T --n_gen 3\n  ```\n\n  This command generates 3 programs from template `T.java` and uses\n  the 3 generated programs to test default java environments found in\n  `$JAVA_HOME` at level 4 and level 1, which are:\n  - `$JAVA_HOME/bin/java -XX:TieredStopAtLevel=4`\n  - `$JAVA_HOME/bin/java -XX:TieredStopAtLevel=1`\n\n- Specify java environments and associated java options to be tested\n  using `--java_envs`.\n\n  ```bash\n  ./tool/jattack --clz T --n_gen 3 \\\n      --java_envs \"[\\\n          [/home/zzq/opt/jdk-11.0.15,[-Xbatch,-Xcomp,-XX:-TieredCompilation]],\\\n          [/home/zzq/opt/jdk-17.0.3,[-Xbatch,-Xcomp,-XX:TieredStopAtLevel=1]],\\\n          [/home/zzq/opt/jdk-17.0.3,[]]]\"\n  ```\n\n  The `java_envs` argument is a list, which can also be appended using\n  `--java_envs+=`, for example, the command above can be rewritten as:\n  ```bash\n  ./tool/jattack --clz T --n_gen 3 \\\n      --java_envs [[/home/zzq/opt/jdk-11.0.15,[-Xbatch,-Xcomp,-XX:-TieredCompilation]]] \\\n      --java_envs+=[[/home/zzq/opt/jdk-17.0.3,[-Xbatch,-Xcomp,-XX:TieredStopAtLevel=1]]] \\\n      --java_envs+=[[/home/zzq/opt/jdk-17.0.3,[]]]\n  ```\n\n  The `java_envs` argument can also be given using a config file, i.e.,\n  ```bash\n  ./tool/jattack --config config.yaml --clz T --n_gen 3\n  ```\n  where `config.yaml` is:\n  ```yaml\n  # config.yaml\n  java_envs:\n    -\n      - /home/zzq/opt/jdk-11.0.15\n      - - -Xbatch\n        - -Xcomp\n        - -XX:-TieredCompilation\n    -\n      - /home/zzq/opt/jdk-17.0.3\n      - - -Xbatch\n        - -Xcomp\n        - -XX:TieredStopAtLevel=1\n    -\n      - /home/zzq/opt/jdk-17.0.3\n      - []\n  ```\n\n  This command generates 3 programs from template `T.java` and uses\n  the 3 generated programs to test given java environments with given\n  options, which are\n  - `/home/zzq/opt/jdk-11.0.15/bin/java -Xbatch -Xcomp -XX:-TieredCompilation`\n  - `/home/zzq/opt/jdk-17.0.3/bin/java -Xbatch -Xcomp -XX:TieredStopAtLevel=1`\n  - `/home/zzq/opt/jdk-17.0.3/bin/java`\n",
                "type": "Text_excerpt",
                "original_header": "Examples of Run Commands:",
                "parent_header": [
                    "JAttack",
                    "Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "```\n  -h, --help            Show this help message and exit.\n  --config CONFIG       Path to a configuration file.\n  --print_config[=flags]\n                        Print the configuration after applying all\n                        other arguments and exit. The optional flags\n                        are one or more keywords separated by comma\n                        which modify the output. The supported flags\n                        are: comments, skip_default, skip_null.\n\n  --clz CLZ             the fully qualified class name of the\n                        template, separated with \".\" (required, type:\n                        str)\n  --n_gen N_GEN         the total number of generated programs\n                        (required, type: int)\n  --src SRC             the path to the source file of the template.\n                        By default, `./{clz}.java` is used. (type:\n                        Optional[str], default: null)\n  --n_itrs N_ITRS       the number of iterations to trigger JIT (type:\n                        int, default: 100000)\n  --seed SEED           the random seed used by JAttack during\n                        generation, fix this to reproduce a previous\n                        generation. (type: Optional[int], default:\n                        null)\n  --java_envs JAVA_ENVS, --java_envs+ JAVA_ENVS\n                        the java environments to be differentially\n                        tested, which should be provided as a list of\n                        a tuple of java home string and a list of java\n                        option strings, e.g., `--java_envs=[[/home/zzq\n                        /opt/jdk-11.0.15,[-XX:TieredStopAtLevel=4]],[/\n                        home/zzq/opt/jdk-17.0.3,[-XX:TieredStopAtLevel\n                        =1]]]` means we want to differentially test\n                        java 11 at level 4 and java 17 at level 1.\n                        Note, the first java environment of the list\n                        will be used to compile the template and\n                        generated programs, which means the version of\n                        the first java environment has to be less than\n                        or equal to the remaining ones. Also, the\n                        first java environment is used to run JAttack\n                        itself, which means its version should be at\n                        least 11. By default, $JAVA_HOME in the system\n                        with level 4 and level 1 are used, i.e., `--ja\n                        va_envs=[[$JAVA_HOME,[-XX:TieredStopAtLevel=4]\n                        ],[$JAVA_HOME,[-XX:TieredStopAtLevel=1]]]`\n                        (type: Optional[List[Tuple[str, List[str]]]],\n                        default: null)\n```\n",
                "type": "Text_excerpt",
                "original_header": "Full List of Arguments",
                "parent_header": [
                    "JAttack",
                    "Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "JAttack's command-line output is in [TAP](https://testanything.org/)\nformat, so you can make it prettier using any TAP consumer, like\n[tapview](https://gitlab.com/esr/tapview):\n```\n$ ./tool/jattack --clz T --n_gen 3 --seed 42 \\\n    --java_envs \"[\\\n        [.downloads/jdk-11.0.8+10,[-XX:TieredStopAtLevel=4]],\\\n        [.downloads/jdk-11.0.8+10,[-XX:TieredStopAtLevel=1]]]\" \\\n    | tapview\nF..\nnot ok 1 - TGen1\n  ---\n  message: 'Found a potential crash bug'\n  data: CrashBugData(type=<BugType.CRASH: 'crash'>, crashed_java_envs=[JavaEnv(java_home=PosixPath('/home/zzq/projects/jattack/.downloads/jdk-11.0.8+10'), java_opts=['-XX:TieredStopAtLevel=4'])])\n  ...\n3 tests, 1 failures.\n```\n\nAfter the run, a hidden directory `.jattack` is created under\ncurrent working directory with the following structure:\n```\n.jattack\n    - logs # logs of runs\n      - 1679956565593918684.log\n    - T\n      - build # Java class files\n        - TGen3.class\n      - gen # Generated programs from the template\n        - Gen1\n          - TGen1.java\n        - Gen2\n          - TGen2.java\n        - Gen3\n          - TGen3.java\n      - output # Outputs of generated programs executed on different java environments\n        - Gen1\n          - he_err_pid693345.log # error data file of the crash\n          - java_env1.txt # Output from execution on java_envs[1]\n          - replay_pid693345.log # replay data file of the crash\n        - Gen2\n          - java_env0.txt # Output from execution on java_envs[0]\n          - java_env1.txt\n        - Gen3\n          - java_env0.txt\n          - java_env1.txt\n```\n",
                "type": "Text_excerpt",
                "original_header": "Output",
                "parent_header": [
                    "JAttack",
                    "Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "- Linux with GNU Bash (tested on Ubuntu 20.04)\n- JDK >=11\n- Python 3.8\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "```bash\ncd tool\n./install.sh\n```\n\nThe `install.sh` script builds JAttack jar, installs python packages\nand creates an executable `jattack` in `tools`.\n",
                "type": "Text_excerpt",
                "original_header": "Install",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The following steps build javadoc for JAttack jar. Please refer to\nclass `Boom` for how to use provided APIs to write your own template. \n1. Build javadoc from source code.\n   ```bash\n   cd tool/api\n   ./gradlew javadoc\n   ``` \n",
                "original_header": "Docs"
            },
            "confidence": 0.9863999571989206,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you find JIT bugs using JAttack, we would be happy to add your\nfindings to this list. Please open a PR with a link to your bug. \n",
                "original_header": "Hall of Fame"
            },
            "confidence": 0.98978119705901,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "- Provide only two required arguments `--clz` and `--n_gen`.\n\n  ```bash\n  ./tool/jattack --clz T --n_gen 3\n  ```\n\n  This command generates 3 programs from template `T.java` and uses\n  the 3 generated programs to test default java environments found in\n  `$JAVA_HOME` at level 4 and level 1, which are:\n  - `$JAVA_HOME/bin/java -XX:TieredStopAtLevel=4`\n  - `$JAVA_HOME/bin/java -XX:TieredStopAtLevel=1`\n\n- Specify java environments and associated java options to be tested\n  using `--java_envs`.\n\n  ```bash\n  ./tool/jattack --clz T --n_gen 3 \\\n      --java_envs \"[\\\n          [/home/zzq/opt/jdk-11.0.15,[-Xbatch,-Xcomp,-XX:-TieredCompilation]],\\\n          [/home/zzq/opt/jdk-17.0.3,[-Xbatch,-Xcomp,-XX:TieredStopAtLevel=1]],\\\n          [/home/zzq/opt/jdk-17.0.3,[]]]\"\n  ```\n\n  The `java_envs` argument is a list, which can also be appended using\n  `--java_envs+=`, for example, the command above can be rewritten as:\n  ```bash\n  ./tool/jattack --clz T --n_gen 3 \\\n      --java_envs [[/home/zzq/opt/jdk-11.0.15,[-Xbatch,-Xcomp,-XX:-TieredCompilation]]] \\\n      --java_envs+=[[/home/zzq/opt/jdk-17.0.3,[-Xbatch,-Xcomp,-XX:TieredStopAtLevel=1]]] \\\n      --java_envs+=[[/home/zzq/opt/jdk-17.0.3,[]]]\n  ```\n\n  The `java_envs` argument can also be given using a config file, i.e.,\n  ```bash\n  ./tool/jattack --config config.yaml --clz T --n_gen 3\n  ```\n  where `config.yaml` is:\n  ```yaml\n  # config.yaml\n  java_envs:\n    -\n      - /home/zzq/opt/jdk-11.0.15\n      - - -Xbatch\n        - -Xcomp\n        - -XX:-TieredCompilation\n    -\n      - /home/zzq/opt/jdk-17.0.3\n      - - -Xbatch\n        - -Xcomp\n        - -XX:TieredStopAtLevel=1\n    -\n      - /home/zzq/opt/jdk-17.0.3\n      - []\n  ```\n\n  This command generates 3 programs from template `T.java` and uses\n  the 3 generated programs to test given java environments with given\n  options, which are\n  - `/home/zzq/opt/jdk-11.0.15/bin/java -Xbatch -Xcomp -XX:-TieredCompilation`\n  - `/home/zzq/opt/jdk-17.0.3/bin/java -Xbatch -Xcomp -XX:TieredStopAtLevel=1`\n  - `/home/zzq/opt/jdk-17.0.3/bin/java`\n",
                "type": "Text_excerpt",
                "original_header": "Examples of Run Commands:",
                "parent_header": [
                    "JAttack",
                    "Use"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you use JAttack in your research, we request you to cite our\n[ASE'22 paper](https://cptgit.github.io/dl/papers/zang22jattack.pdf)\n(which won an ACM SIGSOFT Distinguished Paper Award) and [ICSE'23 Demo\npaper](https://cptgit.github.io/dl/papers/zang23jattacktool.pdf).\n\n```bibtex\n@inproceedings{zang22jattack,\n  author = {Zang, Zhiqiang and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August},\n  title = {Compiler Testing using Template {J}ava Programs},\n  booktitle = {International Conference on Automated Software Engineering},\n  pages = {23:1--23:13},\n  year = {2022},\n  doi = {10.1145/3551349.3556958},\n}\n\n@inproceedings{zang23jattacktool,\n  author = {Zang, Zhiqiang and Yu, Fu-Yao and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August},\n  title = {{JA}ttack: {J}ava {JIT} Testing using Template Programs},\n  booktitle = {International Conference on Software Engineering, Tool Demonstrations Track},\n  pages = {6--10},\n  year= {2023},\n  doi = {10.1109/ICSE-Companion58688.2023.00014},\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{zang22jattack,\n    doi = {10.1145/3551349.3556958},\n    year = {2022},\n    pages = {23:1--23:13},\n    booktitle = {International Conference on Automated Software Engineering},\n    title = {Compiler Testing using Template {J}ava Programs},\n    author = {Zang, Zhiqiang and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3551349.3556958",
                "title": "Compiler Testing using Template {J}ava Programs",
                "author": "Zang, Zhiqiang and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{zang23jattacktool,\n    doi = {10.1109/ICSE-Companion58688.2023.00014},\n    year = {2023},\n    pages = {6--10},\n    booktitle = {International Conference on Software Engineering, Tool Demonstrations Track},\n    title = {{JA}ttack: {J}ava {JIT} Testing using Template Programs},\n    author = {Zang, Zhiqiang and Yu, Fu-Yao and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1109/ICSE-Companion58688.2023.00014",
                "title": "{JA}ttack: {J}ava {JIT} Testing using Template Programs",
                "author": "Zang, Zhiqiang and Yu, Fu-Yao and Wiatrek, Nathaniel and Gligoric, Milos and Shi, August"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "contact": [
        {
            "result": {
                "value": "Let me ([Zhiqiang Zang](https://github.com/CptGit)) know if you have\nany questions.\n",
                "type": "Text_excerpt",
                "original_header": "Contact",
                "parent_header": [
                    "JAttack"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9662570962817106,
            "technique": "supervised_classification"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "JAttack"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/EngineeringSoftware/jattack/master/README.md"
        }
    ]
}