{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 23:56:38"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/ComFlux/ComFlux-Middleware",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "ComFlux",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2017-05-25T16:02:07Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2020-02-07T10:28:06Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Middleware for external command and control",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "All functions presented so far are implemented in the `middleware_api`. The middleware_utils library contains data structures used in the mw and functions to manipulate them. For instance json, hashmap, array, message. \n",
                "original_header": "Compile your new component"
            },
            "confidence": 0.9130815840455875,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "ComFlux-Middleware",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "ComFlux/ComFlux-Middleware",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/ComFlux/ComFlux-Middleware/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/ComFlux/ComFlux-Middleware/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ComFlux/ComFlux-Middleware/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 481088
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CMake",
                "name": "CMake",
                "type": "Programming_language",
                "size": 19313
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 8711
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 2321
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/modules/com_modules/ssl/generate-CA.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "The middleware requires json-c:\n\n```\n#!sh\nsudo apt-get install libjson0 libjson0-dev\n\n```\n",
                "type": "Text_excerpt",
                "original_header": "Dependencies"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Download the git repository:\n\n```\n#!sh\ngit clone https://github.com/ComFlux/ComFlux-Middleware.git\n```\n \nThe are included as submodules. The  added submodules are: uthash, kerberros, and jsonschema-c. \n\n```\n#!sh\ncd ComFlux-Middleware\ngit submodule init\ngit submodule update --recursive\n\n```\n\nInstall the middleware:\n\n```\n#!sh\ncmake [-DSSLENABLED:BOOL=ON] [-DKRBENABLED:BOOL=ON] [-DMQTTENABLED:BOOL=ON] .\nmake\nsudo make install\n\n```\n\nThe optional cmake arguments generate communication and access control modules relying on third party libraries.\n\n| Argument  | Summary |\n| :---: | ---     |\n| `-DMQTTENABLED:BOOL=ON` | Enables building two com modules relying on MQTT. |\n| `-DSSLENABLED:BOOL=ON` | Enables building an SSL com module and a certificate based access control module. |\n| `-DKRBENABLED:BOOL=ON` | Enables building a Kerberos access control module. |\n\n\nTo install mosquitto:\n\n```\n#!sh\nsudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\nsudo apt-get update\nsudo apt-get install libmosquitto\n\n```\n\nTo install OpensSSL:\n\n```\n#!sh\nsudo apt-get install libssl-dev\n\n```\n\nThe Kerberos module uses krb5 library linked as a submodule.\n\n",
                "type": "Text_excerpt",
                "original_header": "Installation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Through the API the following headers are available: \n| File  | Summary |\n| :---: | ---     |\n| **middleware.h** | Communication and configuration functionality with the middleware core. |\n| **endpoint.h** | Endpoint definitions and endpoint specific commands. |\n| **load_mw_config.h** | To facilitate middleware deployment configuration can be applied from json structures or fles. | \n",
                "original_header": "API structure"
            },
            "confidence": 0.9769366273549471,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The distribution provides the core and the library of the middleware. To compile your component run:\n```\n#!sh\n cc -o your_component your_component.c -lmiddleware_api -lmiddleware_utils\n\n```\n \n",
                "original_header": "Compile your new component"
            },
            "confidence": 0.9358900533397553,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Run a simple source - sink communication by opening two terminals and typing\n\n```\n#!sh\ncd build/bin/examples\n./simple_source src_mw_cfg.json\n\n```\n\n```\n#!sh\ncd build/bin/examples\n./simple_sink 127.0.0.1:1503 snk_mw_cfg.json\n\n```\n",
                "type": "Text_excerpt",
                "original_header": "Simple source - sink",
                "parent_header": [
                    "Examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        },
        {
            "result": {
                "value": "Map the sink to the source by querying a Resource Discovery Component for the source. First, run an RDC\n```\n#!sh\nrdc\n\n```\n\nThen start `lookup_source` and `lookup_sink`.\n```\n#!sh\ncd build/bin/examples\n./lookup_source src_mw_cfg.json\n\n```\n\n```\n#!sh\ncd build/bin/examples\n./lookup_sink snk_mw_cfg.json \"\\\"ep_name\\\" = \\\"ep_source\\\"\n\n```\n",
                "type": "Text_excerpt",
                "original_header": "Resource discovery",
                "parent_header": [
                    "Examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        },
        {
            "result": {
                "value": "Watch this space\n",
                "type": "Text_excerpt",
                "original_header": "Dynamic connection management and reconfiguration",
                "parent_header": [
                    "Examples"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "For the basic usage of ComFlux, here is a detailed tutorial: [ComFlux: Dynamic creation of pervasive applications from plug-and-play modules](tutorial.pdf)\n\nHere is an article detailing the model and applications of ComFlux: [ComFlux: External Composition and Adaptation of Pervasive Applications](http://arxiv.org/abs/1710.06711)\n\nWe also have the following tutorial proposal: [ComFlux: Dynamic creation of pervasive applications from plug-and-play modules](tutorial-main.pdf)\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Documentation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9855633487911488,
            "technique": "supervised_classification"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Dependencies"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ComFlux/ComFlux-Middleware/master/README.md"
        }
    ]
}