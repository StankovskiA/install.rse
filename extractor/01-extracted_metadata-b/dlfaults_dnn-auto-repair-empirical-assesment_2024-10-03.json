{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:57:27"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/dlfaults/dnn-auto-repair-empirical-assesment",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "dlfaults",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-01-26T16:28:49Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-01-27T06:37:05Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2023 dlfaults\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Replication package for the \"Repairing DNN Architecture: Are We There Yet?\" article (ICST'23)",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- `data`: contains a predefined set of hyperparameters, results (execution time, accuracy or other evaluation metrics) of running the faults and fixes.\n- `DC_mutants`: contains subdirectories of each dataset of artificial faults. For example, `DC_mutants/MNIST` has Python files of the faults (mutants) and one Ray Tune file (`mnist_raytune.py`) to run HPO techniques for all mutants. The directory named `initial_params` has two files, which of each is mutants' parameters and original parameters, respectively.\n- `DFD`: has nine real faults from DeepFD paper. Each subdirectory has `origin_raytune.py` file\nto run HPO experiments. `gt.json` contains hyperparameters of the fixes by the developers.\n- `scripts`: contains scripts for collecting accuracies (or other evaluation metrics), inserting `train_test_split` for splitting test set, and saving default Ray Tune parameters. \n",
                "original_header": "Directories and Files"
            },
            "confidence": 0.9597100596815268,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "dnn-auto-repair-empirical-assesment",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "dlfaults/dnn-auto-repair-empirical-assesment",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/dlfaults/dnn-auto-repair-empirical-assesment/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/dlfaults/dnn-auto-repair-empirical-assesment/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/dlfaults/dnn-auto-repair-empirical-assesment/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 657372
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 354150
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/Complexity.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/Complexity.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/Boxplots.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/Boxplots.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/HPO%20analysis.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/notebooks/HPO%20analysis.ipynb"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Decide target fault and run corresponding Ray Tune file.\n\nFor example,\n\n```bash\ncd DFD/31880720\npython python origin_raytune.py --algo hebo --limit 20 --repeat 5 --top10 1\n```\nThe options of the Ray Tune file are:\n- `algo`: decides the HPO algorithm. It can be one of [hebo, bohb, random]\n- `limit`: sets the maximum time limit.\n- `repeat`: repeats the experiments N times.\n- `top10`: now only supports 1.\n\n",
                "type": "Text_excerpt",
                "original_header": "How to run Ray Tune Python scripts",
                "parent_header": [
                    "Artifact of \"Repairing DNN Architecture: Are We There Yet?\" article (ICST'23)",
                    "Source Code"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "- DeepCrime: https://github.com/dlfaults/deepcrime\n- AutoTrainer: https://github.com/shiningrain/AUTOTRAINER\n- DeepFD: https://github.com/ArabelaTso/DeepFD\n",
                "type": "Text_excerpt",
                "original_header": "References",
                "parent_header": [
                    "Artifact of \"Repairing DNN Architecture: Are We There Yet?\" article (ICST'23)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Tested with Python 3.8.2\n- tensorflow 2.3.4\n- Keras 2.4.3\n \n",
                "original_header": "Environments"
            },
            "confidence": 0.9896154350647407,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- It is highly recommened to use GPU version of Tensorflow.\n \n",
                "original_header": "Notes"
            },
            "confidence": 0.9899242654388337,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Artifact of \"Repairing DNN Architecture: Are We There Yet?\" article (ICST'23)"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
        }
    ]
}