{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:11:17"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/tsb0601/MultiMon",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "tsb0601",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-05-30T09:17:25Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-02T03:25:55Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "MultiMon",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "tsb0601/MultiMon",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/tsb0601/MultiMon/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/tsb0601/MultiMon/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 22,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/tsb0601/MultiMon/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 15874
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "```\npip install -r requirements.txt\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step 0: Install the necessary Python packages",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                    "Running and Using MultiMon"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "You will need to run the `scrape.py` file. This file contains arguments that can be adjusted according to your needs:\n\n- `steer`: Steering direction for the self-driving car (default is \"self-driving cars\").\n- `corpus_data`: Corpus data to scrape (default is \"MS-COCO\").\n- `num_output`: Number of entries we want (default is 150).\n- `api_key`: API Key for your openAI account (default is empty).\n- `do_steer`: Execute steering direction (default is False).\n\nTo run the script, navigate to the directory containing `scrape.py` in your terminal, and type:\n\n```\npython scrape.py --steer [your_value] --corpus_data [your_value] --num_output [your_value] --api_key [your_value] --do_steer [your_value]\n```\n",
                "type": "Text_excerpt",
                "original_header": "Step 1: Scraping from corpus data",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                    "Running and Using MultiMon"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        },
        {
            "result": {
                "value": "After scraping the corpus data, replace the failure instances with the scraped failure instances and prompts LLM (GPT-4 or Claude)\n```\nI will provide a series of data for you to remember. Subsequently, I will ask you some questions to test your performance! Here are some pairs of prompts for you to memorize. \n[Copy paste the failure instances scraped in csv file from previous step]\n\nI\u2019m trying to find failures with an embedding model. The above are some pairs of sentences that it encodes very similarly, even though they\u2019re conveying different concepts. Using these specific examples, are there any general types of failures you notice the embedding is making, or any common features that the embedding fails to encode? Try to give failures that are specific enough that someone could reliably produce examples that the embedding would encode similarly, even though it shouldn\u2019t. Please try to give as many general failures as possible. Please focus on differences that are important visually, as these embeddings are later used to generate images, or videos. In your failure modes, please explain clearly why the failure would lead to problems for future tasks related to visual generation.Please summarize as many as you can and stick to the examples.\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Step 2: Categorizing systematic failures",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                    "Running and Using MultiMon"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        },
        {
            "result": {
                "value": "For a categorized systematic failure, prompt LLM to generate new failure instances by \n```\nWrite down 41 additional pairs of prompts that an embedding model with the following failure mode might encode similarly, even though they would correspond to different images if used as captions. Use the following format:\n(\"prompt1\", \"prompt2\"),\n(\"prompt1\", \"prompt2\"),\nYou will be evaluated on how well you actually perform. Your sentence structure and length can be creative; extrapolate based on the failure mode you\u2019ve summarized. Be both creative and cautious.\nFailure Mode:\n[Systematic Failure (with full description)]\n```\n\nTry the generated failure instances on Multimodal models such as MidJourney, Stable Diffusion, etc :D.\n",
                "type": "Text_excerpt",
                "original_header": "Step 3: Categorizing systematic failure",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                    "Running and Using MultiMon"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        },
        {
            "result": {
                "value": "For a more detailed demonstration, see the [Full Demo](Demo/demo.md) walkthrough.\n",
                "type": "Text_excerpt",
                "original_header": "See also",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models",
                    "Running and Using MultiMon"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "For both baseline produced failure instances and MultiMon produced failure instances, we choose a text-to-image model. We generate an image for each input, then ask two whether each the image corresponds to input 1, input 2, neither input, or if the inputs are visually indistinguishable. We say pair is a downstream failure if at least one image is labeled with an incorrect input, or with \u201cneither\u201d.\nTo try the user study, run \n```\npython annotate.py\n```\nYour results will be automatically reocrded in User_Study.csv, you can compare your answer with the ground truth in User Study (Answers).xlsx\n\n",
                "type": "Text_excerpt",
                "original_header": "Trying the user study in our work",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you find this repository useful, please consider giving a star :star: and citation:\n\n```\n@misc{tong2023massproducing,\n      title={Mass-Producing Failures of Multimodal Systems with Language Models}, \n      author={Shengbang Tong and Erik Jones and Jacob Steinhardt},\n      year={2023},\n      eprint={2306.12105},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "<img alt=\"\" src=\"Multimon_emoji.png\" /> Mass-Producing Failures of Multimodal Models with Language Models"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        },
        {
            "result": {
                "value": "@misc{tong2023massproducing,\n    primaryclass = {cs.LG},\n    archiveprefix = {arXiv},\n    eprint = {2306.12105},\n    year = {2023},\n    author = {Shengbang Tong and Erik Jones and Jacob Steinhardt},\n    title = {Mass-Producing Failures of Multimodal Systems with Language Models},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Mass-Producing Failures of Multimodal Systems with Language Models",
                "author": "Shengbang Tong and Erik Jones and Jacob Steinhardt"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": " Mass-Producing Failures of Multimodal Models with Language Models"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/Multimon_emoji.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/Pipeline/pipeline.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2306.12105"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/tsb0601/MultiMon/main/README.md"
        }
    ]
}