{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 21:03:58"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/lucapiccolboni/crylogger",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "lucapiccolboni",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-05-22T17:54:23Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-19T11:52:41Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2020 Luca Piccolboni\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "CRYLOGGER: Detecting Crypto Misuses for Android and Java Apps Dynamically",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "*CRYLOGGER* detects cryptographic (crypto) misuses in Android apps. A crypto misuse is an invocation to a crypto API that does not respect common security guidelines, such as those suggested by cryptographers or organizations like [NIST](https://www.nist.gov/) and [IETF](https://www.ietf.org/). For instance, *CRYLOGGER* can tell you if your Android app uses AES in ECB mode to encrypt multiple data blocks, which is bad in cryptography.\n\n*CRYLOGGER* detects crypto misuses for you automatically, without requiring to analyze a single line of your code. First, *CRYLOGGER* runs your Android app on the official Android [Emulator](https://developer.android.com/studio/run/emulator), whose Java libraries have been instrumented to log the parameters passed to the relevant crypto APIs. Then, it analyzes the log file offline and reports all the crypto misuses.  Differently from other approaches, it does *not* employ static analysis. *CRYLOGGER* runs your app by using [Monkey](https://developer.android.com/studio/test/monkey) or the user-interface events you send to the emulator.\n\nIf you want to know more about *CRYLOGGER*, please contact me at piccolboni@cs.columbia.edu or read our [Oakland paper](https://arxiv.org/abs/2007.01061):\n\n```\nLuca Piccolboni, Giuseppe Di Guglielmo, Luca P. Carloni and Simha Sethumadhavan, \"CRYLOGGER:\nDetecting Crypto Misuses Dynamically\", in IEEE Symposium on Security and Privacy (SP), 2021.\n```\n\n***\n",
                "type": "Text_excerpt",
                "original_header": "Introduction"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "crylogger",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "lucapiccolboni/crylogger",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/lucapiccolboni/crylogger/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/lucapiccolboni/crylogger/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 149,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "android, aosp-android, crypto-api, crypto-misuses, cryptography, emulator, java",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 13,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/lucapiccolboni/crylogger/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 500188
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 52058
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 4386
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/lucapiccolboni/crylogger/releases/27990038",
                "tag": "v1.0",
                "name": "CRYLOGGER",
                "author": {
                    "name": "lucapiccolboni",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/lucapiccolboni/crylogger/tarball/v1.0",
                "zipball_url": "https://api.github.com/repos/lucapiccolboni/crylogger/zipball/v1.0",
                "html_url": "https://github.com/lucapiccolboni/crylogger/releases/tag/v1.0",
                "url": "https://api.github.com/repos/lucapiccolboni/crylogger/releases/27990038",
                "release_id": 27990038,
                "date_created": "2020-05-26T18:49:22Z",
                "date_published": "2020-06-27T18:32:40Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/scripts/setup/compile_emu.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/scripts/setup/setup_opengapps.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/scripts/opengapps-scripts/fix_perms.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "There are not a lot of requirements that are specific to *CRYLOGGER*. If you satisfy the requirements of the [AOSP](https://source.android.com/setup/build/requirements) and you install all the Python packages required for `scripts/run.py` and `scripts/check.py` you are good to go! *CRYLOGGER* has been tested on *Android-9.0.0_r36* (this is the default version of the emulator that is installed as explained below). It should be easy to adapt it to other Android builds. For the host machine, we used a machine with a clean installation of *Ubuntu 18.04.1*.\n\nMake sure you install the [Android SDK](https://developer.android.com/studio) if you want to compile the test app included in this repository (directory `test-app`) and set the environment variable `ANDROID_SDK_ROOT` to point to it.\n",
                "type": "Text_excerpt",
                "original_header": "Requirements"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Once you satisfy the requirements of the AOSP, it is sufficient to run the following command to setup the emulator and *CRYLOGGER*:\n\n```bash\ncd scripts/setup\n./setup_emu.py\n```\n\nThis scripts downloads the AOSP in a new directory `android-emu` from the official Google repositories, installs *CRYLOGGER* by copying the files from the directory `scripts/deltas`, and builds it. Please refer to the scripts in the directory `scripts/setup` for more information. By default, it uses all the available cores to compile the AOSP.\n\nIn addition, if you want to install apps from the Google Play Store, you need to install the [OpenGApps](https://github.com/opengapps/opengapps). You can do so by running the following commands:\n\n```bash\ncd scripts/setup\n./setup_opengapps.sh\n```\n\nThe OpenGApps (*x86-9.0-super-20210127*) are downloaded in `script/opengapps` so they can be installed on the emulator.\n\n***\n",
                "type": "Text_excerpt",
                "original_header": "Emulator Setup"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "You are now ready to run your app on the Android emulator and collect the log that contains information about the crypto APIs that are invoked. We call this log *\"cryptolog\"*. Here, we verify a simple Android app that you can find in the directory `app-test`. If you have your own APK to test, you can skip the compilation of `app-test`, otherwise:\n```bash\ncd app-test\n./gradlew build\n```\nIf the compilation is successfull, you should find a file named `com.example.aes_0.apk` in the folder `test-app` that points to the APK of the test app. If you use your APK, make sure you use the following naming convention: `<package_name>_<version>.apk`, where `<package_name>` is the package name of the Android app and `<version>` is its version number. Copy the APK in the directory `scripts/data/apks`:\n```bash\ncp app-test/com.example.aes_0.apk scripts/data/apks/\n```\nYou need to start the emulator by passing the option `-writable-system` (this option is only used to install the OpenGApps):\n```bash\n# Setup the env variables\ncd android-emu\nsource build/envsetup.sh\nlunch sdk_phone_x86-userdebug\n# Now start the emulator\nemulator -writable-system\n```\n \n",
                "original_header": "Verify your App"
            },
            "confidence": 1.0,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The emulator should be now running. Wait for the completion of the boot process, and then run the following script to execute your app:\n```bash\ncd scripts\npython run.py --work_dir data --session emulator-<number>\n```\n \nwhere `<number>` is the emulator session number (you can find it in the title bar of the emulator window). By default the script `run.py` (1) installs the OpenGApps, if they have not been installed in a previous run, (2) configures the  emulator, so that your app can be tested with Monkey, (3) installs your app on the emulator, (4) runs your app with Monkey by using a fixed number of user-interface events (default *100*), (5) collects the cryptolog, which contains information about the use of the crypto APIs, and (6) uninstalls the app. You can easily modify the script `run.py` if you want to use your own user-generated events.\n \n",
                "original_header": "Collect the logs"
            },
            "confidence": 0.991790996704953,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "After 'run.py' completes, you should find the log in the directory `scripts/data/crypto_logs`. Now you can analyze them by running the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID <number>\n```\nwhere `<number>` is the number of the crypto rule you want to check. *CRYLOGGER* support *26* rules that are explained in the paper as well as in the script `check.py`. These rules are suggested by cryptographers or organizations like [NIST](https://www.nist.gov/) and [IETF](https://www.ietf.org/). Try for example to check rule *R-03* by using the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID 03\n```\nYou should obtain a file with extension `.rules` in the directory `scripts/data/crypto_logs` that tells you if rule *R-03* is violated. For the app included in this repository the rule should be violated because the app performs encryptions and decryptions by using the insecure ECB mode. Note that some rules require two executions of your app, thus you need to run the script `run.py` twice. The second run should look like this:\n```bash\n# Start emulator\ncd android-emu\nemulator -writable-system\n# Run the script\ncd ../scripts\npython run.py --work_dir data --session emulator-<number> --suffix 2\n```\nThis command runs again your app on the emulator and appends `'2'` to the cryptolog files (extension `.cryptolog2` instead of simply `.cryptolog`). You can check rules that require two executions, for example rule *R-05* with the following command:\n```bash\ncd scripts\npython check.py --work_dir data/crypto_logs --rule_ID 05\n```\n \nIf you want to check all the rules supported by *CRYLOGGER*, omit the flag `--rule_ID`.\n \n",
                "original_header": "Analyze the logs"
            },
            "confidence": 0.9557177182479657,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The emulator should be now running. Wait for the completion of the boot process, and then run the following script to execute your app:\n```bash\ncd scripts\npython run.py --work_dir data --session emulator-<number>\n```\n \n",
                "original_header": "Collect the logs"
            },
            "confidence": 0.9111207873530766,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": ""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2007.01061"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lucapiccolboni/crylogger/master/README.md"
        }
    ]
}