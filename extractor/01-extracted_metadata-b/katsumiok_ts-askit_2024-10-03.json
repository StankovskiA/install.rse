{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 18:59:12"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/katsumiok/ts-askit",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "katsumiok",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-07-20T17:17:32Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-10T13:49:20Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "AskIt (for JavaScript/TypeScript): Unified programming interface for large language models (GPT-4, GPT-3.5)",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "AskIt is a language plugin for TypeScript that enables you to leverage the capabilities of a large language model (LLM), such as GPT-4, directly within your programming environment, no complex APIs needed. AskIt's extensive range of applications includes: \nBuilt upon the [OpenAI API](https://beta.openai.com/), AskIt provides a user-friendly interface for incorporating LLMs into your applications. You can use *AskIt* not only in TypeScript, but also in JavaScript and Python. \n",
                "original_header": "Overview"
            },
            "confidence": 0.9388650613226608,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To streamline this process, we can leverage the LLM to generate the sorting function's code, rather than resorting to the LLM for every sorting task. This optimizes the function without requiring any changes in its implementation, thanks to **AskIt**'s code generation capabilities. \n",
                "original_header": "Code Generation with **AskIt**"
            },
            "confidence": 0.9236309978177294,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In the code snippet above, the `ask` function is invoked with a type and a prompt. The type parameter serves the purpose of informing **AskIt** about the format and structure of the desired output. This becomes extremely handy when you're dealing with complex data structures.\n \n",
                "original_header": "Type-guided Output Control in JavaScript"
            },
            "confidence": 0.9749386717211435,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In the code above, the `define` method is employed to establish a function `f` using a task template 'Translate {{text}} into {{language}}'. The function `f` is then invoked with an object that provides values for `text` and `language`.\n \n",
                "original_header": "Template-based Function Definition in JavaScript"
            },
            "confidence": 0.929537354535984,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "As of the time of writing, the code generation feature is exclusively available in TypeScript. However, efforts are in full swing to extend this powerful feature to the realm of JavaScript. If your requirements call for the use of code generation in the interim, we recommend using TypeScript until further updates. \n",
                "original_header": "Code Generation in JavaScript: The Road Ahead"
            },
            "confidence": 0.9891291624407617,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "ts-askit",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "katsumiok/ts-askit",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/katsumiok/ts-askit/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/katsumiok/ts-askit/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 33,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "gpt, gpt-3, gpt-4, javascript, llm, openai, openai-api, parser, prompt, prompt-engineering, prompt-toolkit, typescript, wrapper",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/katsumiok/ts-askit/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "TypeScript",
                "name": "TypeScript",
                "type": "Programming_language",
                "size": 79717
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 8591
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "non-software",
                "type": "String"
            },
            "confidence": 1,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Before starting, ensure that [Node.js](http://nodejs.org/) and [npm](https://npmjs.com) are installed on your system. Then, execute the following command:\n\n```bash\nnpm install ts-askit\n```\n\nThis package relies on `ts-patch`. To install `ts-patch`, run:\n\n```bash\nnpx ts-patch install\n```\n\nAdd the following snippet to your `tsconfig.json`:\n\n```json\n\"compilerOptions\": {\n    \"plugins\": [{ \"transform\": \"ts-askit/transform\" }]\n}\n```\n\nThis modification allows the TypeScript compiler to support type parameters for the `ask` and `define` APIs in AskIt.\n\nThe `ts-patch` package is crucial for unleashing the full potential of AskIt, as it extends the TypeScript compiler to fully integrate AskIt's type system. While AskIt can be used without `ts-patch`, this integration offers a more feature-rich experience.\n\nBefore using *AskIt*, you need to set your OpenAI API key as an environment variable `OPENAI_API_KEY`:\n```bash\nexport OPENAI_API_KEY=<your OpenAI API key>\n```\n`<your OpenAI API key>` is a string that looks like this: `sk-<your key>`.\n You can find your API key in the [OpenAI dashboard](https://platform.openai.com/account/api-keys).\n\nYou can also specify the model name as an environment variable `ASKIT_MODEL`:\n```bash\nexport ASKIT_MODEL=<model name>\n```\n`<model name>` is the name of the model you want to use. \nThe latest AskIt is tested with `gpt-4` and `gpt-3.5-turbo-16k`. You can find the list of available models in the [OpenAI API documentation](https://platform.openai.com/docs/models).\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "AskIt (ts-askit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Here are some introductory examples:\n\n```ts\nimport { ask } from 'ts-askit';\n\nask<string>('Paraphrase \"Hello World!\"').then((result) => {\n  console.log(result);\n});\n```\n\nIn this example, `ask` is an API function that allows your program to pose queries to a large language model (LLM). The type parameter represents the expected output type from the LLM. Here, the output type is `string`. The prompt is passed as an argument in natural language, describing the task for the LLM to perform. `ask` is asynchronous, returning a `Promise` of the specified output type. The code snippet above should print something like this:\n```\nGreetings, Universe!\n```\n\nFor a prompt with parameters, you can use the `define` API as follows:\n\n```ts\nimport { define } from 'ts-askit';\n\nconst paraphrase = define<string>('Paraphrase {{text}}');\n\nparaphrase({ text: 'Hello World!' }).then((result) => {\n  console.log(result);\n});\n```\n\n`define` is an API function that allows you to define a custom function. Its type parameter indicates the output type of the LLM, and consequently, the return value of the function. The function receives a string template as an argument, serving as the LLM's task prompt. The template can include parameters enclosed in double curly braces. In the example above, `text` is a parameter within the template, and it can be any valid JavaScript identifier.\n\nOnce the function is defined, it can be invoked like any other function. This function accepts an object as an argument, which maps to the template parameters' values. In this case, `text` maps to the string 'Hello World!'.",
                "type": "Text_excerpt",
                "original_header": "API Usage",
                "parent_header": [
                    "AskIt (ts-askit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "value": "**AskIt** allows you to leverage the power of Programming by Example (PBE). PBE simplifies the programming process by enabling you to define functionality through examples rather than hard-coded logic. The following example illustrates this by showing you how to add two binary numbers using PBE with **AskIt**.\n\n```ts\nimport { define, Example } from 'ts-askit';\n\nconst trainingExamples: Example[] = [\n  { input: { x: '1', y: '0' }, output: '1' },\n  { input: { x: '1', y: '1' }, output: '10' },\n  { input: { x: '101', y: '11' }, output: '1000' },\n  { input: { x: '1001', y: '110' }, output: '1111' },\n  { input: { x: '1111', y: '1' }, output: '10000' },\n];\nconst testExamples = [\n  { input: { x: '0', y: '1' }, output: '1' },\n  { input: { x: '10', y: '0' }, output: '10' },\n  { input: { x: '110', y: '10' }, output: '1000' },\n];\nconst addInBase2 = define<string, { x: string; y: string }>(\n  'Add {{x}} and {{y}}',\n  trainingExamples,\n  testExamples\n);\n\nasync function doit() {\n  console.log(await addInBase2({ x: '101', y: '11' }));\n}\n\ndoit();\n```\nIn this example, we define a function `addInBase2` that takes two binary numbers (represented as strings) and adds them. The `define` function is invoked with a prompt and two arrays of examples: training examples and test examples. The training examples are reflected in the prompt in a few-shot learning manner. On the other hand, the test examples are used to validate the generated function's correctness. Test examples are not required if you don't generate code for the function.\n\nThe result is a powerful feature allowing you to instruct the LLM to perform complex operations, like binary addition, using nothing but examples. This approach enables you to develop complex functionality rapidly and with less explicit logic.\n\nOnce the function `addInBase2` is defined, you can call it with binary number strings to perform addition in base 2. As with traditional function calls, **AskIt**'s `ask` operation returns a promise that resolves with the computed result.\n",
                "type": "Text_excerpt",
                "original_header": "Programming by Example with **AskIt**",
                "parent_header": [
                    "AskIt (ts-askit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "For details on our code of conduct and the process for submitting pull requests, please refer to [CONTRIBUTING.md](CONTRIBUTING.md).\n",
                "type": "Text_excerpt",
                "original_header": "Contributing",
                "parent_header": [
                    "AskIt (ts-askit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "license": [
        {
            "result": {
                "value": "This project is licensed under the MIT License. For more information, see the [LICENSE](LICENSE) file.\n\n```bibtex\n@misc{okuda2023askit,\n      title={AskIt: Unified Programming Interface for Programming with Large Language Models}, \n      author={Katsumi Okuda and Saman Amarasinghe},\n      year={2023},\n      eprint={2308.15645},\n      archivePrefix={arXiv},\n      primaryClass={cs.PL}\n}\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "AskIt (ts-askit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@misc{okuda2023askit,\n    primaryclass = {cs.PL},\n    archiveprefix = {arXiv},\n    eprint = {2308.15645},\n    year = {2023},\n    author = {Katsumi Okuda and Saman Amarasinghe},\n    title = {AskIt: Unified Programming Interface for Programming with Large Language Models},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "AskIt: Unified Programming Interface for Programming with Large Language Models",
                "author": "Katsumi Okuda and Saman Amarasinghe"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "AskIt (ts-askit)"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://katsumiok.github.io/ts-askit/images/type-guided.gif"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://katsumiok.github.io/ts-askit/images/func_def.gif"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2308.15645"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/ts-askit/main/README.md"
        }
    ]
}