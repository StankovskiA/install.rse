{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 21:39:58"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/LJ2lijia/SkCoder",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "LJ2lijia",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-02-10T14:11:02Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-19T06:56:09Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Official implementation of our ICSE 2023 paper on Automatic Code Generation.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Official implementation of our ICSE 2023 paper on Automatic Code Generation. [Paper](https://arxiv.org/abs/2302.06144)\n \n",
                "original_header": "SkCoder: A Sketch-based Approach for Automatic Code Generation"
            },
            "confidence": 0.9192274151946311,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Each line of these `jsonl` files is a json object, which contains the following fields: \n",
                "original_header": "Datasets"
            },
            "confidence": 0.9015775123277193,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "SkCoder",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "LJ2lijia/SkCoder",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/LJ2lijia/SkCoder/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/LJ2lijia/SkCoder/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 22,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/LJ2lijia/SkCoder/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 237568
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 7922
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 7044
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/evaluator/CodeBLEU/parser/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/eval-aixbench-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/eval-mtg-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/eval-hearthstone-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/run-aixbench-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/run-hearthstone-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/sketcher/run-MTG-gcb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/retriever/search.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/retriever/compile.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/retriever/buildIndex.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/retriever/buildExemplars.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/editor/sh/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/editor/sh/inference.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "- Java 1.8.0\n- python 3.10\n- pytorch 1.13.1\n- transformers 4.24.0\n- tqdm 4.60.0\n- tree_sitter 0.2.0\n- fire 0.5.0\n- nltk\n- tensorboard\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "The retriever is used to retrieve the most similar code snippets from the code corpus. We also provide the retrieval results for the three datasets, which can be downloaded from [Google Drive](https://drive.google.com/drive/folders/1p04arpnmGT_QdeG_v5I-OkGj517wHXGI?usp=drive_link). You can skip this step if you want to use the retrieval results directly.\n\n\nWe run the retriever on the `HearthStone` dataset as an example.\nFirst, we extract input requirements from datasets and save them as files (`train.in`, `dev.in`, `test.in`).\n\n```Bash\npython process4retriever.py \\\n    --type preprocess \\\n    --data_path data/hearthstone \\\n```\n\nThen, we utilze a search engine to retrieve similar code snippets from the train data.\n\n```Bash\ncd retriever\nbash compile.sh\nbash buildIndex.sh\nbash buildExemplars.sh\n```\n\nNext, we extract similar code snippets and save them as `jsonl` files into `data/hearthstone`, including `{train, dev, test}_with_example.jsonl`.\nEach file contains the following keys:\n\n- input: str, the original input\n- input_tokens[list]: list[str], the tokenized input\n- output: str, the original output\n- output_tokens[list]: list[str], the tokenized output\n- examples: list[str], the Top-K similar code snippets\n",
                "type": "Text_excerpt",
                "original_header": "Step 1: Runing the Retriever",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "As an example, we show the preprocessing, training and inference process of HearthStone dataset.\n\nThere are some details that are different for each dataset, but mostly the steps are the same. We will add the details later.\n\nAs a disclaimer, the term `gcb` appearing everywhere stands for GraphCodeBert, which we use as a base model for fine-tuning.\nIt is here because there was a version that trains the model from scratch, so the term gcb is thus used to distinguish them.\n",
                "type": "Text_excerpt",
                "original_header": "Step 2: Training the Sketcher",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "Run preprocess.py on the `{train,dev,test}_with_example.jsonl` to produce `{train,valid,test}_sketcher.json`.\n\n```Bash\ncd sketcher\npython preprocess.py --input ../data/hearthstone/train_with_example.jsonl --output ../data/hearthstone/train_sketcher.json\npython preprocess.py --input ../data/hearthstone/dev_with_example.jsonl --output ../data/hearthstone/dev_sketcher.json\npython preprocess.py --input ../data/hearthstone/test_with_example.jsonl --output ../data/hearthstone/test_sketcher.json\n```\n",
                "type": "Text_excerpt",
                "original_header": "Data Preprocessing",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage",
                    "Step 3: Training the Editor"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "Run `run-hearthstone-gcb.sh`.\n```Bash\nexport CUDA_VISIBLE_DEVICES=0 # the GPU(s) you want to use to train\nbash run-hearthstone-gcb.sh test1\n```\n`test1` is the default `runs` folder used for the run. If you changed the folder name, you should change corresponding path in `eval.sh`.\n",
                "type": "Text_excerpt",
                "original_header": "Training",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage",
                    "Step 2: Training the Sketcher"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "First run the inference script with the GPU.\n```bash\nexport CUDA_VISIBLE_DEVICES=0 # the GPU(s) you want to use to inference\nbash eval-hearthstone-gcb.sh\n```\nThen run `add_sketch.py` with the data folder path as the parameter to generate `{train,dev,test}_with_sketch.jsonl`.\n```Bash\npython add_sketch.py --data ../data/hearthstone\n```\n\nFinally, the sketcher outputs `{train,dev,test}_with_sketch.jsonl` in `data/hearthstone`. The format of these files is the same as the input of the retriever, except two more columns:\n\n- sketch: a list of sketch from each example, where each sketch is a string. Note that we use <pad> instead of [PAD] .\n- oracle-sketch: a list of oracle sketches for each example. The format is the same as sketch.\n",
                "type": "Text_excerpt",
                "original_header": "Generating data for the editor",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage",
                    "Step 2: Training the Sketcher"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "The editor is train to generate code based on the requirement and code sketch. We run the editor on the `HearthStone` dataset as an example.\n\n#### Data Preprocessing\nWe run `process2editor.py` to generate the training data for the editor.\n\n```Bash\npython process4editor.py --data_path data/hearthstone\n```\n\nThe generated data is saved in `data/hearthstone/{train,dev,test}_editor.jsonl`.\n",
                "type": "Text_excerpt",
                "original_header": "Step 3: Training the Editor",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "Please modify the `ROOT_DIR` in `train.sh` and `inference.sh`, which denote the absolute path of the project.\n```Bash\ncd editor/sh\npython run_exp.py --do_train --task hearthstone --gpu {gpu_ids}\n```\nWhere `gpu_ids` is the GPU(s) you want to use to train, such as `0,1`.\n\n`run_exp.py` will automatically train the model and generate the code for the test data. The generated code is saved in `editor/sh/saved_models/hearthstone/prediction/test_best-bleu.jsonl`. \n",
                "type": "Text_excerpt",
                "original_header": "Training and Inference",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage",
                    "Step 3: Training the Editor"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "We evaluate the generated code using three metrics, including Exact Match (EM), BLEU, and CodeBLEU. We run the evaluation on the `HearthStone` dataset as an example.\n\n```Bash\ncd evaluator\npython evaluate.py --input_file {prediction_path} --lang {lang}\n```\n\nWhere `prediction_path` is the path of the generated code, such as `../editor/sh/saved_models/hearthstone/prediction/test_best-bleu.jsonl`.\n`lang` is the programming language of the generated code (`Hearthstone`: `python`, `Magic` and `AixBench-L`: `java`).\n\n",
                "type": "Text_excerpt",
                "original_header": "Step 4: Evaluation",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "The code is based on [Re2Com](https://github.com/Gompyn/re2com-opensource), [GraphCodeBERT](https://github.com/microsoft/CodeBERT/tree/master/GraphCodeBERT), and [CodeT5](https://github.com/salesforce/CodeT5). We thank the authors for their great work.\n",
                "type": "Text_excerpt",
                "original_header": "Acknowledgement",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you find this repository useful, please cite our paper:\n```\n@inproceedings{SkCoder,\n  author       = {Jia Li and\n                  Yongmin Li and\n                  Ge Li and\n                  Zhi Jin and\n                  Yiyang Hao and\n                  Xing Hu},\n  title        = {SkCoder: {A} Sketch-based Approach for Automatic Code Generation},\n  booktitle    = {45th {IEEE/ACM} International Conference on Software Engineering,\n                  {ICSE} 2023, Melbourne, Australia, May 14-20, 2023},\n  pages        = {2124--2135},\n  publisher    = {{IEEE}},\n  year         = {2023},\n  url          = {https://doi.org/10.1109/ICSE48619.2023.00179},\n  doi          = {10.1109/ICSE48619.2023.00179},\n  timestamp    = {Wed, 19 Jul 2023 10:09:12 +0200},\n  biburl       = {https://dblp.org/rec/conf/icse/LiLLJHH23.bib},\n  bibsource    = {dblp computer science bibliography, https://dblp.org}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "SkCoder: A Sketch-based Approach for Automatic Code Generation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{SkCoder,\n    bibsource = {dblp computer science bibliography, https://dblp.org},\n    biburl = {https://dblp.org/rec/conf/icse/LiLLJHH23.bib},\n    timestamp = {Wed, 19 Jul 2023 10:09:12 +0200},\n    doi = {10.1109/ICSE48619.2023.00179},\n    url = {https://doi.org/10.1109/ICSE48619.2023.00179},\n    year = {2023},\n    publisher = {{IEEE}},\n    pages = {2124--2135},\n    booktitle = {45th {IEEE/ACM} International Conference on Software Engineering,\n{ICSE} 2023, Melbourne, Australia, May 14-20, 2023},\n    title = {SkCoder: {A} Sketch-based Approach for Automatic Code Generation},\n    author = {Jia Li and\nYongmin Li and\nGe Li and\nZhi Jin and\nYiyang Hao and\nXing Hu},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1109/ICSE48619.2023.00179",
                "title": "SkCoder: {A} Sketch-based Approach for Automatic Code Generation",
                "author": "Jia Li and\nYongmin Li and\nGe Li and\nZhi Jin and\nYiyang Hao and\nXing Hu",
                "url": "https://doi.org/10.1109/ICSE48619.2023.00179"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Then, you can run the inference script to generate the code for the test data.\n```Bash\ncd editor/sh\npython run_exp.py --task hearthstone --gpu {gpu_ids}\n```\n \n",
                "original_header": "Releasing a trained model"
            },
            "confidence": 0.9996974511383012,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Then, you can run the inference script to generate the code for the test data.\n```Bash\ncd editor/sh\npython run_exp.py --task hearthstone --gpu {gpu_ids}\n```\n \n",
                "original_header": "Releasing a trained model"
            },
            "confidence": 0.9285263510644758,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "SkCoder: A Sketch-based Approach for Automatic Code Generation"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2302.06144"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/LJ2lijia/SkCoder/main/README.md"
        }
    ]
}