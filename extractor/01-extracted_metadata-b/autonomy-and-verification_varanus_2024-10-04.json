{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:29:20"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/autonomy-and-verification/varanus",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "autonomy-and-verification",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-09-03T15:49:16Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-08-21T16:49:06Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/gpl-3.0",
                "type": "License",
                "name": "GNU General Public License v3.0",
                "url": "https://api.github.com/licenses/gpl-3.0",
                "spdx_id": "GPL-3.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "To quote from the FDR website\n\"All use of FDR require a license, however, you do **not** need to purchase a license if you are engaged in normal academic activity.\"\n\nA free academic license is available from the license dialogue, when starting FDR. License details can be found on the [FDR Licensing Webpage](https://cocotec.io/fdr/licensing.html)\n\n",
                "type": "Text_excerpt",
                "original_header": "FDR License",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Prerequisites",
                    "FDR"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A Runtime Verification toolchain that uses a CSP model as its oracle.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Varanus is a Runtime Verification (RV) toolchain for checking a program is obeying its specification. The specification must be written in Communicating Sequential Processes (CSP) and is assumed to parse correctly. Varanus listens to the events produced by a System Under Analysis (SUA), and checks that these events form a valid trace for the CSP specification. \n",
                "original_header": "Runtime Verification Toolchain using CSP and FDR"
            },
            "confidence": 0.9483464833980977,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "varanus",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "autonomy-and-verification/varanus",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/autonomy-and-verification/varanus/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/autonomy-and-verification/varanus/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "communicating-sequential-processes, runtime-monitoring, runtime-verification",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/autonomy-and-verification/varanus/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 1658334
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/autonomy-and-verification/varanus/releases/42971405",
                "tag": "v0.88.1",
                "name": "Version of Varanus for FMICS",
                "author": {
                    "name": "mluckcuck",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/autonomy-and-verification/varanus/tarball/v0.88.1",
                "zipball_url": "https://api.github.com/repos/autonomy-and-verification/varanus/zipball/v0.88.1",
                "html_url": "https://github.com/autonomy-and-verification/varanus/releases/tag/v0.88.1",
                "url": "https://api.github.com/repos/autonomy-and-verification/varanus/releases/42971405",
                "release_id": 42971405,
                "date_created": "2021-05-14T17:01:49Z",
                "date_published": "2021-05-14T17:03:13Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/autonomy-and-verification/varanus/releases/33462859",
                "tag": "NFM-Data",
                "author": {
                    "name": "mluckcuck",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/autonomy-and-verification/varanus/tarball/NFM-Data",
                "zipball_url": "https://api.github.com/repos/autonomy-and-verification/varanus/zipball/NFM-Data",
                "html_url": "https://github.com/autonomy-and-verification/varanus/releases/tag/NFM-Data",
                "url": "https://api.github.com/repos/autonomy-and-verification/varanus/releases/33462859",
                "release_id": 33462859,
                "date_created": "2020-07-08T17:08:53Z",
                "date_published": "2020-11-04T16:39:07Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/autonomy-and-verification/varanus/tree/master/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "Varanus has been built and (only) tested on Ubuntu 19.10/20.04 using Python 2.7.17/18\n",
                "type": "Text_excerpt",
                "original_header": "Prerequisites",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "Varanus is written using Python 2.7 because it uses FDR4 to parse and compile CSP specifications, and FDR4's Python interface \nis not compatible with Python 3.\n\n* yaml package `pip install pyyaml` or `pip2 install pyyaml`\n* websocket package `pip install websocket-client` or  `pip2 install websocket-client`\n",
                "type": "Text_excerpt",
                "original_header": "Python",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "Varanus assumes a pre-existing installation of [FDR4](https://cocotec.io/fdr/). This used to parse the CSP and check for monitorability. \n\nFrom the [FDR](https://cocotec.io/fdr/) website (accessed: 2020-07-08), install using:\n```bash\nsudo sh -c 'echo \"deb http://dl.cocotec.io/fdr/debian/ fdr release\\n\" > /etc/apt/sources.list.d/fdr.list'\nwget -qO - http://dl.cocotec.io/fdr/linux_deploy.key | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install fdr\n```\n",
                "type": "Text_excerpt",
                "original_header": "FDR",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Varanus is a terminal program within the `varanus/varanus-python` directory.\n\nThe basic usage is to run `varanus.py` passing a parameter that indicates either `online` or `offline` Runtime Verification, and a parameter that is the filepath of a `config` file (which, in turn, will point Varanus at the CSP model and System Under Analysis).\n\nThe basic workflow is:\n * Write a CSP specification for the System Under Analysis\n * Build the config file to point Varanus at the System Under Analysis and the CSP  specification (and some other parameters)\n * Run Varanus on the config file, telling it if it should do online or offline RV (if it's offline then the 'system' it is monitoring will be a trace file, also written separately.)\n\n```bash\nusage: varanus.py [-h] [-n NAME] [-l LOG_PATH]\n                  {offline,online,sm-test,offline-test,stress-test,build-only}\n                  config\n\npositional arguments:\n  {offline,online,sm-test,offline-test,stress-test,build-only}\n                        The type of action or check for Varanus to perform.\n  config                The location of the config file.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -n NAME, --name NAME  Override the config file's name. This is the name of\n                        the check and therefore name of the log file.\n  -l LOG_PATH, --log_path LOG_PATH\n                        Override the default log path.\n```\n\nSince Varanus 0.9.0 the parameters can be set in the config file, and some can be overridden at the command line.\n\n* `logFileName` is the name of the file to which Varanus will log its run\n* The parameters passed to the `Monitor()` constructor are the location of the model's main file and a JSON file containing a map of events in the SUA to events in the model (if these are different)\n* `_run_offline_traces_single()` performs offline RV, it takes the file path to a JSON file containing the trace to be checked. This method checks the whole trace in one go.\n* `run_online_traces_accumulate()`performs online RV, it takes the IP address and port number of a socket connection as parameters. This method checks traces incrementally, adding each event it receives to the trace and checking it. This method assumes there is a socket connection for it communicate with (in the MASCOT example, this is `varanus/mascot-test/dummy_mascot_socket.py`)\n - Adding the `timeRun=True` parameter to this method will collect timing information for each run.\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "The config file sets the following parameters:\n\n* `alphabet`: the alphabet of the CSP process used as the monitor oracle\n* `common_alphabet`: the alphabet of the System Under Analysis\n* `model`: the filepath (relative to the config file) of the CSP model\n* `main_process`: the name of the CSP process used as the oracle, which should exist in the `model`. For quick tests, this can be a simple CSP process written directly in to the parameter (e.g. `main_process: a -> b -> SKIP`) but the channels used have to exist in `model`.\n* `name`: the name of the check or test being performed, this is used in the names of the log files\n* `mode` (optional): there are two modes \"strict\", where Varanus will abort if an event from the System Under Analysis is not available in the current state of the model; and \"permissive\", where Varanus will ignore events from the System Under Analysis that are not available in the current state of the model (it will stay in the current state).\n* `trace_file` (optional): the trace that Varanus should check against the model. This is only used for offline Runtime Verification.\n",
                "type": "Text_excerpt",
                "original_header": "Config File",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "As a quick check that Varanus is installed correctly, you can enter the `varanus` root directly and run `python varanus-python/varanus.py offline rosmon-test/hibye.yaml` (assuming your `python` command points to Python 2.x) to run a very simple check on a simple process. If all is well, you should see `INFO:varanus:Trace file finished with no violations` at the end of the output to the terminal. \n\nLets look at the config file we've just checked:\n\n```yaml\n---\nalphabet: [hello, goodbye]\ncommon_alphabet: [hello,goodbye]\nmain_process: \"HI_BYE\"\nmodel: \"hi_bye.csp\"   \ntrace_file: \"hello_goodbye.json\"\nname: \"hi_bye_test\"\nmode: \"strict\"\n```\n\nThis is pointing Varanus at the `hi_bye.csp` file (`model`) and making it check the `main_process`, `HI_BYE`, against the `trace_file`, `hello_goodbye.json`.\n\nThe trace file is very simple, it only contains two events:\n\n``` json\n{\"topic\": \"hello\", \"data\": null, \"time\" : 0}\n{\"topic\": \"goodbye\", \"data\": null, \"time\" : 1}\n```\n\nHere, `hello_goodbye.json` is telling us that the System Under Analysis said \"hello\" and then \"goodbye\". Varanus has checked that the `HI_BYE` process specifies that this is acceptable behaviour.\n\nNow lets look at the `HI_BYE` process itself:\n\n```\nchannel hello, goodbye\n\nHI = (hello -> HI [] goodbye -> SKIP)\nBYE = goodbye -> SKIP\n\nHI_BYE = HI [|{|goodbye|}|] BYE\n```\n\nThis CSP specification introduces two `channels`, `hello` and `goodbye`. We can see that the `HI_BYE` process is defined by the parallel composition of the `HI` and `BYE` processes, where they must synchronise on the `goodbye` channel (meaning that they must perform `goodbye` at the same time). \n\n`HI` will allow any number of `hello` events, because it will recurse after performing `hello`, but if it performs `goodbye` then it will terminate. the `BYE` process is much simpler, it will just perform `goodbye`. \n\nThis means that the trace in `hello_goodbye.json` is valid, because `HI_BYE` can perform one `hello` followed by one `goodbye` event. \n\n\n",
                "type": "Text_excerpt",
                "original_header": "Quick Check",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "When running Varanus for the first time, you will receive a message saying that FDR requires a licence. As mentioned above, \"All use of FDR require a license, however, you do not need to purchase a license if you are engaged in normal academic activity.\" But a free academic license is available from the license dialogue, when starting FDR.\n\nRun `sudo fdr4` to start FDR, select the academic licence and add your name and an email address, to register for the licence. If this works, FDR will open, but you can close this and continue to use Varanus.\n",
                "type": "Text_excerpt",
                "original_header": "First Time Run",
                "parent_header": [
                    "Varanus 0.9.4",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "It seems this can just be installed: `sudo apt-get install libtinfo5`\n",
                "type": "Text_excerpt",
                "original_header": "Cannot run FDR: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "value": "This error happens on the License Application dialogue, when trying to validate the license.\nSome Linux distributions have moved the TLS certificate store, and FDR cannot find it, so it can't connect. FDR 4.2.7 says it fixes an issue with not being able to connect to the licensing server, but this error still sometimes appears.\n\nThe fix that seems to work is to copy the TLS certificates to the location that FDR is expecting them to be at:\n```\nsudo mkdir -p /etc/pki/tls/certs/\nsudo cp /etc/ssl/certs/ca-certificates.crt /etc/pki/tls/certs/ca-bundle.crt\n```\n",
                "type": "Text_excerpt",
                "original_header": "Cannot run FDR: Could not connect to FDR licensing server; please check your internet connection",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Using the instructions from: https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html\n\nThe instructions below work for **Ubuntu 22.10, 22.04, 21.10 or 20.04** (for 18.04, check https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html )\n\n```\nsudo add-apt-repository ppa:linuxuprising/libpng12\nsudo apt update\nsudo apt install libpng12-0\n```\n",
                "type": "Text_excerpt",
                "original_header": "Cannot Install FDR: Depends: libpng12-0 but it is not installable",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you have problems installing or running **FDR4** please check the [FDR Troubleshooting](docs/fdr-troubleshooting.md) document.\n \n",
                "original_header": "Troubleshooting"
            },
            "confidence": 0.9939232832677886,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Here, the workaround uses the Python 2.7 version of this library, aliasing it to the Python 2.6 version. \nMake sure that you have `libpython2.7.so.1.0` installed (it should be at `/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0`). If you do not, then you should be able to install it using:\n```bash\nsudo apt install python2.7-dev\n```\nWhen you are sure the library is installed, run the following:\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 \\\n/usr/lib/x86_64-linux-gnu/libpython2.6.so.1.0\n\n```\nwhich is modified from [Stack Exchange](https://askubuntu.com/questions/427884/libpython2-6-so-1-0-doesnt-exist), which adds a link from the missing `libpython2.6.so.1.0` to the existing `libpython2.7.so.1.0` file.\n \n",
                "original_header": "ImportError: libpython2.6.so.1.0: cannot open shared object file: No such file or directory"
            },
            "confidence": 0.9940852796880861,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "It seems this can just be installed: `sudo apt-get install libtinfo5`\n",
                "type": "Text_excerpt",
                "original_header": "Cannot run FDR: error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory",
                "parent_header": [
                    "Varanus 0.9.4"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Varanus 0.9.4"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
        }
    ]
}