{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:43:06"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/serperu/secer",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "serperu",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2017-06-05T11:00:49Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-03-23T01:04:32Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "SecEr: Erlang Code Evolution Control Tool",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "SecEr is a tool for Erlang able to automatically generate a test suite that checks the behaviour of a point of interest. It can be used for regression testing, by generating a test suite for a future comparison or by automatically comparing two releases of an Erlang module. Defining one point of interest for each module the tool compares all the values taken by both points of interest, notifying the user of any mismatching result. \nThis tool provides a new granularity level of tracing, any variable of the code can be traced whether it is in a pattern, a guard or simply inside an expression. \nSecEr implements a communication between Erlang modules and tools such as [TypEr](https://github.com/erlang/typer), [PropEr](https://github.com/manopapad/proper), and [CutEr](https://github.com/aggelgian/cuter). This means that SecEr handles the output of each tool and connects it with the next tool, taking advantage of the combined potential of the tools. \nIn the rest of this document we describe the main features and functionality of SecEr.\n \n",
                "original_header": "SecEr"
            },
            "confidence": 0.9326728244532625,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "secer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "serperu/secer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/serperu/secer/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/serperu/secer/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 12,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "cuter, proper, regression-testing, software-evolution, test-generation, tracing-applications",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/serperu/secer/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Erlang",
                "name": "Erlang",
                "type": "Programming_language",
                "size": 452592
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 869
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 693
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 607
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serperu/secer/master/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serperu/secer/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/serperu/secer/master/config/makeCuter.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "============\nSecEr makes use of the Erlang modules and tools [TypEr](https://github.com/erlang/typer), [PropEr](https://github.com/manopapad/proper), and [CutEr](https://github.com/aggelgian/cuter), so there are some prerequisites to use it.\nIn order to perform a correct execution of the tool, all [CutEr](https://github.com/aggelgian/cuter) dependencies need to be fulfiled ([CutEr dependencies](https://github.com/aggelgian/cuter/blob/master/README.md)). \n\n\t$ git clone --recursive https://github.com/serperu/secer.git\n\t$ cd secer/\n\t$ make \n\nThe first step clones the GitHub's repository content to the local system. Then, `make` is used to compile PropEr, CutEr and SecEr source files, leaving the tool ready to run.\n",
                "type": "Text_excerpt",
                "original_header": "Installation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "=====\n\nThere are two ways of running the tool, both considered in the command\n\n    ./secer -pois \"LIST_OF_POIS\" [-funs \"INPUT_FUNCTIONS\"] -to TIMEOUT \n           [-cfun \"COMPARISON_FUN\"]\n\nIf we want to run the command to only generate a test suite, we need to provide a list of POIs (LIST_OF_POIS) contained in double quotes, a list of initial functions (INPUT_FUNCTIONS) also between double quotes, and a timeout (TIMEOUT). On the other hand, if we want to perform a comparison of two Erlang files we just need to provide a list of related POIs from both programs.\n",
                "type": "Text_excerpt",
                "original_header": "Usage"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
        },
        {
            "result": {
                "value": "=======\nConsider the files `happy_old.erl` (with point of interest `{'happy_old.erl',10,{var,'Happy'},1}`) and `happy_new.erl` (with point of interest `{'happy_new.erl',21,'call',1}`) as two versions of the same program. \n\nFor a single file test generation with the function `main/2` as input and a timeout of 15 seconds, the secer command would be used as follows:\n\t\n    $ ./secer -pois \"[{{'happy_old.erl',10,{var,'Happy'},1}}]\"\n              -funs \"[main/2]\" -to 15\n\nThe result shows the number of tests generated by the tool, divided in tests executing the point of interest and tests not executing the point of interes. All the tests generated by the tool are saved in a file:\n\n\tFunction: main/2\n\t----------------------------\n\tGenerated tests: 272\n\tExecuting the point of interest: 272\n\tResults saved in: ./results/main_2.txt\n\t----------------------------\n\nOn the other hand, if we execute the command comparing both files (`happy_old.erl`,`happy_new.erl`), secer would be used as follows:\n\n    $ ./secer -pois \"[{{'happy_old.erl',10,{var,'Happy'},1},{'happy_new.erl',21,'call',1}}]\"\n              -funs \"[main/2]\" -to 15\n\nIn this case, the tool generates test cases by generating inputs for the specified functions and it compares the values taken by the defined points of interest. If there is no mismatching test the tool will show a message similar to\n\n\tFunction: main/2\n\t----------------------------\n\tGenerated tests: 320\n\tBoth versions of the program generate identical traces for the defined points of interest\n\t----------------------------\n\ndescribing the number of tests generated for the function and notifying the user that the behaviour was the same in both versions.\n\nOtherwise, if any test mismatches, the message shown will be similar to\n\n\tFunction: main/2\n\t----------------------------\n\tGenerated tests: 272\n\tMismatching tests: 21 (7.72%)\n\tPOIs comparison:\n        + {{'happy0.erl',10,{var,'Happy'},1},{'happy1.erl',21,call,1}} => 21 Errors\n\tAll mismatching results were saved at: ./results/main_2.txt \n\t--- First error detected ---\n\tCall: main(4,2)\n\tError detected: Unexpected trace value\n\tPOI: ({'happy0.erl',10,{var,'Happy'},1}) trace:\n\t    [false ,false ,false ,true ,false ,false ,true]\n\tPOI: ({'happy1.erl',21,call,1}) trace:\n\t    [false ,false ,false ,false ,false ,false ,true ,false ,false ,true]\n\t----------------------------\n\ndescribing the number of generated tests, the number of mismatching tests and the first mismatching test found by the tool, with the values taken by both traces of the point of interest. All mismatching tests will be saved in the specified file.\n\n",
                "type": "Text_excerpt",
                "original_header": "Example"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "SecEr"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/serperu/secer/master/README.md"
        }
    ]
}