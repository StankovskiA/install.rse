{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 01:02:12"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/soarsmu/CodeNLM",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "soarsmu",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-09-24T03:38:32Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2022-05-06T02:28:55Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Code for paper \"Can Identifier Splitting Improve Open-Vocabulary Language Model of Code?\" (SANER 2022 ERA)",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "This is the replication package for the paper \"Can Identifier Splitting Improve Open-Vocabulary Language Model of Code?\" (SANER 2021 ERA) [[arXiv]](https://arxiv.org/abs/2201.01988).\n",
                "type": "Text_excerpt",
                "original_header": "Introduction"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "**data** contains scripts for processing data. \n**reader.py** contains utility functions for reading data and providing batches for training and testing of models. \n**code_nlm.py** contains the implementation of LMs for code and supports training, perplexity/cross-entropy calculation, code-completion simulation, measuring identifier specific performance for code completion.\n \n",
                "original_header": "Code Structure"
            },
            "confidence": 0.9673610627803827,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "CodeNLM",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "soarsmu/CodeNLM",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/soarsmu/CodeNLM/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/soarsmu/CodeNLM/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/soarsmu/CodeNLM/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 60939
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 7143
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/scripts/c_exp.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/scripts/c_test.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/scripts/c_exp_merge.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/scripts/c_mrr.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "```\n# Python==3.6 is required, Python>3.6 may not supported due to the tensorflow version.\npip install numpy==1.18.1 \npip install tensorflow-gpu==1.12.3\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Thanks for the open-source code from https://github.com/mast-group/OpenVocabCodeNLM.git. \n",
                "original_header": "Misc"
            },
            "confidence": 0.9998498662251822,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The dataset is from [Karampatsis et al.'s work](https://dl.acm.org/doi/10.1145/3377811.3380342).\n",
                "type": "Text_excerpt",
                "original_header": "Dataset and Processing",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        },
        {
            "result": {
                "value": "Validation: https://zenodo.org/record/3628638/files/validation_set_pre?download=1\n\nTest: https://zenodo.org/record/3628638/files/c_test_set_pre?download=1\n\n**data/split.py** use Ronin to split identifers\n\n**data/merge.py** merge corpora.\n\nThe BPE implementation used can be found here: https://github.com/rsennrich/subword-nmt \n\nTo apply byte pair encoding to word segmentation, invoke these commands:\n```\nsubword-nmt learn-bpe -s {num_operations} < {train_file} > {codes_file}\nsubword-nmt apply-bpe -c {codes_file} < {test_file} > {out_file}\n# num_operations = The number of BPE ops e.g., 10000\n# train_file = The file on which to learn the encoding\n# codes_file = The file in which to output the learned encoding\n# test_file = The file to segment with the learned encoding\n# out_file = The file in which to save the now segmented test_file\n```\n\n## Training\n\n```\n# Directory that contains train/validation/test data etc.\nDATA_HOME=data/c/\n# Directory in which the model will be saved.\nMODEL_DIR==data/c/model\nmkdir $MODEL_DIR\n\n# Filenames\nTRAIN_FILE=c_training_bpe_10000\nVALIDATION_FILE=c_validation_bpe_10000\nTEST_FILE=c_test_bpe_10000\nID_MAP_FILE=data/c/id_map_c_bpe_10000\n\n# Maximum training epochs\nEPOCHS=50\n# Initial learning rate\nLR=0.1\n# Training batch size\nBATCH_SIZE=32\n# RNN unroll timesteps for gradient calculation.\nSTEPS=200\n# 1 - Dropout probability\nKEEP_PROB=0.5 \n# RNN hidden state size\nSTATE_DIMS=512 \n# Checkpoint and validation loss calculation frequency.\nCHECKPOINT_EVERY=5000 \n\npython code_nlm.py --data_path $DATA_HOME --train_dir $MODEL_DIR --train_filename $TRAIN_FILE --validation_filename $VALIDATION_FILE --gru True --hidden_size $STATE_DIMS  --batch_size $BATCH_SIZE --word_level_perplexity True --cross_entropy True --steps_per_checkpoint $CHECKPOINT_EVERY --max_epoch $EPOCHS\n```\n",
                "type": "Text_excerpt",
                "original_header": "Training",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        },
        {
            "result": {
                "value": "```\n# Calculating test set entropy\npython code_nlm.py --test True --data_path $DATA_HOME --train_dir $MODEL_DIR --test_filename $TEST_FILE --gru True --batch_size $BATCH_SIZE --word_level_perplexity True --cross_entropy True\n```\n",
                "type": "Text_excerpt",
                "original_header": "Entropy Calculation",
                "parent_header": [
                    "Usage",
                    "Test Scenarios"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        },
        {
            "result": {
                "value": "In this scenario the batch_size option is used to set the beam size.\n```\npython code_nlm.py --completion True --data_path $DATA_HOME --train_dir $MODEL_DIR --test_filename $TEST_FILE --gru True --batch_size $BATCH_SIZE\n```\n\nOr identifiers only:\n\n```\npython code_nlm.py --completion True --data_path $DATA_HOME --train_dir $MODEL_DIR --test_filename $TEST_FILE --identifier_map $ID_MAP_FILE --gru True --batch_size $BATCH_SIZE\n```\n",
                "type": "Text_excerpt",
                "original_header": "Test Code Completion",
                "parent_header": [
                    "Usage",
                    "Test Scenarios"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{shi2022can,\n    organization = {IEEE},\n    year = {2022},\n    pages = {1134--1138},\n    booktitle = {2022 IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)},\n    author = {Shi, Jieke and Yang, Zhou and He, Junda and Xu, Bowen and Lo, David},\n    title = {Can Identifier Splitting Improve Open-Vocabulary Language Model of Code?},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Can Identifier Splitting Improve Open-Vocabulary Language Model of Code?",
                "author": "Shi, Jieke and Yang, Zhou and He, Junda and Xu, Bowen and Lo, David"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Introduction"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2201.01988"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/soarsmu/CodeNLM/main/README.md"
        }
    ]
}