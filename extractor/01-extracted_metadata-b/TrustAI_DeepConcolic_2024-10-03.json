{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 22:08:22"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/TrustAI/DeepConcolic",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "TrustAI",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2018-04-30T16:44:20Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-01T09:04:54Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/bsd-3-clause",
                "type": "License",
                "name": "BSD 3-Clause \"New\" or \"Revised\" License",
                "url": "https://api.github.com/licenses/bsd-3-clause",
                "spdx_id": "BSD-3-Clause"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "BSD 3-Clause License\n\nCopyright (c) 2018, TrustAI\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Concolic Testing for Deep Neural Networks",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "This repository includes a few software packages, all of which are dedicated for the analysis of deep neural netowrks (or tree ensembles) over its safety and/or security properties.\n1. DeepConcolic, a coverage-guided testing tool for convolutional neural networks. Now, it includes a major upgrade based on Bayesian Network based Abstraction.\n2. testRNN, a coverage-guided testing tool for Long short-term memory models (LSTMs). LSTMs are a major class of recurrent neural networks.\n3. EKiML, a tool for backdoor embedding and detection for tree ensembles.\n4. GUAP: a generalised universal adversarial perturbation. It generates universersal adversarial perburbation that may be applied to many inputs at the same time.\n\nIn the following, after the installation and download of example models, we will present them one by one.\n",
                "type": "Text_excerpt",
                "original_header": "General Introduction"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\nThe tutorial document for this repository is in (tutorial.pdf)\n \n",
                "original_header": "DeepConcolic (Testing for Deep Neural Networks)"
            },
            "confidence": 0.9974351209154746,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Concolic testing alternates between CONCrete program execution and symbOLIC analysis to explore the execution paths of a software program and to increase code coverage. In this paper, we develop the first concolic testing approach for Deep Neural Networks (DNNs). More specifically, we utilise quantified linear arithmetic over rationals to express test requirements that have been studied in the literature, and then develop a coherent method to perform concolic testing with the aim of better coverage. Our experimental results show the effectiveness of the concolic testing approach in both achieving high coverage and finding adversarial examples. \n",
                "original_header": "Tool 1 -- DeepConcolic: Concolic Testing for Convolutional Neural Networks"
            },
            "confidence": 0.9349448619323072,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Then, a new dataset can be registered by calling the `deepconcolic.datasets.register_dataset` function with a name for the dataset as first argument, and a function that loads and returns a dataset description as second argument.\nThe latter function must accept any set of named arguments (for future extensions), and return a tuple with: (i) a pair of arrays containting trainting data and labets; (ii) a similar pair for validation; (iii) the shape of each individual input element; (iv) a descriptor string in {`image`, `normalized`, `unknown`} (used for determining the input feature encoding\u2014note the format of this descriptor is likely to be refined in future versions); and (v) a list of strings showing the individual label names.\nThe dataset arrays can be given using [`numpy.ndarray`](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html) or [`pandas.Dataframe`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) dataframes.\nThe typical pattern is as follows (for loading, e.g., the [MNIST dataset provided by `tensorflow`](https://www.tensorflow.org/api_docs/python/tf/keras/datasets/mnist/load_data), as already done in [`deepconcolic.datasets`](deepconcolic/datasets.py)):\n```python\ndef load_mnist_data (**_):\n  import tensorflow as tf\n  img_shape = 28, 28, 1\n  (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data ()\n  x_train = x_train.reshape (x_train.shape[0], *img_shape).astype ('float32') / 255\n  x_test = x_test.reshape (x_test.shape[0], *img_shape).astype ('float32') / 255\n  return (x_train, y_train), (x_test, y_test), img_shape, 'image', \\\n         [ str (i) for i in range (0, 10) ]\nregister_dataset ('mnist', load_mnist_data)\n``` \n",
                "original_header": "Working with Your Own Datasets"
            },
            "confidence": 0.9532955522395874,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In this paper, for the first time we propose a unified and flexible framework, which can capture the distribution of the unknown additive and non-additive adversarial perturbations jointly for crafting Generalized Universal Adversarial Perturbations.\nSpecifically, GUAP can generate either additive (i.e., l_inf-bounded) or non-additive (i.e., spatial transformation) perturbations, or a combination of both, which considerably generalizes the attacking capability of current universal attack methods. \n",
                "original_header": "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
            },
            "confidence": 0.956856612789385,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "DeepConcolic",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "TrustAI/DeepConcolic",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/TrustAI/DeepConcolic/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/TrustAI/DeepConcolic/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 117,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 45,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/TrustAI/DeepConcolic/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 1016197
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 773054
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MATLAB",
                "name": "MATLAB",
                "type": "Programming_language",
                "size": 9993
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 803
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Batchfile",
                "name": "Batchfile",
                "type": "Programming_language",
                "size": 799
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 319
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/GUAP/Colab_GUAP.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/GUAP/Colab_GUAP.ipynb"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/tuto-scripts/bwrap-shell.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "First of all, please set up a conda environment\n\n```sh\nconda create --name deepconcolic python==3.7\nconda activate deepconcolic\n```\nThis should be followed by installing software dependencies:\n```sh\nconda install opencv nltk matplotlib\nconda install -c pytorch torchvision\npip3 install numpy==1.19.5 scipy==1.4.1 tensorflow\\>=2.4 pomegranate==0.14 scikit-learn scikit-image pulp keract np_utils adversarial-robustness-toolbox parse tabulate pysmt saxpy keras menpo patool z3-solver pyvis\n```",
                "type": "Text_excerpt",
                "original_header": "Installation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "For long short-term memory models (LSMTs), we design new coverage metrics to consider the internal behaviour of the LSTM layers in processing sequential inputs. We consider not only the tighter metric that quantifies the temporal behaviour (i.e., temporal coverage) but also some looser metrics that quantify either the gate values (i.e., Neuron Coverage and Boundary Coverage) or value change in one step (i.e., Stepwise Coverage).\n\nThe paper is available at https://arxiv.org/pdf/1911.01952.pdf.\n",
                "type": "Text_excerpt",
                "original_header": "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "1. Neuron Coverage (NC),\n2. Boundary Coverage (BC),\n3. Stepwise Coverage (SC),\n4. Temporal Coverage (TC)\n",
                "type": "Text_excerpt",
                "original_header": "Four coverage test metrics are applicable:",
                "parent_header": [
                    "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "1. Fashion-MNIST\n2. Sentiment Analysis,\n3. MNIST Handwritten Digits,\n4. UCF101 (need to download and put into the dataset file)\n\nAs running example, we download the pre-trained Fasion-MNIST model as follows.\n\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/fashion_mnist_lstm.h5\n```\n",
                "type": "Text_excerpt",
                "original_header": "A few pre-trained LSTM models:",
                "parent_header": [
                    "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "DeepConcolic provides means for working with additional datasets, that can be provided via a dedicate plugin system.\nSuch plugins are Python modules that are loaded when the tool starts, and are searched within any directory listed in the colon-separated environment variable `DC_PLUGINS_PATH` if this variable is defined, or else within the `./dc_plugins` directory if it exists (note the latter is relative to the current working directory). \n",
                "original_header": "Working with Your Own Datasets"
            },
            "confidence": 0.9999991827799519,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/workflow.png\" width=\"100%\"> \n",
                "original_header": "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
            },
            "confidence": 0.9797911149790164,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```sh\npython run_fashion_mnist.py --cuda --gpuid 0 --resume\n``` \n",
                "original_header": "Generalizing UAP for Fashion_MNIST:"
            },
            "confidence": 0.9959651137386872,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```sh\npython run_cifar.py --cuda --gpuid 0 --model VGG19 --tau 0.1 --eps 0.03\n``` \n",
                "original_header": "Generalizing UAP for Cifar10:"
            },
            "confidence": 0.9768358934189602,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```sh\npython run_imagenet.py --cuda --gpuid 0,1 --model ResNet152 --tau 0.1 --eps 0.03\n```\n \n",
                "original_header": "Generalizing UAP for ImageNet:"
            },
            "confidence": 0.9768358934189602,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/Cifar10.png\" width=\"70%\"> \n<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/ImageNet.png\" width=\"71%\"> \n",
                "original_header": "Experimental results:"
            },
            "confidence": 0.9939621896472493,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "download": [
        {
            "result": {
                "value": "We use Fashion-MNIST dataset as the running example. The following are two pre-trained mmodels, one larger and one smaller.\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/small_model_fashion_mnist.h5\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/large_model_fashion_mnist.h5\n```\n",
                "type": "Text_excerpt",
                "original_header": "Download Example Models"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "As the running example, we download the pre-trained HAR tree model as follows.\n\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/har_tree_black-box.npy\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/har_forest_black-box.npy\n```\n\n## Command to Run\n\n```\npython -m EKiML.main --Dataset <DatasetName>\n\t\t     --Mode <modeName>\n\t\t     --Embedding_Method <embeddingMethod>\n\t\t     --Model <modeType>\n\t\t     --Pruning <pruningFlag>\n\t\t     --SaveModel <saveModelFlag>\n\t\t     --workdir <workDirectory>\n```\nwhere the flags have multiple options:\n\n1. `<DatasetName>` is in {'iris', 'har', 'breast_cancer', 'mushroom', 'nursery, 'cod-rna', 'sensorless', 'mnist'}.\n2. `<modeName>` is in {'embedding', 'synthesis'}, where 'synthesis' denotes the \"extraction\".\n3. `<embeddingMethod>` is in {'black-box', 'white-box'}\n4. `<modeType>` is in {'forest', 'tree'}\n5. `<pruningFlag>` is in {True, False}, with default value False\n6. `<saveModelFlag>` is in {True, False}, with default value False\n7. `<workDirectory>` is the working directory, with default value 'EKiML_workdir'\n8. `<Datadir>` is the directory where dataset files are located (default is 'EKiML/dataset')\n\nFor example, we can run the following\n```sh\npython -m EKiML.main --Dataset har --Mode synthesis --Embedding_Method black-box --Model tree --workdir 'EKiML_har' --Datadir 'datasets'\n```\nwhich suggests that we are considering the HAR dataset, tryng to synthesise knowledge from a pre-trained tree by applying our black-box synthesis algorithm.\n\n",
                "type": "Text_excerpt",
                "original_header": "Download pre-trained models",
                "parent_header": [
                    "Tool 3 -- EKiML: Embedding Knolwedge into Tree Ensembles"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/cifar10_vgg19.pth\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/cifar10_resnet101.pth\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/cifar10_dense121.pth\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/fashion_mnist_modela.pth\n```\n\n## Command to Run\n(from within the ```GUAP``` sub-directory)\n```\nusage: run_xxxxxx.py [-h] [--dataset DATASET] [--lr LR]\n                            [--batch-size BATCH_SIZE] [--epochs EPOCHS]\n                            [--l2reg L2REG] [--beta1 BETA1] [--tau TAU]\n                            [--eps EPS] [--model MODEL]\n                            [--manualSeed MANUALSEED] [--gpuid GPUID] [--cuda]\n                            [--resume] [--outdir OUTDIR]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dataset DATASET     Fashion-MNIST\n  --lr LR               Learning rate\n  --batch-size BATCH_SIZE\n  --epochs EPOCHS       number of epochs to train for\n  --l2reg L2REG         weight factor for l2 regularization\n  --beta1 BETA1         beta1 for adam\n  --tau TAU             max flow magnitude\n  --eps EPS             allow for linf noise\n  --model MODEL         modelA\n  --manualSeed MANUALSEED\n                        manual seed\n  --gpuid GPUID         multi gpuid\n  --cuda                enables cuda\n  --resume              load pretrained model\n  --outdir OUTDIR       output dir\n```\n",
                "type": "Text_excerpt",
                "original_header": "Download target Models",
                "parent_header": [
                    "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "We use Fashion-MNIST dataset as the running example. The following are two pre-trained mmodels, one larger and one smaller.\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/small_model_fashion_mnist.h5\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/large_model_fashion_mnist.h5\n```\n",
                "type": "Text_excerpt",
                "original_header": "Download Example Models"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "There is also a notebook demo [```Colab_GUAP.ipynb```](https://nbviewer.jupyter.org/github/YanghaoZYH/GUAP/blob/master/Colab_GUAP.ipynb), which can be run on the Colab.\n\n",
                "type": "Text_excerpt",
                "original_header": "Colab demo:",
                "parent_header": [
                    "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "```\nusage: python3 -m deepconcolic.main [-h] --dataset\n                                    {OpenML:har,cifar10,fashion_mnist,mnist}\n                                    --model MODEL --outputs DIR --criterion\n                                    {nc,ssc,ssclp,bfc,bfdc} --norm {l0,linf}\n                                    [--setup-only] [--init INT]\n                                    [--max-iterations INT] [--save-all-tests]\n                                    [--rng-seed SEED]\n                                    [--extra-tests DIR [DIR ...]]\n                                    [--filters {LOF}] [--norm-factor FLOAT]\n                                    [--lb-hard FLOAT] [--lb-noise FLOAT]\n                                    [--mcdc-cond-ratio FLOAT]\n                                    [--top-classes CLS]\n                                    [--layers LAYER [LAYER ...]]\n                                    [--feature-index INT] [--dbnc-spec SPEC]\n                                    [--dbnc-abstr PKL]\n\nConcolic testing for Neural Networks\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --dataset {OpenML:har,cifar10,fashion_mnist,mnist}\n                        selected dataset\n  --model MODEL         the input neural network model (.h5 file or \"vgg16\")\n  --outputs DIR         the output test data directory\n  --criterion {nc,ssc,ssclp,bfc,bfdc}\n                        the test criterion\n  --norm {l0,linf}      the norm metric\n  --setup-only          only setup the coverage critierion and analyzer, and\n                        terminate before engine initialization and startup\n  --init INT            number of test samples to initialize the engine\n  --max-iterations INT  maximum number of engine iterations (use < 0 for\n                        unlimited)\n  --save-all-tests      save all generated tests in output directory; only\n                        adversarial examples are kept by default\n  --rng-seed SEED       Integer seed for initializing the internal random\n                        number generator, and therefore get some(what)\n                        reproducible results\n  --extra-tests DIR [DIR ...], +i DIR [DIR ...]\n                        additonal directories of test images\n  --filters {LOF}       additional filters used to put aside generated test\n                        inputs that are too far from training data (there is\n                        only one filter to choose from for now; the plural is\n                        used for future-proofing)\n  --norm-factor FLOAT   norm distance upper threshold above which generated\n                        inputs are rejected by the oracle (default is 1/4)\n  --lb-hard FLOAT       hard lower bound for the distance between original and\n                        generated inputs (concolic engine only---default is\n                        1/255 for image datasets, 1/100 otherwise)\n  --lb-noise FLOAT      extra noise on the lower bound for the distance\n                        between original and generated inputs (concolic engine\n                        only---default is 1/10)\n  --mcdc-cond-ratio FLOAT\n                        the condition feature size parameter (0, 1]\n  --top-classes CLS     check the top-CLS classifications for models that\n                        output estimations for each class (e.g. VGG*)\n  --layers LAYER [LAYER ...]\n                        test layers given by name or index\n  --feature-index INT   to test a particular feature map\n  --dbnc-spec SPEC      Feature extraction and discretisation specification\n  --dbnc-abstr PKL, --bn-abstr PKL\n                        input BN abstraction (.pkl)\n```\n\nThe neural network model under tested is specified by ``--model`` and a set of raw test data should be given\nby using ``--inputs``. Some popular datasets like MNIST and CIFAR10 can be directly specified by using the\n``--dataset`` option directly. ``--criterion`` is used to choose the coverage\ncriterion and ``--norm`` helps select the norm metric to measure the distance between inputs. Some examples\nto run DeepConcolic are in the following.\n\nTo run an MNIST model\n\n```sh\npython -m deepconcolic.main --model saved_models/mnist_complicated.h5 --dataset mnist --outputs outs/\n```\n\nTo run an CIFAR10 model\n\n```sh\npython -m deepconcolic.main --model saved_models/cifar10_complicated.h5 --dataset cifar10 --outputs outs/\n```\n\nTo test a particular layer\n```sh\npython -m deepconcolic.main --model saved_models/cifar10_complicated.h5 --dataset cifar10 --outputs outs/ --layers 2\n```\n\nTo run MC/DC for DNNs on the CIFAR-10 model\n\n```sh\npython -m deepconcolic.main --model saved_models/cifar10_complicated.h5 --criterion ssc --mcdc-cond-ratio 0.1 --dataset cifar10 --outputs outs\n```\n\n\n\nTo run Concolic Sign-sign-coverage (MC/DC) for DNNs on the MNIST model\n\n```sh\npython -m deepconcolic.main --model saved_models/mnist_complicated.h5 --dataset mnist --outputs outs --criterion ssclp\n```\n",
                "type": "Text_excerpt",
                "original_header": "Command to Run",
                "parent_header": [
                    "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "We have two commands to run testing procedure and to run result analysis procedure, respectively.\n",
                "type": "Text_excerpt",
                "original_header": "Command to Run:",
                "parent_header": [
                    "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "```\npython -m testRNN.main --model <modelName>\n                           --TestCaseNum <Num. of Test Cases>\n                           --threshold_SC <SC threshold>\n                           --threshold_BC <BC threshold>\n                           --symbols_TC <Num. of symbols>\n                           --seq <seq in cells to test>\n                           --mode <modeName>\n                           --outputs <output directory>\n```\nwhere:\n\n1. `<modelName>` is in {`sentiment`, `mnist`, `fashion_mnist`, `ucf101`}\n2. `<Num. of Test Cases>` is the expected number of test cases\n3. `<Mutation Method>` is in {`random`, `genetic`}\n4. `<SC threshold>` is in [0, 1]\n5. `<BC threshold>` is in [0, 1]\n6. `<Num. of symbols>` is in {1, 2, 3...}\n7. `<seq in cells to test>` is in {`mnist: [4, 24], fashion_mnist: [4, 24], sentiment: [400, 499], ucf101: [0, 10]`}\n8. `<modeName>` is in {`train`, `test`} with default value `test`\n9. `<output directory>` specifies the path of the directory to save the output record and generated examples\n\nFor example, we can run the following\n```sh\npython -m testRNN.main --model fashion_mnist --TestCaseNum 10000 --Mutation random --threshold_SC 0.6 --threshold_BC 0.7 --symbols_TC 3 --seq [4,24] --outputs testRNN_output\n```\nwhich says that, we are working with Fashion-MNIST model, and the genetic algorithm based test case generation will terminate when the number of test cases is over 10000. We need to specify other parameters including threshold_SC, threshold_BC, symbols_TC, and seq. Moreover, the log is generated to the file testRNN_output/record.txt. Also the output of adversarial examples can be found in testRNN_output/adv_output\n",
                "type": "Text_excerpt",
                "original_header": "to run testing procedure",
                "parent_header": [
                    "Tool 2 -- testRNN: Coverage Guided Testing for Recurrent Neural Networks",
                    "Command to Run:"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "```sh\npip install torch torchvision matplotlib\n```\n",
                "type": "Text_excerpt",
                "original_header": "Running environment:",
                "parent_header": [
                    "Tool 4 -- GUAP: Generalised Universal Adversarial Perturbation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "DeepConcolic additionally features an experimental fuzzing engine.  The following command illustrates how to exercise this engine on a classifier for the CIFAR10 dataset: it will generate at most 1000 images obtained by mutating inputs randomly drawn from the CIFAR10 validation dataset, and save them into the ``outs/cifar10-fuzzing-basic`` directory.  Aversarial examples can be identified in the latter directory by searching for files named ``<test-number>-adv-<wrong-label>.png``, derived from file ``<test-number>-original-<true-label>.png``.  Passed tests are named in a similar way, as ``<test-number>-ok-<label>.png``.\n```sh\npython3 -m deepconcolic.fuzzer --dataset cifar10 --model saved_models/cifar10_complicated.h5 --processes 2 --outputs outs/cifar10-fuzzing-basic -N 1000\n```\nFurther options are available to use this engine.  It is for instance possible to specify a set of files used as seeds for fuzzing with the option ``--inputs``, as in:\n```sh\npython3 -m deepconcolic.fuzzer --dataset mnist --model saved_models/mnist_complicated.h5  --inputs data/mnist-seeds --processes 5 --outputs outs/mnist-fuzzing-given-seeds -N 1000\n```\nor sample ``N`` inputs from the validation dataset beforehand with ``--sample N``:\n```sh\npython3 -m deepconcolic.fuzzer --dataset cifar10 --model saved_models/cifar10_complicated.h5 --sample 10 --processes 5 --outputs outs/cifar10-fuzzing-sub-sample10 -N 1000\n```\n \n",
                "original_header": "Fuzzing Engine"
            },
            "confidence": 0.9111092965254637,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "For further illustrative purposes, we provide [an example dataset plugin](dc_plugins/toy_datasets/random.py), which can be used to randomly generate classification tasks.\nThis plugin registers several datasets (named, e.g., `rand10_2`, `rand10_5`, and `rand100_5`) upon startup of DeepConcolic, which should then show as valid options for the `--dataset` option.\nWe also provide a utility script to construct and train small DNNs for the above toy datasets:\nTo train a classifier for the `rand10_2` dataset, and then print a short classification report:\n```sh\n# The following saves the trained model under `/tmp' on Unix-style systems:\npython3 -m utils.train4random rand10_2\npython3 -m deepconcolic.eval_classifier --dataset rand10_2 --model /tmp/rand10_2_dense_50_50_10_10.h5\n```\nTo run the fuzzer on the newly trained model, using a sample of 10 initial test data and 5 processes:\nBASH3*\nThe above command outputs new inputs within a file `outs/rand10_2-fuzz1000/new_inputs.csv`. \n",
                "original_header": "Working with Your Own Datasets"
            },
            "confidence": 0.9400027859859239,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{swrhkk2018,\n    year = { 2018 },\n    isbn = { 978-1-4503-5937-5 },\n    pages = { 109--119 },\n    publisher = { ACM },\n    booktitle = { Automated Software Engineering (ASE) },\n    title = { Concolic Testing for Deep Neural Networks },\n    author = { Sun, Youcheng\nand Wu, Min\nand Ruan, Wenjie\nand Huang, Xiaowei\nand Kwiatkowska, Marta\nand Kroening, Daniel },\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": " Concolic Testing for Deep Neural Networks ",
                "author": " Sun, Youcheng\nand Wu, Min\nand Ruan, Wenjie\nand Huang, Xiaowei\nand Kwiatkowska, Marta\nand Kroening, Daniel "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "@article{sun2018testing,\n    year = { 2018 },\n    journal = { arXiv preprint arXiv:1803.04792 },\n    title = { Testing Deep Neural Networks },\n    author = { Sun, Youcheng\nand Huang, Xiaowei\nand Kroening, Daniel },\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": " Testing Deep Neural Networks ",
                "author": " Sun, Youcheng\nand Huang, Xiaowei\nand Kroening, Daniel "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "@article{10.1145/3358233,\n    keywords = {test criteria, Neural networks, test case generation},\n    numpages = {23},\n    articleno = {Article 94},\n    journal = {ACM Trans. Embed. Comput. Syst.},\n    doi = {10.1145/3358233},\n    url = {https://doi.org/10.1145/3358233},\n    issn = {1539-9087},\n    number = {5s},\n    volume = {18},\n    address = {New York, NY, USA},\n    publisher = {Association for Computing Machinery},\n    issue_date = {October 2019},\n    year = {2019},\n    title = {Structural Test Coverage Criteria for Deep Neural Networks},\n    author = {Sun, Youcheng and Huang, Xiaowei and Kroening, Daniel and Sharp, James and Hill, Matthew and Ashmore, Rob},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3358233",
                "title": "Structural Test Coverage Criteria for Deep Neural Networks",
                "author": "Sun, Youcheng and Huang, Xiaowei and Kroening, Daniel and Sharp, James and Hill, Matthew and Ashmore, Rob",
                "url": "https://doi.org/10.1145/3358233"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "@article{testRNN,\n    year = {2021},\n    journal = {IEEE transactions on Reliability},\n    title = {Coverage Guided Testing for Recurrent Neural Networks},\n    author = {Wei Huang and\nYoucheng Sun and\nXingyu Zhao and \nJames Sharp and\nWenjie Ruan and \nJie Meng and \nXiaowei Huang},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Coverage Guided Testing for Recurrent Neural Networks",
                "author": "Wei Huang and\nYoucheng Sun and\nXingyu Zhao and \nJames Sharp and\nWenjie Ruan and \nJie Meng and \nXiaowei Huang"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "@article{DBLP:journals/corr/abs-2010-08281,\n    year = {2021},\n    journal = {Machine Learning},\n    title = {Embedding and Synthesis of Knowledge in Tree Ensemble Classifiers},\n    author = {Wei Huang and\nXingyu Zhao and\nXiaowei Huang},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Embedding and Synthesis of Knowledge in Tree Ensemble Classifiers",
                "author": "Wei Huang and\nXingyu Zhao and\nXiaowei Huang"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{zhang2020generalizing,\n    booktitle = {ICDM 2020},\n    year = {2020},\n    author = {Yanghao Zhang and Wenjie Ruan and Fu Wang and Xiaowei Huang},\n    title = {Generalizing Universal Adversarial Attacks Beyond Additive Perturbations},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Generalizing Universal Adversarial Attacks Beyond Additive Perturbations",
                "author": "Yanghao Zhang and Wenjie Ruan and Fu Wang and Xiaowei Huang"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "DeepConcolic (Testing for Deep Neural Networks)"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "logo": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/images/deepconcolic-logo2.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/ASE-experiments/PaperData/Work_Flow.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/ASE-experiments/PaperData/Adversarial_Examples-b.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/ASE-experiments/PaperData/Concolic_Testing_Results.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/YanghaoZYH/GUAP/master/figs/workflow.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/YanghaoZYH/GUAP/master/figs/Cifar10.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/YanghaoZYH/GUAP/master/figs/ImageNet.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2010.07788.pdf\n\n<img src=\"https://github.com/YanghaoZYH/GUAP/blob/master/figs/workflow.png\" width=\"100%\">\n\nIn this paper, for the first time we propose a unified and flexible framework, which can capture the distribution of the unknown additive and non-additive adversarial perturbations jointly for crafting Generalized Universal Adversarial Perturbations.\nSpecifically, GUAP can generate either additive (i.e., l_inf-bounded"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2010.07788.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2010.08281.pdf.\n\n## Download pre-trained models\n\nAs the running example, we download the pre-trained HAR tree model as follows.\n\n```sh\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/har_tree_black-box.npy\nwget -P saved_models https://cgi.csc.liv.ac.uk/~acps/models/har_forest_black-box.npy\n```\n\n## Command to Run\n\n```\npython -m EKiML.main --Dataset <DatasetName>\n\t\t     --Mode <modeName>\n\t\t     --Embedding_Method <embeddingMethod>\n\t\t     --Model <modeType>\n\t\t     --Pruning <pruningFlag>\n\t\t     --SaveModel <saveModelFlag>\n\t\t     --workdir <workDirectory>\n```\nwhere the flags have multiple options:\n\n1. `<DatasetName>` is in {'iris', 'har', 'breast_cancer', 'mushroom', 'nursery, 'cod-rna', 'sensorless', 'mnist'}.\n2. `<modeName>` is in {'embedding', 'synthesis'}, where 'synthesis' denotes the \"extraction\".\n3. `<embeddingMethod>` is in {'black-box', 'white-box'}\n4. `<modeType>` is in {'forest', 'tree'}\n5. `<pruningFlag>` is in {True, False}, with default value False\n6. `<saveModelFlag>` is in {True, False}, with default value False\n7. `<workDirectory>` is the working directory, with default value 'EKiML_workdir'\n8. `<Datadir>` is the directory where dataset files are located (default is 'EKiML/dataset'"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1805.00089.\n\nIn the following, we first present the original ASE2018 version, and then introduce two new upgrades (fuzzing engine and Bayesian network based abstraction"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1803.04792 "
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/1911.01952.pdf.\n\n#### Four coverage test metrics are applicable:\n1. Neuron Coverage (NC"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/TrustAI/DeepConcolic/master/README.md"
        }
    ]
}