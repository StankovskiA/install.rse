{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:56:42"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/luludak/DeltaNN",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "luludak",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-06-24T16:48:45Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-09-25T16:30:54Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A comprehensive suite for compiling, optimizing, executing and analyzing pretrained DNNs under different computational environment settings. Source code for work presented at ICSME'23.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "DeltaNN is a comprehensive suite for compiling, optimizing, executing and analyzing pretrained DNNs under different computational environment settings. \n*This is the project of the publication [\"DeltaNN: Assessing the Impact of Computational Environment Parameters on the Performance of Image Recognition Models\"](https://arxiv.org/abs/2306.06208), to be presented at IEEE ICSME 2023.\nRelated results, data and supplementary material can be found [here](https://github.com/luludak/DeltaNN-Results).* \nIn total, the suite supports:\n- Build of Neural Networks using different backend DL Frameworks.\n- Build of DNNs under different optimization settings.\n- Build of DNNs using different GPU backends (CUDA, OpenCL, etc).\n- Conversion of DNNs from one backend framework to another (currently supporting all conversions across Keras, PyTorch, TF, TFlite).\n- Executing DNNs in different hardware acceleration environments.\n- Analyzing the results in a bundled and automated manner.\n- Providing activation maps localization analysis (Alpha vesion). \n",
                "original_header": "DeltaNN"
            },
            "confidence": 0.9283196135352938,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The configuration of the system is included into the config.json file.\nEach section is self-explanatory and defines which part it concerns.\nImportant notes:\n- You can run the models **without** TVM, directly using the library of your choice. In this case, set the flag `backend` to `libraries` instead of `tvm`.\n- You can utilize the TVM debugger, by setting `debug_enabled: true`.\n- `build` and `execute` flags concerns the ONNX model defined in the URL and will apply actions only to this. If you want DLLs to be built or executed, mark flag `build_dlls` or `execute_dlls` as true.\n- `evaluate` flag concerns DLLs as well.\n- Device settings have been cleared out to preserve anonymity. If you wish, you can set up your own TVM RPC server on your own device and run everything following the instructions [here](\nhttps://tvm.apache.org/docs/tutorial/cross_compilation_and_rpc.html).\n \n",
                "original_header": "Configuration"
            },
            "confidence": 0.9477962620347974,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "DeltaNN",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "luludak/DeltaNN",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/luludak/DeltaNN/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/luludak/DeltaNN/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "artificial-intelligence, automation, deep-learning, deep-neural-networks, icsme, software-engineering, software-testing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/luludak/DeltaNN/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 125245
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "The system needs TVM to be installed.\nWe also use `Python v3.8.5` and `Pip` as the package installer.\n\nIn addition, the system requires a number of pip packages, which you can find in the requirements.txt file.\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "DeltaNN"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "1. Install Python and Pip on your system.\n- Python comes with linux distros usually, but this is not always the case for Pip. You can install it by running `sudo apt install python3-pip`.\n2. Download and install TVM:\nFor instructions of how to install TVM, please refer to the [TVM related guide for developers](https://tvm.apache.org/docs/install/from_source.html#developers-get-source-from-github).\nFollow the installation from source instructions, and consider enabling the LLVM and the OPENCL flags. \n3. Install necessary packages by executing the command:\n`pip3 install -r requirements.txt` \n4. Download necessary TF/TFLite models, if you wish to run them.\nAlthough system utilizes already provided models for Keras and PyTorch, we utilized some TF/TFlite models from the GitHub repo of Tensorflow for slim Models. These are:\n- `MobileNetV2`\n- `ResNet101`\n- `InceptionV3` \n",
                "original_header": "Instructions:"
            },
            "confidence": 0.9999999907585985,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The configuration of the system is included into the config.json file.\nEach section is self-explanatory and defines which part it concerns.\nImportant notes:\n- You can run the models **without** TVM, directly using the library of your choice. In this case, set the flag `backend` to `libraries` instead of `tvm`.\n- You can utilize the TVM debugger, by setting `debug_enabled: true`.\n- `build` and `execute` flags concerns the ONNX model defined in the URL and will apply actions only to this. If you want DLLs to be built or executed, mark flag `build_dlls` or `execute_dlls` as true.\n- `evaluate` flag concerns DLLs as well.\n- Device settings have been cleared out to preserve anonymity. If you wish, you can set up your own TVM RPC server on your own device and run everything following the instructions [here](\nhttps://tvm.apache.org/docs/tutorial/cross_compilation_and_rpc.html).\n \n",
                "original_header": "Configuration"
            },
            "confidence": 0.9998508417526493,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "In order to verify your installation and be able to run the framework with your own configuration, we have setup the configuration to build the system utilizing 3 libraries:\n1. TFLite (Downloaded an included from the TF repo aforementioned).\n2. Keras (Using pre-built library of keras).\n3. PyTorch (Same as keras).\n\nAs Dataset, we provide a small dataset, obtained from [unsplash](https://unsplash.com/images/stock/public-domain). No copyright infingement intended.\nWe provide the native TF and TFLite models, obtained from [TensorFlow zoo slim repo](https://github.com/tensorflow/models/tree/master/research/slim/), while the system supports inference and conversion across the pretrained models that are part of the Keras and PyTorch DL frameworks API.\n\nOnce you set up the framework, you can execute it by doing:\n`python3 main.py`\n\nThe example case will build, run and execute evaluation for `MobileNetV2`, in `TFLite` DL Framework. The evaluation will give an empty devices file, as no simultaneous library runs are performed, and there are no other runs to additional devices.\n",
                "type": "Text_excerpt",
                "original_header": "Example",
                "parent_header": [
                    "DeltaNN"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "The system will generate the models in the folder defined in config.json, along with their generated Host/Kernel code, but also their TVM Relay IR code:\n`<script_folder>/generated/MobileNet-2-7/models`\n\nIn total, the framework will generate the models compiled on TVM, utilizing the `opt=2` optimization setting, to be executed using `OpenCL` for hardware acceleration, for `TFLite`, `Keras` and `PyTorch`.\n",
                "type": "Text_excerpt",
                "original_header": "Build:",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "DeltaNN supports conversions of DL frameworks, for Keras, PyTorch, TF, TFlite. This can be enabled by setting <source>_to_<target> model in `dll_libraries` configuration of a model, in `config.json` file. For Keras, add `keras_library` as source.\n\nThat way, the suite will utilize PyTorch model and apply conversion to generate a the respective target model from source. The model then will be treated as a first-class model citizen that can be built under different optimization and hardware acceleration settings, be executed and analyzed.\n\n",
                "type": "Text_excerpt",
                "original_header": "Convert:",
                "parent_header": [
                    "DeltaNN",
                    "Example",
                    "Build:"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "Once execution is complete, analysis will be executed. This will be done in 3 ways:\n- Comparing results per-device (if provided).\n- Comparing results per-library(if provided).\n- Comparing results per-multiple executions (if provided).\n\nThe system will then generate the following files:\n`<script_folder>/<generated>/<model>/<device>/device_evaluation.json` containing results per-device comparison in a N-N manner.\n`<script_folder>/<generated>/<model>/<device>/<opt_level>/library_evaluation.json` containing results per-library comparison in a N-N manner.\n`<script_folder>/<generated>/<model>/<device>/<opt_level>/library_evaluation_time_percentage.json` containing percentages of execution time relative change per-prediction across libraries.\n`<script_folder>/<generated>/<model>/<device>/<opt_level>/mutations/same_folder_evaluation.json`, containing the comparison across multiple executions.\n\nNotice that there is a shift across TF/TFLite libraries and Keras/PyTorch. For example, for an image of drums, in the case of correct classification, TFLite will give the ImageNet ID:`542`, while the other two libraries, `541`. This was consistent behaviour across library executions, and we considered the offset to our comparisons. If you observe the analysis files, you will see that the comparison output is 100% across all libraries. However this does not apply in the comparison across source and target libraries upon conversion.\n\n To perform a full comparison, set the files to run in structure:\n\n`<optimization>/<device>/<dl_framework>` and then update the `evaluation_out_relative` value of the model to contain the optimization setting under test.\n\nFor example, if you have run the experiments for 2 optimizations, 2 devices and 2 libraries with 1 conversion, your structure should be:\n\n```\n.\n\u251c\u2500\u2500 Opt0/\n\u2502   \u251c\u2500\u2500 Device 1/\n\u2502   \u2502   \u251c\u2500\u2500 TF\n\u2502   \u2502   \u251c\u2500\u2500 TFLite\n\u2502   \u2502   \u2514\u2500\u2500 TF-To-TFLite\n\u2502   \u2514\u2500\u2500 Device 2/\n\u2502       \u251c\u2500\u2500 TF\n\u2502       \u251c\u2500\u2500 TFLite\n\u2502       \u2514\u2500\u2500 TF-To-TFLite\n\u2514\u2500\u2500 Opt2/\n    \u251c\u2500\u2500 Device 1/\n    \u2502   \u251c\u2500\u2500 TF\n    \u2502   \u251c\u2500\u2500 TFLite\n    \u2502   \u2514\u2500\u2500 TF-To-TFLite\n    \u2514\u2500\u2500 Device 2/\n        \u251c\u2500\u2500 TF\n        \u251c\u2500\u2500 TFLite\n        \u2514\u2500\u2500 TF-To-TFLite\n```\n        \nAnd then set `\"evaluation_out_relative\": <root_folder>/<Opt0/2>`, depending on the optimization setting under analysis.\n",
                "type": "Text_excerpt",
                "original_header": "Analyze:",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "The system includes a mechanism for fault localization. By setting `conv_analysis_enabled=true` in the config.json file, the system will consider two model metadata in order to perform fault localization. For that matter, the system will need (1) the variants of models built on TVM, and (2) inference of images presenting different results across source and target models, in TVM debug mode (having generated debugger \"params\" metadata). The data required must be provided in the config file.\n\nThe system performs layer activations and parameters analysis and comparison, and generates plots with the respective data.\nNote that this version of the system needs refactoring, and is in alpha version.\n\n",
                "type": "Text_excerpt",
                "original_header": "Localize Faults (Alpha version):",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "Inside `main.py`, you will also find the alpha version of specific features, such as:\n- Neural Network layers activation localization (Pre-Alpha Version).\n- Plot Generation for execution times across devices, DL Frameworks, as well as comparisons of output predictions for DL Frameworks (Alpha Version).\n\nYou can enable those features manually, however we intend fully integrating them to our system.\n\nAs a last note, you can try your own model, given you provide the right files and settings. Configuration provides exactly the details requested for a model to be loaded from a backend, compiled using a specific optimization and GPU backend and be run for inference, respectfully.\n\n",
                "type": "Text_excerpt",
                "original_header": "Alpha Features:",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        },
        {
            "result": {
                "value": "```\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nPython                          13            703            249           2030\nJSON                             1              2              0            829\nMarkdown                         1             41              0            113\n-------------------------------------------------------------------------------\nSUM:                            15            746            249           2972\n-------------------------------------------------------------------------------\n```\n",
                "type": "Text_excerpt",
                "original_header": "CLOC (Excluding External Folder)",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Your system will then execute, generating a folder with experiments. The structure is:\n`<script_folder>/<generated>/<model>/<device>/<opt_level>/`\nIn this case:\n`<script_folder>/out_large/local/opt2/<library_folders>/mutations/ts_<epoch_time_of_run>/<predictions>.txt`\n\nEach file, will contain the top-5 predictions, along with the execution time per-prediction at the bottom.\nIn addition, you will find an execution_log.txt file in the aforementioned fonder, containing info about the run.\n\nConsole will indicate the status of the running model and update accordingly.\n",
                "type": "Text_excerpt",
                "original_header": "Execute:",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "In case of an error, the suite will generate a `<script_folder>/error_log/<model>/ts_<epoch_time_of_problematic_run>/error_log.txt` file containing all related info.\n",
                "type": "Text_excerpt",
                "original_header": "Errors:",
                "parent_header": [
                    "DeltaNN",
                    "Example"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "DeltaNN"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2306.06208"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/luludak/DeltaNN/main/README.md"
        }
    ]
}