{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 18:51:30"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/se2p/artifact-pynguin-ssbse2020",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "se2p",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-07-27T15:49:53Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2022-11-04T15:49:14Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": null,
                "type": "License",
                "name": "Other",
                "url": null,
                "spdx_id": "NOASSERTION"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "# LICENSE\n\nThe following licenses apply to our artifact:\n\n - `./data`: The data is licensed under CC BY 4.0 (Attribution 4.0\n   International).\n   [https://creativecommons.org/licenses/by/4.0](https://creativecommons.org/licenses/by/4.0)\n   \n   The project snapshots in `./data/projects` have their own licenses which apply to them\n - `./software`: The software is licensed under LGPL 3.0\n   [https://www.gnu.org/licenses/lgpl-3.0.txt](https://www.gnu.org/licenses/lgpl-3.0.txt)\n\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/LICENSE.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "artifact-pynguin-ssbse2020",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "se2p/artifact-pynguin-ssbse2020",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/se2p/artifact-pynguin-ssbse2020/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/se2p/artifact-pynguin-ssbse2020/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/se2p/artifact-pynguin-ssbse2020/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 2473715
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "HTML",
                "name": "HTML",
                "type": "Programming_language",
                "size": 444656
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 241218
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 32531
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Batchfile",
                "name": "Batchfile",
                "type": "Programming_language",
                "size": 15980
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 12805
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 4359
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at jguibert@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/projects/async_btree/CODE_OF_CONDUCT.md"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Contributing to `codetiming`\n\nThank you for considering to contribute to `codetiming`. This guide is meant to help you find your way around the project, and let you know which standards that are used.\n\nIf you are looking for tutorials or tips on how to use `codetiming`, have a look at the [documentation](https://github.com/realpython/codetiming/blob/master/README.md) and the accompanying article [Python Timer Functions: Three Ways to Monitor Your Code](https://realpython.com/python-timer/).\n\n\n# Reporting Issues or Suggesting New Features\n\nHave you found an issue with `codetiming`, or do you have a suggestion for a new feature? Great! Have a look at the [known issues](https://github.com/realpython/codetiming/issues/new) to see if anyone has reported it already. If not, please post a [new issue](https://github.com/realpython/codetiming/issues/new).\n\nWhen reporting an issue, please include as much of the following information as possible:\n\n- Your version of `codetiming`: `print(codetiming.__version__)`\n- Your version of Python: `print(sys.version)`\n- Your operating system\n- A description of your issue, ideally including a short code snippet that reproduces the issue\n\nWhen suggesting a new feature, try to include an example of how your feature could be used.\n\n\n# Contributing Code\n\nDo you want to contribute code to `codetiming`? Fantastic! We welcome contributions as **pull requests**.\n\n\n## Setting Up Your Environment\n\n`codetiming` uses [`flit`](https://flit.readthedocs.io) for package management. You should first install `flit`:\n\n```\n$ python -m pip install flit\n```\n\nYou can then install `codetiming` locally for development with `flit`:\n\n```\n$ python -m flit install --pth-file --deps all\n```\n\nThis will install `codetiming` and all its dependencies, including development tools like [`black`](https://black.readthedocs.io) and [`mypy`](http://mypy-lang.org/). The `--pth-file` option allows you to test your changes without reinstalling. On Linux and Mac, you can use `--symlink` for the same effect.\n\n\n## Running Tests\n\nRun tests using [`tox`](https://tox.readthedocs.io/). `tox` helps to enforce the following principles:\n\n- Consistent code style using [`black`](https://black.readthedocs.io). You can automatically format your code as follows:\n\n    ```\n    $ black codetiming/\n    ```\n\n- Static type hinting using [`mypy`](http://mypy-lang.org/). Test your type hints as follows:\n\n    ```\n    $ mypy --strict codetiming/\n    ```\n\n    See Real Python's [Python Type Checking guide](https://realpython.com/python-type-checking/) for more information.\n\n- Unit testing using [`pytest`](https://docs.pytest.org/). You can run your tests and see a coverage report as follows:\n\n    ```\n    $ pytest --cov=codetiming --cov-report=term-missing\n    ```\n\nFeel free to ask for help in your PR if you are having challenges with any of these tests.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/projects/codetiming/CONTRIBUTING.md"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/software/pynguin/pynguin-docker.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/run_experiments.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/projects/python-string-utils/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/se2p/artifact-pynguin-ssbse2020/tree/master/software/pynguin/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://github.com/se2p/artifact-pynguin-ssbse2020/tree/master/data/projects/async_btree/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/software/pynguin/docker/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/software/pynguin/docker/Dockerfile"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/notebooks/evaluation.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/data/notebooks/evaluation.ipynb"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Artifact for the paper \u201cAutomated Unit Test Generation for Python\u201d by Stephan\nLukasczyk, Florian Kroi\u00df, and Gordon Fraser.\n\nThis artifact consists of two parts:\n\n1. `[software]` Our tool Pynguin, an automated unit test generation\n   tool for Python.\n2. `[data]` The data and scripts to reproduce the results of our empirical\n   study.\n",
                "type": "Text_excerpt",
                "original_header": "Artifact Description"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Artifact Description"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/se2p/artifact-pynguin-ssbse2020/master/README.md"
        }
    ]
}