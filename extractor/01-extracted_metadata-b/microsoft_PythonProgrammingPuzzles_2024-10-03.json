{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 18:41:19"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/microsoft/PythonProgrammingPuzzles",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "microsoft",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-04-25T21:05:10Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-30T23:10:01Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A Dataset of Python Challenges for AI Research",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This repo contains a dataset of Python programming puzzles which can be used to teach and evaluate\nan AI's programming proficiency. We present code generated by OpenAI's  \n[codex](https://arxiv.org/abs/2107.03374) neural network  \nsolving many of these puzzles. We hope this dataset will \n**grow rapidly**, and it is already diverse in terms of problem difficulty, domain, \nand algorithmic tools needed to solve the problems. Please\n[propose a new puzzle](../../issues/new?assignees=akalai&labels=New-puzzle&template=new-puzzle.md&title=New+puzzle) \n or [browse newly proposed puzzles](../../issues?q=is%3Aopen+is%3Aissue+label%3ANew-puzzle) \nor [contribute through pull requests](../../wiki/How-to-add-a-puzzle). \n \nTo learn more about how well AI systems such as GPT-3 can solve these problems, read our two papers: \n",
                "original_header": "Python Programming Puzzles (P3)"
            },
            "confidence": 0.9886646432292423,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Each puzzle takes the form of a Python function that takes an answer as an argument. \nThe answer is an input which makes the function return `True`. \nThis is called *satisfying* the puzzle, and that is why the puzzles are all named `sat`.\n```python\ndef sat(s: str):\n    return \"Hello \" + s == \"Hello world\"\n```\n \nThe classic [Towers of Hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi) puzzle can be written as follows:\n```python\ndef sat(moves: List[List[int]]):  \n    \"\"\"\n    Eight disks of sizes 1-8 are stacked on three towers, with each tower having disks in order of largest to\n    smallest. Move [i, j] corresponds to taking the smallest disk off tower i and putting it on tower j, and it\n    is legal as long as the towers remain in sorted order. Find a sequence of moves that moves all the disks\n    from the first to last towers.\n    \"\"\"\n    rods = ([8, 7, 6, 5, 4, 3, 2, 1], [], [])\n    for [i, j] in moves:\n        rods[j].append(rods[i].pop())\n        assert rods[j][-1] == min(rods[j]), \"larger disk on top of smaller disk\"\n    return rods[0] == rods[1] == []\n```\nThe shortest answer is a list of 255 moves, so instead we ask for the AI to generate *code* that outputs an answer. In \nthis case, the [codex API](https://beta.openai.com/) generated the following code:\nBASH3*\nThis was not on its first try, but that is one of the advantages of puzzles---it is easy for the computer to check \nits answers so it can generate many answers until it finds one. For this puzzle, about 1 in 1,000 solutions were \nsatisfactory. Clearly, codex has seen this problem before in other input formats---it even generated a url!\n(Upon closer inspection, the website exists and contains Python Tower-of-Hanoi code in a completely different format \nwith different variable names.)\nOn a harder, less-standard [Hanoi puzzle variant](puzzles/README.md#towersofhanoiarbitrary) that \nrequires moving from particular start to end positions, codex didn't solve it on 10,000 attempts.  \nThe dataset also has a number of open problems in computer science and mathematics. For example,  \n[Conway's 99-graph problem](https://en.wikipedia.org/w/index.php?title=Conway%27s_99-graph_problem)\nis an unsolved problem in graph theory \n(see also [Five $1,000 Problems (Update 2017)](https://oeis.org/A248380/a248380.pdf))        \n```python\ndef sat(edges: List[List[int]]):\n    \"\"\"\n    Find an undirected graph with 99 vertices, in which each two adjacent vertices have exactly one common\n    neighbor, and in which each two non-adjacent vertices have exactly two common neighbors.\n    \"\"\"\n    # first compute neighbors sets, N:\n    N = {i: {j for j in range(99) if j != i and ([i, j] in edges or [j, i] in edges)} for i in range(99)}\n    return all(len(N[i].intersection(N[j])) == (1 if j in N[i] else 2) for i in range(99) for j in range(i))\n``` \nWhy puzzles? One reason is that, if we can solve them better than human programmers, \nthen we could make progress on some important algorithms problems.\nBut until then, a second reason is that they can be valuable for training and evaluating AI systems. \nMany programming datasets have been proposed over the years, and several have problems of a similar nature\n(like programming competition problems). In puzzles, the spec is defined by code, while\nother datasets usually use a combination of English and a hidden test set of input-output pairs. English-based\nspecs are notoriously ambiguous and test the system's understanding of English. \nAnd with input-output test cases, you would have to have solved a puzzle before you pose it,\nso what is the use there? Code-based specs\nhave the advantage that they are unambiguous, there is no need to debug the AI-generated code or fears that it \ndoesn't do what you want. If it solved the puzzle, then it succeeded by definition.  \n",
                "original_header": "What is a Python programming puzzle?"
            },
            "confidence": 0.9294348306107378,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "During a Microsoft hackathon July 27-29, 2020, several people completed 30 user \n[study puzzles](/puzzles/README.md#study). We also had tons of fun making the puzzles in \n[Hackathon_puzzles.ipynb](/notebooks/Hackathon_puzzles.ipynb). These are of a somewhat\ndifferent flavor as they are more often `hacks` like \n```python\ndef sat(x):\n    return x > x\n```\nwhere the type of `x` is clearly non-standard. The creators of these puzzles include github users: \n[Adam Tauman Kalai](https://github.com/akalai),\n    [Alec Helbling](https://github.com/helblazer811),\n    [Alexander Vorobev](https://github.com/OnFireDolphin),\n    [Alexander Wei](https://github.com/aw31),\n    [Alexey Romanov](https://github.com/jgc128),\n    [Keith Battaochi](https://github.com/kbattocchi),\n    [Kodai Sudo](https://github.com/kouml),\n    [Maggie Hei](https://github.com/heimengqi),\n    [Mariia Mykhailova](https://github.com/tcNickolas),\n    [Misha Khodak](https://github.com/mkhodak),\n    [Monil Mehta](https://github.com/monilm2),\n    [Philip Rosenfield](https://github.com/philrosenfield),\n    [Qida Ma](https://github.com/JerryMa90),\n    [Raj Bhargava](https://github.com/rajbhargava),\n    [Rishi Jaiswal](https://github.com/nextquanta),\n    [Saikiran Mullaguri](https://github.com/sm947),\n    [Tal Schuster](https://github.com/TalSchuster), and\n    [Varsha Srinivasan](https://github.com/varsha2197). \nYou can try out the notebook at (link to be added). \n",
                "original_header": "Hackathon"
            },
            "confidence": 0.9465904567575505,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* Numerous trivial puzzles like reversing a list, useful for learning to program \n* Classic puzzles like:\n    * Towers of Hanoi\n    * Verbal Arithmetic (solve digit-substitutions like SEND + MORE = MONEY)\n    * The Game of Life (e.g., finding oscillators of a given period, some **open**) \n    * Chess puzzles (e.g., knight's tour and n-queen problem variants)         \n* Two-player games\n    * Finding optimal strategies for Tic-Tac-Toe, Rock-Paper-Scissors, Mastermind (to add: connect four?)\n    * Finding minimax strategies for zero-sum bimatrix games, which is equivalent to linear programming\n    * Finding Nash equilibria of general-sum games (**open**, PPAD complete)\n* Math and programming competitions\n    * International Mathematical Olympiad (IMO) problems \n    * International Collegiate Programming Contest (ICPC) problems\n    * Competitive programming problems from codeforces.com \n* Graph theory algorithmic puzzles\n    * Shortest path\n    * Planted clique (open)\n* Elementary algebra \n    * Solving equations\n    * Solving quadratic, cubic, and quartic equations\n* Number theory algorithmic puzzles:\n    * Finding common divisors (e.g., using Euclid's algorithm)\n    * Factoring numbers (easy for small factors, over $100k in prizes have been awarded and **open** \n    for large numbers)\n    * Discrete log (again **open** in general, easy for some)\n* Lattices\n    * Learning parity (typically solved using Gaussian elimination)\n    * Learning parity with noise (**open**)\n* Compression\n    * Compress a given string given the decompression algorithm (but not the compression algorithm), or decompress a given \n    compressed string given only the compression algorithm\n    * (to add: compute huffman tree)\n* Hard math problems\n    * Conway's 99-graph problem (**open**)\n    * Finding a cycle in the Collatz process (**open**)\n \n",
                "original_header": "Highlights"
            },
            "confidence": 0.9348243390079578,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies. \n",
                "original_header": "Trademarks"
            },
            "confidence": 0.9725227067402532,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "PythonProgrammingPuzzles",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "microsoft/PythonProgrammingPuzzles",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 963,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "ai, program-synthesis, programming-competitions, puzzles",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 93,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/microsoft/PythonProgrammingPuzzles/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 902526
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 77844
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 21153
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/releases/52941948",
                "tag": "v0.2",
                "name": "Camera-ready 397 puzzles",
                "author": {
                    "name": "akalai",
                    "type": "User"
                },
                "description": "Version for camera-ready paper for the NeurIPS proceedings. Added puzzles, including puzzles inspired by HumanEval. Added codex experiments. We are up to 397 puzzles.",
                "tarball_url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/tarball/v0.2",
                "zipball_url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/zipball/v0.2",
                "html_url": "https://github.com/microsoft/PythonProgrammingPuzzles/releases/tag/v0.2",
                "url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/releases/52941948",
                "release_id": 52941948,
                "date_created": "2021-11-08T17:40:20Z",
                "date_published": "2021-11-08T17:44:36Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/releases/44102585",
                "tag": "v0.1",
                "name": "Initial",
                "author": {
                    "name": "akalai",
                    "type": "User"
                },
                "description": "This is the initial version of the dataset with 139,072 puzzles from 200 problems.",
                "tarball_url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/tarball/v0.1",
                "zipball_url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/zipball/v0.1",
                "html_url": "https://github.com/microsoft/PythonProgrammingPuzzles/releases/tag/v0.1",
                "url": "https://api.github.com/repos/microsoft/PythonProgrammingPuzzles/releases/44102585",
                "release_id": 44102585,
                "date_created": "2021-06-03T19:50:34Z",
                "date_published": "2021-06-04T11:55:09Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/CODE_OF_CONDUCT.md"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/solvers/enumerative/run_bigram.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/solvers/enumerative/run_uniform.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/solvers/enumerative/run_transformer.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/solvers/enumerative/download_pretrained_roberta.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/ICLR2023/src/fine_tune1.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/ICLR2023/src/gen.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/ICLR2023/src/fine_tune.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/ICLR2023/src/babysit.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Hackathon_puzzles.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Hackathon_puzzles.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Demo.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Demo.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Intro.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/notebooks/Intro.ipynb"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "This project welcomes contributions and suggestions. Use your creativity to help teach \nAI's to program! See our [wiki on how to add a puzzle](../../wiki/How-to-add-a-puzzle).\n\nMost contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nSee the [datasheet](DATASHEET.md) for our dataset.\n",
                "type": "Text_excerpt",
                "original_header": "Contributing",
                "parent_header": [
                    "<a href=\"/puzzles/README.md\">Click here to browse the puzzles and solutions</a>"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies. \n",
                "original_header": "Trademarks"
            },
            "confidence": 0.9988852287322683,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{schuster2021programming,\n    url = {https://arxiv.org/abs/2106.05784},\n    year = {2021},\n    booktitle = {Thirty-fifth Conference on Neural Information Processing Systems Datasets and Benchmarks Track},\n    author = {Tal Schuster and Ashwin Kalyan and Alex Polozov and Adam Tauman Kalai},\n    title = {Programming Puzzles},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Programming Puzzles",
                "author": "Tal Schuster and Ashwin Kalyan and Alex Polozov and Adam Tauman Kalai",
                "url": "https://arxiv.org/abs/2106.05784"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Python Programming Puzzles (P3)"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/microsoft/PythonProgrammingPuzzles/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2106.05784}\n}\n```\n\nTo reproduce the results in that  paper, see the [solvers](/solvers"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2207.14502"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2106.05784"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2107.03374"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2207.14502}\n}\n```\n\nTo reproduce the results in that  paper, see the [ICLR2023](/ICLR2023"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/microsoft/PythonProgrammingPuzzles/main/README.md"
        }
    ]
}