{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 18:59:49"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/bigcode-project/bigcode-evaluation-harness",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "bigcode-project",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-08-09T12:58:56Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-29T23:55:57Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "A framework for the evaluation of autoregressive code generation language models.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "## Features \n"
            },
            "confidence": 0.9259552367714978,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This is a framework for the evaluation of code generation models. This work is inspired from [EleutherAI/lm-evaluation-harness](https://github.com/EleutherAI/lm-evaluation-harness) for evaluating language models in general. We welcome contributions to fix issues, enhance features and add new benchmarks. You can find contribution guides in [`docs/guide.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/docs/guide.md) and [`CONTRIBUTING.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/CONTRIBUTING.md) and more documentation in [`docs/README.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/docs/README.md).  \nBelow are the features and tasks of this framework: \n- Features:\n    - Any autoregressive model available on [Hugging Face hub](https://huggingface.co/) can be used, but we recommend using code generation models trained specifically on Code such as [SantaCoder](https://huggingface.co/bigcode/santacoder), [InCoder](https://huggingface.co/facebook/incoder-6B) and [CodeGen](https://huggingface.co/Salesforce/codegen-16B-mono).\n    - We provide Multi-GPU text generation with `accelerate` and Dockerfiles for evaluating on Docker containers for security and reproducibility. \n- Tasks:\n    - 7 code generation **Python** tasks (with unit tests): [HumanEval](https://huggingface.co/datasets/openai_humaneval), [HumanEval+](https://huggingface.co/datasets/evalplus/humanevalplus), [InstructHumanEval](https://huggingface.co/datasets/codeparrot/instructhumaneval), [APPS](https://huggingface.co/datasets/codeparrot/apps), [MBPP](https://huggingface.co/datasets/mbpp), [MBPP+](https://huggingface.co/datasets/evalplus/mbppplus), and [DS-1000](https://github.com/HKUNLP/DS-1000/) for both completion (left-to-right) and insertion (FIM) mode.\n    - [HumanEvalPack](https://huggingface.co/datasets/bigcode/humanevalpack) extends HumanEval to **3** scenarios across **6** languages via human translations and was released with [OctoPack](https://arxiv.org/abs/2308.07124).\n    - [MultiPL-E](https://github.com/nuprl/MultiPL-E) evaluation suite (HumanEval translated into **18** programming languages).\n    - [Recode](https://github.com/amazon-science/recode/tree/main) applied to the HumanEval benchmark. It evaluates the robustness of code-generation models.\n    - [Pal](https://github.com/reasoning-machines/pal) Program-aided Language Models evaluation for grade school math problems : [GSM8K](https://huggingface.co/datasets/gsm8k) and [GSM-HARD](https://huggingface.co/datasets/reasoning-machines/gsm-hard). These problems are solved by generating reasoning chains of text and code.\n    - Code to text task from [CodeXGLUE](https://huggingface.co/datasets/code_x_glue_ct_code_to_text) (zero-shot & fine-tuning) for 6 languages: **Python, Go, Ruby, Java, JavaScript and PHP.**  Documentation translation task from [CodeXGLUE](https://huggingface.co/datasets/code_x_glue_tt_text_to_text).\n    - [CoNaLa](https://huggingface.co/datasets/neulab/conala) for **Python** code generation (2-shot setting and evaluation with BLEU score).\n    - [Concode](https://huggingface.co/datasets/code_x_glue_tc_text_to_code) for **Java** code generation (2-shot setting and evaluation with BLEU score).\n    - 3 multilingual downstream classification tasks: [Java Complexity prediction](https://huggingface.co/datasets/codeparrot/codecomplex), [Java code equivalence prediction](https://huggingface.co/datasets/code_x_glue_cc_clone_detection_big_clone_bench), [C code defect prediction](https://huggingface.co/datasets/code_x_glue_cc_defect_detection).\n    - [SantaCoder-FIM](https://huggingface.co/datasets/bigcode/santacoder-fim-task) for evaluating FIM on **Python** code using Exact Match. Further details are described in [SantaCoder](https://arxiv.org/abs/2301.03988). Includes two tasks:\n        - `StarCoderFIM`: which uses the default FIM tokens `\"<fim_prefix>\", \"<fim_middle>\", \"<fim_suffix>\"`, and\n        - `SantaCoderFIM`: which uses SantaCoder FIM tokens `\"<fim-prefix>\", \"<fim-middle>\", \"<fim-suffix>\"`\n    - [Mercury](https://huggingface.co/datasets/Elfsong/Mercury) for evaluating computational efficiency of **Python** code generation. \n",
                "original_header": "Features"
            },
            "confidence": 0.9794906554206755,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "## Usage\nYou can use this evaluation harness to generate text solutions to code benchmarks with your model, to evaluate (and execute) the solutions or to do both. While it is better to use GPUs for the generation, the evaluation only requires CPUs. So it might be beneficial to separate these two steps. By default both generation and evaluation are performed. \n### Generation and evaluation\nBelow is an example to generate and evaluate on a task.\n```bash\naccelerate launch  main.py \\\n  --model <MODEL_NAME> \\\n  --tasks <TASK_NAME> \\\n  --limit <NUMBER_PROBLEMS> \\\n  --max_length_generation <MAX_LENGTH> \\\n  --temperature <TEMPERATURE> \\\n  --do_sample True \\\n  --n_samples 100 \\\n  --batch_size 10 \\\n  --precision <PRECISION> \\\n  --allow_code_execution \\\n  --save_generations\n```\n* `limit` represents the number of problems to solve, if it's not provided all problems in the benchmark are selected. \n* `allow_code_execution` is for executing the generated code: it is off by default, read the displayed warning before calling it to enable execution. \n* Some models with custom code on the HF hub like [SantaCoder](https://huggingface.co/bigcode/santacoder) require calling `--trust_remote_code`, for private models add `--use_auth_token`.\n* `save_generations` saves the post-processed generations in a json file at `save_generations_path` (by default `generations.json`). You can also save references by calling `--save_references`\n* `max_length_generation` is the maximum token length of generation including the input token length. The default is 512, but for some tasks like GSM8K and GSM-Hard, the complete prompt with 8 shot examples (as used in [PAL](https://github.com/reasoning-machines/pal)) take up `~1500` tokens, hence the value should be greater than that and the recommended value of `max_length_generation` is `2048` for these tasks.\n \nSome tasks don't require code execution such as\n`codexglue_code_to_text-<LANGUAGE>`/`codexglue_code_to_text-python-left`/`conala`/`concode` that use BLEU evaluation. In addition, we generate one candidate solution for each problem in these tasks, so use `n_samples=1` and `batch_size=1`. (Note that `batch_size` should always be equal or less than `n_samples`).\n* For APPS tasks, you can use `n_samples=1` for strict and average accuracies (from the original APPS paper) and `n_samples>1` for pass@k. \nThis can be useful if you don't want to execute code in the machine you're using for generations for security or efficiency reasons. For instance, you can do the generations on multiple GPUs, but switch to a multiple workers CPU machine or docker container for the execution. \n## Acknowledgements\nWe thank EleutherAI for their work on the [lm-evaluation harness](https://github.com/EleutherAI/lm-evaluation-harness) from which this repository is inspired. \n"
            },
            "confidence": 0.9518346153965039,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "bigcode-evaluation-harness",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "bigcode-project/bigcode-evaluation-harness",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 781,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 208,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/bigcode-project/bigcode-evaluation-harness/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 341090
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1902
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 631
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 226
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/releases/104233353",
                "tag": "v0.1.0",
                "name": "Initial release of BigCode Evaluation Harness",
                "author": {
                    "name": "loubnabnl",
                    "type": "User"
                },
                "description": "# Release notes\r\nThese are the release notes of the initial release of the BigCode Evaluation Harness.\r\n\r\n## Goals\r\nThe framework aims to achieve the following goals:\r\n\r\n- Reproducibility: Making it easy to report and reproduce results.\r\n- Ease-of-use: Providing access to a diverse range of code benchmarks through a unified interface.\r\n- Efficiency: Leveraging data parallelism on multiple GPUs to generate benchmark solutions quickly.\r\n- Isolation: Using Docker containers for executing the generated solutions.\r\n\r\n## Release overview\r\nThe framework supports the following features & tasks:\r\n- Features:\r\n    - Any autoregressive model available on [Hugging Face hub](https://huggingface.co/) can be used, but we recommend using code generation models trained specifically on Code.\r\n    - We provide Multi-GPU text generation with `accelerate` for multi-sample problems and Dockerfiles for evaluating on Docker containers for security and reproducibility.\r\n\r\n- Tasks:\r\n    - 4 code generation **Python** tasks (with unit tests): [HumanEval](https://huggingface.co/datasets/openai_humaneval), [APPS](https://huggingface.co/datasets/codeparrot/apps), [MBPP](https://huggingface.co/datasets/mbpp) and [DS-1000](https://github.com/HKUNLP/DS-1000/) for both completion (left-to-right) and insertion (FIM) mode.\r\n    - [MultiPL-E](https://github.com/nuprl/MultiPL-E) evaluation suite (HumanEval translated into **18** programming languages).\r\n    - [Pal](https://github.com/reasoning-machines/pal) Program-aided Language Models evaluation for grade school math problems : [GSM8K](https://huggingface.co/datasets/gsm8k) and [GSM-HARD](https://huggingface.co/datasets/reasoning-machines/gsm-hard). These problems are solved by generating reasoning chains of text and code.\r\n    - Code to text task from [CodeXGLUE](https://huggingface.co/datasets/code_x_glue_ct_code_to_text) (zero-shot & fine-tuning) for 6 languages: **Python, Go, Ruby, Java, JavaScript and PHP.**  Documentation translation task from [CodeXGLUE](https://huggingface.co/datasets/code_x_glue_tt_text_to_text).\r\n    - [CoNaLa](https://huggingface.co/datasets/neulab/conala) for **Python** code generation (2-shot setting and evaluation with BLEU score).\r\n    - [Concode](https://huggingface.co/datasets/code_x_glue_tc_text_to_code) for **Java** code generation (2-shot setting and evaluation with BLEU score).\r\n    - 3 multilingual downstream classification tasks: [Java Complexity prediction](https://huggingface.co/datasets/codeparrot/codecomplex), [Java code equivalence prediction](https://huggingface.co/datasets/code_x_glue_cc_clone_detection_big_clone_bench), [C code defect prediction](https://huggingface.co/datasets/code_x_glue_cc_defect_detection).\r\n\r\nMore details about each task can be found in  the documentation in [`docs/README.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/docs/README.md).\r\n## Main Contributors\r\n* @loubnabnl  @Muennighoff  @benlipkin @infinitylogesh @lvwerra \r\n\r\n**Full Changelog**: https://github.com/bigcode-project/bigcode-evaluation-harness/commits/v0.1.0",
                "tarball_url": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/tarball/v0.1.0",
                "zipball_url": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/zipball/v0.1.0",
                "html_url": "https://github.com/bigcode-project/bigcode-evaluation-harness/releases/tag/v0.1.0",
                "url": "https://api.github.com/repos/bigcode-project/bigcode-evaluation-harness/releases/104233353",
                "release_id": 104233353,
                "date_created": "2023-05-25T09:11:57Z",
                "date_published": "2023-05-25T09:37:24Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# How to contribute to BigCode?\n\nEveryone is welcome to contribute, and we value everybody's contribution. Code\nis thus not the only way to help the community. Answering questions, helping\nothers, reaching out and improving the documentations are immensely valuable to\nthe community.\n\nWhichever way you choose to contribute, please be mindful to respect our\n[code of conduct](https://bigcode-project.org/docs/about/code_of_conduct/).\n\n## You can contribute in so many ways!\n\nThere are 4 ways you can contribute to this repository:\n* Fixing outstanding issues with the existing code;\n* Implementing new models;\n* Contributing to the examples or to the documentation;\n* Submitting issues related to bugs or desired new features.\n\n*All are equally valuable to the community.*\n\n## License\n\nNote that all contributions are licensed under Apache 2.0 by default. The \nTechnical Steering Committee (TSC) may approve the use of an alternative \nlicense or licenses for inbound or outbound contributions on an exception basis. \nTo request an exception, please describe the contribution, the alternative \nlicense, and the justification for using an alternative license for the \ndescribed contribution. License exceptions must be approved by the TSC. \nContributed files should contain license information indicating the open \nsource license or licenses pertaining to the file.\n\n## Submitting a new issue or feature request\n\nDo your best to follow these guidelines when submitting an issue or a feature\nrequest. It will make it easier for us to come back to you quickly and with good\nfeedback.\n\n### Did you find a bug?\n\nFirst, we would really appreciate it if you could **make sure the bug was not\nalready reported** (use the search bar on Github under Issues).\n\nDid not find it? :( So we can act quickly on it, please follow these steps:\n\n* Include your **OS type and version**, the versions of **Python**, **PyTorch** and\n  **Tensorflow** when applicable;\n* A short, self-contained, code snippet that allows us to reproduce the bug in\n  less than 30s;\n* Provide the *full* traceback if an exception is raised.\n\n### Do you want a new feature?\n\nA world-class feature request addresses the following points:\n\n1. Motivation first:\n  * Is it related to a problem/frustration with the current features? If so, please explain\n    why. Providing a code snippet that demonstrates the problem is best.\n  * Is it related to something you would need for a project? We'd love to hear\n    about it!\n  * Is it something you worked on and think could benefit the community?\n    Awesome! Tell us what problem it solved for you.\n2. Write a *full paragraph* describing the feature;\n3. Provide a **code snippet** that demonstrates its future use;\n4. In case this is related to a paper, please attach a link;\n5. Attach any additional information (drawings, screenshots, etc.) you think may help.\n\nIf your issue is well written we're already 80% of the way there by the time you\npost it.\n\n## Start contributing! (Pull Requests)\n\nBefore writing code, we strongly advise you to search through the existing PRs or\nissues to make sure that nobody is already working on the same thing. If you are\nunsure, it is always a good idea to open an issue to get some feedback.\n\nYou will need basic `git` proficiency to be able to contribute to\nBigCode. `git` is not the easiest tool to use but it has the greatest\nmanual. Type `git --help` in a shell and enjoy. If you prefer books, [Pro\nGit](https://git-scm.com/book/en/v2) is a very good reference.\n\nFollow these steps to start contributing:\n\n1. Fork the repository by\n   clicking on the 'Fork' button on the repository's page. This creates a copy of the code\n   under your GitHub user account.\n\n2. Clone your fork to your local disk, and add the base repository as a remote:\n\n   ```bash\n   $ git clone git@github.com:<your Github handle>/<Repo name>.git\n   $ cd <Repo name>\n   $ git remote add upstream https://github.com/bigcode-project/<Repo name>.git\n   ```\n\n3. Create a new branch to hold your development changes:\n\n   ```bash\n   $ git checkout -b a-descriptive-name-for-my-changes\n   ```\n\n   **Do not** work on the `main` branch.\n\n4. Set up a development environment by running the following command in a virtual environment:\n\n   ```bash\n   $ pip install -r requirements.txt\n   ```\n\n5. Develop the features on your branch.\n\n   Once you're happy with your changes, add changed files using `git add` and\n   make a commit with `git commit` to record your changes locally:\n\n   ```bash\n   $ git add modified_file.py\n   $ git commit\n   ```\n\n   Please write [good commit\n   messages](https://chris.beams.io/posts/git-commit/).\n\n   It is a good idea to sync your copy of the code with the original\n   repository regularly. This way you can quickly account for changes:\n\n   ```bash\n   $ git fetch upstream\n   $ git rebase upstream/main\n   ```\n\n   Push the changes to your account using:\n\n   ```bash\n   $ git push -u origin a-descriptive-name-for-my-changes\n   ```\n\n6. Once you are satisfied (**and the checklist below is happy too**), go to the\n   webpage of your fork on GitHub. Click on 'Pull request' to send your changes\n   to the project maintainers for review.\n\n7. It's ok if maintainers ask you for changes. It happens to core contributors\n   too! So everyone can see the changes in the Pull request, work in your local\n   branch and push the changes to your fork. They will automatically appear in\n   the pull request.\n\n\n### Checklist\n\n1. The title of your pull request should be a summary of its contribution;\n2. If your pull request addresses an issue, please mention the issue number in\n   the pull request description to make sure they are linked (and people\n   consulting the issue know you are working on it);\n3. To indicate a work in progress please prefix the title with `[WIP]`. These\n   are useful to avoid duplicated work, and to differentiate it from PRs ready\n   to be merged;\n4. Make sure existing tests pass;\n5. All public methods must have informative docstrings.\n\n### Style guide\n\nFor documentation strings, BigCode follows the [google style](https://google.github.io/styleguide/pyguide.html).\n\n**This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/main/CONTRIBUTING.md).**\n\n### Develop on Windows\n\nOn windows, you need to configure git to transform Windows `CRLF` line endings to Linux `LF` line endings:\n\n`git config core.autocrlf input`\n\nOne way one can run the make command on Window is to pass by MSYS2:\n\n1. [Download MSYS2](https://www.msys2.org/), we assume to have it installed in C:\\msys64\n2. Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)\n3. Run in the shell: `pacman -Syu` and install make with `pacman -S make`\n4. Add `C:\\msys64\\usr\\bin` to your PATH environment variable.\n\nYou can now use `make` from any terminal (Powershell, cmd.exe, etc) \ud83c\udf89\n\n### Syncing forked main with upstream `main`\n\nTo avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnecessary notifications to the developers involved in these PRs,\nwhen syncing the main branch of a forked repository, please, follow these steps:\n1. When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked main.\n2. If a PR is absolutely necessary, use the following steps after checking out your branch:\n```\n$ git checkout -b your-branch-for-syncing\n$ git pull --squash --no-commit upstream main\n$ git commit -m '<your message without GitHub references>'\n$ git push --set-upstream origin your-branch-for-syncing\n```\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/CONTRIBUTING.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/bigcode-project/bigcode-evaluation-harness/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "More details about each task can be found in  the documentation in [`docs/README.md`](https://github.com/bigcode-project/bigcode-evaluation-harness/blob/main/docs/README.md).\n## Setup\n```bash\ngit clone https://github.com/bigcode-project/bigcode-evaluation-harness.git\ncd bigcode-evaluation-harness\n```\nInstall [`torch`](https://pytorch.org/get-started/locally/) based on your device type, and install the other packages using:\nBASH2*\nTo run the `DS-1000` benchmark, additional constraints must be resolved.\nBASH3*\nAlso make sure you have `git-lfs` installed and are logged in the Hub\nBASH4*`\nWe use [`accelerate`](https://huggingface.co/docs/accelerate/index) to generate code/text in parallel when multiple GPUs are present (multi-GPU mode). You can configure it using:\n```bash\naccelerate config\n```\n \n"
            },
            "confidence": 1.0,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you want to generate solutions without executing and evaluating the code, call `--generation_only`, in addition to the instructions above. This will save the solutions in a json file provided in `save_generation_path` in the working directory.  \n",
                "original_header": "Generation only"
            },
            "confidence": 0.9977958773735992,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you already have the generations in a json file from this evaluation harness and want to evaluate them, specify the path of the generations via the `load_generations_path` argument. You may need to reconfigure `accelerate` to use multiple CPUs. \n",
                "original_header": "Evaluation only"
            },
            "confidence": 0.9999727495041103,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you want to evaluate on MultiPL-E, we have a different Dockerfile since it requires more dependencies, use:\n```bash\n$ docker pull ghcr.io/bigcode-project/evaluation-harness-multiple\n$ docker tag ghcr.io/bigcode-project/evaluation-harness-multiple evaluation-harness-multiple\n``` \n",
                "original_header": "Docker containers"
            },
            "confidence": 0.9947986444615703,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you modify the evaluation harness, you may want to rebuild the docker images. \n",
                "original_header": "Building  Docker images"
            },
            "confidence": 0.9362523676994922,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "### Evaluating inside a container\nSuppose you generated text with the `bigcode/santacoder` model and saved it in `generations_py.json` with:\n```bash\naccelerate launch  main.py \\\n    --model bigcode/santacoder  \\\n    --tasks multiple-py  \\\n    --max_length_generation 650 \\\n    --temperature 0.8   \\\n    --do_sample True  \\\n    --n_samples 200  \\\n    --batch_size 200  \\\n    --trust_remote_code \\\n    --generation_only \\\n    --save_generations \\\n    --save_generations_path generations_py.json\n``` \n"
            },
            "confidence": 0.9507196288353922,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@misc{bigcode-evaluation-harness,\n    year = {2022},\n    howpublished = {\\url{https://github.com/bigcode-project/bigcode-evaluation-harness}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    title = {A framework for the evaluation of code generation models},\n    author = {Ben Allal, Loubna and\nMuennighoff, Niklas and\nKumar Umapathi, Logesh and\nLipkin, Ben and\nvon Werra, Leandro},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "A framework for the evaluation of code generation models",
                "author": "Ben Allal, Loubna and\nMuennighoff, Niklas and\nKumar Umapathi, Logesh and\nLipkin, Ben and\nvon Werra, Leandro"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": ""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://user-images.githubusercontent.com/44069155/191557209-6219acb8-a766-448c-9bd6-284d22b1e398.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2308.07124"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2301.03988"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/bigcode-project/bigcode-evaluation-harness/main/README.md"
        }
    ]
}