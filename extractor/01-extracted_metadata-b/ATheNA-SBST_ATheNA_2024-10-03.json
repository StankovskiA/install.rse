{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:53:51"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/ATheNA-SBST/ATheNA",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "ATheNA-SBST",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-07-21T20:03:32Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2022-08-11T21:57:39Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2022 ATheNA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/LICENSE"
        }
    ],
    "name": [
        {
            "result": {
                "value": "ATheNA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "ATheNA-SBST/ATheNA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/ATheNA-SBST/ATheNA/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/ATheNA-SBST/ATheNA/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ATheNA-SBST/ATheNA/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "HTML",
                "name": "HTML",
                "type": "Programming_language",
                "size": 350060
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MATLAB",
                "name": "MATLAB",
                "type": "Programming_language",
                "size": 152896
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "static-website",
                "type": "String"
            },
            "confidence": 1,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "To install the toolbox, clone this repository to the intended system and add all folders to the MATLAB path. Then,\nfollow all the requirements and instructions listed in [_System Requirements_](#system-requirements) and [_Setting Up\nS-TaLiRo for ATheNA Usage_](#setting-up-s-taliro-for-athena-usage).\n\nA step-by-step installation guide is also available on [YouTube](https://www.youtube.com/watch?v=F8hhTQ8nLts)\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "ATheNA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "ATheNA modifies some contents of the S-TaLiRo toolbox for it to run. Before a _staliro_ folder can be used for\nthe first time, it must be configured correctly. To configure the folder correctly, follow the steps below:\n\n1. Download S-Taliro from its [repository](https://app.assembla.com/spaces/s-taliro_public/subversion/source/HEAD/trunk).\n\n2. Unzip the folder, rename it to `staliro` (Optional), and move it inside the ATheNA repo.\n\n3. Ensure that the correct MEX compiler for your operating system is connected to MATLAB by referring to the online MATLAB [documentation](https://www.mathworks.com/support/requirements/supported-compilers.html).\n\n4. Ensure that the ATheNA toolbox folder and its subfolders are added to the MATLAB path.\n\n5. Run the `configureAthena` function by providing the relative path from the current working directory to the S-Taliro folder.\n   For example, if the current working directory is the ATheNA repository cloned from GitHub and the folder containing S-Taliro has been renamed to `staliro`, then the command is the following:\n\n```matlab\nconfigureAthena('staliro')\n```\n",
                "type": "Text_excerpt",
                "original_header": "Setting Up S-TaLiRo for ATheNA Usage",
                "parent_header": [
                    "ATheNA",
                    "System Requirements"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "A manual fitness function is required for ATheNA to work properly. The function must be added to the MATLAB path. The\nfunction **MUST** take 3 arguments as these are passed to the function internally by ATheNA:\n\n* `t`: column vector with the timestamps for the model input and output spanning the specified simulation time.\n* `u`: the input generated for the current iteration. If the `athena_options.useInterpInput` property is set to `true`,\n  then this is a matrix where the $i$-th column corresponds to the interpolated values for the $i$-th input port and the\n  rows correspond to the timestamps in `t`. Otherwise, a column vector of the control point values is provided with the\n  control points for each input port being placed consecutively. For example, if the first input port has 7 control\n  points, and the second input port has 3 control points, then `u(1:7,1)` would contain the control points for the first\n  port in order, and `u(8:10,1)` would contain the control points for the second input port in order.\n* `y`: matrix containing the output generated by the model, where the $i$-th column corresponds to the $i$-th output\n  port, and the rows correspond to timestamps in `t`.\n\n**Note**: <u>users can also invoke and use global variables inside of fitness functions</u>.\n\nThe function declaration should resemble the following structure:\n\n```matlab\nfunction fitness = myFitnessFunction(t,u,y)\n% The manual fitness function calculation proceeds,\n% and can differ from the following line\nfitness = 1;\nend\n```\n\nThe function should output a fitness value in the range $[-1,1]$, where -1 is the most desirable fitness. For more\ninformation on creating manual fitness functions refer to the MATLAB `help` function documentation by\ncalling `help createManualFitness`.\n\nIn order for ATheNA to correctly identify the function, it must be a valid MATLAB function added to the MATLAB path, and\nthe `athena_options.fitnessFcn` property must be set to the name of function as a string or character vector if the\nfitness function is a main function, or as a function handle if it is a local or nested function. For example, if the\nfunction is called myFitnessFunction, set the property as follows:\n\n```matlab\n% Ensure that 'athena_opt' has been initialized as an athena_options object.\n% Any valid variable name can be used for the athena_options instance.\n\n% If the function is a main function\nathena_opt.fitnessFcn = 'myFitnessFunction';\n\n% If the function is a local or nested function\nathena_opt.fitnessFcn = @myFitnessFunction;\n```\n\nEven if an ATheNA test is set to use automatic fitness only, a fitness function must be defined. In such a case, the\ndefault value of `athena_options.fitnessFcn` can be used. Documentation regarding the `athena_options.fitnessFcn`\nproperty and its default value can be accessed through the following `help` function call:\n\n```matlab\nhelp athena_options.fitnessFcn\n```\n\nSee the [_Examples_](#examples) section below for instructions on how to access an applied example of a fitness\nfunction.\n",
                "type": "Text_excerpt",
                "original_header": "Creating Manual Fitness Functions",
                "parent_header": [
                    "ATheNA",
                    "Manual Fitness Functions"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "The Manual and Automatic Fitness values are combined linearly by default using the `athena\\_options.coeffRob` property.\nThis weight must be a value in the range $[0, 1]$, where 0\nsignifies using the manual fitness only, and 1 signifies using the automatic fitness only. Any value\nof `athena_options.coeffRob` inside the range corresponds to a value $p$ used to calculate the combined fitness\n$f_{athena}$ with the weighted average formula below:\n\n$$f_{athena} = f_{automatic} \\cdot p + f_{manual} \\cdot (1 - p)$$\n\nThe user can define their own implementation of the `athenaFitness` method, by modifying the function `./src/UpdateStaliro/Compute \\_Robustness.m` at line 147.\n\nThe atomic predicates used during the test should also be normalized with their normalization bounds defined. The bound\nof an atomic predicate is the highest magnitude robustness value that is possible for that predicate, or a reasonable\napproximation of that value. Formally, if the robustness interval for some predicate is found to be within $[a, b]$,\nthen the bound would be $\\max(|a|,|b|)$. If the robustness interval is unknown, then the magnitude of the\ndifference of the input range can be used. Formally, if the input range is $[c, d]$, then the bound would be \n$|d - c|$.\n\n**Note**: The atomic predicates are stored in the `preds` struct that is passed into the `athena` function. Refer to the\n`help` documentation regarding the `athena` function using `help athena` for more information on this structure.\n\nTo normalize the atomic predicate at index $i$ of a predicates struct `preds`:\n\n```matlab\npreds(i).Normalized = true;\n```\n\nTo set the normalization bounds of the atomic predicate at index $i$ of a predicates struct `preds` to some value $k$:\n\n```matlab\npreds(i).NormBounds = k;\n```\n\nTo access the `help` function documentation pertaining to the `athena_options.coeffRob` property, run the following or\nenter it to the MATLAB Command Window:\n\n```matlab\nhelp athena_options.coeffRob\n```\n",
                "type": "Text_excerpt",
                "original_header": "Combining Manual and Automatic Fitness Values",
                "parent_header": [
                    "ATheNA",
                    "Manual Fitness Functions"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "ATheNA requires a copy of the S-TaLiRo toolbox, with the *staliro* folder location added to the MATLAB path. The\nS-TaliRo toolbox can be downloaded from the following link:\n[https://app.assembla.com/spaces/s-taliro_public/subversion/source/HEAD/trunk](https://app.assembla.com/spaces/s-taliro_public/subversion/source/HEAD/trunk).\n\nNote that a MEX compiler is required to use S-TaLiRo, and that MEX files should be compiled before using ATheNA. For\nmore information on supported compilers, refer to the MATLAB documentation on supported compilers in the following link:\n[https://www.mathworks.com/support/requirements/supported-compilers.html](https://www.mathworks.com/support/requirements/supported-compilers.html). To change the default compiler, refer to the MATLAB documentation in the following link:\n[https://www.mathworks.com/help/matlab/matlab_external/changing-default-compiler.html](https://www.mathworks.com/help/matlab/matlab_external/changing-default-compiler.html).\n",
                "type": "Text_excerpt",
                "original_header": "S-TaLiRo Toolbox",
                "parent_header": [
                    "ATheNA",
                    "System Requirements"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "* MATLAB Signal Processing Toolbox\n* Simulink (for the example tutorial)\n",
                "type": "Text_excerpt",
                "original_header": "Additional MathWorks Toolboxes and Products",
                "parent_header": [
                    "ATheNA",
                    "System Requirements"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "ATheNA modifies some contents of the S-TaLiRo toolbox for it to run. Before a _staliro_ folder can be used for\nthe first time, it must be configured correctly. To configure the folder correctly, follow the steps below:\n\n1. Download S-Taliro from its [repository](https://app.assembla.com/spaces/s-taliro_public/subversion/source/HEAD/trunk).\n\n2. Unzip the folder, rename it to `staliro` (Optional), and move it inside the ATheNA repo.\n\n3. Ensure that the correct MEX compiler for your operating system is connected to MATLAB by referring to the online MATLAB [documentation](https://www.mathworks.com/support/requirements/supported-compilers.html).\n\n4. Ensure that the ATheNA toolbox folder and its subfolders are added to the MATLAB path.\n\n5. Run the `configureAthena` function by providing the relative path from the current working directory to the S-Taliro folder.\n   For example, if the current working directory is the ATheNA repository cloned from GitHub and the folder containing S-Taliro has been renamed to `staliro`, then the command is the following:\n\n```matlab\nconfigureAthena('staliro')\n```\n",
                "type": "Text_excerpt",
                "original_header": "Setting Up S-TaLiRo for ATheNA Usage",
                "parent_header": [
                    "ATheNA",
                    "System Requirements"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "Two examples are provided with the tool to show how to set up and run ATheNA.\\\\\n\nThe first example can be found inside the [AutomotiveExample](AutomotiveExample) folder.\nThe folder includes the Simulink model which is used in the example (version 8.7/ R2016a) and a MATLAB script with the tutorial.\nIf an older MATLAB version is used, the example script and model will not run, but the rest of the toolbox should remain compatible.  \nA complete walkthrough of this example is available on [YouTube](https://www.youtube.com/watch?v=dhw9rwO7L4k).\n\nAnother tutorial example can be found inside the [PendulumExample](PendulumExample) folder.\nThe folder includes the Simulink model which is used in the example (version 8.5/ R2015a), a formatted html tutorial page with a sample of what the output should look like, and a MATLAB script with the tutorial.\n",
                "type": "Text_excerpt",
                "original_header": "Examples",
                "parent_header": [
                    "ATheNA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "To cite ATheNA, please visit [https://dl.acm.org/doi/abs/10.1145/3624745](https://dl.acm.org/doi/abs/10.1145/3624745). Alternatively, the \nfollowing BibTeX information can be used:\n\n```\n@article{ATheNA,\nauthor = {Formica, Federico and Fan, Tony and Menghi, Claudio},\ntitle = {Search-Based Software Testing Driven by Automatically Generated and Manually Defined Fitness Functions},\nyear = {2023},\nissue_date = {February 2024},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nvolume = {33},\nnumber = {2},\nissn = {1049-331X},\nurl = {https://doi.org/10.1145/3624745},\ndoi = {10.1145/3624745},\njournal = {ACM Trans. Softw. Eng. Methodol.},\nmonth = {dec},\narticleno = {40},\nnumpages = {37},\n}\n\n```\n",
                "type": "Text_excerpt",
                "original_header": "How to Cite ATheNA",
                "parent_header": [
                    "ATheNA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        },
        {
            "result": {
                "value": "@article{ATheNA,\n    numpages = {37},\n    articleno = {40},\n    month = {dec},\n    journal = {ACM Trans. Softw. Eng. Methodol.},\n    doi = {10.1145/3624745},\n    url = {https://doi.org/10.1145/3624745},\n    issn = {1049-331X},\n    number = {2},\n    volume = {33},\n    address = {New York, NY, USA},\n    publisher = {Association for Computing Machinery},\n    issue_date = {February 2024},\n    year = {2023},\n    title = {Search-Based Software Testing Driven by Automatically Generated and Manually Defined Fitness Functions},\n    author = {Formica, Federico and Fan, Tony and Menghi, Claudio},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3624745",
                "title": "Search-Based Software Testing Driven by Automatically Generated and Manually Defined Fitness Functions",
                "author": "Formica, Federico and Fan, Tony and Menghi, Claudio",
                "url": "https://doi.org/10.1145/3624745"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "contributors": [
        {
            "result": {
                "value": "The following authors contributed to writing this toolbox:\n\n* Federico Formica, McMaster University (Email:`formicaf at mcmaster dot ca`)\n* Mohammad Mahdi Mahboob, McMaster University (Email:`mahbom2 at mcmaster dot ca`)\n* Claudio Menghi, University of Bergamo, McMaster University (Email:`menghic at mcmaster dot ca`)\n",
                "type": "Text_excerpt",
                "original_header": "Contributors",
                "parent_header": [
                    "ATheNA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The replication package for the paper submitted to Transactions On Software Engineering and Methodologies (TOSEM) is in the branch *TOSEM*.  \nPlease, download Athena from the *main* branch and follow the installation instructions below to replicate the proposed results.   \n* In the branch *RQ1-RQ2*, for the results of Research Question 1 and 2 of the paper (Section 5.1 and 5.2 respectively)\n* In the branch *RQ3*, for the results of Research Question 3 of the paper (Section 5.3) \n",
                "original_header": "ATheNA"
            },
            "confidence": 0.9231438217604644,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "ATheNA"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ATheNA-SBST/ATheNA/main/README.md"
        }
    ]
}