{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:02:01"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/sqlancer/sqlancer",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "sqlancer",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-04-03T06:27:00Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-03T12:02:53Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Copyright 2020 SQLancer Contributors (see https://github.com/sqlancer/sqlancer)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/LICENSE.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Automated testing to find logic and performance bugs in database systems",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "1. Database generation: The goal of this phase is to create a populated database, and stress the DBMS to increase the probability of causing an inconsistent database state that could be detected subsequently. First, random tables are created. Then, randomly SQL statements are chosen to generate, modify, and delete data. Also other statements, such as those to create indexes as well as views and to set DBMS-specific options are sent to the DBMS.\n2. Testing: The goal of this phase is to detect the logic bugs based on the generated database. See Testing Approaches below. **News: we support Differential Query Plans (DQP) oracle now. See Testing Approaches below.**\n \n",
                "original_header": "SQLancer"
            },
            "confidence": 0.9699714691237582,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "| Approach                                             | Description|\n|------------------------------------------------------||\n| Pivoted Query Synthesis (PQS)                        | PQS is the first technique that we designed and implemented. It randomly selects a row, called a pivot row, for which a query is generated that is guaranteed to fetch the row. If the row is not contained in the result set, a bug has been detected. It is fully described [here](https://arxiv.org/abs/2001.04174). PQS is the most powerful technique, but also requires more implementation effort than the other two techniques. It is currently unmaintained. |\n| Non-optimizing Reference Engine Construction (NoREC) | NoREC aims to find optimization bugs. It is described [here](https://www.manuelrigger.at/preprints/NoREC.pdf). It translates a query that is potentially optimized by the DBMS to one for which hardly any optimizations are applicable, and compares the two result sets. A mismatch between the result sets indicates a bug in the DBMS.                                                                                                                                                                                                        |\n| Ternary Logic Partitioning (TLP)                     | TLP partitions a query into three partitioning queries, whose results are composed and compare to the original query's result set. A mismatch in the result sets indicates a bug in the DBMS. In contrast to NoREC and PQS, it can detect bugs in advanced features such as aggregate functions.                                                                                                                                                                                                                                                  |\n| Cardinality Estimation Restriction Testing (CERT)    | CERT aims to find performance issues through unexpected estimated cardinalities, which represent the estimated number of returned rows. It is described [here](https://arxiv.org/abs/2306.00355). It derives a query to a more restrict query, whose estimated cardinality should be no more than that for the original query. An violation indicates a potential performance issue. CERT supports TiDB, CockroachDB, and MySQL. |\n| Differential Query Plans (DQP)                       | DQP aims to find logic bugs in database systems by checking whether the query plans of the same query perform consistently. It is described [here](https://bajinsheng.github.io/assets/pdf/dqp_sigmod24.pdf). DQP supports MySQL, MariaDB, and TiDB.|\n \n",
                "original_header": "Testing Approaches"
            },
            "confidence": 0.9948950716121326,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "| Approach | Description |\n|----------|-------------|\n| Random Generation | Random generation is the default test case generation approach in SQLancer. First, random tables are generated. Then queries are randomly generated based on the schemas of the tables. |\n| Query Plan Guidance (QPG) | QPG is a test case generation method guided by query plan coverage. Given a database state, we mutate it after no new unique query plans have been observed by randomly-generated queries on the database state aiming to cover more unique query plans for exposing more logics of DBMSs. This approach is enabled by option `--qpg-enable` and now supports TLP and NoREC oracles for SQLite, CockroachDB, TiDB, and Materialize. | \n",
                "original_header": "Generation Approaches"
            },
            "confidence": 0.9363974417519818,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "| DBMS                         | Status      | Expression Generation        | Description                                                                                                                                                                                     |\n| ---------------------------- | ----------- | ---------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| SQLite                       | Working     | Untyped                      | This implementation is currently affected by a significant performance regression that still needs to be investigated                                                                           |\n| MySQL                        | Working     | Untyped                      | Running this implementation likely uncovers additional, unreported bugs.                                                                                                                        |\n| PostgreSQL                   | Working     | Typed                        |                                                                                                                                                                                                 |\n| Citus (PostgreSQL Extension) | Working     | Typed                        | This implementation extends the PostgreSQL implementation of SQLancer, and was contributed by the Citus team.                                                                                   |\n| MariaDB                      | Preliminary | Untyped                      | The implementation of this DBMS is very preliminary, since we stopped extending it after all but one of our bug reports were addressed. Running it likely uncovers additional, unreported bugs. |\n| CockroachDB                  | Working     | Typed                        |                                                                                                                                                                                                 |\n| TiDB                         | Working     | Untyped                      |                                                                                                                                                                                                 |\n| DuckDB                       | Working     | Untyped, Generic             |                                                                                                                                                                                                 |\n| ClickHouse                   | Preliminary | Untyped, Generic             | Implementing the different table engines was not convenient, which is why only a very preliminary implementation exists.                                                                        |\n| TDEngine                     | Removed     | Untyped                      | We removed the TDEngine implementation since all but one of our bug reports were still unaddressed five months after we reported them.                                                          |\n| OceanBase                    | Working     | Untyped                      |                                                                                                                                                                                                 |\n| YugabyteDB                   | Working     | Typed (YSQL), Untyped (YCQL) | YSQL implementation based on Postgres code. YCQL implementation is primitive for now and uses Cassandra JDBC driver as a proxy interface.                                                       |\n| Databend                     | Working     | Typed                        |                                                                                                                                                                                                 |\n| QuestDB                      | Working     | Untyped, Generic             | The implementation of QuestDB is still WIP, current version covers very basic data types, operations and SQL keywords.                                                                          |\n| CnosDB                       | Working     | Typed                        | The implementation of CnosDB currently uses Restful API.                                                                                                                                        |\n| Materialize                  | Working     | Typed                        |                                                                                                                                                                                                 |\n| Apache Doris                 | Preliminary | Typed                        | This is a preliminary implementation, which only contains the common logic of Doris. We have found some errors through it, and hope to improve it in the future.                                |\n| Presto                       | Preliminary | Typed                        | This is a preliminary implementation, only basic types supported.                                                                                                                               |\n| DataFusion                   | Preliminary | Typed                        | Only basic SQL features are supported.                                                                                                                                                          |\n \n",
                "original_header": "Supported DBMS"
            },
            "confidence": 0.9854713831167847,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* A talk on Ternary Logic Partitioning (TLP) and SQLancer is available on [YouTube](https://www.youtube.com/watch?v=Np46NQ6lqP8).\n* An (older) Pivoted Query Synthesis (PQS) talk is available on [YouTube](https://www.youtube.com/watch?v=yzENTaWe7qg).\n* PingCAP has implemented PQS, NoREC, and TLP in a tool called [go-sqlancer](https://github.com/chaos-mesh/go-sqlancer).\n* More information on our DBMS testing efforts and the bugs we found is available [here](https://www.manuelrigger.at/dbms-bugs/).\n \n",
                "original_header": "Additional Resources"
            },
            "confidence": 0.9118478887179908,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "sqlancer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "sqlancer/sqlancer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/sqlancer/sqlancer/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/sqlancer/sqlancer/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1475,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "cockroachdb, dbms, dbms-testing, fuzzing, mariadb, mysql, postgresql, sql, sqlite, testing, tidb",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 277,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/sqlancer/sqlancer/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 3801661
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Rust",
                "name": "Rust",
                "type": "Programming_language",
                "size": 16962
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 3040
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 313
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/sqlancer/sqlancer/releases/56953482",
                "tag": "v2.0.0",
                "name": "Version 2.0.0",
                "author": {
                    "name": "mrigger",
                    "type": "User"
                },
                "description": "* Support for OceanBase (https://github.com/sqlancer/sqlancer/pull/429)\r\n* Support for the document-store components of MongoDB, ArangoDB, and Cosmos (https://github.com/sqlancer/sqlancer/pull/319)\r\n* Options for specifying host and port arguments for many database systems (https://github.com/sqlancer/sqlancer/pull/315)\r\n* Other smaller updates and fixes",
                "tarball_url": "https://api.github.com/repos/sqlancer/sqlancer/tarball/v2.0.0",
                "zipball_url": "https://api.github.com/repos/sqlancer/sqlancer/zipball/v2.0.0",
                "html_url": "https://github.com/sqlancer/sqlancer/releases/tag/v2.0.0",
                "url": "https://api.github.com/repos/sqlancer/sqlancer/releases/56953482",
                "release_id": 56953482,
                "date_created": "2022-01-12T20:37:55Z",
                "date_published": "2022-01-12T20:39:42Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/sqlancer/sqlancer/releases/36819714",
                "tag": "1.1.0",
                "name": "Version 1.1.0: Publish Releases on Docker Hub",
                "author": {
                    "name": "mrigger",
                    "type": "User"
                },
                "description": "# Feature Additions\r\n\r\n* Publish releases also on Docker Hub (see https://hub.docker.com/repository/docker/mrigger/sqlancer).\r\n\r\n# Fixes\r\n\r\n* Address an expected Postgres error (see https://github.com/sqlancer/sqlancer/commit/72f6a3910220bb454f2a9e3961a1e5cb16669639).",
                "tarball_url": "https://api.github.com/repos/sqlancer/sqlancer/tarball/1.1.0",
                "zipball_url": "https://api.github.com/repos/sqlancer/sqlancer/zipball/1.1.0",
                "html_url": "https://github.com/sqlancer/sqlancer/releases/tag/1.1.0",
                "url": "https://api.github.com/repos/sqlancer/sqlancer/releases/36819714",
                "release_id": 36819714,
                "date_created": "2021-01-24T09:35:46Z",
                "date_published": "2021-01-24T09:51:22Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/sqlancer/sqlancer/releases/36789171",
                "tag": "v1.0.1",
                "name": "Version 1.0.1",
                "author": {
                    "name": "mrigger",
                    "type": "User"
                },
                "description": "* Fix various issues to enable hosting on Maven Central\r\n* Fix a Postgres error that occured seldom (see https://github.com/sqlancer/sqlancer/pull/287)\r\n* Fix a ClickHouse issue (see https://github.com/sqlancer/sqlancer/pull/294)",
                "tarball_url": "https://api.github.com/repos/sqlancer/sqlancer/tarball/v1.0.1",
                "zipball_url": "https://api.github.com/repos/sqlancer/sqlancer/zipball/v1.0.1",
                "html_url": "https://github.com/sqlancer/sqlancer/releases/tag/v1.0.1",
                "url": "https://api.github.com/repos/sqlancer/sqlancer/releases/36789171",
                "release_id": 36789171,
                "date_created": "2021-01-22T20:47:25Z",
                "date_published": "2021-01-22T20:53:46Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/sqlancer/sqlancer/releases/36677687",
                "tag": "v1.0",
                "name": "Initial release",
                "author": {
                    "name": "mrigger",
                    "type": "User"
                },
                "description": "\r\n",
                "tarball_url": "https://api.github.com/repos/sqlancer/sqlancer/tarball/v1.0",
                "zipball_url": "https://api.github.com/repos/sqlancer/sqlancer/zipball/v1.0",
                "html_url": "https://github.com/sqlancer/sqlancer/releases/tag/v1.0",
                "url": "https://api.github.com/repos/sqlancer/sqlancer/releases/36677687",
                "release_id": 36677687,
                "date_created": "2021-01-20T20:13:23Z",
                "date_published": "2021-01-20T20:15:24Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at manuel.rigger@inf.ethz.ch. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/CODE_OF_CONDUCT.md"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Development\n\n## Working with Eclipse\n\nDeveloping SQLancer using Eclipse is expected to work well. You can import SQLancer with a single step:\n\n```\nFile -> Import -> Existing Maven Projects -> Select the SQLancer directory as root directory -> Finish\n```\nIf you do not find an option to import Maven projects, you might need to install the [M2Eclipse plugin](https://www.eclipse.org/m2e/).\n\n\n## Implementing Support for a New DBMS\n\nThe DuckDB implementation provides a good template for a new implementation. The `DuckDBProvider` class is the central class that manages the creation of the databases and executes the selected test oracles. Try to copy its structure for the new DBMS that you want to implement, and start by generate databases (without implementing a test oracle). As part of this, you will also need to implement the equivalent of `DuckDBSchema`, which represents the database schema of the generated database. After you can successfully generate databases, the next step is to generate one of the test oracles. For example, you might want to implement NoREC (see `DuckDBNoRECOracle` or `DuckDBQueryPartitioningWhereTester` for TLP). As part of this, you must also implement a random expression generator (see `DuckDBExpressionGenerator`) and a visitor to derive the textual representation of an expression (see `DuckDBToStringVisitor`).\n\nPlease consider the following suggestions when creating a  PR to contribute a new DBMS:\n* Ensure that `mvn verify -DskipTests=true` does not result in style violations.\n* Add a [CI test](https://github.com/sqlancer/sqlancer/blob/master/.github/workflows/main.yml) to ensure that future changes to SQLancer are unlikely to break the newly-supported DBMS. It is reasonable to do this in a follow-up PR\u2014please indicate whether you plan to do so in the PR description.\n* Add the DBMS' name to the [check_names.py](https://github.com/sqlancer/sqlancer/blob/master/src/check_names.py) script, which ensures adherence to a common prefix in the Java classes.\n* Add the DBMS' name to the [README.md](https://github.com/sqlancer/sqlancer/blob/master/README.md#supported-dbms) file.\n* It would be easier to review multiple smaller PRs, than one PR that contains the complete implementation. Consider contributing parts of your implementation as you work on their implementation.\n\n### Expected Errors\n\nMost statements have an [ExpectedError](https://github.com/sqlancer/sqlancer/blob/aa0c0eccba4eefa75bfd518f608c9222c692c11d/src/sqlancer/common/query/ExpectedErrors.java) object associated with them. This object essentially contains a list of errors, one of which the database system might return if it cannot successfully execute the statement. These errors are typically added through a trial-and-error process while considering various tradeoffs. For example, consider the [DuckDBInsertGenerator](https://github.com/sqlancer/sqlancer/blob/aa0c0eccba4eefa75bfd518f608c9222c692c11d/src/sqlancer/duckdb/gen/DuckDBInsertGenerator.java#L38) class, whose expected errors are specified in [DuckDBErrors](https://github.com/sqlancer/sqlancer/blob/aa0c0eccba4eefa75bfd518f608c9222c692c11d/src/sqlancer/duckdb/DuckDBErrors.java#L90). When implementing such a generator, the list of expected errors might first be empty. When running the generator for the first time, you might receive an error such as \"create unique index, table contains duplicate data\", indicating that creating the index failed due to duplicate data. In principle, this error could be avoided by first checking whether the column contains any duplicate values. However, checking this would be expensive and error-prone (e.g., consider string similarity, which might depend on collations); thus, the obvious choice would be to add this string to the list of expected errors, and run the generator again to check for any other expected errors. In other cases, errors might be best addressed through improvements in the generators. For example, it is typically straightforward to generate syntactically-valid statements, which is why syntax errors should not be ignored. This approach is effective in uncovering internal errors; rather than ignoring them as an expected error, report them, and see [Unfixed Bugs](#unfixed-bugs) below.\n\n### Bailing Out While Generating a Statement\n\nIn some cases, it might be undesirable or even impossible to generate a specific statement type. For example, consider that SQLancer tries to execute a `DROP TABLE` statement (e.g., see [TiDBDropTableGenerator](https://github.com/sqlancer/sqlancer/blob/30948f34acc2354d6be18a70bdeeebff1e73fa48/src/sqlancer/tidb/gen/TiDBDropTableGenerator.java)), but the database contains only a single table. Dropping the table would result in all subsequent attempts to insert data or query it to fail. Thus, in such a case, it might be more efficient to \"bail out\" by abandoning the current attempt to generate the statement. This can be achieved by throwing a `IgnoreMeException`. Unlike for other exceptions, SQLancer silently continues execution rather than reporting this exception to the user.\n\n\n### Typed vs. Untyped Expression Generation\n\nEach DBMS implementation provides an expression generator used, for example, to generate expressions used in `WHERE` clauses. We found that DBMS can be roughly classified into \"permissive\" ones, which apply implicit type conversions when needed and \"strict\" ones, which provide only few implicit conversions and output an error when the type is unexpected. For example, consider the following test case:\n\n```sql\nCREATE TABLE t0(c0 TEXT);\nINSERT INTO t0 VALUES ('1');\nSELECT * FROM t0 WHERE c0;\n```\n\nIf the test case is executed using MySQL, which is a permissive DBMS, the `SELECT` fetches a single row, since the content of the `c0` value is interpreted as a boolean. If the test case is executed using PostgreSQL, which is a strict DBMS, the `SELECT` is not accepted as a valid query, and PostgreSQL outputs an error `\"argument of WHERE must be type boolean\"`.  The implementation of the expression generator depends on whether we are dealing with a permissive or a strict DBMS. Since SQLancer's main goal is to find logic bugs, we want to generate as many valid queries as possible.\n\nFor a permissive DBMS, implementing the expression generator is easier, since the expression generator does not need to care about the type of the expression, since the DBMS will apply any necessary conversions implicitly. For MySQL, the main `generateExpression` method thus does not accept any type as an argument (see [MySQLExpressionGenerator](https://github.com/sqlancer/sqlancer/blob/86647df8aa2dd8d167b5c3ce3297290f5b0b2bcd/src/sqlancer/mysql/gen/MySQLExpressionGenerator.java#L54)). This method can  be called when a expression is required for, for example, a `WHERE` clause. In principle, this approach can also be used for strict DBMS, by adding errors such as `argument of WHERE must be type boolean` to the list of expected errors. However, using such an \"untyped\" expression generator for a strict DBMS will result in many semantically invalid queries being generated.\n\nFor a strict DBMS, the better approach is typically to attempt to generate expressions of the expected type. For PostgreSQL, the expression generator thus expects an additional type argument (see [PostgreSQLExpressionGenerator](https://github.com/sqlancer/sqlancer/blob/86647df8aa2dd8d167b5c3ce3297290f5b0b2bcd/src/sqlancer/postgres/gen/PostgresExpressionGenerator.java#L251)). This type is propagated recursively. For example, if we require a predicate for the `WHERE` clause, we pass boolean as a type. The expression generator then calls a method `generateBooleanExpression` that attempts to produce a boolean expression, by, for example, generating a comparison (e.g., `<=`). For the comparison's operands, a random type is then selected and propagated. For example, if an integer type is selected, then `generateExpression` is called with this type once for the left operand, and once for the right operand. Note that this process does not guarantee that the expression will indeed have the expected type. It might happen, for example, that the expression generator attempts to produce an integer value, but that it produces a double value instead, namely when an integer overflow occurs, which, depending on the DBMS, implicitly converts the result to a floating-point value.\n\n### Unfixed Bugs\n\nOften, some bugs are fixed only after an extended period, meaning that SQLancer will repeatedly report the same bug. In such cases, it might be possible to avoid generating the problematic pattern, or adding an expected error with the internal error message. Rather than, for example, commenting out the code with the bug-inducing pattern, a pattern implemented by the [TiDBBugs class](https://github.com/sqlancer/sqlancer/blob/4c20a94b3ad2c037e1a66c0b637184f8c20faa7e/src/sqlancer/tidb/TiDBBugs.java) should be applied. The core idea is to use a public, static flag for each issue, which is set to true as long as the issue persists (e.g., see [bug35652](https://github.com/sqlancer/sqlancer/blob/4c20a94b3ad2c037e1a66c0b637184f8c20faa7e/src/sqlancer/tidb/TiDBBugs.java#L55)). The work-around code is then executed\u2014or the problematic pattern should not be generated\u2014if the flag is set to true (e.g., [an expected error is added for bug35652](https://github.com/sqlancer/sqlancer/blob/59564d818d991d54b32fa5a79c9f733799c090f2/src/sqlancer/tidb/TiDBErrors.java#L47)). This makes it easy to later on identify and remove all such work-around code once the issue has been fixed.\n\n## Options\n\nSQLancer uses [JCommander](https://jcommander.org/) for handling options. The `MainOptions` class contains options that are expected to be supported by all DBMS-testing implementations. Furthermore, each `*Provider` class provides a method to return an additional set of supported options.\n\nAn option can include lowercase alphanumeric characters, and hyphens. The format of the options is checked by a unit test.\n\n## Continuous Integration and Test Suite\n\nTo improve and maintain SQLancer's code quality, we use multiple tools:\n* The [Eclipse code formatter](https://code.revelc.net/formatter-maven-plugin/), to ensure a consistent formatting (Run `mvn formatter:format` to format all files).\n* [Checkstyle](https://checkstyle.sourceforge.io/), to enforce a consistent coding standard.\n* [PMD](https://pmd.github.io/), which finds programming flaws using static analysis.\n* [SpotBugs](https://spotbugs.github.io/), which also uses static analysis to find bugs and programming flaws.\n\nYou can run them using the following command:\n\n```\nmvn verify\n```\n\nWe use [GitHub Actions](https://github.com/sqlancer/sqlancer/blob/master/.github/workflows/main.yml) to automatically check PRs.\n\n\n## Testing\n\nAs part of the GitHub Actions check, we use smoke testing by running SQLancer on each supported DBMS for some minutes, to test that nothing is obviously broken. For DBMS for which all bugs have been fixed, we verify that SQLancer cannot find any further bugs (i.e., the return code is zero).\n\nIn addition, we use [unit tests](https://github.com/sqlancer/sqlancer/tree/master/test/sqlancer) to test SQLancer's core functionality, such as random string and number generation as well as option passing. When fixing a bug, add a unit test, if it is easily possible.\n\nYou can run the tests using the following command:\n\n```\nmvn test\n```\n\nNote that per default, the smoke testing is performed only for embedded DBMS (e.g., DuckDB and SQLite). To run smoke tests also for the other DBMS, you need to set environment variables. For example, you can run the MySQL smoke testing (and no other tests) using the following command:\n\n```\nMYSQL_AVAILABLE=true mvn -Dtest=TestMySQL test\n```\n\nFor up-to-date testing commands, check out the `.github/workflows/main.yml` file.\n\n## Reviewing\n\nReviewing is an effective way of improving code quality. Everyone is welcome to review any PRs. Currently, all PRs are reviewed at least by the main contributor, @mrigger. Contributions by @mrigger are currently not (necessarily) reviewed, which is not ideal. If you are willing to regularly and timely review PRs, indicate so in the SQLancer Slack workspace.\n\n## Naming Conventions\n\nEach class specific to a DBMS is prefixed by the DBMS name. For example, each class specific to SQLite is prefixed by `SQLite3`. The naming convention is [automatically checked](src/check_names.py).\n\n## Commit History\n\nPlease pay attention to good commit messages (in particular subject lines). As basic guidelines, we recommend a blog post on [How to Write a Git Commit Message](https://chris.beams.io/posts/git-commit/) written Chris Beams, which provides 7 useful rules. Implement at least the following of those rules:\n1. Capitalize the subject line. For example, write \"**R**efactor the handling of indexes\" rather than \"**r**efactor the handling of indexes\".\n2. Do not end the subject line with a period. For example, write \"Refactor the handling of indexes\" rather than \"Refactor the handling of indexes.\".\n3. Use the imperative mood in the subject line. For example, write \"Refactor the handling of indexes\" rather than \"Refactoring\" or \"Refactor**ed** the handling of indexes\".\n\nPlease also pay attention to a clean commit history. Rather than merging with the main branch, use `git rebase` to rebase your commits on the main branch. Sometimes, it might happen that you discover an issue only after having already created a commit, for example, when an issue is found by `mvn verify` in the CI checks. Do not introduce a separate commit for such issues. If the issue was introduced by the last commit, you can fix the issue, and use `git commit --amend` to change the latest commit. If the change was introduced by one of the previous commits, you can use `git rebase -i` to change the respective commit. If you already have a number of such commits, you can use `git squash` to \"collapse\" multiple commits into one. For more information, you might want to read [How (and Why!) to Keep Your Git Commit History Clean](https://about.gitlab.com/blog/2018/06/07/keeping-git-commit-history-clean/) written by Kushal Pandya.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/CONTRIBUTING.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/sqlancer/sqlancer/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "* [Contributing to SQLancer](CONTRIBUTING.md)\n* [Papers and .bib entries](docs/PAPERS.md)\n",
                "type": "Text_excerpt",
                "original_header": "Additional Documentation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/sqlancer/sqlancer/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Requirements:\n* Java 11 or above\n* [Maven](https://maven.apache.org/) (`sudo apt install maven` on Ubuntu)\n* The DBMS that you want to test (embedded DBMSs such as DuckDB, H2, and SQLite do not require a setup)\n\nThe following commands clone SQLancer, create a JAR, and start SQLancer to test SQLite using Non-optimizing Reference Engine Construction (NoREC):\n\n```\ngit clone https://github.com/sqlancer/sqlancer\ncd sqlancer\nmvn package -DskipTests\ncd target\njava -jar sqlancer-*.jar --num-threads 4 sqlite3 --oracle NoREC\n```\n\nIf the execution prints progress information every five seconds, then the tool works as expected. Note that SQLancer might find bugs in SQLite. Before reporting these, be sure to check that they can still be reproduced when using the latest development version. The shortcut CTRL+C can be used to terminate SQLancer manually. If SQLancer does not find any bugs, it executes infinitely. The option `--num-tries` can be used to control after how many bugs SQLancer terminates. Alternatively, the option `--timeout-seconds` can be used to specify the maximum duration that SQLancer is allowed to run.\n\nIf you launch SQLancer without parameters, available options and commands are displayed. Note that general options that are supported by all DBMS-testing implementations (e.g., `--num-threads`) need to precede the name of DBMS to be tested (e.g., `sqlite3`). Options that are supported only for specific DBMS (e.g., `--test-rtree` for SQLite3), or options for which each testing implementation provides different values (e.g. `--oracle NoREC`) need to go after the DBMS name.\n",
                "type": "Text_excerpt",
                "original_header": "Getting Started"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "value": "For some DBMSs, SQLancer expects that a database \"test\" exists, which it then uses as an initial database to connect to. If you have not yet created such a database, you can use a command such as `CREATE DATABASE test` to create this database (e.g., see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createdatabase.html)).\n",
                "type": "Text_excerpt",
                "original_header": "When starting SQLancer, I get an error such as \"database 'test' does not exist\". How can I run SQLancer without this error?",
                "parent_header": [
                    "FAQ"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "In many cases, SQLancer does not support the latest version of a DBMS. You can check the [`.github/workflows/main.yml`](https://github.com/sqlancer/sqlancer/blob/master/.github/workflows/main.yml) file to determine which version we use in our CI tests, which corresponds to the currently supported version of that DBMS. SQLancer should print only an `AssertionError` and produce a corresponding log file, if it has identified a bug. To upgrade SQLancer to support a new DBMS version, either two options are advisable: (1) the generators can be updated to no longer generate certain patterns that might cause errors (e.g., which might be the case if a keyword or option is no longer supported) or (2) the newly-appearing errors can be added as [expected errors](https://github.com/sqlancer/sqlancer/blob/354d591cfcd37fa1de85ec77ec933d5d975e947a/src/sqlancer/common/query/ExpectedErrors.java) so that SQLancer ignores them when they appear (e.g., this is useful if some error-inducing patterns cannot easily be avoided).\n\nAnother reason for many failures on a supported version could be that error messages are printed in a non-English locale (which would then be visible in the stack trace). In such a case, try setting the DBMS' locale to English (e.g., see the [PostgreSQL homepage](https://www.postgresql.org/docs/current/locale.html)).\n",
                "type": "Text_excerpt",
                "original_header": "I am running SQLancer on the latest version of a supported DBMS. Is it expected that SQLancer prints many AssertionErrors?",
                "parent_header": [
                    "FAQ"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "value": "For some DBMSs, SQLancer expects that a database \"test\" exists, which it then uses as an initial database to connect to. If you have not yet created such a database, you can use a command such as `CREATE DATABASE test` to create this database (e.g., see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createdatabase.html)).\n",
                "type": "Text_excerpt",
                "original_header": "When starting SQLancer, I get an error such as \"database 'test' does not exist\". How can I run SQLancer without this error?",
                "parent_header": [
                    "FAQ"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "For some DBMSs, SQLancer expects that a database \"test\" exists, which it then uses as an initial database to connect to. If you have not yet created such a database, you can use a command such as `CREATE DATABASE test` to create this database (e.g., see the [PostgreSQL documentation](https://www.postgresql.org/docs/current/sql-createdatabase.html)).\n",
                "type": "Text_excerpt",
                "original_header": "When starting SQLancer, I get an error such as \"database 'test' does not exist\". How can I run SQLancer without this error?",
                "parent_header": [
                    "FAQ"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9781244936815889,
            "technique": "supervised_classification"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We would appreciate it if you mention SQLancer when you report bugs found by it. We would also be excited to know if you are using SQLancer to find bugs, or if you have extended it to test another DBMS (also if you do not plan to contribute it to this project). SQLancer has found over 400 bugs in widely-used DBMS, which are listed [here](https://www.manuelrigger.at/dbms-bugs/). \n",
                "original_header": "Found Bugs"
            },
            "confidence": 0.9997291252891082,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "SQLancer"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "logo": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/media/logo/png/sqlancer_logo_logo_pos_500.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2001.04174"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2306.00355"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/sqlancer/sqlancer/main/README.md"
        }
    ]
}