{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:56:04"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/ICPC2022-Gypsum/GypSum_Code",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "ICPC2022-Gypsum",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-01-19T12:26:30Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-02T09:31:47Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Official implementation of our work, 'GypSum: Learning Hybrid Representations for Code Summarization'.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "We propose GypSum, a new deep learning model that learns hybrid representations using graph neural networks and a pre-trained programming and natural language model. GypSum uses two encoders to learn from the AST-based graph and the token sequence of source code, respectively, and modifies the encoder-decoder sublayer in the Transformer's decoder to fuse the representations.\n",
                "type": "Text_excerpt",
                "original_header": "Description",
                "parent_header": [
                    "Code Implementation For Paper \"GypSum: Learning Hybrid Representations for Code Summarization\""
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "GypSum_Code",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "ICPC2022-Gypsum/GypSum_Code",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/ICPC2022-Gypsum/GypSum_Code/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/ICPC2022-Gypsum/GypSum_Code/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 13,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "code-summarization, deep-learning, graph-attention-networks, graph-neural-networks, machine-learning",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ICPC2022-Gypsum/GypSum_Code/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 415154
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 369313
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 107
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/preprocess/python_ast.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/preprocess/python_ast.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/preprocess/generate_java_graph.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/preprocess/generate_java_graph.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/metor.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/metor.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/utils/anaysis.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/utils/anaysis.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/data/preprocess.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/gypsum/data/preprocess.ipynb"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "This repos is developed based on the environment of:\n\nPython 3.7\n\nPyTorch 1.7.0\n",
                "type": "Text_excerpt",
                "original_header": "Requirement",
                "parent_header": [
                    "Code Implementation For Paper \"GypSum: Learning Hybrid Representations for Code Summarization\""
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "1. How to construct graph for python and java program?\n   > you can use the function `get_graph_from_source` from `proprocess/java(python)_graph_construction.py`\n   After processing the code, save the data as `pkl` into data folder. \n2. How to run?\n   > ./run $GPU_ID$ $DATASET$ $TASK$ \n   > For example, if you want to train java model from scrach with `cuda:0`, you can just run command `./run 0 java train`\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "Code Implementation For Paper \"GypSum: Learning Hybrid Representations for Code Summarization\""
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "> We borrowed and modified code from [DrQA](https://github.com/facebookresearch/DrQA), [OpenNMT](https://github.com/OpenNMT/OpenNMT-py). We would like to expresse our gratitdue for the authors of these repositeries.\n",
                "type": "Text_excerpt",
                "original_header": "Acknowledgement",
                "parent_header": [
                    "Code Implementation For Paper \"GypSum: Learning Hybrid Representations for Code Summarization\""
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```bash\nGypsum-main\n\u251c\u2500- README.md\n\u251c\u2500\u2500 c2nl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 decoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 encoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eval\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inputters\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 objects\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tokenizers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 translator\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 general_config.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_xxx_xxx.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python\n\u251c\u2500\u2500 evaluation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bleu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 evaluate.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 meteor\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rouge\n\u251c\u2500\u2500 gypsum\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metor.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 model.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 predict.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 train.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 attention_zoo.py\n\u251c\u2500\u2500 preprocess\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 generate_java_graph.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_graph_construct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 python_ast.ipynb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python_graph.py\n\u2514\u2500\u2500 run\n``` \n",
                "original_header": "Structure"
            },
            "confidence": 0.9987916781197134,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```bash\nGypsum-main\n\u251c\u2500- README.md\n\u251c\u2500\u2500 c2nl\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 config.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 decoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 encoders\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 eval\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 inputters\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 models\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 objects\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tokenizers\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 translator\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 general_config.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_xxx_xxx.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python\n\u251c\u2500\u2500 evaluation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bleu\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 evaluate.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 meteor\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 rouge\n\u251c\u2500\u2500 gypsum\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 metor.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 model.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 predict.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 train.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 utils\n\u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 attention_zoo.py\n\u251c\u2500\u2500 preprocess\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 generate_java_graph.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 java_graph_construct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 python_ast.ipynb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 python_graph.py\n\u2514\u2500\u2500 run\n``` \n",
                "original_header": "Structure"
            },
            "confidence": 0.9740896082923021,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Code Implementation For Paper \"GypSum: Learning Hybrid Representations for Code Summarization\""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ICPC2022-Gypsum/GypSum_Code/main/README.md"
        }
    ]
}