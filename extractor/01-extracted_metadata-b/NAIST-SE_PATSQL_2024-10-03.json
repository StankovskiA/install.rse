{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:44:46"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/NAIST-SE/PATSQL",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "NAIST-SE",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-10-29T01:50:28Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-14T07:55:16Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/gpl-3.0",
                "type": "License",
                "name": "GNU General Public License v3.0",
                "url": "https://api.github.com/licenses/gpl-3.0",
                "spdx_id": "GPL-3.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "PATSQL - SQL Synthesizer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "PATSQL uses a sketch-based algorithm.\nThe sketch-based algorithm synthesizes a DSL and then generates SQL from the DSL.\nOur DSL is the extended relational algebra operators SELECT, PRJECT, LEFT JOIN, etc. plus WINDOW.\n`RA` in class names and package names comes from Relational Algebra.\n\nIt performs highly expressive query synthesis for aggregates, nested queries, windowed functions, etc. with a relatively small amount of hints (constants used in queries) compared to other SQL synthesis tools such as SCYTHE.\n\nFor details, please see the following file  \n[Algorithm overview](/Algorithm.md)\n",
                "type": "Text_excerpt",
                "original_header": "Algorithm Summary",
                "parent_header": [
                    "PATSQL - SQL Synthesizer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "| Package Name  | Description | the file you shoudl check first|\n|---|---|---|\n| `patsql.synth` | Top-level algorithms can be found here. If you want to understand patsql, you should read this package first. | `RASynthesizer.java` |\n| `patsql.synth.sketcher` | Sketcher is iterator to handle sketche generating. The expandSketch method has been implemented according to the rules of relational algebra given in the paper. | `Sketcher.java` |\n| `patsql.synth.filler` | Handle sketch completion. The sketchCompletion method is implemented according to the rules of relational algebra shown in the paper. | `SketchFiller.java` |\n| `patsql.synth.filler.strategy` | A search space pruning algorithm for each relational algebra operator is implemented. | `FillingStrategy.java` |\n| `patsql.entity.synth` | Define the Example class, SynthOption class, NamedTable class. used for PATSQL input. | all |\n| `patsql.entity.table` | Define the Table class to be used by PATSQL | `Table.java` |\n| `patsql.ra.operator` | Define relational algebra operators | `RAOperator.java` |\n| `patsql.ra.predicate` | Define predicate  | `Predicate.java` |\n| `patsql.ra.util` | A collection of utils for relational algebra operations. | `RAUtils.java` |\n| `patsql.generator.sql` | Handle the process of synthesizing SQL from DSL. | `SQLUtil` | \n",
                "original_header": "The role of each package"
            },
            "confidence": 0.9199778382091132,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "PATSQL",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "NAIST-SE/PATSQL",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/NAIST-SE/PATSQL/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/NAIST-SE/PATSQL/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 13,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 7,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/NAIST-SE/PATSQL/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 566591
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "HTML",
                "name": "HTML",
                "type": "Programming_language",
                "size": 381328
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 6017
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CSS",
                "name": "CSS",
                "type": "Programming_language",
                "size": 2094
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 29
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "The code is written in Java as an Eclipse project. Maven is also required to manage dependencies and build the project.\n- Java 1.8 or later\n- Maven 3.6.1 or later\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "PATSQL - SQL Synthesizer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Execute the following maven command. This generates `patsql-engine-1.0.0.jar` in the `target` directory. \n\n```\nmvn install -DskipTests\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "PATSQL - SQL Synthesizer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- `src`  - source code.\n- `test` - test code.\n- `test/patsql/synth/benchmark/ScytheSqlSynthesizerTest.java` - test code to execute `ase13` benchmark.\n- `test/patsql/synth/benchmark/ScytheTopRatedPostsTest.java` - test code to execute `so-top` benchmark.\n- `test/patsql/synth/benchmark/ScytheDevSetTest.java` - test code to execute `so-dev` benchmark.\n- `test/patsql/synth/benchmark/ScytheRecentPostsTest.java` - test code to execute `so-rec` benchmark.\n- `test/patsql/synth/benchmark/KaggleTest.java` - test code to execute `kaggle` benchmark.\n- `examples` - input and output tables used for test and evaluation.\n- `evaluation` - benchmark results in html. \n \n",
                "original_header": "Contents"
            },
            "confidence": 0.9267427049798416,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "See the transitive dependencies from each link below.  \n \n",
                "original_header": "Third-party libraries used in this project"
            },
            "confidence": 0.9117382247555469,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Module \"junit-jupiter-api\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api/5.5.1  \n \n",
                "original_header": "JUnit Jupiter API"
            },
            "confidence": 0.9991149948891617,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Module \"junit-jupiter-engine\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine/5.5.1  \n \n",
                "original_header": "JUnit Jupiter Engine"
            },
            "confidence": 0.9975455142165027,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Used to validate the syntax of synthesized queries in test.  \nLicense: EPL 1.0, MPL 2.0  \nVersion: 1.4.200  \nhttps://mvnrepository.com/artifact/com.h2database/h2/1.4.200  \n \n",
                "original_header": "H2 Database Engine"
            },
            "confidence": 0.9964433721899372,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Used to serialize and deserialize Java objects to JSON.  \nLicense: Apache 2.0  \nVersion: 2.8.6  \nhttps://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.6\n \n",
                "original_header": "Gson"
            },
            "confidence": 0.9992130645927784,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Used to format SQL queries.  \nLicense: LGPL 2.1  \nVersion: 5.4.11.Final  \nhttps://mvnrepository.com/artifact/org.hibernate/hibernate-core/5.4.11.Final  \n \n",
                "original_header": "Hibernate Core Relocation"
            },
            "confidence": 0.9970795871807295,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "PATSQL does not have a main method.  SQL synthesis examples are provided as JUnit test cases.  \nA basic test case is included in `patsql.synth.RASynthesizerTest.ExampleForSQLSynthesis`.   \nYou can follow this test case to use the tool.  \n\nThis test case consists of the following three steps: 1.\n1. prepare the input data\n2. run the synthesis\n3. output the results\n\nSQL synthesis is executed as follows.  \nThe synthesis can be executed by instantiating the RASynthesizer and calling the synthesize method. RASynthesizer calss implements the core of the synthesis\n\n```java\n\t\tRASynthesizer synth = new RASynthesizer(example, option);\n\t\tRAOperator result = synth.synthesize();\n\n\t\t// Convert the result into a SQL query\n\t\tString sql = SQLUtil.generateSQL(result);\n```\n\nThen, we will explain the `example` and `option` required for execution.  \nThe data required for PATSQL input are input/output tables and hints (constants included in the SQL to be generated).  \nThe input/output table corresponds to `example` and the hint corresponds to `option`.  \n\n\n",
                "type": "Text_excerpt",
                "original_header": "How to execute the synthesis?",
                "parent_header": [
                    "PATSQL - SQL Synthesizer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "value": "The input and output tables are defined by our original classes. See `patsql.entity.synth` and `patsql.entity.table` packages for the definition. \n\nInput/output tables use classes implemented independently by patsql. See `patsql.entity.synth` and `patsql.entity.table` for definitions.   \nWe will add data to each column using ColSchema instance as column name and Cell instance as data as follows.  \n\n```java\n\t\t// Create the input table by giving the schema and rows\n\t\tTable inTable = new Table(\n\t\t\t\tnew ColSchema(\"col1\", Type.Str), \n\t\t\t\tnew ColSchema(\"col2\", Type.Str), \n\t\t\t\tnew ColSchema(\"col3\", Type.Int), \n\t\t\t\tnew ColSchema(\"col4\", Type.Date)\n\t\t);\n\t\tinTable.addRow(\n\t\t\t\tnew Cell(\"A1\", Type.Str), \n\t\t\t\tnew Cell(\"XXX\", Type.Str), \n\t\t\t\tnew Cell(\"123\", Type.Int), \n\t\t\t\tnew Cell(\"20200709\", Type.Date)\n\t\t);\n\t\tinTable.addRow(\n\t\t\t\tnew Cell(\"A2\", Type.Str), \n\t\t\t\tnew Cell(\"XXX\", Type.Str), \n\t\t\t\tnew Cell(\"345\", Type.Int), \n\t\t\t\tnew Cell(\"null\", Type.Null)\n\t\t);\n\t\tinTable.addRow(\n\t\t\t\tnew Cell(\"A3\", Type.Str), \n\t\t\t\tnew Cell(\"XXX\", Type.Str), \n\t\t\t\tnew Cell(\"567\", Type.Int), \n\t\t\t\tnew Cell(\"20200713\", Type.Date)\n\t\t);\n\n\t\t// Create the output table\n\t\tTable outTable = new Table(\n\t\t\t\tnew ColSchema(\"col1\", Type.Str), \n\t\t\t\tnew ColSchema(\"col3\", Type.Int) \n\t\t);\n\t\toutTable.addRow(new Cell(\"A1\", Type.Str), new Cell(\"123\", Type.Int));\n\t\toutTable.addRow(new Cell(\"A3\", Type.Str), new Cell(\"567\", Type.Int));\n\n\t\t// Give a name to the input table. The name is used in the resulting query\n\t\tNamedTable namedInputTable = new NamedTable(\"input_table\", inTable);\n```\n\nWe can also create table instance from a csv file as follows:\n```java\n\t\tTable inTable1 = Utils.loadTableFromFile(\"examples/input1.csv\");\n\t\tTable outTable = Utils.loadTableFromFile(\"examples/output1.csv\");\n```\n",
                "type": "Text_excerpt",
                "original_header": "**Creating input and output tables**",
                "parent_header": [
                    "PATSQL - SQL Synthesizer",
                    "How to execute the synthesis?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "value": "PATSQL needs constants that are expected to be included in the SQL queries as hints.\nA `SynthOption` object is a hint to give to PATSQL, specifying a constant hint as a Cell instance that is expected to be included in the SQL query.\n```java\n\t\t// Specify used constants in the query as a hint\n\t\tSynthOption option = new SynthOption(\n\t\t\t\tnew Cell(\"A2\", Type.Str)\n\t\t);\n```\n",
                "type": "Text_excerpt",
                "original_header": "**Creating option(hint)**",
                "parent_header": [
                    "PATSQL - SQL Synthesizer",
                    "How to execute the synthesis?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        },
        {
            "result": {
                "value": "```java\n\t\tExample example = new Example(outTable, namedInputTable);\n\t\tRASynthesizer synth = new RASynthesizer(example, option);\n\t\tRAOperator result = synth.synthesize();\n\n\t\t// Convert the result into a SQL query\n\t\tString sql = SQLUtil.generateSQL(result);\n```\n\nThe input and output tables and SQL queries that synthesized by PATSQL are shown below\n<table>\n\t<tr>\n\t\t\t<th>Input table</th><th>Output table</th><th>Option</th><th>Synthesis results</th>\n\t</tr>\n\t<tr>\n\t\t<td>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<th>col1</th>\n\t\t\t\t<th>col2</th>\n\t\t\t\t<th>col3</th>\n\t\t\t\t<th>col4</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A1</td>\n\t\t\t\t<td>XXX</td>\n\t\t\t\t<td>123</td>\n\t\t\t\t<td>20200709</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A2</td>\n\t\t\t\t<td>XXX</td>\n\t\t\t\t<td>345</td>\n\t\t\t\t<td>null</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A3</td>\n\t\t\t\t<td>XXX</td>\n\t\t\t\t<td>567</td>\n\t\t\t\t<td>20200713</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n\t<td>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<th>col1</th>\n\t\t\t\t<th>col3</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A1</td>\n\t\t\t\t<td>123</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A2</td>\n\t\t\t\t<td>345</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>A3</td>\n\t\t\t\t<td>567</td>\n\t\t\t</tr>\n\t\t</table>\n\t</td>\n\t<td>\n\tA2\n\t</td>\n\t<td>\nSELECT<br>\n&emsp;&emsp;col1,<br>  \n&emsp;&emsp;col3<br>\nFROM<br>\n&emsp;&emsp;input_table<br>\nWHERE<br>\n&emsp;&emsp;col1 <> 'A2'<br>\nORDER BY<br> \n&emsp;&emsp;col1 ASC<br>\n\t</td>\n</tr>\n</table>\n\n",
                "type": "Text_excerpt",
                "original_header": "**Executing SQL synthesis**",
                "parent_header": [
                    "PATSQL - SQL Synthesizer",
                    "How to execute the synthesis?"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The example takes the input and output tables created above as arguments.\n```java\n\t\tExample example = new Example(outTable, namedInputTable);\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "**Creating example**",
                "parent_header": [
                    "PATSQL - SQL Synthesizer",
                    "How to execute the synthesis?",
                    "**Creating input and output tables**"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9656449400258131,
            "technique": "supervised_classification"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "PATSQL - SQL Synthesizer"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2010.05807"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
        }
    ]
}