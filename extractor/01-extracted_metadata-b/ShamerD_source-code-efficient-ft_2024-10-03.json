{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 23:58:11"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/ShamerD/source-code-efficient-ft",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "ShamerD",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-10-30T19:29:23Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-03-18T01:45:06Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Code for \"Parameter-Efficient Finetuning of Transformers for Source Code\" paper",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Testing PE methods (LoRA, FF-LoRA, AT, FF-LoRA + AT)\nwith source code Transformers (CodeT5, PLBART)\non source code tasks (code summarization, code generation, code translation, code clone detection).\n",
                "type": "Text_excerpt",
                "original_header": "Description"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "source-code-efficient-ft",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "ShamerD/source-code-efficient-ft",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/ShamerD/source-code-efficient-ft/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/ShamerD/source-code-efficient-ft/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 5,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/ShamerD/source-code-efficient-ft/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 14486701
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 860445
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 223556
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 23065
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CSS",
                "name": "CSS",
                "type": "Programming_language",
                "size": 7554
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 7026
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 2897
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jsonnet",
                "name": "Jsonnet",
                "type": "Programming_language",
                "size": 929
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/setup.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/CodeT5/evaluator/CodeBLEU/parser/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/CodeT5/sh/exp_with_args.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLG/create_datasets.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLG/download_pretrained_checkpoints.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLG/eval/download_evalscript.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_mrpc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_qnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_qnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/adapter_houlsby_roberta_large_mnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/mnli.cutoff.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_stsb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_qqp.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_mnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_cola.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_cola.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_stsb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_mrpc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_qnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_stsb.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/mnli.rdrop.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_mrpc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_mnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_rte.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_cola.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_mnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_base_sst2.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_rte.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_rte.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/adapter_pfeiffer_roberta_large_mnli.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_qqp.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_qqp.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/deberta_v2_xxlarge_sst2.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/roberta_large_sst2.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-tpu/docker-entrypoint.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/performer/full_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/performer/sanity_script.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/train_distilbart_xsum.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/finetune_t5.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/finetune_bart_tiny.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/distil_marian_no_teacher.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/dynamic_bs_example.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/finetune.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/distil_marian_enro_teacher.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/train_mbart_cc25_enro.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/finetune_pegasus_xsum.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/seq2seq-distillation/train_distilbart_cnn.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/rag/finetune_rag_ray.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/rag/finetune_rag.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/wav2vec2/finetune_large_lv60_100.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/wav2vec2/finetune_base_100.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/deebert/entropy_eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/deebert/eval_deebert.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/deebert/train_deebert.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/token-classification/run_chunk.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/token-classification/run_pos.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/token-classification/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/train_distil_marian_enro_tpu.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/finetune.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/finetune_tpu.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/train_mbart_cc25_enro.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/train_distil_marian_enro.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/seq2seq/train_distilbart_cnn.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/pytorch-lightning/run_pos.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/pytorch-lightning/run_ner.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/legacy/pytorch-lightning/run_glue.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/token-classification/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/tatoeba/upload_models.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/convert-allenai-wmt19.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/eval-facebook-wmt19.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/convert-allenai-wmt16.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/convert-facebook-wmt19.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/eval-allenai-wmt19.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/tests-to-run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/eval-allenai-wmt16.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/scripts/fsmt/s3-move.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "code_of_conduct": [
        {
            "result": {
                "value": "\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nfeedback@huggingface.co.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/CODE_OF_CONDUCT.md"
        }
    ],
    "license": [
        {
            "result": {
                "value": "Copyright 2018- The Hugging Face team. All rights reserved.\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/LICENSE"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "<!---\nCopyright 2020 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# How to contribute to transformers?\n\nEveryone is welcome to contribute, and we value everybody's contribution. Code\nis thus not the only way to help the community. Answering questions, helping\nothers, reaching out and improving the documentations are immensely valuable to\nthe community.\n\nIt also helps us if you spread the word: reference the library from blog posts\non the awesome projects it made possible, shout out on Twitter every time it has\nhelped you, or simply star the repo to say \"thank you\".\n\nWhichever way you choose to contribute, please be mindful to respect our\n[code of conduct](https://github.com/huggingface/transformers/blob/master/CODE_OF_CONDUCT.md).\n\n## You can contribute in so many ways!\n\nThere are 4 ways you can contribute to transformers:\n* Fixing outstanding issues with the existing code;\n* Implementing new models;\n* Contributing to the examples or to the documentation;\n* Submitting issues related to bugs or desired new features.\n\n*All are equally valuable to the community.*\n\n## Submitting a new issue or feature request\n\nDo your best to follow these guidelines when submitting an issue or a feature\nrequest. It will make it easier for us to come back to you quickly and with good\nfeedback.\n\n### Did you find a bug?\n\nThe transformers are robust and reliable thanks to the users who notify us of\nthe problems they encounter. So thank you for reporting an issue.\n\nFirst, we would really appreciate it if you could **make sure the bug was not\nalready reported** (use the search bar on Github under Issues).\n\nDid not find it? :( So we can act quickly on it, please follow these steps:\n\n* Include your **OS type and version**, the versions of **Python**, **PyTorch** and\n  **Tensorflow** when applicable;\n* A short, self-contained, code snippet that allows us to reproduce the bug in\n  less than 30s;\n* Provide the *full* traceback if an exception is raised.\n\nTo get the OS and software versions automatically, you can run the following command:\n\n```bash\ntransformers-cli env\n```\n\nor from the root of the repository the following command:\n\n```bash\npython src/transformers/commands/transformers_cli.py env\n```\n\n\n### Do you want to implement a new model?\n\nAwesome! Please provide the following information:\n\n* Short description of the model and link to the paper;\n* Link to the implementation if it is open-source;\n* Link to the model weights if they are available.\n\nIf you are willing to contribute the model yourself, let us know so we can best\nguide you.\n\nWe have added a **detailed guide and templates** to guide you in the process of adding a new model. You can find them\nin the [`templates`](https://github.com/huggingface/transformers/tree/master/templates) folder.\n\n### Do you want a new feature (that is not a model)?\n\nA world-class feature request addresses the following points:\n\n1. Motivation first:\n  * Is it related to a problem/frustration with the library? If so, please explain\n    why. Providing a code snippet that demonstrates the problem is best.\n  * Is it related to something you would need for a project? We'd love to hear\n    about it!\n  * Is it something you worked on and think could benefit the community?\n    Awesome! Tell us what problem it solved for you.\n2. Write a *full paragraph* describing the feature;\n3. Provide a **code snippet** that demonstrates its future use;\n4. In case this is related to a paper, please attach a link;\n5. Attach any additional information (drawings, screenshots, etc.) you think may help.\n\nIf your issue is well written we're already 80% of the way there by the time you\npost it.\n\nWe have added **templates** to guide you in the process of adding a new example script for training or testing the\nmodels in the library. You can find them in the [`templates`](https://github.com/huggingface/transformers/tree/master/templates)\nfolder.\n\n## Start contributing! (Pull Requests)\n\nBefore writing code, we strongly advise you to search through the existing PRs or\nissues to make sure that nobody is already working on the same thing. If you are\nunsure, it is always a good idea to open an issue to get some feedback.\n\nYou will need basic `git` proficiency to be able to contribute to\n`transformers`. `git` is not the easiest tool to use but it has the greatest\nmanual. Type `git --help` in a shell and enjoy. If you prefer books, [Pro\nGit](https://git-scm.com/book/en/v2) is a very good reference.\n\nFollow these steps to start contributing:\n\n1. Fork the [repository](https://github.com/huggingface/transformers) by\n   clicking on the 'Fork' button on the repository's page. This creates a copy of the code\n   under your GitHub user account.\n\n2. Clone your fork to your local disk, and add the base repository as a remote:\n\n   ```bash\n   $ git clone git@github.com:<your Github handle>/transformers.git\n   $ cd transformers\n   $ git remote add upstream https://github.com/huggingface/transformers.git\n   ```\n\n3. Create a new branch to hold your development changes:\n\n   ```bash\n   $ git checkout -b a-descriptive-name-for-my-changes\n   ```\n\n   **Do not** work on the `master` branch.\n\n4. Set up a development environment by running the following command in a virtual environment:\n\n   ```bash\n   $ pip install -e \".[dev]\"\n   ```\n\n   (If transformers was already installed in the virtual environment, remove\n   it with `pip uninstall transformers` before reinstalling it in editable\n   mode with the `-e` flag.)\n\n   To run the full test suite, you might need the additional dependency on `datasets` which requires a separate source\n   install:\n\n   ```bash\n   $ git clone https://github.com/huggingface/datasets\n   $ cd datasets\n   $ pip install -e .\n   ```\n\n   If you have already cloned that repo, you might need to `git pull` to get the most recent changes in the `datasets`\n   library.\n\n5. Develop the features on your branch.\n\n   As you work on the features, you should make sure that the test suite\n   passes:\n\n   ```bash\n   $ make test\n   ```\n\n   Note, that this command uses `-n auto` pytest flag, therefore, it will start as many parallel `pytest` processes as the number of your computer's CPU-cores, and if you have lots of those and a few GPUs and not a great amount of RAM, it's likely to overload your computer. Therefore, to run the test suite, you may want to consider using this command instead:\n\n   ```bash\n   $ python -m pytest -n 3 --dist=loadfile -s -v ./tests/\n   ```\n\n   Adjust the value of `-n` to fit the load your hardware can support.\n\n   `transformers` relies on `black` and `isort` to format its source code\n   consistently. After you make changes, format them with:\n\n   ```bash\n   $ make style\n   ```\n\n   `transformers` also uses `flake8` and a few custom scripts to check for coding mistakes. Quality\n   control runs in CI, however you can also run the same checks with:\n\n   ```bash\n   $ make quality\n   ```\n   You can do the automatic style corrections and code verifications that can't be automated in one go:\n\n   ```bash\n   $ make fixup\n   ```\n\n   This target is also optimized to only work with files modified by the PR you're working on.\n\n   If you're modifying documents under `docs/source`, make sure to validate that\n   they can still be built. This check also runs in CI. To run a local check\n   make sure you have installed the documentation builder requirements, by\n   running `pip install .[tf,torch,docs]` once from the root of this repository\n   and then run:\n\n   ```bash\n   $ make docs\n   ```\n\n   Once you're happy with your changes, add changed files using `git add` and\n   make a commit with `git commit` to record your changes locally:\n\n   ```bash\n   $ git add modified_file.py\n   $ git commit\n   ```\n\n   Please write [good commit\n   messages](https://chris.beams.io/posts/git-commit/).\n\n   It is a good idea to sync your copy of the code with the original\n   repository regularly. This way you can quickly account for changes:\n\n   ```bash\n   $ git fetch upstream\n   $ git rebase upstream/master\n   ```\n\n   Push the changes to your account using:\n\n   ```bash\n   $ git push -u origin a-descriptive-name-for-my-changes\n   ```\n\n6. Once you are satisfied (**and the checklist below is happy too**), go to the\n   webpage of your fork on GitHub. Click on 'Pull request' to send your changes\n   to the project maintainers for review.\n\n7. It's ok if maintainers ask you for changes. It happens to core contributors\n   too! So everyone can see the changes in the Pull request, work in your local\n   branch and push the changes to your fork. They will automatically appear in\n   the pull request.\n\n\n### Checklist\n\n1. The title of your pull request should be a summary of its contribution;\n2. If your pull request addresses an issue, please mention the issue number in\n   the pull request description to make sure they are linked (and people\n   consulting the issue know you are working on it);\n3. To indicate a work in progress please prefix the title with `[WIP]`. These\n   are useful to avoid duplicated work, and to differentiate it from PRs ready\n   to be merged;\n4. Make sure existing tests pass;\n5. Add high-coverage tests. No quality testing = no merge.\n   - If you are adding a new model, make sure that you use\n     `ModelTester.all_model_classes = (MyModel, MyModelWithLMHead,...)`, which triggers the common tests.\n   - If you are adding new `@slow` tests, make sure they pass using\n     `RUN_SLOW=1 python -m pytest tests/test_my_new_model.py`.\n   - If you are adding a new tokenizer, write tests, and make sure\n     `RUN_SLOW=1 python -m pytest tests/test_tokenization_{your_model_name}.py` passes.\n   CircleCI does not run the slow tests, but github actions does every night!\n6. All public methods must have informative docstrings that work nicely with sphinx. See `modeling_ctrl.py` for an\n   example.\n\n### Tests\n\nAn extensive test suite is included to test the library behavior and several examples. Library tests can be found in\nthe [tests folder](https://github.com/huggingface/transformers/tree/master/tests) and examples tests in the\n[examples folder](https://github.com/huggingface/transformers/tree/master/examples).\n\nWe like `pytest` and `pytest-xdist` because it's faster. From the root of the\nrepository, here's how to run tests with `pytest` for the library:\n\n```bash\n$ python -m pytest -n auto --dist=loadfile -s -v ./tests/\n```\n\nand for the examples:\n\n```bash\n$ pip install -r examples/requirements.txt  # only needed the first time\n$ python -m pytest -n auto --dist=loadfile -s -v ./examples/\n```\nIn fact, that's how `make test` and `make test-examples` are implemented (sans the `pip install` line)!\n\nYou can specify a smaller set of tests in order to test only the feature\nyou're working on.\n\nBy default, slow tests are skipped. Set the `RUN_SLOW` environment variable to\n`yes` to run them. This will download many gigabytes of models \u2014 make sure you\nhave enough disk space and a good Internet connection, or a lot of patience!\n\n```bash\n$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./tests/\n$ RUN_SLOW=yes python -m pytest -n auto --dist=loadfile -s -v ./examples/\n```\n\nLikewise, set the `RUN_CUSTOM_TOKENIZERS` environment variable to `yes` to run\ntests for custom tokenizers, which don't run by default either.\n\n\ud83e\udd17 Transformers uses `pytest` as a test runner only. It doesn't use any\n`pytest`-specific features in the test suite itself.\n\nThis means `unittest` is fully supported. Here's how to run tests with\n`unittest`:\n\n```bash\n$ python -m unittest discover -s tests -t . -v\n$ python -m unittest discover -s examples -t examples -v\n```\n\n\n### Style guide\n\nFor documentation strings, `transformers` follows the [google style](https://google.github.io/styleguide/pyguide.html).\nCheck our [documentation writing guide](https://github.com/huggingface/transformers/tree/master/docs#writing-documentation---specification)\nfor more information.\n\n#### This guide was heavily inspired by the awesome [scikit-learn guide to contributing](https://github.com/scikit-learn/scikit-learn/blob/master/CONTRIBUTING.md)\n\n\n### Develop on Windows\n\nOn windows, you need to configure git to transform Windows `CRLF` line endings to Linux `LF` line endings:\n\n`git config core.autocrlf input`\n\nOne way one can run the make command on Window is to pass by MSYS2:\n\n1. [Download MSYS2](https://www.msys2.org/), we assume to have it installed in C:\\msys64\n2. Open the command line C:\\msys64\\msys2.exe (it should be available from the start menu)\n3. Run in the shell: `pacman -Syu` and install make with `pacman -S make`\n4. Add `C:\\msys64\\usr\\bin` to your PATH environment variable.\n\nYou can now use `make` from any terminal (Powershell, cmd.exe, etc) \ud83c\udf89\n\n### Syncing forked master with upstream (HuggingFace) master\n\nTo avoid pinging the upstream repository which adds reference notes to each upstream PR and sends unnessary notifications to the developers involved in these PRs, \nwhen syncing the master branch of a forked repository, please, follow these steps:\n1. When possible, avoid syncing with the upstream using a branch and PR on the forked repository. Instead merge directly into the forked master.\n2. If a PR is absolutely necessary, use the following steps after checking out your branch:\n```\n$ git checkout -b your-branch-for-syncing\n$ git pull --squash --no-commit upstream master\n$ git commit -m '<your message without GitHub references>'\n$ git push --set-upstream origin your-branch-for-syncing\n```\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/CONTRIBUTING.md"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/ShamerD/source-code-efficient-ft/tree/main/LoRA/examples/NLU/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-cpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-cpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-gpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-gpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-tpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-tpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-tensorflow-cpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-tensorflow-cpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-tensorflow-gpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-tensorflow-gpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-cpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-cpu/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-gpu/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docker/transformers-pytorch-gpu/Dockerfile"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "<!---\nCopyright 2020 The HuggingFace Team. All rights reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n\n# Installation\n\n\ud83e\udd17 Transformers is tested on Python 3.6+, and PyTorch 1.1.0+ or TensorFlow 2.0+.\n\nYou should install \ud83e\udd17 Transformers in a [virtual environment](https://docs.python.org/3/library/venv.html). If you're\nunfamiliar with Python virtual environments, check out the [user guide](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/). Create a virtual environment with the version of Python you're going\nto use and activate it.\n\nNow, if you want to use \ud83e\udd17 Transformers, you can install it with pip. If you'd like to play with the examples, you\nmust install it from source.\n\n## Installation with pip\n\nFirst you need to install one of, or both, TensorFlow 2.0 and PyTorch.\nPlease refer to [TensorFlow installation page](https://www.tensorflow.org/install/pip#tensorflow-2.0-rc-is-available),\n[PyTorch installation page](https://pytorch.org/get-started/locally/#start-locally) and/or\n[Flax installation page](https://github.com/google/flax#quick-install)\nregarding the specific install command for your platform.\n\nWhen TensorFlow 2.0 and/or PyTorch has been installed, \ud83e\udd17 Transformers can be installed using pip as follows:\n\n```bash\npip install transformers\n```\n\nAlternatively, for CPU-support only, you can install \ud83e\udd17 Transformers and PyTorch in one line with:\n\n```bash\npip install transformers[torch]\n```\n\nor \ud83e\udd17 Transformers and TensorFlow 2.0 in one line with:\n\n```bash\npip install transformers[tf-cpu]\n```\n\nor \ud83e\udd17 Transformers and Flax in one line with:\n\n```bash\npip install transformers[flax]\n```\n\nTo check \ud83e\udd17 Transformers is properly installed, run the following command:\n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('we love you'))\"\n```\n\nIt should download a pretrained model then print something like\n\n```bash\n[{'label': 'POSITIVE', 'score': 0.9998704791069031}]\n```\n\n(Note that TensorFlow will print additional stuff before that last statement.)\n\n## Installing from source\n\nHere is how to quickly install `transformers` from source:\n\n```bash\npip install git+https://github.com/huggingface/transformers\n```\n\nNote that this will install not the latest released version, but the bleeding edge `master` version, which you may want to use in case a bug has been fixed since the last official release and a new release hasn't  been yet rolled out.\n\nWhile we strive to keep `master` operational at all times, if you notice some issues, they usually get fixed within a few hours or a day and and you're more than welcome to help us detect any problems by opening an [Issue](https://github.com/huggingface/transformers/issues) and this way, things will get fixed even sooner.\n\nAgain, you can run:\n\n```bash\npython -c \"from transformers import pipeline; print(pipeline('sentiment-analysis')('I hate you'))\"\n```\n\nto check \ud83e\udd17 Transformers is properly installed.\n\n## Editable install\n\nIf you want to constantly use the bleeding edge `master` version of the source code, or if you want to contribute to the library and need to test the changes in the code you're making, you will need an editable install. This is done by cloning the repository and installing with the following commands:\n\n``` bash\ngit clone https://github.com/huggingface/transformers.git\ncd transformers\npip install -e .\n```\n\nThis command performs a magical link between the folder you cloned the repository to and your python library paths, and it'll look inside this folder in addition to the normal library-wide paths. So if normally your python packages get installed into:\n```\n~/anaconda3/envs/main/lib/python3.7/site-packages/\n```\nnow this editable install will reside where you clone the folder to, e.g. `~/transformers/` and python will search it too.\n\nDo note that you have to keep that `transformers` folder around and not delete it to continue using the  `transfomers` library.\n\nNow, let's get to the real benefit of this installation approach. Say, you saw some new feature has been just committed into `master`. If you have already performed all the steps above, to update your transformers to include all the latest commits, all you need to do is to `cd` into that cloned repository folder and update the clone to the latest version:\n\n```\ncd ~/transformers/\ngit pull\n```\n\nThere is nothing else to do. Your python environment will find the bleeding edge version of `transformers` on the next run.\n\n\n## With conda\n\nSince Transformers version v4.0.0, we now have a conda channel: `huggingface`.\n\n\ud83e\udd17 Transformers can be installed using conda as follows:\n\n```\nconda install -c huggingface transformers\n```\n\nFollow the installation pages of TensorFlow, PyTorch or Flax to see how to install them with conda.\n\n## Caching models\n\nThis library provides pretrained models that will be downloaded and cached locally. Unless you specify a location with\n`cache_dir=...` when you use methods like `from_pretrained`, these models will automatically be downloaded in the\nfolder given by the shell environment variable ``TRANSFORMERS_CACHE``. The default value for it will be the Hugging\nFace cache home followed by ``/transformers/``. This is (by order of priority):\n\n  * shell environment variable ``HF_HOME``\n  * shell environment variable ``XDG_CACHE_HOME`` + ``/huggingface/``\n  * default: ``~/.cache/huggingface/``\n\nSo if you don't have any specific environment variable set, the cache directory will be at\n``~/.cache/huggingface/transformers/``.\n\n**Note:** If you have set a shell environment variable for one of the predecessors of this library\n(``PYTORCH_TRANSFORMERS_CACHE`` or ``PYTORCH_PRETRAINED_BERT_CACHE``), those will be used if there is no shell\nenvironment variable for ``TRANSFORMERS_CACHE``.\n\n### Note on model downloads (Continuous Integration or large-scale deployments)\n\nIf you expect to be downloading large volumes of models (more than 1,000) from our hosted bucket (for instance through\nyour CI setup, or a large-scale production deployment), please cache the model files on your end. It will be way\nfaster, and cheaper. Feel free to contact us privately if you need any help.\n\n### Offline mode\n\nIt's possible to run \ud83e\udd17 Transformers in a firewalled or a no-network environment.\n\nSetting environment variable `TRANSFORMERS_OFFLINE=1` will tell \ud83e\udd17 Transformers to use local files only and will not try to look things up.\n\nMost likely you may want to couple this with `HF_DATASETS_OFFLINE=1` that performs the same for \ud83e\udd17 Datasets if you're using the latter.\n\nHere is an example of how this can be used on a filesystem that is shared between a normally networked and a firewalled to the external world instances.\n\nOn the instance with the normal network run your program which will download and cache models (and optionally datasets if you use \ud83e\udd17 Datasets). For example:\n\n```\npython examples/seq2seq/run_translation.py --model_name_or_path t5-small --dataset_name wmt16 --dataset_config ro-en ...\n```\n\nand then with the same filesystem you can now run the same program on a firewalled instance:\n```\nHF_DATASETS_OFFLINE=1 TRANSFORMERS_OFFLINE=1 \\\npython examples/seq2seq/run_translation.py --model_name_or_path t5-small --dataset_name wmt16 --dataset_config ro-en ...\n```\nand it should succeed without any hanging waiting to timeout.\n\n\n\n## Do you want to run a Transformer model on a mobile device?\n\nYou should check out our [swift-coreml-transformers](https://github.com/huggingface/swift-coreml-transformers) repo.\n\nIt contains a set of tools to convert PyTorch or TensorFlow 2.0 trained Transformer models (currently contains `GPT-2`,\n`DistilGPT-2`, `BERT`, and `DistilBERT`) to CoreML models that run on iOS devices.\n\nAt some point in the future, you'll be able to seamlessly move from pretraining or fine-tuning models in PyTorch or\nTensorFlow 2.0 to productizing them in CoreML, or prototype a model or an app in CoreML then research its\nhyperparameters or architecture from PyTorch or TensorFlow 2.0. Super exciting!\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/docs/source/installation.md"
        },
        {
            "result": {
                "value": "```shell\n./setup.sh\n```\n\n`LoRA/examples/NLU` contains source code of Transformers library\n\nIn order to add new method/model you need to do the following:\n1. Modify Transformers' model code. See `LoRA/examples/NLU/src/transformers/models/plbart` for example.\n2. Modify running scripts to support added method/model. See `CodeT5/configs.py`, `CodeT5/run_gen.py`, `CodeT5/sh/run.py`.\n",
                "type": "Text_excerpt",
                "original_header": "Installation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/lxmert/demo.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/lxmert/demo.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/movement-pruning/Saving_PruneBERT.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/examples/research_projects/movement-pruning/Saving_PruneBERT.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/01-training-tokenizers.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/01-training-tokenizers.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/03-pipelines.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/03-pipelines.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/02-transformers.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/02-transformers.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/04-onnx-export.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/04-onnx-export.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/05-benchmark.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/LoRA/examples/NLU/notebooks/05-benchmark.ipynb"
        }
    ],
    "run": [
        {
            "result": {
                "value": "If SLURM system is being used experiments can be run with\n```shell\nsbatch experiments/{id}_{model}_{method}_{task}_{info}.sbatch\n```\nwhere the pattern is approximately follows:\n- `{id}` is the number of experiment;\n- `{model}` is empty for CodeT5 and `plbart` for PLBART;\n- `{method}` is the used Efficient Finetuning method `lora, fflora, adapt, comb (or loraadapt in earlier experiments)` or `clean` for full finetuning;\n- `{task}` is the task: `sum(py|go|java)` for code summarization, `gen` for code generation, `translate_(cj|jc)` for code translation, `clone` for code clone detection;\n- `{info}` is optional experiment-specific information\n\nOtherwise, adapt script to shell syntax (see `experiments/README.md`)\n\nPlease, refer to `experiments/README.md` for details on how to reproduce each Figure or Table.",
                "type": "Text_excerpt",
                "original_header": "Running experiments"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Parameter-Efficient Finetuning of Transformers for Source Code"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/ShamerD/source-code-efficient-ft/main/README.md"
        }
    ]
}