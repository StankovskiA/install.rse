{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:53:54"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/katsumiok/pyaskit",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "katsumiok",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-07-24T18:05:43Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-10T07:41:34Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2023 Katsumi Okuda\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/LICENSE"
        },
        {
            "result": {
                "value": "This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "AskIt: Unified programming interface for programming with LLMs (GPT-3.5, GPT-4, Gemini, Claude, Cohere, Llama 2)",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "*AskIt* serves as a dedicated library or domain-specific language designed to streamline the utilization of Large Language Models (LLMs) such as GPT-4, Gemini, Claude, COHERE, and LLama2. It simplifies the complexities of prompt engineering and eradicates the requirement for parsing responses from LLMs, making programming tasks smoother.\n\nUsing *AskIt*, you can deploy LLMs for a multitude of tasks, such as:\n\n- Natural Language Processing: including translation, paraphrasing, and sentiment analysis.\n- Problem Solving: resolving mathematical problems.\n- Code Generation: creating new codes, and more.\n\n*pyaskit* can use GPT, Gemini, Claude, COHERE, or LLama2 as a backend.\n*pyaskit* operates through the [OpenAI API](https://beta.openai.com/),[Gemini API](https://ai.google.dev/), [Claude API](https://anthropic.com/), and [COHERE API](https://cohere.ai/) or [LLama2 API](https://github.com/facebookresearch/llama). Besides Python, *AskIt* has also been implemented in TypeScript. You can access the TypeScript version, [ts-askit](https://github.com/katsumiok/ts-askit).\n",
                "type": "Text_excerpt",
                "original_header": "Introduction",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "pyaskit",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "katsumiok/pyaskit",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/katsumiok/pyaskit/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/katsumiok/pyaskit/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 71,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "api-wrapper, claude-3, code-generation, cohere, gemini, gpt, gpt-3, gpt-4, gpt4, llama2, llm, openai, openai-api, parser, pbe, prompt, prompt-engineering, prompt-toolkit, wrapper",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 4,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/katsumiok/pyaskit/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 79680
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Contributing to *AskIt*\n\nFirst off, thank you for considering contributing to AskIt. It's people like you that make AskIt such a great tool.\n\nFollowing these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests.\n\n## How Can I Contribute?\n\n### Reporting Bugs\n\nThis section guides you through submitting a bug report for AskIt. Following these guidelines helps maintainers and the community understand your report, reproduce the behavior and find related reports.\n\n- Use the GitHub issue tracker to report bugs.\n- Before submitting a bug report, please check if a similar issue has already been reported. If there is, please add any more information that you have, it might be very helpful.\n- Be as detailed as possible. All the details provided will help us understand more about the problem and fix it faster.\n\n### Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion for AskIt, including completely new features and minor improvements to existing functionality.\n\n- Use the GitHub issue tracker to suggest enhancements.\n- Provide as many details as possible in your issue.\n\n### Pull Requests\n\n- Fork the project, create a new branch, make your changes, and create a pull request. \n\n## Setup for Local Development\n\n- First, fork the AskIt repo on GitHub.\n- Clone your fork locally:\n\n```bash\ngit clone git@github.com:katsumiok/py_askit.git\n```\n\n\n- Install the development requirements:\n\n```bash\npip install -r requirements_dev.txt\n```\n\n- Create a branch for local development:\n\n```bash\ngit checkout -b name-of-your-bugfix-or-feature\n```\n\n- Make your changes locally.\n- When you're done making changes, check that your changes pass flake8 and the tests:\n\n```bash\nblack pyaskit tests\nmypy pyaskit tests\npytest\n```\n\n- Commit your changes and push your branch to GitHub:\n\n```bash\ngit add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n```\n\n- Submit a pull request through the GitHub website.\n\n## Project Setup\n\nXXX: Add project setup instructions here.\n\n## Code Review\n\n<!--\nLook for the GitHub's pull request page after you push your changes. Click the `Reviewers` dropdown and select the person or team you want to review your pull request.\n>\n\n## PR Approval\n\nWe review Pull Requests on a regular basis. We will provide feedback if any changes are needed. If the PR is approved, we will merge your changes.\n\nAgain, thank you for your contribution!\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/CONTRIBUTING.md"
        },
        {
            "result": {
                "value": "See [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct, and the process for submitting pull requests to us.\n",
                "type": "Text_excerpt",
                "original_header": "Contributing",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "To install *AskIt*, run this command in your terminal:\n\n```bash\npip install pyaskit\n```\nor\n```bash\npip install git+https://github.com/katsumiok/pyaskit.git\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "Before using *AskIt*, you need to set your API key as an appropriate environment variable:\n\n- OpenAI API: `OPENAI_API_KEY`\n- Gemini API: `GOOGLE_API_KEY`\n- Claude API: `ANTHROPIC_API_KEY`\n- COHERE API: `CO_API_KEY`\n- groq API: `GROQ_API_KEY`\n\nFor example, to use OpenAI API, you need to set your OpenAI API key as an environment variable `OPENAI_API_KEY`:\n```bash\nexport OPENAI_API_KEY=<your OpenAI API key>\n```\n`<your OpenAI API key>` is a string that looks like this: `sk-<your key>`.\n You can find your OpenAI API key in the [OpenAI dashboard](https://platform.openai.com/account/api-keys).\n\nYou need to specify the model name as an environment variable `ASKIT_MODEL`:\n```bash\nexport ASKIT_MODEL=<model name>\n```\n`<model name>` is the name of the model you want to use.\nThe latest AskIt is tested with `gpt-4`, `gpt-3.5-turbo-16k`, `gemini-pro`, `claude-2.1`, and `cohere-2.0`. You can find the list of available models in the [OpenAI API documentation](https://platform.openai.com/docs/models), [Gemini API documentation](https://ai.google.dev/), [Claude API documentation](https://anthropic.com/), and [COHERE API documentation](https://cohere.ai/).\nYou can also find the available models in the [`models.py`](https://github.com/katsumiok/pyaskit/blob/main/pyaskit/models.py) file.\n",
                "type": "Text_excerpt",
                "original_header": "Preparation for OpenAI API, Gemini API, Claude API, or COHERE API",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "Before using *AskIt* with Llama 2, you need to install it. To install Llama 2, run this command in your terminal:\n```bash\npip install git+https://github.com/facebookresearch/llama.git\n```\nYou also need to download the tokenizer model and the checkpoint of the model you want to use. Please refer to the Llama 2 documentation for further details.\n\nWe provide an example of using *AskIt* with Llama 2 in the [examples](examples) directory.\nTo run the example, run this command in your terminal:\n\n```shell\ntorchrun --nproc_per_node 1 examples/use_llama2.py \\\n    --ckpt_dir llama-2-7b-chat/ \\\n    --tokenizer_path tokenizer.model \\\n    --max_seq_len 512 --max_batch_size 6\n```\n",
                "type": "Text_excerpt",
                "original_header": "Preparation for Llama 2 API (Experimental)",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "| Type | Description | Type Example | Value Example |\n| --- | --- | --- | --- |\n| `int` | Integer | `t.int` |  123 |\n| `float` | Floating Point Number | `t.float` | 1.23 |\n| `bool` | Boolean | `t.bool` | True |\n| `str` | String | `t.str` | \"Hello World!\" |\n| `literal` | Literal | `t.literal(123)` | 123 |\n| `list` | List |  `t.list(t.int)` | [1, 2, 3] |\n| `dict` | Dictionary |  `t.dict({` <br>&nbsp;`'a': t.int, `<br>&nbsp;`'b': t.str` <br>`})` |{'a': 1, 'b': \"abc\"} |\n| `record`| Dictionary | `t.record(t.str, t.int)` | {'a': 1, 'b': 2} | \n| `tuple` | Tuple | `t.tuple(t.int, t.str)` | (1, \"abc\") |\n| `union` | Union (Multiple Possible Values) | `t.union(t.literal('yes'), t.literal('no'))` | \"yes\" or \"no\" |\n|         |                                  | `t.literal('yes') \\| t.literal('no')` | \"yes\" or \"no\" |\n|         |                                  | `t.literal('yes', 'no')` | \"yes\" or \"no\" |\n| `None`  | None                             | `None` | None | \n",
                "original_header": "Specifying Types in *AskIt*"
            },
            "confidence": 0.9998550507276229,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Here are some basic examples to help you familiarize yourself with *AskIt*:\n",
                "type": "Text_excerpt",
                "original_header": "Getting Started",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "```python\nimport pyaskit as ai\n\ns = ai.ask(str, 'Paraphrase \"Hello World!\"')\nprint(s)\n```\n\nTo utilize *AskIt*, start by importing the `pyaskit` module. The `ask` API, which takes two arguments - the output type and the prompt - produces the LLM's output in the designated format. In this case, the output type is `str` and the prompt is `Paraphrase \"Hello World!\"`. A comprehensive explanation of types in *AskIt* is provided in the [Types](#types) section. Executing this code will yield a paraphrase of the prompt, such as:\n```\nGreetings, Planet!\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Hello World",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Getting Started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "The `function` decorator allows defining a function with a prompt template. The parameters of a defined function can be used as parameters of a prompt template. For example,\n\n```python\nfrom pyaskit import function\n\n@function(codable=False)\ndef paraphrase(text: str) -> str:\n    \"\"\"Paraphrase {{text}}\"\"\"\n\ns = paraphrase('Hello World!')\nprint(s)\n```\n\nWhere `{{text}}` represents a template parameter and corresponds to the function parameter.\n",
                "type": "Text_excerpt",
                "original_header": "With the `function` decorator",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Getting Started",
                    "Defining a Function from a Prompt Template"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "The `define` API allows for prompt parameterization using template syntax:\n\n```python\nimport pyaskit as ai\n\nparaphrase = ai.define(str, 'Paraphrase {{text}}')\ns = paraphrase(text='Hello World!')\n# s = paraphrase('Hello World!') # This is also valid\nprint(s)\n```\nIn this instance, the `define` API creates a templated function that instructs the LLM to paraphrase specified text. Invoking the `paraphrase` function with 'Hello World!' will return a paraphrased version of this text. Running this code might output something like \"Greetings, Planet!\".\n\nThe `define` API allows for straightforward creation of custom functions to harness the capabilities of large language models for diverse tasks. Further examples can be found in the [examples](examples) directory.\n",
                "type": "Text_excerpt",
                "original_header": "With the `define` API",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Getting Started",
                    "Defining a Function from a Prompt Template"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "Certain tasks, such as those requiring real-time data, external resources like network access, file access, or database access, are unsuitable for LLM execution. However, *AskIt* can handle these tasks by converting the prompt into a Python program in the background.\n\nThe subsequent example demonstrates using *AskIt* to tackle a task necessitating network access:\n\n```python\nimport pyaskit as ai\n\nget_html = ai.define(str, 'Get the webpage from {{url}}').compile()\nhtml = get_html(url='https://csail.mit.edu')\nprint(html)\n```\nIn this scenario, you only need to call `compile()` on the function returned by the `define` API. The `compile` function transforms the prompt into a Python program and returns a function that executes this code, behaving just like a regular Python function.\n\nWhile the above example does not specify the type of the parameter `url`, *AskIt* provides the `defun` API to do so. The following code demonstrates how to define a function in which the type of the parameter `url` is specified as `str`:\n\n```python\nimport pyaskit as ai\n\nget_html = ai.defun(str, {\"url\": str}, 'Get the webpage from {{url}}').compile()\nhtml = get_html(url='https://csail.mit.edu')\nprint(html)\n```\nThe second argument of the `defun` API is a dictionary that maps parameter names to their types.\n\nWe can the same thing with the following code:\n```python\nfrom pyaskit import function\n\n@function(codable=True)\ndef get_html(url: str) -> str:\n    \"\"\"Get the webpage from {{url}}\"\"\"\nhtml = get_html(url='https://csail.mit.edu')\nprint(html)\n```",
                "type": "Text_excerpt",
                "original_header": "Generating Functions for Codable Tasks",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Getting Started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "Language Learning Models (LLMs) offer the advantage of few-shot learning, a capability that *AskIt* utilizes in programming tasks. *AskIt* enables you to solve tasks using the Programming by Example (PBE) technique, where you provide examples of the desired input and output.\n\nLet's consider creating a function to add two binary numbers (represented as strings). This function accepts two binary numbers and returns their sum, also in binary form. The following code demonstrates defining such a function using illustrative examples.\n\n```python\nfrom pyaskit import define\n\ntraining_examples = [\n    {\"input\": {\"x\": \"1\", \"y\": \"0\"}, \"output\": \"1\"},\n    {\"input\": {\"x\": \"1\", \"y\": \"1\"}, \"output\": \"10\"},\n    {\"input\": {\"x\": \"101\", \"y\": \"11\"}, \"output\": \"1000\"},\n    {\"input\": {\"x\": \"1001\", \"y\": \"110\"}, \"output\": \"1111\"},\n    {\"input\": {\"x\": \"1111\", \"y\": \"1\"}, \"output\": \"10000\"},\n]\n\nadd_binary_numbers = define(str, \"Add {{x}} and {{y}}\", training_examples=training_examples)\nsum_binary = add_binary_numbers(x=\"101\", y=\"11\")\nprint(sum_binary)  # Output: \"1000\"\n```\nIn this example, the `define` API takes three arguments: the output type, the prompt, and the training examples. Each entry in the training examples list is a dictionary containing an 'input' dictionary (with variable names and values) and an 'output' representing the expected function output given the input. The `define` API then returns a function that accepts input variables as keyword arguments and outputs the LLM's output in the specified type.\n\nThe `add_binary_numbers` function, which adds two binary numbers, behaves like any regular Python function.\n",
                "type": "Text_excerpt",
                "original_header": "Function Definition Using Examples",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Programming by Example (PBE)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "You can use the `compile` function to test the generated function using an optional list of test examples.\n\nThe following code demonstrates how to test the function defined above with new test examples:\n\n```python\ntest_examples = [\n    {\"input\": {\"x\": \"0\", \"y\": \"1\"}, \"output\": \"1\"},\n    {\"input\": {\"x\": \"10\", \"y\": \"0\"}, \"output\": \"10\"},\n    {\"input\": {\"x\": \"110\", \"y\": \"10\"}, \"output\": \"1000\"},\n]\nf = add_binary_numbers.compile(test_examples=test_examples)\nsum_binary = f(x=\"101\", y=\"11\")\nprint(sum_binary)  # Output: \"1000\"\n```\nHere, `f` is the generated function that operates similarly to `add_binary_numbers`. By comparing the output of the generated function with the expected output for each test example, *AskIt* ensures the generated function behaves as expected. If any discrepancy arises, *AskIt* re-attempts the translation. After multiple unsuccessful translation attempts, *AskIt* raises an exception.",
                "type": "Text_excerpt",
                "original_header": "Testing the Generated Function",
                "parent_header": [
                    "*AskIt* (pyaskit)",
                    "Programming by Example (PBE)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "The prompt template is a string composed of placeholders for the parameters of the function being defined. Placeholders are denoted by double curly braces `{{` and `}}` and can only contain a variable name. This variable name is then used as a parameter in the defined function.\n\nFunction parameters can be defined in two ways: either by keyword arguments or by positional arguments. For keyword arguments, the variable name within the placeholder serves as the keyword argument's name. For positional arguments, the sequence in which placeholders appear defines the order of the positional arguments.\n\nConsider the following example which demonstrates how to define a function, `add`, that accepts two arguments `x` and `y` and returns their sum:\n```python\nfrom pyaskit import define\nimport pyaskit.types as t\n\nadd = define(t.int, '{{x}} + {{y}}')\nprint(add(x=1, y=2))  # keyword arguments\nprint(add(1, 2))  # positional arguments\n```\nIn this case, the `add` function can be invoked using either keyword or positional arguments, with the sum of `x` and `y` returned as the output.\n\nNotably, if the same variable name is used multiple times in the prompt template, subsequent uses are mapped to the initial occurrence. Observe this behavior in the following example:\n```python\nfrom pyaskit import define\nimport pyaskit.types as t\n\nadd = define(t.int, '{{x}} + {{y}} + {{x}} + {{z}}')\nprint(add(x=1, y=2, z=3))\nprint(add(1, 2, 3))\n```\nHere, `{{x}}` appears twice in the prompt template. The second occurrence of `{{x}}` maps back to the first. Hence, even though `{{z}}` is the fourth placeholder in the template, it aligns with the third argument of the function.\n",
                "type": "Text_excerpt",
                "original_header": "Prompt Template Usage",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you use our software in your research, please cite our paper:\n\n```bibtex\n@misc{okuda2023askit,\n      title={AskIt: Unified Programming Interface for Programming with Large Language Models}, \n      author={Katsumi Okuda and Saman Amarasinghe},\n      year={2023},\n      eprint={2308.15645},\n      archivePrefix={arXiv},\n      primaryClass={cs.PL}\n}\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "*AskIt* (pyaskit)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        },
        {
            "result": {
                "value": "@misc{okuda2023askit,\n    primaryclass = {cs.PL},\n    archiveprefix = {arXiv},\n    eprint = {2308.15645},\n    year = {2023},\n    author = {Katsumi Okuda and Saman Amarasinghe},\n    title = {AskIt: Unified Programming Interface for Programming with Large Language Models},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "AskIt: Unified Programming Interface for Programming with Large Language Models",
                "author": "Katsumi Okuda and Saman Amarasinghe"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "AskIt (pyaskit)"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2308.15645"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/katsumiok/pyaskit/main/README.md"
        }
    ]
}