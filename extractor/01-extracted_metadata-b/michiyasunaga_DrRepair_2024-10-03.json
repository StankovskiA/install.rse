{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:59:10"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/michiyasunaga/DrRepair",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "michiyasunaga",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-06-26T22:40:02Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-08-19T04:52:57Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2020 Michihiro Yasunaga\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "[ICML 2020] DrRepair: Learning to Repair Programs from Error Messages",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "DrRepair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "michiyasunaga/DrRepair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/michiyasunaga/DrRepair/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/michiyasunaga/DrRepair/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 191,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "code-generation, deep-learning, graph-neural-networks, pre-training, program-repair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 33,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/michiyasunaga/DrRepair/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 516976
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 15468
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/download_raw_data.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/download_preprocessed_data.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/model/run_deepfix.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/model/run_spoc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/evaluation/deepfix/run_test_deepfix.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/evaluation/spoc/run_test_spoc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/data/3.run-gen-err-dataset--auto-corrupt--deepfix.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/data/2.run-gen-err-dataset--auto-corrupt--spoc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/data/1.run-gen-err-dataset--orig-spoc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "This repo provides the source code & data of our paper: [Graph-based, Self-Supervised Program Repair from Diagnostic Feedback](https://arxiv.org/abs/2005.10636) (ICML 2020).\n\n```\n@InProceedings{Yasunaga20DrRepair,\n  author =  {Michihiro Yasunaga and Percy Liang},\n  title =   {Graph-based, Self-Supervised Program Repair from Diagnostic Feedback},\n  year =    {2020},  \n  booktitle =   {International Conference on Machine Learning (ICML)},  \n}\n```\n<p align=\"center\">\n  <img src=\"./DrRepair-overview.png\" width=\"600\" title=\"Learning to Repair Programs from Error Messages\" alt=\"\">\n</p>\n",
                "type": "Text_excerpt",
                "original_header": "DrRepair: Learning to Repair Programs from Error Messages"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        },
        {
            "result": {
                "value": "Download all the raw data -- DeepFix, SPoC, codeforce (for pretraining) -- by\n```\n./download_raw_data.sh\n```\n\nYou can preprocess the raw data to get the **program repair** data by running the commands in\n```\ndata/1.run-gen-err-dataset--orig-spoc.sh\ndata/2.run-gen-err-dataset--auto-corrupt--spoc.sh\ndata/3.run-gen-err-dataset--auto-corrupt--deepfix.sh\n```\nHowever, this takes a significant time, so for your convenience, you can download all the preprocessed data by\n```\n./download_preprocessed_data.sh\n```\n\n\nThe repo structure looks like the following:\n```plain\n.\n\u2514\u2500 raw_data/\n   \u251c\u2500\u2500 codeforce_data/                  (raw programs from codeforce)\n   \u251c\u2500\u2500 deepfix_data/                    (raw programs from deepfix)\n   \u2514\u2500\u2500 spoc_data/\n       \u251c\u2500\u2500 spoc                              (SPoC data release)\n       \u2514\u2500\u2500 translation_preds                 (line-level code predictions from Kulal+19)\n\n\u2514\u2500 data/                             \n   \u251c\u2500\u2500 *.sh, *.py                       (preprocessing scripts)\n   \u251c\u2500\u2500 err-data-compiler--orig-spoc/    (preprocessed, program repair data for spoc)\n   \u251c\u2500\u2500 err-dev-compiler--for-SPoC/      (\u2514\u2500 dev data for spoc)\n   \u251c\u2500\u2500 err-vocab-compiler--for-SPoC/    (\u2514\u2500 vocab for spoc)\n   ...\n   ... [similarly for deepfix and pre-training]\n\n\u2514\u2500 utils/                      (utilities for code processing)\n\n\u2514\u2500 model/                      (DrRepair model)\n\n\u2514\u2500 evaluation/                 (to evaluate Repair model on deepfix/spoc test)\n   \u251c\u2500\u2500 deepfix\n   \u2514\u2500\u2500 spoc\n       \u251c\u2500\u2500 translation_preds_test/           (line-level code predictions from Kulal+19 for TestP/TestW)\n       ...\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Data",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        },
        {
            "result": {
                "value": "Let's train program repair models.\nFirst, go to `model` directory.\nThen, run commands listed in `run_deepfix.sh` or `run_spoc.sh`.\nFor example, if we train DrRepair (\"base + graph\" in the paper) on the DeepFix data, run:\n```\nname=\"code-compiler--2l-graph\"\nmkdir -p out_deepfix/${name}\npython3 -u main_deepfix.py -o ${name} train \\\n    configs/base.yml  configs/data-deepfix/err-data-orig.yml \\\n    configs/model-code-compiler/2l-graph--dec-attn-all.yml\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Train models",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        },
        {
            "result": {
                "value": "We run the trained program repair model as a server.\nWe then call this model on application tasks (DeepFix and SPoC) to evaluate the usefulness of the model.\n",
                "type": "Text_excerpt",
                "original_header": "Evaluate models",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "* GCC: Follow the SPoC requirement (https://github.com/Sumith1896/spoc)\n* Python 3.6.8 (e.g. `conda create -n DrRepair python=3.6.8`)\n* Python libraries\n  - torch==1.0.1, numpy, tqdm, regex, joblib, pyyaml, bottle, cheroot, tensorboardX\n  - clang==8.0.1 (do the following)\n      ```\n      conda config --add channels conda-forge\n      conda install python-clang==8.0.1\n      ```\n",
                "type": "Text_excerpt",
                "original_header": "Dependencies",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "First, go to `model` directory.\nWe run a trained model (e.g. code-compiler--2l-graph) as a server by\n```\nname=\"SERVER--code-compiler--2l-graph\"\nmkdir out_deepfix/${name}\npython3 -u main_deepfix.py -o ${name} server -p <port> \\\n    -l out_deepfix/code-compiler--2l-graph/<checkpoint> \\\n    configs/base.yml  configs/data-deepfix/err-data-orig.yml \\\n    configs/model-code-compiler/2l-graph--dec-attn-all.yml\n```\nFor `<port>`, pick a port number (e.g. 8080) for the server.\nFor `<checkpoint>`, pick a checkpoint (e.g. 150000) of the trained model.\nThen run ```ifconfig``` to get the IP address (e.g. 172.24.67.161) of the machine hosting this model.\nConcrete examples are provided in the second half of `model/run_deepfix.sh`.\n",
                "type": "Text_excerpt",
                "original_header": "1. Start server",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages",
                    "Evaluate models",
                    "SPoC"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Go to `evaluation/deepfix` directory. First prepare:\n```\nrepo_root=\"../../../..\"\nprogram_data_root=${repo_root}\"/raw_data/deepfix_data\"\ntest_split_root=${repo_root}\"/data/err-data-compiler--auto-corrupt--orig-deepfix/bin4\"\n```\nTo run the trained model on the DeepFix test examples, do\n```\nname=\"code-compiler--2l-graph\"\nmkdir -p out/${name}/log\ncd out/${name}\n\nfor entry in ${test_split_root}/*\ndo\n  probid=`basename $entry`\n  python3 -u ../../test_deepfix.py \\\n  --input-code-dir ${program_data_root}/${probid}/erroneous \\\n  --repairer-server  http://<IP>:<port>/pred\ndone\n```\nwhere you plug the IP address and port number into `<IP>` and `<port>`.\nAfter this completes, you can get the test accuracy by\n```\npython3 -u ../../collate_deepfix.py\n```\nConcrete examples are provided in `evaluation/run_test_deepfix.sh`.\n\n\n",
                "type": "Text_excerpt",
                "original_header": "2. Run model on DeepFix test",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages",
                    "Evaluate models",
                    "DeepFix"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        },
        {
            "result": {
                "value": "Go to `evaluation/spoc` directory. First prepare:\n```\nrepo_root=\"../../../..\"\n```\nTo run the trained model on all the programs in SPoC TestW, do\n```\nname=\"code-compiler--2l-graph--finetune\"\n\nINPUT=translation_preds_test/testw    #change to testp if you want to evaluate on testp\nN=$(tail -n+2 ${INPUT}.tsv | cut -f 3-6 | uniq | wc -l)  # Count the number of programs\ninterval=10\n\nmkdir -p out_testw/${name}/log        #change to testp if you want to evaluate on testp\ncd out_testw/${name}                  #change to testp if you want to evaluate on testp\n\ni=1\nwhile [[ $i -le $N ]]; do\n  python -u ../../test_spoc.py -p 100 \\\n  --compile-budget 100 --n-parallel ${interval} \\\n  --repairer-server  http://<IP>:<port>/pred \\\n  ../../${INPUT} $i\n  i=$(($i + ${interval}))\ndone\n```\nwhere you plug the IP address and port number into `<IP>` and `<port>`.\nAfter this completes, you can get the test accuracy by\n```\npython3 -u ../../collate_spoc.py\n```\nConcrete examples are provided in `evaluation/run_test_spoc.sh`.\n\n\n\n\n",
                "type": "Text_excerpt",
                "original_header": "2. Run model on SPoC test",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages",
                    "Evaluate models",
                    "SPoC"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "The original DeepFix and SPoC data used in this work come from the following papers:\n```\nDeepFix: Fixing common C language errors by deep learning. Rahul Gupta, Soham Pal, Aditya Kanade, Shirish Shevade. AAAI 2017.\nSPoC: Search-based Pseudocode to Code. Sumith Kulal, Panupong Pasupat, Kartik Chandra, Mina Lee, Oded Padon, Alex Aiken and Percy Liang. NeurIPS 2019.\n```\n",
                "type": "Text_excerpt",
                "original_header": "Acknowledgment",
                "parent_header": [
                    "DrRepair: Learning to Repair Programs from Error Messages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{Yasunaga20DrRepair,\n    booktitle = {International Conference on Machine Learning (ICML)},\n    year = {2020},\n    title = {Graph-based, Self-Supervised Program Repair from Diagnostic Feedback},\n    author = {Michihiro Yasunaga and Percy Liang},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Graph-based, Self-Supervised Program Repair from Diagnostic Feedback",
                "author": "Michihiro Yasunaga and Percy Liang"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "DrRepair: Learning to Repair Programs from Error Messages"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "logo": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/./DrRepair-overview.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2005.10636"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/michiyasunaga/DrRepair/master/README.md"
        }
    ]
}