{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:57:53"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/yichao-yuan-99/Everest",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "yichao-yuan-99",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-09-18T15:35:03Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-03-04T03:18:16Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "Everest",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "yichao-yuan-99/Everest",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/yichao-yuan-99/Everest/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/yichao-yuan-99/Everest/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 3,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 0,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/yichao-yuan-99/Everest/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Cuda",
                "name": "Cuda",
                "type": "Programming_language",
                "size": 120431
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 70420
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 39394
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CMake",
                "name": "CMake",
                "type": "Programming_language",
                "size": 3535
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1238
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 104
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/system/process-batch-query.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/system/run-legacy.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/system/process-single-query.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/system/scripts/prof.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "Everest requires the following software and libraries be installed in the system:\n- C++17 compatible compiler (go to Troubleshooting Section for Compilation Problem)\n- CUDA (11.4 is tested, but a lower version may also be acceptable)\n- Boost (1.71 is tested, but a lower version may also be acceptable)\n- Python (>= 3.8.1, go to Troubleshooting Section for Python Problems)\n- pyyaml (Python package. Used to parse YAML files)\n- CMake (>= 3.18)\n\nBesides, the following libraries are also used. They are downloaded and linked to Everest at compile time.\n- range-v3\n- fmt\n- pybind11\n\nTo get profiling results, it also requires `nsight compute` installed.\n",
                "type": "Text_excerpt",
                "original_header": "Dependencies"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "Use `enivronment.yml` if you are facing difficult to make a compatible environemnt\n\nInstall the above using conda env create -f environment.yml\n\n\u200b\nPost installation:\n\n```\nconda env config vars set CPATH=\"${CONDA_PREFIX}/include:${CPATH}\"\nconda env config vars set LD_LIBRARY_PATH=\"$CONDA_PREFIX/lib64:$LD_LIBRARY_PATH\"\u200b\n```\n\nThen reactivate the environment\n",
                "type": "Text_excerpt",
                "original_header": "We also provide a conda environment file",
                "parent_header": [
                    "Dependencies"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Please follow the README in `inputs` directory \n",
                "type": "Text_excerpt",
                "original_header": "Prepare Inputs"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "In `CMakeLists.txt:29`, change `set(CMAKE_CUDA_FLAGS_RELEASE \"-O3 -lineinfo -arch=sm_86\")` to\n`set(CMAKE_CUDA_FLAGS_RELEASE \"-O3 -lineinfo -arch=sm_86 -ccbin <your c++17 compiler>\")`\n\nIn `system/tmin/utils.py:24`, change `command = f'nvcc -O3 --std=c++17 -arch=sm_86 -I../include -Xcompiler -fPIC -shared -o {out} {file}'` to ` ommand = f'nvcc -O3 --std=c++17 -arch=sm_86  -ccbin <your c++17 compiler> -I../include -Xcompiler -fPIC -shared -o {out} {file}'`\n",
                "type": "Text_excerpt",
                "original_header": "Fix",
                "parent_header": [
                    "Troubleshooting",
                    "During Compilation of `.cu` file, it shows `fatal error: filesystem: No such file or directory`"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Then use the following commands to build the system\n```\nmkdir build && cd build\ncmake ..\nmake -j\n``` \nLook up the number here: https://developer.nvidia.com/cuda-gpus#compute\n \n",
                "original_header": "Build"
            },
            "confidence": 0.9831837080684243,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The structure of the repository is shown below:\n```\n\u251c\u2500\u2500 CMakeLists.txt\n\u251c\u2500\u2500 include         # header files\n\u251c\u2500\u2500 inputs          # where the systems looks for inputs\n\u2502   \u251c\u2500\u2500 graphs\n\u2502   \u251c\u2500\u2500 motifs\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 plugins         # legacy code, including the baseline GPU implementation\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src             # C++/CUDA source code\n\u2502   \u251c\u2500\u2500 CMakeLists.txt\n\u2502   \u251c\u2500\u2500 core        # core library\n\u2502   \u251c\u2500\u2500 mods        # pybind files\n\u2502   \u2514\u2500\u2500 tools       # some helper tools\n\u2514\u2500\u2500 system          # the overall system. cd to this directory to run everything\n    \u251c\u2500\u2500 batch-query.py\n    \u251c\u2500\u2500 filter.py\n    \u251c\u2500\u2500 generateQueries.py\n    \u251c\u2500\u2500 legacy.py\n    \u251c\u2500\u2500 process-batch-query.sh\n    \u251c\u2500\u2500 process-single-query.sh\n    \u251c\u2500\u2500 run-legacy.sh          # all the python files and bash scripts above\n    \u251c\u2500\u2500 single-query.py        # provide simple user interfaces\n    \u251c\u2500\u2500 queries                # lots of example queries\n    \u251c\u2500\u2500 scripts                # some helper scripts \n    \u251c\u2500\u2500 templates              # the template files used by the code generator\n    \u251c\u2500\u2500 tmine                  # the Python source code \n    \u2514\u2500\u2500 tools                  # some helper tools\n```\n \n",
                "original_header": "Repository Structure"
            },
            "confidence": 0.9999999996932729,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The following is a simple query example (`system/queries/examples/simpleQuery.yaml`)\n```\npattern: M3.txt\ngraph: wiki-talk-temporal.txt\nconstraints:\n  delta: 86400\noptions: \n  gpu: 1\n```\nThe query is in YAML format.\nThis query describes a task that mines motif `M3` from `wiki-talk-temporal`, with a time window of `86400`.\nThis query will use one GPU in the system.\nBy default, this query counts the number of matches.\n`M3` and `wiki-talk-temporal` should be prepared in `inputs` directory during the previous step.\n\nTo process this query, do the following\n```\ncd system\n./process-single-query.sh queries/examples/simpleQuery.yaml\n```\nThe system will start to process this query, after a while (this includes the overhead of compiling generated code, loading graphs etc.), something like the following will be printed\n```\n# <Number of Matches>, <pure processing time in micro sec>, <~ time in second>\n904054, 22608, 0.022635252913460135 \n```\n",
                "type": "Text_excerpt",
                "original_header": "A Baisc Query Example",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "When multiple queries use the same graph and same number of GPUs, these queries can be processed together to amortize the overhead of loading graphs.\nA set of quries that meet this property can be found in `system/queries/basics/all/sx-stackoverflow/`.\nThese queries mine motif `M1-13` in `sx-stackoverflow` with a 1 day time window, using 1 GPU.\n\nTo process them in a batch, do the following\n```\ncd system\n./process-batch-query.sh sx-stackoverflow 1 system/queries/basics/all/sx-stackoverflow/\n```\nIts output will be something like the following\n```\n# process M1.yaml\n229122198, 100571, 0.1006035809405148\n# process M10.yaml\n...\n```\n",
                "type": "Text_excerpt",
                "original_header": "Process a Batch of Queries",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "If `enumerate:<max enumeration>` is specified in the `options` section of the query, the matched motifs will be enumerated.\nThe examples can be found in `system/queries/enumerate` directory.\nThe following query\n```\npattern: M10.txt\ngraph: wiki-talk-temporal.txt\nconstraints:\n  delta: 86400\noptions: \n  gpu: 4\n  enumerate: 1000000\n```\nEnumerates all the `M10` motifs in `wiki-talk`.\nThe output will be a list of motifs, each is represented by a row of edge index.\n```\n3561659 2352506 6090185 4049667 2352516 # edge id of edge 1, edge id of edge 2...\n524745 3754925 368558 3721982 3754931\n524747 3754925 368558 3721982 3754931\n524747 3754925 368558 3721982 3754933\n...\n```\nThe index here is the 0-indexed position of the edge in the `.txt` edge list.\n",
                "type": "Text_excerpt",
                "original_header": "Enumerate",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "The requirements for vertices' and edges' labels can be specified via a set of constraints sections.\nThe snippet below specifies the first motif node's label should be greater than 5e8.\nSimilar requirements are specified for the second, third, and the last nodes.\n```\n...\nconstraints:\n  node0: f > 500000000\n  node1: f < 500000000\n  node2: f > 500000000\n  node3: f < 500000000\n...\n```\nAn example query is `system/queries/additional-features/ETH-M4-v.yaml`\n",
                "type": "Text_excerpt",
                "original_header": "Vertex and Edge Labeling",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "Fined grained temporal constraints can be specified as below in `constraints` section:\n```\n...\nconstraints:\n  temporal: [900, 1800, 900]\n  delta: 3600\n...\n```\nThis requires the second edge happens within 900 seconds after the first edge happens.\nAn example query is `system/queries/additional-features/ETH-M4-t.yaml`\n",
                "type": "Text_excerpt",
                "original_header": "Fine-Grained Temporal Constraints",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "Anti edges are specified within `constraints` section and an edge in the motif pattern\n```\npattern: M4-A.txt\nconstraints:\n  antiEdge: [False, False, True, False, False]\n...\n```\nThis specifies `M4` pattern with an anti-edge attached to the second edge.\nThe anti-edge attached to a regular edge should be declared immediatly following that regular edge.\nThe anti-edge here is thus placed in temporal order 3.\n\nBelow shows how to specify fine-grained temporal constraints together with anti-edges\n```\n...\nconstraints:\n  antiEdge: [False, False, True, False, False]\n  temporal: [900, 1800, 1800, 900]\n  delta: 3600\n...\n```\nThe anti-edge's fine-grained temporal constrain is specified in the second element of array `temporal`.\n\nAn example query is `system/queries/additional-features/ETH-M4-all.yaml`\n",
                "type": "Text_excerpt",
                "original_header": "Anti-edge",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "Mechanisms that perform load balancing can be turned off.\nThe following turns off intra-warp work stealing.\n```\n...\noptions:\n  tailExpansion: true\n  warpBalancing: false\n  warpCentric: true\n...\n```\n\nThe following turns off tail warp work redistribution\n```\n...\noptions:\n  tailExpansion: false\n  warpBalancing: true\n  warpCentric: true\n...\n```\n\nOr, turn off all of these. This version only includes candidate edges caching and motif-specific code generation.\n```\n...\noptions:\n  tailExpansion: false\n  warpBalancing: false\n  warpCentric: false\n...\n```\n\nExamples can be found in `system/queries/basics`\n\nThe multi-GPU support is valid to use only when all optimizations are enabled, i.e. in the default settings.\n",
                "type": "Text_excerpt",
                "original_header": "Turn on/off load balancing features",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "This is because the name `gcc` is pointing to a version of gcc that does not support C++17.\n`nvcc` uses `gcc` as host compiler, so `nvcc` will produce error to compile C++17 code.",
                "type": "Text_excerpt",
                "original_header": "During Compilation of `.cu` file, it shows `fatal error: filesystem: No such file or directory`",
                "parent_header": [
                    "Troubleshooting"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "To use multiple GPUs, set `gpu` section in `options` to the number of available gpus.\nFor example, the query below will use 4 GPUs.\n```\n...\noptions:\n  gpu: 4\n...\n```\nAn example query is `system/queries/multiGPU/ETH-M7-4.yaml`\n",
                "type": "Text_excerpt",
                "original_header": "Multi-GPU Support",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "The baseline code is not compatible with the query interface as it can only do delta-window motif mining.\nThe baseline can be run with the following commands:\n```\ncd system\n./run-legacy.sh <pathToGraph> <pathToMotif> <delta> <Type>\n```\nType can be either (a) Baseline, (b) U0, which only includes caching candidate edges, or (c) U1B, which includes candidate edges caching and motif-specific code (data structure).\n\nFor example:\n```\ncd system\n./run-legacy.sh ../inputs/graphs/sx-stackoverflow.txt ../inputs/motifs/M1.txt 86400 Baseline\n```\n",
                "type": "Text_excerpt",
                "original_header": "Run Baseline",
                "parent_header": [
                    "Usages"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "This is because the name `gcc` is pointing to a version of gcc that does not support C++17.\n`nvcc` uses `gcc` as host compiler, so `nvcc` will produce error to compile C++17 code.",
                "type": "Text_excerpt",
                "original_header": "During Compilation of `.cu` file, it shows `fatal error: filesystem: No such file or directory`",
                "parent_header": [
                    "Troubleshooting"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        },
        {
            "result": {
                "value": "This is likely due to inconsistent versions of python for compilation and execution.\nMake sure that the python libraries used during compilation (i.e. searched in `LD_LIBRARY_PATH`) is compatible with the one you are using to start the system.\n\nIf you cannot fix your environment, you can compile python from source.\nAssume that `$HOME/opt/python-3.8.1` is a safe directory to install python, then you can compile python3.8.1 using the following commands\n```\nwget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tar.xz\ntar -xvf Python-3.8.1.tar.xz \ncd Python-3.8.1\n./configure --prefix=$HOME/opt/python-3.8.1\nmake -j\nmake install\n```\n\nThen, add this Python to your `.bashrc`\n```\nexport $HOME/opt/python-3.8.1/bin:/usr/local/cuda-11.2/bin/:$PATH\nexport LD_LIBRARY_PATH=$HOME/opt/python-3.8.1/lib/\n```\n\nThen, delete all the things you have built so far and restart the building process again.\n",
                "type": "Text_excerpt",
                "original_header": "Errors when loading compiled `corelib` into python",
                "parent_header": [
                    "Troubleshooting"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Semantic web"
            },
            "confidence": 0.9782432178766814,
            "technique": "supervised_classification"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The queries in `queries/additional-features` demonstrates the effect of additional features.\nIt can be used to generate results in Table 4.\n \n",
                "original_header": "additional constraints"
            },
            "confidence": 0.9521533078321579,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "@inproceedings{yuan2023everest,\n    year = {2024},\n    publisher = {ACM},\n    pages = {},\n    booktitle = {{50th International Conference on Very Large Databases (VLDB 2024)}},\n    title = {{Everest: GPU-Accelerated System For Mining Temporal Motifs}},\n    author = {Yichao Yuan and\nHaojie Ye and\nSanketh Vedula and\nWynn Kaza and\nNishil Talati \n},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "{Everest: GPU-Accelerated System For Mining Temporal Motifs}",
                "author": "Yichao Yuan and\nHaojie Ye and\nSanketh Vedula and\nWynn Kaza and\nNishil Talati \n"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Overview"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/yichao-yuan-99/Everest/main/README.md"
        }
    ]
}