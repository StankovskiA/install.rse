{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:09:28"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/CISPA-SysSec/mua_fuzzer_bench",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "CISPA-SysSec",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-06-15T11:50:31Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-08-06T08:58:51Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "`mua-fuzzer-benchmark` is distributed under the terms of the [MIT](https://spdx.org/licenses/MIT.html) license.\n",
                "type": "Text_excerpt",
                "original_header": "License"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "mua_fuzzer_bench",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "CISPA-SysSec/mua_fuzzer_bench",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/CISPA-SysSec/mua_fuzzer_bench/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/CISPA-SysSec/mua_fuzzer_bench/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 7,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 3,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/CISPA-SysSec/mua_fuzzer_bench/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 338666
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 167291
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 18475
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 11078
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "R",
                "name": "R",
                "type": "Programming_language",
                "size": 9352
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 3406
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 2664
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/set_proc_sys_parameters.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/eval_scripts/run_bin.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/curl/curl_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/re2/re2_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/cares/c-ares_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/dev/dev_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/woff2/woff2_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/libevent/libevent_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/guetzli/guetzli_harness/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/run_bin.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/aflpp/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/aflpp/minimize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/libfuzzer/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/libfuzzer/minimize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/afl/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/afl/minimize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/system/common.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/system/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/honggfuzz/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/honggfuzz/minimize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/curl/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/curl/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/re2/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/re2/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/cares/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/cares/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/dev/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/dev/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/woff2/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/woff2/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/libevent/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/libevent/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/guetzli/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/programs/guetzli/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/aflpp/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/aflpp/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/libfuzzer/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/libfuzzer/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/afl/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/afl/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/system/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/system/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/honggfuzz/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/dockerfiles/fuzzers/honggfuzz/Dockerfile"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "It is recommended to use a current Linux distribution, which are supported by\nthe two main requirements docker and hatch.\n\nHardware requirements depend on the the number of CPU cores that are available\nand should be used. The RAM requirements mostly depends on the subject, as a\nrule of thumb, we would recommend around 1GB per instance.\n\nThe hard drive space requires also depends on the subjects and fuzzers.\nMost space will be used for the docker images, seed corpus, and resulting\ndatabases. We recommend around 100GB available space for evaluations\nwith multiple subjects and fuzzers.\n\n",
                "type": "Text_excerpt",
                "original_header": "Requirements"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "To run this framework two dependencies are required.\n\nFirst, the required Python packages are managed using\n[hatch](https://hatch.pypa.io/latest/install/). See\n[Preparing the Environment](#preparing-the-environment) on how to use it.\nThe configuration can be found in [pyproject.toml](pyproject.toml), but we\n**discourage** manual setups.\n\nThe other requirement is [docker](https://docs.docker.com/engine/install/)\nand that the user is a member of the `docker` group.\n",
                "type": "Text_excerpt",
                "original_header": "Installation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "Fuzzing requires some specific configurations, the recommended configuration\ncan be found in the `set_proc_sys_parameters.sh` file. Please check the\nfile to see if those changes are acceptable and modify if not.\n\nAdditionally, the framework requires a few python packages. The python\nenvironment is managed through [hatch](https://hatch.pypa.io/latest/).\nAll that needs to be installed is hatch, then `hatch shell` will set up the\npackages. We **strongly recommend** this over a manual setup.\n\n```bash\nsource ./set_proc_sys_parameters.sh  # source the script to allow ulimit to work\nhatch shell  # enter the python environment\n```\n\nExecuting the second command opens a shell in the virtual environment that has\nall dependencies installed. Afterwards, the following commands can be run in\nthis shell session.\n\n",
                "type": "Text_excerpt",
                "original_header": "Preparing the Environment",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "Changing mutations requires additional setup shown below.\n",
                "type": "Text_excerpt",
                "original_header": "Install",
                "parent_header": [
                    "Extending the Tool"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "```shell script\n# use the python script mutator-docker-wrapper.py\n\n# first build the docker containers\npython3 mutator-docker-wrapper.py -b\n\n# then connect to the container\npython3 mutator-docker-wrapper.py -a\n\n# [optional] consult the script's help output for rebuilding and similar\n# (will be faster than the initial build)\npython3 mutator-docker-wrapper.py -h\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Docker Install",
                "parent_header": [
                    "Extending the Tool",
                    "Install"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "```shell script\n# run from root directory\n\n# llvm installation on Mac:\nbrew install llvm@11\n\n# llvm installation on linux:\necho deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main >> /etc/apt/sources.list && \\\n    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -\n\napt-get update && apt-get upgrade -y\n\napt-get install -y gcc-10 g++-10 gcc-10-plugin-dev gcc-10-multilib \\\n    libc++-10-dev gdb lcov\n\napt-get install -y clang-11 clang-tools-11 libc++1-11 libc++-11-dev \\\n    libc++abi1-11 libc++abi-11-dev libclang1-11 libclang-11-dev \\\n    libclang-common-11-dev libclang-cpp11 libclang-cpp11-dev liblld-11 \\\n    liblld-11-dev liblldb-11 liblldb-11-dev libllvm11 libomp-11-dev \\\n    libomp5-11 lld-11 lldb-11 llvm-11 llvm-11-dev llvm-11-runtime llvm-11-tools\n\nupdate-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 0\nupdate-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 0\n\nrm -rf /var/cache/apt/archives/*\n\nln /bin/clang-11 /bin/clang\nln /bin/clang++-11 /bin/clang++\nln /bin/opt-11 /bin/opt\nln /bin/llvm-config-11 /bin/llvm-config\nln /bin/llvm-ar-11 /bin/llvm-ar\n\n\n\n# compiles the project and installs it under build/install\nexport LD_LIBRARY_PATH=${mutation_tool_home}/build/install/LLVM_Mutation_Tool/lib/\ngradle build\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Local Install (only recommended for local development!)",
                "parent_header": [
                    "Extending the Tool",
                    "Install"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- **Dockerfile**: The docker build command is run from the project root dir.\n    This Dockerfile is used to compile the fuzzer and copy the following two\n    files into the created image. The image will be used to create the\n    containers used for fuzzing.\n- **eval.sh**: Run inside the docker container for coverage fuzzing and\n    evaluating on mutants. This script builds the instrumented binary and\n    executes the fuzzing run. Arguments are path to the bitcode file in the\n    docker container, compile arguments, and path to the seed corpus directory.\n    Additionally, environment variables are passed: `DICT_PATH` contains the\n    path to the dictionary for the program if available. Also `MUT_WITH_ASAN`\n    or `MUT_WITH_MSAN` have the value `\"1\"` if ASan or MSan should be used.\n- **minimize.sh**: Similar to `eval.sh` this script is run inside the docker\n    container to use the fuzzers minimization algorithm. Arguments are: the path\n    to the bitcode file, compile arguments, path to the directory containing the\n    inputs that should be minimized, and the path to the output directory.\n- **config.json**: Additional information about the fuzzer used to decide which\n    queue inputs and crash inputs the fuzzer generates and should be used during evaluation.\n \n",
                "original_header": "Adding New Fuzzers"
            },
            "confidence": 0.9999880816163498,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```shell script\n# run in root directory to delete all build products\n# can also be used if the build does not correctly update or another strange behavior is observed\n\ngradle clean\n```\n```shell script\n# run in root directory to delete all generated mutation files in samples\n\nsh clean_mutations_in_samples.sh\n```\n \n",
                "original_header": "Clean"
            },
            "confidence": 0.9999992265812103,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The entry point for all commands is `src/mua_fuzzer_benchmark/eval.py` and the\nworking directory is expected to be the project root directory. All commands\nand arguments to them are documented, for help use:\n`src/mua_fuzzer_benchmark/eval.py -h`\n\nAfter [preparing the environment](#preparing-the-environment) the usual steps\nfor an evaluation are first to do [coverage fuzzing](#coverage-fuzzing) (Stage 1)\nand then [evaluating on supermutants](#supermutant-evaluation) (Stage 2).\n",
                "type": "Text_excerpt",
                "original_header": "Usage"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "The first step for the comparison is to create a seed corpus covering as much\nof the program under test as the fuzzer can achieve. Once this seed corpus\nhas been established, it is reasonable to require shorter runs to evaluate\non the mutants.\n\nTo start a coverage fuzzing run the `coverage_fuzzing` command can be used.\nSee below for an example. See `src/mua_fuzzer_benchmark/eval.py coverage_fuzzing -h`\nfor help. For a description on environment variables see the file:\n`src/mua_fuzzer_benchmark/constants.py`.\n\nNote that an initial set of seeds are required, they are expected to be placed\nthe in a folder identical to the prog variant name, so for the following\ncommand the seed files would be placed under:\n`tmp/seeds/seeds_minimal/woff2_new`.\n\nAlso, note that the `fuzz-time` is in minutes. Of the instances, the median run\nbased on covered mutations will be moved into a separate directory.\n\n```bash\nsrc/mua_fuzzer_benchmark/eval.py coverage_fuzzing \\\n    --fuzzers libfuzzer aflpp honggfuzz \\\n    --progs woff2_new \\\n    --fuzz-time $((60 * 48)) \\\n    --seed-dir tmp/seeds/minimal \\\n    --result-dir tmp/coverage \\\n    --instances 13\n```\n",
                "type": "Text_excerpt",
                "original_header": "Coverage Fuzzing (Stage 1)",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "The second step for the comparison is evaluating how many mutants are killed\nby a fuzzer. This can be done using the `eval` command,\nsee `src/mua_fuzzer_benchmark/eval.py coverage_fuzzing -h` for help.\n\nIn the remaining part of this section, the commands for the main experiments of\nthe paper are repeated to show some example usages.\n",
                "type": "Text_excerpt",
                "original_header": "Supermutant Evaluation (Stage 2)",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "As said, the `eval` command provides the entry point to evaluate mutations.\nSee below for an example. Note that the `seed-dir` now points to the median\nrun created by the `coverage_fuzzing` command.\n\n```bash\nsrc/mua_fuzzer_benchmark/eval.py eval \\\n    --fuzzers libfuzzer aflpp honggfuzz \\\n    --progs woff2_new \\\n    --fuzz-time $((60 * 1)) \\\n    --seed-dir tmp/coverage/median_runs/ \\\n    --result-path data/basic/stats_all.db\n```\n\nAfter the evaluation, the result database will be copied to `result-path`.\n",
                "type": "Text_excerpt",
                "original_header": "Basic Evaluation",
                "parent_header": [
                    "Usage",
                    "Supermutant Evaluation (Stage 2)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "Based on the results of the initial evaluation, the bitcode files and\nsupermutants can be reused by using the rerun arguments to `eval`.\nIf only a subset of mutations should be retried, this requires a file specifying\nmutations, which can be created using the `generate_rerun_file` command.\nSee below for an example:\n\n```bash\nsrc/mua_fuzzer_benchmark/eval.py generate_rerun_file \\\n    --db data/basic/stats_all.db \\\n    --out-file rerun_file_for_asan.json \\\n    --untried no \\\n    --covered yes \\\n    --skip-timeout yes \\\n    --skip-killed no \\\n    --skip-crashed yes \\\n    --mode keep\n```\n\nThe following command shows how to start a rerun eval, this time building the\nprogram with ASan. (To be clear: `MUT_BUILD_ASAN` can also be used without\n`--rerun`. Also, `--rerun` ensures that the same supermutants that have been\ngenerated for the `--rerun <db>` will be started again.)\n\n```bash\nMUT_BUILD_ASAN=1 src/mua_fuzzer_benchmark/eval.py eval \\\n    --fuzzers libfuzzer aflpp honggfuzz \\\n    --progs woff2_new \\\n    --fuzz-time $((60 * 1)) \\\n    --seed-dir tmp/coverage/median_runs/ \\\n    --rerun data/basic/stats_all.db \\\n    --rerun-mutations rerun_file_for_asan.json \\\n    --result-path data/asan/stats_all.db\n```\n",
                "type": "Text_excerpt",
                "original_header": "ASan",
                "parent_header": [
                    "Usage",
                    "Supermutant Evaluation (Stage 2)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "Just to complete the experiments of the paper, this example shows how to run\nthe mutations still not killed after the ASan experiment again (for 24 hours).\n\n```bash\nsrc/mua_fuzzer_benchmark/eval.py generate_rerun_file \\\n    --db data/asan/stats_all.db \\\n    --out-file rerun_file_24_hours.json \\\n    --untried no \\\n    --covered yes \\\n    --skip-timeout yes \\\n    --skip-killed yes \\\n    --skip-crashed yes \\\n    --mode single\n```\n\n```bash\nMUT_BUILD_ASAN=1 src/mua_fuzzer_benchmark/eval.py eval \\\n    --fuzzers libfuzzer aflpp honggfuzz \\\n    --progs woff2_new \\\n    --fuzz-time $((60 * 24)) \\\n    --seed-dir tmp/coverage/median_runs/ \\\n    --rerun data/asan/stats_all.db \\\n    --rerun-mutations rerun_file_24_hours.json \\\n    --result-path data/24_hours/stats_all.db\n```\n",
                "type": "Text_excerpt",
                "original_header": "24 Hours (with ASan)",
                "parent_header": [
                    "Usage",
                    "Supermutant Evaluation (Stage 2)"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "value": "The plots as shown in the paper can be reproduced using the Makefile.\nThis requires that the databases are prepared for plotting first using:\n`src/mua_fuzzer_benchmark/eval.py prepare_db --db <db>`\n\nThis needs to be done for all three databases previously created:\n\n```bash\nsrc/mua_fuzzer_benchmark/eval.py prepare_db --db data/basic/stats_all.db\nsrc/mua_fuzzer_benchmark/eval.py prepare_db --db data/asan/stats_all.db\nsrc/mua_fuzzer_benchmark/eval.py prepare_db --db data/24_hours/stats_all.db\n```\n\nNote that the Makefile expects all the databases at exactly those locations and\nthe seeds to be under `tmp/coverage` just as the previous commands set up.\nFinally, to generate the plots just run `make` from the project root.\n\nThis part of the usage will likely be changed after artifact evaluation.\n",
                "type": "Text_excerpt",
                "original_header": "Getting the Results",
                "parent_header": [
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "The mutated programs have code injected which prints if the mutation was triggered.\nIt is possible to influence the output by defining environment variables:\n\n```shell\nexport TRIGGERED_OUTPUT=\"Some output.\" # can contain any string which will be printed to the command line \n    and written to the file TRIGGERED_FILE if it is defined and could be created; a default value is printed if\n    this environment variable is not defined\n\nexport TRIGGERED_FOLDER=\"some/file/to/report/mutation/trigger_signal\" # a path to a folder which will for each mutation UID\ncontain a file which indicates that the mutation was triggered. If not defined the files will be written to ./triggered_signal\n```\n\nAlso, if one wants to test which mutations could be covered, a binary is generated when producing the mutants \nwhich will print all covered mutation locations:\nInvoke the binary ```*.opt_mutate``` (e.g. [samples/simple_malloc/malloc.c.opt_mutate](samples/simple_malloc/malloc.c.opt_mutate)) in the respective subject folder, it will print all found locations during\nthe run as explained above.\n",
                "type": "Text_excerpt",
                "original_header": "Running Mutated Programs",
                "parent_header": [
                    "Extending the Tool"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you want to cite this project, we would recommend the following bibtex entry:\n\n```bibtex\n@inproceedings{goerz2023muafuzzerbenchmark,\n  location  = {Anaheim, {CA}, {USA}},\n  title     = {Systematic Assessment of Fuzzers using Mutation Analysis},\n  url       = {https://www.usenix.org/conference/usenixsecurity23/presentation/gorz},\n  booktitle = usenix-security,\n  author    = {Philipp G\u00f6rz and Bj\u00f6rn Mathis and Keno Hassler and Emre G\u00fcler and Thorsten Holz and Andreas Zeller and Rahul Gopinath},\n  date      = {2023-08}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Cite"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This project contains the source code used for the evaluation of the\n[Systematic Assessment of Fuzzers using Mutation Testing](https://www.usenix.org/conference/usenixsecurity23/presentation/gorz)\npaper, see [here](#cite) if you want to cite the paper.\nNote that this framework only supports Linux systems at the moment. \nThe goal of this project is to provide a framework to compare fuzzers using\nmutation analysis. Fuzzers are tools that implement fuzzing / fuzz testing to\nfind bugs in software. Fuzzing can be likened to generating lots of random\ninputs to run on the program under test. \nMutation testing is an approach to judge how well testing methods perform\nin finding bugs. The basic idea is to add (small) modifications to a program\nand check if a modification is detected by the testing method. The modifications\nthat are not killed can be used to judge the performance of the testing method. \nBoth fuzzing and mutation testing are known for their high computation\nrequirements, this framework implements two methods to reduce this requirement.\nOne method is to reduce the number of mutations that need to be evaluated, this\nis done by combining mutations that do not interfere with each other into one\n\"supermutant\". This allows evaluation of all mutations contained in a\nsupermutant in one fuzzing run (Stage 1). The other method is to reduce the time\nneeded that fuzzers require to get results. This is done by splitting fuzzing\ninto two parts, one longer session on the unmutated executable, to give the\nfuzzer as much of a head start as it can get. This allows shorter sessions for\neach supermutant that needs to be evaluated (Stage 2). \n",
                "original_header": "mua-fuzzer-benchmark"
            },
            "confidence": 0.9462300640740345,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "All fuzzers are located in the directory `dockerfiles/fuzzers/`, each fuzzer\nis located in a separate directory, and the directory name is used to identify\nthe fuzzer. It is recommended to look at existing fuzzer configurations and\nfollow their setup when adding a new fuzzer.\nNote that `dockerfiles/fuzzers/system/` is used as the base image.\nFour files need to be provided to use a fuzzer (under `dockerfiles/fuzzers/<fuzzer name>/`): \n",
                "original_header": "Adding New Fuzzers"
            },
            "confidence": 0.930916709639268,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The file [mutation_doc.json](mutation_doc.json) contains documentation about\nthe different mutation types implemented in this project as a machine-readable\nJSON file.\n \n",
                "original_header": "Adding or Modifying Mutations"
            },
            "confidence": 0.9048587878105067,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "mua-fuzzer-benchmark"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/CISPA-SysSec/mua_fuzzer_bench/main/README.md"
        }
    ]
}