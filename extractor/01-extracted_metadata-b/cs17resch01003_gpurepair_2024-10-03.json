{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:58:22"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/cs17resch01003/gpurepair",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "cs17resch01003",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-03-27T19:14:37Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-05-17T10:13:39Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/ms-pl",
                "type": "License",
                "name": "Microsoft Public License",
                "url": "https://api.github.com/licenses/ms-pl",
                "spdx_id": "MS-PL"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "GPURepair: Automated Repair of GPU Kernels",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "<h1>Table of Contents</h1> \n",
                "original_header": "GPURepair Documentation"
            },
            "confidence": 0.9809583777790519,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "gpurepair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "cs17resch01003/gpurepair",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/cs17resch01003/gpurepair/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/cs17resch01003/gpurepair/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 9,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/cs17resch01003/gpurepair/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "C#",
                "name": "C#",
                "type": "Programming_language",
                "size": 283235
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Cuda",
                "name": "Cuda",
                "type": "Programming_language",
                "size": 209692
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 207482
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 92617
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "TeX",
                "name": "TeX",
                "type": "Programming_language",
                "size": 69277
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 38438
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 9088
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Boogie",
                "name": "Boogie",
                "type": "Programming_language",
                "size": 1909
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/cs17resch01003/gpurepair/releases/33655416",
                "tag": "2.0",
                "name": "2.0",
                "author": {
                    "name": "cs17resch01003",
                    "type": "User"
                },
                "description": "The code submitted to VMCAI 2021.",
                "tarball_url": "https://api.github.com/repos/cs17resch01003/gpurepair/tarball/2.0",
                "zipball_url": "https://api.github.com/repos/cs17resch01003/gpurepair/zipball/2.0",
                "html_url": "https://github.com/cs17resch01003/gpurepair/releases/tag/2.0",
                "url": "https://api.github.com/repos/cs17resch01003/gpurepair/releases/33655416",
                "release_id": 33655416,
                "date_created": "2020-10-16T20:37:25Z",
                "date_published": "2020-11-09T15:31:02Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/cs17resch01003/gpurepair/releases/23221924",
                "tag": "1.0",
                "author": {
                    "name": "cs17resch01003",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/cs17resch01003/gpurepair/tarball/1.0",
                "zipball_url": "https://api.github.com/repos/cs17resch01003/gpurepair/zipball/1.0",
                "html_url": "https://github.com/cs17resch01003/gpurepair/releases/tag/1.0",
                "url": "https://api.github.com/repos/cs17resch01003/gpurepair/releases/23221924",
                "release_id": 23221924,
                "date_created": "2020-01-24T11:06:23Z",
                "date_published": "2020-01-29T14:41:39Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_grid_inspect.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_classic.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_grid.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_default.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_inspect.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_maxsat.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_axioms.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/scripts/gpurepair_sat.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "### Building from Source on Ubuntu 18.04 \n1. Install [Python 3](https://www.python.org/) and the [psutil](https://pypi.org/project/psutil/) module\n```bash\nsudo apt-get update\nsudo apt install python3\nsudo apt install python3-pip\n\npip3 install psutil\n```\n2. Install [Mono](https://www.mono-project.com/). Latest instructions can be found at [https://www.mono-project.com/download/stable/#download-lin](https://www.mono-project.com/download/stable/#download-lin)\n```bash\nsudo apt install gnupg ca-certificates\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF\necho \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list\nsudo apt update\n\nsudo apt install mono-devel\n```\n3. Install the [Git](https://git-scm.com/) client to download the source code and install [cmake](https://cmake.org/) for building the tools from source. Latest instructions for installing cmake can be found at [https://apt.kitware.com](https://apt.kitware.com). We need [Nuget](https://www.nuget.org/) as well for restoring packages used in the build of GPUVerify\n```bash\nwget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null\nsudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'\nsudo apt-get update\n\nsudo apt install git\nsudo apt install cmake\nsudo apt install nuget\n```\n4. Download the source code of LLVM and Clang from the [llvm-project 6.x](https://github.com/llvm/llvm-project/tree/release/6.x) repository and compile it\n```bash\nexport BUILD_ROOT=/path/to/build\n\n# download the source code\nexport LLVM_RELEASE=release/6.x\nmkdir -p ${BUILD_ROOT}/llvm_and_clang\ncd ${BUILD_ROOT}/llvm_and_clang\ngit clone https://github.com/llvm/llvm-project.git src/6.x\n\ncd src/6.x\ngit checkout ${LLVM_RELEASE}\ncp -r ${BUILD_ROOT}/llvm_and_clang/src/6.x/clang ${BUILD_ROOT}/llvm_and_clang/src/6.x/llvm/tools/clang\n\n# generate the build files\nmkdir -p ${BUILD_ROOT}/llvm_and_clang/build\ncd ${BUILD_ROOT}/llvm_and_clang/build\ncmake -D CMAKE_BUILD_TYPE=Release -D LLVM_TARGETS_TO_BUILD=NVPTX ../src/6.x/llvm\n\n# start the build (recommended value of N is the number of cores)\nmake -jN\n```\n5. Download the source code of libclc from the [llvm-project 8.x](https://github.com/llvm/llvm-project/tree/release/8.x) repository and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}/llvm_and_clang\ngit clone https://github.com/llvm/llvm-project.git src/8.x\n\ncd src/8.x\ngit checkout release/8.x\n\n# copy the libclc source code into a different folder\nmkdir -p ${BUILD_ROOT}/libclc\ncd ${BUILD_ROOT}/libclc\ncp -r ${BUILD_ROOT}/llvm_and_clang/src/8.x/libclc ${BUILD_ROOT}/libclc/src\n\n# build the source code\ncd ${BUILD_ROOT}/libclc/src\npython3 ./configure.py --with-llvm-config=${BUILD_ROOT}/llvm_and_clang/build/bin/llvm-config \\\n\t--with-cxx-compiler=c++ \\\n\t--prefix=${BUILD_ROOT}/libclc/install \\\n\tnvptx-- nvptx64--\nmake\n\nmake install\n```\n6. Download the source code of the [Z3 SMT Solver](https://github.com/Z3Prover/z3/tree/z3-4.6.0) and compile it\n```bash\n# download the source code\nexport Z3_RELEASE=z3-4.6.0\ncd ${BUILD_ROOT}\ngit clone https://github.com/Z3Prover/z3.git\n\n# generate the build files\ncd ${BUILD_ROOT}/z3\ngit checkout -b ${Z3_RELEASE} ${Z3_RELEASE}\npython3 scripts/mk_make.py\n\n# start the build (recommended value of N is the number of cores)\ncd build\nmake -jN\n\n# install the library and create a symbolic link\nsudo make install\nln -s z3 z3.exe\n```\n7. Download the source code of the [Bugle](https://github.com/mc-imperial/bugle) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/mc-imperial/bugle.git ${BUILD_ROOT}/bugle/src\n\n# generate the build files\nmkdir ${BUILD_ROOT}/bugle/build\ncd ${BUILD_ROOT}/bugle/build\ncmake -D LLVM_CONFIG_EXECUTABLE=${BUILD_ROOT}/llvm_and_clang/build/bin/llvm-config \\\n\t-D CMAKE_BUILD_TYPE=Release \\\n\t-D LIBCLC_DIR=${BUILD_ROOT}/libclc/install \\\n\t../src\n\n# start the build (recommended value of N is the number of cores)\nmake -jN\n```\n8. Download the source code of the [GPUVerify](https://github.com/mc-imperial/gpuverify) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/mc-imperial/gpuverify.git\n\n# compile the code\ncd ${BUILD_ROOT}/gpuverify\nnuget restore GPUVerify.sln\nmsbuild /p:Configuration=Release GPUVerify.sln\n\n# copy the config file and change the \"rootDir\" variable to ${BUILD_ROOT}\ncd ${BUILD_ROOT}/gpuverify\ncp gvfindtools.templates/gvfindtools.dev.py gvfindtools.py\nvim gvfindtools.py\n\n# test the build\ncd ${BUILD_ROOT}/gpuverify\npython3 ./gvtester.py --write-pickle run.pickle testsuite\n```\n9. Download the source code of the [GPURepair](https://github.com/cs17resch01003/gpurepair) and compile it\n```bash\n# download the source code\ncd ${BUILD_ROOT}\ngit clone https://github.com/cs17resch01003/gpurepair.git\n\n# compile the code\ncd ${BUILD_ROOT}/gpurepair/src\nmsbuild /p:Configuration=Release /p:Platform=x86 GPURepair.sln\nmsbuild /p:Configuration=Release /p:Platform=x86 GPURepair.ReportGenerator.sln\n\n# edit the config file and change the \"rootDir\" variable to ${BUILD_ROOT}\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\nvim gvfindtools.py\n\n# test the build\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\npython3 ./grtester.py ../../tests/testsuite\n```\n \nGPURepair follows the same execution syntax as GPUVerify. Below is a CUDA kernel that has a data race. This kernel is located at *${BUILD_ROOT}/gpurepair/tests/testsuite/Bugged/race/kernel.cu*\n```cpp\n#include <cuda.h>\n__global__ void race (int* A)\n{\n    int idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int temp = A[idx + 1];\n    A[idx] = temp;\n}\n```\nTo repair this kernel, run the following command.\n```bash\ncd ${BUILD_ROOT}/gpurepair/src/Toolchain\npython3 ./GPURepair.py ../../tests/testsuite/Bugged/race/kernel.cu --blockDim=32 --gridDim=1\n```\nThis command repairs the kernel and prints the number of changes that are required to correct this kernel. The changes that are needed are written to a summary file at the same location where the kernel is.\n```bash\ncat ../../tests/testsuite/Bugged/race/kernel.summary\n# prints the line number where the barrier needs to be inserted to fix the data race\n```\n \nThe repaired kernel will look like below.\n```cpp\n#include <cuda.h>\n__global__ void race (int* A)\n{\n    int idx = blockDim.x * blockIdx.x + threadIdx.x;\n    int temp = A[idx + 1];\n    __syncthreads();\n    A[idx] = temp;\n}\n```\n \n",
                "original_header": "GPURepair Documentation"
            },
            "confidence": 0.9952636377363966,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": ""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2011.08373\">https://arxiv.org/abs/2011.08373</a>. The documentation at <a href=\"./docs/vmcai2021/Documentation.md\">docs/vmcai2021/Documentation.md</a> provides a detailed guide on how to set up GPURepair (the artifact is available <a href=\"\">here</a>"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2011.08373</a>. The documentation at <a href=\"./docs/vmcai2021/Documentation.md\">docs/vmcai2021/Documentation.md</a> provides a detailed guide on how to set up GPURepair (the artifact is available <a href=\"\">here</a>"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/cs17resch01003/gpurepair/main/Readme.md"
        }
    ]
}