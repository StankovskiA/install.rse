{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:24:25"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/Alireza-Ardalani/SBSRE",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "Alireza-Ardalani",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-02-23T14:02:16Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-02-29T07:22:55Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2018 Nikolaos Tsantalis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "SBSRE is an eclipse plugin for extract method refactoring based on the single responsibility principle (SRP) ",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new **Output-based Slicing** algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods. \n",
                "original_header": "SBSRE"
            },
            "confidence": 0.9279435495295377,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "SBSRE",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "Alireza-Ardalani/SBSRE",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/Alireza-Ardalani/SBSRE/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/Alireza-Ardalani/SBSRE/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 5,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "bad-smell, long-method, method-extraction, output-instructions, plugin, sbsre, single-responsibility-principle",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 3,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/Alireza-Ardalani/SBSRE/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 3698585
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool \n\n* [Download Eclipse Neon](https://www.eclipse.org/downloads/packages/release/neon/3/eclipse-ide-java-ee-developers)\n\n* [Download JDK 8](https://www.oracle.com/java/technologies/downloads/)\n\n",
                "type": "Text_excerpt",
                "original_header": "Step1: Prerequisites",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": " Import the SBSRE tool in the Eclipse IDE\n\n<p align = \"center\"> <img src = \"image/Step2.png\"> </p>\n<p align = \"center\"> Figure 1. Operations of Step 2. </p>\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Step2: Import the SBSRE tool",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "value": "Insert or create a java project, then on Bad Smells tab, choose SRP-Violation\n\n<p align = \"center\"> <img src = \"image/Step4.png\"> </p>\n<p align = \"center\"> Figure 3. Operations of Step 4. </p>\n\n",
                "type": "Text_excerpt",
                "original_header": "Step4: Open SRP-Violation window",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "value": "By clicking on each of the packages, classes, or methods, it will be selected. Then by clicking on the \"i\" icon, results will be shown.\n\n<p align = \"center\"> <img src = \"image/Step5.png\"> </p>\n<p align = \"center\"> Figure 4. Operations of Step 5. </p>\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Step5: Identifying SRP-Violation",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "value": "Results are shown here and by selecting each of them, a code fragment proposed for method extraction will be highlighted.\n\n<p align = \"center\"> <img src = \"image/Step6.png\"> </p>\n<p align = \"center\"> Figure 5. Operations of Step 6. </p>\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Step6:",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Run the SBSRE tool as as a plugin in the Eclipse IDE\n\n<p align = \"center\"> <img src = \"image/Step3.png\"> </p>\n<p align = \"center\"> Figure 2. Operations of Step 3. </p>\n\n\n",
                "type": "Text_excerpt",
                "original_header": "Step3: Run the SBSRE tool",
                "parent_header": [
                    "SBSRE",
                    "Getting started"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "SBSRE"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/SBSRE</h1>\n<p>SBSRE is a <strong>slice-based single responsibility extraction</strong> approach supported by an <strong>eclipse plugin</strong> for identifying Single responsibility violations in the methods.</p>\n<p>The responsibility of a method can be best described by its impacts on the outer scope that are exposed through modifying the return values, outputs, and global variables. In the context of object-oriented programming, a method may modify either the class fields or return a value to its caller method. If the corresponding slices of these fields or return values within the method body are entirely separate, the method presumably exposes different functionalities.</p>\n<p>Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new <strong>Output-based Slicing</strong> algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods.</p>\n<h2>Relevant publications</h2>\n<p>Published version: Supporting single responsibility through automated extract method refactoring (https://link.springer.com/article/10.1007/s10664-023-10427-3)</p>\n<p>Preprint version: Supporting single responsibility through automated extract method refactoring (https://arxiv.org/abs/2305.03428)</p>\n<h2>Getting started</h2>\n<h3>Step1: Prerequisites</h3>\n<p>It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool </p>\n<ul>\n<li>\n<p><a href="
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/SBSRE</h1>\n<p>SBSRE is a <strong>slice-based single responsibility extraction</strong> approach supported by an <strong>eclipse plugin</strong> for identifying Single responsibility violations in the methods.</p>\n<p>The responsibility of a method can be best described by its impacts on the outer scope that are exposed through modifying the return values, outputs, and global variables. In the context of object-oriented programming, a method may modify either the class fields or return a value to its caller method. If the corresponding slices of these fields or return values within the method body are entirely separate, the method presumably exposes different functionalities.</p>\n<p>Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new <strong>Output-based Slicing</strong> algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods.</p>\n<h2>Relevant publications</h2>\n<p>Published version: Supporting single responsibility through automated extract method refactoring (https://link.springer.com/article/10.1007/s10664-023-10427-3)</p>\n<p>Preprint version: Supporting single responsibility through automated extract method refactoring (https://arxiv.org/abs/2305.03428)</p>\n<h2>Getting started</h2>\n<h3>Step1: Prerequisites</h3>\n<p>It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool </p>\n<ul>\n<li>\n<p><a href="
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/SBSRE</h1>\n<p>SBSRE is a <strong>slice-based single responsibility extraction</strong> approach supported by an <strong>eclipse plugin</strong> for identifying Single responsibility violations in the methods.</p>\n<p>The responsibility of a method can be best described by its impacts on the outer scope that are exposed through modifying the return values, outputs, and global variables. In the context of object-oriented programming, a method may modify either the class fields or return a value to its caller method. If the corresponding slices of these fields or return values within the method body are entirely separate, the method presumably exposes different functionalities.</p>\n<p>Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new <strong>Output-based Slicing</strong> algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods.</p>\n<h2>Relevant publications</h2>\n<p>Published version: Supporting single responsibility through automated extract method refactoring (https://link.springer.com/article/10.1007/s10664-023-10427-3)</p>\n<p>Preprint version: Supporting single responsibility through automated extract method refactoring (https://arxiv.org/abs/2305.03428)</p>\n<h2>Getting started</h2>\n<h3>Step1: Prerequisites</h3>\n<p>It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool </p>\n<ul>\n<li>\n<p><a href="
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/SBSRE</h1>\n<p>SBSRE is a <strong>slice-based single responsibility extraction</strong> approach supported by an <strong>eclipse plugin</strong> for identifying Single responsibility violations in the methods.</p>\n<p>The responsibility of a method can be best described by its impacts on the outer scope that are exposed through modifying the return values, outputs, and global variables. In the context of object-oriented programming, a method may modify either the class fields or return a value to its caller method. If the corresponding slices of these fields or return values within the method body are entirely separate, the method presumably exposes different functionalities.</p>\n<p>Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new <strong>Output-based Slicing</strong> algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods.</p>\n<h2>Relevant publications</h2>\n<p>Published version: Supporting single responsibility through automated extract method refactoring (https://link.springer.com/article/10.1007/s10664-023-10427-3)</p>\n<p>Preprint version: Supporting single responsibility through automated extract method refactoring (https://arxiv.org/abs/2305.03428)</p>\n<h2>Getting started</h2>\n<h3>Step1: Prerequisites</h3>\n<p>It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool </p>\n<ul>\n<li>\n<p><a href="
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/SBSRE</h1>\n<p>SBSRE is a <strong>slice-based single responsibility extraction</strong> approach supported by an <strong>eclipse plugin</strong> for identifying Single responsibility violations in the methods.</p>\n<p>The responsibility of a method can be best described by its impacts on the outer scope that are exposed through modifying the return values, outputs, and global variables. In the context of object-oriented programming, a method may modify either the class fields or return a value to its caller method. If the corresponding slices of these fields or return values within the method body are entirely separate, the method presumably exposes different functionalities.</p>\n<p>Existing extract method refactoring tools do not pay serious attention to these so-called output instructions and the output variables while searching for extract method candidates, which results in imprecise refactoring opportunity detection from the developer's viewpoint. We introduce a new <strong>Output-based Slicing</strong> algorithm, focused on extracting chunks of codes that commit to the specific output from the body of long methods.</p>\n<h2>Relevant publications</h2>\n<p>Published version: Supporting single responsibility through automated extract method refactoring (https://link.springer.com/article/10.1007/s10664-023-10427-3)</p>\n<p>Preprint version: Supporting single responsibility through automated extract method refactoring (https://arxiv.org/abs/2305.03428)</p>\n<h2>Getting started</h2>\n<h3>Step1: Prerequisites</h3>\n<p>It is recommended to use the Eclipse Neon IDE with JDK 1.8.x for lunching our SBSRE tool </p>\n<ul>\n<li>\n<p><a href="
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2305.03428"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Alireza-Ardalani/SBSRE/main/README.md"
        }
    ]
}