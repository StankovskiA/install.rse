{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:47:17"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/Yuanyuan-Yuan/NeuraL-Coverage",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "Yuanyuan-Yuan",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-12-12T14:16:16Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-18T09:24:07Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Research Artifact of ICSE 2023 Paper: Revisiting Neuron Coverage for DNN Testing: A Layer-Wise and Distribution-Aware Criterion",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Research Artifact of ICSE 2023 Paper: *Revisiting Neuron Coverage for DNN Testing: A Layer-Wise and Distribution-Aware Criterion* \n",
                "original_header": "NeuraL-Coverage"
            },
            "confidence": 0.9129733597267288,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "NeuraL-Coverage",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "Yuanyuan-Yuan/NeuraL-Coverage",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/Yuanyuan-Yuan/NeuraL-Coverage/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/Yuanyuan-Yuan/NeuraL-Coverage/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 253,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 6,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/Yuanyuan-Yuan/NeuraL-Coverage/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 721805
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 14119
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MATLAB",
                "name": "MATLAB",
                "type": "Programming_language",
                "size": 11868
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "license": [
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2019 Andy Brock\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/LICENSE"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/sample_image.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_cifar_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_BigGAN_ch64_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_BigGAN_bs512x4.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_SNGAN.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_BigGAN_deep.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/sample_cifar_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_SAGAN_bs128x2_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/sample_BigGAN_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/launch_BigGAN_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/utils/duplicate.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/ImageNet/scripts/utils/prepare_data.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_cifar_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_BigGAN_ch64_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_BigGAN_bs512x4.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_SNGAN.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_BigGAN_deep.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/sample_cifar_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_SAGAN_bs128x2_ema.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/sample_BigGAN_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/launch_BigGAN_bs256x8.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/utils/duplicate.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/BigGAN-projects/CIFAR10/scripts/utils/prepare_data.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "- Build from source code\n\n    ```setup\n    git clone https://github.com/Yuanyuan-Yuan/NeuraL-Coverage\n    cd NeuraL-Coverage\n    pip install -r requirements.txt\n    ```\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "NeuraL-Coverage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        },
        {
            "result": {
                "value": "```bash\npython fuzz.py --dataset CIFAR10 --model resnet50 --criterion NC\n```\n\nFor random mutation (i.e., without any criterion as objective), run\n\n```bash\npython fuzz_rand.py --dataset CIFAR10 --model resnet50\n```\n",
                "type": "Text_excerpt",
                "original_header": "Guiding Input Mutation in DNN Testing",
                "parent_header": [
                    "NeuraL-Coverage",
                    "Experiments"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Since we directly insert the BigGAN project path into system path, passing arguments to `eval_diversity_gen.py` in bash has conflicts with BigGAN projects. Therefore, we recommend first setting the following arguments in `eval_diversity_gen.py` and then run `python eval_diversity_gen.py`. \n",
                "original_header": "Generative Model"
            },
            "confidence": 0.9997490831294046,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "```python\nimport torch\n# Implemented using Pytorch\n\nimport tool\nimport coverage\n\n# 0. Get layer size in model\ninput_size = (1, image_channel, image_size, image_size)\nrandom_input = torch.randn(input_size).to(device)\nlayer_size_dict = tool.get_layer_output_sizes(model, random_input)\n\n# 1. Initialization\n# `hyper` denotes the hyper-paramter of a criterion;\n# set `hyper` as None if a criterion is hyper-paramter free (e.g., NLC).\ncriterion = coverage.NLC(model, layer_size_dict, hyper=None)\n# KMNC/NBC/SNAC/LSC/DSC/MDSC requires training data statistics of the tested model,\n# which is implemented in `build`. `train_loader` can be a DataLoader object in Pytorch or a list of data samples.\n# For other criteria, `build` function is empty.\ncriterion.build(train_loader)\n\n# 2. Calculation\n# `test_loader` stores all test inputs; it can be a DataLoader object in Pytorch or a list of data samples.\ncriterion.assess(test_loader)\n# If test inputs are gradually given from a data stream (e.g., in fuzzing), then calculate the coverage as the following way.\nfor data in data_stream:\n    criterion.step(data)\n\n# 3. Result\n# The following instruction assigns the current coverage value to `cov`.\ncov = criterion.current\n```\n",
                "type": "Text_excerpt",
                "original_header": "Getting Started",
                "parent_header": [
                    "NeuraL-Coverage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```bash\npython eval_diversity_image.py --model resnet50 --dataset CIFAR10 --criterion NC --hyper 0.75\n``` \n",
                "original_header": "Discriminative (Image) Model"
            },
            "confidence": 0.936169341582466,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```bash\npython eval_fault_revealing.py --dataset CIFAR10 --model resnet50 --criterion NC --hyper 0.75 --AE PGD --split test\n``` \n",
                "original_header": "Fault-Revealing Capability of Test Suites"
            },
            "confidence": 0.9171320655624868,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "NeuraL-Coverage"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2112.01955.pdf\n\n## Implementations\n\nThis repo implements the **NLC** proposed in our paper and previous neuron coverage criteria (optimized if possible"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1809.11096"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/Yuanyuan-Yuan/NeuraL-Coverage/main/README.md"
        }
    ]
}