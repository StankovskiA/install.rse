{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:14:56"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/r-three/git-theta",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "r-three",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-02-09T20:55:20Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-20T13:36:19Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/LICENSE.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "git extension for {collaborative, communal, continual} model development",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Version control systems like Git enable large distributed teams to collaborate on shared codebases by tracking changes over time and providing tools for merging changes from multiple sources.\nGit-Theta is a Git extension that aims to provide similar functionality for machine learning model checkpoints by *efficiently* and *meaningfully* track a model's version history natively through Git.\nSpecifically, rather than treating the checkpoint as a blob of data (as done by other systems for tracking models with Git), Git-Theta\n- atomically tracks each parameter \"group\" (e.g. a weight matrix or bias vector in a neural network)\n- tracks dense or communication-efficient updates like [low-rank](https://arxiv.org/abs/2106.09685) or [sparse](https://arxiv.org/abs/2111.09839) changes to parameter groups\n- allows models to be merged automatically or manually\n- displays meaningful \"diffs\" by showing which parameter groups have changed\n- supports checkpoint formats from most popular machine learning frameworks\n- enables easy extension of update types, merging methods, and checkpoint formats through a plugin system \nGit-Theta is currently under active development and should be used with caution.\nFor feature discussions and debugging help, please join the #git-theta stream in the [CCCML Zulip community](https://bit.ly/cccml-community).\nIf you use Git-Theta as part of a published research project, please cite [our paper](https://arxiv.org/abs/2306.04529).\n \n",
                "original_header": "Git-Theta"
            },
            "confidence": 0.9670158601558883,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Under the hood, Git-Theta tracks changes to a checkpoint at the *parameter group* level.\nA parameter group is a semantically-grouped collection of parameters like a weight matrix or bias vector in a neural network.\nParameter groups are determined based on the structure of the checkpoint file itself as specified in the format-specific [Checkpoint class](https://github.com/r-three/git-theta/tree/main/git_theta/checkpoints).\nIn the simplest case where all of the parameters of a model are updated, Git-Theta will effectively store an entirely new copy of the checkpoint.\nHowever, if only a subset of the model's parameter groups are updated, Git-Theta will only store the updates to the changed parameter groups, which saves space and communication costs.\nSimilarly, if a model is updated by adding new parameter groups, Git-Theta will only store the new parameter groups.\n \n",
                "original_header": "Parameter groups"
            },
            "confidence": 0.9126166153328141,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Beyond updating a subset of a model's parameter groups, Git-Theta also natively supports *parameter-efficient* updates.\nExamples of parameter-efficient updates include updating a sparse subset of the model's parameters (as in [FISH Mask](https://arxiv.org/abs/2111.09839) or [Diff Pruning](https://arxiv.org/abs/2012.07463)) or applying a low-rank update (as in [LoRA](https://arxiv.org/abs/2106.09685)).\nThere are multiple workflows for efficiently tracking parameter-efficient updates with Git-Theta.\n \n",
                "original_header": "Parameter-efficient updates"
            },
            "confidence": 0.9564087345768066,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "A simple way to track parameter-efficient updates is to store the information required to produce the update (e.g., the low-rank factors for LoRA or the indices and values for a sparse update) as new parameter groups in the checkpoint file itself.\nIn this case, model code handles creating and applying the update and the checkpoint is saved and loaded as usual. \n",
                "original_header": "Saving update information as new parameter groups"
            },
            "confidence": 0.9710067690237407,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "**Pros:**\n* Similar to saving update information as new parameter groups, this is simple to implement and only involves handling a single checkpoint file.\n* The checkpoint can be used as-is without any special logic for re-applying the update. \n",
                "original_header": "Applying updates to existing parameter groups before saving"
            },
            "confidence": 0.967126178304988,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Another option is to save parameter-efficient update information in a separate file from the original checkpoint.\nThis maintains storage and communication efficiency at the cost of requiring additional implementation overhead. \n**Cons:**\n* Implementation overhead. Training code needs to be able to segment out and save only the parameters that have changed. Inference code needs to know how to load both the original checkpoint and the update from the new checkpoint as well as how to merge them.\n* The original checkpoint and parameter updates are decoupled, running the risk that one could be changed without appropriately modifying the other. \n",
                "original_header": "Saving update information externally"
            },
            "confidence": 0.960705290669347,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Git-Theta provides principled and rigorous way to keep track of different versions of a model based on the standard version control workflow.\n \n",
                "original_header": "Managing model development with Git-Theta"
            },
            "confidence": 0.9375853954346934,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Model development is not always straightforward - often we want to try out different versions of a base model, or we might create different versions that are applicable to different tasks.\nGit-Theta supports this mode of development natively simply by using Git's branch feature - simply create a new branch (`git checkout -b`), modify the model, and add and commit it as usual.\nThis provides a straightforward workflow for trying out different ways to update a model.\nIf parameter groups are shared across checkpoints being tracked by Git-Theta (whether they are on the same or different branches), Git-Theta will only store a single copy of each parameter group.\nContributors can also develop their own updated versions of a model by forking the base repository.\n \n",
                "original_header": "Tracking different versions of a model"
            },
            "confidence": 0.9635911855149342,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Currently, `git rebase` is not supported when special update types are used.\nAdditionally, repeated merge-conflict resolution---often encountered in a rebase---can be onerous for large models.\n \n",
                "original_header": "Git Rebase"
            },
            "confidence": 0.9340794707239942,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Git-Theta supports updates that are based on the previous version of the parameter values.\nFor example, if a few entries of a parameter group are updated, Git-Theta can avoid storing a new copy of the parameter group; instead, it can be computed on the fly during a smudge filter based on the sparse update and the previous value.\nSuch updates are implemented as subclasses of the `IncrementalUpdate` class.\n`IncrementalUpdate`s include references to the commit that holds the last parameter value in their metadata.\nThen, when the new value is needed, the `IncrementalUpdate` class will fetch the value of the previous parameter *from git* and apply the current update.\nThis yields a massive reduction in storage costs.\nAdditionaly, this can be done recursively, i.e. Git-Theta will continuous fetch previous values and apply `IncrementalUpdate`s until a self-contained update (such as a `Dense` update that replaces all parameter values with new ones) is hit.\n \n",
                "original_header": "Incremental updates"
            },
            "confidence": 0.9585088599184984,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To avoid processing parameter groups that have not been changed, Git-Theta needs a way to determine whether a given parameter group's values have changed.\nDirectly testing for equality or comparing bitwise hashes might be overly strict due to numerical instability and noise that could arise from using incremental updates, different hardware, or different software stacks.\nInstead, Git-Theta uses uses locality sensitive hashing (LSH) for parameter hashes.\nSpecifically, an LSH that approximates Euclidean distance and uses the random-pool approach to hash parameters of variable sizes.\nGit-Theta's LSH uses 16 hash functions and is calibrated so that two parameter groups with a Euclidean distance less than $1e^{-8}$ will have the same hash with a probability of at least $0.99$.\nAdditionally, weights with a distance $\\in [1e{-8}, 1e^{-6}]$ are double-checked with [`numpy.allclose`](https://numpy.org/doc/stable/reference/generated/numpy.allclose.html).\n \n",
                "original_header": "Locality-sensitive hashing"
            },
            "confidence": 0.9112473023659837,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Git-theta makes heavy use of [python plug-ins](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/) to enable users to add support for additional checkpoint formats as well as custom merge patterns and incremental updates.\nSpecifically, Git-Theta currently support plug-ins for the [`Checkpoint`](https://github.com/r-three/git-theta/blob/main/git_theta/checkpoints/base.py), [`Update`](https://github.com/r-three/git-theta/blob/main/git_theta/updates/base.py), and [`Merge`](https://github.com/r-three/git-theta/blob/main/git_theta/merges/base.py) classes.\nThird-party users can register a plug-in by creating a small installable package that defines the plugin and registers it as an entry point under the name scope `git_theta.plugins.(checkpoints|updates|merges)`.\nAn example plugin for JSON formatted checkpoints can be found [here](https://github.com/r-three/git-theta/tree/main/plugins#git-theta-plug-ins).\nAlternatively, plug-ins can be added directly to the `git-theta` package by adding new subclasses to the appropriate modules, then declaring it in the `entry_points` dict in `setup.py`.\n \n",
                "original_header": "Plug-ins"
            },
            "confidence": 0.9029445152198472,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "git-theta",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "r-three/git-theta",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/r-three/git-theta/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/r-three/git-theta/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 203,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 9,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/r-three/git-theta/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 198752
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 16347
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/r-three/git-theta/releases/107874403",
                "tag": "v0.2.0",
                "name": "Add SafeTensor Support",
                "author": {
                    "name": "blester125",
                    "type": "User"
                },
                "description": "The release adds a new plug-in to support the [safetensors](https://huggingface.co/docs/safetensors/index) checkpoint format.",
                "tarball_url": "https://api.github.com/repos/r-three/git-theta/tarball/v0.2.0",
                "zipball_url": "https://api.github.com/repos/r-three/git-theta/zipball/v0.2.0",
                "html_url": "https://github.com/r-three/git-theta/releases/tag/v0.2.0",
                "url": "https://api.github.com/repos/r-three/git-theta/releases/107874403",
                "release_id": 107874403,
                "date_created": "2023-06-08T18:13:33Z",
                "date_published": "2023-06-08T18:15:04Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/r-three/git-theta/releases/107727976",
                "tag": "v0.1.1",
                "name": "Initial Release",
                "author": {
                    "name": "blester125",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/r-three/git-theta/tarball/v0.1.1",
                "zipball_url": "https://api.github.com/repos/r-three/git-theta/zipball/v0.1.1",
                "html_url": "https://github.com/r-three/git-theta/releases/tag/v0.1.1",
                "url": "https://api.github.com/repos/r-three/git-theta/releases/107727976",
                "release_id": 107727976,
                "date_created": "2023-06-07T20:03:20Z",
                "date_published": "2023-06-07T20:04:21Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/r-three/git-theta/releases/90744770",
                "tag": "v0.0.2",
                "name": "PyPI Test release",
                "author": {
                    "name": "blester125",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/r-three/git-theta/tarball/v0.0.2",
                "zipball_url": "https://api.github.com/repos/r-three/git-theta/zipball/v0.0.2",
                "html_url": "https://github.com/r-three/git-theta/releases/tag/v0.0.2",
                "url": "https://api.github.com/repos/r-three/git-theta/releases/90744770",
                "release_id": 90744770,
                "date_created": "2023-01-30T20:39:08Z",
                "date_published": "2023-01-30T20:39:48Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/r-three/git-theta/releases/90743962",
                "tag": "v0.0.1",
                "name": "PyPI Test release",
                "author": {
                    "name": "blester125",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/r-three/git-theta/tarball/v0.0.1",
                "zipball_url": "https://api.github.com/repos/r-three/git-theta/zipball/v0.0.1",
                "html_url": "https://github.com/r-three/git-theta/releases/tag/v0.0.1",
                "url": "https://api.github.com/repos/r-three/git-theta/releases/90743962",
                "release_id": 90743962,
                "date_created": "2023-01-30T20:29:19Z",
                "date_published": "2023-01-30T20:30:50Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/r-three/git-theta/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Download and install Git LFS using the instructions from [the Git LFS website](https://git-lfs.github.com).\n",
                "type": "Text_excerpt",
                "original_header": "Installing Git LFS",
                "parent_header": [
                    "Quick Start"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "value": "1) Install the git-theta Python package:\n```bash\npip install git-theta\n```\n\nBy default, installing `git-theta` with `pip` will not install any of the supported machine learning frameworks (PyTorch, TensorFlow, etc.).\nIf you want to install the framework you intend to use when installing `git-theta`, you can specify it when installing (e.g. by running `pip install git-theta[pytorch]` for PyTorch).\n\n2) Configure Git to use Git-Theta when tracking model checkpoints:\n```bash\ngit theta install\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installing Git-Theta",
                "parent_header": [
                    "Quick Start"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "value": "This project uses `black` for code formatting and `isort` for import statement ordering. Additionally, it includes CI that checks for compliance.\nWe include pre-commit hooks that will automatically run `black` and `isort` against any python files staged for commit.\n These hooks can be installed with:\n\n```bash\n$ pip install -r requirements-dev.txt\n$ pre-commit install\n```\n\nWhen one of these tools must reformat your file, it will show as the pre-commit hook failing and your commit will be cancelled.\nReformatted source files will appear in your working directory ready to be re-added to staging (`git add`).\n Running `git commit -m ${msg}` again will result in the hooks passing and the commit actually happening. *Note:* As your initial commit was blocked, you will probably want to use the same message in the commit that actually goes through.\n",
                "type": "Text_excerpt",
                "original_header": "Development Setup"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "<img src=\"https://user-images.githubusercontent.com/417568/229904559-d61d710c-7986-4a07-a405-d86b196f5046.png\" width=\"50\"> \nGit-Theta is a Git extension for collaborative, continual, and communal development of machine learning models. \n",
                "original_header": "Git-Theta"
            },
            "confidence": 0.9814104694295984,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "After saving update information in the checkpoint, the new checkpoint can be committed simply using `git add` and `git commit` as usual.\n \n",
                "original_header": "Saving update information as new parameter groups"
            },
            "confidence": 0.99947514278692,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Note that using this approach requires using `git theta add` instead of just `git add` to allow for additional command line arguments.\nUpdates that involve modifying existing parameters (rather than just completely replacing them) are referred to by Git-Theta as \"incremental updates\" and are handled via a plugin system (described [below](#incremental-updates)).\n \n",
                "original_header": "Using Git-Theta to incorporate external update information"
            },
            "confidence": 0.999999928866205,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If different versions of a model are created on different branches or repositories, Git-Theta will handle merging them.\nWhen `git merge` is run and there is a merge conflict between two histories of a model, Git-Theta will automatically open its merge tool.\nGit-Theta's merge tool currently supports basic resolution patterns like choosing the parameters from one of the models or merging parameter groups via averaging.\nFor more sophisticated merges, the environment variable `GIT_THETA_MANUAL_MERGE` can be set to true when performing the merge operation, i.e.\n```bash\nexport GIT_THETA_MANUAL_MERGE=True\ngit merge ${other-branch}\n```\n \n",
                "original_header": "Merging models"
            },
            "confidence": 0.982526049647078,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Git-Theta aims to support all standard Git workflows.\nHowever, there are currently some situations that Git-Theta does not currently support.\n \n",
                "original_header": "Sharp Edges"
            },
            "confidence": 0.9954162621255966,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This section describes how Git-Theta works in more detail.\n \n",
                "original_header": "Under the hood"
            },
            "confidence": 0.9327059055980781,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "1. The Git-Theta metadata file is retrieved from Git.\n2. For each parameter, the [Update](https://github.com/r-three/git-theta/tree/main/git_theta/updates) plug-in system is used to get actual parameter values.\n  a. For updates that change all parameter values, the Git LFS metadata is used to get the values directly.\n  b. For parameter-efficient updates, Git LFS metadata is used to get update values, previous parameter values are retrieved from Git itself, and the update is applied.\n4. The parameter values are written into the working tree using the checkpoint plug-in system to handle different deep learning frameworks. \nWhen installing Git-Theta with `git theta install`, the following lines are added to the global `~/.gitconfig`:\n```ini\n[filter \"theta\"]\n    clean = git-theta-filter clean %f\n    smudge = git-theta-filter smudge %f\n    required = true\n[merge \"theta\"]\n    name = Merge Models with Git-Theta\n    driver = git-theta-merge %O %A %B %P\n[diff \"theta\"]\n    command = git-theta-diff\n```\nThis configuration defines two [Git filter drivers](https://git-scm.com/docs/gitattributes#_filter) for Git-Theta and registers them under the name `theta`.\nIn addition, it defines merge and diff programs, also named `theta`.\nWhen `git theta track path/to/model` is run, an entry is added to the `.gitattributes` file to configure Git to use Git-Theta. The new entry looks like\n```ini\npath/to/model filter=theta merge=theta diff=theta\n```\n \n",
                "original_header": "Git-Theta's filters"
            },
            "confidence": 0.9953695340540436,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Git-theta makes heavy use of [python plug-ins](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/) to enable users to add support for additional checkpoint formats as well as custom merge patterns and incremental updates.\nSpecifically, Git-Theta currently support plug-ins for the [`Checkpoint`](https://github.com/r-three/git-theta/blob/main/git_theta/checkpoints/base.py), [`Update`](https://github.com/r-three/git-theta/blob/main/git_theta/updates/base.py), and [`Merge`](https://github.com/r-three/git-theta/blob/main/git_theta/merges/base.py) classes.\nThird-party users can register a plug-in by creating a small installable package that defines the plugin and registers it as an entry point under the name scope `git_theta.plugins.(checkpoints|updates|merges)`.\nAn example plugin for JSON formatted checkpoints can be found [here](https://github.com/r-three/git-theta/tree/main/plugins#git-theta-plug-ins).\nAlternatively, plug-ins can be added directly to the `git-theta` package by adding new subclasses to the appropriate modules, then declaring it in the `entry_points` dict in `setup.py`.\n \n",
                "original_header": "Plug-ins"
            },
            "confidence": 0.9999999757693562,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Say you have a codebase for training a model along with the model's checkpoint:\n\n```bash\nmy_codebase\n\u251c\u2500\u2500 model.pt\n\u2514\u2500\u2500 train.py\n```\n\nGit-Theta allows you to use Git to track the changes to your code ***and*** your model's parameters in tandem.\nTo use Git-Theta to track the model checkpoint, first run\n\n```bash\ngit theta track model.pt\n```\n\nThis will create or update the `.gitattributes` file that tells Git to use Git-Theta to handle the checkpoint file.\nYou can then add and commit the `.gitattributes` file:\n\n```bash\ngit add .gitattributes\ngit commit\n```\n\nAfter tracking the model, you can regular Git commands (`add`, `commit`, `push`, `pull`, `checkout`, `status`, `diff`, etc.) as if the checkpoint file was any other file.\nTo add and commit the initial version of the checkpoint, simply run\n\n```bash\ngit add model.pt\ngit commit\n```\n",
                "type": "Text_excerpt",
                "original_header": "Tracking a model",
                "parent_header": [
                    "Quick Start"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "value": "Additionally, `git theta add` can be used instead of `git add` to provide optional extra information, including e.g., the checkpoint format with `--checkpoint-type`, the [`Update`](https://github.com/r-three/git-theta/tree/main/git_theta/updates) used to update parameters with `--update-type`, and the location of auxiliary information/data for the update with `--update-path`.\nFor example, if the model was updated using using [LoRA](https://arxiv.org/abs/2106.09685), the low-rank factors can be efficiently stored by Git-Theta by running:\n\n```bash\n# After training with LoRA and saving the factors to updates.pt...\ngit theta add model.pt --update-type low-rank --update-path updates.pt\ngit commit\n```\n",
                "type": "Text_excerpt",
                "original_header": "Storing updates efficiently",
                "parent_header": [
                    "Quick Start"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "value": "Git-Theta can also handle merging of models trained with differing updates.\nFor example, if an existing model is further trained on a new branch called `alternate-training`:\n\n```bash\ngit checkout -b alternate-training\n# After performing training...\ngit add model.pt\ngit commit\n```\n\nand is separately trained on the main branch:\n\n```bash\ngit checkout main\n# After some other training...\ngit add model.pt\ngit commit\n```\n\nWe then can then merge the updates from the `alternate-training` branch via a standard `git merge`:\n\n```bash\ngit merge alternate-training\n```\n\nGit-Theta supports various methods for automatically merging models, including parameter averaging. The merge tools shows us each parameter that is different between the two models and asks what merge operation to perform.\n",
                "type": "Text_excerpt",
                "original_header": "Merging updates",
                "parent_header": [
                    "Quick Start"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you use git-theta in your work, please cite:\n\n```bibtex\n@InProceedings{kandpal-etal-2023-git-theta\n    title={Git-Theta: A Git Extension for Collaborative Development of Machine Learning Models},\n    author={Kandpal, Nikhil and Lester, Brian and Muqeeth, Mohammed and Mascarenhas, Anisha and Evans, Monty and Baskaran, Vishal and Huang, Tenghao and Liu, Haokun and Raffel, Colin},\n    journal={International Conference on Machine Learning, {ICML}},\n    year={2023},\n    month={july},\n    url={https://arxiv.org/abs/2306.04529},\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Git-Theta"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://user-images.githubusercontent.com/417568/229904559-d61d710c-7986-4a07-a405-d86b196f5046.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2004.10964"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2012.07463"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2306.04529"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2111.09839"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2104.08691"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2110.08207"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2106.09685"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
        }
    ]
}