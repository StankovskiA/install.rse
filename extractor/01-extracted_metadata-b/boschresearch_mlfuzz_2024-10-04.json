{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 01:15:48"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/boschresearch/mlfuzz",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "boschresearch",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2023-08-16T12:17:21Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-07-10T11:28:39Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/LICENSE"
        },
        {
            "result": {
                "value": "Copyright (c) 2023 Robert Bosch GmbH and its subsidiaries.\nMLFuzz is distributed under the Apache-2.0 license.\nSee the [LICENSE](LICENSE) for details.\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "mlfuzz",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "boschresearch/mlfuzz",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/boschresearch/mlfuzz/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/boschresearch/mlfuzz/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 15,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 1,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/boschresearch/mlfuzz/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 98351
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 7870
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1543
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 847
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/benchmarks/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/benchmarks/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Adding a fuzzer\n\nTo introduce a new fuzzer to MLFuzz, follow the four steps below.\n\n## Add a run script\n\n* Create a new folder under `fuzzers` named following the naming convention `<fuzzer_name>_experiments`.\n* There, create a Python script that can run the new fuzzer inside the Docker container (follow the example of any other fuzzer in MLFuzz).\n\n## Patch the code of the fuzzer\n\nThis step is optional and aims to adapt the fuzzer to MLFuzz experimental practices.\nTypical patches include:\n\n* Create an option to fix the seed of the random number generator used by the fuzzer (most often, option `-s`). This aims to ensure experiment reproducibility.\n* Adding sanitizers.\n* Porting fuzzers to newer versions of their dependencies (e.g., when old ones are discontinued).\n\nInstructions for creating a code patch:\n\n* On a clean clone of the fuzzer to be integrated, make the desired code changes to the fuzzer sources.\n* Build and test the modified fuzzer.\n* Once the changes are validated, create code patches for all the patched files:\n\n      git diff -- {filename} > {filename}_{change_name}.patch\n\n* Include all the generated patch files in the folder of your new fuzzer in MLFuzz.\n\n## Change the `Dockerfile` to clone and build the new fuzzer\n\nFor this, edit the `Dockerfile` at the root of the project.\nIf you created a code patch at the previous step, do not forget to copy and apply the patche to the fuzzer before building it in the `Dockerfile`.\n\n      patch {filename} < {filename}_{change_name}.patch\n\n## Add new fuzzer to fuzzers list\n\nChange `scripts/run_experiments.py` and `scripts/experiment_config.yaml.default` to define the name of the new fuzzer and the binaries it will operate on.\n\n# Adding a target program\n\nThe following steps provide some guidelines about adding new target programs.\nAll content regarding targets is defined in the `benchmarks` folder.\n\n## Update Dockerfile\n\nUpdate `benchmarks/Dockerfile` if the new target needs specific packages to be installed.\n\n## Add build script\n\nCreate a new Python script in `benchmarks/` that fetches the sources and builds the new target.\nInclude there are seed corpus that is available.\nUse examples from existing targets for guidance.\n\n## Update Makefile\n\nUpdate `benchmarks/Makefile` to call the previously created Python script to build the new target inside the Docker container.\n\n## Add target to experiment configuration\n\nUpdate `scripts/experiment_config.yaml.default` to add the name of the new target.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/CONTRIBUTING.md"
        },
        {
            "result": {
                "value": "The integration of new fuzzers or targets is welcome.\nSee [CONTRIBUTING](CONTRIBUTING.md) guidelines before opening a pull request.\n",
                "type": "Text_excerpt",
                "original_header": "Contributing",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/scripts/calc_average_execs.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/scripts/extract_ml_prc.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "MLFuzz has been tested on Ubuntu 20.04 LTS.\nThis project uses `docker` to containerize dependency installation, build targets and run experiments.\nPlease see the official [installation page](https://docs.docker.com/engine/install/).\n",
                "type": "Text_excerpt",
                "original_header": "Setup",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "We first build the 23 programs that will be used as targets for experiments:\n\n    cd MLFuzz/benchmarks\n    make\n",
                "type": "Text_excerpt",
                "original_header": "Build benchmark targets",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "Build Docker image for running experiments:\n\n    docker build . -t mlfuzz\n\nThis will make the `mlfuzz` image available for single or batch experiments.\n",
                "type": "Text_excerpt",
                "original_header": "Build experiment environment",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "All scripts for facilitating batch experiments and results post-processing are written in Python.\nThis project uses `python>=3.8` and [`poetry`](https://python-poetry.org/) for managing the Python environment.\nInstall `poetry` system-wide or in an empty virtual environment (e.g., created via `virtualenv` or `conda`).\nThen run\n\n    poetry install --without dev\n\nto install the project dependencies.\nNote that Neuzz++ and MLFuzz have the same Python dependencies; you only need to create one virtual environment for both of them.\nUse\n\n    poetry shell\n\nto activate the environment.\n",
                "type": "Text_excerpt",
                "original_header": "Installing Python dependencies",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "Fuzzing is resource-intensive, especially in terms of CPU usage.\nAll fuzzers in the AFL family require changes to the CPU configuration of the system they run on.\nTo make these, run the following commands as root on your system:\n\n    echo core >/proc/sys/kernel/core_pattern\n    cd /sys/devices/system/cpu\n    echo performance | tee cpu*/cpufreq/scaling_governor\n\nYou can later go back to the original state by replacing `performance` with `ondemand` or `powersave`. If you don't want to change the settings, set `AFL_SKIP_CPUFREQ` on all experiment runs to make `afl-fuzz` skip this check - but expect some performance drop.\n",
                "type": "Text_excerpt",
                "original_header": "Configuring CPUs for performance",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "    MLFuzz/\n    \u251c\u2500\u2500 benchmarks/             # Folder containing Dockerfile and scripts for building fuzzing targets\n    \u251c\u2500\u2500 fuzzers/                # Folder containing scripts for running each fuzzer in a Docker container\n    \u251c\u2500\u2500 mlfuzz/                 # Python package with reusable utility functions\n    \u251c\u2500\u2500 scripts/                # Scripts for running experiments and postprocessing results\n    \u251c\u2500\u2500 CONTRIBUTING.md         # Guidelines for contributing extension to MLFuzz\n    \u251c\u2500\u2500 Dockerfile              # Dockerfile for the image running experiments\n    \u251c\u2500\u2500 LICENSE                 # License file\n    \u251c\u2500\u2500 poetry.lock             # Project requirements in Poetry format\n    \u251c\u2500\u2500 pyproject.toml          # Standard Python package description for pip\n    \u2514\u2500\u2500 README.md               # The present README file\n \n",
                "original_header": "Project structure"
            },
            "confidence": 0.9999989923807067,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "All scripts for facilitating batch experiments and results post-processing are written in Python.\nThis project uses `python>=3.8` and [`poetry`](https://python-poetry.org/) for managing the Python environment.\nInstall `poetry` system-wide or in an empty virtual environment (e.g., created via `virtualenv` or `conda`).\nThen run\n\n    poetry install --without dev\n\nto install the project dependencies.\nNote that Neuzz++ and MLFuzz have the same Python dependencies; you only need to create one virtual environment for both of them.\nUse\n\n    poetry shell\n\nto activate the environment.\n",
                "type": "Text_excerpt",
                "original_header": "Installing Python dependencies",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Setup"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "Once all the setup steps have been performed, the environment is ready to run single or batch experiments.\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "To run a single fuzzing trial, e.g., fuzzing `json`, using the `mlfuzz` Docker image created above, run:\n\n    docker run --rm -it -v $(pwd)/benchmarks/binaries/:/targets/ -e AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1 \\\n      -e AFL_FORKSRV_INIT_TMOUT=1000 -e AFL_DISABLE_TRIM=1 -e AFL_CUSTOM_MUTATOR_LIBRARY=/neuzzpp/aflpp-plugins/libml-mutator.so \\\n      mlfuzz /aflpp/afl-fuzz -i /targets/seeds/libjpeg-turbo-07-2017/ -o /output -m none -- /targets/libjpeg-turbo-07-2017\n\nThe `--rm` removes the container after completion.\nWith `-d` you can run the container in background.\n`--name` can assign a name to the container for later access.\nNot every target in Fuzzer Test Suite has seeds.\nIf the seeds folder is missing for the target of your choice, create an empty folder and place at least one non-empty test case in that folder.\n",
                "type": "Text_excerpt",
                "original_header": "Single experiment",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "MLFuzz uses a configuration file to specify an experiment plan.\nThe repo includes configuration defaults in `scripts/experiment_config.yaml.default`.\nFirst make a copy of this file without the `.default` suffix:\n\n    cp scripts/experiment_config.yaml.default scripts/experiment_config.yaml\n\nThen edit the newly created `scripts/experiment_config.yaml` for your own experiment plan.\n* Configure hardware access by choosing the number of CPUs and (optionally) GPUs in the fields `n_cpus`, `n_gpus` and `use_gpus`. If `use_gpus` is `False`, `n_gpus` will be ignored, and all experiments will run on CPU.\n* Configure local paths:\n    * `binaries_folder` should indicate the folder of the target programs, i.e., from the `Build benchmark targets` step above\n    * `seeds_folder` points to the folder that contains seed test cases for each target, also from the `Build benchmark targets` step\n    * `results_folder` will store the output of all experiments.\n* Configure fuzzing options:\n   * `duration` specifies how long each fuzzer should run *in seconds*.\n   * `n_trials` is the number of repetitions of each experiment.\n* The configuration specifies all the available fuzzers and target programs. Edit these lists to your needs.\n\nThe next step requires the `mlfuzz` Docker image built above and the Python environment.\nUse the command\n\n    ./scripts/run_experiments.py\n\nto run batch experiments.\nThis script starts and manages all experiment runs from the configuration file.\nFor long experiments, consider running it in the background with `&` or running it in a [`screen`](https://linux.die.net/man/1/screen) session.\n",
                "type": "Text_excerpt",
                "original_header": "Batch experiments",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "If you use MLFuzz in scientific work, consider citing our paper presented at ESEC/FSE '23:\n\n    Maria-Irina Nicolae, Max Eisele, and Andreas Zeller. \u201cRevisiting Neural Program Smoothing for Fuzzing\u201d. In Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering. ACM, Dec. 2023.\n\n<details>\n<summary>BibTeX</summary>\n\n  ```bibtex\n  @inproceedings {MLFuzz23,\n  author = {Maria-Irina Nicolae, Max Eisele, and Andreas Zellere},\n  title = {Revisiting Neural Program Smoothing for Fuzzing},\n  booktitle = {Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE)},\n  year = {2023},\n  publisher = {{ACM}},\n  doi = {10.1145/3468264.3473932},\n  month = dec,\n  }\n  ```\n\n</details>\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "MLFuzz - fuzzing with machine learning"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{MLFuzz23,\n    month = {December},\n    doi = {10.1145/3468264.3473932},\n    publisher = {{ACM}},\n    year = {2023},\n    booktitle = {Proceedings of the 31st ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE)},\n    title = {Revisiting Neural Program Smoothing for Fuzzing},\n    author = {Maria-Irina Nicolae, Max Eisele, and Andreas Zellere},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "doi": "10.1145/3468264.3473932",
                "title": "Revisiting Neural Program Smoothing for Fuzzing",
                "author": "Maria-Irina Nicolae, Max Eisele, and Andreas Zellere"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "MLFuzz - fuzzing with machine learning"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2309.16618"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/boschresearch/mlfuzz/main/README.md"
        }
    ]
}