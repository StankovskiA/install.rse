{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:58:54"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/NetManAIOps/DejaVu",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "NetManAIOps",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-03-18T06:42:15Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-12T01:57:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2022 NetManAIOps\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Code and datasets for FSE'22 paper \"Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems\"",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The datasets A, B, C, D are public at :\n- https://www.dropbox.com/sh/ist4ojr03e2oeuw/AAD5NkpAFg1nOI2Ttug3h2qja?dl=0\n- https://doi.org/10.5281/zenodo.6955909 (including the raw data of the Train-Ticket dataset)\nIn each dataset, `graph.yml` or `graphs/*.yml` are FDGs, `metrics.csv` is metrics, and `faults.csv` is failures (including ground truths).\n`FDG.pkl` is a pickle of the FDG object, which contains all the above data.\nNote that the pickle files are not compatible in different Python and Pandas versions. So if you cannot load the pickles, just ignore and delete them. They are only used to speed up data load.\n \n",
                "original_header": "Datasets"
            },
            "confidence": 0.9591967149257289,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\nSince the DejaVu model is trained with historical failures, it is straightforward to interpret how it diagnoses a given failure by figuring out from which historical failures it learns to localize the root causes.\nTherefore, we propose a pairwise failure similarity function based on the aggregated features extracted by the DejaVu model.\nCompared with raw metrics, the extracted features are of much lower dimension and contain little useless information, which the DejaVu model ignores.\nHowever, computing failure similarity is not trivial due to the generalizability of DejaVu.\nFor example, suppose that the features are $1$ for root-cause failure units and $0$ for other failure units and there are four failure units ($v_1$, $v_2$, $v_3$, $v_4$).\nThen for two similar failures which occur at $v_1$ and $v_2$ respectively, their feature vectors are $(1, 0, 0, 0)$ and $(0, 1, 0, 0)$ respectively, which are dissimilar with respect to common similarity metrics (e.g., Manhattan or Euclidean). \n\nTo solve this problem, we calculate similarities based on failure classes rather than single failure units.\nAs shown in \\cref{fig:local-interpretation}, for each failure units at an in-coming failure $T_1$, we compare it with each unit of the corresponding failure classes at a historical failure $T_2$ and take the minimal similarity as its similarity to $T_2$.\nThen, we average the similarities to T2 if all units with their suspicious scores (of $T_1$) as the weights.\nIt is because we only care about those failure units that matter in the current failure when finding similar historical failures.\nIn summary, the similarity function to compare $T_1$ and $T_2$ can be formalized as follows:\n$$\nd(T_1, T_2)=\\frac{1}{|V|}\\sum_{v\\in V}s_{T_1}(v)(\\min_{v' \\in N_c(v;G)}||\\boldsymbol{\\hat{f}}^{(T_1, v)}-\\boldsymbol{\\hat{f}}^{(T_2, v')}||_1)\n$$\nwhere $N_c(v;G)$ denotes the failure units of the same class as $v$ in $G$, and $||\\cdot||_1$ denotes $L1$ norm. \n\nFor an in-coming failure, we calculate its similarity to each historical failure and recommend the top-k most similar ones to engineers.\nOur model is believed to learn localizing the root causes from these similar historical failures.\nFurthermore, engineers can also directly refer to the failure tickets of these historical failures for their diagnosis and mitigation process.\nNote that sometimes the most similar historical failures may have different failure classes to the localization results due to imperfect similarity calculation.\nIn such cases, we discard and ignore such historical failures. \n",
                "original_header": "Local interpretation"
            },
            "confidence": 0.9710787482358678,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "DejaVu",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "NetManAIOps/DejaVu",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/NetManAIOps/DejaVu/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/NetManAIOps/DejaVu/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 73,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "diagnosis, failure",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 16,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/NetManAIOps/DejaVu/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 3821314
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 344781
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 1554
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/exp/DejaVu/run_random_walk_experiments.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/explain.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/explain.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_training_time_simulated.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_training_time_simulated.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_z_dim.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_z_dim.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_performance_to_failure_frequency.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_performance_to_failure_frequency.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/interpret_gnnexplainer.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/interpret_gnnexplainer.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_local_interpretation_example.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_local_interpretation_example.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_gat_architecture.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_gat_architecture.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_generalization_performance.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_generalization_performance.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_time.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_time.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_tss.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_tss.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/interpret_lime.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/interpret_lime.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_dfe.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/notebooks/DejaVu/plot_impact_of_dfe.ipynb"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "1. All the software requirements are already pre-installed in the Docker image below. The requirements are also listed in `requirements.txt` and `requirements-dev.txt`. Note that `DGL 0.8` is not released yet when I did this work, so I installed `DGL 0.8` manually from the source code. PyTorch version should be equal to or greater than 1.11.0.\n   ```bash\n   docker pull lizytalk/dejavu\n   ```\n2. Pull the code from GitHub\n   ```bash\n   git pull https://github.com/NetManAIOps/DejaVu.git DejaVu\n   ```\n3. Download the datasets following the link in the GitHub repo and extract the datasets into `./DejaVu/data`\n4. I use the command `realpath` in the example commands below, which is not bundled in macOS and Windows. On macOS, you can install it by `brew install coreutils`.\n5. Start a Docker container with our image and enter its shell\n   ```bash\n   docker run -it --rm -v $(realpath DejaVu):/workspace lizytalk/dejavu bash\n   ```\n6. Run `direnv allow` in the shell of the Docker container to set the environment variables.\n7. Run experiments in the shell of the Docker container following the usage table as follows.\n\n",
                "type": "Text_excerpt",
                "original_header": "Install",
                "parent_header": [
                    "DejaVu",
                    "Code"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "A preprint version: https://arxiv.org/abs/2207.09021 \n",
                "original_header": "Paper"
            },
            "confidence": 0.9861817130287298,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "https://github.com/lizeyan/train-ticket\n \n",
                "original_header": "Deployment and Failure Injection Scripts of Train-Ticket"
            },
            "confidence": 0.9986570089006949,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "|Algorithm|Usage|\n|---|---|\n|DejaVu|Run for dataset A1: `python exp/run_GAT_node_classification.py -H=4 -L=8 -fe=GRU -bal=True --data_dir=data/A1`|\n|JSS'20|Run for dataset A1: `python exp/DejaVu/run_JSS20.py --data_dir=data/A1`|\n|iSQUAD|Run for dataset A1: `python exp/DejaVu/run_iSQ.py --data_dir=data/A1`|\n|Decision Tree|Run for dataset A1: `python exp/run_DT_node_classification.py --data_dir=data/A1`|\n|RandomWalk@Metric|Run for dataset A1: `python exp/DejaVu/run_random_walk_single_metric.py --data_dir=data/A1 --window_size 60 10 --score_aggregation_method=min`|\n|RandomWalk@FI|Run for dataset A1: `python exp/DejaVu/run_random_walk_failure_instance.py --data_dir=data/A1 --window_size 60 10 --anomaly_score_aggregation_method=min --corr_aggregation_method=max`|\n|Global interpretation|Run `notebooks/explain.py` as a jupyter notebook with `jupytext`|\n|Local interpretation|`DejaVu/explanability/similar_faults.py`|\n\nThe commands would print a `one-line summary` in the end, including the following fields: `A@1`, `A@2`, `A@3`, `A@5`, `MAR`, `Time`, `Epoch`, `Valid Epoch`, `output_dir`, `val_loss`, `val_MAR`, `val_A@1`, `command`, `git_commit_url`, which are the desrired results.\n\nTotally, the main experiment commands of DejaVu should output as follows:\n- FDG message, including the data paths, edge types, the number of nodes (failure units), the number of metrics, the metrics of each failure class.\n- Traning setup message: the faults used for training, validation and testing.\n- Model architecture: model parameters in each part, total params\n- Training process: the training/validation/testing loss and accuracy\n- Time Report.\n- command output one-line summary.\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "DejaVu",
                    "Code"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "value": "See https://github.com/NetManAIOps/DejaVu/issues/4\n",
                "type": "Text_excerpt",
                "original_header": "Example",
                "parent_header": [
                    "DejaVu",
                    "Code"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "``` bibtex\n@inproceedings{li2022actionable,\n  title = {Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems},\n  booktitle = {Proceedings of the 2022 30th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},\n  author = {Li, Zeyan and Zhao, Nengwen and Li, Mingjie and Lu, Xianglin and Wang, Lixin and Chang, Dongdong and Nie, Xiaohui and Cao, Li and Zhang, Wenchi and Sui, Kaixin and Wang, Yanhua and Du, Xu and Duan, Guoqing and Pei, Dan},\n  year = {2022},\n  month = nov,\n  series = {{{ESEC}}/{{FSE}} 2022}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Citation",
                "parent_header": [
                    "DejaVu"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "value": "@inproceedings{li2022actionable,\n    series = {{{ESEC}}/{{FSE}} 2022},\n    month = {November},\n    year = {2022},\n    author = {Li, Zeyan and Zhao, Nengwen and Li, Mingjie and Lu, Xianglin and Wang, Lixin and Chang, Dongdong and Nie, Xiaohui and Cao, Li and Zhang, Wenchi and Sui, Kaixin and Wang, Yanhua and Du, Xu and Duan, Guoqing and Pei, Dan},\n    booktitle = {Proceedings of the 2022 30th {{ACM Joint Meeting}} on {{European Software Engineering Conference}} and {{Symposium}} on the {{Foundations}} of {{Software Engineering}}},\n    title = {Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Actionable and Interpretable Fault Localization for Recurring Failures in Online Service Systems",
                "author": "Li, Zeyan and Zhao, Nengwen and Li, Mingjie and Lu, Xianglin and Wang, Lixin and Chang, Dongdong and Nie, Xiaohui and Cao, Li and Zhang, Wenchi and Sui, Kaixin and Wang, Yanhua and Du, Xu and Duan, Guoqing and Pei, Dan"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "DejaVu"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/figures/local_interpretation.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/figures/global_interpretation_time_series_features.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2207.09021\n## Code\n### Install\n1. All the software requirements are already pre-installed in the Docker image below. The requirements are also listed in `requirements.txt` and `requirements-dev.txt`. Note that `DGL 0.8` is not released yet when I did this work, so I installed `DGL 0.8` manually from the source code. PyTorch version should be equal to or greater than 1.11.0.\n   ```bash\n   docker pull lizytalk/dejavu\n   ```\n2. Pull the code from GitHub\n   ```bash\n   git pull https://github.com/NetManAIOps/DejaVu.git DejaVu\n   ```\n3. Download the datasets following the link in the GitHub repo and extract the datasets into `./DejaVu/data`\n4. I use the command `realpath` in the example commands below, which is not bundled in macOS and Windows. On macOS, you can install it by `brew install coreutils`.\n5. Start a Docker container with our image and enter its shell\n   ```bash\n   docker run -it --rm -v $(realpath DejaVu"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/DejaVu/master/README.md"
        }
    ]
}