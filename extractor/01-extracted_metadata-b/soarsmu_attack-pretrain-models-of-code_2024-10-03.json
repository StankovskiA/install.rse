{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 21:39:07"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/soarsmu/attack-pretrain-models-of-code",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "soarsmu",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-07-16T07:55:54Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-10-03T11:46:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/mit",
                "type": "License",
                "name": "MIT License",
                "url": "https://api.github.com/licenses/mit",
                "spdx_id": "MIT"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "MIT License\n\nCopyright (c) 2021 Zhou Yang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Replication Package for \"Natural Attack for Pre-trained Models of Code\", ICSE 2022",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This is the codebase for the paper \"[Natural Attack for Pre-trained Models of Code](https://arxiv.org/abs/2201.08698)\". \n",
                "original_header": "Attack pre-trained models of code"
            },
            "confidence": 0.9791407951746237,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This docker image works fine on our machines with 2080Ti and 100V. However, we did find that on machines with new 3070 GPU, it takes very long time to load the models to CUDA devices. One can use docker images with lower CUDA version to solve this problem. For example:\n```\ndocker run --name=codebert-attack --gpus all -it --mount type=bind,src=/media/data/zyang/codebases,dst=/workspace pytorch/pytorch:1.7.0-cuda11.0-cudnn8-devel\n```\n \n",
                "original_header": "Notes"
            },
            "confidence": 0.9456908323067807,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Let's take the CodeBERT and vulnerability detection task as an example. The `dataset` folder contains the training and evaluation data for this task. The `substitutes` folder contains *naturalness aware* substitutions that we generate for the test set. The numbers in the file name (e.g., \"0_400\") means that this file only contains substitutes for the first 400 code snippets in the datasets. We split the whole dataset into several chunks to process them in parallel.  \n The `attack results` folder contains the results of two methods evaluated in our experiment. Note: `GA` means our method, and `MHM-LS` means the `MHM-NS` in the paper. (at the earlier stage, we called it \"Literal Semantic\" but then we thought \"Natural Semantic\" was more appropriate).\n Under each folder, you can find two types of files: `.csv` and `.log`. The csv files record details of adversarial examples, e.g., the original code, program length, adversarial examples, replcaed variables, whether the attack is successful, etc. An example in the `.log` file is as follows.\n```\n>> ACC! p => php (0.59901 => 0.50218)\n>> SUC! extradata => extadata (0.50218 => 0.47853)\nExample time cost:  0.14 min\nALL examples time cost:  5.64 min\nQuery times in this attack:  148\nAll Query times:  5878\nSuccess rate:  0.7142857142857143\nSuccessful items count:  5\nTotal count:  7\nIndex:  10\n```\n \n",
                "original_header": "Datasets and Results"
            },
            "confidence": 0.917297051954484,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "attack-pretrain-models-of-code",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "soarsmu/attack-pretrain-models-of-code",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/soarsmu/attack-pretrain-models-of-code/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/soarsmu/attack-pretrain-models-of-code/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 39,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 8,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/soarsmu/attack-pretrain-models-of-code/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 878518
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 26541
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/python_parser/parser_folder/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/CodeXGLUE/Clone-detection-BigCloneBench/code/run_ga.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/CodeXGLUE/Defect-detection/code/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/clonedetection/dataset/generate.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/clonedetection/code/parser/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/Defect-detection/preprocess/generate.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/Defect-detection/code/run_mlmls.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/Defect-detection/code/attack_trainset.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/Defect-detection/code/run_mlmo.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/GraphCodeBERT/Authorship-Attribution/code/parser/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "run": [
        {
            "result": {
                "value": "We refer to the README.md files under each folder to fine-tune and attack models on different datasets. `./CodeXGLUE/` contains code for the CodeBERT experiment and `./GraphCodeBERT` contains code for GraphCodeBERT experiment. \n\n",
                "type": "Text_excerpt",
                "original_header": "Running Experiments"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "acknowledgement": [
        {
            "result": {
                "value": "We are very grateful that the authors of CodeBERT, GraphCodeBERT, CodeXGLUE, MHM make their code publicly available so that we can build this repository on top of their code. \n\n",
                "type": "Text_excerpt",
                "original_header": "Acknowledgement"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "contact": [
        {
            "result": {
                "value": "Feel free to contact Zhou Yang (zyang@smu.edu.sg), Jieke Shi (jiekeshi@smu.edu.sg), Junda He (jundahe@smu.edu.sg) if you have any further questions.",
                "type": "Text_excerpt",
                "original_header": "Contact"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We use `tree-sitter` to parse code snippets and extract variable names. You need to go to `./parser` folder and build tree-sitter using the following commands:\n```\nbash build.sh\n```\n \n",
                "original_header": "Build `tree-sitter`"
            },
            "confidence": 0.9999998450965513,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "As a quick comparison, here is the log for `MHM-NS`. Although it successfully attacks as well, it queries the model for much more times and is 5 times slower than our method.\n```\n  >>  iter 1, ACC! extradata_size => extradada_address (0 => 0, 0.59901 => 0.59422) a=1.088\n  >>  iter 2, ACC! vendor =>  voy (0 => 0, 0.59422 => 0.58793) a=1.076\n  >>  iter 3, ACC! extradada_address => extradada_capacity (0 => 0, 0.58793 => 0.58041) a=1.060\n  >>  iter 4, ACC! bitexact => bitextract (0 => 0, 0.58041 => 0.56324) a=1.070\n  >>  iter 5, ACC! oggstream => oggrun (0 => 0, 0.56324 => 0.56430) a=1.029\n  >>  iter 6, ACC! p => tp (0 => 0, 0.56430 => 0.55780) a=1.114\n  >>  iter 7, ACC! bitextract => ittexract (0 => 0, 0.55780 => 0.55839) a=1.010\n  >>  iter 8, ACC! tp => up (0 => 0, 0.55839 => 0.54421) a=1.101\n  >>  iter 9, ACC! ittexract => biteexact (0 => 0, 0.54421 => 0.55088) a=1.024\n  >>  iter 10, ACC!  voy => ivoy (0 => 0, 0.55088 => 0.55088) a=1.000\n  >>  iter 11, ACC! oggrun => ottsystem (0 => 0, 0.55088 => 0.55714) a=1.045\n  >>  iter 12, ACC! ottsystem => otttable (0 => 0, 0.55714 => 0.56155) a=1.053\n  >>  iter 13, ACC! up => point (0 => 0, 0.56155 => 0.59689) a=1.123\n  >>  iter 14, ACC! ivoy => coid (0 => 0, 0.59689 => 0.59689) a=1.000\n  >>  iter 15, ACC! extradada_capacity => extradATA_capacity (0 => 0, 0.59689 => 0.58104) a=1.039\n  >>  iter 16, ACC! otttable => oggfile (0 => 0, 0.58104 => 0.55747) a=1.060\n  >>  iter 17, ACC! coid => vsoice (0 => 0, 0.55747 => 0.55747) a=1.000\n  >>  iter 18, ACC! biteexact => bitepexacting (0 => 0, 0.55747 => 0.55841) a=1.025\n  >>  iter 19, ACC! bitepexacting => ittexacts (0 => 0, 0.55841 => 0.56496) a=1.031\n  >>  iter 20, REJ. extradATA_capacity => extradada_capacity (0 => 0, 0.56496 => 0.57938) a=0.994\n  >>  iter 21, ACC! oggfile => oggcloud (0 => 0, 0.56496 => 0.55694) a=1.018\n  >>  iter 22, REJ. oggcloud => ottchannel (0 => 0, 0.55694 => 0.58494) a=0.991\n  >>  iter 23, ACC! ittexacts => itteXACT (0 => 0, 0.55694 => 0.56409) a=1.043\n  >>  iter 24, REJ. oggcloud => ogform (0 => 0, 0.56409 => 0.58792) a=0.983\n  >>  iter 25, REJ. oggcloud => gowstage (0 => 0, 0.56409 => 0.58440) a=0.982\n  >>  iter 26, SUCC! point => a (0 => 1, 0.56409 => 0.49193) a=1.000\nEXAMPLE 10 SUCCEEDED!\n  time cost = 0.70 min\n  ALL EXAMPLE time cost = 9.78 min\n  curr succ rate = 0.5714285714285714\nQuery times in this attack:  713\nAll Query times:  10114\n```\n \n",
                "original_header": "Datasets and Results"
            },
            "confidence": 0.999999999994543,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The datasets and results can be downloaded from this [Onedrive](https://smu-my.sharepoint.com/:u:/g/personal/zyang_smu_edu_sg/EXk81Z83qYNAsqGQhz4XmzkB2c75l3afygJcT7frpgLzrg?e=ZyvoFE). After decompressing this file, the folder structure is as follows.\n```\n.\n\u2514\u2500\u2500 CodeBERT\n    \u2514\u2500\u2500 Vulnerability Detection\n        \u2514\u2500\u2500 data\n            \u251c\u2500\u2500 attack results\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 GA\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 attack_genetic_test_subs_0_400.csv\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 attack_gi_test_subs_0_400.log\n            \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 MHM-LS\n            \u2502\u00a0\u00a0     \u251c\u2500\u2500 mhm_attack_ls_subs_0_400.log\n            \u2502\u00a0\u00a0     \u251c\u2500\u2500 mhm_attack_lstest_subs_0_400.csv\n            \u2502\u00a0\u00a0     \u251c\u2500\u2500 ...\n            \u251c\u2500\u2500 dataset\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 test.jsonl\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 train.jsonl\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 valid.jsonl\n            \u2514\u2500\u2500 substitutes\n                \u251c\u2500\u2500 test_subs_0_400.jsonl\n                \u251c\u2500\u2500 test_subs_1200_1600.jsonl\n                \u251c\u2500\u2500 ...\n```\n \n",
                "original_header": "Datasets and Results"
            },
            "confidence": 0.9438803681612327,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Attack pre-trained models of code"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2201.08698"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/soarsmu/attack-pretrain-models-of-code/main/README.md"
        }
    ]
}