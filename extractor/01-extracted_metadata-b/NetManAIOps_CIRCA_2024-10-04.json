{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:25:34"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/NetManAIOps/CIRCA",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "NetManAIOps",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-03-15T04:26:06Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-29T07:33:51Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/bsd-3-clause",
                "type": "License",
                "name": "BSD 3-Clause \"New\" or \"Revised\" License",
                "url": "https://api.github.com/licenses/bsd-3-clause",
                "spdx_id": "BSD-3-Clause"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "BSD 3-Clause License\n\nCopyright (c) 2022, NetManAIOps\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Causal Inference-based Root Cause Analysis",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This project contains the code of baselines and simulation data generation for the KDD '22 paper, [Causal Inference-Based Root Cause Analysis for Online Service Systems with Intervention Recognition](https://doi.org/10.1145/3534678.3539041).\nExperiment results can be found in [figshare](https://doi.org/10.6084/m9.figshare.19085855), where the code is corresponding to the commit 1522ddd7efd16db55e9f351fd70324501ce9134e.\n \n",
                "original_header": "CIRCA"
            },
            "confidence": 0.9892778169659308,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "CIRCA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "NetManAIOps/CIRCA",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/NetManAIOps/CIRCA/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/NetManAIOps/CIRCA/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 70,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 11,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/NetManAIOps/CIRCA/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 201285
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "R",
                "name": "R",
                "type": "Programming_language",
                "size": 8482
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 1198
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/Dockerfile"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "This repository contains a [Dockerfile](Dockerfile) to describe the necessary steps to setup the environment.\nTo install this project as a package with `pip`, R package [pcalg](build/requirements.R) has to be installed manually.\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "CIRCA"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        },
        {
            "result": {
                "value": "```bash\npython -m circa.experiment generate\n```\n",
                "type": "Text_excerpt",
                "original_header": "Simulation Data Generation",
                "parent_header": [
                    "CIRCA",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        },
        {
            "result": {
                "value": "CIRCA is designed as a toolbox with a set of interfaces.\n",
                "type": "Text_excerpt",
                "original_header": "Toolbox",
                "parent_header": [
                    "CIRCA",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        },
        {
            "result": {
                "value": "Each root cause analysis algorithm is separated into two steps, namely *graph construction* and *scoring*.\n\nThe graph construction step should implement `circa.graph.GraphFactory`.\n`GraphFactory.create` takes data for analysis (an instance of `circa.model.case.CaseData`) and timestamp (`float`) when the algorithm is triggered.\nThe output is a graph (an instance of `circa.model.graph.Graph`) for the fault under analysis.\n\nThe scoring step contains a sequence of scorers (instances of `circa.alg.base.Scorer`).\n`Scorer.score` of each scorer needs the following information:\n\n- The graph produced in the graph construction step,\n- data for analysis (an instance of `circa.model.case.CaseData`),\n- timestamp (`float`) when the algorithm is triggered, and\n- (optional) output of the previous scorer.\n\n`Scorer.score` will generate a mapping from a node in the input graph to its score (`circa.alg.base.Score`).\nThe design of the scorer sequence enables reusing scorers, i.e., two algorithms can share one scorer as a common step.\nNote that a scorer may drop some nodes in the input graph, performing as a filter.\n\n`circa.alg.common` provides some common utilizations.\nFor example, `circa.alg.common.Model` combines a graph factory and a sequence of scorers as a whole with optional names.\n`Model.analyze` will forward data and timestamp for them and produce an ordered sequence of scores.\n`circa.alg.common.evaluate` will further evaluate a model with a set of cases (instances of `circa.model.case.Case`, each of which combines data and the corresponding answers).\n\n```python\n\"\"\"\nAn example showing the basic usage of CIRCA\n\"\"\"\nfrom collections import defaultdict\nfrom typing import Dict\nfrom typing import Sequence\nfrom typing import Tuple\n\nimport networkx as nx\nfrom sklearn.linear_model import LinearRegression\n\nfrom circa.alg.ci import RHTScorer\nfrom circa.alg.ci.anm import ANMRegressor\nfrom circa.alg.common import Model\nfrom circa.graph.common import StaticGraphFactory\nfrom circa.model.case import CaseData\nfrom circa.model.data_loader import MemoryDataLoader\nfrom circa.model.graph import MemoryGraph\nfrom circa.model.graph import Node\n\n\nlatency = Node(\"DB\", \"Latency\")\ntraffic = Node(\"DB\", \"Traffic\")\nsaturation = Node(\"DB\", \"Saturation\")\n# circa.model.graph.MemoryGraph is derived from circa.model.graph.Graph\ngraph = MemoryGraph(\n    nx.DiGraph(\n        {\n            traffic: [latency, saturation],\n            saturation: [latency],\n        }\n    )\n)\n\n# 1. Assemble an algorithm\n# circa.graph.common.StaticGraphFactory is derived from circa.graph.GraphFactory\ngraph_factory = StaticGraphFactory(graph)\nscorers = [\n    # circa.alg.ci.RHTScorer is derived from circa.alg.common.DecomposableScorer,\n    # which is further derived from circa.alg.base.Scorer\n    RHTScorer(regressor=ANMRegressor(regressor=LinearRegression())),\n]\nmodel = Model(graph_factory=graph_factory, scorers=scorers)\n\n# 2. Prepare data\nmock_data = {\n    latency: (10, 12, 11, 9, 100, 90),\n    traffic: (100, 110, 90, 105, 200, 150),\n    saturation: (5, 4, 5, 6, 90, 85),\n}\nmock_data_with_time: Dict[str, Dict[str, Sequence[Tuple[float, float]]]] = defaultdict(\n    dict\n)\nfor node, values in mock_data.items():\n    mock_data_with_time[node.entity][node.metric] = [\n        (index * 60, value) for index, value in enumerate(values)\n    ]\ndata = CaseData(\n    # circa.model.data_loader.MemoryDataLoader is derived from\n    # circa.model.data_loader.DataLoader, which manages data with configurations\n    data_loader=MemoryDataLoader(mock_data_with_time),\n    sli=latency,\n    detect_time=240,\n    lookup_window=4,\n    detect_window=2,\n)\n\n# 3. Conduct root cause analysis one minute after a fault is detected\nprint(model.analyze(data=data, current=data.detect_time + 60))\n```\n",
                "type": "Text_excerpt",
                "original_header": "Basic",
                "parent_header": [
                    "CIRCA",
                    "Usage",
                    "Toolbox"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        },
        {
            "result": {
                "value": "`circa.experiment` supports comparison among models and parameter exploration, as mentioned for the simulation study.\nTo conduct experiments with your own dataset, start from the following code named `example.py`.\nExecute `python -m example -s run-new --output-dir output/test --report-dir report/test` and find the report in `report/test/report.csv`.\nFind more command line parameters with `python -m example -h`.\n\n```python\n\"\"\"\nAn example showing the advanced usage of CIRCA\n\"\"\"\nimport argparse\nimport logging\nimport os\nfrom typing import List\n\nfrom circa.experiment import comparison\nfrom circa.experiment.comparison.models import get_models\nfrom circa.experiment.__main__ import get_parser\nfrom circa.graph.structural import StructuralGraph\nfrom circa.model.case import Case\nfrom circa.utils import silence_third_party\n\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\n\n\ndef run(args: argparse.Namespace):\n    \"\"\"\n    Evaluate multiple models\n    \"\"\"\n    data_dir: str = args.data_dir\n    report_dir: str = args.report_dir\n    os.makedirs(report_dir, exist_ok=True)\n\n    logger = logging.getLogger(__package__)\n\n    logger.info(\"Loading from %s\", data_dir)\n    # TODO: Prepare your data with answers here\n    cases: List[Case] = []\n\n    models, graph_factories = get_models(\n        # TODO: Configure your own structural graph here\n        # structural_graph_params=dict(\n        #     structural_graph=StructuralGraph(filename=\"tests/alg/sgraph/index.yml\"),\n        # ),\n        params=args.model_params,\n        seed=args.seed,\n        cuda=args.cuda,\n        max_workers=1,\n    )\n\n    logger.info(\"Start running on %s with #models=%d\", data_dir, len(models))\n    comparison.run(\n        models=models,\n        cases=cases,\n        graph_factories=graph_factories,\n        output_dir=args.output_dir,\n        report_filename=os.path.join(report_dir, \"report.csv\"),\n        max_workers=1 if args.cuda else args.max_workers,\n    )\n\n\ndef wrap_parsers(subparsers: argparse._SubParsersAction):\n    \"\"\"\n    Add argparser for your own experiments\n    \"\"\"\n    parser_params = dict(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser = argparse.ArgumentParser(add_help=False, **parser_params)\n    parser.add_argument(\n        \"--data-dir\",\n        type=str,\n        default=os.path.join(BASE_DIR, \"data\"),\n        help=\"Data directory\",\n    )\n\n    parser_run: argparse.ArgumentParser = subparsers.add_parser(\n        \"run-new\",\n        parents=[parser],\n        help=\"Explore all combinations of model parameters\",\n        **parser_params,\n    )\n    parser_run.add_argument(\n        \"--output-dir\", type=str, default=\"output\", help=\"Output directory\"\n    )\n    parser_run.add_argument(\n        \"--report-dir\", type=str, default=\"report\", help=\"Report directory\"\n    )\n    parser_run.set_defaults(func=run)\n\n\ndef _main():\n    parser, subparsers = get_parser()\n    wrap_parsers(subparsers)\n    parameters = parser.parse_args()\n\n    if parameters.S:\n        logging.basicConfig(level=logging.ERROR)\n    elif parameters.V:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    if not parameters.V:\n        silence_third_party()\n\n    if \"func\" in parameters:\n        parameters.func(parameters)\n    else:\n        parser.print_usage()\n\n\nif __name__ == \"__main__\":\n    _main()\n```\n",
                "type": "Text_excerpt",
                "original_header": "Advanced",
                "parent_header": [
                    "CIRCA",
                    "Usage",
                    "Toolbox"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "```bash\n# Explore parameter combinations\npython -m circa.experiment --max-workers 16 --model-params params-sim-tune.json tune\n# Explore all the datasets with pre-defined parameters\npython -m circa.experiment --model-params params-sim-run.json run\n# Robustness evaluation\npython -m circa.experiment robustness\n```\n\nExecute `Rscript img/draw.sim.R` to produce summaries under `img/output`.\n- `params-sim-run.json` is created according to `img/output/best-sim-tuning.tex`\n- To create parameter template, execute the following command\n```bash\npython -m circa.experiment params > default.json\n```\n",
                "type": "Text_excerpt",
                "original_header": "Simulation Study",
                "parent_header": [
                    "CIRCA",
                    "Usage"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        }
    ],
    "application_domain": [
        {
            "result": {
                "type": "String",
                "value": "Graphs"
            },
            "confidence": 0.9349328162364484,
            "technique": "supervised_classification"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "CIRCA"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/NetManAIOps/CIRCA/master/README.md"
        }
    ]
}