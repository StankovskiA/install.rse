{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:51:39"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/uds-se/FormatFuzzer",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "uds-se",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-09-07T15:45:24Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-15T12:35:09Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": null,
                "type": "License",
                "name": "Other",
                "url": null,
                "spdx_id": "NOASSERTION"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "FormatFuzzer is copyright (c) 2020 by CISPA Helmholtz Center for Information Security. The following licenses apply:\n\n* _The FormatFuzzer code_ (notably, all C++ code and code related to its generation) is subject to the GNU GENERAL PUBLIC LICENSE, as found in [COPYING](COPYING).\n\n* As an exception to the above, _C++ code generated by FormatFuzzer_ (i.e., fuzzers and parsers for specific formats) is in the public domain.\n\n* _The original pfp code_, which FormatFuzzer is based upon, is subject to a MIT license, as found in [LICENSE-pfp](LICENSE-pfp).\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/LICENSE"
        },
        {
            "result": {
                "value": "FormatFuzzer is Copyright &copy; 2020, 2021 by [CISPA Helmholtz Center for Information Security](https://cispa.de/). The following licenses apply:\n\n* _The FormatFuzzer code_ (notably, all C++ code and code related to its generation) is subject to the GNU GENERAL PUBLIC LICENSE, as found in [COPYING](COPYING).\n\n* As an exception to the above, _C++ code generated by FormatFuzzer_ (i.e., fuzzers and parsers for specific formats) is in the public domain.\n\n* _The original_ [pfp](https://github.com/d0c-s4vage/pfp) _code_, which FormatFuzzer is based upon, is subject to an MIT license, as found in [LICENSE-pfp](LICENSE-pfp).\n",
                "type": "Text_excerpt",
                "original_header": "Copyright and Licenses",
                "parent_header": [
                    "FormatFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "description": [
        {
            "result": {
                "value": "FormatFuzzer is a framework for high-efficiency, high-quality generation and parsing of binary inputs.",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "`FormatFuzzer` is a framework for *high-efficiency, high-quality generation and parsing of binary inputs.*\nIt takes a *binary template* that describes the format of a binary input and generates an *executable* that produces and parses the given binary format.\nFrom a binary template for GIF, for instance, `FormatFuzzer` produces a GIF generator - also known as *GIF fuzzer*. \nGenerators produced by `FormatFuzzer` are highly efficient, producing thousands of valid test inputs per second - in sharp contrast to mutation-based fuzzers, where the large majority of inputs is invalid. Inputs generated by `FormatFuzzer` are independent from the program under test (or actually, any program), so you can also use them in black-box settings. However, `FormatFuzzer` also integrates with AFL++ to produce valid inputs that also aim for maximum coverage. In our experiments, this \"best of two worlds\" approach surpasses all other settings; see [our paper](https://arxiv.org/abs/2109.11277) for details. \n",
                "original_header": "FormatFuzzer"
            },
            "confidence": 0.9036729867639661,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In this section, we discuss some of the ways in which you can customize `.bt` files to work well with `FormatFuzzer`. \nFor GIF generation, however, it is better to specify the set of good known values for `ReadUByte()` individually at each call to the function. So we define an empty array (size 0)\n```\nconst local UBYTE ReadUByteInitValues[0];\n```\nto overwrite the set of global `ReadUByteInitValues` and for each call to `ReadUByte()`, we use an additional argument to specify the set of good values to use for that particular location.\nThe binary template language is also powerful enough to allow this choice to be made based on runtime conditions. For example, in the following code we show how the choice of appropriate values for a `ReadUByte()` call can depend on the current GIF version we are generating. A GIF version `89a` allows one extra possible value for the byte (0x21).\nBASH4* \n",
                "original_header": "Creating and Customizing Binary Templates"
            },
            "confidence": 0.9738412979379412,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "For debugging purposes, as well as for understanding how to make appropriate changes to improve your generators and parsers, it may be useful to understand some inner workings of the generated C++ code.\nIdeally, you should be able to edit the binary template files until they can be used to generate valid files with high probability, so you wouldn't have to edit the generated C++ code. \nAt construction time, when initializing a variable, we can define a set of good known values that this variable can assume. For example, the constructor call\n```\nchar_array_class cname(cname_element, { \"IHDR\", \"tEXt\", \"PLTE\", \"cHRM\", \"sRGB\", \"iEXt\", \"zEXt\", \"tIME\", \"pHYs\", \"bKGD\", \"sBIT\", \"sPLT\", \"acTL\", \"fcTL\", \"fdAT\", \"IHDR\", \"IEND\" });\n```\nwould specify 17 good values to use for variable `cname`. But this is often not enough, since the choice of appropriate chunk types is context sensitive.\nSo we also allow specifying a set of good values at generation time when generating a new chunk.\nFor example, this call could be used to generate an instance of `chunk` for the first chunk, which must have type IHDR.\nBASH2*\nWhen generating the second chunk, we might use this long list of possible chunks that can come between the IHDR chunk and the PLTE chunk:\nBASH3*\nThe generator will then uniformly pick one of the good known values to use for the new instance. We also allow the choice of an evil value which is not one of the good known values with small probability 1/128.\nThis feature can be enabled or disabled any time by using the method `set_evil_bit`. \n",
                "original_header": "Understanding the Generated C++ Code"
            },
            "confidence": 0.9617974303093038,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "name": [
        {
            "result": {
                "value": "FormatFuzzer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "uds-se/FormatFuzzer",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/uds-se/FormatFuzzer/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/uds-se/FormatFuzzer/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 395,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "binary, fuzzer, fuzzing, inputs, parsing, testing",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 31,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/uds-se/FormatFuzzer/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 537659
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 288788
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 47796
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 26782
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "M4",
                "name": "M4",
                "type": "Programming_language",
                "size": 21282
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/uds-se/FormatFuzzer/releases/52227280",
                "tag": "v1.0",
                "name": "FormatFuzzer 1.0 (Public Release)",
                "author": {
                    "name": "RafaelTupynamba",
                    "type": "User"
                },
                "description": "First Public Release of FormatFuzzer version 1.0.\r\n\r\nBy @RafaelTupynamba @vrthra @andreas-zeller ",
                "tarball_url": "https://api.github.com/repos/uds-se/FormatFuzzer/tarball/v1.0",
                "zipball_url": "https://api.github.com/repos/uds-se/FormatFuzzer/zipball/v1.0",
                "html_url": "https://github.com/uds-se/FormatFuzzer/releases/tag/v1.0",
                "url": "https://api.github.com/repos/uds-se/FormatFuzzer/releases/52227280",
                "release_id": 52227280,
                "date_created": "2021-10-27T15:13:25Z",
                "date_published": "2021-10-28T11:57:37Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/bmp.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/png.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/zip.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/jpg.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/wav.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/avi.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/mp4.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/zipadv.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/pcap.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/midi.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/checkers/gif.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/uds-se/FormatFuzzer/tree/master/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "FormatFuzzer is available from the [FormatFuzzer project page](https://github.com/uds-se/FormatFuzzer). You can download and unpack the latest release from [the releases page](https://github.com/uds-se/FormatFuzzer/releases).\n\nFor the very latest and greatest, you can also clone its git repository:\n```\ngit clone https://github.com/uds-se/FormatFuzzer.git\n```\nAll further actions take place in its main folder:\n```\ncd FormatFuzzer\n```\n",
                "type": "Text_excerpt",
                "original_header": "Getting",
                "parent_header": [
                    "FormatFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "To run FormatFuzzer, you need the following:\n* Python 3\n* A C++ compiler with GNU libraries (notably `getopt_long()`) such as `clang` or `gcc`\n* The Python packages `py010parser`, `six`, and `intervaltree`\n* A `zlib` library (for compression functions)\n* A `boost` library (for checksum functions)\n\nIf you plan to edit the build and configuration scripts (`.ac` and `.am` files), you will also need\n* GNU autoconf\n* GNU automake\n",
                "type": "Text_excerpt",
                "original_header": "Prerequisites",
                "parent_header": [
                    "FormatFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "```\nsudo apt install git g++ make automake python3-pip zlib1g-dev libboost1.71-dev\npip3 install py010parser six intervaltree\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installing Requirements on Linux (Debian Packages)",
                "parent_header": [
                    "FormatFuzzer",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "```\nxcode-select --install\nbrew install python3 automake boost\npip3 install py010parser six intervaltree\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installing Requirements on MacOS (with Xcode &amp; Homebrew)",
                "parent_header": [
                    "FormatFuzzer",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "```\nsudo apt install git g++ make automake python3-pip zlib1g-dev libboost1.71-dev\npip3 install py010parser six intervaltree\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installing Requirements on Linux (Debian Packages)",
                "parent_header": [
                    "FormatFuzzer",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "```\nxcode-select --install\nbrew install python3 automake boost\npip3 install py010parser six intervaltree\n```\n",
                "type": "Text_excerpt",
                "original_header": "Installing Requirements on MacOS (with Xcode &amp; Homebrew)",
                "parent_header": [
                    "FormatFuzzer",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "On all systems, using `pip`:\n```\npip install py010parser\npip install six\npip install intervaltree\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Installing Python Packages Only (All Operating Systems)",
                "parent_header": [
                    "FormatFuzzer",
                    "Prerequisites"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "If the above `make` method does not work, or if you want more control, you may have to proceed manually.\n",
                "type": "Text_excerpt",
                "original_header": "Method 3: Manual steps",
                "parent_header": [
                    "FormatFuzzer",
                    "Building"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "Run the `ffcompile` compiler to compile the binary template into C++ code. It takes two arguments: the `.bt` binary template, and a `.cpp` C++ file to be generated.\n```\n./ffcompile templates/gif.bt gif.cpp\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Step 1: Compiling Binary Template Files into C++ code",
                "parent_header": [
                    "FormatFuzzer",
                    "Building",
                    "Method 3: Manual steps"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "Use the following commands to create a fuzzer `gif-fuzzer`.\nFirst, compile the generic command-line driver:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall fuzzer.cpp\n```\n(`-I .` denotes the location of the `bt.h` file; `-std=c++17` sets the C++ standard.)\n\nThen, compile the binary parser/compiler:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall gif.cpp\n```\n\nFinally, link the binary parser/compiler with the command-line driver to obtain an executable. If you use any extra libraries (such as `-lz`), be sure to specify these here too.\n```\ng++ -O3 gif.o fuzzer.o -o gif-fuzzer -lz\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Step 2: Compiling the C++ code",
                "parent_header": [
                    "FormatFuzzer",
                    "Building",
                    "Method 3: Manual steps"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Note: all building commands require you to be in the same folder as this `README` file. Building a fuzzer outside of this folder is not yet supported.\n \n",
                "original_header": "Building"
            },
            "confidence": 0.996621661612245,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "There's a `build.sh` script which automates all construction steps.\nSimply run\n```\n./build.sh gif\n```\nto create a GIF fuzzer. \nThis works for all file formats provided in `templates/`; if there is a file `templates/FOO.bt`, then `./build.sh FOO` will build a fuzzer. \n",
                "original_header": "Method 1: Using the build.sh script"
            },
            "confidence": 0.9940856493583853,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "There's a `Makefile` (source in `Makefile.am`) which automates all construction steps.\n(Requires `GNU make`.)\nFirst do\n```\ntouch configure Makefile.in\n```\nthen\nBASH2*\nand then\nBASH3*\nto create a GIF fuzzer. \n",
                "original_header": "Method 2: Using Make"
            },
            "confidence": 0.9808698679011718,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "In addition to the format-specific fuzzers, such as `gif-fuzzer`, FormatFuzzer can also be compiled into format-specific shared libraries, such as `gif.so` (for that, simply run `./build.sh gif` or `make gif.so`).\nThose shared libraries can be loaded by general-purpose fuzzers, such as [AFL++](https://github.com/AFLplusplus/AFLplusplus). \nTo run AFL++ with FormatFuzzer, just follow the instructions on [our modified version of AFL++](https://github.com/uds-se/AFLplusplus).\nWe support different fuzzing strategies, including: \n",
                "original_header": "AFL++ Integration"
            },
            "confidence": 0.9692254062438235,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If you have created a `gif-fuzzer`, either by running `make gif-fuzzer` or by using the `ffcompile` tool, you have already obtained a C++ file `gif.cpp` which contains an implementation of the GIF generator and parser. This is useful to see how the changes you make to the binary template are translated into executable code. More details on the C++ code are presented on the next section. \n",
                "original_header": "Creating and Customizing Binary Templates"
            },
            "confidence": 0.999702534310247,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "run": [
        {
            "result": {
                "value": "FormatFuzzer can be run as a standalone parser, generator or mutator of specific formats.\nIn addition, it can called by general-purpose fuzzers such as [AFL++](https://github.com/uds-se/AFLplusplus) to integrate those format-specific capabilities into the fuzzing process (see the section below on AFL++ integration).\n\nThe generated fuzzer takes a _command_ as first argument, followed by options and arguments to that command.\n\nThe most important command is `fuzz`, for producing outputs.  Its arguments are files to be generated in the appropriate format.\n\nRun the generator as\n```\n./gif-fuzzer fuzz output.gif\n```\nto create a random binary file `output.gif`, or\n```\n./gif-fuzzer fuzz out1.gif out2.gif out3.gif\n```\nto create three GIF files `out1.gif`, `out2.gif`, and `out3.gif`.\n\nNote that the `gif.bt` template we provide has been augmented with special functions to make generation of valid files easier. If you use an original `.bt` template files without adaptations, you may get warnings during generation and create invalid files.\n\n",
                "type": "Text_excerpt",
                "original_header": "Running the Fuzzer",
                "parent_header": [
                    "FormatFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        },
        {
            "result": {
                "value": "You can also run the fuzzer as a _parser_ for binary files, using the `parse` command. This is useful if you want to test the accuracy of the binary template, or if you want to mutate an input (see `Decision Files', below).\n\nTo run the parser, use\n```\n./gif-fuzzer parse input.gif\n```\nYou will see error messages if `input.gif` cannot be successfully parsed.\n\n",
                "type": "Text_excerpt",
                "original_header": "Running Parsers",
                "parent_header": [
                    "FormatFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "FormatFuzzer"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2109.11277"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
        }
    ]
}