{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:49:24"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/IBM/Project_CodeNet",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "IBM",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-05-03T02:51:25Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-30T20:23:38Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "This repository is to support contributions for tools for the Project CodeNet dataset hosted in DAX",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "A decade ago, Marc Andreessen [famously wrote](https://a16z.com/2011/08/20/why-software-is-eating-the-world/) that \"software is eating the world.\" Software now permeates every part of our existence; Google services combine for [2 billion lines of code](https://www.wired.com/2015/09/google-2-billion-lines-codeand-one-place/), and a modern vehicle [contains around](https://www.technologyreview.com/2012/12/03/181350/many-cars-have-a-hundred-million-lines-of-code/) 100 million lines of code. It's a monumental challenge to create, debug, maintain, and update these complex software systems. Recently, a fast-growing discipline known as AI for Code aims to help software developers improve their productivity by automating the software engineering process. AI for Code researchers have been leveraging technologies like NLP and augmenting them with code analysis and compilation techniques to perform a myriad of practical tasks, such as code search, summarization, and completion, as well as code-to-code translation. The discipline isn't limited to academic research either: Ruchir Puri, IBM Research's chief research scientist, discussed in a recent [podcast](https://open.spotify.com/episode/7gHPbVBHEgSdrACTow7Gql) how technologies from AI for Code are being used to modernize legacy software by helping migrate monolithic applications to microservices for IBM's enterprise clients.\n\nAI for Code is poised to transition from proof-of-concept to widespread adoption. To provide a catalyst for such a tipping point, researchers at IBM Research have introduced Project CodeNet, a large-scale dataset for benchmarking and experimentation. Project CodeNet has many characteristics (large scale, diveristy, etc.) similar to ImageNet, a huge dataset for imagery that had a dramatic impact on the field of computer vision research. Project CodeNet is a large scale dataset with approximately 14 million code samples, each of which is an intended solution to one of 4000 coding problems. Project CodeNet aims to do for AI for Code what ImageNet did for computer vision.\n",
                "type": "Text_excerpt",
                "original_header": "Introduction",
                "parent_header": [
                    "Project CodeNet"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "There are a few differentiating features of Project CodeNet when compared to other similar efforts. In addition to the size of the dataset, the code samples are written in over 50 programming languages, though the dominant languages are C++, C, Python, and Java. The code samples in Project CodeNet are annotated with a rich set of information, such as the code size, memory footprint, CPU run time, and status, which indicates acceptance or error types. Over 90% of the problems come with the respective problem description, which contains a concise problem statement, specification of the input format and the output format. When available, we also extracted from the problem description sample input and output, and provide them as part of the dataset. Users can execute the accepted codes samples (over 50% of the submissions are accepted) to extract additional metadata and verify outputs from generative AI models for correctness.\n\nAnother area that Project CodeNet addressed is the quality of the data samples. From a [paper](https://arxiv.org/pdf/1812.06469.pdf) by Allamanis, we learned that quite a large number of frequently used AI for Code datasets have duplicate or near-duplicate code samples, which can inflate performance metrics as much as 100%. In addition, we found that problem-submission style datasets from online judging systems can contain clusters of identical problems, which will certainly skew the performance metrics. One example is [POJ-104](https://sites.google.com/site/treebasedcnn/), in which problems 26 and 62 are identical. Therefore we identified the near-duplicates and the identical problem clusters in Project CodeNet and provide these information for the benefit of the users.\n",
                "type": "Text_excerpt",
                "original_header": "Differentiation",
                "parent_header": [
                    "Project CodeNet",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "In light of these issues, we have extracted several benchmark datasets from CodeNet for users to perform code classification and code similarity experiments. They have been filtered to remove identical problem clusters and near-duplicate code samples, so that performance metrics can be measured on training and test data samples with the appropriate statistics. There are two C++ benchmark datasets that are similar to the popular POJ-104 but are approximately ten times in size. We felt that the size increase is necessary, since [98% accuracy](https://github.com/zhangj111/astnn) has been already achieved in code classification on POJ-104. An order of magnitude larger dataset will leave ample room to advance the state of the art with more complex neural networks and algorithms. The other two benchmark datasets are in Python and Java, which provides a different flavor because the frequent use of library functions.\n",
                "type": "Text_excerpt",
                "original_header": "Benchmarks",
                "parent_header": [
                    "Project CodeNet",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "To facilitate creation of customized benchmarks and dataset, we provide a set of productivity tools to aggregate codes samples based on user criteria. We are also releasing pre-processing tools to transform code samples into [token sequences](tools/tokenizer), [simplified parse trees](tools/spt-generator) and other [code graphs](tools/analysis-graph-generator).\n",
                "type": "Text_excerpt",
                "original_header": "Usability",
                "parent_header": [
                    "Project CodeNet",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "For the vast majority of problem classes, short problem descriptions are available in\n'doc/problem_descriptions.tar.gz', a small html file for each problem. \n",
                "type": "Text_excerpt",
                "original_header": "Problem Descriptions",
                "parent_header": [
                    "Project CodeNet"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The goal of Project CodeNet is to provide the *AI-for-Code* research community with a large scale, diverse, and high quality curated dataset to drive innovation in AI techniques. \n \n",
                "original_header": "Project CodeNet"
            },
            "confidence": 0.9772463073407819,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The first step in constructing Project CodeNet is downloading the problem descriptions and the source code submissions from the websites mentioned above, followed by reshaping and consolidating the metadata and cleaning up the inconsistencies, omissions, and\nmistakes in the source data itself.\n \n",
                "original_header": "Dataset overview"
            },
            "confidence": 0.9083109321579602,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The dataset comprises 13,916,868 submissions, divided into 4053 problems (of which 5 are empty). Of the submissions 53.6% (7,460,588) are *accepted*, 29.5% are marked as *wrong answer* and the remaining suffer from one of the possible rejection causes. The data contains submissions in 55 different languages, although 95% of them are coded in the six most common languages (C++, Python, Java, C, Ruby, C#). C++ is the most common language with 8,008,527 submissions (57% of the total) of which 4,353,049 are *accepted*. Here are 2 pie charts depicting submissions and status distribution of Project CodeNet. \n## Data \n",
                "original_header": "Data"
            },
            "confidence": 0.9645207808676419,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The metadata provides properties of interest about the problems and their submissions. Foremost it formalizes the organization of the data and the relationship between problems, languages, and the source code files. The metadata allows for queries about the data and to make specific selections among the large collection of problems, languages, and source files. \nMetadata is made available in comma-separated value (CSV) files. This allows for easy processing, even with simple command-line tools. Some of the fields in the csv files might be empty, and for submissions that are not accepted, some fields might have invalid entries such as negative numbers for CPU time. Extra checking needs to be implemented in parsing these files. \n",
                "original_header": "Metadata"
            },
            "confidence": 0.9746304951894801,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "At the dataset level there is a single CSV file (`problem_list.csv`) listing all the different problems. Additionally, for each problem there is a more extensive description that sets the problem and any further requirements and constraints and often provides examples of data input and expected output. \n",
                "original_header": "Metadata at the dataset level"
            },
            "confidence": 0.931326274851204,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The data and metadata are organized in a rigorous directory structure. At the top level sits the `Project CodeNet` directory with several sub-directories, `data`, `metadata`, and `problem_descriptions`: \n    The name of the directory for a programming language is the common name for the language using proper capitalization and special characters. This name is the consolidation of the names used in the metadata. Information is available about how the original language designations are mapped into the directory names and how these more general and common names are mapped to the submission file name extensions. As an example, a source could be designated c++14, which is mapped into the directory `C++` (notice the capital C) and will get the extension `.cpp`.\n- `derived` holds information about near-duplicates, identical problem clusters, sample input and output for each problem, as well as the benchmarks. \n- `metadata` holds all the problem CSV files and the `problem_list.csv` file.\n- `problem_descriptions` holds HTML files for most problems, giving an extensive description of the problem, often accompanied with some sample input and expected output. \nFor the sake of creating a uniform set of metadata across all data sources, and to hide any sensitive information, some metadata fields are anonymized by randomly (but uniquely and consistently) renumbering problem, submission, and user identifiers (ids). The identifiers we use are defined by simple regular expressions: \n",
                "original_header": "Directory structure and naming convention"
            },
            "confidence": 0.9516232712969583,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The source files of Project CodeNet represent examples of some 50+ different programming and scripting languages. Of course not all languages are equally represented: most submissions are written in the more popular languages C, C++, Java, and Python. \n",
                "original_header": "Tools to process source files"
            },
            "confidence": 0.9440277592257968,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "As described above, it should be easy to create specific subsets of the\ndataset merely by copying (or symlinking) relevant files and/or\ndirectories. For more elaborate selections based on a subset or range of\nproblems, a subset of languages, statuses, and code sizes, several Bash\nscripts are available to accomplish that. These scripts reside in the\n`tools/aggregation-scripts` directory and are separately documented in this [README](tools/aggregation-scripts/README.md).\n \n",
                "original_header": "Access and selection"
            },
            "confidence": 0.9640112363757762,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We provide tools to convert code samples into a representation that can be consumed by AI algorithms\n  - generate stream of tokens [tokenizer](tools/tokenizer)\n  - parsing to tree/abstract syntax tree [AST generation](tools/spt-generator) \n  - control and data flow graph construction [code analysis](tools/analysis-graph-generator)  \nWhether and to what extent the above steps can successfully be applied to any given source file depends on several factors. Obviously, if the submission is not of `Accepted` status, it is to be expected that even simple tokenization will fail because of malformed lexical elements. But the situation for `Accepted` submissions is not always better: programmers might have used certain non-standard features of the language that happen to be accepted by a certain compiler or interpreter. Simple cases are the use of a dollar sign as part of a C identifier. For languages like C and C++ that use a pre-processor, use of macros and conditional defines can hugely change how the code ultimately looks like.\n \n",
                "original_header": "Pre-processing"
            },
            "confidence": 0.9686604676637944,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "Project_CodeNet",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "IBM/Project_CodeNet",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/IBM/Project_CodeNet/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/IBM/Project_CodeNet/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 1536,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 192,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/IBM/Project_CodeNet/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 509878
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "ANTLR",
                "name": "ANTLR",
                "type": "Programming_language",
                "size": 385094
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 262881
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 209108
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 127045
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 77344
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Awk",
                "name": "Awk",
                "type": "Programming_language",
                "size": 22455
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 20796
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 3946
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "jq",
                "name": "jq",
                "type": "Programming_language",
                "size": 1135
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 563
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/IBM/Project_CodeNet/releases/43650271",
                "tag": "initial",
                "name": "Initial release 1.0 (May 5, 2021)",
                "author": {
                    "name": "geert56",
                    "type": "User"
                },
                "tarball_url": "https://api.github.com/repos/IBM/Project_CodeNet/tarball/initial",
                "zipball_url": "https://api.github.com/repos/IBM/Project_CodeNet/zipball/initial",
                "html_url": "https://github.com/IBM/Project_CodeNet/releases/tag/initial",
                "url": "https://api.github.com/repos/IBM/Project_CodeNet/releases/43650271",
                "release_id": 43650271,
                "date_created": "2021-05-26T19:06:54Z",
                "date_published": "2021-05-26T19:14:37Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/class/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/sim/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/python800/tokenize/tokenize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/class/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/sim/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/java250/tokenize/tokenize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/class/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/sim/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1400/tokenize/tokenize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/class/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/bagtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/bagtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/bagtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/seqtok/verify_ds.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/seqtok/train.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/sim/seqtok/eval.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/token-based-similarity-classification/run/cpp1000/tokenize/tokenize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/gnn-based-experiments/setup.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/model-experiments/gnn-based-experiments/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/spt-generator/scripts/build/gen_g4.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/spt-generator/scripts/build/compile.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/spt-generator/scripts/run/spt-gen.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/spt-generator/scripts/run/tokenize.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/tokenizer/tokml-test.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/post_fdupes.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/project_codenet_aggregate.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/project_codenet_submissions.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/dataset_verify.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/callgraph_aux.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/callgraph.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/aggregation-scripts/callees.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/src/main/scripts/subset.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/src/main/scripts/wala_node.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/src/main/scripts/run.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/src/main/scripts/wala1k.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/analysis-graph-generator/src/main/scripts/convert_dir.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/tools/duplicates/dup_graph.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/Container/start_container.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/Container/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/Container/Dockerfile"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/notebooks/Project_CodeNet_LangClass.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/notebooks/Project_CodeNet_LangClass.ipynb"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/notebooks/Project_CodeNet_MLM.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/notebooks/Project_CodeNet_MLM.ipynb"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "The rich metadata and diversity open Project CodeNet to a plethora of uses cases. The problem-submission relationship in Project CodeNet corresponds to [type-4 similarity](https://escholarship.org/uc/item/45r2308g) and can be used for code search and clone detection. The code samples in Project CodeNet are labeled with their acceptance status and we can explore AI techniques to distinguish correct codes from problematic ones. Project CodeNet's metadata also enables the tracking of how a submission evolves from problematic to accepted, which could be used for exploring automatic code correction. Each code sample is labeled with CPU run time and  memory footprint, which can be used for regression studies and prediction. Given  its wealth of programs written in a multitude of languages, Project CodeNet may serve as a valuable benchmark dataset for source-to-source translation.\n",
                "type": "Text_excerpt",
                "original_header": "Potential use cases",
                "parent_header": [
                    "Project CodeNet",
                    "Introduction"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "Starting at a CSV metadata entry for a particular submission, here is how to get to the corresponding source file. Say that the submission id is `s300682070`. Either we know this is a submission to problem `p00001` upfront or we can grep through all `Project_CodeNet/metadata/p?????.csv` files to learn that. We get a brief description of this problem by looking at the `p00001` entry in the `Project_CodeNet/metadata/problem_list.csv`:\n\n```console\np00001,List of Top 3 Hills,AIZU,1000,131072,,,\n```\n\nWe can get a more verbose description of this problem by reading `Project_CodeNet/problem_descriptions/p00001.html`.\n\nThe `Project_CodeNet/metadata/p00001.csv` file provides the info on all submissions. For our selected submission we find:\n\n```console\ns300682070,p00001,u558442027,1480319506,JavaScript,JavaScript,js,Accepted,60,15496,219,4/4\n```\n\nWe see it is an `Accepted` submission in the language `JavaScript` with file extension `.js`.\n\nThe source file path therefore is: `Project_CodeNet/data/p00001/JavaScript/s300682070.js`\n",
                "type": "Text_excerpt",
                "original_header": "Example of getting the source file for a particular submission",
                "parent_header": [
                    "Project CodeNet",
                    "Relationships among the metadata and data"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "Likewise, we can play the reverse game of finding the metadata entry for a given submission source file. Say the source file is `Project_CodeNet/data/p00001/JavaScript/s300682070.js`.\n\nEncoded in this file name path we see the problem id `p00001` and language `JavaScript` and of course the submission id `s300682070`. We find the metadata CSV file to be: `Project_CodeNet/metadata/p00001.csv`. Opening that file and searching for the submission id we find the entry:\n\n```console\ns300682070,p00001,u558442027,1480319506,JavaScript,JavaScript,js,Accepted,60,15496,219,4/4\n```\n",
                "type": "Text_excerpt",
                "original_header": "Example of getting the metadata for a particular source file",
                "parent_header": [
                    "Project CodeNet",
                    "Relationships among the metadata and data"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "For the vast majority of problem classes, short problem descriptions are available in\n'doc/problem_descriptions.tar.gz', a small html file for each problem. \n",
                "type": "Text_excerpt",
                "original_header": "Problem Descriptions",
                "parent_header": [
                    "Project CodeNet"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "value": "At the problem level there is a CSV file per problem and all content of these files is of course organized under one and the same header.\n\nThe fields and their format of this CSV file are captured by the following table:\n\nname of column | data type | unit | description\n-- | -- | -- | --\nsubmission_id | string | none | unique anonymized id of the submission\nproblem_id    | string | none | anonymized id of the problem\nuser_id       | string | none | anonymized user id of the submission\ndate          | int    | seconds | date and time of submission in the Unix timestamp format (seconds since the epoch)\nlanguage      | string | none | mapped language of the submission (ex: C++14 -> C++)\noriginal_language | string | none | original language specification\nfilename_ext  | string | none | extension of the filename that indicates the programming language used\nstatus        | string | none | acceptance status, or error type\ncpu_time      | int    | millisecond | execution time\nmemory        | int    | KB | memory used\ncode_size     | int    | bytes | size of the submission source code in bytes\naccuracy      | string | none | number of tests passed; *Only for AIZU\n\nHere is a table of all the possible status values. The \u201cabbreviation\u201d and \u201cnumeric code\u201d are sometimes seen in the original metadata on the websites; it is listed here for reference and completeness. These fields do not occur in the Project CodeNet metadata.\n\nstatus | abbreviation | numeric code\n-- | -- | --\nCompile Error          | CE  |  0\nWrong Answer           | WA  |  1\nTime Limit Exceeded    | TLE |  2\nMemory Limit Exceeded  | MLE |  3\nAccepted               | AC  |  4\nJudge Not Available    | JNA |  5\nOutput Limit Exceeded  | OLE |  6\nRuntime Error          | RE  |  7\nWA: Presentation Error | PE  |  8\nWaiting for Judging    | WJ  | \nWaiting for Re-judging | WR  | \nInternal Error         | IE  | \nJudge System Error     |     | \n",
                "type": "Text_excerpt",
                "original_header": "Metadata at the problem level",
                "parent_header": [
                    "Project CodeNet",
                    "Metadata"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "download": [
        {
            "result": {
                "value": "Download the full dataset in our [data repository](https://developer.ibm.com/data/project-codenet/).\n\n`tar -zxf Project_CodeNet_full.tar.gz`\nto uncompress and untar. The directory structure and how the code samples are organized are explained [here](README.md#directory-structure-and-naming-convention).\n\nThe 4 benchmark datasets, Project_CodeNet_C++1000, Project_CodeNet_C++1400,\nProject_CodeNet_Python800, and Project_CodeNet_Java250 are included in the\nfull dataset and are available separately in the \"Archive Dataset File\" column of the table in the \"Get this Dataset\" \nsection in our [data repository](https://developer.ibm.com/exchanges/data/all/project-codenet/). \nThey can be used for code classification and code similarity research as a replacement of or in addition to the dataset [POJ-104](https://sites.google.com/site/treebasedcnn/).\n\nTo expedite AI for code research using graph neural networks, we have included the simplified parse tree (SPT) representation of the code samples for each benchmark dataset. They are available in the \"Archive SPT File\" column of the table in the \"Get this Dataset\" section in our [data repository](https://developer.ibm.com/exchanges/data/all/project-codenet/).\n",
                "type": "Text_excerpt",
                "original_header": "Download the dataset",
                "parent_header": [
                    "Project CodeNet"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "contributors": [
        {
            "result": {
                "value": "Ruchir Puri, David S. Kung, Geert Janssen, Wei Zhang, Giacomo Domeniconi, Vladimir Zolotov, Julian Dolby, Jie Chen, Mihir Choudhury, Lindsey Decker, Veronika Thost, Luca Buratti, Saurabh Pujar, Shyam Ramji, Ulrich Finkler, Susan Malaika, Frederick Reiss.\n",
                "type": "Text_excerpt",
                "original_header": "Contributors",
                "parent_header": [
                    "Project CodeNet",
                    "Tools to process source files"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "identifier": [
        {
            "result": {
                "type": "Url",
                "value": "https://zenodo.org/badge/latestdoi/363800912"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Project CodeNet"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "related_documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://csvkit.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "logo": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/./assets/Project_CodeNet_subs.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/./assets/Project_CodeNet_status.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/1812.06469.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2105.12655"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/IBM/Project_CodeNet/main/README.md"
        }
    ]
}