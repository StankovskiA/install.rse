{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 00:55:00"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/xlab-uiuc/open-cevo",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "xlab-uiuc",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-01-11T19:17:50Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-05-09T12:38:18Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "description": [
        {
            "result": {
                "value": "configuration evolution dataset",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* `config_commits`: 1178 configuration evolution commits from a recent\n2.5 year (2017.06-2019.12) version control history of four large-scale open-source projects (HDFS, HBase, Spark, and\nCassandra). \n* `commit_analysis`: Studied commits with well-labeled categorizations and analysis results, organized based on the structure of the paper.\n* `code`: Python scripts for collecting raw commits that touch configuration.\n* `commit_study.md`: Documentation of the manual study methodology (analyzing raw commits and issues), including code snippet examples and descriptions for each category in Table II of the submission. \n \n",
                "original_header": "Artifacts for Configuration Evolution of Cloud Systems"
            },
            "confidence": 0.9654147382222528,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We provide the data that we studied in this paper. All the data sheets are in the format of CSV, with titles/labels as the first rows. Note that some labels are recorded for specific commits/parameters. (e.g. \"How to choose new value\" in `change_default_value.csv` is just for numeric parameters and we describe the reason in Section IV.B in the paper) \nHere is a mapping from the subsection of the paper to the data sheet (in the `commit_analysis` directory). \nWe also provide sheets for other categories for future study and reuse.\nThe script in `commit_analysis` is to count the numbers and generate the main tables in the paper: \n",
                "original_header": "1. Data Comprehension and Layout"
            },
            "confidence": 0.9503063149756082,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Besides the data in this paper, for future reuse and study, we also provide the script we use to collect the raw commits and a tutorial to show how we do the manual study of each raw commit.\n \n",
                "original_header": "2. Commit Collection and Analysis"
            },
            "confidence": 0.9699971458182353,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The detailed methodologies are described in the submitted paper. \nOne method of selecting configuration-related commits is to use regular expressions to capture configuation-related code patterns. For example, one of the regular expressions used for HDFS is: \n~~~\nHDFS_CONFIG_LOAD_FUNC_RE = '[a-zA-Z\\.\\_\\-]*[cC]onf[ig]*[\\(\\)]*[\\s]*[\\n]*[\\s]*\\.[\\s]*[\\n]*[\\s]*get[a-zA-Z]*\\([^;<>]+\\)'\n~~~ \nWe implement software-specific regular expressions which can be found in `diff_file_parser.py` in each software subdirectory. All the regular expressions are carefully crafted based on a pilot study of configuration-related commits of the target software projects.\n \n",
                "original_header": "2.1 Collect raw commits that touch configuration"
            },
            "confidence": 0.9333419419962995,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "open-cevo",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "xlab-uiuc/open-cevo",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/xlab-uiuc/open-cevo/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/xlab-uiuc/open-cevo/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 16,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "software-configuration-management, software-evolution, software-reliability",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/xlab-uiuc/open-cevo/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 144314
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "support": [
        {
            "result": {
                "value": "We validate, analyze and categorize each commit based on the commit log and diff, as well as the corresponding JIRA or GitHub Issues as described in the paper. Our categorization is based on the taxonomy of Figure 1 and Table II of the submission. This step currently is manually without program automation. We provide a [tutorial](https://github.com/xlab-uiuc/open-cevo/blob/main/commit_study.md) that contains concrete code examples for every category.\n\n**Note that one commit can touch several categories; we study it in each category.**\n\nWe also analyze JIRA issues or GitHub Pull Requests (PRs) that linked with each commit which provides more background and context information of the commit. \n\nAll the commits in our study are linked to JIRA issues or GitHub PRs. \n",
                "type": "Text_excerpt",
                "original_header": "2.2 Commit Study",
                "parent_header": [
                    "Artifacts for Configuration Evolution of Cloud Systems",
                    "2. Commit Collection and Analysis"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        },
        {
            "result": {
                "value": "We provide our script to select commits related to configuration, which can be reused for large-scale studies (e.g., longer time span). \n\nTo do so, please change the `url` in `code/'software'/commit_url.txt` to the corresponding commit you want to start with. Our script will crawl **oldler** commit based on this. For example, if you want to crawl commit of `HBase` before `Dec.25 2020`, one can do:\n   ```bash\n   echo \"https://github.com/apache/hbase/commits/master?before=0f868da05d7ffabe4512a0cae110ed097b033ebf+35&branch=master\" > code/hbase/commit_url.txt\n   ```\n",
                "type": "Text_excerpt",
                "original_header": "3.1 Extending our study to longer time span",
                "parent_header": [
                    "Artifacts for Configuration Evolution of Cloud Systems",
                    "3. Reusability"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        },
        {
            "result": {
                "value": "The main idea to select configuration related commits is using text-based regular expression matching. We show the regex we used in `diff_file_parser.py` in each\n`code/'software'` folder. One can reuse and tweak the scripts for other software projects. We suggest you to test the regex using [regex101](https://regex101.com).\n\n\nYou will need to modify:\n - ```bash\n   cd code\n   mkdir other_software\n   cp -r hbase/* other_software/\n   ```\n - change`commit_url.txt`, using the github commits page url of that software.\n - change the **regular expressions** global varaibles in diff_file_parser.py specific to the target software project.\n",
                "type": "Text_excerpt",
                "original_header": "3.2 Extending our study to other software projects",
                "parent_header": [
                    "Artifacts for Configuration Evolution of Cloud Systems",
                    "3. Reusability"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Please use python3 to install the dependencies and run the code(we use python 3.8.5). \n1. Install dependenceis\n~~~bash\npip3 install pathlib\npip3 install nltk\npip3 install beautifulsoup4\n~~~ \n3. Run  \n```bash\npython3 commit_selection.py\n``` \nto automtically select commits that touch configuration. The out put will be `commit_selected.txt` that has structured info for each selected commit, and the info contains hints that how this diff touches configuration. **By search those hints in the diff file, one can quickly locate/briefly understant the configuration change.** \n~~~\nHDFS-13607. [SBN read] Edit Tail Fast Path Part 1                                   //commit title\nhttps://github.com/apache/hadoop/commit/c81ac2ff0220b180cd6cbbf18221290c3783bfd5    //commit link\n2018-05-09T22:40:07Z                                                                //commit time\nCommit message touches config:False                                                 //whether commit message touch \"config\" keyword\nDiff touches config define:True                                                     //whether diff touches config define\nDiff touches config loading:True                                                    //whether diff touches config load\nDiff touches config setting:False                                                   //whether diff touches config set\nDiff touches config variable (data flow):True                                       //whether diff touches config variable\nDiff touches config message:False                                                   //whether diff touches message that have \"config\" keyword \nWe provide a [demo](https://github.com/xlab-uiuc/open-cevo/tree/main/code/hdfs_demo_examples) (The above case is in that demo) for all HDFS commit examples in [commit_study.md (tutorial)](https://github.com/xlab-uiuc/open-cevo/blob/main/commit_study.md), they are HDFS-13607, HDFS-12291, HDFS-12412, HDFS-11998, HDFS-12716, HDFS-11576 and HDFS-12603. Run `commit_selection.py` in `/code/hdfs_demo_examples` to see `commit_selected.txt` and the structured info for each commit.\n~~~bash\ncd code/hdfs_demo_examples\npython3 commit_selection.py\n~~~ \n",
                "original_header": "2.1 Collect raw commits that touch configuration"
            },
            "confidence": 0.9883667559207842,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Artifacts for Configuration Evolution of Cloud Systems"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/pdf/2102.07052.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/xlab-uiuc/open-cevo/main/README.md"
        }
    ]
}