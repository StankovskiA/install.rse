{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-04 01:05:30"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/GammaTauAI/opentau",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "GammaTauAI",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-09-02T05:41:01Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-17T00:46:14Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022 Federico Cassano, Noah Shinn\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/LICENSE"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Using Large Language Models for Repo-wide Type Prediction",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This has motivated automated type prediction: given an untyped program, produce a well-typed output program. Large language models (LLMs) are promising for type prediction, but there are challenges: fill-in-the-middle performs poorly, programs may not fit into the context window, generated types may not type check, and it is difficult to measure how well-typed the output program is. We address these challenges by building OpenTau, a search-based approach for type prediction that leverages large language models. We propose a new metric for type prediction quality, give a tree-based program decomposition that searches a space of generated types, and present fill-in-the-type fine-tuning for LLMs. We evaluate our work with a new dataset for TypeScript type prediction, and show that 47.4% of files type check (14.5% absolute improvement) with an overall rate of 3.3 type errors per file. \nAdditionally, we build two protocols for implementing additional languages and models.\nIn our work, we implement a TypeScript compiler that respects the protocol and a SantaCoder server that\nrespects the other protocol.\nAn optional OpenAI model endpoint also implements the protocol, but it is unmaintained and not recommended for use.\nImplementing the respective protocols is relatively straightforward. More information can be found in our [class final project submission](https://github.com/GammaTauAI/opentau/blob/main/docs/final_report.md) (as this work started as a class project for [CS 4100 at Northeastern University](https://www.khoury.northeastern.edu/home/sholtzen/assets/pdf/cs4100-fall22-syllabus.pdf)).\n \n",
                "original_header": "OpenTau: Using Large Language Models for Gradual Type Inference"
            },
            "confidence": 0.9652706580900816,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "opentau",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "GammaTauAI/opentau",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/GammaTauAI/opentau/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/GammaTauAI/opentau/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 95,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "ai, llm, openai, rust, type-inference, typescript",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 8,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/GammaTauAI/opentau/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Rust",
                "name": "Rust",
                "type": "Programming_language",
                "size": 138281
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "TypeScript",
                "name": "TypeScript",
                "type": "Programming_language",
                "size": 95831
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 37399
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "HTML",
                "name": "HTML",
                "type": "Programming_language",
                "size": 7974
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 695
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/GammaTauAI/opentau/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "```bibtex\n@misc{cassano2023type,\n      title={Type Prediction With Program Decomposition and Fill-in-the-Type Training}, \n      author={Federico Cassano and Ming-Ho Yee and Noah Shinn and Arjun Guha and Steven Holtzen},\n      year={2023},\n      eprint={2305.17145},\n      archivePrefix={arXiv},\n      primaryClass={cs.SE}\n}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Cite",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        },
        {
            "result": {
                "value": "@misc{cassano2023type,\n    primaryclass = {cs.SE},\n    archiveprefix = {arXiv},\n    eprint = {2305.17145},\n    year = {2023},\n    author = {Federico Cassano and Ming-Ho Yee and Noah Shinn and Arjun Guha and Steven Holtzen},\n    title = {Type Prediction With Program Decomposition and Fill-in-the-Type Training},\n}",
                "type": "Text_excerpt",
                "format": "bibtex",
                "title": "Type Prediction With Program Decomposition and Fill-in-the-Type Training",
                "author": "Federico Cassano and Ming-Ho Yee and Noah Shinn and Arjun Guha and Steven Holtzen"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "We have implemented an OpenTau in Rust, which can be utilized in three ways:\n\n1. As a simple CLI client that will type-infer a given program. (more info in `./client`)\n2. As a library, that exposes numerous abstractions for interacting with different compilers, models, and type prediction strategies. (more info in `./client`)\n3. As an evaluation tool, to analyze the performance of the combinations of different models, languages, datasets, and type prediction strategies\n   on the task of type prediction. (more info in `./evaluator`)\n\nWe are in the review process for our paper:\n[Type Prediction With Program Decomposition and Fill-in-the-Type Training. Federico Cassano, Ming-Ho Yee, Noah Shinn, Arjun Guha, Steven Holtzen.](https://arxiv.org/abs/2305.17145)\n",
                "type": "Text_excerpt",
                "original_header": "Usage",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        },
        {
            "result": {
                "value": "Our system was able to type-infer this program:\n\n```ts\nconst findAllPeople = function (n, meetings, firstPerson) {\n  meetings.sort((a, b) => a[2] - b[2]);\n  const uf = new UnionFind(n);\n  uf.connect(0, firstPerson);\n  let ppl = [];\n  for (let i = 0, len = meetings.length; i < len; ) {\n    ppl = [];\n    let time = meetings[i][2];\n    while (i < len && meetings[i][2] === time) {\n      uf.connect(meetings[i][0], meetings[i][1]);\n      ppl.push(meetings[i][0]);\n      ppl.push(meetings[i][1]);\n      i++;\n    }\n    for (let n of ppl) {\n      if (!uf.connected(0, n)) uf.reset(n);\n    }\n  }\n  let ans = [];\n  for (let i = 0; i < n; ++i) {\n    if (uf.connected(0, i)) ans.push(i);\n  }\n  return ans;\n};\n\nclass UnionFind {\n  arr;\n\n  constructor(n) {\n    this.arr = Array(n).fill(null);\n    this.arr.forEach((e, i, arr) => (arr[i] = i));\n  }\n  connect(a, b) {\n    this.arr[this.find(a)] = this.find(this.arr[b]);\n  }\n  find(a) {\n    return this.arr[a] === a ? a : (this.arr[a] = this.find(this.arr[a]));\n  }\n  connected(a, b) {\n    return this.find(a) === this.find(b);\n  }\n  reset(a) {\n    this.arr[a] = a;\n  }\n}\n```\n\nAnd annotate it with these types:\n\n```ts\nconst findAllPeople: (\n  n: number,\n  meetings: number[][],\n  firstPerson: number\n) => number[] = function (n, meetings, firstPerson) {\n  meetings.sort((a, b) => a[2] - b[2]);\n  const uf: UnionFind = new UnionFind(n);\n  uf.connect(0, firstPerson);\n  let ppl: number[] = [];\n  for (let i = 0, len = meetings.length; i < len; ) {\n    ppl = [];\n    let time: number = meetings[i][2];\n    while (i < len && meetings[i][2] === time) {\n      uf.connect(meetings[i][0], meetings[i][1]);\n      ppl.push(meetings[i][0]);\n      ppl.push(meetings[i][1]);\n      i++;\n    }\n    for (let n of ppl) {\n      if (!uf.connected(0, n)) uf.reset(n);\n    }\n  }\n  let ans: number[] = [];\n  for (let i = 0; i < n; ++i) {\n    if (uf.connected(0, i)) ans.push(i);\n  }\n  return ans;\n};\n\nclass UnionFind {\n  arr: number[];\n  constructor(n) {\n    this.arr = Array(n).fill(null);\n    this.arr.forEach((e, i, arr) => (arr[i] = i));\n  }\n  connect(a: number, b: number): void {\n    this.arr[this.find(a)] = this.find(this.arr[b]);\n  }\n  find(a: number): number {\n    return this.arr[a] === a ? a : (this.arr[a] = this.find(this.arr[a]));\n  }\n  connected(a: number, b: number): boolean {\n    return this.find(a) === this.find(b);\n  }\n  reset(a: number): void {\n    this.arr[a] = a;\n  }\n}\n```\n\nWhile TypeScript's type inference only managed to infer these types (too many `any`s and loose typing):\n\n```ts\nconst findAllPeople = function (n: number, meetings: any[], firstPerson: any) {\n  meetings.sort((a: number[], b: number[]) => a[2] - b[2]);\n  const uf = new UnionFind(n);\n  uf.connect(0, firstPerson);\n  let ppl = [];\n  for (let i = 0, len = meetings.length; i < len; ) {\n    ppl = [];\n    let time = meetings[i][2];\n    while (i < len && meetings[i][2] === time) {\n      uf.connect(meetings[i][0], meetings[i][1]);\n      ppl.push(meetings[i][0]);\n      ppl.push(meetings[i][1]);\n      i++;\n    }\n    for (let n of ppl) {\n      if (!uf.connected(0, n)) uf.reset(n);\n    }\n  }\n  let ans = [];\n  for (let i = 0; i < n; ++i) {\n    if (uf.connected(0, i)) ans.push(i);\n  }\n  return ans;\n};\n\nclass UnionFind {\n  arr: any[];\n\n  constructor(n: any) {\n    this.arr = Array(n).fill(null);\n    this.arr.forEach(\n      (e: any, i: string | number, arr: { [x: string]: any }) => (arr[i] = i)\n    );\n  }\n  connect(a: number, b: string | number) {\n    this.arr[this.find(a)] = this.find(this.arr[b]);\n  }\n  find(a: string | number) {\n    return this.arr[a] === a ? a : (this.arr[a] = this.find(this.arr[a]));\n  }\n  connected(a: number, b: number) {\n    return this.find(a) === this.find(b);\n  }\n  reset(a: string | number) {\n    this.arr[a] = a;\n  }\n}\n```\n\nNote that TypeScript's inference type annotated non let-bound arrow functions, while our system didn't. We believe that these functions should be left untyped, as the signature of the function that calls them should be typed, and TypeScript's type-inference should enforce those rules. Our system will not battle with TypeScript's type-inference, it will try to work alongside it. Additionally, our system will not perform any type-migrations, i.e. it will not change already defined types. This is to further enforce the coalition between our system and TypeScript's.\n",
                "type": "Text_excerpt",
                "original_header": "Example completion",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        },
        {
            "result": {
                "value": "Our system is able to fill out generic types.\n\n```ts\nvar sumFourDivisors = function (nums) {\n  let res = 0;\n\n  for (const e of nums) {\n    const set = helper(e);\n    if (set.size === 4) {\n      for (const i of set) res += i;\n    }\n  }\n\n  return res;\n\n  function helper(num) {\n    const set = new Set();\n    const r = ~~(Math.sqrt(num) + 1);\n    for (let i = 1; i < r; i++) {\n      if (num % i === 0) {\n        set.add(i);\n        set.add(num / i);\n      }\n    }\n    return set;\n  }\n};\n```\n\nto\n\n```ts\nvar sumFourDivisors: (nums: number[]) => number = function (nums) {\n  let res: number = 0;\n  for (const e of nums) {\n    const set: Set<number> = helper(e);\n    if (set.size === 4) {\n      for (const i of set) res += i;\n    }\n  }\n  return res;\n  function helper(num: number): Set<number> {\n    const set: Set<number> = new Set();\n    const r: number = ~~(Math.sqrt(num) + 1);\n    for (let i = 1; i < r; i++) {\n      if (num % i === 0) {\n        set.add(i);\n        set.add(num / i);\n      }\n    }\n    return set;\n  }\n};\n```\n\nwhile TypeScript's inference couldn't give us a type-checkable answer:\n\n```\n7:28 - error TS2365: Operator '+=' cannot be applied to types 'number' and 'unknown'.\n\n7       for (const i of set) res += i;\n                             ~~~~~~~~\n```",
                "type": "Text_excerpt",
                "original_header": "Another Example: Generics Inference",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference",
                    "Example completion"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "- `rust`\n- Incoder/SantaCoder model requirements:\n  - `torch`\n  - `tokenizers>=0.12`\n  - `transformers`\n- TypeScript compiler requirements:\n  - `ts-node`\n  - `tsc`\n- Python compiler requirements (Work in progress):\n  - `mypy` | `pyright` for static type checking\n  - `redbaron` for AST parsing with comments\n- `pandoc` ONLY for building the report\n",
                "type": "Text_excerpt",
                "original_header": "Requirements",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Run `make` while being in the directory\n\nThe output binary (symlinked) will be at `/out/client`\n",
                "type": "Text_excerpt",
                "original_header": "Installation",
                "parent_header": [
                    "OpenTau: Using Large Language Models for Gradual Type Inference"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "OpenTau: Using Large Language Models for Gradual Type Inference"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2305.17145"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
        }
    ]
}