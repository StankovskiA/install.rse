{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 21:22:37"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/lchen001/HAPI",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "lchen001",
                "type": "User"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2022-06-08T19:45:55Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2023-02-01T05:44:12Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/LICENSE"
        }
    ],
    "name": [
        {
            "result": {
                "value": "HAPI",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "lchen001/HAPI",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/lchen001/HAPI/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/lchen001/HAPI/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 16,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/lchen001/HAPI/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 30876
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 774
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "citation": [
        {
            "result": {
                "value": "cff-version: 1.2.0\nmessage: \"If you use this benchmark, please cite it as below.\"\nauthors:\n- family-names: Chen\n  given-names: Lingjiao\n- family-names: Eyuboglu\n  given-names: Sabri\n  orcid: \"https://orcid.org/0000-0002-8412-0266\"\n- family-names: Jin\n  given-names: Zhihua\n- family-names: R\u00e9\n  given-names: Christopher\n- family-names: Zaharia\n  given-names: Matei\n- family-names: Zou\n  given-names: James\ntitle: \"hapi\"\nversion: 1.0.0\ndoi: 10.5281/zenodo.1234\ndate-released: 2021-11-29\nurl: \"https://github.com/lchen001/HAPI\"\n",
                "type": "File_dump",
                "format": "cff"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/CITATION.cff"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "contributing_guidelines": [
        {
            "result": {
                "value": "# Contributing to hapi\n\nWe welcome contributions of all kinds: code, documentation, feedback and support. If\n you use hapi in your work (blogs posts, research, company) and find it\n  useful, spread the word!  \n  \nThis contribution borrows from and is heavily inspired by [Huggingface transformers](https://github.com/huggingface/transformers). \n\n## How to contribute\n\nThere are 4 ways you can contribute:\n* Issues: raising bugs, suggesting new features\n* Fixes: resolving outstanding bugs\n* Features: contributing new features\n* Documentation: contributing documentation or examples\n\n## Submitting a new issue or feature request\n\nDo your best to follow these guidelines when submitting an issue or a feature\nrequest. It will make it easier for us to give feedback and move your request forward.\n\n### Bugs\n\nFirst, we would really appreciate it if you could **make sure the bug was not\nalready reported** (use the search bar on Github under Issues).\n\nIf you didn't find anything, please use the bug issue template to file a Github issue.  \n\n\n### Features\n\nA world-class feature request addresses the following points:\n\n1. Motivation first:\n  * Is it related to a problem/frustration with the library? If so, please explain\n    why. Providing a code snippet that demonstrates the problem is best.\n  * Is it related to something you would need for a project? We'd love to hear\n    about it!\n  * Is it something you worked on and think could benefit the community?\n    Awesome! Tell us what problem it solved for you.\n2. Write a *full paragraph* describing the feature;\n3. Provide a **code snippet** that demonstrates its future use;\n4. In case this is related to a paper, please attach a link;\n5. Attach any additional information (drawings, screenshots, etc.) you think may help.\n\nIf your issue is well written we're already 80% of the way there by the time you\npost it.\n\n## Contributing (Pull Requests)\n\nBefore writing code, we strongly advise you to search through the existing PRs or\nissues to make sure that nobody is already working on the same thing. If you are\nunsure, it is always a good idea to open an issue to get some feedback.\n\nYou will need basic `git` proficiency to be able to contribute to\n`hapi`. `git` is not the easiest tool to use but it has the greatest\nmanual. Type `git --help` in a shell and enjoy. If you prefer books, [Pro\nGit](https://git-scm.com/book/en/v2) is a very good reference.\n\nFollow these steps to start contributing:\n\n1. Fork the [repository](https://github.com/lchen001/hapi) by\n   clicking on the 'Fork' button on the repository's page. \n   This creates a copy of the code under your GitHub user account.\n\n2. Clone your fork to your local disk, and add the base repository as a remote:\n\n   ```bash\n   $ git clone git@github.com:<your Github handle>/hapi.git\n   $ cd hapi\n   $ git remote add upstream https://github.com/lchen001/hapi.git\n   ```\n\n3. Create a new branch to hold your development changes:\n\n   ```bash\n   $ git checkout -b a-descriptive-name-for-my-changes\n   ```\n\n   **Do not** work on the `main` branch.\n\n4. hapi manages dependencies using [`poetry`](https://python-poetry.org). \nSet up a development environment with `poetry` by running the following command in\n a virtual environment:\n\n   ```bash\n   $ pip install poetry\n   $ poetry install\n   ```\nNote: in order to pass the full test suite (step 5), you'll need to install all extra in addition. \n```bash\n   $ poetry install --extras \"adversarial augmentation summarization text vision\"\n```\n5. Develop features on your branch.\n\n   As you work on the features, you should make sure that the test suite\n   passes:\n\n   ```bash\n   $ pytest\n   ```\n\n   hapi relies on `black` and `isort` to format its source code\n   consistently. After you make changes, autoformat them with:\n\n   ```bash\n   $ make autoformat\n   ```\n\n   hapi also uses `flake8` to check for coding mistakes. Quality control\n    runs in CI, however you should also run the same checks with:\n\n   ```bash\n   $ make lint\n   ```\n\n   If you're modifying documents under `docs/source`, make sure to validate that\n   they can still be built. This check also runs in CI. To run a local check\n   make sure you have installed the documentation builder requirements, by\n   running `pip install -r docs/requirements.txt` from the root of this repository\n   and then run:\n\n   ```bash\n   $ make docs\n   ```\n\n   Once you're happy with your changes, add changed files using `git add` and\n   make a commit with `git commit` to record your changes locally:\n\n   ```bash\n   $ git add modified_file.py\n   $ git commit\n   ```\n\n   Please write [good commit messages](https://chris.beams.io/posts/git-commit/).\n\n   It is a good idea to sync your copy of the code with the original\n   repository regularly. This way you can quickly account for changes:\n\n   ```bash\n   $ git fetch upstream\n   $ git rebase upstream/main\n   ```\n\n   Push the changes to your account using:\n\n   ```bash\n   $ git push -u origin a-descriptive-name-for-my-changes\n   ```\n   \n   You can use `pre-commit` to make sure you don't forget to format your code properly, \n   the dependency should already be made available by `poetry`.\n   \n   Just install `pre-commit` for the `hapi` directory,\n   \n   ```bash\n   $ pre-commit install\n   ```\n\n6. Once you are satisfied (**and the checklist below is happy too**), go to the\n   webpage of your fork on GitHub. Click on 'Pull request' to send your changes\n   to the project maintainers for review.\n\n7. It's ok if maintainers ask you for changes. It happens to core contributors\n   too! So everyone can see the changes in the Pull request, work in your local\n   branch and push the changes to your fork. They will automatically appear in\n   the pull request.\n   \n8. We follow a one-commit-per-PR policy. Before your PR can be merged, you will have to\n `git rebase` to squash your changes into a single commit.\n\n### Checklist\n\n0. One commit per PR.\n1. The title of your pull request should be a summary of its contribution;\n2. If your pull request addresses an issue, please mention the issue number in\n   the pull request description to make sure they are linked (and people\n   consulting the issue know you are working on it);\n3. To indicate a work in progress please prefix the title with `[WIP]`. These\n   are useful to avoid duplicated work, and to differentiate it from PRs ready\n   to be merged;\n4. Make sure existing tests pass;\n5. Add high-coverage tests. No quality testing = no merge.\n6. All public methods must have informative docstrings that work nicely with sphinx.\n\n\n### Tests\n\nA test suite is included to test the library behavior. \nLibrary tests can be found in the \n[tests folder](https://github.com/lchen001hapi/tree/main/tests).\n\nFrom the root of the\nrepository, here's how to run tests with `pytest` for the library:\n\n```bash\n$ make test\n```\n\nYou can specify a smaller set of tests in order to test only the feature\nyou're working on.\n\nPer the checklist above, all PRs should include high-coverage tests. \nTo produce a code coverage report, run the following `pytest`\n```\npytest --cov-report term-missing,html --cov=hapi .\n```\nThis will populate a directory `htmlcov` with an HTML report. \nOpen `htmlcov/index.html` in a browser to view the report. \n\n\n### Style guide\n\nFor documentation strings, hapi follows the \n[google style](https://google.github.io/styleguide/pyguide.html).",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/CONTRIBUTING.md"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/lchen001/HAPI/main/examples/01_hapi_intro.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/examples/01_hapi_intro.ipynb"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "In this section, we discuss how to download the database without the HAPI Python API. \n\nThe database is stored in a GCP bucket named [`hapi-data`](https://console.cloud.google.com/storage/browser/hapi-data). All model predictions are stored in [`hapi.tar.gz`](https://storage.googleapis.com/hapi-data/hapi.tar.gz) (Compressed size: `205.3MB`, Full size: `1.2GB`). \n    \nFrom the command line, you can download and extract the predictions with: \n```bash\n    wget https://storage.googleapis.com/hapi-data/hapi.tar.gz && tar -xzvf hapi.tar.gz \n```\nHowever, we recommend downloading using the Python API as described above. \n\n",
                "type": "Text_excerpt",
                "original_header": "\ud83d\udcbe  Manual Downloading"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "<div align=\"center\"><img src=\"https://raw.githubusercontent.com/lchen001/HAPI/main//docs/assets/datasets.b9bdb1e1.png\" height=\"470\" width=\"630\" ></div> \n",
                "original_header": "\ud83d\udca1 What is HAPI?"
            },
            "confidence": 0.997351767982998,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```bash\npip install \"hapi @ git+https://github.com/lchen001/hapi@main\"\n``` \n\n```python\n>> import hapi\n\n>> hapi.config.data_dir = \"/path/to/data/dir\" \n\n>> hapi.download()\n``` \n> You can permanently set the data directory by adding the variable `HAPI_DATA_DIR` to your environment. \nOnce we've downloaded the database, we can list the available APIs, datasets, and tasks with `hapi.summary()`. This returns a [Pandas DataFrame](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) with columns `task, dataset, api, date, path, cost_per_10k`. \n```python\n>> df = hapi.summary()\n``` \n",
                "original_header": "\u26a1\ufe0f Quickstart"
            },
            "confidence": 0.9858908884194899,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "If the dataset is not yet available through the Meerkat Dataset Registry, a `ValueError` will be raised containing instructions for manually downloading the dataset. For example:\n```python\n>> dp = hapi.get_dataset(\"cmd\")\n\nValueError: Data download for 'cmd' not yet available for download through the  HAPI Python API. Please download manually following the instructions below: \n \nCMD is a spoken command recognition dataset. \n\nIt can be downloaded here: https://pyroomacoustics.readthedocs.io/en/pypi-release/pyroomacoustics.datasets.google_speech_commands.html.\n```\n \n",
                "original_header": "\ud83c\udf0d Datasets"
            },
            "confidence": 0.9999999999976694,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "download": [
        {
            "result": {
                "value": "In this section, we discuss how to download the database without the HAPI Python API. \n\nThe database is stored in a GCP bucket named [`hapi-data`](https://console.cloud.google.com/storage/browser/hapi-data). All model predictions are stored in [`hapi.tar.gz`](https://storage.googleapis.com/hapi-data/hapi.tar.gz) (Compressed size: `205.3MB`, Full size: `1.2GB`). \n    \nFrom the command line, you can download and extract the predictions with: \n```bash\n    wget https://storage.googleapis.com/hapi-data/hapi.tar.gz && tar -xzvf hapi.tar.gz \n```\nHowever, we recommend downloading using the Python API as described above. \n\n",
                "type": "Text_excerpt",
                "original_header": "\ud83d\udcbe  Manual Downloading"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "History of APIs (HAPI) is a large-scale, longitudinal database of commercial ML API predictions. It contains 1.7 million predictions collected from 2020 to 2022 and spanning APIs from Amazon, Google, IBM, and Microsoft. The database include diverse machine learning tasks including image tagging, speech recognition and text mining. \n",
                "original_header": "\ud83d\udca1 What is HAPI?"
            },
            "confidence": 0.9686504204951515,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We provide a lightweight python package for getting started with HAPI.  \nTo load the predictions into memory we use `hapi.get_predictions()`. The keyword arguments allow us to load predictions for a subset of tasks, datasets, apis and/or dates. \n```python\n>> predictions =  hapi.get_predictions(task=\"mic\", dataset=\"pascal\", api=[\"google_mic\", \"ibm_mic\"])\n``` \n",
                "original_header": "\u26a1\ufe0f Quickstart"
            },
            "confidence": 0.942315009787,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "invocation": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "\n```python\n>> import hapi\n\n>> hapi.config.data_dir = \"/path/to/data/dir\" \n\n>> hapi.download()\n``` \n",
                "original_header": "\u26a1\ufe0f Quickstart"
            },
            "confidence": 0.9278810081428505,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": ""
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "related_documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://meerkat.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://pyroomacoustics.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/lchen001/HAPI/main/docs/assets/banner.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/lchen001/HAPI/main//docs/assets/datasets.b9bdb1e1.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://colab.research.google.com/assets/colab-badge.svg"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2209.08443"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/lchen001/HAPI/main/README.md"
        }
    ]
}