{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 19:49:50"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/seahorn/verify-c-common",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "seahorn",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2020-05-20T09:30:24Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-08-23T20:14:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "name": [
        {
            "result": {
                "value": "verify-c-common",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "seahorn/verify-c-common",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/seahorn/verify-c-common/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/seahorn/verify-c-common/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 15,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 14,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/seahorn/verify-c-common/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "C",
                "name": "C",
                "type": "Programming_language",
                "size": 531100
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "CMake",
                "name": "CMake",
                "type": "Programming_language",
                "size": 240324
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Jupyter Notebook",
                "name": "Jupyter Notebook",
                "type": "Programming_language",
                "size": 160182
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 40484
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 11757
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "C++",
                "name": "C++",
                "type": "Programming_language",
                "size": 1688
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "executable_example": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/experiment_results.ipynb",
                "type": "Url",
                "format": "jupyter_notebook"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/experiment_results.ipynb"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://colab.research.google.com/drive/1tr37scaF4zOrgAYHUBCYi5mk1vwKhF1n?usp=sharing"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "license": [
        {
            "result": {
                "value": "                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n(This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.)\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    {description}\n    Copyright (C) {year} {fullname}\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n    USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random\n  Hacker.\n\n  {signature of Ty Coon}, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/cmake/llvmir/LICENSE"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "The tool-specific builds for SeaHorn, KLEE and libFuzzer are containerized with docker for CI. You can also build these containers locally to replicate the verification results.\n",
                "type": "Text_excerpt",
                "original_header": "Experiment with docker",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/verify-c-common.Dockerfile`](docker/verify-c-common.Dockerfile).\n\nTo build and run all seahorn verification jobs:\n```\n$ docker build -t verify-c-common . --file docker/verify-c-common.Dockerfile\n$ docker run -t verify-c-common /bin/bash -c \"cd build && mkdir -p /tmp/verify-c-common && env VERIFY_FLAGS=\\\"<FLAGS>\\\" ctest -j<THREAD_NUM> --output-on-failure --timeout 2000\"\n```\nSet `<FLAGS>` to a space delimited string to specify flags for every verification job. For example set `<FLAGS>` to `--cex --horn-bmc-solver=smt-y2` will run every job under counter example mode and use [Yices 2](https://yices.csl.sri.com/) as the SMT solver instead of [z3](https://github.com/Z3Prover/z3). More details on verification options can be found in [a later section](#basic-verification-options). Set `<THREAD_NUM>` to a number suitable for your machine to run verification jobs in parallel.\n",
                "type": "Text_excerpt",
                "original_header": "SeaHorn",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/verify-c-common-smack.Dockerfile`](docker/verify-c-common-smack.Dockerfile).\n\nTo build and run all SMACK jobs:\n```\n$ docker build -t verify-c-common:smack . --file docker/verify-c-common-smack.Dockerfile\n$ docker run -t verify-c-common:smack /bin/bash -c \"cd build && ctest -R smack_ --timeout 2000\"\n```\n",
                "type": "Text_excerpt",
                "original_header": "SMACK",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/verify-c-common-symbiotic.Dockerfile`](docker/verify-c-common-symbiotic.Dockerfile).\n\nTo build and run all Symbiotic jobs:\n```\n$ docker build -t verify-c-common:symbiotic . --file docker/verify-c-common-symbiotic.Dockerfile\n$ docker run -t verify-c-common:symbiotic /bin/bash -c \"cd build && ctest -R symbiotic_ --timeout 5000\"\n```\n",
                "type": "Text_excerpt",
                "original_header": "Symbiotic",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/verify-c-common-klee.Dockerfile`](docker/verify-c-common-klee.Dockerfile).\n\nTo build and run all KLEE jobs:\n```\n$ docker build -t verify-c-common:klee . --file docker/verify-c-common-klee.Dockerfile\n$ docker run -t verify-c-common:klee /bin/bash -c \"cd build && ctest -R klee_ --timeout 2000\"\n```\n",
                "type": "Text_excerpt",
                "original_header": "KLEE",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/verify-c-common-fuzz.Dockerfile`](docker/verify-c-common-fuzz.Dockerfile).\n\nTo build and run all libFuzzer jobs:\n```\n$ docker build -t verify-c-common:fuzz . --file docker/verify-c-common-fuzz.Dockerfile\n$ docker run -t verify-c-common:fuzz /bin/bash -c \"cd build && ctest -R fuzz_ --timeout 2000\"\n```\n",
                "type": "Text_excerpt",
                "original_header": "libFuzzer",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Dockerfile: [`docker/aws-c-common.Dockerfile`](docker/aws-c-common.Dockerfile).\n\nTo build and run all aws-c-common jobs by cbmc:\n```\n$ docker build -t aws-c-common:latest . --file docker/aws-c-common.Dockerfile\n$ docker run -t aws-c-common:latest /bin/bash -c \"cd scripts && python3 run_aws_res.py\"\n```\nNote that, it will copy a python script [`run_aws_res.py`](scripts/run_aws_res.py) under the `scripts` folder in the container.\n",
                "type": "Text_excerpt",
                "original_header": "aws-c-common",
                "parent_header": [
                    "Installation",
                    "Experiment with docker"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "This is a common step for all other configurations.\n\n1. Clone [aws-c-common](https://github.com/awslabs/aws-c-common) project in the root directory of the project so that a\n   sub-directory `aws-c-common` is created\n   ```bash\n   $ git clone https://github.com/awslabs/aws-c-common\n   ```\n\n2. Configure `aws-c-common` as instructed, make sure to compile with `clang-14` so that fuzzing can work. Configure using the following commands:\n   ```bash\n   $ cd aws-c-common\n   $ mkdir build\n   $ cd build\n   $ cmake \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n   -DCMAKE_INSTALL_PREFIX=$(pwd)/run ../ -GNinja\n   ```\n\n3. Build `aws-c-common` library:\n   ```bash\n   $ cmake --build . --target install\n   ```\n   or\n   ```bash\n   $ ninja install\n   ```\n",
                "type": "Text_excerpt",
                "original_header": "Setup AWS-C-COMMON",
                "parent_header": [
                    "Installation",
                    "Build locally with CMake and Clang-14"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "`--cex`: runs verification under counterexample(cex) mode. Cex mode changes configuration options\nto yield more readable results if the result is `SAT` (one of the assertions failed). A counterexample harness file will also be generated at `/tmp/h.ll`. You can link the harness file with unit proof bitcode file with `$SEA cex` to create an executable counterexample:\n`$SEA cex -m64 -g --only-strip-extern --keep-lib-fn --klee-internalize <BC_FILE_NAME> /tmp/h.ll -o debug`. Running in cex mode might negatively affect the verification\ntime, but could be very useful for debugging.\n\n`--vac`: runs verification under vacuity(vac) mode. Vac mode checks whether any of the assertions are *vacuously true*, in other words whether any assertions are not reachable. It is recommended to always run verification jobs under vac mode when a new job returns `UNSAT` to check whether it is a false positive.\n\n`--horn-bmc-solver=[smt-z3, smt-y2]`: chooses the smt-solver that will be used for BMC verification. Z3 is used by default; set this flag to `smt-y2` to choose Yices2 instead. Yices2 can sometimes yield a much shorter verification time under cex mode.\n",
                "type": "Text_excerpt",
                "original_header": "Basic verification options",
                "parent_header": [
                    "Installation",
                    "Build verification jobs for SeaHorn using CMake"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We have adapted SMACK by using different configurations supported by the tool, including options for ineger / pointer encoding, options for property checks, and options for its memory model. The shown one is the configuration which SMACK performs best as we collected.\nAll verification results by giving different options we collected and reasoning on a jupyter [notebook](https://colab.research.google.com/drive/1tr37scaF4zOrgAYHUBCYi5mk1vwKhF1n?usp=sharing).\n",
                "type": "Text_excerpt",
                "original_header": "SMACK experiment with different options",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for SMACK"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We reasoned why Symbiotic can take less times on verifying `priority_queue` and `ring_buffer` categories where other tools may take longer. We tried to add some failed assertions like `sassert(false)` (aka. `__VERIFIER_assert(false)`) on the proofs such as `priority_queue_push`, `priority_queue_push_ref`, and `priority_queue_s_swap`. However, Symbiotic still report no error found on all those cases. The details can be found on issue [124](https://github.com/seahorn/verify-c-common/issues/124).\n",
                "type": "Text_excerpt",
                "original_header": "Issues we found",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for Symbiotic"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We need to rebuild `aws-c-common` with fuzzing and coverage cflags.\n\nReconfigure:\n```bash\n$ cd aws-common/build/\n$ cmake -DCMAKE_C_COMPILER=clang-14 \\\n  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n  -DCMAKE_INSTALL_PREFIX=$(pwd)/run \\\n  -DCMAKE_C_FLAGS='-fsanitize=fuzzer-no-link,address,undefined -fprofile-instr-generate -fcoverage-mapping' \\\n  ../ -GNinja\n```\nRebuild:\n```bash\n$ cmake --build . --target install\n```\nor\n```bash\n$ ninja install\n```\nEnter the verification build directory and reconfigure CMake to enable fuzzing:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-14 \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_CXX_COMPILER=clang++-14 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_FUZZ=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all libFuzzer tests:\n```bash\n$ ctest -R fuzz_\n```\n\nThe fuzzing target executable for verification job `<NAME>` is installed as `build/seahorn/jobs/<NAME>/<NAME>_fuzz`. `build/seahorn/jobs/<NAME>/corpus/` will contain some corpus inputs generated by libFuzzer if any fuzzing runs are executed.\n```bash\n$ build/seahorn/jobs/<NAME>/<NAME>_fuzz -h\n```\nwill show you all the options for libFuzzer.\n\nTo fuzz individual targets, run \n```bash\n$ ASAN_OPTIONS=detect_leaks=0 build/seahorn/jobs/<NAME>/<NAME>_fuzz corpus -use_value_profile=1 -detect_leaks=0 -runs=<RUN_NUM> -allocator_may_return_null=1\n```\nThis command will fuzz the target for at most `<RUN_NUM>` times or until a crash has occurred. Memory leak detection is turned off to prevent spurious memory leak warnings.\n",
                "type": "Text_excerpt",
                "original_header": "Reconfigure and rebuild `aws-c-common`",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for libFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "[data]: https://colab.research.google.com/github/seahorn/verify-c-common/blob/master/experiment_results.ipynb\n[fuzz]: https://seahorn.github.io/verify-c-common/fuzzing_coverage/index.html\n \n",
                "original_header": "Results"
            },
            "confidence": 0.9929970817757644,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "faq": [
        {
            "result": {
                "value": "As a prerequisite, follow [this guide](https://github.com/seahorn/seahorn/tree/dev10#developers-zone) to build SeaHorn locally.\n\n1. Create a build directory\n   ```bash\n   $ mkdir build ; cd build\n   ```\n2. Configure with cmake\n   ```bash\n   $ cmake \\\n      -DSEA_LINK=llvm-link-14 \\\n      -DCMAKE_C_COMPILER=clang-14 \\\n      -DCMAKE_CXX_COMPILER=clang++-14 \\\n      -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n      -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> ../ -GNinja\n   ```\n   `SEAHORN_ROOT` is the directory containing your local SeaHorn repository. `AWS_C_COMMON_CMAKE_DIR` is the directory under `aws-c-common` project containing the file `aws-c-common-config.cmake`.\n   \n   This will also allow the project to be configured and compiled within VS Code using the CMake Tools extension.\n\n   Alternatively, the project can be configured using cmake presets. To do this, simply run the following command:\n\n   ```bash\n   $ cmake --preset <PRESET_NAME>\n   ```\n   Where `PRESET_NAME` is the preset you would like to use. The presets that are currently available are: `default-jammy`. These presets assume that `verify-c-common` and `seahorn` are in your home directory and that `aws-c-common` is in your `verify-c-common` directory. \n\n   This will also allow the project to be configured and compiled within VS Code using the CMake Tools extension.\n\n   If you would like to use different compilation settings or if you have `verify-c-common`, `aws-c-common` or `seahorn` in any other directory, you will need to make your own `CMakeUserPresets.json` file with your own presets.\n\n3. Compile\n   ```bash\n   $ ninja\n   ```\n   or\n   ```bash\n   $ cmake --build .\n   ```\nCompiled bitcode files are placed under `build/seahorn/jobs/<NAME>/llvm-ir/<NAME>.bc`\n\n4. Verify\n   ```bash\n   $ ninja test\n   ```\n   or\n   ```bash\n   $ cmake --build . --target test\n   ```\n   or\n   ```bash\n   $ ctest\n   ```\n5. Run individual test\n   ```bash\n   $ ctest -R <TEST_NAME>\n   ```\n6. Run individual file manually\n   ```bash\n   $ ./verify [options] <BC_FILE_NAME> \n   ```\n",
                "type": "Text_excerpt",
                "original_header": "Build verification jobs for SeaHorn using CMake",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "`--cex`: runs verification under counterexample(cex) mode. Cex mode changes configuration options\nto yield more readable results if the result is `SAT` (one of the assertions failed). A counterexample harness file will also be generated at `/tmp/h.ll`. You can link the harness file with unit proof bitcode file with `$SEA cex` to create an executable counterexample:\n`$SEA cex -m64 -g --only-strip-extern --keep-lib-fn --klee-internalize <BC_FILE_NAME> /tmp/h.ll -o debug`. Running in cex mode might negatively affect the verification\ntime, but could be very useful for debugging.\n\n`--vac`: runs verification under vacuity(vac) mode. Vac mode checks whether any of the assertions are *vacuously true*, in other words whether any assertions are not reachable. It is recommended to always run verification jobs under vac mode when a new job returns `UNSAT` to check whether it is a false positive.\n\n`--horn-bmc-solver=[smt-z3, smt-y2]`: chooses the smt-solver that will be used for BMC verification. Z3 is used by default; set this flag to `smt-y2` to choose Yices2 instead. Yices2 can sometimes yield a much shorter verification time under cex mode.\n",
                "type": "Text_excerpt",
                "original_header": "Basic verification options",
                "parent_header": [
                    "Installation",
                    "Build verification jobs for SeaHorn using CMake"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nAs a prerequisite, build SMACK following [this guide](https://github.com/smackers/smack/blob/main/docs/installation.md). Note, we require to use [LLVM](http://llvm.org/) [12.0.1](https://releases.llvm.org/download.html#12.0.1). The last commit that SMACK supports LLVM 12 is [4894245](https://github.com/smackers/smack/commit/48942451a1f48e56442c70256f3f20d117f1b309).\n\nNOTE: The recommended version of LLVM for SMACK is LLVM-12\nMake sure to use the correct version of LLVM and seahorn when using SMACK\nseahorn for LLVM-12: https://github.com/seahorn/seahorn/tree/dev12\n\n\nEnter the verification build directory and reconfigure CMake to enable SMACK:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-12 \\\n   -DCMAKE_C_COMPILER=clang-12 \\\n   -DCMAKE_CXX_COMPILER=clang++-12 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_SMACK=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all SMACK tests:\n```bash\n$ ctest -R smack_\n```\n\nTo run a individual test for job with `NAME`, find SMACK specific LLVM assembly file under `seahorn/jobs/NAME/llvm-ir/NAME.smack.ir/NAME.smack.ir.ll`.\n\nRun with your local SMACK executable:\n```bash\n$ smack --check assertions --time-limit 300 --no-memory-splitting \\\n   --integer-encoding unbounded-integer --pointer-encoding unbounded-integer \\\n   seahorn/jobs/${NAME}/llvm-ir/${NAME}.smack.ir/${NAME}.smack.ir.bc\n```",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for SMACK",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We have adapted SMACK by using different configurations supported by the tool, including options for ineger / pointer encoding, options for property checks, and options for its memory model. The shown one is the configuration which SMACK performs best as we collected.\nAll verification results by giving different options we collected and reasoning on a jupyter [notebook](https://colab.research.google.com/drive/1tr37scaF4zOrgAYHUBCYi5mk1vwKhF1n?usp=sharing).\n",
                "type": "Text_excerpt",
                "original_header": "SMACK experiment with different options",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for SMACK"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nNOTE: The recommended version of LLVM for Symbiotic is LLVM-10\nMake sure to use the correct version of LLVM and seahorn when using Symbiotic\nseahorn for LLVM-10: https://github.com/seahorn/seahorn/tree/dev10\n\nAs a prerequisite, build Symbiotic following [this guide](https://github.com/staticafi/symbiotic#building-symbiotic-from-sources). Note, we require to use [LLVM](http://llvm.org/) [10.0.1](https://releases.llvm.org/download.html#10.0.1).\n\nEnter the verification build directory and reconfigure CMake to enable Symbiotic:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-10 \\\n   -DCMAKE_C_COMPILER=clang-10 \\\n   -DCMAKE_CXX_COMPILER=clang++-10 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_SYMBIOTIC=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all Symbiotic tests:\n```bash\n$ ctest -R symbiotic_\n```\nNote, the CTest **does not** report error properly for Symbiotic. The verification result for Symbiotic should strictly follow the outputs of the tool.\n\nTo run a individual test for job with `NAME`, find Symbiotic specific BC file under `seahorn/jobs/NAME/llvm-ir/NAME.symbiotic.ir/NAME.symbiotic.ir.bc`.\n\nRun with your local Symbiotic executable:\n```bash\n$ symbiotic --replay-error --report=short --prp=assert seahorn/jobs/${NAME}/llvm-ir/${NAME}.symbiotic.ir/${NAME}.symbiotic.ir.bc\n```\n",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for Symbiotic",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We reasoned why Symbiotic can take less times on verifying `priority_queue` and `ring_buffer` categories where other tools may take longer. We tried to add some failed assertions like `sassert(false)` (aka. `__VERIFIER_assert(false)`) on the proofs such as `priority_queue_push`, `priority_queue_push_ref`, and `priority_queue_s_swap`. However, Symbiotic still report no error found on all those cases. The details can be found on issue [124](https://github.com/seahorn/verify-c-common/issues/124).\n",
                "type": "Text_excerpt",
                "original_header": "Issues we found",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for Symbiotic"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nAs a prerequisite, build KLEE following [this guide](https://klee.github.io/build-llvm11/). Note, we require to use [LLVM](http://llvm.org/) [11.1.0](https://releases.llvm.org/download.html#11.1.0).\n\nNOTE: The recommended version of LLVM for KLEE is LLVM-11 (with added support for 12 and 13)\nMake sure to use the correct version of LLVM and seahorn when using KLEE\nseahorn for LLVM-11: https://github.com/seahorn/seahorn/tree/dev11\n\nEnter the verification build directory and reconfigure CMake to enable KLEE:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-11 \\\n   -DCMAKE_C_COMPILER=clang-11 \\\n   -DCMAKE_CXX_COMPILER=clang++-11 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_KLEE=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all KLEE tests:\n```bash\n$ ctest -R klee_\n```\n\nTo run a individual test for job with `NAME`, find KLEE specific BC file under `seahorn/jobs/NAME/llvm-ir/NAME.klee.ir/NAME.klee.ir.bc`.\n\nRun with your local KLEE executable:\n```bash\n$ klee --libc=uclibc --exit-on-error seahorn/jobs/${NAME}/llvm-ir/${NAME}.klee.ir/${NAME}.klee.ir.bc\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for KLEE",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "As a prerequisite, install the following tools: `llvm-14 llvm-14-dev llvm-14-tools lcov`.",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for libFuzzer",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We need to rebuild `aws-c-common` with fuzzing and coverage cflags.\n\nReconfigure:\n```bash\n$ cd aws-common/build/\n$ cmake -DCMAKE_C_COMPILER=clang-14 \\\n  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n  -DCMAKE_INSTALL_PREFIX=$(pwd)/run \\\n  -DCMAKE_C_FLAGS='-fsanitize=fuzzer-no-link,address,undefined -fprofile-instr-generate -fcoverage-mapping' \\\n  ../ -GNinja\n```\nRebuild:\n```bash\n$ cmake --build . --target install\n```\nor\n```bash\n$ ninja install\n```\nEnter the verification build directory and reconfigure CMake to enable fuzzing:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-14 \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_CXX_COMPILER=clang++-14 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_FUZZ=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all libFuzzer tests:\n```bash\n$ ctest -R fuzz_\n```\n\nThe fuzzing target executable for verification job `<NAME>` is installed as `build/seahorn/jobs/<NAME>/<NAME>_fuzz`. `build/seahorn/jobs/<NAME>/corpus/` will contain some corpus inputs generated by libFuzzer if any fuzzing runs are executed.\n```bash\n$ build/seahorn/jobs/<NAME>/<NAME>_fuzz -h\n```\nwill show you all the options for libFuzzer.\n\nTo fuzz individual targets, run \n```bash\n$ ASAN_OPTIONS=detect_leaks=0 build/seahorn/jobs/<NAME>/<NAME>_fuzz corpus -use_value_profile=1 -detect_leaks=0 -runs=<RUN_NUM> -allocator_may_return_null=1\n```\nThis command will fuzz the target for at most `<RUN_NUM>` times or until a crash has occurred. Memory leak detection is turned off to prevent spurious memory leak warnings.\n",
                "type": "Text_excerpt",
                "original_header": "Reconfigure and rebuild `aws-c-common`",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for libFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nAs a prerequisite, build SMACK following [this guide](https://github.com/smackers/smack/blob/main/docs/installation.md). Note, we require to use [LLVM](http://llvm.org/) [12.0.1](https://releases.llvm.org/download.html#12.0.1). The last commit that SMACK supports LLVM 12 is [4894245](https://github.com/smackers/smack/commit/48942451a1f48e56442c70256f3f20d117f1b309).\n\nNOTE: The recommended version of LLVM for SMACK is LLVM-12\nMake sure to use the correct version of LLVM and seahorn when using SMACK\nseahorn for LLVM-12: https://github.com/seahorn/seahorn/tree/dev12\n\n\nEnter the verification build directory and reconfigure CMake to enable SMACK:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-12 \\\n   -DCMAKE_C_COMPILER=clang-12 \\\n   -DCMAKE_CXX_COMPILER=clang++-12 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_SMACK=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all SMACK tests:\n```bash\n$ ctest -R smack_\n```\n\nTo run a individual test for job with `NAME`, find SMACK specific LLVM assembly file under `seahorn/jobs/NAME/llvm-ir/NAME.smack.ir/NAME.smack.ir.ll`.\n\nRun with your local SMACK executable:\n```bash\n$ smack --check assertions --time-limit 300 --no-memory-splitting \\\n   --integer-encoding unbounded-integer --pointer-encoding unbounded-integer \\\n   seahorn/jobs/${NAME}/llvm-ir/${NAME}.smack.ir/${NAME}.smack.ir.bc\n```",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for SMACK",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We have adapted SMACK by using different configurations supported by the tool, including options for ineger / pointer encoding, options for property checks, and options for its memory model. The shown one is the configuration which SMACK performs best as we collected.\nAll verification results by giving different options we collected and reasoning on a jupyter [notebook](https://colab.research.google.com/drive/1tr37scaF4zOrgAYHUBCYi5mk1vwKhF1n?usp=sharing).\n",
                "type": "Text_excerpt",
                "original_header": "SMACK experiment with different options",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for SMACK"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nNOTE: The recommended version of LLVM for Symbiotic is LLVM-10\nMake sure to use the correct version of LLVM and seahorn when using Symbiotic\nseahorn for LLVM-10: https://github.com/seahorn/seahorn/tree/dev10\n\nAs a prerequisite, build Symbiotic following [this guide](https://github.com/staticafi/symbiotic#building-symbiotic-from-sources). Note, we require to use [LLVM](http://llvm.org/) [10.0.1](https://releases.llvm.org/download.html#10.0.1).\n\nEnter the verification build directory and reconfigure CMake to enable Symbiotic:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-10 \\\n   -DCMAKE_C_COMPILER=clang-10 \\\n   -DCMAKE_CXX_COMPILER=clang++-10 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_SYMBIOTIC=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all Symbiotic tests:\n```bash\n$ ctest -R symbiotic_\n```\nNote, the CTest **does not** report error properly for Symbiotic. The verification result for Symbiotic should strictly follow the outputs of the tool.\n\nTo run a individual test for job with `NAME`, find Symbiotic specific BC file under `seahorn/jobs/NAME/llvm-ir/NAME.symbiotic.ir/NAME.symbiotic.ir.bc`.\n\nRun with your local Symbiotic executable:\n```bash\n$ symbiotic --replay-error --report=short --prp=assert seahorn/jobs/${NAME}/llvm-ir/${NAME}.symbiotic.ir/${NAME}.symbiotic.ir.bc\n```\n",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for Symbiotic",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We reasoned why Symbiotic can take less times on verifying `priority_queue` and `ring_buffer` categories where other tools may take longer. We tried to add some failed assertions like `sassert(false)` (aka. `__VERIFIER_assert(false)`) on the proofs such as `priority_queue_push`, `priority_queue_push_ref`, and `priority_queue_s_swap`. However, Symbiotic still report no error found on all those cases. The details can be found on issue [124](https://github.com/seahorn/verify-c-common/issues/124).\n",
                "type": "Text_excerpt",
                "original_header": "Issues we found",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for Symbiotic"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "Leave `aws-c-common` library as is if you have already built verification jobs for SeaHorn.\n\nAs a prerequisite, build KLEE following [this guide](https://klee.github.io/build-llvm11/). Note, we require to use [LLVM](http://llvm.org/) [11.1.0](https://releases.llvm.org/download.html#11.1.0).\n\nNOTE: The recommended version of LLVM for KLEE is LLVM-11 (with added support for 12 and 13)\nMake sure to use the correct version of LLVM and seahorn when using KLEE\nseahorn for LLVM-11: https://github.com/seahorn/seahorn/tree/dev11\n\nEnter the verification build directory and reconfigure CMake to enable KLEE:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-11 \\\n   -DCMAKE_C_COMPILER=clang-11 \\\n   -DCMAKE_CXX_COMPILER=clang++-11 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_KLEE=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all KLEE tests:\n```bash\n$ ctest -R klee_\n```\n\nTo run a individual test for job with `NAME`, find KLEE specific BC file under `seahorn/jobs/NAME/llvm-ir/NAME.klee.ir/NAME.klee.ir.bc`.\n\nRun with your local KLEE executable:\n```bash\n$ klee --libc=uclibc --exit-on-error seahorn/jobs/${NAME}/llvm-ir/${NAME}.klee.ir/${NAME}.klee.ir.bc\n```\n\n",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for KLEE",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "As a prerequisite, install the following tools: `llvm-14 llvm-14-dev llvm-14-tools lcov`.",
                "type": "Text_excerpt",
                "original_header": "Build and run verification jobs for libFuzzer",
                "parent_header": [
                    "Installation"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "value": "We need to rebuild `aws-c-common` with fuzzing and coverage cflags.\n\nReconfigure:\n```bash\n$ cd aws-common/build/\n$ cmake -DCMAKE_C_COMPILER=clang-14 \\\n  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \\\n  -DCMAKE_INSTALL_PREFIX=$(pwd)/run \\\n  -DCMAKE_C_FLAGS='-fsanitize=fuzzer-no-link,address,undefined -fprofile-instr-generate -fcoverage-mapping' \\\n  ../ -GNinja\n```\nRebuild:\n```bash\n$ cmake --build . --target install\n```\nor\n```bash\n$ ninja install\n```\nEnter the verification build directory and reconfigure CMake to enable fuzzing:\n```bash\n$ cmake \\\n   -DSEA_LINK=llvm-link-14 \\\n   -DCMAKE_C_COMPILER=clang-14 \\\n   -DCMAKE_CXX_COMPILER=clang++-14 \\\n   -DSEAHORN_ROOT=<SEAHORN_ROOT> \\\n   -DSEA_ENABLE_FUZZ=ON \\\n   -Daws-c-common_DIR=<AWS_C_COMMON_CMAKE_DIR> \\\n   ../ -GNinja\n```\nRebuild with:\n```bash\n$ cmake --build .\n```\nor\n```bash\n$ ninja\n```\n\nTo run all libFuzzer tests:\n```bash\n$ ctest -R fuzz_\n```\n\nThe fuzzing target executable for verification job `<NAME>` is installed as `build/seahorn/jobs/<NAME>/<NAME>_fuzz`. `build/seahorn/jobs/<NAME>/corpus/` will contain some corpus inputs generated by libFuzzer if any fuzzing runs are executed.\n```bash\n$ build/seahorn/jobs/<NAME>/<NAME>_fuzz -h\n```\nwill show you all the options for libFuzzer.\n\nTo fuzz individual targets, run \n```bash\n$ ASAN_OPTIONS=detect_leaks=0 build/seahorn/jobs/<NAME>/<NAME>_fuzz corpus -use_value_profile=1 -detect_leaks=0 -runs=<RUN_NUM> -allocator_may_return_null=1\n```\nThis command will fuzz the target for at most `<RUN_NUM>` times or until a crash has occurred. Memory leak detection is turned off to prevent spurious memory leak warnings.\n",
                "type": "Text_excerpt",
                "original_header": "Reconfigure and rebuild `aws-c-common`",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for libFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "We configured libFuzzer to output [source-based coverage](https://releases.llvm.org/14.0.0/tools/clang/docs/SourceBasedCodeCoverage.html) data. Once a target has been fuzzed for the desired number of times, `build/seahorn/jobs/<NAME>/corpus/` will contain some corpus input files. Running the fuzzing target again with `--runs=0` will make libFuzzer run the target with existing corpus files only and output coverage data.\n```bash\n$ ASAN_OPTIONS=detect_leaks=0 build/seahorn/jobs/<NAME>/<NAME>_fuzz corpus -detect_leaks=0 -runs=0\n```\nNow `build/seahorn/jobs/<NAME>/` should contain a profile data file named `default.profraw` containing coverage data.\n\nAfter running all fuzzing tests, run `scripts/get_fuzzing_coverage.py` to output trace files of all source files under `data/fuzz_coverage/`. The file is readable and optionally by `lcov`. The script also supports generating HTML reports with the flag `--html-dir`.\n```bash\n$ python3 scripts/get_fuzzing_coverage.py --build-dir=<BUILD_DIR> --html-dir=<HTML_DIR>\n```\n",
                "type": "Text_excerpt",
                "original_header": "Coverage report for fuzzing",
                "parent_header": [
                    "Installation",
                    "Build and run verification jobs for libFuzzer"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "![os](https://img.shields.io/badge/os-linux-orange?logo=linux)\n![os](https://img.shields.io/badge/os-macos-silver?logo=apple)\n[![Azure DevOps builds](https://img.shields.io/azure-devops/build/seahorn/verify-c-common/2)](https://dev.azure.com/seahorn/verify-c-common/_build)\n[![CI](https://github.com/seahorn/verify-c-common/workflows/CI/badge.svg)](https://github.com/seahorn/verify-c-common/actions?query=workflow%3ACI)\n[![Fuzzing Coverage](https://img.shields.io/badge/fuzz-coverage-success)][fuzz]\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)][data] \nThis repository contains the unit proofs as well as a build system used in the *Verifying Verified Code* case study. *Verified Code* refers to the [aws-c-common](https://github.com/awslabs/aws-c-common) library, which is now being verified by [CBMC](https://www.cprover.org/cbmc/) as part of the library's CI process. Read more about the AWS case study that inspired our work [here\n](https://dl.acm.org/doi/10.1145/3377813.3381347). Instead of CBMC, our case study uses [SeaHorn](https://github.com/seahorn/seahorn)'s BMC engine for bounded model checking. We also adopted *de facto* semantics in the proofs and specifications, which allows this build system to use the same set of unit proofs for different verification tools and techniques. In specific, we enabled symbolic execution with [KLEE](https://klee.github.io/) and fuzzing with [libFuzzer](https://releases.llvm.org/11.0.0/docs/LibFuzzer.html).\nNOTE: The recommended version of LLVM for KLEE is LLVM-11 (with added support for 12 and 13)\nMake sure to use the correct version of LLVM and seahorn when using KLEE\nseahorn for LLVM-11: https://github.com/seahorn/seahorn/tree/dev11\n \n",
                "original_header": "verify-c-common"
            },
            "confidence": 0.9734913302954344,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The *proof library* contains helper functions that improves the expressiveness, efficiency and standardization of *unit proofs*. Examples include initialization functions for data structures and functions for expressing complex post-conditions. The *proof library* is located under [`seahorn/include/`](seahorn/include/) and [`seahorn/lib/`](seahorn/lib/).\n \n",
                "original_header": "Proof Library"
            },
            "confidence": 0.9695221412856521,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To make verification scalable, the verification of method A that calls another method B may use a specification stub that approximates the functionality of B. We implemented these stub functions under [`seahorn/aws-c-common-stubs/`](seahorn/aws-c-common-stubs/).\n \n",
                "original_header": "Unit proof stubs"
            },
            "confidence": 0.9166758178192057,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "verify-c-common"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://colab.research.google.com/assets/colab-badge.svg"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/./assets/arch.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/2107.00723"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/seahorn/verify-c-common/master/README.md"
        }
    ]
}