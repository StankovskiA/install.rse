{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:10:11"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/jku-ssw/gcc-builtin-study",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "jku-ssw",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2019-06-25T13:15:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-05-23T16:46:21Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": null,
                "type": "License",
                "name": "Other",
                "url": null,
                "spdx_id": "NOASSERTION"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Copyright (c) 2019 Manuel Rigger\n\nThe Universal Permissive License (UPL), Version 1.0\n\nSubject to the condition set forth below, permission is hereby granted to any person obtaining a copy of this software, associated documentation and/or data (collectively the \"Software\"), free of charge and under any and all copyright rights in the Software, and any and all patent rights owned or freely licensable by each licensor hereunder covering either (i) the unmodified Software as contributed to or provided by such licensor, or (ii) the Larger Works (as defined below), to deal in both\n\n(a) the Software, and\n\n(b) any piece of software and/or hardware listed in the lrgrwrks.txt file if one is included with the Software (each a \u201cLarger Work\u201d to which the Software is contributed by such licensors),\n\nwithout restriction, including without limitation the rights to copy, create derivative works of, display, perform, and distribute the Software and make, use, sell, offer for sale, import, export, have made, and have sold the Software and the Larger Work(s), and to sublicense the foregoing rights on either these or other terms.\n\nThis license is subject to the following condition:\n\nThe above copyright notice and either this complete permission notice or at a minimum a reference to the UPL must be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nNote that coverage/sampling_software_projects directory contains its own License.txt file with a license for the compute_coverage.R script.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/LICENSE.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "gcc-builtin-study",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "jku-ssw/gcc-builtin-study",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/jku-ssw/gcc-builtin-study/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/jku-ssw/gcc-builtin-study/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 12,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 2,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/jku-ssw/gcc-builtin-study/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "TeX",
                "name": "TeX",
                "type": "Programming_language",
                "size": 235137
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Python",
                "name": "Python",
                "type": "Programming_language",
                "size": 78090
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 51554
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "R",
                "name": "R",
                "type": "Programming_language",
                "size": 16317
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 3929
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "Some of the README Markdown files refer to an environment variable `$ARTIFACT_ROOT`. Please ensure that this environment variable is set. For example, you can set this variable for the current console by typing `export ARTIFACT_ROOT=path/to/the/artifact/root` on Linux.\n\nPlease also unpack the database file contained in the `database.zip` archive.\n",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/INSTALLATION.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The database is stored in the [./database.db](./database.db) file. It is stored as a SQLite3 database, so that it can be easily distributed and shared. For convenience, we suggest to explore the database's content using [sqlitebrowser](https://sqlitebrowser.org/dl/), which is a GUI for SQLite3 databases and can be used on both Linux, Windows, and MacOS. Alternatively, the database can also be accessed on the command line by installing [SQLite3](https://www.sqlite.org/index.html) and typing `sqlite3 database.db`. The figure below shows an ER diagram created using [Dia](http://dia-installer.de/shapes/ER/index.html.en) with the most important entities and relations represented in the database. \n",
                "original_header": "Database"
            },
            "confidence": 0.9992402170565315,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "* For the script that fetches the projects, see the [./src/fetch_github_projects.py](./src/fetch_github_projects.py) script.\n* For the coverage score, see the [./coverage](./coverage) directory.\n* For how we filtered projects, see the definition of the `GithubProjectView` in [./database.db](./database.db).\n* For how we identified builtins from the documentation, see [./defs](./defs).\n* For how we identified builtins from the GCC source code, and how we identified builtin usages in the ~5,000 projects, see [./BuiltinAnalyzer](./BuiltinAnalyzer).\n* For how we excluded builtins, see [./src/sync-excludes.py](./src/sync-excludes.py).\n* For how we extracted builtin usages, see [./src/README.md](./src/README.md).\n \n",
                "original_header": "Selecting the projects"
            },
            "confidence": 0.9996783676349377,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 STATUS.md\n\u251c\u2500\u2500 __pycache__\n\u251c\u2500\u2500 coverage\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sampling_software_projects\n\u251c\u2500\u2500 defs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 architecture-specific\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 internal\n\u251c\u2500\u2500 excludes\n\u251c\u2500\u2500 gcc-builtin-tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test-cases\n\u251c\u2500\u2500 generated\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 historical-data\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 pdf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 latex\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u251c\u2500\u2500 paper\n\u251c\u2500\u2500 projects\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 FETCH_GITHUB_PROJECTS.md\n    \u251c\u2500\u2500 JavaProject\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 JAVA_PROJECTS.md\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n    \u251c\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 helper-gcc-doc-extraction\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u251c\u2500\u2500 include\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 plots\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u2514\u2500\u2500 screenshots\n```\n \n",
                "original_header": "Directory structure including all Markdown files"
            },
            "confidence": 0.9999999999582201,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "type": [
        {
            "result": {
                "value": "commandline-application",
                "type": "String"
            },
            "confidence": 0.82,
            "technique": "software_type_heuristics"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "To make full use of the artifact, we recommend using an Ubuntu 19.04 system (which is assumed for the further instructions). If you are not using Ubuntu, you can download a Virtual Box image from [osboxes.org](https://www.osboxes.org/ubuntu/):\n\nThe artifact requires the following dependencies:\n* [git](https://git-scm.com/): for downloading the projects from GitHub\n* [cloc](https://github.com/AlDanial/cloc): for retrieving metadata about the projects\n* [Python 3](https://www.python.org/): for executing the Python scripts\n* [sqlite3](https://www.sqlite.org/index.html): for opening the database\n* Latex: to build the paper\n* libcurl4-openssl-dev and libxml2-dev: required by the forecast R package (see [here](https://stackoverflow.com/questions/41940778/forecast-library-cant-be-installed))\n* The R packages ggplot2, ggthemes, reshape, and forecast: for plotting\n* A recent JDK and Eclipse: to use the Java projects\n\nYou can download these dependencies on Ubuntu as follows:\n\n```\nsudo apt install git cloc r-base-core python3 libcurl4-openssl-dev libxml2-dev sqlite3 texlive-full openjdk-11-jdk\necho 'install.packages(c(\"ggplot2\", \"ggthemes\", \"reshape\", \"forecast\"), repos = \"http://cran.us.r-project.org\")' | sudo R --vanilla\n```\n\nWe believe that the artifact works also on other Linux systems. Furthermore, browsing the SQLite3 database should be possible on any operating system that has SQLite3 installed.\n",
                "type": "Text_excerpt",
                "original_header": "Requirements"
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "support": [
        {
            "result": {
                "value": "See [./src/implementation_effort.py](./src/implementation_effort.py).\n",
                "type": "Text_excerpt",
                "original_header": "Section 3.3 RQ3: How many builtins must be implemented to support most projects?",
                "parent_header": [
                    "Paper sections reflected in the artifact"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "value": "* The scripts and data related to this research question are described in [./gcc-builtin-tests/README.md](./gcc-builtin-tests/README.md).\n",
                "type": "Text_excerpt",
                "original_header": "Section 3.5 RQ5: How well do tools support builtins?",
                "parent_header": [
                    "Paper sections reflected in the artifact"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "usage": [
        {
            "result": {
                "value": "* See [./src/JavaProject/README.md](./src/JavaProject/README.md).\n",
                "type": "Text_excerpt",
                "original_header": "Section 3.4 RQ4: How does builtin usage develop over time?",
                "parent_header": [
                    "Paper sections reflected in the artifact"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This artifact is associated with the paper \"Understanding GCC Builtins to Develop Better Tools\" and provides the builtin raw data, the preprocessed data, and aggregated data of builtin usages. It also contains a record of the manual decisions made as part of this study. Furthermore, it contains all the scripts and applications to reproduce the paper's results.\n \n",
                "original_header": "Overview"
            },
            "confidence": 0.9895569097301576,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The artifact provides the raw data, preprocessed data, and aggregated data of builtin usages. Furthermore, it also records the manual decisions made in parts of the study. Please unpack the database file contained in the `database.zip` archive. \nThe database is stored in the [./database.db](./database.db) file. It is stored as a SQLite3 database, so that it can be easily distributed and shared. For convenience, we suggest to explore the database's content using [sqlitebrowser](https://sqlitebrowser.org/dl/), which is a GUI for SQLite3 databases and can be used on both Linux, Windows, and MacOS. Alternatively, the database can also be accessed on the command line by installing [SQLite3](https://www.sqlite.org/index.html) and typing `sqlite3 database.db`. The figure below shows an ER diagram created using [Dia](http://dia-installer.de/shapes/ER/index.html.en) with the most important entities and relations represented in the database. \nTables with a suffix `Unfiltered` indicate raw data that is filtered by a view. For example, the database contains a table `GithubProjectUnfiltered` that contains the ~5,000 projects that we initially considered in our study. As described in the paper, we excluded projects having less than 100 LOC as well as GCC and forks of GCC. Rather than removing this projects from the database, we inserted a view `GithubProjectView` that filters the project: `CREATE VIEW GithubProjectView as SELECT *, CLOC_LOC_C+CLOC_LOC_H AS CLOC FROM GithubProjectUnfiltered WHERE PROCESSED=1 AND CLOC >= 100 AND GITHUB_PROJECT_NAME NOT IN (\"gcc\", \"gcc-xtensa\", \"gccxml\", \"rose\")` (note that `PROCESSED=1` ensures that only those projects are considered that were fully processed by the `BuiltinAnalyzer`). Filtering the data rather than removing it allows to reproduce every filtering step. However, having many nested views results in slow queries - querying some of the view takes several minutes. To this end, we implemented a script to persist views in a table (see [./src/includes/sync_views_to_tables.py](./src/includes/sync_views_to_tables.py)). Thus, the database also contains a table `GithubProject` with the content of the `GithubProjectView` view. Thus, if you make changes to the content of the database, make sure to execute [./src/includes/sync_views_to_tables.py](./src/includes/sync_views_to_tables.py) to synchronize the views and tables. The sqlitebrowser allows, for example, to easily determine the `CREATE` statements for the views (see below). \n",
                "original_header": "Database"
            },
            "confidence": 0.9518277754788377,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "We recommend having a look at the [./generated/latex/generated.tex](./generated/latex/generated.tex) file that contains many of the commands and tables included in the paper. The [./paper/Makefile](./paper/Makefile) generates this data. Type `make` in the [./paper](./paper) to generate it (if missing). \n",
                "original_header": "Paper"
            },
            "confidence": 0.9205611750207217,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Overview"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ],
    "images": [
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/./er.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/./src/screenshots/SQLiteBrowser.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/src/screenshots/HistoryBrowser.png"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
        }
    ]
}