{
    "somef_provenance": {
        "somef_version": "0.9.5",
        "somef_schema_version": "1.0.0",
        "date": "2024-10-03 20:57:35"
    },
    "code_repository": [
        {
            "result": {
                "value": "https://github.com/hyperledger-labs/fabric-opssc",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "owner": [
        {
            "result": {
                "value": "hyperledger-labs",
                "type": "Organization"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_created": [
        {
            "result": {
                "value": "2021-01-07T19:33:04Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "date_updated": [
        {
            "result": {
                "value": "2024-09-25T10:51:23Z",
                "type": "Date"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "license": [
        {
            "result": {
                "value": "https://api.github.com/licenses/apache-2.0",
                "type": "License",
                "name": "Apache License 2.0",
                "url": "https://api.github.com/licenses/apache-2.0",
                "spdx_id": "Apache-2.0"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
                "type": "File_dump"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/LICENSE"
        },
        {
            "result": {
                "value": "Apache-2.0 (See [LICENSE](LICENSE))\n",
                "type": "Text_excerpt",
                "original_header": "License",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "description": [
        {
            "result": {
                "value": "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "This enables execution of cross-domain operations without a single point of trust (SPOT) and sharing credentials by blockchain consensus establishment.\nAlso it enables to execute unified procedures with unified configuration parameters based on the smart contract. \nIn Fabric v2.x, individual operational tasks (e.g., `peer` commands) has been refined, and SPOT is eliminated (e.g., introduced the new chaincode lifecycle).\nThe OpsSC for Fabric v2.x aims to enhance negotiation and (decentralized) automation capabilities to enable more efficient (typical) end-to-end operational workflows using these individual tasks and more. \n",
                "original_header": "Overview"
            },
            "confidence": 0.9163718503888748,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- [OpsSC chaincode](./chaincode): is a chaincode that provides functions to control operational workflows and stores requests for executing them and the operational histories as states. This also issues chaincode events including the operational instructions to administrators and agents. Currently, there are two chaincodes, one for operating chaincodes and one for operating channels. \nCurrently, the OpsSC chaincodes and the Fabric ConfigTX CLI are implemented in Go. On the other hand, the OpsSC agent and API server are implemented in TypeScript.\nThe main reason for using two languages is that the Fabric SDK Go is not yet GA at the time of development.\n \n",
                "original_header": "Components"
            },
            "confidence": 0.9689737686640867,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "```\n(fabric-opssc)\n|- chaincode/                  ... Source code for the OpsSC chaincodes (in Go)\n|   |- chaincode-ops/          ... Source code for the OpsSC chaincode for operating chaincode (in Go)\n|   |- channel-ops/            ... Source code for the OpsSC chaincode for operating channel (in Go)\n|- common/                     ... Source code for common features for the OpsSC agent and API server (in TypeScript)\n|- configtx-cli/               ... Source code for the Fabric ConfigTX CLI (in Go)\n|- docs/                       ... Documents for OpsSC (e.g., Design memo)\n|- integration/                ... Integration tests for the OpsSC (in TypeScript)\n|- opssc-agent/                ... Source code for the OpsSC agent (in TypeScript)\n|- opssc-api-server/           ... Source code for the OpsSC API server (in TypeScript)\n|- sample-environments/        ... Sample environments for trying to run the OpsSC\n|   |- fabric-samples/\n|       |- test-network        ... Docker-based sample environment (This is based on test-network in fabric-samples. This is internally used by the integration tests.)\n|   |- k8s-support/            ... K8s-based sample environment (This is based on test-network-k8s in fabric-samples.)\n|- Dockerfile-for-agent        ... Docker image definition for the OpsSC agent\n|- Dockerfile-for-api-server   ... Docker image definition for the OpsSC API server\n|- Makefile                    ... Make file to build docker images and run the integration tests etc.\n```\n \n",
                "original_header": "Folder structures"
            },
            "confidence": 0.9496430556488754,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "name": [
        {
            "result": {
                "value": "fabric-opssc",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "full_name": [
        {
            "result": {
                "value": "hyperledger-labs/fabric-opssc",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "issue_tracker": [
        {
            "result": {
                "value": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/issues",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_url": [
        {
            "result": {
                "value": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/forks",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "stargazers_count": [
        {
            "result": {
                "value": 26,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "keywords": [
        {
            "result": {
                "value": "",
                "type": "String"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "forks_count": [
        {
            "result": {
                "value": 10,
                "type": "Number"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "download_url": [
        {
            "result": {
                "value": "https://github.com/hyperledger-labs/fabric-opssc/releases",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "programming_languages": [
        {
            "result": {
                "value": "Go",
                "name": "Go",
                "type": "Programming_language",
                "size": 381609
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "TypeScript",
                "name": "TypeScript",
                "type": "Programming_language",
                "size": 256244
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Shell",
                "name": "Shell",
                "type": "Programming_language",
                "size": 116125
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "JavaScript",
                "name": "JavaScript",
                "type": "Programming_language",
                "size": 43376
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Gherkin",
                "name": "Gherkin",
                "type": "Programming_language",
                "size": 40411
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Java",
                "name": "Java",
                "type": "Programming_language",
                "size": 26422
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Makefile",
                "name": "Makefile",
                "type": "Programming_language",
                "size": 4793
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Smarty",
                "name": "Smarty",
                "type": "Programming_language",
                "size": 3694
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "value": "Dockerfile",
                "name": "Dockerfile",
                "type": "Programming_language",
                "size": 2990
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "releases": [
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/103086384",
                "tag": "v0.4.0",
                "name": "v0.4.0",
                "author": {
                    "name": "satota2",
                    "type": "User"
                },
                "description": "# OpsSC v0.4.0 release (May. 16, 2023)\r\n\r\n## Changes in this release:\r\n- Support both Hyperledger Fabric v2.5 and v2.2 series (Out of scope: v2.4)\r\n- Support chaincode operations on Kubernetes (K8s) environments\r\n  - Support for chaincode operations with External Chaincode Builder for K8s\r\n    - [CCaaS builder ('ccaas')](https://github.com/hyperledger/fabric/releases/tag/v2.4.1) support\r\n    - [K8s chaincode builder ('k8s')](https://github.com/hyperledger-labs/fabric-builder-k8s) support\r\n  - Helm charts to run OpsSC on K8s\r\n    - Helm chart for OpsSC API server\r\n    - Helm chart for OpsSC Agent\r\n    - Helm chart for building a chaincode image and running it as a chaincode server\r\n  - Documents and integration tests for OpsSC on K8s\r\n    - Environment using [fabric-samples/test-network-k8s](https://github.com/hyperledger/fabric-samples/tree/main/test-network-k8s)\r\n    - Environment using [fabric-operator/sample-network](https://github.com/hyperledger-labs/fabric-operator/tree/main/sample-network)\r\n  - Limitations:\r\n    - Channel operations on K8s environments are not yet supported\r\n    - Only support Fabric 2.5+\r\n- Other minor improvements",
                "tarball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/tarball/v0.4.0",
                "zipball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/zipball/v0.4.0",
                "html_url": "https://github.com/hyperledger-labs/fabric-opssc/releases/tag/v0.4.0",
                "url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/103086384",
                "release_id": 103086384,
                "date_created": "2023-05-16T02:28:04Z",
                "date_published": "2023-05-16T02:37:54Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/103083314",
                "tag": "v0.4.0-pre",
                "name": "v0.4.0-pre",
                "author": {
                    "name": "satota2",
                    "type": "User"
                },
                "description": "# OpsSC v0.4.0 pre-release (Fab. 28, 2023)\r\n\r\nNOTE: This is a pre-release version of v0.4.0.\r\n\r\nThis version is tested with Fabric v2.5.0-beta.\r\n\r\n## Changes in this release:\r\n- Support both Hyperledger Fabric v2.5 and v2.2 series (Out of scope: v2.4)\r\n- Support chaincode operations on Kubernetes (K8s) environments\r\n  - Support for chaincode operations with External Chaincode Builder for K8s\r\n    - [CCaaS builder ('ccaas')](https://github.com/hyperledger/fabric/releases/tag/v2.4.1) support\r\n    - [K8s chaincode builder ('k8s')](https://github.com/hyperledger-labs/fabric-builder-k8s) support\r\n  - Helm charts to run OpsSC on K8s\r\n    - Helm chart for OpsSC API server\r\n    - Helm chart for OpsSC Agent\r\n    - Helm chart for building a chaincode image and running it as a chaincode server\r\n  - Documents and integration tests for OpsSC on K8s\r\n    - Environment using [fabric-samples/test-network-k8s](https://github.com/hyperledger/fabric-samples/tree/main/test-network-k8s)\r\n    - Environment using [fabric-operator/sample-network](https://github.com/hyperledger-labs/fabric-operator/tree/main/sample-network)\r\n  - Limitations:\r\n    - Channel operations on K8s environments are not yet supported\r\n    - Only support Fabric 2.5+\r\n- Other minor improvements",
                "tarball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/tarball/v0.4.0-pre",
                "zipball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/zipball/v0.4.0-pre",
                "html_url": "https://github.com/hyperledger-labs/fabric-opssc/releases/tag/v0.4.0-pre",
                "url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/103083314",
                "release_id": 103083314,
                "date_created": "2023-02-28T02:29:22Z",
                "date_published": "2023-05-16T01:40:49Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        },
        {
            "result": {
                "type": "Release",
                "value": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/81140786",
                "tag": "v0.3.0",
                "name": "v0.3.0",
                "author": {
                    "name": "satota2",
                    "type": "User"
                },
                "description": "# OpsSC v0.3.0 release (Oct. 27, 2022)\r\n\r\n## Changes in this release:\r\n- Add a voting config option for chaincode_ops - ([Detail](./docs/VotingConfigOption.md))\r\n  - This allows OpsSC users to configure the maximum number of malicious organizations (`f`) in the voting process\r\n  - This config option is not yet supported for channel_ops\r\n- Add a function to update channel type and introduce `disable` channel type to channel_ops\r\n- Support both Hyperledger Fabric v2.4 and v2.2 series (Out of scope: v2.3)\r\n- Other minor improvements\r\n\r\n\r\n\r\n\r\n",
                "tarball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/tarball/v0.3.0",
                "zipball_url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/zipball/v0.3.0",
                "html_url": "https://github.com/hyperledger-labs/fabric-opssc/releases/tag/v0.3.0",
                "url": "https://api.github.com/repos/hyperledger-labs/fabric-opssc/releases/81140786",
                "release_id": 81140786,
                "date_created": "2022-10-27T01:17:34Z",
                "date_published": "2022-10-27T02:16:44Z"
            },
            "confidence": 1,
            "technique": "GitHub_API"
        }
    ],
    "readme_url": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "documentation": [
        {
            "result": {
                "value": "https://github.com/hyperledger-labs/fabric-opssc/tree/main/docs",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://github.com/hyperledger-labs/fabric-opssc/wiki",
                "format": "wiki"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "has_script_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/sample-environments/k8s-support/utils/create_ccp_comfigmap.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/sample-environments/fabric-samples/asset-transfer-basic/chaincode-java/docker/docker-entrypoint.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/integration/teardownDockerEnv.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/opssc-agent/scripts/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/opssc-api-server/scripts/build.sh",
                "type": "Url"
            },
            "confidence": 1,
            "technique": "file_exploration"
        }
    ],
    "has_build_file": [
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/sample-environments/fabric-samples/asset-transfer-basic/chaincode-java/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/sample-environments/fabric-samples/asset-transfer-basic/chaincode-java/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/chaincode/channel-ops/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/chaincode/channel-ops/Dockerfile"
        },
        {
            "result": {
                "value": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/chaincode/chaincode-ops/Dockerfile",
                "type": "Url",
                "format": "dockerfile"
            },
            "confidence": 1,
            "technique": "file_exploration",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/chaincode/chaincode-ops/Dockerfile"
        }
    ],
    "requirements": [
        {
            "result": {
                "value": "- Linux\n- Go >= 1.14\n- Node.js >= 16 (Tested by using v16.19.0)\n- Docker (assuming the current stable release)\n- Docker Compose (assuming the current stable release, OpsSC is tested with version 1.28.6)\n- Git\n- Curl (for trying the sample environment)\n- jq (for trying the sample environment)\n",
                "type": "Text_excerpt",
                "original_header": "Prerequisites",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "installation": [
        {
            "result": {
                "value": "By running the following commands, download the binaries and docker images for Hyperledger Fabric used by test-network:\n\n```sh\n$ cd ${FABRIC_OPSSC}/sample-environments/fabric-samples\n$ export FABRIC_VERSION=2.5.2\n$ export FABRIC_CA_VERSION=1.5.6\n$ curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh | bash -s -- -f ${FABRIC_VERSION} -c ${FABRIC_CA_VERSION} b d\n\n$ ls bin # Confirm the target version binaries are downloaded\nconfigtxgen  configtxlator  cryptogen  discover  fabric-ca-client  fabric-ca-server  idemixgen  orderer  osnadmin  peer\n```\n\n`${FABRIC_OPSSC}` means the `fabric-opssc` directory.\n\nSee [the official documentation](https://hyperledger-fabric.readthedocs.io/en/latest/install.html) for more details.\n",
                "type": "Text_excerpt",
                "original_header": "Preparation 1: Download binaries and docker images for Hyperledger Fabric",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment",
                    "Preparations"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "value": "Build the Fabric ConfigTX CLI by running the following commands:\n\n```sh\n$ cd ${FABRIC_OPSSC}/configtx-cli\n$ make build\n\n$ ls bin # Command to confirm the binary is created\nfabric-configtx-cli\n```\n",
                "type": "Text_excerpt",
                "original_header": "Preparation 2: Build Fabric ConfigTX CLI",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment",
                    "Preparations"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "value": "Build the docker images for OpsSC Agent and API Server by running the following commands:\n\n```sh\n$ cd ${FABRIC_OPSSC}\n$ make docker\n\n$ docker images # Command to confirm the images are created\nREPOSITORY                                                     TAG                              IMAGE ID            CREATED             SIZE\n(...)\nfabric-opssc/opssc-agent                                       latest                           44e30c583566        44 hours ago        1.49GB\nfabric-opssc/opssc-api-server                                  latest                           154c4a550823        44 hours ago        1.43GB\n(...)\n```\n\nBy default, the command builds images for Fabric v2.5 series.\nIf you want to build images for v2.2 series, you should set the `FABRIC_TWO_DIGIT_VERSION` variable.\n",
                "type": "Text_excerpt",
                "original_header": "Preparation 3: Build docker images for OpsSC Agent and API Server",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment",
                    "Preparations"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Chaincode operations: Streamline chaincode deployment with chaincode new lifecycle introduced from v2.x.\n- Channel operations: Streamline channel configuration updates across multiple organizations (e.g., creating a channel, adding an organization, adding an orderer etc.)\n \n",
                "original_header": "Overview"
            },
            "confidence": 0.9939219542651235,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Hyperledger Fabric v2.5.0 or later (Tested by using v2.5.2)\n  - Also it works in v2.2.2 or later (Tested by using v2.2.12)\n- Fabric network configuration\n  - Using Fabric CAs\n  - Using Raft orderers\n  - Each organization has their one or more peers and one ore more orderers\n    - An orderer for each organization is required to operate channels including the system channel\n    - An peer for orderer organization is required to interact with the OpsSC to execute operations on orderers\n  - Having a channel for the OpsSC chaincodes (referred to \"ops channel\") and all organizations joins the channel\n    - The OpsSC chaincodes should be deployed to all organizations\n    - The OpsSC chaincodes on the ops channel is used for managing all channels and all chaincodes on the channels\n    - This channel configuration is to simplify the management of the OpsSC chaincodes\n  - Each organization has one or more agents and one or more API servers for that organization itself\n    - The agent and API server need to use a private key and certificate for the client identity to execute admin commands to all nodes owned by that organization\n \n",
                "original_header": "Assumed Hyperledger Fabric environment"
            },
            "confidence": 0.998374596937043,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "The following shows how to set up this sample environment first. After that, as a typical example of decentralized operation using the OpsSC,\nit will explain a procedure for creating a new channel, deploying a new chaincode on the channel and adding a new organization using the OpsSC.\n \n",
                "original_header": "Try the OpsSC in the sample environment"
            },
            "confidence": 0.9606850051996483,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "Create `ops-channel` as the ops channel and OpsSC chaincodes for operating chaincodes and channels to the ops-channel by running the following commands:\n```sh\n# Create the ops channel\n$ export OPS_CHANNEL_ID=ops-channel\n$ ./network.sh createChannel -c ${OPS_CHANNEL_ID}\n\n# Deploy the OpsSC chaincodes on the ops channel\n$ export OPS_CC_NAME=channel-ops\n$ ./network.sh deployCC -c ${OPS_CHANNEL_ID} -ccn ${OPS_CC_NAME} -ccp ../../../chaincode/${OPS_CC_NAME} -ccl go\n\n$ export OPS_CC_NAME=chaincode-ops\n$ ./network.sh deployCC -c ${OPS_CHANNEL_ID} -ccn ${OPS_CC_NAME} -ccp ../../../chaincode/${OPS_CC_NAME} -ccl go\n\n# Add channel information (including joining organizations) for the system channel and the ops channel to the OpsSC\n$ ./registerNetworkInfoToOpsSC.sh ${OPS_CHANNEL_ID} system-channel system\n$ ./registerNetworkInfoToOpsSC.sh ${OPS_CHANNEL_ID} ${OPS_CHANNEL_ID} ops\n```\n \n```sh\n# Launch the OpsSC agents and API servers for Org1MSP and Org2MSP\n$ docker-compose -f docker/docker-compose-opssc-api-servers.yaml up -d\n$ docker-compose -f docker/docker-compose-opssc-agents.yaml up -d\n\n# Do health check for the agents and servers\n## Check for the API server for Org1MSP\n$ curl -X GET http://localhost:5000/healthz\nOK\n## Check for the API server for Org2MSP\n$ curl -X GET http://localhost:5001/healthz\nOK\n## Check for the agent for Org1MSP\n$ curl -X GET http://localhost:5500/healthz\nOK\n## Check for the agent for Org2MSP\n$ curl -X GET http://localhost:5501/healthz\nOK\n``` \n",
                "original_header": "Initialize the OpsSC on the test network"
            },
            "confidence": 0.9999150169741247,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "To create a new channel (named `mychannel`) based on the \"SampleConsortium\" consortium, an administrator for `Org1MSP` sends a request for the channel update proposal to the OpsSC API server first.\nIn the sample environment, the API server for Org1MSP serves on port 5000. \nThe request is:\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/create_mychannel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"description\": \"Create mychannel\",\n    \"action\": \"create\",\n    \"opsProfile\": {\n      \"Consortium\": \"SampleConsortium\",\n      \"Application\": {\n        \"Capabilities\": [\n          \"V2_0\"\n        ],\n        \"Policies\": {\n          \"Readers\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Readers\"\n          },\n          \"Writers\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Writers\"\n          },\n          \"Admins\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"ANY Admins\"\n          },\n          \"LifecycleEndorsement\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"MAJORITY Endorsement\"\n          },\n          \"Endorsement\": {\n            \"Type\": \"ImplicitMeta\",\n            \"Rule\": \"MAJORITY Endorsement\"\n          }\n        },\n        \"Organizations\": [\n          \"Org1MSP\",\n          \"Org2MSP\"\n        ]\n      }\n    }\n  }\n}\nEOF\n\"create_mychannel\" # 200 OK with the proposal ID\n```\n \nThe command to get the proposal with the ID is the following:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/proposals/create_mychannel | jq\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"create_mychannel\",\n  \"channelID\": \"mychannel\",\n  \"description\": \"Create mychannel\",\n  \"creator\": \"Org1MSP\",\n  \"status\": \"proposed\",\n  \"opsProfile\": {\n    \"Application\": {\n      \"Capabilities\": [\n        \"V2_0\"\n      ],\n      \"Organizations\": [\n        \"Org1MSP\",\n        \"Org2MSP\"\n      ],\n(...)\n```\nThe command to vote for the proposal is:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/create_mychannel/vote\n\"\" # 200 OK\n```\n \nWhen creating a channel, it will be passed if a majority of the votes for the proposal are collected by the organizations participating in the _system_ channel. \nBy using the following command, wait for the status of the proposal to be committed:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/proposals/create_mychannel | jq\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"create_mychannel\",\n  \"channelID\": \"mychannel\",\n  \"description\": \"Create mychannel\",\n  \"creator\": \"Org1MSP\",\n  \"status\": \"committed\", # Updated the status to committed\n(...)\n```\nBy using the following command, you can confirm the channel information:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/getChannels | jq\n[\n  {\n    \"docType\": \"channel\",\n    \"ID\": \"mychannel\",\n    \"channelType\": \"application\",\n    \"organizations\": {\n      \"Org1MSP\": \"\",\n      \"Org2MSP\": \"\"\n    }\n  },\n  (...)\n]\n```\n \n",
                "original_header": "Create a new channel using the OpsSC"
            },
            "confidence": 0.9891505392976716,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "These commands are:\n```sh\n# Convert the endorsement policy for the chaincode to base64 because the API only accepts base64 encoded endorsement policy.\n$ echo -n /Channel/Application/Endorsement | base64\nL0NoYW5uZWwvQXBwbGljYXRpb24vRW5kb3JzZW1lbnQ=\n\n# Send the request\n$ curl -X POST http://localhost:5000/api/v1/chaincode/proposals/deploy_basic \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"chaincodeName\": \"basic\",\n    \"chaincodePackage\": {\n      \"repository\": \"github.com/hyperledger-labs/fabric-opssc\",\n      \"pathToSourceFiles\": \"sample-environments/fabric-samples/asset-transfer-basic/chaincode-go\",\n      \"commitID\": \"main\",\n      \"type\": \"golang\"\n    },\n    \"chaincodeDefinition\": {\n      \"sequence\": 1,\n      \"initRequired\": false,\n      \"validationParameter\": \"L0NoYW5uZWwvQXBwbGljYXRpb24vRW5kb3JzZW1lbnQ=\"\n    }\n  }\n}\nEOF\n{\"docType\":\"proposal\",\"ID\":\"deploy_basic\",\"creator\":\"Org1MSP\",\"channelID\":\"mychannel\",(...)} # 200 OK with the requested proposal\n```\n \nThe command to get the proposal with the ID is the following:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/chaincode/proposals/deploy_basic\n{\"docType\":\"proposal\",\"ID\":\"deploy_basic\",\"creator\":\"Org1MSP\",\"channelID\":\"mychannel\",\"chaincodeName\":\"basic\", ... ,\"status\":\"proposed\",...}\n```\nThe command to vote for the proposal is:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/chaincode/proposals/deploy_basic/vote\n\"\" # 200 OK\n```\n \nBy using the following command, wait for the status of the proposal to be committed:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/chaincode/proposals/deploy_basic | jq 'select(.status == \"committed\")' # wait for the status to be \"committed\"\n{\n  \"docType\": \"proposal\",\n  \"ID\": \"deploy_basic\",\n  (...)\n  \"status\": \"committed\",\n  (...)\n}\n```\nBy using the following commands, can confirm that the chaincode is deployed:\n```sh\n# Confirm basic is installed on the organization (the following command is for Org2MSP)\n$ curl -X GET 'http://localhost:5001/api/v1/chaincode/getInstalledChaincodes' | jq '.installed_chaincodes[] | select(.label == \"basic_1\")'\n{\n  \"package_id\": \"basic_1:7cb90e2dd24972089aaac0180a5c448f3fa7bb9b5cc990d9dcb66ae414e1c027\",\n  \"label\": \"basic_1\",\n  \"references\": {\n    \"mychannel\": {\n      \"chaincodes\": [\n        {\n          \"name\": \"basic\",\n          \"version\": \"1\"\n        }\n      ]\n    }\n  }\n}\n\n# Confirm basic is committed on mychannel (the following command is for Org2MSP)\n$ curl -X GET 'http://localhost:5001/api/v1/chaincode/queryChaincodeDefinition?channelID=mychannel&chaincodeName=basic' | jq\n{\n  \"sequence\": \"1\",\n  \"version\": \"1\",\n  \"endorsement_plugin\": \"escc\",\n  \"validation_plugin\": \"vscc\",\n  \"validation_parameter\": \"EiAvQ2hhbm5lbC9BcHBsaWNhdGlvbi9FbmRvcnNlbWVudA==\",\n  \"collections\": {},\n  \"approvals\": {\n    \"Org2MSP\": true,\n    \"Org1MSP\": true\n  }\n}\n```\nBy using the following commands, can invoke and query the chaincode as a test:\n```sh\n$ curl -X POST 'http://localhost:5000/api/v1/utils/invokeTransaction' \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"channelID\": \"mychannel\",\n  \"ccName\": \"basic\",\n  \"func\": \"CreateAsset\",\n  \"args\": [\"asset101\", \"blue\", \"5\", \"Tomoko\", \"300\"]\n}\nEOF\n\"\"\n\n$ curl -X GET 'http://localhost:5000/api/v1/utils/queryTransaction?channelID=mychannel&ccName=basic&func=GetAllAssets&args=[]' | jq\n[\n  {\n    \"ID\": \"asset101\",\n    \"color\": \"blue\",\n    \"size\": 5,\n    \"owner\": \"Tomoko\",\n    \"appraisedValue\": 300\n  }\n]\n```\n \n",
                "original_header": "Deploy a new chaincode by using the OpsSC"
            },
            "confidence": 0.9999973097674512,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "First, keys and certificates for peers and orderers for `Org4MSP` should be prepared.\nHere, execute the following utility script to launch a CA for `Org4MSP` and then issue keys and certificates for peers and orderers for `Org4MSP` using the CA.\n```sh\n# Launch a CA for Org4MSP and then issue keys and certificates for peers and orderers for Org4MSP using the CA\n$ ./create-org4-artifacts-for-test-network.sh\n\n# Convert keys and certificates (PEM files) to JSON and store them as environment variables (for simplifying the following steps)\n$ export ORG4_CA_CERT=$(cat organizations/peerOrganizations/org4.example.com/msp/cacerts/localhost-13054-ca-org4.pem | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_CA_CERT\"\n\n$ export ORG4_TLS_CA_CERT=$(cat organizations/peerOrganizations/org4.example.com/msp/tlscacerts/ca.crt | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_TLS_CA_CERT\"\n\n$ export ORG4_ORDERER_SERVER_TLS_CERT=$(cat organizations/peerOrganizations/org4.example.com/orderers/orderer0.org4.example.com/tls/server.crt | sed -e ':loop; N; $!b loop; s/\\n/\\\\n/g')\n$ echo \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n```\n \nNext, an administrator for `Org1MSP` sends a request for the channel update proposal to add `Org4MSP` to system-channel to the OpsSC API server. \nThe request is:\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_system-channel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"system-channel\",\n    \"description\": \"Add org4 to system channel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Consortiums|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_system-channel\" # 200 OK with the proposal ID\n```\nThen, an administrator for `Org2MSP` votes for the proposal via the API server:\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_system-channel/vote\n\"\"\n```\nDo the same for the remaining channels (ops-channel and mychannel):\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_ops-channel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"ops-channel\",\n    \"description\": \"Add org4 to ops-channel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Application|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_ops-channel\" # 200 OK with the proposal ID\n```\n \n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_ops-channel/vote\n\"\"\n```\n```sh\n$ curl -X POST http://localhost:5000/api/v1/channel/proposals/add_org4_to_mychannel \\\n-H \"Expect:\" \\\n-H 'Content-Type: application/json; charset=utf-8' \\\n-d @- <<EOF\n{\n  \"proposal\": {\n    \"channelID\": \"mychannel\",\n    \"description\": \"Add org4 to mychannel\",\n    \"action\": \"update\",\n    \"opsProfile\": [\n      {\n        \"Command\": \"set-org\",\n        \"Parameters\": {\n          \"OrgType\": \"Application|Orderer\",\n          \"Org\": {\n            \"Name\": \"Org4MSP\",\n            \"ID\": \"Org4MSP\",\n            \"MSP\": {\n              \"RootCerts\": [\n                \"$ORG4_CA_CERT\"\n              ],\n              \"TLSRootCerts\": [\n                \"$ORG4_TLS_CA_CERT\"\n              ],\n              \"NodeOUs\": {\n                \"Enable\": true,\n                \"ClientOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"client\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"PeerOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"peer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"AdminOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"admin\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                },\n                \"OrdererOUIdentifier\": {\n                  \"OrganizationalUnitIdentifier\": \"orderer\",\n                  \"Certificate\": \"$ORG4_CA_CERT\"\n                }\n              }\n            },\n            \"Policies\": {\n              \"Readers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.peer', 'Org4MSP.client')\"\n              },\n              \"Writers\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.client')\"\n              },\n              \"OrderingReaders\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"OrderingWriters\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin', 'Org4MSP.orderer')\"\n              },\n              \"Admins\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.admin')\"\n              },\n              \"Endorsement\": {\n                \"Type\": \"Signature\",\n                \"Rule\": \"OR('Org4MSP.peer')\"\n              }\n            },\n            \"AnchorPeers\": [\n              {\n                \"Host\": \"peer0.org4.example.com\",\n                \"Port\": 13051\n              }\n            ],\n            \"OrdererEndpoints\": [\n              \"orderer0.org4.example.com:13050\"\n            ]\n          }\n        }\n      },\n      {\n        \"Command\": \"set-consenter\",\n        \"Parameters\": {\n          \"Consenter\": {\n            \"Host\": \"orderer0.org4.example.com\",\n            \"Port\": 13050,\n            \"ClientTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\",\n            \"ServerTLSCert\": \"$ORG4_ORDERER_SERVER_TLS_CERT\"\n          }\n        }\n      }\n    ]\n  }\n}\nEOF\n\"add_org4_to_mychannel\" # 200 OK with the proposal ID\n```\n```sh\n$ curl -X POST http://localhost:5001/api/v1/channel/proposals/add_org4_to_mychannel/vote\n\"\"\n```\n \nBy using the following command, you can see that `Org4MSP` is added to each channel:\n```sh\n$ curl -X GET http://localhost:5001/api/v1/channel/getChannels | jq\n[\n  {\n    \"docType\": \"channel\",\n    \"ID\": \"mychannel\",\n    \"channelType\": \"application\",\n    \"organizations\": {\n      \"Org1MSP\": \"\",\n      \"Org2MSP\": \"\",\n      \"Org4MSP\": \"\" # Added\n    }\n  },\n  (...)\n]\n```\nNext, execute the following utility script to launch the peer, the ordering node, the OpsSC agent and the API server for `Org4MSP`:\n```sh\n# Launch the peer, the ordering node, the OpsSC agent and the API server for Org4MSP\n$ ./launch-org4-nodes-for-test-network.sh\n```\n \nBy running the following commands, you can confirm whether the agent and API server for `Org4MSP` get ready:\n```sh\n## Check for the API server for Org4MSP\n$ curl -X GET http://localhost:5003/healthz\nOK\n## Check for the agent for Or4MSP (NOTE: Take about 2-3 minutes to be \"OK\")\n$ curl -X GET http://localhost:5503/healthz\nOK\n```\nBy running the following commands, you can confirm that the nodes for `Org4MSP` get ready and\ndeployed `basic` chaincode which were deployed the previous operations.\n```sh\n$ export PATH=${PWD}/../bin:$PATH\n$ export FABRIC_CFG_PATH=$PWD/../config/\n\n$ export CORE_PEER_TLS_ENABLED=true\n$ export CORE_PEER_LOCALMSPID=\"Org4MSP\"\n$ export CORE_PEER_TLS_ROOTCERT_FILE=${PWD}/organizations/peerOrganizations/org4.example.com/peers/peer0.org4.example.com/tls/ca.crt\n$ export CORE_PEER_MSPCONFIGPATH=${PWD}/organizations/peerOrganizations/org4.example.com/users/Admin@org4.example.com/msp\n$ export CORE_PEER_ADDRESS=localhost:13051\n\n$ peer chaincode query -C mychannel -n basic -c '{\"Args\":[\"GetAllAssets\"]}'\n```\n \n",
                "original_header": "Add a new organization to each channel using the OpsSC"
            },
            "confidence": 0.9999001968053379,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "You can tear down the sample environment by using the following command.\n```sh\n$ cd ${FABRIC_OPSSC}/integration\n$ ./teardownDockerEnv.sh\n```\n \nIf any of the above steps fail in the middle, reset the environment with this command and try again.\n \n",
                "original_header": "(Optional.) Tear down the test network"
            },
            "confidence": 0.9988149428271103,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- The conditions for passing a proposal are assumed to be voted by a majority of the members of the target channel\n- Does not yet support deploying Java chaincode\n- Does not yet support using Channel participating API from v2.3.0\n \n",
                "original_header": "Limitations"
            },
            "confidence": 0.9446152653240507,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- Add a voting config option for chaincode-ops - ([Detail](./docs/VotingConfigOption.md))\n  - This allows OpsSC users to configure the maximum number of malicious organizations (`f`) in the voting process\n  - This config option is not yet supported for channel-ops\n- Add a function to update channel type and introduce `disable` channel type to channel-ops\n- Support both Hyperledger Fabric v2.4 and v2.2 series (Out of scope: v2.3)\n- Other minor improvements\n \n",
                "original_header": "v0.3.0 (Oct. 27, 2022)"
            },
            "confidence": 0.9999867319600916,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Text_excerpt",
                "value": "- The initial version of Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x\n  - Support chaincode operations (chaincode-ops): Streamline chaincode deployment with chaincode new lifecycle introduced from v2.x.\n  - Support channel operations (channel-ops): Streamline channel configuration updates across multiple organizations (e.g., creating a channel, adding an organization, adding an orderer etc.)\n \n",
                "original_header": "v0.1.0 (Jan. 9, 2021)"
            },
            "confidence": 0.9971267528052693,
            "technique": "supervised_classification",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "download": [
        {
            "result": {
                "value": "By running the following commands, download the binaries and docker images for Hyperledger Fabric used by test-network:\n\n```sh\n$ cd ${FABRIC_OPSSC}/sample-environments/fabric-samples\n$ export FABRIC_VERSION=2.5.2\n$ export FABRIC_CA_VERSION=1.5.6\n$ curl -sSL https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh | bash -s -- -f ${FABRIC_VERSION} -c ${FABRIC_CA_VERSION} b d\n\n$ ls bin # Confirm the target version binaries are downloaded\nconfigtxgen  configtxlator  cryptogen  discover  fabric-ca-client  fabric-ca-server  idemixgen  orderer  osnadmin  peer\n```\n\n`${FABRIC_OPSSC}` means the `fabric-opssc` directory.\n\nSee [the official documentation](https://hyperledger-fabric.readthedocs.io/en/latest/install.html) for more details.\n",
                "type": "Text_excerpt",
                "original_header": "Preparation 1: Download binaries and docker images for Hyperledger Fabric",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment",
                    "Preparations"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "run": [
        {
            "result": {
                "value": "Launch the test network by using the following commands:\n\n```sh\n$ cd ${FABRIC_OPSSC}/sample-environments/fabric-samples/test-network\n$ ./network.sh up -ca -i ${FABRIC_VERSION} -cai ${FABRIC_CA_VERSION}\n```\n",
                "type": "Text_excerpt",
                "original_header": "Run the test network",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "value": "See [the documents](./sample-environments/k8s-support/README.md)\n",
                "type": "Text_excerpt",
                "original_header": "Running with k8s environments",
                "parent_header": [
                    "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x",
                    "Try the OpsSC in the sample environment",
                    "Learn more"
                ]
            },
            "confidence": 1,
            "technique": "header_analysis",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "full_title": [
        {
            "result": {
                "type": "String",
                "value": "Operations Smart Contract (OpsSC) for Hyperledger Fabric v2.x"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "related_documentation": [
        {
            "result": {
                "type": "Url",
                "value": "https://hyperledger-fabric.readthedocs.io/",
                "format": "readthedocs"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "support_channels": [
        {
            "result": {
                "type": "Url",
                "value": "https://discord.com/invite/hyperledger"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ],
    "related_papers": [
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/ftp/arxiv/papers/2205/2205.04657.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/abs/1901.11249, pp.1-11, 2019.\n\n## Feedback and contribution welcome!\n\n- [Hyperledger Discord Chat](https://discord.com/invite/hyperledger)\n  - [fabric-opssc channel](https://discord.com/channels/905194001349627914/942805501681496094)\n- [GitHub Issues](https://github.com/hyperledger-labs/fabric-opssc/issues)\n\n## Prerequisites\n\n- Linux\n- Go >= 1.14\n- Node.js >= 16 (Tested by using v16.19.0)\n- Docker (assuming the current stable release)\n- Docker Compose (assuming the current stable release, OpsSC is tested with version 1.28.6)\n- Git\n- Curl (for trying the sample environment)\n- jq (for trying the sample environment)\n\n## Components\n\nThe current implementation of the OpsSC for Hyperledger Fabric v2.x consists of the following components:\n\n- [OpsSC chaincode](./chaincode): is a chaincode that provides functions to control operational workflows and stores requests for executing them and the operational histories as states. This also issues chaincode events including the operational instructions to administrators and agents. Currently, there are two chaincodes, one for operating chaincodes and one for operating channels.\n\n- [OpsSC API server](./opssc-api-server): is a REST API server provides an API for each organization's administrator to interact with (to invoke and/or query transactions to) the OpsSC chaincodes. In a typical use case, an administrator for an organization first requests a proposal of an operation (e.g., deploying a chaincode or updating a chanel) and then administrators for other organizations approve (vote for) the proposal.\n\n- [OpsSC agent](./opssc-agent): is an agent program for operating nodes (e.g., peers) for each organization according to the directions from the OpsSC chaincodes. Each agent listens to chaincode events issued by OpsSC chaincodes and, automatically executes operations to components for each organization based on the events and then submits the result of the operations to the OpsSC chaincodes.\n\n- [Fabric ConfigTX CLI](./configtx-cli): is a tiny channel / organization management CLI tool for Hyperledger Fabric v2.x. This tool outputs a new config transaction that controls channels and organizations based on some inputs. This tool internally uses [Config Transaction Library](https://github.com/hyperledger/fabric-config). This tool is internally used by the OpsSC agents and API servers.\n\nCurrently, the OpsSC chaincodes and the Fabric ConfigTX CLI are implemented in Go. On the other hand, the OpsSC agent and API server are implemented in TypeScript.\nThe main reason for using two languages is that the Fabric SDK Go is not yet GA at the time of development.\n\n## Folder structures\n\n```\n(fabric-opssc)\n|- chaincode/                  ... Source code for the OpsSC chaincodes (in Go)\n|   |- chaincode-ops/          ... Source code for the OpsSC chaincode for operating chaincode (in Go)\n|   |- channel-ops/            ... Source code for the OpsSC chaincode for operating channel (in Go)\n|- common/                     ... Source code for common features for the OpsSC agent and API server (in TypeScript)\n|- configtx-cli/               ... Source code for the Fabric ConfigTX CLI (in Go)\n|- docs/                       ... Documents for OpsSC (e.g., Design memo)\n|- integration/                ... Integration tests for the OpsSC (in TypeScript)\n|- opssc-agent/                ... Source code for the OpsSC agent (in TypeScript)\n|- opssc-api-server/           ... Source code for the OpsSC API server (in TypeScript)\n|- sample-environments/        ... Sample environments for trying to run the OpsSC\n|   |- fabric-samples/\n|       |- test-network        ... Docker-based sample environment (This is based on test-network in fabric-samples. This is internally used by the integration tests.)\n|   |- k8s-support/            ... K8s-based sample environment (This is based on test-network-k8s in fabric-samples.)\n|- Dockerfile-for-agent        ... Docker image definition for the OpsSC agent\n|- Dockerfile-for-api-server   ... Docker image definition for the OpsSC API server\n|- Makefile                    ... Make file to build docker images and run the integration tests etc.\n```\n\n## Assumed Hyperledger Fabric environment\n\nThe current implementation assumes the following Fabric network:\n\n- Hyperledger Fabric v2.5.0 or later (Tested by using v2.5.2)\n  - Also it works in v2.2.2 or later (Tested by using v2.2.12)\n- Fabric network configuration\n  - Using Fabric CAs\n  - Using Raft orderers\n  - Each organization has their one or more peers and one ore more orderers\n    - An orderer for each organization is required to operate channels including the system channel\n    - An peer for orderer organization is required to interact with the OpsSC to execute operations on orderers\n  - Having a channel for the OpsSC chaincodes (referred to \"ops channel\") and all organizations joins the channel\n    - The OpsSC chaincodes should be deployed to all organizations\n    - The OpsSC chaincodes on the ops channel is used for managing all channels and all chaincodes on the channels\n    - This channel configuration is to simplify the management of the OpsSC chaincodes\n  - Each organization has one or more agents and one or more API servers for that organization itself\n    - The agent and API server need to use a private key and certificate for the client identity to execute admin commands to all nodes owned by that organization\n\n## Try the OpsSC in the sample environment\n\nThis repository includes a sample environment for running the OpsSC based on [test-network in fabric-samples](https://github.com/hyperledger/fabric-samples/tree/main/test-network).\nRunning the OpsSC sample environment gives you a rough idea of how the OpsSC works and how to use it in a Fabric network.\n\n_NOTE:_ This sample will collide with the original test-network in fabric-samples and destroy the environment. So, please tear down the existing test-network environment before trying the sample.\n\nThe following shows how to set up this sample environment first. After that, as a typical example of decentralized operation using the OpsSC,\nit will explain a procedure for creating a new channel, deploying a new chaincode on the channel and adding a new organization using the OpsSC.\n\n### System configuration of the test-network\n\nThe original test-network provides scripts to run a simple Fabric test network and to create channels and deploy chaincodes in centralized manner.\nAfter deploying the test network, you can try to do decentralized operations over multiple organizations by using the OpsSC.\n\nThe test network customized for the OpsSC has the following initial configuration:\n\n- two peer organizations (`Org1MSP` and `Org2MSP`) with one peer each\n- a Raft orderer service, where each peer organization has an ordering node\n- each organization has an OpsSC API server instance and an OpsSC agent instance\n\nThe customized test network has the following differences from the original version:\n\n- Only works in an environment with Fabric CA\n- Added an orderer to each peer organization (Org1MSP and Org2MSP)\n- Removed the orderer organization (OrdererOrg)\n- Added docker-compose files for running an OpsSC API server for each organization\n- Added docker-compose files for running an OpsSC agent for each organization\n- Prepared docker-compose files for organizations that will be added later (Org3MSP and Org4MSP)\n- Added some utility scripts\n\n### Preparations\n\n#### Preparation 1: Download binaries and docker images for Hyperledger Fabric\n\nBy running the following commands, download the binaries and docker images for Hyperledger Fabric used by test-network:\n\n```sh\n$ cd ${FABRIC_OPSSC"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        },
        {
            "result": {
                "type": "Url",
                "value": "https://arxiv.org/ftp/arxiv/papers/1901/1901.11249.pdf"
            },
            "confidence": 1,
            "technique": "regular_expression",
            "source": "https://raw.githubusercontent.com/hyperledger-labs/fabric-opssc/main/README.md"
        }
    ]
}