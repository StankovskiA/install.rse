{
    "0": {
        "filename": "remine-lab_rrgen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/armor-ai/RRGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-28T11:28:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-03T03:06:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 127136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "1": {
        "filename": "zysszy_grammarcnn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zysszy/GrammarCNN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  * NLTK 3.2.1\n  * Tensorflow 1.3.1\n  * Python 3.5\n  * Ubuntu 16.04\n  * Java 1.8\n   \n",
                    "original_header": "Dependenices"
                },
                "confidence": 0.9998716282676484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zysszy/grammarcnn/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-02T15:27:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-20T06:20:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 111226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "2": {
        "filename": "coinse_sadl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coinse/sadl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[![DOI](https://zenodo.org/badge/159278402.svg)](https://zenodo.org/badge/latestdoi/159278402)\r\n\r\nCode release of a paper [\"Guiding Deep Learning System Testing using Surprise Adequacy\"](https://arxiv.org/abs/1808.08444)\r\n\r\nIf you find this paper helpful, consider cite the paper:\r\n\r\n```\r\n@inproceedings{Kim2019aa,\r\n\tAuthor = {Jinhan Kim and Robert Feldt and Shin Yoo},\r\n\tBooktitle = {Proceedings of the 41th International Conference on Software Engineering},\t\r\n\tPages = {1039-1049},\r\n\tPublisher = {IEEE Press},\r\n\tSeries = {ICSE 2019},\r\n\tTitle = {Guiding Deep Learning System Testing using Surprise Adequacy},\r\n\tYear = {2019}}\r\n}\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Guiding Deep Learning System Testing using Surprise Adequacy"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            },
            {
                "result": {
                    "value": "\r\n- `run.py` - Script processing SA with a benign dataset and adversarial examples (MNIST and CIFAR-10).\r\n- `sa.py` - Tools that fetch activation traces, compute LSA and DSA, and coverage.\r\n- `train_model.py` - Model training script for MNIST and CIFAR-10. It keeps the trained models in the \"model\" directory (code from [Ma et al.](https://github.com/xingjunm/lid_adversarial_subspace_detection)).\r\n- `model` directory - Used for saving models.\r\n- `tmp` directory - Used for saving activation traces and prediction arrays.\r\n- `adv` directory - Used for saving adversarial examples.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Files and Directories",
                    "parent_header": [
                        "Guiding Deep Learning System Testing using Surprise Adequacy",
                        "Introduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            },
            {
                "result": {
                    "value": "\r\n- `-d` - The subject dataset (either mnist or cifar). Default is mnist.\r\n- `-lsa` - If set, computes LSA.\r\n- `-dsa` - If set, computes DSA.\r\n- `-target` - The name of target input set. Default is `fsgm`.\r\n- `-save_path` - The temporal save path of AT files. Default is tmp directory.\r\n- `-batch_size` - Batch size. Default is 128.\r\n- `-var_threshold` - Variance threshold. Default is 1e-5.\r\n- `-upper_bound` - Upper bound of SA. Default is 2000.\r\n- `-n_bucket` - The number of buckets for coverage. Default is 1000.\r\n- `-num_classes` - The number of classes in dataset. Default is 10.\r\n- `-is_classification` - Set if task is classification problem. Default is True.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Command-line Options of run.py",
                    "parent_header": [
                        "Guiding Deep Learning System Testing using Surprise Adequacy",
                        "Introduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            },
            {
                "result": {
                    "value": "\r\nTo reproduce the result of [Udacity self-driving car challenge](https://github.com/udacity/self-driving-car/tree/master/challenges/challenge-2), please refer to the [DeepXplore](https://github.com/peikexin9/deepxplore) and [DeepTest](https://github.com/ARiSE-Lab/deepTest) repositories, which contain information about the dataset, models ([Dave-2](https://github.com/peikexin9/deepxplore/tree/master/Driving), [Chauffeur](https://github.com/udacity/self-driving-car/tree/master/steering-models/community-models/chauffeur)), and synthetic data generation processes. It might take a few hours to get the dataset and the models due to their sizes.\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Udacity Self-driving Car Challenge",
                    "parent_header": [
                        "Guiding Deep Learning System Testing using Surprise Adequacy",
                        "Introduction"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            },
            {
                "result": {
                    "value": "\r\n- If you encounter `ValueError: Input contains NaN, infinity or a value too large for dtype ('float64').` error, you need to increase the variance threshold. Please refer to the configuration details in the paper (Section IV-C).\r\n- Images were processed by clipping its pixels in between -0.5 and 0.5.\r\n- If you want to select specific layers, you can modify the layers array in `run.py`.\r\n- Coverage may vary depending on the upper bound.\r\n- For speed-up, use GPU-based tensorflow.\r\n- [All experimental results](https://coinse.github.io/sadl/)\r\n  \r",
                    "type": "Text_excerpt",
                    "original_header": "Notes",
                    "parent_header": [
                        "Guiding Deep Learning System Testing using Surprise Adequacy"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> [Update April, 2021] Checkout a recent  with fast, efficient implementation of SA: https://github.com/testingautomated-usi/surprise-adequacy. Big thanks to the authors! :smiley: \n"
                },
                "confidence": 0.954220282617401,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/sadl/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-27T04:58:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T07:11:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 20895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "3": {
        "filename": "som-research_dataset-descriptor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOM-Research/DescribeML",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest way to install the plugin is by using the **Visual Studio Code Market**. Just type \"describeML\" in the extension tab, and that's it!\n",
                    "type": "Text_excerpt",
                    "original_header": "Via marketplace",
                    "parent_header": [
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/som-research/dataset-descriptor/main/README.md"
            },
            {
                "result": {
                    "value": "Instead, you can install it manually using the packaged release of the plugin in this [repository](https://github.com/SOM-Research/DescribeML) that can be found at the root of the project. \n\nThe file is **DescribeML-1.2.1.vsix**\n\nOpen your terminal (or the terminal inside the VSCode) and write this:\n\n```\n\ngit clone https://github.com/SOM-Research/DescribeML.git datasets\ncd datasets \ncode --install-extension DescribeML-1.2.1.vsix\n```\n\n<span style=\"font-size:0.7em;\">*Troubles: If you cannot see the syntax highlight in the examples files (p.e. *Melanoma.descml*) as the image below. Please, reload the VSCode editor and write the code --install command again* </span>\n\nGreat! That's it.\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Manually",
                    "parent_header": [
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/som-research/dataset-descriptor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-12T11:01:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-28T16:41:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 319591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 222218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pug",
                    "name": "Pug",
                    "type": "Programming_language",
                    "size": 6550
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Twig",
                    "name": "Twig",
                    "type": "Programming_language",
                    "size": 3258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "4": {
        "filename": "tum-i22_cis-benchmark-evaluation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/CIS-Benchmark-Evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. We have set up a clean VM with the tested OS.\nIf the tested software was not an OS, we installed the software on a Windows 10 instance.\n2. We installed the [CIS-CAT tool](https://www.cisecurity.org/cybersecurity-tools/cis-cat-pro/) on the VM.\n3. We executed the OVAL checks of the tested CIS benchmark with the CIS-CAT tool on the VM.\nThe results are stored as `before.html`, e.g., [for Windows 10](https://github.com/tum-i22/CIS-Benchmark-Evaluation/blob/master/cis_win_10_1806/before.html).\n4. Next, we executed the automatic remediation of the benchmark using our generated scripts.\n5. Finally, we reran the OVAL checks.\nThis time, the results are stored as `after.html`, e.g., [for Windows 10](https://github.com/tum-i22/CIS-Benchmark-Evaluation/blob/master/cis_win_10_1806/after.html). \n",
                    "original_header": "CIS Benchmark Evaluation"
                },
                "confidence": 0.9917080761200409,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tum-i22/cis-benchmark-evaluation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-10T15:55:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-27T16:00:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 86443973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "5": {
        "filename": "apcl-research_jam-cgpt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apcl-research/Jam-CGPT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To set up your local environment, run the following command. We recommend the use of a virtual environment for running the experiments.\n```\npip install -r requirements.txt\n```  \n- **If you only want to make an inference with our models**, please see [Inference](#inference).\n- If you want to finetune a model using our processed and tokenized dataset, please see [Finetuning](#finetuning)\n- If you want to recompile our datasets, please see [Dataset](#dataset)\n \n",
                    "original_header": "To-do list"
                },
                "confidence": 0.9890006813101797,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After you download the test set named ``jam_cgpt_test.tar.gz`` in our [Hugginface repo](https://huggingface.co/datasets/apcl/Jam-CGPT/tree/main), you can simiply run command below for inference.\n```\nCUDA_DEVICE_ORDER='PCI_BUS_ID' CUDA_VISIBLE_DEVICES='0' OMP_NUM_THREADS=2 time torchrun --rdzv-backend=c10d --rdzv-endpoint=localhost:4000 --nnodes=1 --nproc_per_node=1 sample_jam_cgpt.py config/finetune_model_350m_dataset_170k.py  --prediction_filename=predict_data170k_model350m.txt\n```\n    --outdir: directory of the model that you want to use for inference\n    --prediction_filename: prediction file name \n    --outfilename: checkpoint file name\n    \nNote that you need to download checkpoint files our [Hugginface repo](https://huggingface.co/apcl/Jam-CGPT/tree/main) and put the checkpoint files to the same  ``dir`` as ``--out_dir`` in ``config/finetune_model_350m_dataset_170k.py`` if you just want to make an inference with our models.\n \n",
                    "original_header": "Inference"
                },
                "confidence": 0.9999985636455987,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also release all of our raw datasets for the experiments in our [Hugginface repo](https://huggingface.co/datasets/apcl/Jam-CGPT/tree/main) and the scripts for compiling the raw data to ``bin`` files in this Github repo. Before running the command, please create three dir: ``pkls``, ``bins``, and ``tmp``. Then, you can simply run the following command to generate ``train.bin`` and ``val.bin``.\n```\npython3 data/jam_cgpt_170k/prepare_fc_raw.py\n```\n- Note that you will need to put ``jam-cgpt-testfid.pkl``, ``jam-cgpt-valfid.pkl``, ``fundats-j1.pkl``, ``jam-cgpt-raw1.25m.pkl``, ``jam-cgpt-raw170k.pkl``, ``jam-cgpt-raw2.15m.pkl``, and ``jam-cgpt-raw620k.pkl`` to /nublar/datasets/jm52m/raw_data or you will need to change the parameters in the script.\n- Related parameters are as follows:\n  \n      --testfids-file: file lcation of function id on testset\n      --valfids-file: file location of function id on valset\n      --fundats-file: file location of function\n      --coms-file: file location of comments\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9998604576055732,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-10T14:30:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-05T21:44:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 123453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "6": {
        "filename": "swarnahub_summarizationprograms_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/swarnaHub/SummarizationPrograms",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This repository is tested on Python 3.8.12.  \nYou should install SummarizationPrograms on a virtual environment. All dependencies can be installed as follows:\n```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Summarization Programs (ICLR 2023)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/swarnahub/summarizationprograms/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In order to identify Summarization Programs for human summaries, execute the following steps.\n```\ncd sp_search\npython main.py\n```\nThe pre-trained modules are available for download [here](https://drive.google.com/drive/folders/1Wn9ZHF91hFbYC3cGNnAaWZe-TihF4taI?usp=sharing). For paraphrase, we directly used the model available [here](https://huggingface.co/tuner007/pegasus_paraphrase). Download the other two modules and place them inside the `modules` directory. \nCompute ROUGE scores for the SP-Search summaries by running\n```\ncd scripts\npython compute_spsearch_rouge.py\n``` \n",
                    "original_header": "RQ1: SP-Search"
                },
                "confidence": 0.9912162650889944,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/swarnahub/summarizationprograms/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-21T16:36:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-30T19:54:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 101719
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 578
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "7": {
        "filename": "salab_refsearch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salab/refsearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Launch the app\n   - `make up`\n   - or equivalently, `docker compose --compatibility up -d --build`\n2. Go to http://localhost:8080/ to view the app.\n   - See \"Usage\" below for how to use the app.\n3. Stop the app\n   - `make down`\n   - or equivalently, `docker compose down`\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "RefSearch",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salab/refsearch/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Playground: https://refsearch.toki317.dev/\n \n",
                    "original_header": "RefSearch"
                },
                "confidence": 0.980505627250361,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salab/refsearch/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-04T05:14:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-20T02:52:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 143732
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 34174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1616
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "8": {
        "filename": "gilgameshxyz123_dragon-alpha_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GilgameshXYZ123/Dragon-Alpha-v1.0",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**1.** cu32 now is only complied for 64-bit Windows, so kindly run Alpha\u2019s apps on such OS.<br>\n**2.** Please make sure: the JDK version is greater than 8.0<br>\n**3.** Please make sure: compute >= 61, sm >= 61<br>\n**4.** Kindly read \u201cArxiv.pdf\u201d first, to briefly understand Alpha.<br>\n**5.** Alpha has only been executed on GTX 1050, RTX 3060ti GPU, and presently its applications can only be executed on CUDA GPU.<br>\n**6.** Since I am the only-one programmer to build Alpha, I must pay my main attention to the code instead of the document, to complete Alpha\u2019s prototype in time. If you have some questions, just see the source-code. Sorry, my personal abilities are really limited.<br>  \n",
                    "original_header": "I.Pay-Attention"
                },
                "confidence": 0.9999897231908214,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gilgameshxyz123/dragon-alpha/v1.0/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Arxiv.pdf**  an article talking about the background, characteristics, architecture and experiments of Alpha, preprinted on arxiv.org, at: https://arxiv.org/abs/2305.08819.<br>\n- **exec**  the executable files of Alpha.\n  - **lib**  Java libraries of Alpha, which are jar-files complied by Java-code. Obviously, you need to add such jar files to your projects.<br>\n  - **native-lib**  native libraries of Dragon-Alpha. They are dynamic-linked-libraries, and integrated to Alpha at the bottom through JNI.<br>\n    - **cuda_float32**  contains the executable files of cu32. Presently, cu32 has only been complied for 64-bit Windows, and will be compiled for Linux in the near future<br>\n  - **icon**  Alpha\u2019s logo. If you like it, set it for Alpha\u2019s home directory. <br> \n  - **data**  Alphas\u2019 built-in data-sets, including MINIST, cifar-10, cifar-100 and Soccer. Please decompress before use them.<br> \n  - **src**  the source-code of Dragon-Alpha<br>\n  - **alpha_src**  the Java source-code of Alpha. You rename this directory to \u2018src\u2019 and integrate it to your own Java-project. I suggest using NetBeans to read such source-code, since I use NetBeans to build Alpha.<br>\n  - **zutil_src**  ZUtil is an auxiliary library for Alpha. Since I wrote it in my sophomore year, it may have some unreasonable aspects in programming-style and architecture. I only uploaded a part of it, so kindly use ZUTIL-STD-1.1.jar instead of the source-code.<br>\n  - **cu32_src**  the C++ source-code of cu32, consists of 13 Visual Studio (VS2017) projects. To open such projects on your PC, please make sure your VS can build CUDA projects. You also need to add jdk.include&jdk.lib to such projects (such as jni.h, jvm.lib). Since I use CUDA v11.3, I suggest you to use such version too.<br>\n- **experiments**  the related experimental code&data related to Arxiv.pdf.<br>\n  - **alpha-code**  the experimental code of Alpha, you can take it as examples, to create your own Alpha-app. Before using Alpha\u2019s API, you must specify the home-path of Alpha, in order to load the relative native libraries.<br>\n  ![image](https://github.com/GilgameshXYZ123/Dragon-Alpha/assets/65615049/2586a7d0-0226-4bae-a575-5d9e2c8bdf66)\n  - **pytorch-code**  the experimental code of PyTorch.<br>\n  - **experiment-data**  console output to track some metrics for both Alpha and PyTorch, in order to make a comparison.<br>\n  - **test_cuda**  some related code to test Alpha&cu32. You can take it as examples of using Alpha\u2019s operators.<br> \n",
                    "original_header": "II. Files"
                },
                "confidence": 0.999550396165609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gilgameshxyz123/dragon-alpha/v1.0/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-15T05:24:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T07:53:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 7829009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3304388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 8834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "9": {
        "filename": "practical-formal-methods_adiff_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Practical-Formal-Methods/adiff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-02-26T16:20:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-18T07:56:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 842991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 430380
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yacc",
                    "name": "Yacc",
                    "type": "Programming_language",
                    "size": 83619
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Logos",
                    "name": "Logos",
                    "type": "Programming_language",
                    "size": 25267
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 11072
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 6543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6501
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 6208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3567
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "10": {
        "filename": "centrality-checker_chrome-extension_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/centrality-checker/chrome-extension",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install the extension from **Chrome Web Store**: [Centrality Checker](https://chrome.google.com/webstore/detail/centrality-checker/bmpafkghbmojppjoeienibieljacdoaj).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Centrality Checker (Chrome Extension)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/centrality-checker/chrome-extension/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This extension embeds the centrality information about _npm_ packages when you browse a package on [npmjs.com](https://www.npmjs.com/).\n \n",
                    "original_header": "Centrality Checker (Chrome Extension)"
                },
                "confidence": 0.9823716233917131,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/centrality-checker/chrome-extension/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You first need to clone the repository locally:\n```sh\ngit clone https://github.com/centrality-checker/chrome-extension.git\n```\nThen, install the dependencies:\n```sh\nnpm install\n```\nTo build for the development environment and automatically update when you modify the source code:\n```sh\nnpm run watch\n```\nTo build for production:\n```sh\nnpm run build\n```\n \nThe `watch` command requires installing [Extensions Reloader](https://chrome.google.com/webstore/detail/extensions-reloader/fimgfedafeadlieiabdeeaodndnlbhid) to reload the unpacked extension automatically after source code modifications. \n",
                    "original_header": "Build From Source Code"
                },
                "confidence": 0.9999991684681171,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/centrality-checker/chrome-extension/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-03T14:52:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-25T15:53:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 9256
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 533
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "11": {
        "filename": "mdrafiqulrabin_tnpa-generalizability_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/tnpa-generalizability",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-09-29T19:48:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T06:55:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 41306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4153
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 1428
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "12": {
        "filename": "jarviswang94_mttm_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jarviswang94/MTTM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Register and get the API token from the official website of commercial content moderation softwares.\n2. python 3.6+\n3. transformer. It can be installed using pip as follows:\n\n    `pip install transformers`\n",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisites and Installing",
                    "parent_header": [
                        "MTTM Artifact",
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jarviswang94/mttm/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Besides this zip file, we also build a demo page on http://ariselab.cse.cuhk.edu.hk/projects.html.\n \n",
                    "original_header": "MTTM Artifact"
                },
                "confidence": 0.9962308425700545,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jarviswang94/mttm/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-08T02:42:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-19T14:58:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 105561
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "13": {
        "filename": "fastread_src_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fastread/src",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\n1. Setting up Python:\r\n  + We use anaconda by continuum.io (see [Why?](https://www.continuum.io/why-anaconda))\r\n    - We won't need the entire distribution. [Download](http://conda.pydata.org/miniconda.html) a Python 3.7+ & install a minimal version of anaconda.\r\n  + Make sure you select add to PATH during install.\r\n  + Next, run `setup.bat`. This will install all the dependencies needed to run the tool. Or:\r\n  + If the above does not work well. Remember you only need a Python 3.7 and three packages listed in `requirements.txt` installed. So `pip install -r requirements.txt` will work.\r\n\r\n2. Running script:\r\n  + Navigate to *src* and run `index.py`.\r\n  + If all is well, you'll be greeted by this:\r\n  ![](https://github.com/fastread/src/blob/master/tutorial/screenshots/run.png?raw=yes)\r\n\r\n3. The Interface:\r\n  + Fire up your browser and go to [`http://localhost:5000/`](http://localhost:5000/). You'll see a page like below:\r\n  ![](https://github.com/fastread/src/blob/master/tutorial/screenshots/start.png?raw=yes)\r\n    \r",
                    "type": "Text_excerpt",
                    "original_header": "Setting up FASTREAD"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fastread/src/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FASTREAD (FAST2) is a tool to support primary study selection in systematic literature review.\r\n\r\nLatest Versions:\r\n\r\n- On Github repo: [https://github.com/fastread/src](https://github.com/fastread/src).\r\n- In the Seacraft repository: [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.852663.svg)](https://doi.org/10.5281/zenodo.852663)\r\n\r\nCite as:\r\n\r\n\r \n"
                },
                "confidence": 0.9697869577836231,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fastread/src/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-04-17T20:59:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-14T15:24:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 26454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 21187
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 902
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 53
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "14": {
        "filename": "ctuning_cbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ctuning/cbench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/MacOS: \nWindows: \n"
                },
                "confidence": 0.995500723646355,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ctuning/cbench/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-05T13:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-22T23:58:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 165219
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "15": {
        "filename": "ryosuzuki_trace-diff_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ryosuzuki/trace-diff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```shell\nnpm install\nnpm start\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TraceDiff"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/ryosuzuki/trace-diff/raw/master/resources/concept.png\" width=\"500\"> \n",
                    "original_header": "Abstract"
                },
                "confidence": 0.9971502808514996,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/ryosuzuki/trace-diff/raw/master/resources/filter.png\" width=\"500\"> \n",
                    "original_header": "Filter"
                },
                "confidence": 0.9981554984788809,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/ryosuzuki/trace-diff/raw/master/resources/compare.png\" width=\"500\"> \n",
                    "original_header": "Highlight"
                },
                "confidence": 0.9971502808514996,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/ryosuzuki/trace-diff/raw/master/resources/trace.png\" width=\"500\"> \n",
                    "original_header": "Explore"
                },
                "confidence": 0.9963177888019066,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/ryosuzuki/trace-diff/raw/master/resources/abstract.png\" width=\"500\"> \n",
                    "original_header": "Abstraction"
                },
                "confidence": 0.9971502808514996,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ryosuzuki/trace-diff/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-04-03T14:56:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-06T10:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 203715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 80218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 18135
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1846
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "16": {
        "filename": "flitternie_coregen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Flitternie/CoreGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "All required packages and versions can be found in the environment configuration file `environment.yml`, or you may simply build an identical conda environment like this:\n\n```bash\nconda env create -f environment.yml\nconda activate coregen\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup Environment",
                    "parent_header": [
                        "CoreGen: Contextualized Code Representation Learning for Commit Message Generation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/flitternie/coregen/master/README.md"
            },
            {
                "result": {
                    "value": "Download the data [here](https://mycuhk-my.sharepoint.com/:u:/g/personal/1155079751_link_cuhk_edu_hk/EXsJ_2t1qtJHlFz9FEQe3swBx-Atm31Sg0cBbiDq6dW7ag?e=lUTeQQ) and unzip the dataset into the folder.\n",
                    "type": "Text_excerpt",
                    "original_header": "0. Data Preparation",
                    "parent_header": [
                        "CoreGen: Contextualized Code Representation Learning for Commit Message Generation",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/flitternie/coregen/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-25T13:22:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T20:53:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 74174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "17": {
        "filename": "cuhk-arise_aeon_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CUHK-ARISE/AEON",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Installing all the packages using `pip` is suggested:\n```\n$ pip install -r requirements.txt \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "AEON"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/cuhk-arise/aeon/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-25T11:53:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-07T07:19:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13692
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "18": {
        "filename": "vanhoanglepsa_neurallog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/NeuralLog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[//]: # ([PyTorch version]&#40;https://github.com/LogIntelligence/LogADEmpirical&#41;) \n",
                    "original_header": "Framework"
                },
                "confidence": 0.9998686982760133,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vanhoanglepsa/neurallog/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-13T18:59:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T15:02:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "19": {
        "filename": "bfsc_qmethod_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bfsc/qmethod",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone the repository\n\n```\ngit clone https://github.com/bfsc/qmethod\n```\n\nInstall Python 3 and then\n\n```\ncd qmethod\npython3 -m http.server 8080 --bind 127.0.0.1 \n```\nThen, you may access by typing on your browser address bar: 127.0.0.1:8080\n",
                    "type": "Text_excerpt",
                    "original_header": "UNIX based systems (GNU/Linux, MacOS)",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bfsc/qmethod/master/README.md"
            },
            {
                "result": {
                    "value": "Clone the repository using Github app.\n\nYou may use the same python 3 trick or download, install and then use Fenix web server: http://fenixwebserver.com/\n\n<a name=\"qme\">1</a>: https://www.betterevaluation.org/en/evaluation-options/qmethodology\n\n\nFor more information on how to configure and run Qmethod, head to the [wiki](https://github.com/bfsc/qmethod/wiki) or\ndownload our [guide.](https://github.com/bfsc/qmethod/blob/res/res/getting-started.pdf)\n",
                    "type": "Text_excerpt",
                    "original_header": "Windows 7/8/10:",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bfsc/qmethod/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-10T21:01:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-05T14:50:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 221788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 20248
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 10848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "20": {
        "filename": "halocore_synguar_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HALOCORE/SynGuar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Please see the `Build & Run` section in [README.md](./README.md) for a quick guide.\n\nThere are two ways to build and run this artifact:\n- With Docker: Please see [BuildRun-Docker.md](./docs/BuildRun-Docker.md) for details.  \n- Without Docker: Please see [BuildRun-Ubuntu.md](./docs/BuildRun-Ubuntu.md) for details.\n\nWe recommend using Docker and we also provide the docker image in case the build is not successful. See [BuildRun-Docker.md](./docs/BuildRun-Docker.md).",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/halocore/synguar/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "Details: See [BuildRun-Docker.md](./docs/BuildRun-Docker.md) for details.  \n\nSteps to run the docker container:\n  1. Make sure `docker` is running and can be controlled under the current user.\n  2. Run `./docker-build.sh` to build the docker image, or run `docker pull unionss/synguar:v0.1.1` and `docker tag unionss/synguar:v0.1.1 synguar:v1` to pull and rename the docker image in case the build is not successful.\n  3. Run `./docker-run.sh` to start a container that is running in the background from the built image.\n  4. Run `./docker-connect.sh` to connect to the running container, with a bash shell.\n  5. Run `./docker-stop.sh` to stop the running container.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set up tools using Docker",
                    "parent_header": [
                        "Build &amp; Run"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/halocore/synguar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here <img src=\"https://render.githubusercontent.com/render/math?math=%28%5Cepsilon%2C+%5Cdelta%29\"/>-generalization means with probability at least <img src=\"https://render.githubusercontent.com/render/math?math=1-%5Cdelta\"/>, the synthesized program <img src=\"https://render.githubusercontent.com/render/math?math=f\"/> has true error <img src=\"https://render.githubusercontent.com/render/math?math=%5Cmathbb%7BE%7D%5B%5Cmathbb%7BI%7D%5Bf%28x%29+%5Cneq+c%28x%29%5D%5D\"/> smaller than <img src=\"https://render.githubusercontent.com/render/math?math=%5Cepsilon\"/> with respect to the target function <img src=\"https://render.githubusercontent.com/render/math?math=c\"/> on the distribution <img src=\"https://render.githubusercontent.com/render/math?math=D\"/> where the I/O examples are sampled from. See [SynGuar-algorithm](./docs/proofs/proofs.pdf) for details about this algorithm.  \n",
                    "original_header": "Overview"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/halocore/synguar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-15T04:09:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-27T22:09:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 2320969
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 249965
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 126495
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Slash",
                    "name": "Slash",
                    "type": "Programming_language",
                    "size": 84231
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 57574
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 10315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1968
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yacc",
                    "name": "Yacc",
                    "type": "Programming_language",
                    "size": 1838
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1718
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 849
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lex",
                    "name": "Lex",
                    "type": "Programming_language",
                    "size": 825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "21": {
        "filename": "papermaterial4_icse2024comprehending_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "22": {
        "filename": "dlframeworkbug_dlframeworkbugsdata_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DLFrameworkBug/DLFrameworkBugsData",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "TensorFlow: https://github.com/tensorflow/tensorflow \nPyTorch: https://github.com/pytorch/pytorch \nMXNet: https://github.com/apache/incubator-mxnet \nDeeplearning4J: https://github.com/eclipse/deeplearning4j\n \n",
                    "original_header": "Repository"
                },
                "confidence": 0.9995136896242471,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlframeworkbug/dlframeworkbugsdata/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Triggered by muate_shape: https://github.com/tensorflow/tensorflow/issues/55214\n2. Triggered by mutate_para: https://github.com/tensorflow/tensorflow/issues/55201\n3. Triggered by mutate_type: https://github.com/tensorflow/tensorflow/issues/55285\n \n",
                    "original_header": "Preliminary application"
                },
                "confidence": 0.9999999999998579,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlframeworkbug/dlframeworkbugsdata/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-28T06:12:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-17T07:46:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "23": {
        "filename": "zhangjianzhang_chatgpt4reir_eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhangjianzhang/ChatGPT4REIR_eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-27T08:09:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-14T06:16:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 143764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5501
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "24": {
        "filename": "program-repair_repairthemall_experiment_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/program-repair/RepairThemAll_experiment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-11-28T08:18:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-27T09:35:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23416
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "25": {
        "filename": "kargaranamir_girt-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kargaranamir/girt-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-26T12:38:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T15:37:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "26": {
        "filename": "vasumv_bonsai-fuzzing_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vasumv/bonsai-fuzzing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-16T01:59:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-30T09:33:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 95722
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 44286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27681
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1276
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "27": {
        "filename": "ultimanecat_defectrepairing_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ultimanecat/DefectRepairing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The source code and some necessary scripts of our tool are in `./tool`. Please refer to \"readme.md\" in the directory \"./tool\" for details about tool setup. \n"
                },
                "confidence": 0.903258086862028,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ultimanecat/defectrepairing/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-07-30T15:38:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T08:56:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 141222
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 34273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4103
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "28": {
        "filename": "erfanwakka_universalmutator_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/erfanwakka/universalmutator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-22T07:13:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-05-06T15:22:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 106691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "29": {
        "filename": "yangyixiaof_codecompletionmodels_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yangyixiaof/CodeCompletionModels",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-10-21T09:00:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T09:01:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "30": {
        "filename": "pietroborrello_raindrop_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pietroborrello/raindrop",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-23T11:42:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-17T18:13:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "31": {
        "filename": "jungyhuk_latent-execution_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jungyhuk/latent-execution",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-11-23T03:50:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-09T05:56:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 39241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "32": {
        "filename": "privacyengineering_janus-value-anonymizer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/janus-value-anonymizer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```sh\r\nnpm install value-anonymizer\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "value-anonymizer",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/janus-value-anonymizer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-30T08:50:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-06T13:49:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 9750
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "33": {
        "filename": "trailofbits_echidna_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/crytic/echidna",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Before starting, make sure Slither is [installed](https://github.com/crytic/slither) (`pip3 install slither-analyzer --user`).\nIf you want to quickly test Echidna in Linux or MacOS, we provide statically linked Linux binaries built on Ubuntu and mostly static MacOS binaries on our [releases page](https://github.com/crytic/echidna/releases). You can also grab the same type of binaries from our [CI pipeline](https://github.com/crytic/echidna/actions?query=workflow%3ACI+branch%3Amaster+event%3Apush), just click the commit to find binaries for Linux or MacOS.\n",
                    "type": "Text_excerpt",
                    "original_header": "Precompiled binaries",
                    "parent_header": [
                        "Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "value": "If you have Homebrew installed on your Mac or Linux machine, you can install Echidna and all of its dependencies (Slither, crytic-compile) by running `brew install echidna`.\n\nYou can also compile and install the latest `master` branch code by running `brew install --HEAD echidna`\n\nYou can get further information in the [`echidna` Homebrew Formula](https://formulae.brew.sh/formula/echidna) page. The formula itself is maintained as part of the [homebrew-core repository](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/e/echidna.rb)\n",
                    "type": "Text_excerpt",
                    "original_header": "Homebrew (macOS / Linux)",
                    "parent_header": [
                        "Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "value": "If you prefer to use a pre-built Docker container, check out our [docker\npackage](https://github.com/orgs/crytic/packages?repo_name=echidna), which is\nauto-built via GitHub Actions. The `echidna` container is based on\n`ubuntu:focal` and it is meant to be a small yet flexible enough image to use\nEchidna on. It provides a pre-built version of `echidna`, as well as\n`slither`, `crytic-compile`, `solc-select` and `nvm` under 200 MB.\n\nNote that the container images currently only build on x86 systems. Running them\non ARM devices, such as Mac M1 systems, is not recommended due to the performance\nloss incurred by the CPU emulation.\n\nDifferent tags are available for the Docker container image:\n\n| Tag           | Build in tag\n|---------------|-------------\n| `vx.y.z`      | Build corresponding to release `vx.y.z`\n| `latest`      | Latest Echidna tagged release.\n| `edge`        | Most recent commit on the default branch.\n| `testing-foo` | Testing build based on the `foo` branch.\n\nTo run the container with the latest Echidna version interactively, you can use\nsomething like the following command. It will map the current directory as\n`/src` inside the container, and give you a shell where you can use\n`echidna`:\n\n```sh\n$ docker run --rm -it -v `pwd`:/src ghcr.io/crytic/echidna/echidna\n```\n\nOtherwise, if you want to locally build the latest version of Echidna, we\nrecommend using Docker. From within a clone of this repository, run the\nfollowing command to build the Docker container image:\n\n```sh\n$ docker build -t echidna -f docker/Dockerfile --target final-ubuntu .\n```\n\nThen, you can run the `echidna` image locally. For example, to install solc\n0.5.7 and check `tests/solidity/basic/flags.sol`, you can run:\n\n```sh\n$ docker run -it -v `pwd`:/src echidna bash -c \"solc-select install 0.5.7 && solc-select use 0.5.7 && echidna /src/tests/solidity/basic/flags.sol\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker container",
                    "parent_header": [
                        "Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "value": "If you'd prefer to build from source, use [Stack](https://docs.haskellstack.org/en/stable/README/). `stack install` should build and compile `echidna` in `~/.local/bin`. You will need to link against libreadline and libsecp256k1 (built with recovery enabled), which should be installed with the package manager of your choosing. You also need to install the latest release of [libff](https://github.com/scipr-lab/libff). Refer to our [CI tests](.github/scripts/install-libff.sh) for guidance.\n\nSome Linux distributions do not ship static libraries for certain things that Haskell needs, e.g. Arch Linux, which will cause `stack build` to fail with linking errors because we use the `-static` flag. In that case, use `--flag echidna:-static` to produce a dynamically linked binary.\n\nIf you're getting errors building related to linking, try tinkering with `--extra-include-dirs` and `--extra-lib-dirs`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Building using Stack",
                    "parent_header": [
                        "Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "value": "[Nix users](https://nixos.org/download.html) can install the latest Echidna with:\n\n```sh\n$ nix-env -i -f https://github.com/crytic/echidna/tarball/master\n```\n\nWith flakes enabled, you can run Echidna straight from this repo:\n```sh\n$ nix run github:crytic/echidna # master\n$ nix run github:crytic/echidna/v2.1.1 # specific ref (tag/branch/commit)\n```\n\nTo build a standalone release for non-Nix macOS systems, the following will\nbuild Echidna in a mostly static binary. This can also be used on Linux systems\nto produce a fully static binary.\n\n```sh\n$ nix build .#echidna-redistributable\n```\n\nNix will automatically install all the dependencies required for development\nincluding `crytic-compile` and `solc`. A quick way to start developing Echidna:\n\n```sh\n$ git clone https://github.com/crytic/echidna\n$ cd echidna\n$ nix develop # alternatively nix-shell\n[nix-shell]$ cabal run echidna\n[nix-shell]$ cabal run tests\n[nix-shell]$ cabal new-repl\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Building using Nix (works natively on Apple M1 systems)",
                    "parent_header": [
                        "Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://i.imgur.com/saFWti4.png\"><img src=\"https://i.imgur.com/saFWti4.png\" width=\"650\"/></a>\n \n",
                    "original_header": "Features"
                },
                "confidence": 0.9992148756636572,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Description | Issue | Status |\n| :---        | :---: | :---:  |\n| Vyper support is limited | [#652](https://github.com/crytic/echidna/issues/652) | *wont fix* |\n| Limited library support for testing | [#651](https://github.com/crytic/echidna/issues/651) | *wont fix* |\n \n",
                    "original_header": "Limitations and known issues"
                },
                "confidence": 0.96679119055123,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/trailofbits/echidna/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-08-27T23:13:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T15:10:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 307449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 298955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 7769
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2086
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "34": {
        "filename": "smallkeychen_robot_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Testing4AI/RobOT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "gen_adv.py is to generate adversarial inputs for test selection and robustness evaluation. You could also use toolbox like <a href=\"https://github.com/cleverhans-lab/cleverhans\" target=\"_blank\">cleverhans</a> for the test case generation.  \n\nFor testing methods (DeepXplore, DLFuzz, ADAPT), we use the code repository <a href=\"https://github.com/kupl/ADAPT\" target=\"_blank\">ADAPT</a>.  \nFor testing methods (AEQUITAS, ADF), we use the code repository <a href=\"https://github.com/pxzhang94/ADF\" target=\"_blank\">ADF</a>. \n \n",
                    "original_header": "Functions"
                },
                "confidence": 0.9658851726632259,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smallkeychen/robot/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-03T13:36:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-08T08:51:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "35": {
        "filename": "bthink-bgu_papers-2022-bp-pn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bThink-BGU/Papers-2022-BP-PN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-10-10T15:49:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-27T15:15:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 360210
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 42502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 25475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22295
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "36": {
        "filename": "jl-wei_apia2022-french-user-reviews-classification-dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jl-wei/APIA2022-French-user-reviews-classification-dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*App review, user review, requirements engineering, text classification* \n\n| App            | Total | Rating | Bug report | Feature request | User experience |\n| -------------- | ----- | ------ | ---------- | --------------- | --------------- |\n| Garmin Connect | 2000  | 1260   | 757        | 170             | 493             |\n| Huawei Health  | 2000  | 1068   | 819        | 384             | 289             |\n| Samsung Health | 2000  | 1324   | 491        | 486             | 349             | \n",
                    "original_header": "APIA2022-French-user-reviews-classification-dataset"
                },
                "confidence": 0.9615529211705942,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jl-wei/apia2022-french-user-reviews-classification-dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-31T15:47:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-09T20:03:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "37": {
        "filename": "fsoft-ai4code_codesync-tool_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FSoft-AI4Code/DocChecker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. (Optional) Creating conda environment\n\n```bash\nconda create -n docchecker python=3.8\nconda activate docchecker\n```\n\n2. Install from [PyPI](https://pypi.org/project/docchecker/):\n```bash\npip install docchecker\n```\n    \n3. Alternatively, build DocChecker from source:\n\n```bash\ngit clone https://github.com/FSoft-AI4Code/DocChecker.git\ncd DocChecker\npip install -r requirements.txt .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Guide"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fsoft-ai4code/codesync-tool/main/README.md"
            },
            {
                "result": {
                    "value": "Setup environment and install dependencies for pre-training.\n```bash\ncd ./DocChecker\npip -r install requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation for Pre-training",
                    "parent_header": [
                        "Getting Started",
                        "Pre-training Pipeline"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fsoft-ai4code/codesync-tool/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-08T20:39:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T23:16:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 116252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "38": {
        "filename": "yylonly_servenet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yylonly/ServeNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* docker build . -t servenet:cpu -f Dockerfile-CPU\n* docker run -itd --rm --name servenet-cpu -p 8888:8888 -v /yourpath:/data servenet:cpu \n",
                    "original_header": "CPU"
                },
                "confidence": 0.9998103256514052,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/servenet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* docker build . -t servenet:gpu -f Dockerfile-GPU\n* docker run -itd --rm --runtime=nvidia --name servenet-gpu -p 8888:8888 -v /yourpath:/data servenet:gpu \n",
                    "original_header": "GPU"
                },
                "confidence": 0.9999791183379634,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/servenet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-13T14:49:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T15:27:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 37231194
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 164850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "39": {
        "filename": "consult-kcl_fhir-ehr-adapter_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kclconsult/ehr-fhir-converter",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run setup tools from the root directory:\n\n```\npython setup.py sdist bdist_wheel\n```\n\nGiven a certain release, either available in ``dist/`` if built, or via Github, install as follows:\n\n```\npython setup.py install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install as package",
                    "parent_header": [
                        "EHR-FHIR Converter"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Build these containers:\n```\ndocker-compose build\n```\nRun these containers:\n```\ndocker-compose up -d\n```\n(Optional) Run without queue:\n```\ndocker-compose up --scale webapp-queue=0 rabbit=0\n```\n \n",
                    "original_header": "Deployment"
                },
                "confidence": 0.9817946320192527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/martinchapman/nokia-health/tags).\n \n",
                    "original_header": "Versioning"
                },
                "confidence": 0.9351360543374216,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-16T11:33:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T04:03:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 272
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "40": {
        "filename": "s3l-official_fischer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S3L-official/FISCHER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-23T07:37:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-30T07:02:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 678224407
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14589850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 777052
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 372672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 271123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 105170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2043
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "41": {
        "filename": "emresearch_evomaster_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WebFuzzing/EvoMaster",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<img src=\"https://github.com/WebFuzzing/EvoMaster/blob/master/docs/img/LOGO_ERC-FLAG_EU_.jpg?raw=true\" width=\"200\" > \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9996825604380734,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emresearch/evomaster/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-05-25T09:11:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T10:32:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 5375271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3896110
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 473637
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 236064
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 85656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 44629
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Thrift",
                    "name": "Thrift",
                    "type": "Programming_language",
                    "size": 29518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 19075
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 15207
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 12853
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLSQL",
                    "name": "PLSQL",
                    "type": "Programming_language",
                    "size": 5361
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 4287
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 2224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "42": {
        "filename": "bisc_coco-case-studies_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bisc/coco-case-studies",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The goal of the analysis is to reproduce the performance measurements of confidence monitors as reported in Tables 1 and 2 in the paper references above.\n\nTo run the analysis scripts, you would need to dowload and install a free version of the Wolfram Engine: \n\n1) Download and install the [Wolfram Engine](https://www.wolfram.com/engine/) for your operating system. \n2) Create a Wolfram ID account (if you do not have one). \n3) Accept the terms of the [free license](https://www.wolfram.com/engine/free-license)\n4) Run \"wolframscript\" in your command line\n5) Input your Wolfram ID and password into the prompt\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Wolfram Script",
                    "parent_header": [
                        "Confidence Composition: Case Studies"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bisc/coco-case-studies/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-25T20:52:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-26T01:05:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Mathematica",
                    "name": "Mathematica",
                    "type": "Programming_language",
                    "size": 17278100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 702
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 54
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "43": {
        "filename": "uclmr_pycodesuggest_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uclnlp/pycodesuggest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python3 github-scraper/scraper.py --mode=recreate --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=/FULL/PATH/TO/pycodesuggest/data/cloned_repos.dat --githubuser=<GITHUB USERNAME>` \nWhere outdir is the path on your local machine where the repos will be cloned. Note that the dbfile path should be the *full* path on your machine. You may be prompted for your Github password. \n`python3 github-scraper/scraper.py --mode=new --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=cloned_repos.dat --githubuser=<GITHUB USERNAME>` \n",
                    "original_header": "Step 1: Cloning the Repos"
                },
                "confidence": 0.9923783817598686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/Mac OS: Run the following command in your output directory to remove non Python files \n",
                    "original_header": "Step 2: (OPTIONAL): Remove unnecessary files"
                },
                "confidence": 0.9999945120484124,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command to normalise all files with a .py extension by providing the output directory of step 1 as the path. The normalised files will be written to a new directory with \"normalised\" appended to the path.  \n`python3 github-scraper/normalisation.py --path=<PATH TO DOWNLOADED CORPUS>` \nFiles which can't be parsed as valid Python3 will be ignored. The list of successfully processed files is written to PATH/processed.txt which also allows for the normalisation to continue if interrupted. \n \n",
                    "original_header": "Step 3: Normalisation"
                },
                "confidence": 0.9839889145044789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use the same train/dev/test split as used in the paper, copy the files train_files.txt, valid_files.txt and test_files.txt from the data directory into the downloaded corpus and normalised corpus directories. \nTo generate a new split, run the following command which generates the list of train files (train_files.txt), validation files (valid_files.txt) and test files (test_files.txt) in the ratio 0.5/0.2/0.3. Use the **normalised** path from the previous step. This will ensure that the list of files is available in both the normalised and unnormalised data sets.  \n`python3 github-scraper/processFiles.py --path=<PATH TO NORMALISED CORPUS>` \n",
                    "original_header": "Step 4: Split into train/dev/test"
                },
                "confidence": 0.9989774203821393,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-01-31T17:18:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-25T18:29:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 170626
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "44": {
        "filename": "ricseclab_sloptaflpp_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RICSecLab/SLOPTAFLpp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation instructions\n\n  This document provides basic installation instructions and discusses known\n  issues for a variety of platforms. See README.md for the general instruction\n  manual.\n\n## 1. Linux on x86\n---------------\n\nThis platform is expected to work well. Compile the program with:\n\n```bash\nmake\n```\n\nYou can start using the fuzzer without installation, but it is also possible to\ninstall it with:\n\n```bash\nsudo make install\n```\n\nThere are no special dependencies to speak of; you will need GNU make and a\nworking compiler (gcc or clang). Some of the optional scripts bundled with the\nprogram may depend on bash, gdb, and similar basic tools.\n\nIf you are using clang, please review README.llvm.md; the LLVM\nintegration mode can offer substantial performance gains compared to the\ntraditional approach.\n\nLikewise, if you are using GCC, please review instrumentation/README.gcc_plugin.md.\n\nYou may have to change several settings to get optimal results (most notably,\ndisable crash reporting utilities and switch to a different CPU governor), but\nafl-fuzz will guide you through that if necessary.\n\n## 2. OpenBSD, FreeBSD, NetBSD on x86\n\nSimilarly to Linux, these platforms are expected to work well and are\nregularly tested. Compile everything with GNU make:\n\n```bash\ngmake\n```\n\nNote that BSD make will *not* work; if you do not have gmake on your system,\nplease install it first. As on Linux, you can use the fuzzer itself without\ninstallation, or install it with:\n\n```\nsudo gmake install\n```\n\nKeep in mind that if you are using csh as your shell, the syntax of some of the\nshell commands given in the README.md and other docs will be different.\n\nThe `llvm` requires a dynamically linked, fully-operational installation of\nclang. At least on FreeBSD, the clang binaries are static and do not include\nsome of the essential tools, so if you want to make it work, you may need to\nfollow the instructions in README.llvm.md.\n\nBeyond that, everything should work as advertised.\n\nThe QEMU mode is currently supported only on Linux. I think it's just a QEMU\nproblem, I couldn't get a vanilla copy of user-mode emulation support working\ncorrectly on BSD at all.\n\n## 3. MacOS X on x86 and arm64 (M1)\n\nMacOS X should work, but there are some gotchas due to the idiosyncrasies of\nthe platform. On top of this, I have limited release testing capabilities\nand depend mostly on user feedback.\n\nTo build AFL, install llvm (and perhaps gcc) from brew and follow the general\ninstructions for Linux. If possible avoid Xcode at all cost.\n\nafl-gcc will fail unless you have GCC installed, but that is using outdated\ninstrumentation anyway. You don't want that.\n\nThe crash reporting daemon that comes by default with MacOS X will cause\nproblems with fuzzing. You need to turn it off by following the instructions\nprovided here: http://goo.gl/CCcd5u\n\nThe `fork()` semantics on OS X are a bit unusual compared to other unix systems\nand definitely don't look POSIX-compliant. This means two things:\n\n  - Fuzzing will be probably slower than on Linux. In fact, some folks report\n    considerable performance gains by running the jobs inside a Linux VM on\n    MacOS X.\n  - Some non-portable, platform-specific code may be incompatible with the\n    AFL forkserver. If you run into any problems, set `AFL_NO_FORKSRV=1` in the\n    environment before starting afl-fuzz.\n\nUser emulation mode of QEMU does not appear to be supported on MacOS X, so\nblack-box instrumentation mode (`-Q`) will not work.\nHowever Frida mode (`-O`) should work on x86 and arm64 MacOS boxes.\n\nMacOS X supports SYSV shared memory used by AFL's instrumentation, but the\ndefault settings aren't usable with AFL++. The default settings on 10.14 seem\nto be:\n\n```bash\n$ ipcs -M\nIPC status from <running system> as of XXX\nshminfo:\n        shmmax: 4194304 (max shared memory segment size)\n        shmmin:       1 (min shared memory segment size)\n        shmmni:      32 (max number of shared memory identifiers)\n        shmseg:       8 (max shared memory segments per process)\n        shmall:    1024 (max amount of shared memory in pages)\n```\n\nTo temporarily change your settings to something minimally usable with AFL++,\nrun these commands as root:\n\n```bash\nsysctl kern.sysv.shmmax=8388608\nsysctl kern.sysv.shmall=4096\n```\n\nIf you're running more than one instance of AFL you likely want to make `shmall`\nbigger and increase `shmseg` as well:\n\n```bash\nsysctl kern.sysv.shmmax=8388608\nsysctl kern.sysv.shmseg=48\nsysctl kern.sysv.shmall=98304\n```\n\nSee http://www.spy-hill.com/help/apple/SharedMemory.html for documentation for\nthese settings and how to make them permanent.\n\n## 4. Linux or *BSD on non-x86 systems\n\nStandard build will fail on non-x86 systems, but you should be able to\nleverage two other options:\n\n  - The LLVM mode (see README.llvm.md), which does not rely on\n    x86-specific assembly shims. It's fast and robust, but requires a\n    complete installation of clang.\n  - The QEMU mode (see qemu_mode/README.md), which can be also used for\n    fuzzing cross-platform binaries. It's slower and more fragile, but\n    can be used even when you don't have the source for the tested app.\n\nIf you're not sure what you need, you need the LLVM mode, which is built by\ndefault.\n\n...and compile your target program with afl-clang-fast or afl-clang-fast++\ninstead of the traditional afl-gcc or afl-clang wrappers.\n\n## 5. Solaris on x86\n\nThe fuzzer reportedly works on Solaris, but I have not tested this first-hand,\nand the user base is fairly small, so I don't have a lot of feedback.\n\nTo get the ball rolling, you will need to use GNU make and GCC or clang. I'm\nbeing told that the stock version of GCC that comes with the platform does not\nwork properly due to its reliance on a hardcoded location for 'as' (completely\nignoring the `-B` parameter or `$PATH`).\n\nTo fix this, you may want to build stock GCC from the source, like so:\n\n```sh\n./configure --prefix=$HOME/gcc --with-gnu-as --with-gnu-ld \\\n  --with-gmp-include=/usr/include/gmp --with-mpfr-include=/usr/include/mpfr\nmake\nsudo make install\n```\n\nDo *not* specify `--with-as=/usr/gnu/bin/as` - this will produce a GCC binary that\nignores the `-B` flag and you will be back to square one.\n\nNote that Solaris reportedly comes with crash reporting enabled, which causes\nproblems with crashes being misinterpreted as hangs, similarly to the gotchas\nfor Linux and MacOS X. AFL does not auto-detect crash reporting on this\nparticular platform, but you may need to run the following command:\n\n```sh\ncoreadm -d global -d global-setid -d process -d proc-setid \\\n  -d kzone -d log\n```\n\nUser emulation mode of QEMU is not available on Solaris, so black-box\ninstrumentation mode (`-Q`) will not work.\n\n## 6. Everything else\n\nYou're on your own. On POSIX-compliant systems, you may be able to compile and\nrun the fuzzer; and the LLVM and GCC plugin modes may offer a way to instrument\nnon-x86 code.\n\nThe fuzzer will run on Windows in WSL only. It will not work under Cygwin on in the normal Windows world. It\ncould be ported to the latter platform fairly easily, but it's a pretty bad\nidea, because Cygwin is extremely slow. It makes much more sense to use\nVirtualBox or so to run a hardware-accelerated Linux VM; it will run around\n20x faster or so. If you have a *really* compelling use case for Cygwin, let\nme know.\n\nAlthough Android on x86 should theoretically work, the stock kernel may have\nSHM support compiled out, and if so, you may have to address that issue first.\nIt's possible that all you need is this workaround:\n\n  https://github.com/pelya/android-shmem\n\nJoshua J. Drake notes that the Android linker adds a shim that automatically\nintercepts `SIGSEGV` and related signals. To fix this issue and be able to see\ncrashes, you need to put this at the beginning of the fuzzed program:\n\n```sh\n  signal(SIGILL, SIG_DFL);\n  signal(SIGABRT, SIG_DFL);\n  signal(SIGBUS, SIG_DFL);\n  signal(SIGFPE, SIG_DFL);\n  signal(SIGSEGV, SIG_DFL);\n```\n\nYou may need to `#include <signal.h>` first.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/docs/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can pull the prebuilt docker images via docker hub:\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/slopt-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/karamcheti-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/cmfuzz-aflpp\n  - https://hub.docker.com/repository/docker/ricsec1hugeh0ge/havoc_mab-aflpp \nAlternatively, you can use Dockerfile in the top directory of each branch to build these images locally.\nMoreover, of course you can build these fuzzers in almost the same way as the unaltered AFL++ on the host environment because they additionally require only the GNU Scientific Library. In Debian/Ubuntu, it can be installed as the package `libgsl-dev`. \n",
                    "original_header": "How to build"
                },
                "confidence": 0.9995869810405229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run these benchmarks, please follow the instructions of FuzzBench and Magma:\n  - https://google.github.io/fuzzbench/getting-started/adding-a-new-fuzzer/\n  - https://hexhive.epfl.ch/magma/docs/getting-started.html \nFor Magma, we also made it possible to take the benchmark with one command in https://github.com/RICSecLab/SLOPT_magma. \n",
                    "original_header": "How to take the benchmarks taken in our paper"
                },
                "confidence": 0.9989998724785716,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ricseclab/sloptaflpp/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-29T06:25:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T04:12:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3525825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 675284
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 196338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 162408
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 150621
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 36006
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 11023
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1654
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CodeQL",
                    "name": "CodeQL",
                    "type": "Programming_language",
                    "size": 1377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "45": {
        "filename": "jetbrains-research_psiminer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/psiminer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`PSIMiner` requires Java 11 for correct work.\nCheck gradle will use the correct version.\nAll other dependencies will be installed automatically.\n\nUse `./gradlew build` (or `gradlew.bat build` on Windows) to build the tool.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "`PSIMiner`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jetbrains-research/psiminer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-20T08:17:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-13T16:56:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 196405
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 8788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 1952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 925
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "46": {
        "filename": "e0hyl_finer-explain_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/E0HYL/FINER-explain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\n```shell\r\nconda env create --name FINER --file finer.yml\r\nconda activate FINER\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "FINER"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/e0hyl/finer-explain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-06T12:36:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T04:18:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 152601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "47": {
        "filename": "andrecostea_hippodrome_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/verse-lab/hippodrome",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. install antlr to your local maven repository:\n\n`mvn install:install-file -Dfile=\"<path-to-your-antlr-for-java-jar>\" -DgroupId=org.racerdfix.antlr -DartifactId=antlr -Dversion=1.0 -Dpackaging=jar`\n\n2. set the path to local `infer` (the version recommended earlier) and the options expected to run with in `src/main/resources/APP_CONFIG.json`:\n```json\n{\n  \"infer\": \"<path-to-infer>/infer/infer/bin/infer\",\n  \"infer_options\": [\"--racerdfix-only\", \"--starvation\", \"--no-deduplicate\", <list-of-strings-representing-additional-infer-options>],\n  \"json_path\": \"./infer-out/\",\n}\n```\nwhere\n* ``infer`` sets the path to the running infer\n* ``options`` sets the options passed to the infer process\n* ``json_path`` indicates the path to the directory where infer writes its reports\n \n\n3. install HIPPODROME:\n`mvn install` (from the project's main directory); \nuse `mvn install -Dmaven.test.skip=true` to skip the testing phase\n \n",
                    "type": "Text_excerpt",
                    "original_header": "Install HIPPODROME:",
                    "parent_header": [
                        "HIPPODROME",
                        "Setup and Build"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/andrecostea/hippodrome/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Solution: makes sure you have installed the infer version we recommended and that you have correctly set the path to this version in your `APP_CONFIG.json` file, or in `CONFIG.json`. \n",
                    "original_header": "Common execution issues"
                },
                "confidence": 0.999999644258174,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/andrecostea/hippodrome/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-22T01:53:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-09T14:14:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 162313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 141937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 335
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "48": {
        "filename": "hajipour_simscood_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hajipour/SimSCOOD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-24T12:34:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-24T12:34:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "49": {
        "filename": "wellido_aries_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wellido/Aries",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- PACE code is from https://github.com/pace2019/pace \n- CES code is from https://github.com/Lizn-zn/DNNOpAcc\n- Meta-set code is from https://github.com/Simon4Yan/Meta-set\n- CIFAR10-C data: https://zenodo.org/record/2535967#.YfRacRNKhQI\n- Tiny-ImageNet-C data: https://zenodo.org/record/2469796#.YnPl6hMzZhE \n",
                    "original_header": "Others"
                },
                "confidence": 0.999999999873836,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wellido/aries/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-30T12:00:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-04T09:50:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 154280
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 392
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "50": {
        "filename": "hdi-project_btb_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/BTB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **BTB** is using [pip](\nhttps://pip.pypa.io/en/stable/):\n\n```bash\npip install baytune\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://mlbazaar.github.io/BTB/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with pip",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/btb/main/README.md"
            },
            {
                "result": {
                    "value": "The first step in order to use the `BTBSession` class is to develop a `scoring` function.\n\nThis is a Python function that, given a model name and a `hyperparameter` configuration,\nevaluates the performance of the model on your data and returns a score.\n\n```python3\nfrom sklearn.datasets import load_wine\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.metrics import f1_score, make_scorer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\n\n\ndataset = load_wine()\nmodels = {\n    'DTC': DecisionTreeClassifier,\n    'SGDC': SGDClassifier,\n}\n\ndef scoring_function(model_name, hyperparameter_values):\n    model_class = models[model_name]\n    model_instance = model_class(**hyperparameter_values)\n    scores = cross_val_score(\n        estimator=model_instance,\n        X=dataset.data,\n        y=dataset.target,\n        scoring=make_scorer(f1_score, average='macro')\n    )\n    return scores.mean()\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare a scoring function",
                    "parent_header": [
                        "Quickstart"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/btb/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to quickly discover **BTB**, simply click the button below and follow the tutorials! \n",
                    "original_header": "Try it out now!"
                },
                "confidence": 0.9999079529512398,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/btb/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Detailed results from which this summary emerged are available [here](https://docs.google.com/spreadsheets/d/15a-pAV_t7CCDvqDyloYmdVNFhiKJFOJ7bbgpmYIpyTs/edit?usp=sharing).\n- If you want to compare your own tuner, follow the steps in our benchmarking framework [here](https://github.com/MLBazaar/BTB/tree/master/benchmark).\n- If you have a proposal for tuner that we should include in our benchmarking get in touch\nwith us at [dailabmit@gmail.com](mailto:dailabmit@gmail.com).\n \n",
                    "original_header": "Number of Wins on latest Version"
                },
                "confidence": 0.9695879450749633,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/btb/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n* License: \n* Development Status: \n* Documentation: https://mlbazaar.github.io/BTB\n* Homepage: https://github.com/MLBazaar/BTB \n"
                },
                "confidence": 0.9999964157830163,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/btb/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-11-03T00:18:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T17:10:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 314452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 79741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "51": {
        "filename": "v2-project_v2_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/v2-project/v2",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Install dependencies and link the V2 executable with \n\n```\nnpm i\nnpm link\n```\n\nThen build Docker images and start services\n\n```\nv2 build\ndocker-compose up --detach\n```\n\nV2 requires the Docker daemon to be up and running. Additionally, the user\nmust have permissions to create Docker containers.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "V2: Fast Detection of Configuration Drift in Python"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/v2-project/v2/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-07T18:42:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-30T14:26:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 157622
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1529
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "52": {
        "filename": "ycd2016_acaioc2_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ycd2016/acaioc2",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-16T05:16:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-20T11:46:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 72500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "53": {
        "filename": "sefield_bugreportclassificationwithngramidfdataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sefield/BugReportClassificationWithNgramIDFDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-08-02T07:37:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-09-05T05:20:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "54": {
        "filename": "ai-se_data-for-automated-ui-testing-from-lexisnexis_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/Data-for-automated-UI-testing-from-LexisNexis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-04-26T16:32:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-05T09:42:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "55": {
        "filename": "ucla-mobility_opencda_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ucla-mobility/OpenCDA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n* [__System/Hardware Requirements__](#requirements)\n* [__Local Installation__](#local-installation)\n    * [__1. CARLA installation__](#1-carla-installation0911-required)\n\t    * [1.1 Package installation](#11-package-installation)  \n\t    * [1.2 Build from source](#12-build-from-source)  \n\n    * [__2. Install OpenCDA__](#opencda-installation)\n    * [__3. Install Pytorch and Yolov5 (Optional)__](#3-install-pytorch-and-yolov5optional)\n    * [__4. Install Sumo (Optional)__](#4-install-sumooptional)\n\n* [__Docker Installation__](#docker-installation)\n\n\n---\n## Requirements\nTo get started, the following requirements should be fulfilled.\n* __System requirements.__ Any 64-bits OS should run OpenCDA. We highly recommends Ubuntu  16.04/18.04/20.04.\n\n* __Adequate GPU.__ CARLA is a realistic simulation platform based on Unreal Engine 4, which requires at least a 3GB GPU for smooth scene rendering, though 8GB is recommended.\n* __Disk Space.__ Estimate 100GB of space is recommended to install CARLA and Unreal Engine. \n* __Python__ Python3.7 or higher version is required for full functions.\n\n\n---\n## Local Installation\nTo get OpenCDA v0.1 running with complete functionality, you will need four things: CARLA, OpenCDA, and\nPytorch (optional). Pytorch is required only when you want to activate the perception module; otherwise OpenCDA\nwill retrieve all perception information from the simulation server directly.\n\n###  1. CARLA Installation (>= 0.9.11 required)\n\nThere are two different recommended ways to install the CARLA simulator and either way is fine for using OpenCDA. <br>\nNote: If you want to use the customized highway map with full assets (.fbx, .xml and .xodr) in OpenCDA, \nyou have to build from source. Visit CARLA's tutorial [ADD a new map](https://carla.readthedocs.io/en/latest/tuto_A_add_map_overview/) for more information.\n\n\n#### 1.1 Package Installation\n\n<div class=\"build-buttons\">\n<p>\n<a href=\"https://github.com/carla-simulator/carla/releases\" target=\"_blank\" class=\"btn btn-neutral\" title=\"Go to the latest CARLA release\">\n<span class=\"icon icon-github\"></span> CARLA Released Package</a>\n</p>\n</div>\n\nOpenCDA is tested both at 0.9.11 and 0.9.12.\nTo install CARLA as a precompiled package, download and extract the release file. It contains a precompiled version of the simulator, the Python API module and some scripts to be used as examples. <br>\n\n<strong>Note: The  AdditionalMaps_0.9.1x.tar.gz also need to be downloaded and extract to the CARLA repo to support\nscenario testings in Town06.</strong>\n\n#### 1.2 Build From Source\n\nFor advanced CARLA usage that involves extensive customizations, [Build CARLA from Source](https://carla.readthedocs.io/en/0.9.11/build_linux/) is also supported by OpenCDA. Though source build in \nWindows OS is supported by CARLA, Ubuntu is the preferred OS as the OpenCDA was developoed in Ubuntu 18.04.  \n\n<strong>Note: OpenCDA do not require CARLA source build. However, customized map with building/lane/traffic light/road surface materials assets  in CARLA  require source build. \nVisit CARLA's tutorial [ADD a new map](https://carla.readthedocs.io/en/latest/tuto_A_add_map_overview/) for more information. </strong>\n\n---\n\n### 2. OpenCDA Installation\nFirst, download OpenCDA github to your local folder if you haven't done it yet.\n```sh\ngit clone https://github.com/ucla-mobility/OpenCDA.git\ncd OpenCDA\n```\nMake sure you are in the root dir of OpenCDA, and next let's install the dependencies. <strong>We highly\nrecommend use conda environment to install.</strong> \n\n```sh\nconda env create -f environment.yml\nconda activate opencda\npython setup.py develop\n```\n\nIf conda install failed,  install through pip\n```sh\npip install -r requirements.txt\n```\n\nAfter dependencies are installed, we need to install the CARLA python library into opencda conda environment.\nYou can do this by running this script:\n```sh\nexport CARLA_HOME=/path/to/your/CARLA_ROOT\nexport CARLA_VERSION=0.9.11 #or 0.9.12 depends on your CARLA\n. setup.sh\n```\nIf everything works correctly, you will see a cache folder is created in your OpenCDA root dir, and the terminal shows\n\"Successful Setup!\". To double check the carla package is correctly installed, run the following command and \nthere should be no error.\n```sh\npython -c \"import carla\" # check whether carla is installed correctly.\n```\n<strong>Note: If you are using Python other than 3.7 and CARLA < 0.9.11 then you have to change the setup.sh to your\ncarla version's egg file or manually installed carla to your conda environment.</strong>\n\n\n### 3. Install Pytorch and Yolov5 (Optional)\nThis section is only needed for the users who want to test perception algorithms. By default, OpenCDA does not require\npytorch installed and it retrieves the object positions from the server directly. Once perception module is activated,\nthen OpenCDA will use yolov5 with pytorch to run object detection. <br>\nTo install pytorch based on your GPU and cuda version, go to the official pytorch website and install with conda command. Make\nsure you install pytorch >= 1.7.0.  <strong>GPU Version highly recommended!</strong>\n<div class=\"build-buttons\">\n<p>\n<a href=\"https://pytorch.org/\" target=\"_blank\" class=\"btn btn-neutral\" title=\"Pytorch\">\n<span class=\"icon icon-github\"></span>Pytorch Official Website</a>\n</p>\n</div>\n\nThe command belows shows an example of installing pytorch v1.8.0 with cuda 11.1 in opencda\nenvironment.\n\n```sh\n\nconda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge\n\n```\n\nAfter pytorch installation, install the requirements for Yolov5. <br>\n```sh\npip install -qr https://raw.githubusercontent.com/ultralytics/yolov5/master/requirements.txt  # install dependencies\n```\n\n### 4. Install SUMO (Optional)\nSUMO installation is only required for the users who require to conduct co-simulation testing and use future release of SUMO-only mode.\n\nYou can install SUMO directly by apt-get:\n```sh\nsudo add-apt-repository ppa:sumo/stable\nsudo apt-get update\nsudo apt-get install sumo sumo-tools sumo-doc\n```\nAfter that, install the traci python package.\n```sh\npip install traci\n```\nFinally, add the following path to your ~/.bashrc:\n```yaml\nexport SUMO_HOME=/usr/share/sumo\n```\n---\n\n### 5. Install OpenScenario (Optional)\nIf you want to use OpenScenario to conduct scenario testing, e.g. `python opencda.py -t openscenario_carla -v 0.9.12`, you need to install OpenScenario first. <br>\n\nPlease follow the [openscenario installation](coperception/setup_scenario_runner.md) to install OpenScenario.\n\n## Docker Installation\nOpenCDA provides docker image for users to run directly.\n\nNote: Openscenario is not supported in docker image yet.\n\n### 1. Prerequisite\nFirst, make sure that you have installed `docker` in your ubuntu system. If you have nvidia gpu, it is recommended to\ninstall `nvidia-docker` as well.\n\n### 2. Dockerfile Modification\nNext, modify the Dockerfile based on your system. Some parameters you may want to pay attentions are:\n\n- `CARLA_VERSION`: Change to the version you want. Notice after(including) OpenCDA 0.1.4, only CARLA >= 0.9.14 will be supported.\n- `FROM nvidia/vulkan:1.3-470`: If you want the carla run with rendering in the docker, make sure the graphics driver is set to the same\nas your local computer. For instance, mine is `FROM nvidia/cuda-11.4.2.0-ase-ubuntu2004`\n- `OPENCDA_FULL_INSTALL`: If set true, it will run the `setup.sh` in OpenCDA automatically during building up the docker to install carla api into the python environment.\nif set to false, then you need to go to your docker container after building to manually run `setup.sh`\n\n### 3. Build up the docker\n```shell\ncd OpenCDA\ndocker build -t opencda_container .\n```\n\n### 4. Run the docker\nThe following command will allow you run Carla with rendering in your docker. If the rendering is the black,\nthen you probably build up the wrong nvidia graphics driver.\n```shell\nxhost +local: \n\ndocker run -it --rm \\\n  -e DISPLAY=$DISPLAY \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -v $HOME/.Xauthority:/root/.Xauthority \\\n  --name opencda_container opencda_docker /bin/bash\n```\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/docs/md_files/installation.md"
            },
            {
                "result": {
                    "value": "* [Overview](https://opencda-documentation.readthedocs.io/en/latest/md_files/introduction.html)\n* [Installation](https://opencda-documentation.readthedocs.io/en/latest/md_files/installation.html)\n* [Quick Start](https://opencda-documentation.readthedocs.io/en/latest/md_files/getstarted.html)\n* [Logic Flow](https://opencda-documentation.readthedocs.io/en/latest/md_files/logic_flow.html)\n* [Traffic Generation](https://opencda-documentation.readthedocs.io/en/latest/md_files/traffic_generation.html)\n\n\nNote: We continuously improve the performance of OpenCDA. Currently, it is mainly tested in our customized maps and\n Carla town06 map; therefore, we <strong>DO NOT </strong> guarantee the same level of  robustness in other maps.\n",
                    "type": "Text_excerpt",
                    "original_header": "Users Guide",
                    "parent_header": [
                        "OpenCDA",
                        "Get Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
            },
            {
                "result": {
                    "value": "*  [Class Design](https://opencda-documentation.readthedocs.io/en/latest/md_files/developer_tutorial.html)\n*  [Customize Your Algorithms](https://opencda-documentation.readthedocs.io/en/latest/md_files/customization.html)\n*  [API Reference](https://opencda-documentation.readthedocs.io/en/latest/modules.html) <br>\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Developer Guide",
                    "parent_header": [
                        "OpenCDA",
                        "Get Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ucla-mobility/opencda/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-19T18:59:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T05:51:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 528043
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1199
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "56": {
        "filename": "reddy-lab-code-research_xlcost_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/reddy-lab-code-research/XLCoST",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-05T23:05:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T03:43:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 43610586
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 397385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 389981
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 60301
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 45869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 22377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 21613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 968
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 237
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "57": {
        "filename": "dselsam_certigrad_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dselsam/certigrad",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/backprop_correct.lean#L13-L25 \n",
                    "original_header": "Stochastic backpropagation"
                },
                "confidence": 0.9994735287547408,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/kl.lean#L79-L90 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/reparam.lean#L70-L79\n \n",
                    "original_header": "Certified optimizations"
                },
                "confidence": 0.9994735287547408,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/prog.lean#L16-L38 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/transformations.lean#L52-L57 \nhttps://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/grads_correct.lean#L20-L27\n \n",
                    "original_header": "Verifying properties of Certigrad programs"
                },
                "confidence": 0.9994735287547408,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/dselsam/certigrad/blob/master/src/certigrad/aevb/mnist.lean#L44-L66\n \n",
                    "original_header": "Performance"
                },
                "confidence": 0.9994735287547408,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Until then:\n1. Download our fork of Lean from https://github.com/dselsam/lean/tree/certigrad and build/install it using the instructions at https://github.com/leanprover/lean.\n2. Download Eigen (http://bitbucket.org/eigen/eigen/get/3.3.4.tar.bz2) and install it.\n3. Download this repository, and in the main directory execute `leanpkg --build`. \n",
                    "original_header": "Building Certigrad"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dselsam/certigrad/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-03-13T13:59:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T03:29:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Lean",
                    "name": "Lean",
                    "type": "Programming_language",
                    "size": 422816
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "58": {
        "filename": "malihehizadi_sopi_stackoverflow_answer_quality_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MalihehIzadi/SOPI_stackoverflow_answer_quality",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-22T21:45:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-05T12:51:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 5248
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "59": {
        "filename": "sizeless_replicationpackage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Sizeless/ReplicationPackage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In order to install and configure the synthetic function generator, the following steps are required:\n\n* Install the required dependencies:\n   * Install `golang` (tested for versions 1.14+)\n   * Install `nodejs` (tested for versions 12.0+)\n   * Install the [AWS CLI](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)\n   * Install the [SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html)\n* Build the synthetic function generator CLI: Inside the `function-generator` directory run the command `go build .`. By default this results in a file named `synthetic-function-generator`.\n* Both the AWS CLI and SAM CLI read the AWS Credentials that are needed to perform actions on AWS from either environment variables or by convention from a file in `$HOME/.aws/credentials`. Make sure that a valid **Access Key** and **Secret Key** can be found by both CLIs. See the [official documentation](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html) for more details on configuring the AWS CLI.\n* The monitoring add-on has some dependencies on certain npm packages.\nTo avoid that each synthetic function package has to bring these dependencies, the use of a dependency layer proved to be the most efficient way.\nThe file `dependencyLayer.zip` represents a ready-to-deploy package to add the required dependencies as a Lambda Layer. Follow the instructions on `AWS Console -> Lambda -> Additional resources -> Layers` to deploy the package. The dependency layer will be assigned a **Version ARN**, which is needed to generate functions using the CLI.\nFor more information about AWS Lambda Layers, see [here](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html).\n* The synthetic Lambda functions need to be assigned a role ARN to allow the function to access other AWS services. Either create a new role that defines what services the Lambda functions are allowed to access or use an existing role. Make sure that AWS Lambda is listed in the **Trusted Entities** section so that it can be used by Lambda. To generate synthetic functions using the CLI the **Role ARN** will be needed.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Sizeless Replication Package",
                        "Synthetic Function Generator"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate our measurements, run the following commands in the folder `AirlineBooking`:\n```\ndocker build --build-arg AWS_ACCESS_KEY_ID=YOUR_PUBLIC_KEY --build-arg AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY --build-arg STRIPE_PUBLIC_KEYS=YOUR_KEYS --build-arg STRIPE_SECRET_KEYS=YOUR_KEYS . -t airlinebooking\ndocker run -d --name airlinebooking airlinebooking\ndocker exec -it airlinebooking bash ./meta-run.sh\n``` \nMake sure to replace `YOUR_PUBLIC_KEY` and`YOUR_SECRET_KEY` with your [AWS Credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html).  \n",
                    "original_header": "Replicating our measurements"
                },
                "confidence": 0.976841015102851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://github.com/Sizeless/ReplicationPackage/blob/main/images/generator.png?raw=true\" width=\"800\">\n</p> \n",
                    "original_header": "Synthetic Function Generator"
                },
                "confidence": 0.986380675463032,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To add additional function segments, create a new folder in `SyntheticFunctionGenerator/function_segments/` that contains a `function.js`file that contains the function code, a `setup.js` file that creates any additional required resoures e.g., S3 buckets, a `teardown.js` that removes any resources created in `setup.js`, and a `variables.yaml`file that contains any shared variables.\n \n",
                    "original_header": "Function segments"
                },
                "confidence": 0.9681157237078384,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nThis command generates AWS Lambda deployable serverless function artifacts.\nThe generated artifacts are compatible for use with the runload command.\n\nUsage:\n  synthetic-function-generator generate [flags]\n\nFlags:\n  -d, --dependency-layern-arn string   The ARN of the dependency layer, see README (required)\n      --exclude string                 Path to file containing roll strings to be excluded from generation (use --save flag for an example)\n  -f, --func-segments string           Path to function segments to be used for generation (required)\n  -h, --help                           help for generate\n  -l, --lambda-role-arn string         The ARN of the lambda role, see README (required)\n  -m, --max-roll int                   Maximum number of rolled function segments (ignored if replayFile is provided) (default 3)\n  -n, --num-funcs int                  Number of functions to generate (ignored if replayFile is provided) (default 1)\n      --replay string                  Path to file containing roll strings to be regenerated (use --save flag for an example)\n      --save                           Whether the generated function combinations should be saved\n  -s, --sizes ints                     Specify function sizes to be generated, need to be supported by the platform! (default [128,416,704,992,1280,1568,1856,2144,2432,2720,3008])\n```\n \n",
                    "original_header": "Command `generate`"
                },
                "confidence": 0.9907527376717638,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nThis command can be used to delete all generated functions\n\nUsage:\n  synthetic-function-generator clean [flags]\n\nFlags:\n  -h, --help   help for clean\n``` \nMake sure to replace `LAYER_ARN` and `LAMBDA_ROLE_ARN` with the corresponding ARNs from the setup step. The results are saved to the folder `./result-data`. \n",
                    "original_header": "Command `clean`"
                },
                "confidence": 0.9773420253429825,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://github.com/Sizeless/ReplicationPackage/blob/main/images/Codeocean.png?raw=true\" width=\"800\">\n</p>\n \n",
                    "original_header": "Measurement data and analysis scripts"
                },
                "confidence": 0.9790928175704064,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sizeless/replicationpackage/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-25T12:11:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-25T06:47:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 368856
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lua",
                    "name": "Lua",
                    "type": "Programming_language",
                    "size": 125992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 109070
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 59720
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 56611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 46957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 30321
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 15888
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 9694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1442
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1015
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Stylus",
                    "name": "Stylus",
                    "type": "Programming_language",
                    "size": 990
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "60": {
        "filename": "kiv-air_mqdd_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kiv-air/MQDD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-21T08:22:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-31T17:35:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 53389
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "61": {
        "filename": "lizenan1995_dnnopacc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Lizn-zn/DNNOpAcc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-20T04:26:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-12T06:51:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 338831
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 10805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 4883
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "62": {
        "filename": "mojtaba-eshghie_soliditydesignpatternsdcrgraph_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mojtaba-eshghie/SmartContractDesignPatternsInDCRGraphs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-12T09:18:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T08:01:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "63": {
        "filename": "tizpaz_parfait-ml_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tizpaz/Parfait-ML",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you use the pre-built [Docker image](#docker-image), the tool is already built to use in Ubuntu base. Otherwise, the installation of required packlages and libraries should be sufficient to run Parfait-ML. Note: the tool is substantially tested in MacOS system.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "How to setup Parfait-ML",
                    "parent_header": [
                        "PARFAIT-ML: (PARameter FAIrness Testing for ML Libraries)",
                        "Tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tizpaz/parfait-ml/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note: The tool is initially built for MacOS. Docker version\nwith Ubuntu might experience some unexpected error.\n \n",
                    "original_header": "Docker File"
                },
                "confidence": 0.9923583825350275,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tizpaz/parfait-ml/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We include the script to run the search algorithms for the\nentire dataset (warning: it will run all experiments):\n```\nsh script.sh\n```\nBy default, every experiment will run for 4 hours, and one needs\nto repeat the experiments 10 times to reproduce RQ1 to RQ4.\nThe experiments used in the paper is included in the Dataset folder.\n \n",
                    "original_header": "Complete Evaluation Reproduction"
                },
                "confidence": 0.9847597058940359,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tizpaz/parfait-ml/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-25T18:06:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-03T01:15:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 190093
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "64": {
        "filename": "pooyanjamshidi_elasticbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pooyanjamshidi/ElasticBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "powershell -Command \"Invoke-WebRequest http://uk.mathworks.com/supportfiles/MCR_Runtime/R2013a/MCR_R2013a_win64_installer.exe -OutFile MCRInstaller.exe\"\nunzip MCRInstaller.exe\ncd bin\\win64\nsetup -mode silent -agreeToLicense yes\nvcredist_x64.exe /q:a",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/pooyanjamshidi/elasticbench/master/QueueMonitor/InstallMatlabMCR.cmd"
            },
            {
                "result": {
                    "value": "unzip MCRInstaller.exe\ncd bin\\win64\nsetup -mode silent -agreeToLicense yes\nvcredist_x64.exe /q:a",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/pooyanjamshidi/elasticbench/master/scripts/InstallMatlabMCR.cmd"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-12T14:25:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-04-14T10:19:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Visual Basic",
                    "name": "Visual Basic",
                    "type": "Programming_language",
                    "size": 121773
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 845
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 345
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "65": {
        "filename": "tum-i4_better-safe-than-sorry_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/Better-Safe-Than-Sorry",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest way to use the scrips in this repository is to install the package from PyPi\n\n```shell\npip install better-safe-than-sorry\nbetter-safe-than-sorry --version\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "With PyPi",
                    "parent_header": [
                        "Better Safe Than Sorry",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tum-i4/better-safe-than-sorry/main/README.md"
            },
            {
                "result": {
                    "value": "One can also use poetry to install the dependencies.\n\n```shell\ncd /path/to/better-safe-than-sorry/\npoetry install\npoetry run better-safe-than-sorry --version\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "With Poetry",
                    "parent_header": [
                        "Better Safe Than Sorry",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tum-i4/better-safe-than-sorry/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-07T08:55:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-05T13:20:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 51017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 5286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "66": {
        "filename": "idealab-isu_llm4g-code_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/idealab-isu/LLM4GCode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-09-03T01:47:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-24T13:52:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "67": {
        "filename": "anonymous-icse2022_scenorita_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Software-Aurora-Lab/scenoRITA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-26T00:31:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T08:03:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 124005
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Starlark",
                    "name": "Starlark",
                    "type": "Programming_language",
                    "size": 5552
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "68": {
        "filename": "aakashba_projcon_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aakashba/projcon",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We began with the main java dataset of 2.1m methods aswell the complete 50 million method extended set requested from Le Clair et al{http://leclair.tech/data/funcom/}\n\nThe dataset was filtered for duplicates then project context was constructed from the extended set using the scripts in the \"builder\" folder.\n\nWe provide the compiled dataset as well as the scripts used to compile .This data can be found at :\nhttps://drive.google.com/drive/folders/10r-I5C76e-1vZuY5gqYQQNKgAY5MOJpg?usp=sharing\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 0 - Dataset building",
                    "parent_header": [
                        "Guide for replication of results for paper \"Project-Level Encoding for Neural Source Code Summarization of Subroutines\", accepted at ICPC 2021, Madrid, Spain (Virtual due to pandemic)."
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aakashba/projcon/main/README.md"
            },
            {
                "result": {
                    "value": "To ensure no recursive errors or edits, create directories nfs>projects and clone this git repository.\nDownload and unpack all data from the aws link into this directory as well.\nCreate directory outdir, with 4 subdirectories  **outdir/{models, histories, viz, predictions}**\n**Use Requirements.txt to get your python 3.x virtual environment in sync with our setup.** Venv is preferred. Common issues that might arise from updating an existing venv and solutions :\n- GPU not recognized: checking the compatibility of your gpu cudnn/cuda or other drivers with the keras and tf versions fixes this.\n- Tf unable to allocate tensor: uninstall tensorflow and then update tensorflow-gpu only. Note we have not tested our setup with tf 2.x\n- keras \"learning rate\" error: clean uninstall keras and install keras 2.3.1 {pip upgrade is broken for this dependency so will not work}\n\nTo train the most basic project-level context model use the following command :\n```\ntime python3 train.py --model-type=attendgru-pc --batch-size=50 --epochs=10 --datfile=dataset_random.pkl --gpu=0\n```\nNote: --datfile=dataset_3Drandom.pkl for code2seq and graph2seq models or any custom models that use ast graphs you might wanna test. This is true for --datfile arg for all scripts in this project.\n\nScripts for Actionwords from S.Haque et al {https://github.com/actionwords/actionwords} for RQ2 table can be found in the firstwords folder and largely follow the same pattern as these scripts (predicts are provided as well)\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1 - Training",
                    "parent_header": [
                        "Guide for replication of results for paper \"Project-Level Encoding for Neural Source Code Summarization of Subroutines\", accepted at ICPC 2021, Madrid, Spain (Virtual due to pandemic)."
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aakashba/projcon/main/README.md"
            },
            {
                "result": {
                    "value": "Training print screen will display the epoch at which the model converges, that is when the validation accuracy is not increase much or just before it starts to decrease and validation loss goes up. Once epoch is identified run the following script and replace file in this example with the trained model epoch and timestamp.\n\n```\npython3 predict.py /nfs/projects/projcon/outdir/models/attendgru-pc_E09_random_1608163249.h5 --datfile=dataset_random.pkl --gpu=0\n```\npredicted comments for all models are provided in the predictions folder.",
                    "type": "Text_excerpt",
                    "original_header": "Step 2 - Predictions",
                    "parent_header": [
                        "Guide for replication of results for paper \"Project-Level Encoding for Neural Source Code Summarization of Subroutines\", accepted at ICPC 2021, Madrid, Spain (Virtual due to pandemic)."
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aakashba/projcon/main/README.md"
            },
            {
                "result": {
                    "value": "A script to run ensembles using mean predictions from two models can be run with this simple modification after isolating two best performing models files.\n```\npython3 predict_ensemble.py /nfs/projects/projcon/outdir/models/attendgru_E10_random_1609946700.h5 /nfs/projects/projcon/outdir/models/attendgru-pc_E09_random_1608163249.h5 --datfile=dataset_random.pkl --gpu=0\n```\npredicted comments for all ensembles are provided in the predictions folder.",
                    "type": "Text_excerpt",
                    "original_header": "Step 3 - Ensemble Predictions",
                    "parent_header": [
                        "Guide for replication of results for paper \"Project-Level Encoding for Neural Source Code Summarization of Subroutines\", accepted at ICPC 2021, Madrid, Spain (Virtual due to pandemic)."
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aakashba/projcon/main/README.md"
            },
            {
                "result": {
                    "value": "Bleu and Rouge scores as well a comparison script to insolate maximum improvement have been provided by the name of bleu.py, rougemetric.py and bleucompare.py all of them can be run with the similar commands\n```\n python3 rougemetric.py /nfs/projects/projcon/outdir/predictions/predict-attendgru_E10_random_1609946700-attendgru-pc_E09_random_1608163249.txt \n```\n```\n python3 bleu.py /nfs/projects/projcon/outdir/predictions/predict-attendgru_E10_random_1609946700-attendgru-pc_E09_random_1608163249.txt \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4 - Metrics",
                    "parent_header": [
                        "Guide for replication of results for paper \"Project-Level Encoding for Neural Source Code Summarization of Subroutines\", accepted at ICPC 2021, Madrid, Spain (Virtual due to pandemic)."
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aakashba/projcon/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-30T20:46:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-05T05:35:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 388421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "69": {
        "filename": "hdi-project_mlblocks_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/MLBlocks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **MLBlocks** is using [pip](\nhttps://pip.pypa.io/en/stable/):\n\n```bash\npip install mlblocks\n```\n\nThis will pull and install the latest stable release from [PyPi](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://mlbazaar.github.io/MLBlocks/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with `pip`",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/mlblocks/master/README.md"
            },
            {
                "result": {
                    "value": "In order to be usable, MLBlocks requires a compatible primitives library.\n\nThe official library, required in order to follow the following MLBlocks tutorial,\nis [MLPrimitives](https://github.com/MLBazaar/MLPrimitives), which you can install\nwith this command:\n\n```bash\npip install mlprimitives\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "MLPrimitives",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/mlblocks/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Documentation: https://mlbazaar.github.io/MLBlocks\n* Github: https://github.com/MLBazaar/MLBlocks\n* License: [MIT](https://github.com/MLBazaar/MLBlocks/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n \n",
                    "original_header": "MLBlocks"
                },
                "confidence": 0.9999995221029115,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/mlblocks/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-06-08T15:36:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-08T08:25:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 155298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8013
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "70": {
        "filename": "momentum-lab-workspace_deepseer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ma-labo/DeepSeer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "*We suggest use virtual environment to avoid messing up your own environments.*\n\n~~~sh\n$ python -m venv ./venv\n$ source ./venv/bin/activate\n$ pip install -r ./server/deepstellar_backend/requirements.txt\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "Python &gt;= 3.6",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/deepseer/main/README.md"
            },
            {
                "result": {
                    "value": "~~~sh\n$ cd ./web/dashboard\n$ npm install\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "NPM &gt;= 7",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/deepseer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-25T03:58:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T02:04:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 81631
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 8796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "RAML",
                    "name": "RAML",
                    "type": "Programming_language",
                    "size": 649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "71": {
        "filename": "michiyasunaga_bifi_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michiyasunaga/BIFI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-27T05:07:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T00:02:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1811830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 44681
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 36414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 15854
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lua",
                    "name": "Lua",
                    "type": "Programming_language",
                    "size": 4210
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1003
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 805
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "72": {
        "filename": "yuqichen94_active_fuzzer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yuqiChen94/Active_fuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Physically connect the Raspberry Pis to all PLCs in level0. (USB Ethernet adaptors are used here since Raspberry Pis typically has only one ethernet port.) \n2. Edit and run start_lvl0.sh to enable bridge-Netfilter to set up bridges for all Raspberry Pis.\n3. Make sure all the Raspberry Pis and the laptop are put onto the same wireless subnet.     \n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yuqichen94/active_fuzzer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-26T11:01:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-18T02:25:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 336699
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2358
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "73": {
        "filename": "tqrg_bugswarm_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TQRG/BugSwarm",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Each branch of the repository contains a BugSwarm pair of builds. You can easily clone one specific branch with the following command line.\n`git clone --single-branch --branch ProjectKorra-ProjectKorra-165108371 git@github.com:TQRG/BugSwarm.git ProjectKorra-ProjectKorra-165108371` \nI recommend to only clone the master branch to reduce the size of the repository on your system.\n`git clone --single-branch --branch master git@github.com:TQRG/BugSwarm.git BugSwarm` \n",
                    "original_header": "Repository Branches"
                },
                "confidence": 0.999999897028484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tqrg/bugswarm/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-31T09:35:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-05-14T11:41:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 180370752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135425310
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 24077271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1526298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 391224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 337416
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 214542
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GAP",
                    "name": "GAP",
                    "type": "Programming_language",
                    "size": 202203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 123334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CoffeeScript",
                    "name": "CoffeeScript",
                    "type": "Programming_language",
                    "size": 50124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 42620
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 12386
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 8130
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 4405
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Hy",
                    "name": "Hy",
                    "type": "Programming_language",
                    "size": 3256
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 3083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2704
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 30
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "74": {
        "filename": "jetbrains-research_task-tracker-server_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/task-tracker-server",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download the repository.\n2. Run [MongoDB](https://www.mongodb.com/). It has to work on the `localhost:27017`.\n3. Install TaskTracker packages by issuing `install npm` as root from the server installation directory:\n  ```\n  sudo install npm\n  ```\n   \n4. Issue `npm start` as root from the server installation directory. It will work on `localhost:3000`.\n\nIf everything is done correctly, you will see the following message:\n\n<img src=\"images/server_running_example.png\" width=\"800\">\n\n---\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TaskTracker Server"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jetbrains-research/task-tracker-server/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-15T12:26:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-06T11:30:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 134359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 827
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "75": {
        "filename": "soarsmu_chronos_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/Chronos",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You need to update the workspace path in auto_run.sh https://github.com/soarsmu/Chronos/blob/07e0a7571a42470a85391b4b921e4ea6f08b0b27/auto_run.sh#L12\n\nThe change in the auto_run.sh script is to point to the local directory of the dataset.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Path Setting",
                    "parent_header": [
                        "Chronos",
                        "Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/chronos/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You should unzip all files in the dataset folder so that you can use Chronos.\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9549117492145714,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/chronos/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For ease of use, we also provide a \ninstallation package via a [docker image](https://hub.docker.com/repository/docker/chronosicse22/chronos). You can set up Chronos's docker step-by-step as follow: \n- Pull Chronos's docker image: \n```\ndocker pull chronosicse22/chronos:v1\n```\n- Run a docker container:\nBASH2*\nAn option command to run a docker container:\nBASH3*\n</media/Rb/:/workspace/> is your workspace path, you need to change it for your usage.\n \n",
                    "original_header": "Environment Configuration"
                },
                "confidence": 0.9992108345709956,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/chronos/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-10T07:46:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T01:48:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 148389
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 133834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 31303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1967
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 268
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "76": {
        "filename": "aizazsharif_deeporder-icsme21_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/T3AS/DeepOrder-ICSME21",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone the GitHub repository and install the dependencies.\n1. Clone the repo and go to the directory \n```\n$ git clone https://github.com/T3AS/DeepOrder-ICSME21/DeepOrder.git\n$ cd DeepOrder\n\n```\n2. Install Anaconda (for creating and activating a separate environment)\n3. Run: \n```\n$ conda create -n DeepOrder python==3.6\n$ conda activate DeepOrder\n```\n4. Inside the enviroment, run:\n```\n$ pip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DeepOrder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aizazsharif/deeporder-icsme21/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-30T10:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T16:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 228898
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 703
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "77": {
        "filename": "yaxirhuxxain_transferlearning_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yaxirhuxxain/TransferLearning",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-05-14T03:49:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-18T18:59:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "78": {
        "filename": "kth_spork_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/spork",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Want to just try out Spork on a small merge scenario? Below are a few shell\ncommands that will download Spork along with a [sample merge\nscenario](https://github.com/KTH/spork/tree/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if),\nand then run it!\n```bash\n# Download Spork\nwget https://github.com/KTH/spork/releases/download/v0.5.0/spork-0.5.0.jar -O spork.jar\n\n# Download a sample merge scenario\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Left.java\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Base.java\nwget https://raw.githubusercontent.com/KTH/spork/fe906f537d1bb7205256d1fe81fda9f323849a60/src/test/resources/clean/both_modified/move_if/Right.java\n# You should now have spork.jar, Left.java, Base.java and Right.java in your local directory\n\n# a line based-merge is not possible\ndiff3 Left.java Base.java Right.java -m -A\n\n# an AST-merge with Spork does\njava -jar spork.jar Left.java Base.java Right.java\n```\n \n",
                    "original_header": "Quickstart"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Maven can be used to build the latest version of Spork. \n> **Note:** Requires JDK8+ to build.\n```\nmvn clean compile package -DskipTests\n```\n \n",
                    "original_header": "Build"
                },
                "confidence": 0.9901721605358973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When Git performs a merge and encounters a file that has been edited in both revisions under merge, it will invoke a\nmerge driver to merge the conflicting versions. It's a very simple thing to configure Spork as a merge driver for Java\nfiles, all you need is to add a couple of lines to a couple of configuration files. First, let's create a\n`.gitattributes` file and specify to use Spork as a merge driver for Java files. Put the following content in your\n`.gitattributes` file (you may all ready have one, check your home directory):\n```\n*.java merge=spork\n```\n`spork` doesn't mean anything to Git yet, we need to actually define the merge driver called `spork`. We do that in the\n`.gitconfig` file, typically located in your home directory. You should put the following content into it:\n```\n[core]\n\tattributesfile = /path/to/.gitattributes\n\n[merge \"spork\"]\n    name = spork\n    driver = java -jar /path/to/spork.jar merge --git-mode %A %O %B -o %A\n```\n \nThen replace `/path/to/.gitattributes` with the absolute path to the `.gitattributes` file you edited/created first,\nand replace `/path/to/spork.jar` with the absolute path to the Spork jar-file. With that done, Spork will be used\nas the merge driver for Java files! \n> **Important:** The `--git-mode` option is required to use Spork as a Git merge driver. If you find that Spork always\n> reverts to line-based merge, then that option is probably missing in the `driver` option that invokes Spork.\n \n",
                    "original_header": "Configure as a Git merge driver"
                },
                "confidence": 0.9999303056436318,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/spork/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Spork can be compiled to a native executable file using [GraalVM](https://www.graalvm.org/).\nTo do so, you need to first install GraalVM's JDK for Java 17 (Spork does not support Java 21 yet, see [#479](https://github.com/ASSERT-KTH/spork/issues/479)).\nRunning `mvn package -P native` will then generate a native image in `target/spork`. \n",
                    "original_header": "Experimental: compile as a native image"
                },
                "confidence": 0.9999793126885647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/spork/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-31T13:53:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T10:33:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 196524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 131438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3570
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "79": {
        "filename": "anonymous54351_transrepair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zysszy/TransRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-21T12:52:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-21T02:56:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "80": {
        "filename": "ptrsen_smtemverif_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ptrsen/SMTEmVerif",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-10-08T13:57:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-10-09T11:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 10493004
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "81": {
        "filename": "secureit-project_favd_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/secureIT-project/FAVD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-08T13:28:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-04T00:19:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 68506
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48290
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "82": {
        "filename": "dspinellis_ai-cli_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dspinellis/ai-cli-lib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```sh\ncd src\n\n# Global installation for all users\nsudo make install\n\n# Local installation for the user executing the command\nmake install PREFIX=~\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "ai-cli-lib: AI help for CLI programs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dspinellis/ai-cli/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-09T18:15:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T09:47:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 100701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 10156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1735
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "83": {
        "filename": "monperrus_megadiff_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/megadiff",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nIf you use Megadiff, please cite the following technical report: \n",
                    "original_header": "Megadiff, a dataset of source code changes"
                },
                "confidence": 0.9187690024396177,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/monperrus/megadiff/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-12T04:57:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-10T13:19:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "84": {
        "filename": "coinse_defects4j-multifault_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coinse/Defects4J-multifault",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Build the docker image & execute the docker container\n```bash\ncd docker/\n# build a docker image\ndocker build --tag mf:latest .\n# create a docker container in the background\ndocker run -dt --name mf -v $(pwd)/resources/workspace:/root/workspace -v $(pwd)/../fault_data:/root/fault_data mf:latest\n# execute an interactive bash shell on the container\ndocker exec -it mf bash\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Preparing the docker environment",
                    "parent_header": [
                        "A Guide to Replication"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/defects4j-multifault/main/README.md"
            },
            {
                "result": {
                    "value": "One can use the following command to check a specific bug `<project>-<N>` exists in the buggy version `<project>-<M>b`. \n```bash\n# on the docker container\nsh check_exist.sh <project> <N> <M> <savepath>\n# ex) sh check_exish.sh Math 5 6 ./Math-5-6\n```\nThe existence check result will be saved into `<savepath>`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Want to test for a single pair of N and M?",
                    "parent_header": [
                        "A Guide to Replication",
                        "Step 2. Running the search"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/defects4j-multifault/main/README.md"
            },
            {
                "result": {
                    "value": "**Note that we do not alter any source codes to artifically inject faults. We only added bug-revealing test cases that can reveal multiple faults in the original code version**\n\nAfter the step 2, you may want to check out the multiple fault version where \nthe source code remains the same, but additional bug-revealing test cases are transplanted.\n\nOn the docker container, use the following command to check out the source code:\n```bash\n# on the docker container\npython3.6 checkout.py Lang-26-27-31 -w /tmp/Lang-26-27-31\ncd /tmp/Lang-26-27-31\ngit diff\ncat tests.trigger.*\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 3. Checkout the multi-fault version (Optional)",
                    "parent_header": [
                        "A Guide to Replication"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/defects4j-multifault/main/README.md"
            },
            {
                "result": {
                    "value": "```bash\n# on the host machine (repository root)\npython create_dataset.py <project> --savepath <savepath>\n```\nThis command creates two result files, `<savepath>` and `<savepath>.pairs.csv`.\n\nFor example, executing the following command\n```\npython create_dataset.py Lang --savepath multiple_faults_replicated/Lang.json\n```\nwill create `multiple_faults_replicated/Lang.json` and `multiple_faults_replicated/Lang.json.pairs.csv`. \nPlease refer to [`multiple_faults/README.md`](./multiple_faults/README.md) for more details about the data format.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4. Analysing the search results and creating the dataset of multiple faults",
                    "parent_header": [
                        "A Guide to Replication"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/defects4j-multifault/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can simply extract the search results to `fault_data/multi/` using the following command.\n```\ncd fault_data; sh extract.sh multi.tar.bz2\n``` \n",
                    "original_header": "Raw search results are available!"
                },
                "confidence": 0.9999692605873036,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/defects4j-multifault/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-26T04:15:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-19T02:36:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 47111
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 16056
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7575
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3702
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 190
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "85": {
        "filename": "mojtaba-eshghie_clawk_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mojtaba-eshghie/HighGuard",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To manually install and run HighGuard, follow these steps:\n\n1. **Clone the repository:**\n\n   ```sh\n   git clone https://github.com/mojtaba-eshghie/HighGuard.git\n   cd HighGuard\n   ```\n\n2. **Install Node.js and npm:**\n\n   Ensure you have Node.js version 16.20.2 and npm version 8.19.4 installed. You can download and install Node.js from [Node.js official website](https://nodejs.org/).\n\n   Verify the installation:\n\n   ```sh\n   node --version\n   npm --version\n   ```\n\n3. **Install project dependencies:**\n\n   ```sh\n   npm install\n   ```\n\n4. **Install Foundry and Anvil:**\n\n   Follow the instructions to install Foundry from the [Foundry Book](https://book.getfoundry.sh/getting-started/installation).\n\n   ```sh\n   curl -L https://foundry.paradigm.xyz | bash\n   source ~/.bashrc\n   foundryup\n   ```\n\n5. **Run the CLI commands:**\n\n   You can now run the CLI commands as needed:\n\n   ```sh\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-governance.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-escrow.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-multistageauction.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-prizedistribution.yml\n   pkill anvil; node CI/run.js -t synthesized -e separate -v -c micro-configs/config-synthesized-productorder.yml\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified -l \"tests/Bridge.exploit1.js\"\n   pkill anvil; clear; node CI/run.js -t cross-chain -e unified -l \"tests/Bridge.exploit2.js\"\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual Installation",
                    "parent_header": [
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mojtaba-eshghie/clawk/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n  <img src=\"https://github.com/mojtaba-eshghie/Clawk/assets/37236297/4ea40602-3791-478b-b121-28f4cd9555a5\" width=\"200\" alt=\"HighGuard Logo\">\n</p> \n",
                    "original_header": "HighGuard: Monitoring Smart Contracts Business Logic"
                },
                "confidence": 0.997656355175358,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mojtaba-eshghie/clawk/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-24T19:33:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T08:01:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1999535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 1208485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1047271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1721
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1139
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "86": {
        "filename": "cau-se_theodolite_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cau-se/theodolite",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\ntitle: Installation\nhas_children: false\nnav_order: 3\n---\n\n# Installing Theodolite\n\nThe easiest option to install Theodolite is using [Helm](https://helm.sh).\nTo install Theodolite with all its dependencies run:\n\n```sh\nhelm repo add theodolite https://www.theodolite.rocks\nhelm repo update\nhelm install theodolite theodolite/theodolite\n```\n\n## Installation Options\n\nAs usual, the installation via Helm can be configured by passing a values YAML file:\n\n```sh\nhelm install theodolite theodolite/theodolite --values <your-config.yaml>\n```\n\nFor this purpose the [default values file](https://github.com/cau-se/theodolite/blob/main/helm/values.yaml) can serve as a template for your custom configuration.\n\n### Minimal setup\n\nFor Kubernetes clusters with limited resources such as on local developer installations, we provide a [minimal values file](https://github.com/cau-se/theodolite/blob/main/helm/preconfigs/minimal.yaml).\n\n### Persisting results\n\nTo store the results of benchmark executions in a [PersistentVolume](https://kubernetes.io/docs/concepts/storage/persistent-volumes), `operator.resultsVolume.persistent.enabled` has to be set to `true`. This requires that either a statically provisioned PersistentVolume is available or a dynamic provisioner exists (which is the case for many Kubernetes installations). If required, you can select a storage class with `operator.resultsVolume.persistent.storageClassName`.\nYou can also use an existing PersistentVolumeClaim by setting `operator.resultsVolume.persistent.existingClaim`.\nIf persistence is not enabled, all results will be gone upon pod termination.\n\n### Exposing Grafana\n\nPer default, Theodolite exposes a Grafana instance as NodePort at port `31199`. This can configured by setting `kube-prometheus-stack.grafana.service.nodePort`.\n\n### Additional Kubernetes cluster metrics\n\nAs long as you have sufficient permissions on your cluster, you can integrate additional Kubernetes metrics into Prometheus. This involes enabling some exporters, additional Grafana dashboards and additional permissions. We provide a [values file for enabling extended metrics](https://github.com/cau-se/theodolite/blob/main/helm/preconfigs/extended-metrics.yaml).\n\nSee the [kube-prometheus-stack](https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack) for more details on configuring the individual exporters.\n\n### Random scheduler\n\nInstallation of the random scheduler can be enabled via `randomScheduler.enabled`. Please note that the random scheduler is neither required in operator mode nor in standalone mode. However, it has to be installed if benchmark executions should use random scheduling.\n\n<!-- **TODO:** link-->\n\n### Multiple installations in the same cluster\n\nIn cases, where you need to install multiple Theodolite instances, it's best to use dedicated namespaces.\nMake sure to [expose Grafana on different ports](#exposing-grafana) for each installation.\nInstalling [additional cluster-level metrics](#additional-kubernetes-cluster-metrics) multiple times in the same cluster does not work.\n\n*Note that for meaningful results, usually only one benchmark should be executed at a time.*\n\n\n## Test the Installation\n\nYou can test the installation with:\n\n```sh\nhelm test theodolite\n```\n\n\n## Uninstall Theodolite\n\nThe Theodolite Helm chart can easily be removed with:\n\n```sh\nhelm uninstall theodolite\n```\n\nHelm does not remove any CRDs created by this chart. You can remove them manually with:\n\n```sh\n# CRDs for Theodolite\nkubectl delete crd executions.theodolite.rocks\nkubectl delete crd benchmarks.theodolite.rocks\n# CRDs for Prometheus operator (see https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#uninstall-chart)\nkubectl delete crd alertmanagerconfigs.monitoring.coreos.com\nkubectl delete crd alertmanagers.monitoring.coreos.com\nkubectl delete crd podmonitors.monitoring.coreos.com\nkubectl delete crd probes.monitoring.coreos.com\nkubectl delete crd prometheusagents.monitoring.coreos.com\nkubectl delete crd prometheuses.monitoring.coreos.com\nkubectl delete crd prometheusrules.monitoring.coreos.com\nkubectl delete crd scrapeconfigs.monitoring.coreos.com\nkubectl delete crd servicemonitors.monitoring.coreos.com\nkubectl delete crd thanosrulers.monitoring.coreos.com\n# CRDs for Strimzi\nkubectl delete crd kafkabridges.kafka.strimzi.io\nkubectl delete crd kafkaconnectors.kafka.strimzi.io\nkubectl delete crd kafkaconnects.kafka.strimzi.io\nkubectl delete crd kafkamirrormaker2s.kafka.strimzi.io\nkubectl delete crd kafkamirrormakers.kafka.strimzi.io\nkubectl delete crd kafkanodepools.kafka.strimzi.io\nkubectl delete crd kafkarebalances.kafka.strimzi.io\nkubectl delete crd kafkas.kafka.strimzi.io\nkubectl delete crd kafkatopics.kafka.strimzi.io\nkubectl delete crd kafkausers.kafka.strimzi.io\nkubectl delete crd strimzipodsets.core.strimzi.io\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/cau-se/theodolite/main/docs/installation.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-05-20T11:03:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-27T08:18:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 697319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 405869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 29366
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12434
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 7467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 2051
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "87": {
        "filename": "nbsafety-project_nbsafety_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ipyflow/ipyflow",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Precise reactive Python notebooks for Jupyter[Lab]: \n1. `pip install ipyflow`\n2. Pick `Python 3 (ipyflow)` from the launcher or kernel selector.\n3. For each cell execution, the (minimal) set of out-of-sync upstream and\n   downstream cells also re-execute, so that executed cells appear as they\n   would when running the notebook from top-to-bottom. \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-tldr.gif\" />\n</p>\n \n",
                    "original_header": "TL;DR"
                },
                "confidence": 0.9775271645158851,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to skip the elevator pitch and skip straight to installation /\nactivation instructions jump to [quick start](#quick-start) below; otherwise,\nkeep reading to learn about IPyflow's philosophy and feature set.\n \n",
                    "original_header": "About"
                },
                "confidence": 0.9913110098066407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-dots.gif\" width=\"400\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-restart.gif\" width=\"400\" />\n</p> \n",
                    "original_header": "Reactive execution model"
                },
                "confidence": 0.9998523002488717,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/reproduce-cell.gif\" width=\"400\" />\n</p> \n",
                    "original_header": "Autosave and recovering prior executions"
                },
                "confidence": 0.9995670835929601,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to temporarily opt out of reactive execution, you can use\nctrl+shift+enter (on Mac, cmd+shift+enter also works) to only execute the cell in question: \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/alt-mode-execute.gif\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/reactivity-opt-out.gif\" />\n</p> \nIf you'd like to prevent the default reactive behavior for every new kernel\nsession, you can add this to your IPython profile (default location typically\nat `~/.ipython/profile_default/ipython_config.py`):\n```python\nc = get_config()\nc.ipyflow.exec_mode = \"normal\"  # defaults to \"reactive\"\n```\n \n",
                    "original_header": "Opting out of reactivity"
                },
                "confidence": 0.9969658021610224,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-direction.gif\" />\n</p> \nYou can also update your IPython profile if you'd like to make any-order\nsemantics the default behavior for new kernel sessions:\n```python\nc = get_config()\nc.ipyflow.flow_direction = \"any_order\"  # defaults to \"in_order\"\n```\n \n",
                    "original_header": "In-order and any-order semantics"
                },
                "confidence": 0.9983277084779255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you'd like to let IPyflow fix these up for you, you can press \"Space\" when\nin command mode to automatically resolve all stale or dirty cells. This\noperation may introduce more stale cells, in which case you can continue\npressing \"Space\" until all inconsistencies are resolved, if desired: \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/resolve-inconsistencies.gif\" width=\"450\" />\n</p> \n",
                    "original_header": "Execution suggestions and shortcut for resolving inconsistencies"
                },
                "confidence": 0.9899537678082253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-memoization.gif\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/memoize-quiet-verbose.gif\" />\n</p> \n",
                    "original_header": "Memoization"
                },
                "confidence": 0.9998665142921825,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipywidgets-integration.gif\" width=\"500\" />\n</p> \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipywidgets-memoization.gif\" width=\"500\" />\n</p> \nThis functionality can be paired with other extensions like\n[stickyland](https://github.com/xiaohk/stickyland) to build fully reactive\ndashboards on top of JupyterLab + IPyflow. \n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/ipyflow/ipyflow/master/img/ipyflow-mercury.gif\" width=\"500\" />\n</p>\n \n",
                    "original_header": "IPyWidgets integration"
                },
                "confidence": 0.9967141898139038,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also see the cell (1-indexed) and statement (0-indexed) of when a\nsymbol was last updated with the `timestamp` function:\n```python\nfrom ipyflow import timestamp\ntimestamp(y)\n# Timestamp(cell_num=3, stmt_num=0)\n```\nTo see dependencies and dependents of a particular symbol, use the `deps` and\n`users` fuctions, respectively:\n```python\nfrom ipyflow import deps, users\n\ndeps(y)\n# [<x>]\n\nusers(x)\n# [<y>]\n```\nIf you want to elevate a symbol to the representation used internally by\nIPyflow, use the `lift` function (at your own risk, of course):\n```python\nfrom ipyflow import lift\n\ny_sym = lift(y)\ny_sym.timestamp\n# Timestamp(cell_num=3, stmt_num=0)\n```\n \n",
                    "original_header": "State API"
                },
                "confidence": 0.9987416803020768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Reactivity and other frontend features are not yet working in interfaces like\nColab or VSCode, but you can still use IPyflow's dataflow API on these surfaces\nby initializing your notebook session with the following code:\n```\n%pip install ipyflow\n%load_ext ipyflow\n```\n \n",
                    "original_header": "Colab, VSCode, and other Interfaces"
                },
                "confidence": 0.9999565285469629,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nbsafety-project/nbsafety/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-14T18:02:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T01:24:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 953145
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 44679
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3580
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1323
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1179
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "88": {
        "filename": "privacyengineering_hawk_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Add the helm chart repository:\n    ```\n    helm repo add hawk https://privacyengineering.github.io/hawk-helm-charts/\n    ```\n2. Modify values in [`values.yaml`](values.yaml) to your needs.\n3. Install hawk core and all it's services:\n    BASH2*\n4. Access the hawk-core-monitor and hawk-service via ingress:\n    BASH3*\n5. Add an integration to the hawk framework (see [Integrations](#integrations) for more information)\n \n",
                    "original_header": "Deployment through Helm"
                },
                "confidence": 0.999985951770239,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It's also possible to install the application in a Non-Kubernetes\nenvironment or configuring them more individual using the Docker Images of them. The Istio / Envoy\nintegration is only available in specific Kubernetes environments.\nThe [Java integration](https://github.com/PrivacyEngineering/hawk-integration-java) is available in\nevery environment. It needs a connection to the Hawk Service. When possible, the Envoy Integration\nis preferred as it's less effort to install. You must choose at least one integration.\n \n",
                    "original_header": "Deloyment alternatives"
                },
                "confidence": 0.9999994264891764,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Helm Chart (WIP), installs the Hawk-Service, a default PostgreSQL database, Hawk Core Monitor (\nnginx + monitor + grafana) and the Istio / Envoy integration if selected.\n```shell\nhelm repo add hawk https://github.com/PrivacyEngineering/hawk/releases/download/1.0.1\nhelm install PrviacyEngineering/hawk\n```\n \nReplace VERSION with the [newest version](https://github.com/TUB-CNPE-TB/hawk/releases) of the chart.\nAlternatively, you can also download the hawk-VERSION.tgz of the release you wish and execute:\n```shell\nhelm install ./hawk-VERSION.tgz\n``` \nSee the [values.yaml](values.yaml) for configuration options. \nTo enable Hawk Release, you have to install [Flux](https://github.com/fluxcd/flux)\nand [Flagger](https://github.com/fluxcd/flagger). Then you can configure to use the Metrics using\nPrometheus, see [Hawk Service](https://github.com/PrivacyEngineering/hawk-service) for more\ninformation on which mappings to use. You also need to configure Prometheus to scrape the Metrics. \nTo enable Hawk Build you have to install and configure\nthe [OpenAPI Privacy Changes Service](https://github.com/TUB-CNPE-TB/openapi-privacy-changes-service)\n. Then it is possible to\nuse [OpenAPI Privacy Alert GitHub Action](https://github.com/TUB-CNPE-TB/openapi-privacy-alert-action)\n. \n",
                    "original_header": "Integrations"
                },
                "confidence": 0.9907045356048336,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-17T17:41:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-23T21:33:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 1752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "89": {
        "filename": "eskang_mappingsynthesistool_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eskang/MappingSynthesisTool",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The simplest way to build and execute the synthesizer is by using the\nScala IDE, which is available to download for free:\n\nhttp://scala-ide.org/\n\nOnce inside the IDE, create a new Scala project and import the source files\n(/src). The project relies on native libraries for SAT solvers\n(used by the Alloy Anayzer). These libraries reside in /libs, but the\ndirectory location must be added to the project build path; in the\nIDE, this can be modified through the project \"Properities\" -> \"Java Build Path\" -> \"Source\" -> \"Native library location\".\n\nThe main entry functions for the tool is located in \"/src/synthesis/Synthesizer.scala\".\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "MappingSynthesisTool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eskang/mappingsynthesistool/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-16T22:30:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-10T14:07:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Alloy",
                    "name": "Alloy",
                    "type": "Programming_language",
                    "size": 170817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 82624
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "90": {
        "filename": "expressapr_expressapr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ExpressAPR/ExpressAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Use Linux (we have tested on Ubuntu 18.04 and 22.04)\n- Install Git, JDK \u22651.8, and Python \u22653.7\n- Install [Defects4J](https://github.com/rjust/defects4j) and/or Maven if you want to validate patches with them\n- Clone this repository\n- `pip3 install -r requirements.txt`\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Preparation",
                    "parent_header": [
                        "ExpressAPR",
                        "\ud83d\udcda Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Equipped with mutation testing accerelation techniques**\n  - Mutant Schemata + Mutant Deduplication + Test Virtualization + Test Case Prioritization + Parallelization\n  - ~100x faster than `defects4j compile && defects4j test` (experimented with four APR systems) \n",
                    "original_header": "\u2728 Highlights"
                },
                "confidence": 0.9380905096958598,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Step 2: Use `-t fallback` flag.** If the result is still wrong with `--no-dedup`, it may be a problem in [VMVM](https://github.com/Programming-Systems-Lab/vmvm), a third-party Test Virtualization dependency of ExpressAPR (similar to the JVM Reset component in UniAPR). We have [already fixed a few problems we encounter](https://github.com/ExpressAPR/VMVM/compare/07a36dc21373147c50ceacd7bff2b2e7a86c8780...master) in our VMVM fork, but there may be more problems. You may investigate the problem, or pass `-t fallback` to the `expapr-cli run` command to disable Test Virtualization (and also Mutant Deduplication that depends on it).\n \n",
                    "original_header": "Q2. Patch validation results are wrong"
                },
                "confidence": 0.9745911524695523,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We currently don't support validating patches to submodules. If this is the case, please directly validate the submodule (set `-b` to the directory of the submodule), not the parent module. \n",
                    "original_header": "Q3. Cannot `init` for a Maven project"
                },
                "confidence": 0.9670008527147421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-25T13:59:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T10:49:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 201160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 90557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 586
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "91": {
        "filename": "hub-se_jpf-shadow_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hub-se/jpf-shadow",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The following instructions will show you how to install and run `jpf-shadow`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Shadow Symbolic Execution with Java PathFinder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hub-se/jpf-shadow/master/README.md"
            },
            {
                "result": {
                    "value": "To build jpf-shadow using the command line, move to the project directory (i.e. `<user.home>/workspace/jpf/jpf-shadow`) and run: \n\n```\nant build\n```\nIf there are any building errors, please check if your `site.properties` file is setup correctly.\n",
                    "type": "Text_excerpt",
                    "original_header": "2a. Setup using the command line",
                    "parent_header": [
                        "Shadow Symbolic Execution with Java PathFinder",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hub-se/jpf-shadow/master/README.md"
            },
            {
                "result": {
                    "value": "1. In Eclipse, go to **File > Import...** to import `jpf-shadow` as an existing project.\n2. Confirm that `jpf-core` and `jpf-symbc` are listed as required projects on the build path of `jpf-shadow`.\n3. Select the `build.xml` file and run it as **Ant Build**.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "2b. Setup using Eclipse",
                    "parent_header": [
                        "Shadow Symbolic Execution with Java PathFinder",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hub-se/jpf-shadow/master/README.md"
            },
            {
                "result": {
                    "value": "To specify the initial test input of the `foo(int)` method, simply change the concrete parameter passed to it inside the main method.\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Choosing the initial test input",
                    "parent_header": [
                        "Shadow Symbolic Execution with Java PathFinder",
                        "Setup",
                        "3. Running jpf-shadow",
                        "Example: Foo"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hub-se/jpf-shadow/master/README.md"
            },
            {
                "result": {
                    "value": "Assuming that `foo(int)` has been run with the initial input `x=1`, the output should contain the following lines:\n\n```\n...\n====================================================== Method Summaries\nInputs: x\n\njpf2017.foo.Foo_1c.foo(11)\t--> Diff in line: 22, Type: diffFalse\t(Return Value: 2)\nPaths explored: 1\n...\n```\n\nThis means that `jpf-shadow` has found a _diff false_ divergence (i.e. the old version takes the _true_ path while the new version takes the _false_ path) at line 22 for the input `x=11` and the return value (of the new version) is 2.\n\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "3. Output",
                    "parent_header": [
                        "Shadow Symbolic Execution with Java PathFinder",
                        "Setup",
                        "3. Running jpf-shadow",
                        "Example: Foo"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hub-se/jpf-shadow/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-09-15T20:22:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-13T23:57:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 486723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 604
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "92": {
        "filename": "lucasvegi_elixir-code-smells_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lucasvegi/Elixir-Code-Smells",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  ```elixir\n  defmodule SupervisedProcess.Application do\n    use Application\n\n    @impl true\n    def start(_type, _args) do\n      children = [\n        # The counters are Supervisor children started via Counter.start(0).\n        %{\n          id: Counter,\n          start: {Counter, :start, [0]}\n        },\n        %{\n          id: C2,\n          start: {Counter, :start, [0, C2]}\n        }\n      ]\n\n      opts = [strategy: :one_for_one, name: App.Supervisor]\n      Supervisor.start_link(children, opts)\n    end\n  end\n\n  #...Use examples...\n\n  iex(1)> Supervisor.count_children(App.Supervisor)\n  %{active: 2, specs: 2, supervisors: 0, workers: 2}\n\n  iex(2)> Counter.get(Counter)\n  0\n\n  iex(3)> Counter.get(C2)\n  0\n\n  iex(4)> Counter.bump(7, Counter)\n  7\n\n  iex(5)> Supervisor.terminate_child(App.Supervisor, Counter)\n  iex(6)> Supervisor.count_children(App.Supervisor)\n  %{active: 1, specs: 2, supervisors: 0, workers: 2}  #only one active\n\n  iex(7)> Counter.get(Counter)   #Error because it was previously terminated\n  ** (EXIT) no process: the process is not alive...\n\n  iex(8)> Supervisor.restart_child(App.Supervisor, Counter)\n  iex(9)> Counter.get(Counter)   #after the restart, this process can be accessed again\n  0\n  ``` \n",
                    "original_header": "Unsupervised process"
                },
                "confidence": 0.9995854793947389,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  ```elixir\n  defmodule CodeSmells do\n    def dasherize(data) do\n      to_string(data)\n      |> String.replace(\"_\", \"-\")\n    end\n  end\n\n  #...Use examples...\n\n  iex(1)> CodeSmells.dasherize(\"Lucas_Vegi\")\n  \"Lucas-Vegi\"\n\n  iex(2)> CodeSmells.dasherize(10)  #<= Makes sense?\n  \"10\"\n\n  iex(3)> CodeSmells.dasherize(URI.parse(\"http://www.code_smells.com\")) #<= Makes sense?\n  \"http://www.code-smells.com\"\n\n  iex(4)> CodeSmells.dasherize(%{last_name: \"vegi\", first_name: \"lucas\"})\n  ** (Protocol.UndefinedError) protocol String.Chars not implemented\n  for %{first_name: \"lucas\", last_name: \"vegi\"} of type Map\n  ``` \n",
                    "original_header": "Untested polymorphic behaviors"
                },
                "confidence": 0.9125281645329849,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  You can run this smelly migration above by going to the root of your project and typing the next command via console: \n  You can run this ``mix task`` above by typing the next command via console: \n",
                    "original_header": "Data manipulation by migration"
                },
                "confidence": 0.9987628056665099,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* __Note:__ Formerly known as \"App configuration for code libs\". \n* __Example:__ The ``DashSplitter`` module represents a library that configures the behavior of its functions through the global ``Application Environment`` mechanism. These configurations are concentrated in the ``config/config.exs`` file, shown below: \n",
                    "original_header": "Using App Configuration for libraries"
                },
                "confidence": 0.9758717356360113,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* __Note:__ Formerly known as \"Compile-time app configuration\". \n  Due to this compile-time configuration based on the ``Application Environment`` mechanism, Elixir can raise warnings or errors, as shown next, during compilation: \n",
                    "original_header": "Compile-time global configuration"
                },
                "confidence": 0.9845017481836399,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please feel free to make pull requests and suggestions ([Issues][Issues] tab). \n",
                    "original_header": "About"
                },
                "confidence": 0.9822245383229566,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lucasvegi/elixir-code-smells/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-15T16:03:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T20:17:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Elixir",
                    "name": "Elixir",
                    "type": "Programming_language",
                    "size": 1094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "93": {
        "filename": "ucuapps_modelicagym_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ucuapps/modelicagym",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Installation instructions\nThese instructions can be used to setup environment quickly. However, as it is semi-automated with Anaconda,\ninstalled libraries are usually of the latest versions.\nTo setup environment with specific versions of the required libraries\nplease refer to the [old instructions](https://github.com/ucuapps/modelicagym/blob/master/docs/install_old.md).\n\n\n### Test setup description\nAs for 13.02.2020 such a quick installation leads to the following setup:\n\n* Ubuntu 18 64 Bit machine\n* Python 3.8.1\n* Java 8\n* Assimulo 3.1\n* PyFMI 2.5.7\n* Sundials 5.1.0\n* *(optional)* Ipopt 3.12.12\n* *(optional)* Dymola 2017 - if one wants to to compile own FMU. \nIf one wants to use an FMU exported from Dymola for simulation, licence file should be available.\n* *(optional)* JModelica 2.4 - if one wants to compile own FMU.\n\n\n### Anaconda\nTo simplify installation process Anaconda is used. If you have one installed, skip this step.\n\nFirst, install *Miniconda* for **Python 3** following the instruction on the official [site](https://docs.conda.io/en/latest/miniconda.html):\nDownload corresponding installer and run it.\n\nAdd *conda-forge* as channel:\n```bash\nconda config --add channels conda-forge\n```\n\nInstall PyFMI:\n```bash\nconda install pyfmi\n```\n\n##### \u00a0Sources: \n* [PyFMI in Python 3 environment in Ubuntu 18.04](https://stackoverflow.com/questions/59582257/pyfmi-in-python-3-environment-in-ubuntu-18-04)\n\n### Install OpenAI gym with libav-tools for visualization purposes\n\nFirst:\n\n    sudo apt-get install libav-tools\n    \nInstall with pip:    \n\n    pip install gym\n\n**Or** you can build it from sources:\n\n\tgit clone https://github.com/openai/gym.git\n\tcd gym\n\tpip install -e .\n\nFinally:\n\n\tsudo pip3 install pyglet\n\n##### \u00a0Source: \n*  [Official Documentation](http://gym.openai.com/docs/#installation)\n\n\n### \u00a0Install Java 8\n    sudo apt install openjdk-8-jdk\nIf you are using Oracle distribution of Java 8, this should be fine as well.\n\n## Optional:\n### Dev-tools\nIt is advised to install PyCharm for convenient work on a project and running examples.\n\n#### PyCharm\nSimply execute:\n\n    sudo apt install snapd snapd-xdg-open\n    sudo snap install pycharm-community --classic\n\nRun PyCharm from the list of applications.\n\n### Modelica tools \n\t\nAs it was mentioned, you need Dymola or JModelica, if you are going to recompile FMU's.\n\n### JModelica\nFirst, install all required packages:\n\n    sudo apt-get -y install g++\n    sudo apt-get -y install subversion\n    sudo apt-get -y install gfortran\n    sudo apt-get -y install ipython\n    sudo apt-get -y install cmake\n    sudo apt-get -y install swig\n    sudo apt-get -y install ant\n    sudo apt-get -y install openjdk-8-jdk\n    sudo apt-get -y install python-dev\n    sudo apt-get -y install python-numpy\n    sudo apt-get -y install python-scipy\n    sudo apt-get -y install python-matplotlib\n    sudo apt-get -y install cython\n    sudo apt-get -y install python-lxml\n    sudo apt-get -y install python-nose\n    sudo apt-get -y install python-jpype\n    sudo apt-get -y install zlib1g-dev\n    sudo apt-get -y install libboost-dev\n\n#### Install IPopt\nDownload [Ipopt](https://www.coin-or.org/download/source/Ipopt/) and run following commands:\n\n    tar xvf Ipopt-<version>.tgz\n    cd Ipopt-<version>/ThirdParty/Blas\n    ./get.Blas\n    cd ../Lapack\n    ./get.Lapack\n    cd ../Mumps\n    ./get.Mumps\n    cd ../Metis\n    ./get.Metis\n    cd ../../\n    \n    mkdir build\n    cd build\n    ../configure --prefix=/home/<user_name>/<ipopt_installation_location>\n    make install\n\n#### JModelica\nFirst, checkout it using subversion:\n    \n    svn co https://svn.jmodelica.org/trunk JModelica\n\nThen run following commands:\n\n    cd JModelica\n    mkdir build\n    cd build\n    ../configure --prefix=/home/<user_name>/<jmodelica_install_location> \\\n     --with-ipopt=/home/<user_name>/<ipopt_install_location>\n    make install\n    \n### Dymola\n\nDymola for Linux is distributed as a tar file that contains rpm files. \nReplace the first line with the actual Dymola version and run the following commands:\n\n    # Change DYMVER to the version you are installing\n    DYMVER=dymola-2016-x86_64\n    # Unzip or untar the file, for example if there is a file ${DYMVER}-linux.tar.gz, type\n    tar xzf ${DYMVER}-linux.tar.gz\n    # Unpack the rpm files\n    cd ${DYMVER}-linux\n    for ff in `ls *.rpm`; do (sudo rpm2cpio $ff | cpio -i --make-directories); done\n    sudo chmod -R o-w opt/${DYMVER}\n    sudo mv opt/${DYMVER} /opt/${DYMVER}\n\n    # Dymola is now installed in /opt/$DYMVER  \n    # We will now make it executable with a simple dymola command\n    sudo ln -s /opt/${DYMVER}/bin/dymola.sh /usr/local/bin/dymola\n\n    # Now move the man page to the right location (create the folder first if you get an error)\n    sudo mv usr/local/man/man1/dymola.1 /usr/local/share/man/man1/dymola.1\n\n\tcd /opt\n\tsudo unzip DYMOLA_2017_AllLinux.zip -d DYMOLA_2017\n\tcd DYMOLA_2017/linux_x86_64/\n\tsudo alien -i -k dymola-2017.1-1.x86_64.rpm\n\n#### Source\nThese instructions were taken from [here](https://simulationresearch.lbl.gov/modelica/installDymolaLinux.html).\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/ucuapps/modelicagym/master/docs/install.md"
            },
            {
                "result": {
                    "value": "## Installation instructions\nThese instructions can be used to setup environment with specific versions of libraries.\nTo this end, corresponding versions should be specified instead of used further.\n\n### Test setup description\nv1.0 of the toolbox was tested on the following setup:\n\n* Ubuntu 18 64 Bit machine\n* Python 3.6.8\n* Java 8\n* Assimulo 2.9\n* PyFMI 2.3.1\n* Sundials 2.4.0\n* Ipopt 3.12.12\n* *(optional)* Dymola 2017 - if one wants to to compile own FMU.\nIf one wants to use an FMU exported from Dymola for simulation, licence file should be available.\n* *(optional)* JModelica 2.4 - if one wants to compile own FMU.\n\n### Python and Python modules\nBackward compatibility is expected, but not guaranteed.\nUse Python 3.6, as it was utilized in the test setup.\n\n#### Install Python and other necessary packages\n\tsudo apt-get update\t\n\tsudo apt-get install python3-pip python3-dev\n\tsudo apt-get install libatlas-base-dev gfortran libffi-dev\n\tsudo apt-get install libfreetype6-dev\n\tsudo apt-get install cmake\n\nYou can check Python version with the following command:\n\n    python3 -V\n    \n#### Install modules\n\tpip3 install --upgrade numpy\n    pip3 install --upgrade scipy\n    pip3 install --upgrade nose\n    pip3 install --upgrade pandas\n    pip3 install --upgrade matplotlib\n    pip3 install --upgrade sympy\t\n    pip3 install --upgrade jupyter\n    pip3 install --upgrade pytest\n    pip3 install --upgrade Cython\n    pip3 install --upgrade lxml\n### Install PyFMI\nFollowing steps are executed from your user home directory. \nIf starting from other point, please adjust paths respectively.\n\n####  Create working dir\n\tmkdir pyfmi\n\n#### Install FMI Library\n\tcd pyfmi\n    sudo wget http://www.jmodelica.org/fmil/FMILibrary-2.0.3-src.zip\n    sudo unzip FMILibrary-2.0.3-src.zip\n    cd FMILibrary-2.0.3/\n    sudo mkdir build-fmilib && cd build-fmilib\n    sudo cmake -DFMILIB_INSTALL_PREFIX=../install ../\n    sudo make install test\n\n#### Install Sundials\n\tcd pyfmi\n\tsudo wget http://computation.llnl.gov/projects/sundials-suite-nonlinear-differential-algebraic-equation-solvers/download/sundials-2.4.0.tar.gz\n\ttar xzf sundials-2.4.0.tar.gz\n\tcd sundials-2.4.0\n\tsudo ./configure CFLAGS=\"-fPIC\"\n\tsudo make install\n\t\n#### Install Assimulo\n\tcd pyfmi\t\n\tsudo wget https://pypi.python.org/packages/4c/c0/19a54949817204313efff9f83f1e4a247edebed0a1cc5a317a95d3f374ae/Assimulo-2.9.zip\n \tsudo unzip Assimulo-2.9.zip\n\tcd Assimulo-2.9\n    sudo python3 setup.py install --sundials-home=/usr/local/ --blas-home=/usr/lib/x86_64-linux-gnu/ --lapack-home=/usr/lib/x86_64-linux-gnu/ --log=DEBUG\n\n#### Install PyFMI\n\tcd pyfmi\n\tsudo wget https://pypi.python.org/packages/66/60/26664b2b2cad4a7fae409214e2f8901177322d78bfb11ef61e580115c9b8/PyFMI-2.3.1.zip#md5=577829ee1ee83fbb8c28ddf4b82aa4ee\n\tsudo unzip PyFMI-2.3.1.zip\n\tcd PyFMI-2.3.1\n\tsudo python3 setup.py install --fmil-home=/home/<your_username>/pyfmi/FMILibrary-2.0.2b3/install/\n\nYou can try installing latest version using pip. \nHowever this version & setup was not tested:\n    \n    pip3 install pyfmi\n\n\n##### \u00a0Sources: \n* [FMILibrary. Official docs](https://jmodelica.org/fmil/FMILibrary-2.0.3-htmldoc/index.html)\n* [Sundials. Official Installation guide](https://github.com/LLNL/sundials/blob/master/INSTALL_GUIDE.pdf)\n* [Assimulo. Official Installation guide](https://jmodelica.org/assimulo/installation.html)\n* [PyFMI. Official Installation guide](https://jmodelica.org/pyfmi/installation.html)\n* [PyFMI on pypi](https://pypi.org/project/PyFMI/)\n\n### Install OpenAI gym with libav-tools for visualization purposes\n\nFirst:\n\n    sudo apt-get install libav-tools\n    \nInstall with pip:    \n\n    pip install gym\n\n**Or** you can build it from sources:\n\n\tgit clone https://github.com/openai/gym.git\n\tcd gym\n\tpip install -e .\n\nFinally:\n\n\tsudo pip3 install pyglet\n\n##### \u00a0Source: \n*  [Official Documentation](http://gym.openai.com/docs/#installation)\n\n\n### \u00a0Install Java 8\n    sudo apt install openjdk-8-jdk\nIf you are using Oracle distribution of Java 8, this should be fine as well.\n\n## Optional: \n\n### Dev-tools\nYou may want to install PyCharm and Jupyter Notebooks for convenience. \n\n#### PyCharm\nSimply execute:\n\n    sudo apt install snapd snapd-xdg-open\n    sudo snap install pycharm-community --classic\n\nRun PyCharm from the list of applications.\n\n#### Jupyter Notebook\nYou can install it with the following command:\n\n    python3 -m pip install --upgrade pip\n    python3 -m pip install jupyter\n\nUse `jupyter notebook` command to run it. \n\n\n### Modelica tools \n\t\nAs it was mentioned, you need Dymola or JModelica, if you are going to recompile FMU's.\n\n### JModelica\nFirst, install all required packages:\n\n    sudo apt-get -y install g++\n    sudo apt-get -y install subversion\n    sudo apt-get -y install gfortran\n    sudo apt-get -y install ipython\n    sudo apt-get -y install cmake\n    sudo apt-get -y install swig\n    sudo apt-get -y install ant\n    sudo apt-get -y install openjdk-8-jdk\n    sudo apt-get -y install python-dev\n    sudo apt-get -y install python-numpy\n    sudo apt-get -y install python-scipy\n    sudo apt-get -y install python-matplotlib\n    sudo apt-get -y install cython\n    sudo apt-get -y install python-lxml\n    sudo apt-get -y install python-nose\n    sudo apt-get -y install python-jpype\n    sudo apt-get -y install zlib1g-dev\n    sudo apt-get -y install libboost-dev\n\n#### Install IPopt\nDownload [Ipopt](https://www.coin-or.org/download/source/Ipopt/) and run following commands:\n\n    tar xvf Ipopt-<version>.tgz\n    cd Ipopt-<version>/ThirdParty/Blas\n    ./get.Blas\n    cd ../Lapack\n    ./get.Lapack\n    cd ../Mumps\n    ./get.Mumps\n    cd ../Metis\n    ./get.Metis\n    cd ../../\n    \n    mkdir build\n    cd build\n    ../configure --prefix=/home/<user_name>/<ipopt_installation_location>\n    make install\n\n#### JModelica\nFirst, checkout it using subversion:\n    \n    svn co https://svn.jmodelica.org/trunk JModelica\n\nThen run following commands:\n\n    cd JModelica\n    mkdir build\n    cd build\n    ../configure --prefix=/home/<user_name>/<jmodelica_install_location> \\\n     --with-ipopt=/home/<user_name>/<ipopt_install_location>\n    make install\n    \n### Dymola\n\nDymola for Linux is distributed as a tar file that contains rpm files. \nReplace the first line with the actual Dymola version and run the following commands:\n\n    # Change DYMVER to the version you are installing\n    DYMVER=dymola-2016-x86_64\n    # Unzip or untar the file, for example if there is a file ${DYMVER}-linux.tar.gz, type\n    tar xzf ${DYMVER}-linux.tar.gz\n    # Unpack the rpm files\n    cd ${DYMVER}-linux\n    for ff in `ls *.rpm`; do (sudo rpm2cpio $ff | cpio -i --make-directories); done\n    sudo chmod -R o-w opt/${DYMVER}\n    sudo mv opt/${DYMVER} /opt/${DYMVER}\n\n    # Dymola is now installed in /opt/$DYMVER  \n    # We will now make it executable with a simple dymola command\n    sudo ln -s /opt/${DYMVER}/bin/dymola.sh /usr/local/bin/dymola\n\n    # Now move the man page to the right location (create the folder first if you get an error)\n    sudo mv usr/local/man/man1/dymola.1 /usr/local/share/man/man1/dymola.1\n\n\tcd /opt\n\tsudo unzip DYMOLA_2017_AllLinux.zip -d DYMOLA_2017\n\tcd DYMOLA_2017/linux_x86_64/\n\tsudo alien -i -k dymola-2017.1-1.x86_64.rpm\n\n#### Source\nThese instructions were taken from [here](https://simulationresearch.lbl.gov/modelica/installDymolaLinux.html).\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/ucuapps/modelicagym/master/docs/install_old.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can test working environment by running \n[./test_setup.py](https://github.com/ucuapps/modelicagym/blob/master/test/setup_test.py) script. \nYou can install package itself by running `pip install git+https://github.com/ucuapps/modelicagym.git` (or `pip3 install git+https://github.com/ucuapps/modelicagym.git` if you have both python versions installed).\n \n",
                    "original_header": "Instalation"
                },
                "confidence": 0.998140191680079,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ucuapps/modelicagym/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-26T16:13:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T15:00:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45923
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Modelica",
                    "name": "Modelica",
                    "type": "Programming_language",
                    "size": 12503
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "94": {
        "filename": "staeiou_github-survey-analysis_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/staeiou/github-survey-analysis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-06-02T15:33:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-20T20:22:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3646720
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 128088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "95": {
        "filename": "zenscr_pyprsvt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mikeczech/PyVRank",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* https://arxiv.org/abs/1703.00757\n* https://sv-comp.sosy-lab.org/2014/\n \n",
                    "original_header": "Paper and Other Resources"
                },
                "confidence": 0.9949986916883482,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zenscr/pyprsvt/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-01T14:14:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-20T09:26:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 64680
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 24444
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1025
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "96": {
        "filename": "soad003_theoperationalcostofethereumairdrops_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soad003/TheOperationalCostOfEthereumAirdrops",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Install node JS packages for Simulation:\n```\nnpm install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "The Operational Cost of Ethereum Airdrops"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soad003/theoperationalcostofethereumairdrops/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Visualization code as well as the tikz export can be found in the following (Jupyter/ipython) notebook. \n```\nairdrops_simulation_gh.ipynb\n```\nDependencies are listed in the first cell of the notebook and must be installed manually. The packages are pretty standard revolving around the pandas, matplotlib ecosystem:\n```\nmatplotlib2tikz\nseaborn\nmatplotlib\nnumpy\npandas\ntqdm\n```\n \n",
                    "original_header": "Visualizing experiment data"
                },
                "confidence": 0.9999979675332233,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soad003/theoperationalcostofethereumairdrops/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-29T08:42:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-07-30T07:46:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1617406
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20259
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "97": {
        "filename": "samarthtambad_big-data-pl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/samarthtambad/big-data-pl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Size: 102 GB \\\nSource: https://ghtorrent.org/ \n",
                    "original_header": "1. Github"
                },
                "confidence": 0.9745959204199135,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/samarthtambad/big-data-pl/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n.\n\u251c\u2500\u2500 build.sbt\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 github_final_metrics.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stackoverflow_final_metrics.csv\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 build.properties\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 target\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 config-classes\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 scala-2.12\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 streams\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 screenshots\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scala\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 app_code\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis_github.scala\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 analysis_stackoverflow.scala\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 data_ingest\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 ingest.txt\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 etl_code\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 etl_github.scala\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 etl_stackoverflow.scala\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 profiling_code\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u251c\u2500\u2500 profile_github.scala\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 profile_stackoverflow.scala\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 test_code\n\u2502\u00a0\u00a0             \u2514\u2500\u2500 test.scala\n\u2514\u2500\u2500 target\n    \u251c\u2500\u2500 scala-2.11\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 big-data-pl_2.11-1.0.jar\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 classes\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 update\n    \u2514\u2500\u2500 streams\n```\nThe BASH2* folder contains the final computed metrics each for GitHub and StackOverflow.\nThe compiled BASH3* file can be found at location BASH4*.\n \n",
                    "original_header": "File Structure"
                },
                "confidence": 0.9874598937690077,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/samarthtambad/big-data-pl/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-03T19:14:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-03-03T01:27:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 57155
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "98": {
        "filename": "uphf_kotlinandroid_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/kotlinandroid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-12-05T15:39:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-20T17:05:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "99": {
        "filename": "cc2vec_cc2vec_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CC2Vec/CC2Vec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Note that we need the training and testing dataset for this task. Please run this command to train our model:\n\n      $ python bfp_cc2ftr.py -train -train_data [path of our training data] -test_data [path of our training data] -dictionary_data [path of our dictionary data]\n\n- Similar to the first task, the command will create a folder snapshot used to save our model. To extract the code change features, please follow this command:\n\n      $ python bfp_cc2ftr.py -predict -predict_data [path of our data] -dictionary_data [path of our dictionary data] -load_model [path of our model] -name [name of our output file]\n      \n- To train the model for bug fixing patch identification, please follow this command: \n\n      $ python bfp_PNExtended.py -train -train_data [path of our data] -train_data_cc2ftr [path of our code changes features extracted from training data] -dictionary_data [path of our dictionary data]\n      \n- To evaluate the model for bug fixing patch identification, please follow this command:\n      \n       $ python bfp_PNExtended.py -predict -pred_data [path of our data] -pred_data_cc2ftr [path of our code changes features extracted from our data] -dictionary_data [path of our dictionary data] -load_model [path of our model]\n       ",
                    "type": "Text_excerpt",
                    "original_header": "2. Bug fixing patch identification",
                    "parent_header": [
                        "CC2Vec: Distributed Representations of Code Changes [<a href=\"https://arxiv.org/pdf/2003.05620.pdf\">pdf</a>]",
                        "Running and evalutation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/cc2vec/cc2vec/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please install the neccessary libraries before running our tool: \n- python==3.6.9\n- torch==1.2.0\n- tqdm==4.46.1\n- nltk==3.4.5\n- numpy==1.16.5\n- scikit-learn==0.22.1\n \n",
                    "original_header": "Implementation Environment"
                },
                "confidence": 0.9976402659227326,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cc2vec/cc2vec/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- https://zenodo.org/record/3965149#.X2VeP5MzY1J \n",
                    "original_header": "Data &amp; Pretrained models:"
                },
                "confidence": 0.9601222173042181,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cc2vec/cc2vec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-24T06:44:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-06T02:55:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 133397
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "100": {
        "filename": "jazzbob_stb_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lenzbelzner/stb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-02-27T15:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-02-27T15:35:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7846
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "101": {
        "filename": "zysszy_treegen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zysszy/TreeGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Pytorch version is available at https://github.com/zysszy/TreeGen-Pytorch/tree/main.\n \n",
                    "original_header": "TreeGen"
                },
                "confidence": 0.9999857962805601,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zysszy/treegen/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Code Search (OCoR: An Overlapping-Aware Code Retriever, ASE'20): pdf (https://arxiv.org/pdf/2008.05201.pdf), code (https://github.com/pkuzqh/OCoR)  \nProgram Repair (A Syntax-Guided Edit Decoder for Neural Program Repair, ESEC/FSE'21): pdf (https://arxiv.org/pdf/2106.08253v1.pdf), code (https://github.com/pkuzqh/Recoder).\n \n",
                    "original_header": "News:"
                },
                "confidence": 0.9904872266561917,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zysszy/treegen/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* NLTK 3.2.1\n* Tensorflow 1.12.1\n* Python 3.7\n* Ubuntu 16.04\n \n",
                    "original_header": "Dependenices"
                },
                "confidence": 0.9997860654215128,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zysszy/treegen/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-20T05:52:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-03T22:38:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 124913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "102": {
        "filename": "elkoumy_amun_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Elkoumy/amun",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-11T19:16:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-24T06:56:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 443803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "103": {
        "filename": "setu1421_fpsecretbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/setu1421/FPSecretBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " - Setu Kumar Basak (sbasak4@ncsu.edu)\n - Jamison Cox (jcox3@ncsu.edu)\n - Bradley Reaves (bgreaves@ncsu.edu)\n - Laurie Willams (lawilli3@ncsu.edu) \n  \n",
                    "original_header": "Authors:"
                },
                "confidence": 0.947657590785864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/setu1421/fpsecretbench/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-02T19:27:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-02T19:27:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "104": {
        "filename": "autoqml_whitepaper-framework-selection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AutoQML/Whitepaper-Framework-Selection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-25T13:13:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-06T14:19:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "105": {
        "filename": "privacyengineering_hawk-monitor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-monitor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The Docker-Image features a nginx server to enabled browser-routing in React.\n\nTo start the Dashboard just run:\n\n```\ndocker run -e API_URL=http://localhost:8000 -p 80:80 ghcr.io/privacyengineering/hawk-core-monitor\n```\n\n**Note: The Dashboard needs a running Hawk-Service instance reverse-proxied on the same port by default.**\n**Note: The Grafana Part of the Dashboard is configured in\nthe [Hawk project](https://github.com/PrivacyEngineering/hawk) via. a Kubernetes deployment.**\n\nTo manually specify the `hawk-service` you can pass the `API_URL` environment variable.\n\nSee [History](HISTORY.md) for the history of the creation of the UI.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Hawk Core Monitor"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk-monitor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-30T22:40:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-22T11:06:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 132668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 116341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "106": {
        "filename": "winiars_meros_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/twiniars/MeROS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<img src=\"https://github.com/twiniars/MeROS/blob/main/meros-graphical-abstract.png\"> \n</p>\n \n",
                    "original_header": "MeROS: SysML-based Metamodel for ROS-related Systems"
                },
                "confidence": 0.9953236700072952,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/twiniars/meros/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* User feedback and contribution is welcome with issues https://github.com/twiniars/MeROS/issues \n",
                    "original_header": "Contribution"
                },
                "confidence": 0.998300046373744,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/twiniars/meros/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-07T18:33:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T09:49:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 121298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "107": {
        "filename": "jazzbob_bv_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lenzbelzner/bv",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-02-27T15:17:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-03-15T18:03:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 9867
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "108": {
        "filename": "se2p_litterbox_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/LitterBox",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "LitterBox is built using [Maven](https://maven.apache.org/). To\nproduce an executable jar-file, run the following command:\n```\nmvn package\n```\n \n",
                    "original_header": "Building LitterBox"
                },
                "confidence": 0.994802017534843,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/litterbox/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to check several projects at once, you can put a list of\nproject IDs to check in a text file (one project ID per line) and\ninvoke LitterBox as follows:\n```\njava -jar Litterbox-1.8.jar --check --projectlist <path/to/projectidlist.txt> --path <path/to/projects>\n```\n \n",
                    "original_header": "Checking multiple projects"
                },
                "confidence": 0.9984981619377193,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/litterbox/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Using the `--detectors` command line parameter it is possible to\nspecify which bug patterns to check for. The option takes a\ncomma-separated list of bug patterns, e.g.: \n\n```\njava -jar Litterbox-1.8.jar --check --path <path/to/project.json> --detectors endless_recursion,call_without_definition\n``` \nTo select all bug patterns, you can also use the term `bugs` in the\nlist; to select all code smell checks use `smells`.\n \n",
                    "original_header": "Selecting bug finders"
                },
                "confidence": 0.9566918695539613,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/litterbox/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Since version 1.7 Litterbox can automatically refactor a given Scratch project to improve its readability:\n```\njava -jar Litterbox-1.8.jar \\\n    --refactor \\\n    --path <path/to/project.json> \\\n    --refactored-projects <path/to/output-dir>\n```\n \n",
                    "original_header": "Automatically refactoring projects"
                },
                "confidence": 0.998740822330732,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/litterbox/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To be able to use code2vec with the programming language Scratch, Litterbox can produce a file as \ninput for code2vecs machine learning. According to the description on https://github.com/tech-srl/code2vec#extending-to-other-languages,\nLitterbox produces a file with exactly these rules. It's like a Scratch extractor. Litterbox needs a path to a single file or a folder with \nmultiple projects and produces the output to the declared output folder.\n```\njava -jar target/Litterbox-1.8-SNAPSHOT.jar -c2v -output <path/to/folder/for/the/output> -path <path/to/json/project/or/folder/with/projects>\n```\n \n",
                    "original_header": "Code2Vec output"
                },
                "confidence": 0.9976770880216848,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/litterbox/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-24T16:23:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-18T17:41:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4878759
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1795
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "109": {
        "filename": "hajranaeem_dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HajraNaeem/Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have collected these SmartApps from: https://github.com/SmartThingsCommunity/SmartThingsPublic. To prepare this dataset Celik et al. [[1]](#1) have collected SmartApps from marketplace, community, SmartThings forum and IoTBench.\n \n",
                    "original_header": "SmartThings - Corpus 1"
                },
                "confidence": 0.9750090009729908,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hajranaeem/dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-14T18:41:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-26T10:38:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "110": {
        "filename": "solar-group_sentinel_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOLAR-group/sentinel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-10-20T20:46:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-20T12:15:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 795420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "111": {
        "filename": "singhalshubh_sat_parallelism_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/singhalshubh/Hardware-Acceleration-of-Minisat--AccEx",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-13T00:48:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-24T13:15:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 79640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1235
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "112": {
        "filename": "xingyaoww_leti_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/xingyaoww/LeTI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can setup your Google Cloud TPU and Storage following [docs/SETUP.md](docs/SETUP.md). Alternatively, you may also adapt the released code to your specific computing setup.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "LeTI: Learning to Generate from Textual Interactions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/xingyaoww/leti/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can prepare datasets for training and evaluation following instructions in [docs/DATA.md](docs/DATA.md).\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9409000605359528,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/xingyaoww/leti/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-16T18:35:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T09:44:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 688700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 69719
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "113": {
        "filename": "castor-software_deptrim_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/deptrim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prerequisites:\n\n- [Java OpenJDK 17](https://openjdk.java.net) or above\n- [Apache Maven](https://maven.apache.org/)\n\nIn a terminal, clone the repository and switch to the cloned folder:\n\n```bash\ngit clone https://github.com/castor-software/deptrim.git\ncd deptrim\n```\n\nThen run the following Maven command to build the application and install the plugin locally:\n\n```bash\nmvn clean install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and building from source",
                    "parent_header": [
                        "DepTrim <img src=\".img/logo.svg\" align=\"left\" height=\"135px\" alt=\"DepTrim logo\"/>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The `pom-specialized.xml` is created following these steps: \n",
                    "original_header": "How does DepTrim works?"
                },
                "confidence": 0.9693387139032118,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/castor-software/depclean/blob/master/.img/wasp.svg\" height=\"50px\" alt=\"Wallenberg Autonomous Systems and Software Program (WASP)\"/>\n \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9934639464983258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/deptrim/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-20T19:47:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T08:31:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 58520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "114": {
        "filename": "tsantalis_refactoringminer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tsantalis/RefactoringMiner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**<ins>supported by RefactoringMiner 1.0 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.0 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.1 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.2 and newer versions</ins>** \n63. Change Attribute Access Modifier\n64. Encapsulate Attribute\n65. Parameterize Attribute\n66. Replace Attribute with Variable\n67. Add Method Modifier (`final`, `static`, `abstract`, `synchronized`)\n68. Remove Method Modifier (`final`, `static`, `abstract`, `synchronized`)\n69. Add Attribute Modifier (`final`, `static`, `transient`, `volatile`)\n70. Remove Attribute Modifier (`final`, `static`, `transient`, `volatile`)\n71. Add Variable Modifier (`final`)\n72. Add Parameter Modifier (`final`)\n73. Remove Variable Modifier (`final`)\n74. Remove Parameter Modifier (`final`)\n75. Change Class Access Modifier\n76. Add Class Modifier (`final`, `static`, `abstract`)\n77. Remove Class Modifier (`final`, `static`, `abstract`)\n78. Move Package\n79. Split Package\n80. Merge Package\n81. Localize Parameter\n82. Change Type Declaration Kind (`class`, `interface`, `enum`, `annotation`, `record`)\n83. Collapse Hierarchy\n84. Replace Loop with Pipeline\n85. Replace Anonymous with Lambda \n**<ins>supported by RefactoringMiner 2.3 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 2.4 and newer versions</ins>** \n**<ins>supported by RefactoringMiner 3.0 and newer versions</ins>** \n",
                    "original_header": "General info"
                },
                "confidence": 0.9575193895126168,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\t1. Replace Loop with Pipeline\n\t2. Replace Anonymous with Lambda\n \t3. Replace Pipeline with Loop\n  \t4. Merge Catch\n   \t5. Replace Anonymous with Class\n   \t6. Replace Generic With Diamond\n\t7. Try With Resources\n\t8. Replace Conditional With Ternary\n</details> \n",
                    "original_header": "Supported Refactoring Types"
                },
                "confidence": 0.9998158264452126,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In order to build the project, run `./gradlew jar` (or `gradlew jar`, in Windows) in the project's root directory.\nAlternatively, you can generate a complete distribution zip including all runtime dependencies running `./gradlew distZip`. \n",
                    "original_header": "How to build RefactoringMiner"
                },
                "confidence": 0.9999839119921128,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tsantalis/refactoringminer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-29T13:13:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T11:48:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 246489160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1003
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "115": {
        "filename": "eth-sri_sven_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eth-sri/sven",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Set up Python dependencies (a virtual environment is recommended) and [GitHub CodeQL](https://github.com/github/codeql):\n```console\n$ pip install -r requirements.txt\n$ pip install -e .\n$ ./setup_codeql.sh\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SVEN: Security Hardening and Adversarial Testing for Code LLMs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/sven/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To evaluate the security of SVEN using the trained models provided by us, run:\n```console\n$ python sec_eval.py --model_type prefix --model_dir ../trained/350m-prefix/checkpoint-last --output_name sec-eval-350m-prefix\n``` \n",
                    "original_header": "Evaluation on Security"
                },
                "confidence": 0.9995412133955267,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/sven/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For SVEN, we need to run the two branches `sec` and `vul` separately via the `--control` argument. The command below is for the `sec` branch:\n```console\n$ python human_eval_gen.py --model_type prefix --model_dir ../trained/350m-prefix/checkpoint-last --control sec --output_name human-eval-350m-prefix-sec\n$ python human_eval_exec.py --output_name human-eval-350m-prefix-sec\n``` \n",
                    "original_header": "Evaluation on Functional Correctness"
                },
                "confidence": 0.9999959592119366,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/sven/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have provided our trained prefixes in `./trained`. To train SVEN yourself, run:\n```console\n$ python train.py --output_name 350m-prefix-new --pretrain_dir 350m\n```\n \n",
                    "original_header": "Training"
                },
                "confidence": 0.9984656716347143,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/sven/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-05T15:39:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T16:50:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 218410
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CodeQL",
                    "name": "CodeQL",
                    "type": "Programming_language",
                    "size": 17194
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 493
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 80
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "116": {
        "filename": "grosa1_icse2021-szz-replication-package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/grosa1/icse2021-szz-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- _Preparing input data._ As the first step you need to clone the git repository of every project. You can rely on the following approach.\n    - As an alternative, you can clone into `cloned` folder each repository and then checkout the list of commit's hashes contained in `analyzed_projects_all.csv` and `analyzed_projects_issues_only.csv`. This recreates the exact same conditions of our experiment.  \n``python3 main.py json-input-raw/bugfix_commits_all.json conf/bszz.yml cloned`` runs B-SZZ algorithm. \n",
                    "original_header": "How to generate the pre-calculated results"
                },
                "confidence": 0.9605765808316435,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/grosa1/icse2021-szz-replication-package/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`overlap.py` is a Python script with embedded input paths that can be used to calculate Recall, Precision, F-measure, and overlap.\nYou may need to adapt `base_path` global variable to point to your result's directory. E.g., `base_path = \"json-output-raw/\"` analyzes the study's results. \n",
                    "original_header": "Recall, Precision, F-measure, and Overlap"
                },
                "confidence": 0.9845184620059236,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/grosa1/icse2021-szz-replication-package/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python3 openszz_file_refactoring.py <oracle> <openszz-issue> <bic_open_bugfix_commits_issues_only.json>` \n",
                    "original_header": "OpenSZZ post-processing script"
                },
                "confidence": 0.9472761170501736,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/grosa1/icse2021-szz-replication-package/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-27T13:28:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-15T20:26:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 16009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 4277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "117": {
        "filename": "khaes-kth_simple-nngen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/simple-nngen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-11T18:17:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-05T07:40:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "118": {
        "filename": "antimony5292_fairneuron_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Antimony5292/FairNeuron",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the requirements, run:\n\n`pip install -r ./requirements.txt`\n\nNote: The version of Pytorch in this requirements is CPU version. If you need GPU version, please check your CUDA version and [install Pytorch manually](https://pytorch.org/).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with `pip`",
                    "parent_header": [
                        "FairNeuron",
                        "<span id=\"setup\">Setup</span>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/antimony5292/fairneuron/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FairNeuron requires specific versions of some Python packages which may conflict with other projects on your system. A virtual environment is strongly recommended to ensure the requirements may be installed safely.\n \n",
                    "original_header": "(Recommended) Create a virtual environment"
                },
                "confidence": 0.9999999906697781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/antimony5292/fairneuron/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-01T12:52:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-26T15:17:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 100993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 83021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "119": {
        "filename": "celbree_reacc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/ReACC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Leverage [`microsoft/reacc-py-retriever`](https://huggingface.co/microsoft/reacc-py-retriever) as a code-to-code retriever for python source codes.\n \n",
                    "original_header": "1. Pretrain a retriever"
                },
                "confidence": 0.9460853026493723,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/reacc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, you have to prepare a codebase for retrieving. It is recommended to split each file/function into small chunks. (refer to `utils/split_codes.py`). Then run the command to get representations of all the codes in search corpus.\n```bash\npython -m torch.distributed.launch --nproc_per_node=${PER_NODE_GPU} infer.py \\\n        --data_path=data/train_split.txt \\\n        --save_name=save_vec \\\n        --lang=python \\\n        --pretrained_dir=microsoft/reacc-py-retriever \\\n        --num_vec=8 \\\n        --block_size=512 \\\n        --gpu_per_node ${PER_NODE_GPU} \\\n        --logging_steps=100 \n```\n \n",
                    "original_header": "2. Build an index for search"
                },
                "confidence": 0.9115255349792656,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/reacc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Navigate to the `gen` folder. We adapt the code completion scripts in [CodeXGLUE](https://github.com/microsoft/CodeXGLUE/tree/main/Code-Code/CodeCompletion-line). We modify the script `dataset.py` to include similar codes as input. Run `run_lm.py` to evaluate your fine-tuned model.\n```bash\nexport CUDA_VISIBLE_DEVICES=0\nLANG=python\nDATADIR=dataset/py150\nLITFILE=${DATADIR}/literals.json\nOUTPUTDIR=save/py150\nPRETRAINDIR=py150-ckpt\n\nLOADFILE=${DATADIR}/train_split\nRESFILE=search_res.pkl\nSAVEFILE=prediction.txt\n\npython -u run_lm.py \\\n        --data_dir=$DATADIR \\\n        --lit_file=$LITFILE \\\n        --langs=$LANG \\\n        --output_dir=$OUTPUTDIR \\\n        --pretrain_dir=$PRETRAINDIR \\\n        --load_file_name=$LOADFILE \\\n        --search_res=$RESFILE \\\n        --save_name=$SAVEFILE \\\n        --model_type=gpt2 \\\n        --block_size=1024 \\\n        --eval_line \\\n        --logging_steps=100 \\\n        --seed=42 \n```\n \n",
                    "original_header": "4. Generation step"
                },
                "confidence": 0.9999971784131406,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/reacc/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the `codenet_test.py` to reproduce this experiment.\n```bash\nDATADIR=CodeNet\nPRETRAINDIR=microsoft/reacc-py-retriever\n \npython -u codenet_test.py \\\n        --data_dir=$DATADIR \\\n        --pretrained_dir=$PRETRAINDIR \\\n        --lang=python \\\n        --num_vec=8 \\\n        --cut \\\n        --block_size=512 \\\n        --per_gpu_eval_batch_size=64 \\\n        --logging_steps=100 \\\n        --seed=614 \n```\n \n",
                    "original_header": "Zero-shot code clone detection"
                },
                "confidence": 0.9829929003796952,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/celbree/reacc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-03T02:50:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T11:48:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 143028
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 134
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "120": {
        "filename": "kth_slumps_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/slumps",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [Malware evasion for WebAssembly with wasm-mutate]([https://arxiv.org/abs/2212.08427](https://www.sciencedirect.com/science/article/pii/S0167404823002067)) see <https://github.com/ASSERT-KTH/wasm_evasion>\n \n",
                    "original_header": "<img alt=\"Logo\" src=\"https://en.gravatar.com/userimage/133494879/d7a324075159773e826a7eb397da07d7.png?size=80\" /> SLUMPs"
                },
                "confidence": 0.9992166028983044,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/slumps/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-30T11:56:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-05T00:30:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "WebAssembly",
                    "name": "WebAssembly",
                    "type": "Programming_language",
                    "size": 35671826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 11733002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1317821
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 1039677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 585884
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 376788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 334514
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 131768
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 21423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 10068
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4797
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 2187
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 769
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 325
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Crystal",
                    "name": "Crystal",
                    "type": "Programming_language",
                    "size": 182
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "121": {
        "filename": "johannesbetz_autonomousracing_literature_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohannesBetz/AutonomousRacing_Literature",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-11-02T14:22:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T20:21:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 110136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "122": {
        "filename": "beyondacm_smartembed_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/beyondacm/SmartEmbed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Install requirements.txt with ```pip install -r requirements.txt```.\n2. Clone this project to your local ```git clone https://github.com/beyondacm/SmartEmbed.git```.\n3. Please download the pretrained model with the aforementioned shell scripts. \n4. Change directory to ```cd SmartEmbed/todo/```, and Run the command ```python app.py``` . This will initialize the web tool at ```localhost:9000```, as illustrated below.\n![image](https://drive.google.com/uc?export=view&id=1k87ZXIMvkGcToYUjAh1Mn0CyBkzmQoC4)\n5. Paste the smart contract on to the text area and hit *Submit*.\n6. Clone detection results will be displayed as follows.\n![image](https://drive.google.com/uc?export=view&id=1iNfJdYrjdByUJqB5DRsCg-IaaYmsL5gK)\n7. Bug detection results will be displayed as follows.\n![image](https://drive.google.com/uc?export=view&id=1Mg9UOT99lql1XGBI_XQiVDrugbxbNmxn)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "SmartEmbed Web Tool Setup and Usage",
                    "parent_header": [
                        "SmartEmbed Web Tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/beyondacm/smartembed/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Source data can be downloaded from:  \nhttps://drive.google.com/file/d/13iTTpt7gFd9wEW35C2fX4pVT7cVlHgxi/view?usp=sharing \n",
                    "original_header": "SmartEmbed Web Tool"
                },
                "confidence": 0.9961809105606527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/beyondacm/smartembed/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have released the pre-trained model as described in the paper. You can use the following command to download our pretrained model:\n```shell\npip install gdown\ngdown https://drive.google.com/uc?id=1-LKJTZakqd8ntKzqVNtQZUgdZnFoYtpK\nunzip Contract_Embedding.zip\ncp -r Embedding/ SmartEmbed/contract_level/\n```  \n \n\n```shell\npip install gdown  \ngdown https://drive.google.com/uc?id=1lbaQVtZbNuEEjHIWVnwLqGvILxNWwtZW  \nunzip Contract_Model.zip  \nmv Model SmartEmbed/contract_level/\n```\n```shell\npip install gdown  \ngdown https://drive.google.com/uc?id=18GiDgSwoRjPC25d2Vp15oi_xH2NivyXH  \nunzip Statement_Model.zip \nmv Model SmartEmbed/statement_level/  \n```\n \n",
                    "original_header": "Pretraied Models"
                },
                "confidence": 0.999884110691065,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/beyondacm/smartembed/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-16T02:08:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T08:48:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 892860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 688985
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 123855
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 45451
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 22392
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 21956
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 17136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1378
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "123": {
        "filename": "kth_royal-chaos_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/royal-chaos",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-02-06T10:29:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T19:35:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 49240942
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 25976900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 599097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 562659
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 365670
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 302867
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 137537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 92522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 39069
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 21423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Click",
                    "name": "Click",
                    "type": "Programming_language",
                    "size": 19348
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 19067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 9919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8933
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smarty",
                    "name": "Smarty",
                    "type": "Programming_language",
                    "size": 7402
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "QMake",
                    "name": "QMake",
                    "type": "Programming_language",
                    "size": 6602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "124": {
        "filename": "giganticode_codeprep_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/giganticode/codeprep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To store the cache, **codeprep** uses a directory speecified by `$XDG_CACHE_HOME/codeprep/<codeprep_version>` variable if its value is set, \n`$HOME/.cache/codeprep/<codeprep_version>` otherwise. \n",
                    "original_header": "Caching"
                },
                "confidence": 0.9930292828061129,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Add more flixibility with versions of dependencies\n \n",
                    "original_header": "1.0.3"
                },
                "confidence": 0.9180721378880804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix training custom bpe codes (Thanks to @mir-am)\n- Fix corpus pre-processing on Windows\n \n",
                    "original_header": "1.0.1"
                },
                "confidence": 0.939517339442219,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Initial PyPI release\n \n",
                    "original_header": "1.0.0-alpha.6"
                },
                "confidence": 0.9778317416837412,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-05T13:20:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T07:09:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 318614
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 29780
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "125": {
        "filename": "nl2code_codem_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NL2Code/CodeM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-29T05:27:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-12T20:32:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "126": {
        "filename": "transm2_mmf3_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TransM2/MMF3",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-24T09:12:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-04T02:15:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "NewLisp",
                    "name": "NewLisp",
                    "type": "Programming_language",
                    "size": 5040594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 170150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "127": {
        "filename": "isabellavieira_incivility_detection_oss_discussions_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ferreira-isa/incivility_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-22T01:30:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-12T04:37:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5408023
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 188642
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 31008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "128": {
        "filename": "nasa_vscode-pvs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nasa/vscode-pvs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "VSCode-PVS can be installed from the Visual Studio Code Marketplace or from GitHub.\n\n>Note: When installing VSCode-PVS for the first time, the extension will check if PVS Allegro v7.1.0 is present on your system. If PVS Allegro is not present, VSCode-PVS will show a dialog and try to download and install PVS Allegro. Should the extension fail to download and install PVS Allegro, try to download and install PVS Allegro manually from https://pvs.csl.sri.com/. Should everything else fail, please report the problem on the [PVS group on Google](https://groups.google.com/g/pvs-group), we will help you out.\n\n**Automatic installation of VSCode-PVS from the Marketplace (recommended)**\n- Search `pvs` in https://marketplace.visualstudio.com and select `install`\n<br><br><img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/how-to-install-vscode-pvs-from-marketplace.gif\" width=\"600\">\n\n**Manual installation of VSCode-PVS from GitHub**\n1. Download the .vsix file of VSCode-PVS from [github](https://github.com/nasa/vscode-pvs/raw/master/releases).\n2. Click on the Extensions icon in the Activity Bar \n3. Click on the `...` menu in the title bar, and use `Install from VSIX` to select the downloaded .vsix file\n<br><br><img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/how-to-install-vscode-pvs.gif\" width=\"600\">\n\n<br>\n\n**Installation of PVS Allegro**\n\nIf PVS Allegro is not already installed on your machine, VSCode-PVS will automatically download and install it. Should VSCode-PVS fail to download and install PVS Allegro, please try the following two steps:\n1. Download PVS Allegro v7.1.0 for [MacOS](https://pvs.csl.sri.com/license.html?tgzfile=pvs7.1.0-ix86_64-Linux-allegro.tgz) or [Linux](https://pvs.csl.sri.com/license.html?tgzfile=pvs-6.0-ix86_64-Linux-allegro.tgz)\n2. Follow the installation instructions reported in the `INSTALL` file included in the downloaded PVS package. \n\nOnce PVS Allegro is installed on your machine, you can link up PVS and VSCode-PVS by indicating the location of the PVS executables in the VSCode-PVS settings.\n\n<br>\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation instructions",
                    "parent_header": [
                        "VSCode-PVS: An Integrated Development Environment for the Prototype Verification System"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nasa/vscode-pvs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-screenshot.png\" width=\"800\">\n \n",
                    "original_header": "VSCode-PVS: An Integrated Development Environment for the Prototype Verification System"
                },
                "confidence": 0.9992639098145457,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nasa/vscode-pvs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All settings and preferences will be maintained when installing a new release. \nIf you would like to perform manual updates, e.g., to try out pre-releases, you can download and install the .vsix files posted on the [PVS google group](https://groups.google.com/g/pvs-group). \n",
                    "original_header": "Updating VSCode-PVS"
                },
                "confidence": 0.9905403447722156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nasa/vscode-pvs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The main functionalities provided by the environment are as follows:\n- **Syntax highlighting**: PVS keywords and library functions are automatically highlighted.\n- **Autocompletion and code snippets**: Tooltips suggesting function names and language keywords are automatically presented in the editor when placing the mouse over a symbol name. Code snippets are provided for frequent modeling blocks, e.g., if-then-else. \n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-autocompletion.gif\" width=\"600\"> \n- **Hover information for symbol definitions**: Hover boxes providing information about identifiers are automatically displayed when the user places the cursor over an identifier.\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-hover.gif\" width=\"600\"> \n- **Go-to definition**: Click on the name of the identifier while holding down the Ctrl key to jump to the location where the identifier is declared.\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-goto-definition.gif\" width=\"600\"> \n- **Workspace Explorer**: Interactive tree view showing all theories in the current workspace, name and status of theorems and typecheck conditions.\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-theory-explorer.gif\" width=\"600\"> \n- **Proof Explorer + Prover Console**: Interactive tree view for viewing and editing the current proof. A prover console allows interaction with the theorem prover. Auto-completion is provided (using the TAB key) for prover commands, as well as access to the commands history.\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-proof-explorer.gif\" width=\"600\"> \n- **Plot Executable Functions**: Executable functions that return a list of real numbers can be rendered in a plot diagram (see examples in [helloworld.pvs](https://github.com/nasa/vscode-pvs/blob/master/vscode-pvs/examples/helloworld/helloworld.pvs))\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-plot-expression.gif\" width=\"600\"> \n- **Search NASALib**: Search definitions and theorems in [NASALib](https://github.com/nasa/pvslib), an extensive PVS library developed and maintained by the NASA Langley Formal Methods Team.\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-search-nasalib.gif\" width=\"600\"> \n- **Prototype Builder**: Build interactive visual prototypes to demonstrate the behavior of executable PVS specifications (see also [pvsio-web prototype examples](https://github.com/pvsioweb/examples/tree/5ac4fdb40bcd489b8a28b0e42c6bf32fa94577ee))\n<br><br> <img src=\"https://github.com/nasa/vscode-pvs/raw/master/vscode-pvs/screenshots/vscode-pvs-rapid-prototyping.gif\" width=\"600\"> \n",
                    "original_header": "Functionalities"
                },
                "confidence": 0.9736037220010411,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nasa/vscode-pvs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-24T21:07:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T12:31:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 7406019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 92319
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 36240
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 22468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 11251
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Common Lisp",
                    "name": "Common Lisp",
                    "type": "Programming_language",
                    "size": 11118
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 6118
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 191
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "129": {
        "filename": "aminesi_robustness-on-device_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aminesi/robustness-on-device",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-30T00:28:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-09-01T23:06:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 522799
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 31559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24653
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "130": {
        "filename": "signavio_sap-sam_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/signavio/sap-sam",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You need to download the [dataset](https://zenodo.org/record/7012043#.Y9jQV3bMKPo) and place it into the folder `./data/raw` such that the models are in `./data/raw/sap_sam_2022/models`.\n\n> It is also possible to run the analysis on any `.sgx` files (Signavio workspace exports). Place the files in `./data/raw/sap_sam_2022/models` and the conversion will be performed automatically.\n\nTo get started on Mac or Windows, we provide a dependency setup with `poetry`.\nMake sure poetry is installed on your system with `poetry --version`. If not, run `pip poetry install`.\n\nTo install the dependencies,  do  to the root of the cloned repository, type this line in the terminal, and press enter:\n```shell\npoetry install\n```\n\n> It is important to note that you should have the latest stable version of `python` or `python3` installed on your machine, and not a pre-release one (try `python --version`). The current latest stable version is `3.12.5` (as of August 2024).\n\nAfter executing the script, you should be able to setup the kernel:\n```shell\npoetry run python -m ipykernel install --user --name=sap-sam-kernel\n```\nThen, to open the project, simply type:\n```shell\npoetry run jupyter notebook\n```\n\nAlternatively, a **conda** setup is possible.\n\nWe provide two [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/index.html) environment.yml files that can be used to create a new environment and install the required dependencies:\n- `environment.yml`: contains the abstract dependencies (pandas, numpy, ...).\n- `environment-lock.yml`: contains versions for all dependencies and the transitive dependencies to ensure reproducible results.\n\nYou can use the following conda command to create the environment:\n```shell\nconda env create -f environment.yml  \n```\nor\n```shell\nconda env create -f environment-lock.yml  \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SAP Signavio Academic Models (SAP-SAM)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/signavio/sap-sam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Link to the dataset: https://zenodo.org/record/7012043 \n \n",
                    "original_header": "SAP Signavio Academic Models (SAP-SAM)"
                },
                "confidence": 0.9077224275175109,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/signavio/sap-sam/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    \u251c\u2500\u2500 data\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 interim           <- Intermediate data that has been transformed.\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 raw               <- The raw dataset should be placed in this folder.\n    \u251c\u2500\u2500 notebooks             <- Jupyter notebooks.\n    \u251c\u2500\u2500 reports            \n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 figures           <- Generated graphics and figures used in the paper.\n    \u251c\u2500\u2500 src               \n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 sapsam            <- Source code and dictionaries for use in this project.\n    \u251c\u2500\u2500 LICENSE               <- License that applies to the example code in this repository.\n    \u251c\u2500\u2500 README.md             <- The top-level README for developers using this project.\n    \u251c\u2500\u2500 environment-lock.yml  <- Contains versions for all dependencies and the transitive dependencies to ensure reproducible results.\n    \u251c\u2500\u2500 environment.yml       <- Contains the abstract dependencies (pandas, numpy, ...).\n    \u2514\u2500\u2500 setup.py              <- Makes project pip installable (pip install -e .) such that src can be imported.\n    \n    \n    \n \n",
                    "original_header": "Project Organization"
                },
                "confidence": 0.9999999999959073,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/signavio/sap-sam/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-09-28T19:20:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T06:57:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 8221310
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 39813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "131": {
        "filename": "facebookresearch_mbr-exec_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/facebookresearch/mbr-exec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp), [Spider](https://yale-lily.github.io/spider), and [NL2Bash](https://github.com/TellinaTool/nl2bash) datasets to `data/` and follow their instructions for necessary preprocessing steps. \n2. Download our [collected Codex data](https://dl.fbaipublicfiles.com/mbr-exec/mbr-exec-release.zip). We have included the pre-executed result with the data; see also `execution.py` if you'd like to execute automatically collected code locally. \n3. Install the `conda` environment by \n```bash\nconda env create -f env.yml\n```\n--- ",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Natural Language to Code Translation with Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/facebookresearch/mbr-exec/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-19T21:46:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-10T05:35:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99575
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "132": {
        "filename": "fzanart_socialz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/fzanart/Socialz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository contains:\n- Relevant codes of our work   \n- Datasets\n- Usage instructions\n- Setup instructions\n \n",
                    "original_header": "Socialz: Multi-Feature Social Fuzz Testing"
                },
                "confidence": 0.9917523165730527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fzanart/socialz/cloud/Readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T23:12:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-04T15:38:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "133": {
        "filename": "eth-sri_learning-real-bug-detector_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eth-sri/learning-real-bug-detector",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The code requires `python3` (we use `python3.9`) and some Python packages that can be installed via `pip install -r requirements.txt`. Make sure to add this repository to `PYTHONPATH`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Learning Real Bug Detectors"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/learning-real-bug-detector/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-21T07:53:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T20:38:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 190677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "134": {
        "filename": "ai-se_xtree_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/XTREE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n```\r\n                                                                           \r\n                                                                           \r\n                                        __.....__           __.....__      \r\n                                    .-''         '.     .-''         '.    \r\n                      .|  .-,.--.  /     .-''\"'-.  `.  /     .-''\"'-.  `.  \r\n   ____     _____   .' |_ |  .-. |/     /________\\   \\/     /________\\   \\ \r\n  `.   \\  .'    / .'     || |  | ||                  ||                  | \r\n    `.  `'    .' '--.  .-'| |  | |\\    .-------------'\\    .-------------' \r\n      '.    .'      |  |  | |  '-  \\    '-.____...---. \\    '-.____...---. \r\n      .'     `.     |  |  | |       `.             .'   `.             .'  \r\n    .'  .'`.   `.   |  '.'| |         `''-...... -'       `''-...... -'    \r\n  .'   /    `.   `. |   / |_|                                              \r\n '----'       '----'`'-'                                                   \r\n\r\n \r\n              _{\\ _{\\{\\/}/}/}__\r\n             {/{/\\}{/{/\\}(\\}{/\\} _\r\n            {/{/\\}{/{/\\}(_)\\}{/{/\\}  _\r\n         {\\{/(\\}\\}{/{/\\}\\}{/){/\\}\\} /\\}\r\n        {/{/(_)/}{\\{/)\\}{\\(_){/}/}/}/}\r\n       _{\\{/{/{\\{/{/(_)/}/}/}{\\(/}/}/}\r\n      {/{/{\\{\\{\\(/}{\\{\\/}/}{\\}(_){\\/}\\}\r\n      _{\\{/{\\{/(_)\\}/}{/{/{/\\}\\})\\}{/\\}\r\n     {/{/{\\{\\(/}{/{\\{\\{\\/})/}{\\(_)/}/}\\}\r\n      {\\{\\/}(_){\\{\\{\\/}/}(_){\\/}{\\/}/})/}\r\n       {/{\\{\\/}{/{\\{\\{\\/}/}{\\{\\/}/}\\}(_)\r\n      {/{\\{\\/}{/){\\{\\{\\/}/}{\\{\\(/}/}\\}/}\r\n       {/{\\{\\/}(_){\\{\\{\\(/}/}{\\(_)/}/}\\}\r\n         {/({/{\\{/{\\{\\/}(_){\\/}/}\\}/}(\\}\r\n          (_){/{\\/}{\\{\\/}/}{\\{\\)/}/}(_)\r\n            {/{/{\\{\\/}{/{\\{\\{\\(_)/}\r\n             {/{\\{\\{\\/}/}{\\{\\\\}/}\r\n              {){/ {\\/}{\\/} \\}\\}\r\n              (_)  \\.-'.-/\r\n          __...--- |'-.-'| --...__\r\n   _...--\"   .-'   |'-.-'|  ' -.  \"\"--..__\r\n -\"    ' .  . '    |.'-._| '  . .  '   jro\r\n .  '-  '    .--'  | '-.'|    .  '  . '\r\n          ' ..     |'-_.-|\r\n  .  '  .       _.-|-._ -|-._  .  '  .\r\n              .'   |'- .-|   '.\r\n  ..-'   ' .  '.   `-._.-\u00b4   .'  '  - .\r\n   .-' '        '-._______.-'     '  .\r\n        .      ~,\r\n    .       .   |.   .    ' '-.\r\n```\r\n\r \n",
                    "original_header": "Less is More: Minimizing Code Reorganization using XTREE"
                },
                "confidence": 0.999880814627717,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ai-se/xtree/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n+ Rahul Krishna, Tim Menzies\r\n  + Com. Sci., NC State, USA \r\n  + i.m.ralk@gmail.com\r\n  + tim.menzies@gmail.com\r\n+ Lucas Layman\r\n  + Fraunhofer CESE, College Park, USA, \r\n  + llayman@fc-md.umd.edu\r\n\r \n",
                    "original_header": "Authors"
                },
                "confidence": 0.9996768280775957,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ai-se/xtree/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-07-14T18:06:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-10-25T16:41:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 284164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "135": {
        "filename": "andreafioraldi_fuzzsplore_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/andreafioraldi/FuzzSplore",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-22T12:39:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-20T23:02:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 620041
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 68757
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3114
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1274
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 296
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "136": {
        "filename": "microsoft_coderanker_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/CodeRanker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Fault-aware Neural Code Rankers"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/coderanker/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The ranker datasets are available through GIT LFS in dataset/ directory \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.991548059605205,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/coderanker/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/coderanker/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-10T18:50:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T01:16:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 69109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "137": {
        "filename": "sh-t-20_artifacts_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sh-t-20/artifacts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate the experiments, the repository must be downloaded. All the files needed for these experiments are in the **experiments** folder. The steps of replicating the experiments is described below:\n \n",
                    "original_header": "Replicating the Experiments"
                },
                "confidence": 0.9995631952364686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sh-t-20/artifacts/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate this experiment, the ``LearningOrderSampling`` class must be run using the following parameters: \n",
                    "original_header": "Experiment 1: Comparing the learning methods (RQ1-RQ3)"
                },
                "confidence": 0.9300396482133304,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sh-t-20/artifacts/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/damascenodiego/DynamicLstarM [1] \nhttps://github.com/damascenodiego/learningFFSM [2]\n \n",
                    "original_header": "Licensing"
                },
                "confidence": 0.998083881578065,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sh-t-20/artifacts/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-15T06:37:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-15T06:52:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 559404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 32035
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "138": {
        "filename": "mcusec_microafl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MCUSec/microAFL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- J-Trace Pro\n  - You can purchase it from https://www.segger.com/products/debug-probes/j-trace/\n- NXP TWR-K64F120M\n \n",
                    "original_header": "Hardware Environment"
                },
                "confidence": 0.9937126756469371,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mcusec/microafl/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Ubuntu 18/20 (tested)\n- J-Link shared library\n  - Download J-Link Software and Documentation pack zip file from https://www.segger.com/downloads/jlink/JLink_Linux_V758e_x86_64.tgz. V758e is the version we used during development. Use other versions at your own risk.\n  - Unzip and extract libjlinkarm.so, libjlinkarm.so.7 and libjlinkarm.so.7.58.5 into the directory ./ETMFuzz_Src.\n- J-Link Software and Documentation pack\n  - Download and install J-Link Software and Documentation pack deb file from https://www.segger.com/downloads/jlink/JLink_Linux_V758e_x86_64.deb. \n*Note: When there is a newer version of J-Link Software, make sure to update both the deb installation and the shared libraries. You can avoid extacting the shared libraries from the zip file by directly locating them from the deb installation. Unfortunately, the location is OS dependant.*\n \n",
                    "original_header": "Software Environment"
                },
                "confidence": 0.9999999975099172,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mcusec/microafl/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nRun the following command each time the PC is rebooted.\n```shell\n./init.sh \n``` \n- **Configure J-Trace Serial Number.** The user needs to change the macro `JLINK_SERIAL_NO` in the file `./ETMFuzz_Src/Samples_ETMFuzz_Src/device.h` to the unique serial number of the J-Trace Pro.\n- **Choose a fuzzing sample.** The user needs to modify the macro `TARGET_PROJECT` in the file `./ETMFuzz_Src/Samples_ETMFuzz_Src/device.h`. Here we set it to 1.\n- **Build.** To build \ud835\udf07AFL, simply run the command `make` in the `./ETMFuzz_Src`directory.\n- **Fuzz.** Run the script `./twrk64f120m_i2c_polling_b2b_transfer_master.sh` in the directory `microAFL_eval`. If a timeout error is observed, increase the time value via the `-t` option and try again.\n \n",
                    "original_header": "Fuzzing"
                },
                "confidence": 0.9923428064080662,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mcusec/microafl/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-15T15:02:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-31T09:39:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 25291066
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 122952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "139": {
        "filename": "spirals-team_runtime-repair-experiments_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/failure-oblivious-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-02-16T13:20:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-28T12:00:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "140": {
        "filename": "pieterhartel_mutation-at-scale_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pieterhartel/Mutation-at-scale",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Please start by cloning this repository, `Mutation-at-scale`:\n```\ngit clone https://github.com/pieterhartel/Mutation-at-scale.git\n```",
                    "type": "Text_excerpt",
                    "original_header": "3. Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
            },
            {
                "result": {
                    "value": "We assume the reader to be familiar with `node`, `npm`, and `truffle`.\nSee [Node](https://nodejs.org/) and [Truffle](https://www.trufflesuite.com) for the relevant documentation.\n",
                    "type": "Text_excerpt",
                    "original_header": "3.1 Assumptions",
                    "parent_header": [
                        "3. Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "There are two main programs in the replication package: `chainsol.js` and `mutasol.js.`\nThe first, `chainsol.js`, downloads a contract from Etherscan, as described here [Truffle-tests-for-free](https://arxiv.org/abs/1907.09208).\nThe second program, `mutasol.js`, generates mutants, as described in the paper.\nThese two programs use auxiliary modules: `comments.js`, `prepare.js`, `soljson.js`, and `evm_decoder.js`, all of which are available in the package.\n \n",
                    "original_header": "4. Programs"
                },
                "confidence": 0.9999602867835639,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The script `make_loop.sh` makes 1120 calls to `make.sh` with the address of a contract to download, generate and execute the mutants.\nWe have run `make_loop.sh` in parallel for all contracts on 14 machines, which took about one week. \nThe following example call to `make.sh`  will create the `Vitaluck_3b400b.dir` directory.\n```\n$ bash make.sh 0xef7c7254c290df3d167182356255cdfd8d3b400b\n``` \nThe output of `make.sh` should look something like this:\n```\nStarting in Vitaluck_3b400b.dir\n\n\u2714 Preparing to download\n\u2714 Downloading\n\u2714 Cleaning up temporary files\n\u2714 Setting up box\n\nUnbox successful. Sweet!\n\nCommands:\n\n  Compile:        truffle compile\n  Migrate:        truffle migrate\n  Test contracts: truffle test\n\nStarting Mutant Vitaluck.sol_0\n...\nStarting Mutant Vitaluck.sol_9\nFinished in Vitaluck_3b400b.dir\n```\nRunning `make.sh` may generate warnings like this `/bin/rm: cannot remove '/tmp/tmp-5818PkSXWctk5kNI': Operation not permitted`, because the script is trying to remove some debris produced by `truffle`. Such warnings can be ignored.\n \n",
                    "original_header": "5.1 Creating the contract directories and the log files"
                },
                "confidence": 0.9790427486616875,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following files and directories are standard for truffle tests: `1_initial_migration.js` in the `migrations` directory, and `truffle-config.js`.\nThese are generated by `chainsol.js`.\n \n",
                    "original_header": "5.4 Truffle test files"
                },
                "confidence": 0.9996999044349666,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pieterhartel/mutation-at-scale/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-12-24T14:06:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-16T11:45:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 322425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 256160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "141": {
        "filename": "christianbirchler_sdc-scissor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/christianbirchler-org/sdc-scissor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```{code-block} text\n ____    ____    ____              ____\n/\\  _`\\ /\\  _`\\ /\\  _`\\           /\\  _`\\           __\n\\ \\,\\L\\_\\ \\ \\/\\ \\ \\ \\/\\_\\         \\ \\,\\L\\_\\    ___ /\\_\\    ____    ____    ___   _ __\n \\/_\\__ \\\\ \\ \\ \\ \\ \\ \\/_/_  _______\\/_\\__ \\   /'___\\/\\ \\  /',__\\  /',__\\  / __`\\/\\`'__\\\n   /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\______\\ /\\ \\L\\ \\/\\ \\__/\\ \\ \\/\\__, `\\/\\__, `\\/\\ \\L\\ \\ \\ \\/\n   \\ `\\____\\ \\____/\\ \\____/\\/______/ \\ `\\____\\ \\____\\\\ \\_\\/\\____/\\/\\____/\\ \\____/\\ \\_\\\n    \\/_____/\\/___/  \\/___/            \\/_____/\\/____/ \\/_/\\/___/  \\/___/  \\/___/  \\/_/\n\n\n```\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white)](https://conventionalcommits.org)\n[![GitHub issues](https://img.shields.io/github/issues/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/issues)\n[![GitHub forks](https://img.shields.io/github/forks/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/network)\n[![GitHub stars](https://img.shields.io/github/stars/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/stargazers)\n[![](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml/badge.svg)](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml)\n[![PyPI](https://img.shields.io/pypi/v/sdc-scissor)](https://pypi.org/project/sdc-scissor/)\n[![](https://readthedocs.org/projects/sdc-scissor/badge)](https://sdc-scissor.readthedocs.io)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=alert_status)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=ncloc)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=coverage)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_index)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=reliability_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=duplicated_lines_density)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=vulnerabilities)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=bugs)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=security_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=code_smells)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![DOI](https://zenodo.org/badge/363107094.svg)](https://zenodo.org/badge/latestdoi/363107094)\n<div style=\"text-align: center;\">\n<a href=\"https://github.com/christianbirchler-org/sdc-scissor\">\n<img src=\"https://raw.githubusercontent.com/christianbirchler-org/sdc-scissor/main/docs/images/github_logo_icon.png\">\n</a>\n<a href=\"https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor\">\n<img src=\"https://sonarcloud.io/images/project_badges/sonarcloud-black.svg\">\n</a>\n</div>\n \n",
                    "original_header": "SDC-Scissor"
                },
                "confidence": 0.9999999999999432,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christianbirchler/sdc-scissor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-30T10:32:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T21:06:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 21482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 14209
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 2715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "142": {
        "filename": "wkyml_k-st_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wkyml/K-ST",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can simply run\n```c\n  kompile st.k\n``` \nThe complied K-ST can be downloaded through : https://pan.baidu.com/s/10b6vg22yOXCiwH9Fzhv1wQ?pwd=8y1w\n \n",
                    "original_header": "2. Compile K_ST"
                },
                "confidence": 0.967358480099162,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wkyml/k-st/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-22T04:33:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-22T09:15:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Smalltalk",
                    "name": "Smalltalk",
                    "type": "Programming_language",
                    "size": 88
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "143": {
        "filename": "akashdhruv_jobrunner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Lab-Notebooks/Jobrunner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "``jobrunner setup <JobWorkDir>`` creates a ``job.setup`` file using\n``job.setup`` scripts defined in Jobfiles along the directory tree.\nJobrunner executes each script serially by changing the working\ndirectory to the location of the script. A special environment variable\n``JobWorkDir`` provides the value of ``<JobWorkDir>`` supplied during\ninvocation of the command.\n\n.. code:: console\n\n   Working directory: /Project/simulation/PoolBoiling\n   Parsing Jobfiles in directory tree\n\n   job.setup: [\n           /Project/environment.sh\n           /Project/simulation/PoolBoiling/flashSetup.sh\n           ]\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**************\n Installation\n************** \nStable releases of Jobrunner are hosted on Python Package Index website\n(https://pypi.org/project/PyJobRunner/) and can be installed by\nexecuting, \n   pip install PyJobrunner \nNote that ``pip`` should point to ``python3+`` installation package\n``pip3``. \n   pip install --upgrade PyJobrunner\n   pip uninstall PyJobRunner \nThe following installation option can be used to allow for using\ncustomization specific to instruments. \n   pip install PyJobruner --user --install-option=\"--with-instruments\" \nThere maybe situations where users may want to install Jobrunner in\ndevelopment mode $\\\\textemdash$ to design new features, debug, or\ncustomize options/commands to their needs. This can be easily\naccomplished using the ``setup`` script located in the project root\ndirectory and executing, \n   ./setup develop --with-instruments \nDevelopment mode enables testing of features/updates directly from the\nsource code and is an effective method for debugging. Note that the\n``setup`` script relies on ``click``, which can be installed using, \n   pip install click \nThe ``jobrunner`` script is installed in ``$HOME/.local/bin`` directory\nand therfore the environment variable, ``PATH``, should be updated to\ninclude this location for command line use. \n``python3.8+`` ``click`` ``toml`` ``pyyaml`` ``alive-progress`` \n   $ tree Project/sites\n   \u251c\u2500\u2500 sites/\n       \u251c\u2500\u2500 sedona/\n           \u251c\u2500\u2500 modules.sh \nThe site-specific subnode ``sites/sedona/`` consists of commands to load\nplatform specific compilers and libraries required to build Flash-X\nwhich is the instrument used to perform the experiments. \n   # file: Project/sites/sedona/modules.sh\n   #\n   # Load Message Passing Interface (MPI) and\n   # Hierarchical Data Format (HDF5) libraries\n   module load openmpi\n   module load hdf5 \nThere are situations where requirements for Flash-X are not available as\nmodules and may have to be built from their respective source. This is\nusually the case when a specific version of the library or compiler is\ndesired. The ``software/`` node provides configuration details for\nthese, \n   \u251c\u2500\u2500 software/\n       \u251c\u2500\u2500 Jobfile\n       \u251c\u2500\u2500 setupFlashX.sh\n       \u251c\u2500\u2500 setupAMReX.sh \nHere the script ``setupAMReX.sh`` provides commands to get the source\ncode for AMReX(https://github.com/AMReX-Codes/amrex) and build it for\ndesired version and configuration. The script ``setupFlashX.sh`` sets\nthe version for Flash-X to perform the experiments. The ``Jobfile``\nindicates the use of these files by assigning them to specific Jobrunner\ncommands, \n   # file: Project/software/Jobfile\n   #\n   # Run these scripts during jobrunner setup command\n   job:\n     setup:\n       - setupAMReX.sh\n       - setupFlashX.sh \nThe ``environment.sh`` file at the root of the ``Project`` directory\nsources the site-specific ``modules.sh`` and sets environment variables\nfor compilation and execution. \n   # file: Project/environment.sh\n   #\n   # Set project home using realpath of current directory\n   export PROJECT_HOME=$(realpath .) \n   # Enter site information and source the modules\n   SiteName=\"sedona\"\n   SiteHome=\"$PROJECT_HOME/sites/$SiteName\"\n   source $SiteHome/modules.sh \n   # Set environment variables required for Makefile.h\n   export MPI_HOME=$(which mpicc | sed s/'\\/bin\\/mpicc'//)\n   export HDF5_HOME=$(which h5pfc | sed s/'\\/bin\\/h5pfc'//) \n   # Assign path for local AMReX installation\n   export AMREX2D_HOME=\"$PROJECT_HOME/software/AMReX/install-$SiteName/2D\"\n   export AMREX3D_HOME=\"$PROJECT_HOME/software/AMReX/install-$SiteName/3D\" \nThe ``Jobfile`` at this node assigns the use of ``environment.sh``, \n   # Scripts to include during jobrunner setup and submit commands\n   job:\n     setup:\n       - environment.sh\n     submit:\n       - environment.sh \nDuring the invocation of ``jobrunner setup software/`` command,\n``environment.sh``, ``setupAMReX.sh`` and ``setupFlashX.sh`` are\ncombined using the information in Jobfiles and executed in sequence to\nbuild the software stack. \n   # file: Project/simulation/PoolBoiling/Jobfile\n   #\n   job:\n     # list of scripts that need to execute during setup\n     setup:\n       - flashSetup.sh \n     # target executable created during setup\n     target: flashx \n     # list of scripts that need to execute during submit\n     submit:\n       - flashRun.sh \nDuring the invocation of ``jobrunner setup simulation/PoolBoiling``\ncommand, ``environment.sh`` and ``flashSetup.sh`` are combined using the\ninformation in Jobfiles and executed in sequence to build the target\nexecutable ``flashx``. The software stack built in the previous step is\navailable through the environment variables in ``environment.sh``. \n   # file: Project/Jobfile\n   #\n   # Scripts to include during jobrunner setup and submit commands\n   job:\n     setup:\n       - environment.sh\n     submit:\n       - environment.sh \n   # schedular command and options to dispatch jobs\n   schedular:\n     command: slurm\n     options:\n       - \"#SBATCH -t 0-30:00\"\n       - \"#SBATCH --job-name=myjob\"\n       - \"#SBATCH --ntasks=5\" \n"
                },
                "confidence": 0.9847306327816922,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "``jobrunner clean <JobWorkDir>`` removes Jobrunner artifacts from the\nworking directory \n-  `akashdhruv/Multiphase-Simulations\n   <https://github.com/akashdhruv/Multiphase-Simulations>`_: A lab\n   notebook to manage development of Flash-X \n-  `Lab-Notebooks/Outflow-Forcing-BubbleML\n   <https://github.com/Lab-Notebooks/Outflow-Forcing-BubbleML>`_:\n   Reproducibility capsule for research papers\n   (https://arxiv.org/pdf/2306.10174.pdf)\n   (https://arxiv.org/pdf/2307.14623.pdf) \n.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n \n",
                    "original_header": "Clean"
                },
                "confidence": 0.988198310442634,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-01T15:22:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T08:26:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 3365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 799
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "sed",
                    "name": "sed",
                    "type": "Programming_language",
                    "size": 591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "144": {
        "filename": "hapsby_deepapirevisited_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hapsby/deepAPIRevisited",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can use the scripts in this repository to create the data set (not trivial), or you can\ndownload the existing data set from [Zenodo](https://zenodo.org/record/6388030).\n",
                    "type": "Text_excerpt",
                    "original_header": "Data set",
                    "parent_header": [
                        "Deep API Learning Revisited"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "value": "`vocab.apiseq.json`: A JSON file with the vocabulary used in the API sequences.\n\n`vocab.desc.json`: A JSON file with the vocabulary used in the descriptions.\n\n`train.apiseq.h5`: An HDF5 database with all API sequences in the training set.\n\n`test.apiseq.h5`: An HDF5 database with all API sequences in the test set.\n\n`train.desc.h5`: An HDF5 database with all descriptions in the training set.\n\n`test.desc.h5`: An HDF5 database with all descriptions in the test set.\n",
                    "type": "Text_excerpt",
                    "original_header": "Files used by deepAPI:",
                    "parent_header": [
                        "Deep API Learning Revisited",
                        "Data set"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "value": "`api_train.jsonl`: A JSON file with the entire training set, for use by CodeBERT.\n\n`api_test.jsonl`: A JSON file with the entire test set, for use by CodeBERT.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Files used by CodeBERT:",
                    "parent_header": [
                        "Deep API Learning Revisited",
                        "Data set"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<https://github.com/guxd/deepAPI> \n<https://github.com/microsoft/CodeBERT> \n",
                    "original_header": "Deep API Learning Revisited"
                },
                "confidence": 0.9989385162521203,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run the experiment using the deepAPI code, you have to use the fork of the\ndeepAPI repository here: \n<https://github.com/hapsby/deepAPIPython> \nTo run the experiment using CodeBERT, you can use this fork of CodeBERT: \n<https://github.com/hapsby/CodeBERT-deepAPI> \n",
                    "original_header": "Experiments"
                },
                "confidence": 0.9650714374060039,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use: `python get_list_of_repos.py <path-to-repos> <allwords.txt>` \nFor <allwords.txt> you must specify a list of words that are used to search against the \nGitHub database (I don't know of a better way to get a list of projects from GitHub).  A\nlist of all words is provided in this project's data repository. \n`list_of_repos.txt`:  The repositories that were found by this tool are written to this\nfile.  This file can be used directly by the `get_repos.php` script (detailed below), or\nyou can sort the repositories from highest star to lowest star first using the \n`sort_repos.py` script. \n",
                    "original_header": "get_list_of_repos.py"
                },
                "confidence": 0.9830472962796749,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use: `python sort_repos.py <path-to-repos>` \n",
                    "original_header": "sort_repos.py"
                },
                "confidence": 0.9727491939021191,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This script is used to download the repos in `sorted_repos.txt`, which is output by\n`sort_repos.py` above (or you can rename `list_of_repos.txt`, which is output by \n`get_list_of_repos.py`).  The script downloads the projects and creates .7z archives\nof the repositories.  You can exit and rerun the script; it will resume where it left off\n(although it will repeat the failed downloads first). \n",
                    "original_header": "get_repos.php"
                },
                "confidence": 0.9973987571723553,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use: `consume_projects.py </path/to/dbs> </path/to/repos>` \n",
                    "original_header": "consume_projects.py"
                },
                "confidence": 0.9853881658324674,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hapsby/deepapirevisited/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-27T15:13:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-13T10:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 37330
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 3012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "145": {
        "filename": "iasthc_hsuan-fuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iasthc/hsuan-fuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[![Go Report Card](https://goreportcard.com/badge/github.com/iasthc/hsuan-fuzz?style=flat-square)](https://goreportcard.com/report/github.com/iasthc/hsuan-fuzz)\n[![Go Reference](https://pkg.go.dev/badge/github.com/iasthc/hsuan-fuzz.svg)](https://pkg.go.dev/github.com/iasthc/hsuan-fuzz)\n[![Release](https://img.shields.io/github/release/iasthc/hsuan-fuzz.svg?style=flat-square)](https://github.com/iasthc/hsuan-fuzz/releases/latest)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg?style=flat-square)](https://github.com/iasthc/hsuan-fuzz/blob/main/LICENSE)\n",
                    "type": "Text_excerpt",
                    "original_header": "Hsuan-Fuzz: REST API Fuzzing by Coverage Level Guided Blackbox Testing"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/iasthc/hsuan-fuzz/main/README.md"
            },
            {
                "result": {
                    "value": "![Hsuan-Fuzz](https://user-images.githubusercontent.com/40525303/120344632-57908b00-c32c-11eb-8d36-ffdcb2c8f199.png)\n",
                    "type": "Text_excerpt",
                    "original_header": "Architecture",
                    "parent_header": [
                        "Hsuan-Fuzz: REST API Fuzzing by Coverage Level Guided Blackbox Testing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/iasthc/hsuan-fuzz/main/README.md"
            },
            {
                "result": {
                    "value": "- [[English] REST API Fuzzing by Coverage Level Guided Blackbox Testing](https://ieeexplore.ieee.org/document/9724904)\n- [[\u4e2d\u6587] \u57fa\u65bc\u9ed1\u7bb1\u8986\u84cb\u7b49\u7d1a\u6307\u5f15\u4e4b REST API \u6a21\u7cca\u6e2c\u8a66](https://hdl.handle.net/11296/yhymz5)\n",
                    "type": "Text_excerpt",
                    "original_header": "Paper",
                    "parent_header": [
                        "Hsuan-Fuzz: REST API Fuzzing by Coverage Level Guided Blackbox Testing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/iasthc/hsuan-fuzz/main/README.md"
            },
            {
                "result": {
                    "value": "- [Spree, PR \\#10626](https://github.com/spree/spree/pull/10626)\n- [Spree, Issue \\#10647](https://github.com/spree/spree/issues/10647)\n- [Spree, Issue \\#10971](https://github.com/spree/spree/issues/10971)\n- [Magento2, Issue \\#31551](https://github.com/magento/magento2/issues/31551)\n- [Magento2, Issue \\#32784](https://github.com/magento/magento2/issues/32784)\n",
                    "type": "Text_excerpt",
                    "original_header": "Bugs reported",
                    "parent_header": [
                        "Hsuan-Fuzz: REST API Fuzzing by Coverage Level Guided Blackbox Testing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/iasthc/hsuan-fuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-01T13:18:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T06:10:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 68354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "146": {
        "filename": "kleincup_dgms_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ryderling/DGMS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-21T12:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-28T04:58:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27439
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "147": {
        "filename": "kiv-air_stackoverflowdataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kiv-air/StackOverflowDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-21T09:37:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-29T11:28:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "148": {
        "filename": "haozeke_anneal_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HaoZeke/anneal",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`pdm` is used throughout.\n``` sh\nmicromamba create -f environment.yml\nmicromamba activate anneal-dev\n```\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9991390585417838,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/haozeke/anneal/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-05T23:29:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-23T14:04:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "149": {
        "filename": "ehsanzabardast_code_tdi_survivability_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ehsanzabardast/code_tdi_survivability",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Specifically, the package includes the following: \n* The <code>Python</code> scripts used to collect the raw data extracted from Sonarqube web API.\n  * The script is available in <code>01_sonarqube_data_collection.py</code>\n* The <code>Python</code> scripts used to pre-process the raw data extracted from Sonarqube web API.\n  * The script is available in <code>02_survival_data_process.py</code>\n* The <code>R</code> scripts used to perform the survival analysis and create survival curves.\n  * The script is available in <code>03_survival_analysis.R</code>\n* The pre-processed data from 31 open-source systems from the Apache Foundation that we analyzed in the paper. \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9920136466943956,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ehsanzabardast/code_tdi_survivability/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Using the _terminal_ application, go to the repository's directory on the computer. \nUse the following command in the repository's directory to fetch the git log in the required format for the script. \n<code>git log --all --pretty='format:%H,%ci,%ae'</code> \nIn order to save the results as a <code>csv</code> file in a certain directory, user the following command: \n<code>git log --all --pretty='format:%H,%ci,%ae' > intended/directory/for/the/data/gitlog.csv</code>\n \n",
                    "original_header": "Git Log for the Repository"
                },
                "confidence": 0.9841208160708217,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ehsanzabardast/code_tdi_survivability/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Depending on the version of the sonarqube, the format of the dates might change. You need to adjust the script \nin <code>02_survival_data_process.py</code> accordingly.\n \n",
                    "original_header": "Known Issues"
                },
                "confidence": 0.9627720028588702,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ehsanzabardast/code_tdi_survivability/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-30T12:22:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-31T08:46:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 11700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "150": {
        "filename": "forte-research_forte-fuzzbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FoRTE-Research/FoRTE-FuzzBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Before you attempt to build the benchmarks, there are several dependencies that you must resolve:\n```\nsudo apt install build-essential clang libgpg-error-dev libfontconfig1-dev libpcap-dev\n``` \nWe provide the script `buildAll.sh` to compile all benchmarks from source. \nEdit the following parameters to reflect the desired C and C++ compilers, and any assembler parameters:\n```\ncompiler=\"\"\ncompilerXX=\"\"\npassToAS=\"\"\n```\nBefore building using AFL-modified compilers, make sure to upate `PATH` and `AFL-PATH` system variables to point to where you have AFL installed.\n \n",
                    "original_header": "BUILDING BENCHMARKS"
                },
                "confidence": 0.999999846649994,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also provide the script `collectAll.py` to copy all compiled benchmark binaries to the current directory and append them with a use-specific (as specified on the command line) postfix: \n",
                    "original_header": "COLLECTING BENCHMARKS"
                },
                "confidence": 0.9980950638117116,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run as follows:\n```\npython /path/to/FoRTE-FuzzBench/collectAll.py [binaryPostfix] \n``` \n#\n<p align=center> <a href=\"https://www.cs.vt.edu\"><img border=\"0\" src=\"http://people.cs.vt.edu/snagy2/img/vt_inline_computer_science.png\" width=\"60%\" height=\"60%\">\n</a> </p>\n \n"
                },
                "confidence": 0.9946597577146994,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-08T18:52:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-18T20:22:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1618
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "151": {
        "filename": "ai-se_mozilla_firefox_vulnerability_data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/Mozilla_Firefox_Vulnerability_Data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-17T16:25:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-02T15:26:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "152": {
        "filename": "serval-dtf_ifixr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/iFixR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## II. Environment Installation\n\n* Install JDK7: Oracle jdk1.7 (**important!**)\n* Install JDK8: Oracle jdk1.8 (**important!**)\n* Download and configure Anaconda\n* Create an python environment using the [environment file](https://github.com/fse19/iFixR/blob/master/environment.yml)\n  ```powershell\n  conda env create -f environment.yml\n  ```\n  \n* Download and Install [Defects4J](https://github.com/rjust/defects4j)",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "* OS: macOS Mojave (10.14.3)\n* JDK7: Oracle jdk1.7 (**important!**)\n* JDK8: Oracle jdk1.8 (**important!**)\n* Defects4J: Clone and configure [defects4j](https://github.com/rjust/defects4j) from its original repository\n  ```powershell\n  git clone https://github.com/rjust/defects4j\n  cd defects4j\n  ./init.sh\n\n  export PATH=$PATH:\"path2defects4j\"/framework/bin\n  \n  Please add defects4j also to path since compileProjects.sh,createProjects.sh,testProjects.sh uses defects4j\n  ```\n* Download and configure Anaconda\n* Create an python environment using the [environment file](environment.yml)\n  ```powershell\n  conda env create -f environment.yml\n  ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Manual installation",
                    "parent_header": [
                        "IFixR",
                        "II. Environment"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Clone the repository \n* Follow Step III to run\n \n",
                    "original_header": "Docker"
                },
                "confidence": 0.9775789436436992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nAPR tool | Lang | Math | Total\n-------- | ---- | ---- | -----\njGenProg  | 0/0 | 5/18 | 5/18  \njKali  | 0/0 | 1/14 | 1/14  \njMutRepair  | 0/1 | 2/11 | 2/12  \nHDRepair  | 2/6 | 4/7 | 6/13  \nNopol  | 3/7 | 1/21 | 4/28  \nACS  | 3/4 | 12/16| 15/20  \nELIXIR  | 8/12| 12/19| 20/31  \nJAID  | 1/8 | 1/8 | 2/16  \nssFix  | 5/12| 10/26| 15/38  \nCapGen  | 5/5 | 12/16| 17/21  \nSketchFix  | 3/4 | 7/8 | 10/12  \nFixMiner  | 2/3 | 12/14| 14/17  \nLSRepair  | 8/14| 7/14 | 15/28  \nSimFix  | 9/13| **14/26**| **23**/39  \nkPAR  | 1/8 | 7/18 | 8/26  \nAVATAR  | 5/11| 6/13 | 11/24  \nMIMIC_opt | **11/19** | 10/25 | 21/**44**\nMIMIC_all | 6/11 | 7/16 | 13/27  \nMIMIC_top5 | 3/7 | 5/6 | 8/13  \n \n",
                    "original_header": "IV. Evaluation Result"
                },
                "confidence": 0.9999962719678166,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```powershell\n  |--- README.md                    :  user guidance\n  |--- code                         :  code\n  |--- data                         :  replication data\n  |--- doc                          :  document\n  |--- OUTPUT/MIMIC/FixedBugs       :  generated patches\n\n``` \n",
                    "original_header": "VI. Structure of the project"
                },
                "confidence": 0.9762177407909561,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serval-dtf/ifixr/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-12T12:25:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-23T11:46:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 232175
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96553
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 34286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 14502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "153": {
        "filename": "aise-tudelft_capybara-bint5_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AISE-TUDelft/Capybara-BinT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, clone the CodeT5 repo into this directory:\n\n```bash\ngit clone https://github.com/salesforce/CodeT5.git\n```\n\nRun the following command to set the correct working directory in the training script:\n\n```bash\nwdir=\\WORKDIR=\\\"`pwd`/'CodeT5/CodeT5'\\\" && sed -i '1 s#^.*$#'$wdir'#' CodeT5/CodeT5/sh/exp_with_args.sh\n```\n\nNow that the model is set up we need to download the data, use the following commands to download and unpack the data:\n```bash\nwget https://zenodo.org/record/7229809/files/Capybara.zip\nunzip Capybara.zip\nrm Capybara.zip\n```\nSimilarly to download the pretrained BinT5 checkpoints:\n```bash\nwget https://zenodo.org/records/7229913/files/BinT5.zip?download=1\nunzip BinT5.zip\nrm Capybara.zip\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Capybara-BinT5"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate the experimental setup of the paper follow the following steps:\n \n",
                    "original_header": "HuggingFace \ud83e\udd17"
                },
                "confidence": 0.9895226925936823,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It is recommended to use the provided Docker image, which has the correct Cuda version and all of the required dependencies installed. \nPull the image, create a container, and mount this folder as a volume:\n``` bash\ndocker pull aalkaswan/bint5\ndocker run -i -t --name {containerName} --gpus all -v $(pwd):/data aalkaswan/bint5 /bin/bash\n```\n \nThis should spawn a shell, which allows you to use the container. Change to the mounted volume:\n```bash\ncd /data/\n``` \nAll of the following commands should then be run from within the Docker container. You can respawn the shell using:\n```bash\ndocker exec -it {containerName} /bin/bash\n```\n \nIf you wish to run without using docker, we also provide a `requirements.txt` file.\n \n",
                    "original_header": "Docker Image"
                },
                "confidence": 0.9905031376786464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use this data in BinT5, setup the data folders in the CodeT5 project:\n```bash\nmkdir -p CodeT5/CodeT5/data/summarize/{C,decomC,demiStripped,strippedDecomC}\n```\nNow you can simply move the data of your choice from `\\Capybara\\training_data\\{lan}\\{dup/dedup}` to `CodeT5\\data\\summarize\\{lan}`. \nIn the downloaded CodeT5 repo change [this line and add the languages to the subtask list](https://github.com/salesforce/CodeT5/blob/e78a61a17f6dc2f3cbb968447d3e2d065b426e7b/CodeT5/sh/run_exp.py#L134C1-L135C1). \nFinally, edit the `language` variable in the `job.sh` file and start training in detached mode:\n```bash\ndocker exec -d {containerName} /bin/bash \"/data/job.sh\"\n``` \n \n",
                    "original_header": "Finetune Models"
                },
                "confidence": 0.9997378769973985,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-04T15:08:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T10:05:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "154": {
        "filename": "jenetics_jenetics_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jenetics/jenetics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Jenetics** requires at least **Java 21** to compile and run. \n    $ git clone https://github.com/jenetics/jenetics.git <builddir> \n* **compileJava**: Compiles the Jenetics sources and copies the class files to the `<builddir>/<module-dir>/build/classes/main` directory.\n* **jar**: Compiles the sources and creates the JAR files. The artifacts are copied to the `<builddir>/<module-dir>/build/libs` directory.\n* **javadoc**: Generates the API documentation. The Javadoc is stored in the `<builddir>/<module-dir>/build/docs` directory\n* **test**: Compiles and executes the unit tests. The test results are printed onto the console, and a test-report, created by TestNG, is written to `<builddir>/<module-dir>` directory.\n* **clean**: Deletes the `<builddir>/build/*` directories and removes all generated artifacts. \n    $ cd <build-dir>\n    $ ./gradlew jar \n",
                    "original_header": "Build Jenetics"
                },
                "confidence": 0.9965248930537349,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jenetics/jenetics/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<a href=\"https://www.jetbrains.com/idea/\"><img src=\"http://jenetics.io/img/icon_IntelliJIDEA.png\" alt=\"IntelliJ\" height=\"100\"/></a> \n<a href=\"https://www.syntevo.com/smartgit/\"><img src=\"https://www.syntevo.com/assets/images/logos/smartgit-8c1aa1e2.svg\" alt=\"SmartGit\" height=\"100\"/></a>\n \n",
                    "original_header": "Used software"
                },
                "confidence": 0.9998686858601757,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jenetics/jenetics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-12-21T21:24:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T16:36:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3763778
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 38966
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 36352
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 18897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 18232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7820
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 5394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 2733
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1724
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 766
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "155": {
        "filename": "collab-uniba_emse_best-answer-prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/collab-uniba/emse_best-answer-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To ensure proper execution, first run the following commands to check for the presence and eventually install all the required packages for R and Python.\n```bash\n$ RScript requirements.R\n$ pip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Dataset, scripts, and additional material for the paper \"Best-Answer Prediction in Technical Q&amp;A Sites\"",
                        "Python and  R scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/collab-uniba/emse_best-answer-prediction/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To compute the default AUC performance with the default parameter setting is obtained running the script below.\n```bash\n$ sh run-default-predictions.sh path/to/input/so-dataset.csv path/to/models/models.txt\n```\n* As output, the file `output/untuned/AUC-all-models.txt` will be created with the AUC values. \n",
                    "original_header": "Default (untuned) model performance"
                },
                "confidence": 0.9999700508637841,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/collab-uniba/emse_best-answer-prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-11-04T07:38:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-18T05:20:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 73498
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "156": {
        "filename": "unibw-patch_xfl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lmu-plai/xfl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Steps\n\nFollow the steps below to install XFL-R.\n\n## 0. Install Conda\nIf you don't have Conda, you can install it by following the instructions [on the Conda website](https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n## 1. Install Software Packages\n\n```shell\nsudo apt install zip tar g++ libpq-dev python3-dev graphviz libgraphviz-dev pkg-config openjdk-17-jdk\n```\n\n## 2. Install radare2\n\n```shell\nwget https://github.com/radareorg/radare2/archive/refs/tags/5.5.4.zip\nunzip radare2-5.5.4\ncd radare2-5.5.4\nsudo chmod -R 777 .\nbash sys/install.sh\n```\n\n## 3. Install PSQL 13\n\n```shell\nsudo apt install postgresql-13\nsudo locale-gen en_US\nsudo locale-gen en_US.UTF-8\nsudo update-locale \n```\n\nTo run and stop the server as a service:\n```shell\nsudo service postgresql start\nsudo service postgresql stop\n```\n\nConfigure the database:\n```shell\nsudo -u postgres psql\nCREATE DATABASE xfl;\nCREATE USER desyl;\nALTER USER desyl with password '123';\nALTER DATABASE xfl OWNER TO desyl;\nGRANT ALL PRIVILEGES on DATABASE xfl TO desyl;\nALTER ROLE desyl WITH CREATEDB;\nexit\nsudo service postgresql restart\nsudo -u postgres psql -d xfl -a -f XFL_DB.sql\n```\n\n\n## 4. Setup the Conda Environment\n\n```shell\nconda create --name XFL --file requirements_XFL.txt\nconda activate XFL\npip3 install setuptools --upgrade\npip3 install importlib-metadata\npip3 install importlib-resources\npip3 install archinfo==9.0.5327\npip3 install cachetools==4.2.4\npip3 install capstone==4.0.2\npip3 install claripy==9.0.5327\npip3 install coloredlogs==15.0\npip3 install datasketch==1.6.4\npip3 install dill==0.3.3\npip3 install intervaltree==3.1.0\npip3 install ipython==7.19.0\npip3 install joblib==1.0.0\npip3 install karateclub==1.3.3\npip3 install lief==0.11.3\npip3 install networkx==2.5\npip3 install nltk==3.5\npip3 install numpy==1.22.4\npip3 install progressbar==2.5\npip3 install psycopg2==2.9.1\npip3 install pygraphviz==1.6\npip3 install pyvex==9.0.5327\npip3 install r2pipe==1.5.3\npip3 install redis==3.5.3\npip3 install rzpipe==0.6.0\npip3 install scipy==1.10.1\npip3 install sklearn==0.0\npip3 install tensorflow==2.13.1\npip3 install tqdm==4.55.1\npip3 install timeout_decorator\npip3 install bson\npip3 install pyenchant\npip3 install psycopg2-binary\npip3 install pydot\n```\n\n```shell\npython3\nimport nltk\nnltk.download('words')\nnltk.download('stopwords')\n```\n\n## 5. Install Ghidra\n\n```shell\nwget https://github.com/NationalSecurityAgency/ghidra/releases/download/Ghidra_10.4_build/ghidra_10.4_PUBLIC_20230928.zip\nsudo unzip ghidra_10.4_PUBLIC_20230928.zip  -d /opt/\nsudo mv /opt/ghidra_10.4_PUBLIC /opt/ghidra \nrm -r ghidra_10.4_PUBLIC_20230928.zip\n```\n\nIf you had to install ghidra in another directory than `/opt/`, change the ghidraSupportDir variable in ghidra.py:\n```\n        self.ghidraSupportDir    = \"/opt/ghidra/support/\" # Set ghidra support directory <!>\n```\n\n## 6. Install PfastreXML\n\nDownload PfastreXML from the [official webpage](http://manikvarma.org/code/PfastreXML/download.html) using the provided Google Drive link for the C++ 11 source code.\nUnzip the source code into this directory.\n\nThen compile it with the following commands.\n\n```shell\nconda deactivate\ncd Tree_Extreme_Classifiers/Tree_Extreme_Classifiers/PfastreXML\nmake\nmv PfastreXML_train ../../../XFL/res/\nmv PfastreXML_predict ../../../XFL/res/\n```\n\n## 7. Download models and tables\n\nPre-trained models as well as PSQL dumps have to be downloaded from the Zenodo record.\n\n```shell\nwget https://zenodo.org/records/10733597/files/XFL-R_Models_Tables.zip\nunzip XFL-R_Models_Tables.zip\nrm XFL-R_Models_Tables.zip\n```\n\n### Minimal test (15m, 4Gb of memory)\n\n```shell\nconda activate XFL\ncd XFL/\nbash minimalTest.sh\n```\n\nResults are inside the directory `XFL/res/minimal-test`.\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/unibw-patch/xfl/main/xfl-r/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> [!IMPORTANT]\n> XFL-R, our refactored version of XFL, is highly recommended for conducting a scientific comparison. \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9120086318103372,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/unibw-patch/xfl/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-09T16:10:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T12:13:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1252554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 797
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "157": {
        "filename": "soarsmu_midas_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/midas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    <a href=\"https://ieeexplore.ieee.org/document/10138621\"><img src=\"https://img.shields.io/badge/Journal-IEEE TSE Volume 49 (2023)-green?style=for-the-badge\">\n    <a href=\"https://arxiv.org/pdf/2305.13884.pdf\"><img src=\"https://img.shields.io/badge/arXiv-2305.13884-b31b1b.svg?style=for-the-badge\">\n    <a href=\"https://hub.docker.com/r/thanhlecong/midas\"><img src=\"https://img.shields.io/badge/docker-thanhlecong%2Fmidas-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p>\n      \nWelcome to the source code repo of **MiDas**, a vulnerability-fixing commit detection tool introduced in our paper \"Multi-granularity Detector for Vulnerability Fixes\"!  \n",
                    "original_header": "\u2699\ufe0f MiDas \ud83d\udd0e"
                },
                "confidence": 0.9590516914184912,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The dataset is available at: https://zenodo.org/record/5565182#.Yv3lHuxBxO8\nPlease download and put dataset inside the MiDas folder \n",
                    "original_header": "\ud83d\udcc1 Dataset"
                },
                "confidence": 0.9745282964665685,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note: The current code base requires two GPUs to run. We will try to make it more flexible. \n \n",
                    "original_header": "\ud83d\ude80 Replication"
                },
                "confidence": 0.994151619162757,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Feature extractor index | Finetuning script                     |\n|------------------|---------------------------------------|\n| 1                | python variant_1_finetune.py          |\n| 2                | python variant_2_finetune.py          |\n| 3                | python variant_3_finetune_separate.py |\n| 5                | python variant_5_finetune.py          |\n| 6                | python variant_6_finetune.py          |\n| 7                | python variant_7_finetune_separate.py |\n| 8                | python variant_8_finetune_separate.py |\n \n",
                    "original_header": "Finetune CodeBERT"
                },
                "confidence": 0.9999569530889374,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Feature extractor index | Saving embeddings script                 |\n|------------------|------------------------------------------|\n| 1                | python preprocess_finetuned_variant_1.py |\n| 2                | python preprocess_finetuned_variant_2.py |                    \n| 3                | python preprocess_finetuned_variant_3.py |        \n| 5                | python preprocess_finetuned_variant_5.py |           \n| 6                | python preprocess_finetuned_variant_6.py |           \n| 7                | python preprocess_finetuned_variant_7.py |  \n| 8                | python preprocess_finetuned_variant_8.py |   \n| Feature extractor index | Extractor training script                 |\n|------------------|------------------------------------------|\n| 1                | python variant_1.py |\n| 2                | python variant_2.py |                    \n| 3                | python variant_3.py |        \n| 5                | python variant_5.py |           \n| 6                | python variant_6.py |           \n| 7                | python variant_7.py |  \n| 8                | python variant_8.py |   \n",
                    "original_header": "Saving embedding vectors"
                },
                "confidence": 0.9999228116101493,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Simply use the following two commands:\n```python3 feature_extractor_infer.py```\n \n```python3 ensemble_classifier.py --model_path model/patch_ensemble_model.sav --java_result_path probs/prob_ensemble_classifier_test_java.txt --python_result_path probs/prob_ensemble_classifier_test_python.txt``` \n",
                    "original_header": "Infer feature extractors and train neural classifier"
                },
                "confidence": 0.9810201784980843,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Simply run:\n```python adjustment_runner.py```\n \n",
                    "original_header": "Apply adjustment function"
                },
                "confidence": 0.9624266514136671,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/midas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-26T04:48:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-27T08:37:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 653449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "158": {
        "filename": "se2p_whisker-main_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/whisker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whisker requires Node.js v18.18.0 and is built using the [yarn](https://classic.yarnpkg.com/lang/en/) (classic) package manager. \nAfter cloning the repository, install all dependencies using:\n```bash\nyarn install\n```\n \nNow you can build the application using:\n```bash\nyarn build\n```\n \n",
                    "original_header": "Building Whisker"
                },
                "confidence": 0.9995904037989227,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker-main/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alternatively, you can build and run Whisker in headless mode using docker. This can be beneficial if you want to\nconduct large-scale experiments on a computing cluster. To this, create a Docker image for Whisker, for example using\nthe command\n```bash\ndocker build -t whisker .\n```\nNow, you can run the dockerized version of Whisker via\nBASH2*\nThe main entry point to the container is the wrapper script `whisker-docker.sh`, which calls Whisker's servant in\nheadless mode (using the flags `-d`, `-k` and `-l`, among others.) Any `<additional arguments>` given by the user will\nbe forwarded by the script to the servant. \nIn case you want to copy the artefacts created by Whisker (including redirection of stdout and stderr) to files in a\nwritable bind mount, you can achieve this for example as follows:\n```bash\ndocker run -v \"/on/the/host:/inside/the/container\" whisker /inside/the/container -- <Whikser arguments>\n```\nThis will mount the directory `/on/the/host` as `/inside/the/container`, instruct Whisker to copy its output (such as\ngenerated test files and log messages) to files in `/inside/the/container`, and make them accessible to you in the\ndirectory `/on/the/host`.\n \n",
                    "original_header": "Using Docker (Headless Mode)"
                },
                "confidence": 0.9947230544509869,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker-main/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-24T15:20:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T04:19:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1526083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 636026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 32342
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "159": {
        "filename": "context-aware-failure-identification_clog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/context-aware-Failure-Identification/CLog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-13T15:35:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-20T03:28:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95818
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "160": {
        "filename": "aftabhussain_afl-test-viz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AftabHussain/FMViz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**The visualization tool**\n\nIn any directory, clone the repository:\n\n```git clone --recursive git@github.com:AftabHussain/afl-test-viz.git```\n\nBuild and install AFL, patched with the tool\u2019s Test Input\nColor Representation Generator component, as shown below:\n\n```cd afl-test-viz/code/AFL-mut-viz/AFL && make -j32 && make install```\n\n**libxml2**\n\nBuild the test subject (libxml2) with AFL\u2019s\ncompiler (```afl-gcc```), which prepares libxml2 binaries as fuzzing targets. \n\nGet libxml2 as follows in a folder outside ```afl-test-viz``` directory:\n\n```git clone https://github.com/GNOME/libxml2.git && cd libxml2 && git checkout 1fbcf40```\n\nConfigure and build libxml2:\n\n```cd libxml2 && export CC=afl-gcc && ./autogen.sh && make -j32```\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "FMViz",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aftabhussain/afl-test-viz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-27T19:40:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-25T22:21:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "161": {
        "filename": "ise-uiuc_nablafuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/NablaFuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run the following commands in current directory (`NablaFuzz`) to load the database.\n\n```shell\nmongorestore NablaFuzz-PyTorch-Jax/dump\nmongorestore NablaFuzz-Oneflow/dump\nmongorestore NablaFuzz-TensorFlow/dump\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: Set up Database",
                    "parent_header": [
                        "\u2207Fuzz",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/nablafuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Until submission, \u2207Fuzz has detected 173 bugs in total for PyTorch, TensorFlow, JAX and OneFlow, with 144 already confirmed by developers. \n",
                    "original_header": "Detected Bugs"
                },
                "confidence": 0.9813195127625527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/nablafuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-09T14:35:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-29T19:25:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 473592
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "162": {
        "filename": "repairnator_open-science-repairnator_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/repairnator/open-science-repairnator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The code of Repairnator itself is at <https://github.com/eclipse/repairnator>.\n \n",
                    "original_header": "Experimental Data Collected in the Repairnator Research Project"
                },
                "confidence": 0.9753962458521097,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/repairnator/open-science-repairnator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-02-07T10:00:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-28T08:43:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 9489212
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1541074
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 35771
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6518
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "163": {
        "filename": "d-and-c_d-and-c_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/d-and-c",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\tIn order to run the code, python3 is necessary with the additional libraries such as LightGBM.\n\nExtract the archives allResults.db.7z and simiSmall.h5 2.7z.00X which are containing the prediction probabilities of all the classifies and similarity score of the bug report / source code files pairs used in the study.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup:"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/d-and-c/d-and-c/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-28T11:33:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T13:17:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "164": {
        "filename": "martinezmatias_diff-auto-tuning_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/martinezmatias/diff-auto-tuning",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-11T16:53:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-06-07T07:22:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 426252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 28454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "165": {
        "filename": "castor-software_autographql_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/autographql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-28T08:49:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-10T14:28:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 5220403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5146346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 4612582
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1513829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 236386
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 67574
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 53695
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Handlebars",
                    "name": "Handlebars",
                    "type": "Programming_language",
                    "size": 992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 439
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Procfile",
                    "name": "Procfile",
                    "type": "Programming_language",
                    "size": 226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "166": {
        "filename": "google-research-datasets_aart-ai-safety-dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/google-research-datasets/aart-ai-safety-dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-11-29T00:24:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T17:31:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "167": {
        "filename": "uphf_kotlin_features_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/kotlin_features",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-04T12:45:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-06T08:43:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1831736
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 23353
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "168": {
        "filename": "icse-dome_dome_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ICSE-DOME/DOME",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-14T13:33:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-24T16:02:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 125896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 21009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "169": {
        "filename": "regot-chalmers_treqs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/regot-chalmers/treqs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repo, then from the root of repo directory, run\n\n    pip install -e .\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
            },
            {
                "result": {
                    "value": "The minimal setup (as provided by the folders in this project) is as follows.\n \n* An .md file containing requirements simulates system requirements. For instance, the following text would represent a single requirement with id REQ1 that has traces to user stories US1 and US2:\n\n\t```\n\tSome supplementary text\n\t[requirement id=REQ1 story=US1,US2]\n\tRequirement text\n\t[/requirement]\n\tMore supplementary text\n\t```\n* A test case file with test cases. Test cases can be markdown files (for manual test routines) or source files (here: python) (for automated test scripts). An example for a manual test case and a python test case are depicted below. In both cases, the [testcase] tag contains a test case id as well as tracing information to user stories and system requirements.\n\n\t```\n\t[testcase id=TC1TestCaseName story=US1 req=REQ1]\n\tPurpose: Purpose of the test case without linebreak.\n\t\n\t## Setup\n\tDescribe any steps that must be done before performing the test.\n\t\n\t## Scenario / Steps\n\t\n\t## Expected outcome\n\t\n\t## Tear down\n\tDescribe what to do after the test\n\t\n\t## Test result\n\tProtocol of the result of executing this test, latest on top.\n\t```\n\n\t```\n\t#==================================\n\t# [testcase id=TC_python_test1 story=US4 req=REQ3]\n\t# \n\t# <Purpose of the test case>\n\t# \n\t#==================================\n\ttestcase TC1__test_case_name() {\n\t...\n\t}\n\t```\t\n* A list of user stories. Currently, both issues in the github project labeled \"user story\" and markdown files are accepted. In both cases, the [userstory] tag is required to obtain a unique id for each story. An example for a markdown file containing user stories is depicted below.\n\n\t```\n\t[userstory id=US2]\n\tAs a system manager, I want to make sure that proposed updates to requirements are of good quality, do not conflict with each other, or with the product mission. \n\t\n\t[userstory id=US3]\n\tAs member of an experimenting team, I want to experiment with new requirements and features so that I can better assess their business value and cost. This must not affect existing requirements during the experiment or block the requirements database afterwards. \n\t\n\t[userstory id=US4]\n\tAs a test architect or system manager, I want to be aware of new requirements for the test infrastructure early on so that I can plan verification and validation pro-actively. \n```\n\nThe formats are here mainly chosen for convenience, but can easily be adapted to any company standard. \n",
                    "type": "Text_excerpt",
                    "original_header": "Minimal setup",
                    "parent_header": [
                        "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-07T09:05:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T12:50:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 35223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 67
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "170": {
        "filename": "nitzanfarhi_securitypatchdetection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nitzanfarhi/SecurityPatchDetection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-24T06:43:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-10T22:43:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 149166
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "171": {
        "filename": "malihehizadi_issuereportsmanagement_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MalihehIzadi/IssueReportsManagement",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-16T06:36:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-22T11:04:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5855
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "172": {
        "filename": "kahrabian_rt-x_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "173": {
        "filename": "princeton-nlp_intercode_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/princeton-nlp/intercode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p>\n    <a href=\"https://badge.fury.io/py/intercode-bench\">\n        <img src=\"https://badge.fury.io/py/intercode-bench.svg\">\n    </a>\n    <a href=\"https://www.python.org/\">\n        <img alt=\"Build\" src=\"https://img.shields.io/badge/Python-3.8+-1f425f.svg?color=purple\">\n    </a>\n    <a href=\"https://copyright.princeton.edu/policy\">\n        <img alt=\"License\" src=\"https://img.shields.io/badge/License-MIT-blue\">\n    </a>\n</p> \n",
                    "original_header": "\ud83d\udd04 InterCode"
                },
                "confidence": 0.999999999996021,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/princeton-nlp/intercode/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-26T15:09:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T23:00:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 273312
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 146852
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 18079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 15140
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14056
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 7495
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2679
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 2331
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "174": {
        "filename": "dsfuzz_mallory_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dsfuzz/mallory",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We provide a ready-made environment using Vagrant:\n\n```bash\ncd docker/\nvagrant plugin install vagrant-reload   # only needed once\nvagrant up\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up a Jepsen + Mallory environment",
                    "parent_header": [
                        "Jepsen &amp; Mallory"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
            },
            {
                "result": {
                    "value": "If you have an existing Jepsen test harness, Mallory takes the place of your\nexisting nemesis package and generator.\n\n```Clojure\n(:require [jepsen.mediator.wrapper :as med])\n\n;; this should be a list of packages, as returned by\n;; jepsen/nemesis/combined.clj:nemesis-packages\n;; and NOT a combined package (as returned by compose-package)\n;; If you have custom nemeses, you need to write a version of this yourself\n;; that includes your custom nemesis.\npackages      (nemesis/nemesis-packages nemesis-opts)\n\n;; Previously, the nemesis package was obtained as such:\n;; nemesis       (nemesis/nemesis-package nemesis-opts)\nnemesis      (med/adaptive-nemesis packages nemesis-opts)]\n\n;; in your test, make the nemesis generator refer to the adaptive package:\n:generator\n        (->> (:generator workload)\n                (gen/stagger (/ (:rate opts)))\n                ;; use the adaptive nemesis generator\n                (gen/nemesis (:generator nemesis))\n                (gen/time-limit (:time-limit opts)))\n```\n\nIMPORTANT:\n- if your nemesis package only uses nemeses in Jepsen's default\n  `jepsen/nemesis/combined.clj`, our distribution rewrites those so they are\n  usable by Mallory;\n- if you package custom nemeses, you must modify them as follows: (1) add a\n  `:ops` field that returns the set of operations (and arguments) supported by\n  the nemesis, and (2) add a `:dispatch` field that takes an operation type\n  returned by `op` and returns an instantiated operation that can be invoked by\n  the nemesis client\n\nHere is an example nemesis adapted for use with Mallory:\n\n```Clojure\n(defn partition-package\n  \"A nemesis and generator package for network partitions. Options as for\n  nemesis-package.\"\n  [opts]\n  (let [needed? ((:faults opts) :partition)\n        db      (:db opts)\n        targets (:targets (:partition opts) (partition-specs db))\n        start (fn start [_ _]\n                {:type  :info\n                 :f     :start-partition\n                 :value (rand-nth targets)})\n        stop  {:type :info, :f :stop-partition, :value nil}\n        gen   (->> (gen/flip-flop start (repeat stop))\n                   (gen/stagger (:interval opts default-interval)))\n        ;; Needed by Mallory -- to inform at start-up which operations this nemesis can perform\n        ops   (cond-> []\n                needed? (concat [{:f :start-partition :values (vec targets)}, {:f :stop-partition, :values [nil]}]))]\n    ;; Needed by Mallory -- to transform an operation type into a specific operation\n    (defn dispatch [op test ctx]\n      (case (:f op)\n        :start-partition  ((fn start [_ _] {:type  :info\n                                            :f     :start-partition\n                                            :value (or (:value op) (rand-nth targets))}) test ctx)\n        :stop-partition  stop\n        nil))\n\n    {:generator       (when needed? gen)\n     :final-generator (when needed? stop)\n     :nemesis         (partition-nemesis db)\n     :perf            #{{:name  \"partition\"\n                         :start #{:start-partition}\n                         :stop  #{:stop-partition}\n                         :color \"#E9DCA0\"}}\n     ;; these two fields are needed by Mallory\n     :ops             ops\n     :dispatch        dispatch}))\n```\n\nAn example `nemesis-packages` function (with many custom nemesis packages):\n\n```Clojure\n(defn nemesis-packages\n  \"Constructs a nemesis and generators for dqlite.\"\n  [opts]\n  (let [opts (update opts :faults set)]\n    (->> (concat [(nc/partition-package opts)\n                  (nc/db-package opts)\n                  (member-package opts)\n                  (stop-package opts)\n                  (stable-package opts)]\n                 (:extra-packages opts))\n         (remove nil?))))\n```\n\nA much simpler one:\n\n```Clojure\n(defn nemesis-packages\n  \"Builds a combined package for the given options.\"\n  [opts]\n  (->> (nc/nemesis-packages opts)\n       (concat [(member-package opts)])\n       (remove nil?)))\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Modifying an existing Jepsen test for Mallory",
                    "parent_header": [
                        "Jepsen &amp; Mallory",
                        "Setting up a Jepsen + Mallory environment"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-12T05:51:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T01:46:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Clojure",
                    "name": "Clojure",
                    "type": "Programming_language",
                    "size": 1417507
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 519893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 71154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 65484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 36396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 21464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 14112
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2275
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "175": {
        "filename": "havelhuang_hda-testing_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/havelhuang/HDA-Testing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Requires Linux Platform with `Python 3.8.5`. We recommend to use anaconda for creating virtual environment. `requirements.txt` file contains the python packages required for running the code. Follow below steps for installing the packages:\n- Create virtual environment and install necessary packages\n\n\t`conda create -n hda_test --file requirements.txt`\n\n- Activate virtual environment\n\n\t`conda activate hda_test`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "Hierarchical Distribution-Aware Testing of Deep Learning"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/havelhuang/hda-testing/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- You may get error 'zipfile.BadZipFile: File is not a zip file' when downloading CelebA dataset. Google Drive has a daily maximum quota for any file. Try to mannually download from [here](https://drive.google.com/drive/folders/0B7EVK8r0v71pWEZsZE9oNnFzTm8?resourcekey=0-5BR16BdXnb8hVj6CNHKzLg) and unzip the dataset. Move to the folder `Datasets/celeba`\n \n",
                    "original_header": "Note:"
                },
                "confidence": 0.9904298180346788,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/havelhuang/hda-testing/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use torchattacks module to implement the adversarial attack. This package only support running on GPU(cuda service). \n",
                    "original_header": "About Adversarial Attack"
                },
                "confidence": 0.9991947499617566,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/havelhuang/hda-testing/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-11T10:01:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-23T23:00:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 120707
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "176": {
        "filename": "stevekommrusch_vrepair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/VRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * Python: 3.9.1\n * Clang: 13.0.0\n * GCC: 10.2.0\n * OpenNMT-py: 1.2.0\n \n",
                    "original_header": "Software versions"
                },
                "confidence": 0.9619758603659467,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stevekommrusch/vrepair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The trained models are available at:\n* all_VRepair_models_parts.z01  https://zenodo.org/records/10445594 md5:f4029f3f48298b20cf085f3f37d798fd\n* all_VRepair_models_parts.z02  https://zenodo.org/records/10448514 md5:9b74b49484fba0cd72361d81618c6a9f \n* all_VRepair_models_parts.z03  https://zenodo.org/records/10693640 md5:dc05f8b53d947e24b38124fa07d73636\n* all_VRepair_models_parts.z04 https://zenodo.org/records/10694133 md5:ce4ac1a83e2d33e73bf59b7582400466\n* all_VRepair_models_parts.z05 https://zenodo.org/records/10694179 md5:21a2de5969f34113cdbd13b78a1fd2fc\n* all_VRepair_models_parts.zip  https://zenodo.org/records/10695406 md5:82ed7c8bc58c867755e8a2616cf8dd5d \nThe source domain training dataset  for the main approach is available at <https://github.com/ASSERT-KTH/VRepair/releases/download/v20240223/BugFix.tar.bz2> (extracted from the Zenodo package) \n \n",
                    "original_header": "Trained models"
                },
                "confidence": 0.9999882275520158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stevekommrusch/vrepair/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-22T10:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:11:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 834515176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96106
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 11502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "177": {
        "filename": "privacyengineering_hawk-release_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release/tree/master/terraform-aws\n",
                    "type": "Text_excerpt",
                    "original_header": "AWS setup instructions",
                    "parent_header": [
                        "Hawk Release"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk-release/master/README.md"
            },
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release/tree/master/terraform-gcp",
                    "type": "Text_excerpt",
                    "original_header": "GCP setup instructions",
                    "parent_header": [
                        "Hawk Release"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk-release/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-01T16:12:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-16T02:38:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 16605
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "178": {
        "filename": "benedictwilkins_world-of-bugs-experiments_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/BenedictWilkins/world-of-bugs-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-15T15:44:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-07T10:01:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2995
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "179": {
        "filename": "ibm_tree-sitter-codeviews_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/IBM/tree-sitter-codeviews",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`comex` is published on the Python Registry and can be easily installed via pip:\n\n```console\npip install comex\n```\n\n**Note**: You would need to install GraphViz([dot](https://graphviz.org/download/)) so that the graph visualizations are generated\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation from PyPi",
                    "parent_header": [
                        "Comex"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "value": "To setup `comex` for development using the source code in your python environment:\n\n```console\npip install -r requirements-dev.txt\n```\n\nThis performs an editable install, meaning that comex would be available throughout your environment (particularly relevant if you use conda or something of the sort). This means now you can interact and import from `comex` just like any other package while remaining standalone but also reflecting any code side updates without any other manual steps\n\n---",
                    "type": "Text_excerpt",
                    "original_header": "Installation from source",
                    "parent_header": [
                        "Comex"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n---\n## Installation from PyPi \n"
                },
                "confidence": 0.9939069458333151,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`comex` is published on the Python Registry and can be easily installed via pip:\n```console\npip install comex\n```\n \n",
                    "original_header": "Installation from PyPi"
                },
                "confidence": 0.9999999843086159,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Note**: You would need to install GraphViz([dot](https://graphviz.org/download/)) so that the graph visualizations are generated \n## Installation from source \n",
                    "original_header": "BASH9*"
                },
                "confidence": 0.9874422373661305,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To setup `comex` for development using the source code in your python environment:\n```console\npip install -r requirements-dev.txt\n```\n \nThis performs an editable install, meaning that comex would be available throughout your environment (particularly relevant if you use conda or something of the sort). This means now you can interact and import from `comex` just like any other package while remaining standalone but also reflecting any code side updates without any other manual steps \n",
                    "original_header": "Installation from source"
                },
                "confidence": 0.9999990111526218,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The comex package can be used by importing required drivers as follows:\n```python\nfrom comex.codeviews.combined_graph.combined_driver import CombinedDriver\n\nCombinedDriver(\n    src_language=lang,\n    src_code=code,\n    output_file=\"output.json\",\n    graph_format=output,\n    codeviews=codeviews\n)\n```\nIn most cases the required combination can be obtained via the `combined_driver` module as shown above.\n \nThe repo is setup to automatically perform CI tests on making pulls to main and development branches.\nTo test locally: \nRun all tests and get coverage report\n```console\npytest\n``` \nMake sure to bump the version in `setup.cfg`. \nThen run the following commands:\n```bash\nrm -rf build dist\npython setup.py sdist bdist_wheel\n```\nThen upload it to PyPI using [twine](https://twine.readthedocs.io/en/latest/#installation) (`pip install twine` if not installed):\n```bash\ntwine upload dist/*\n```\n \n",
                    "original_header": "Usage as a Python Package"
                },
                "confidence": 0.980399850997687,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ibm/tree-sitter-codeviews/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-26T09:38:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T06:39:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 17373359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 3144322
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 463116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "180": {
        "filename": "collab-uniba_emtk_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/collab-uniba/EMTk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Collab EMTk** is developed using a mix of Java, Python, R. Hence, it works on Linux, macOS, and Windows. The following 3rd party libraries are also used:\n* [NLTK](http://www.nltk.org)\n* [Stanford CoreNLP](https://stanfordnlp.github.io/CoreNLP/index.html)\n* [SentiStrength](http://sentistrength.wlv.ac.uk)\n \n",
                    "original_header": "Programming languages, 3rd party libs, and OS"
                },
                "confidence": 0.9986247800514163,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/collab-uniba/emtk/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-11-07T12:09:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-04T22:33:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 95
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "181": {
        "filename": "spoonlabs_sorald_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/sorald",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run Sorald on projects towards proposing fixes in the form of PRs, look at [this Git repository](https://github.com/HarisAdzemovic/SQ-Repair-CI-Integration) for an example. In it, Sorald is ran on the three Apache projects defined in the *projects_for_model_1.txt* file.\n",
                    "type": "Text_excerpt",
                    "original_header": "Running Sorald on GitHub projects to propose PRs with fixes",
                    "parent_header": [
                        "Sorald <a href=\"https://github.com/SpoonLabs/sorald/actions/workflows/tests.yml\"><img alt=\"GHA tests Workflow Status\" src=\"https://github.com/SpoonLabs/sorald/actions/workflows/tests.yml/badge.svg\" /></a> <a href=\"https://codecov.io/gh/SpoonLabs/sorald\"><img alt=\"Code Coverage\" src=\"https://codecov.io/gh/SpoonLabs/sorald/branch/master/graph/badge.svg\" /></a> <img alt=\"Supported Platforms\" src=\"https://img.shields.io/badge/platforms-Linux%2C%20macOS%2C%20Windows-blue.svg\" />",
                        "Getting started",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spoonlabs/sorald/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Our releases are signed using `travis-gumtree-spoon`'s GPG key. The key is hosted\n[here](https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1429025e3eda19a5).\nYou may run the following commands to verify the signature of a release.\n```shell\ngpg --recv-keys 1429025e3eda19a5\ngpg --verify sorald-<VERSION>-jar-with-dependencies.jar.asc\n```\n> This signature is a type of [detaached signature](https://en.wikipedia.org/wiki/Detached_signature),\n> so you need to have the JAR file as well to verify the signature.\n  \n",
                    "original_header": "Releases"
                },
                "confidence": 0.9999055682468356,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spoonlabs/sorald/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-09T17:38:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-26T22:07:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 553311
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 66233
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "182": {
        "filename": "castor-software_depclean_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/depclean",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prerequisites:\n\n- [Java OpenJDK 11](https://openjdk.java.net) or above\n- [Apache Maven](https://maven.apache.org/)\n\nIn a terminal clone the repository and switch to the cloned folder:\n\n```bash\ngit clone https://github.com/castor-software/depclean.git\ncd depclean\n```\nThen run the following Maven command to build the application and install the plugin locally:\n\n```bash\nmvn clean install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and building from source",
                    "parent_header": [
                        "DepClean <img src=\"https://github.com/castor-software/depclean/blob/master/.img/logo.svg\" align=\"left\" height=\"135px\" alt=\"DepClean logo\"/>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "DepClean automatically cleans the dependency tree of Java projects.\nIt removes all the dependencies that are included in the project's dependency tree but are not actually necessary to build it. \nDepClean detects and removes all the unused dependencies declared in the `pom.xml` file of a project or imported from its parent. \nIt can be executed as a Maven goal through the command line or integrated directly into the Maven build lifecycle (CI/CD).\nDepClean does not modify the original source code of the application nor its original `pom.xml`. It has been presented in [\"A Comprehensive Study of Bloated Dependencies in the Maven Ecosystem](http://arxiv.org/pdf/2001.07808\") ([doi:10.1007/s10664-020-09914-8](https://doi.org/10.1007/s10664-020-09914-8)). \n",
                    "original_header": "What is DepClean?"
                },
                "confidence": 0.9982547867649543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nYou can integrate DepClean in your CI/CD pipeline.\nFor example, if you want to fail the build in the presence of unused direct dependencies, while ignoring all the dependency scopes except the\n`compile`, use the following plugin configuration.\n```xml\n<plugin>\n  <groupId>se.kth.castor</groupId>\n  <artifactId>depclean-maven-plugin</artifactId>\n  <version>2.0.6</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>depclean</goal>\n      </goals>\n      <configuration>\n        <failIfUnusedDirect>true</failIfUnusedDirect>\n        <ignoreScopes>provided,test,runtime,system,import</ignoreScopes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\nOf course, it is also possible to execute DepClean with parameters directly from the command line. The previous example can be executed directly as follows:\n```bash\nmvn se.kth.castor:depclean-maven-plugin:2.0.6:depclean -DfailIfUnusedDirect=true -DignoreScopes=provided,test,runtime,system,import\n```\n \n",
                    "original_header": "Optional Parameters"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. add all used transitive dependencies as direct dependencies\n2. remove all unused direct dependencies\n3. exclude all unused transitive dependencies \n",
                    "original_header": "How does DepClean works?"
                },
                "confidence": 0.9978747960215314,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/castor-software/depclean/blob/master/.img/wasp.svg\" height=\"50px\" alt=\"Wallenberg Autonomous Systems and Software Program (WASP)\"/>\n \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9934639464983258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-29T10:19:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T12:39:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 6551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "183": {
        "filename": "bhpachulski_sast21-paper_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bhpachulski/SAST21-Paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-19T02:35:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-31T06:16:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 82608
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "184": {
        "filename": "awsm-research_pycoder_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/awsm-research/pycoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To download and preprocess the dataset by yourself, navigate to `token-level/dataset/py150` directory, and run\n```shell\nbash download_and_extract.sh\npython type_extract_and_preprocess.py --base_dir=py150_files --output_dir=token_completion\npython type_alignment.py --base_dir=token_completion --output=token_completion\n```\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9996130155227444,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/pycoder/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To fine-tune (the example is PyCoder-Hard), navigate to `token-level/code` directory, run:\n```\nLANG=python          \nDATADIR=../dataset/py150/token_completion\nLITFILE=../dataset/py150/literals.json\nOUTPUTDIR=../save/<output_dir> # model saved here\nPRETRAINDIR=microsoft/CodeGPT-small-py\nLOGFILE=<log_dir>.log # log file saved here\nPER_NODE_GPU=1\n\npython -m torch.distributed.launch --nproc_per_node=$PER_NODE_GPU run_pycoder.py \\\n        --data_dir=$DATADIR \\\n        --lit_file=$LITFILE \\\n        --langs=$LANG \\\n        --output_dir=$OUTPUTDIR \\\n        --pretrain_dir=$PRETRAINDIR \\\n        --log_file=$LOGFILE \\\n        --model_type=gpt2 \\\n        --block_size=1024 \\\n        --do_train \\\n        --gpu_per_node $PER_NODE_GPU \\\n        --learning_rate=8e-5 \\\n        --weight_decay=0.01 \\\n        --evaluate_during_training \\\n        --per_gpu_train_batch_size=2 \\\n        --per_gpu_eval_batch_size=4 \\\n        --gradient_accumulation_steps=4 \\\n        --num_train_epochs=15 \\\n        --logging_steps=100 \\\n        --save_steps=1000 \\\n        --seed=42 \\\n        --overwrite_output_dir \\\n        --not_pretrain \\\n        --train_mode=both \\\n        --model_amount=1 \\\n        --loss_weight_value=0.9\n```\n \n",
                    "original_header": "Training"
                },
                "confidence": 0.9780431946890885,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/pycoder/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nLANG=python                      \nDATADIR=../dataset/py150/token_completion\nLITFILE=../dataset/py150/literals.json\nOUTPUTDIR=../save/<output_dir> # predictions saved here\nPRETRAINDIR=../save/<model_dir>/<checkpoint_folder> #  directory of your saved model\nLOGFILE=<log_dir>.log # log file saved here\n\npython -u run_pycoder.py \\\n        --data_dir=$DATADIR \\\n        --lit_file=$LITFILE \\\n        --langs=$LANG \\\n        --output_dir=$OUTPUTDIR \\\n        --pretrain_dir=$PRETRAINDIR \\\n        --log_file=$LOGFILE \\\n        --model_type=gpt2 \\\n        --block_size=1024 \\\n        --do_eval \\\n        --per_gpu_eval_batch_size=4 \\\n        --logging_steps=100 \\\n        --seed=42 \\\n        --predict_mode=code \n```\n \n",
                    "original_header": "Token-level"
                },
                "confidence": 0.9987763223562827,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/pycoder/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nLANG=python                      \nDATADIR=../dataset/py150/line_completion\nLITFILE=../dataset/py150/literals.json\nOUTPUTDIR=../../line-level/save/<output_dir> # predictions saved here\nPRETRAINDIR=../../token-level/save/<model_dir>/<checkpoint_folder> # directory of your saved model\nLOGFILE=<log_dir>.log # log file saved here\n\npython -u run_pycoder_line.py \\\n        --data_dir=$DATADIR \\\n        --lit_file=$LITFILE \\\n        --langs=$LANG \\\n        --output_dir=$OUTPUTDIR \\\n        --pretrain_dir=$PRETRAINDIR \\\n        --log_file=$LOGFILE \\\n        --model_type=gpt2 \\\n        --block_size=1024 \\\n        --eval_line \\\n        --logging_steps=100 \\\n        --seed=42 \\\n        --predict_mode=code \\\n        --calculate_mrr\n```\n \n",
                    "original_header": "Line-level"
                },
                "confidence": 0.9867631441488199,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/pycoder/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-21T04:21:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-16T20:20:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 153918
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 113581
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "185": {
        "filename": "mast-group_openvocabcodenlm_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mast-group/OpenVocabCodeNLM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Python>2.7.6 or Python==3.6 is required!\nPython>3.6 is not supported due to the tensorflow version not supporting it.\n\n```shell script\ngit clone https://github.com/mast-group/OpenVocabCodeNLM\ncd OpenVocabCodeNLM\npip install -r requirements.txt #python2\npip3 install -r requirements.txt #python3\n```\nThe experiments in the paper were performed using Python 2.7.14 but we have currently not experienced any unresolved issue with Python 3. </br>\nIn case you encounter any issues please open a new issue entry.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mast-group/openvocabcodenlm/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The BPE implementation used can be found here: https://github.com/rsennrich/subword-nmt  \n",
                    "original_header": "BPE"
                },
                "confidence": 0.9487045671080873,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mast-group/openvocabcodenlm/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-11T10:30:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T16:26:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3433
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "186": {
        "filename": "chenwangnida_dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chenwangnida/Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-13T23:22:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-27T23:02:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "187": {
        "filename": "jacarte_mewe_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/MEWE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following example generates a multivariant binary that can execute in your local machine. Make sure you have the LLVM toolchain in your system version 12.\n```bash\ngit clone https://github.com/Jacarte/MEWE\ncd MEWE\nsource mewe.sh\ncd examples/simple\nmewerustc  --llvm-version 12 --generation-timeout 3600 --exploration-timeout 120\n```\n \n",
                    "original_header": "Try it out"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jacarte/mewe/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "MEWE uses an extended LLVM linker and CROW to build multivariant binaries. In the following diagram, we dissect how it works.  \n",
                    "original_header": "MEWE pipeline"
                },
                "confidence": 0.9720085714521992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jacarte/mewe/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-13T16:48:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T08:30:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 8768815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 186982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 59537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 54558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 39234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 4313
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "188": {
        "filename": "mweyssow_cse-saner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/martin-wey/code-sentence-embeddings-saner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-09-14T12:35:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-25T20:29:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25052
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 10358
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "189": {
        "filename": "abenkhadra_bcov_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/abenkhadra/bcov",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-29T07:59:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T14:20:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2120883
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 9656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 5174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2186
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "190": {
        "filename": "panthap2_learningtoupdatenlcomments_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/panthap2/LearningToUpdateNLComments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-01T20:19:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T14:42:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 153270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "191": {
        "filename": "miranska_se-tti_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/miranska/se-tti",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-20T17:34:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-24T03:43:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 146661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4405
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "192": {
        "filename": "intelligent-cat-lab_seer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Intelligent-CAT-Lab/SEER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Instructions\nIn this guide, we will go through how to set up and use SEER. Please read on for step-by-step installation instructions.\n\n## 1. Clone SEER from GitHub\nIn order to download our code repository, please use git and execute the following in order to clone our repository in your local machine.\n\n`git clone https://github.com/Intelligent-CAT-Lab/SEER.git`\n\nAfter cloning has been completed, please change the directory by executing the following:\n\n`cd SEER`\n\n## 2. Install Dependencies\nAs mentioned in [REQUIREMENTS.md](REQUIREMENTS.md), SEER has some software dependencies. Please execute the following in order to install all dependencies. It is important to note that we have developed SEER on Ubuntu 18.04 LTS and Python 3.6.9.\n\n`pip3 install -r requirements.txt`\n\n## 3. Taking SEER for a Ride\nWe provide a small demo from the learning module of SEER in order to make sure it has been set up properly, and all components are functional. The learning module is one of the core and most important component of SEER. In particular, we will show a sample output, or what a user expects to see when he/she wants to train phase-1 of SEER.\n\nIn order to download all necessary files from Zenodo, please execute the following in order:\n\n* `cd learning`\n* `sudo apt install curl`\n* `sudo apt install unzip`\n* `curl https://zenodo.org/record/6970062/files/phase1_dataset_final.zip?download=1 --output phase1_dataset_final.zip`\n* `unzip phase1_dataset_final.zip`\n\nAt this point, we are ready to start phase-1 of model training. To do that, please execute the following:\n\n* `python3 train_phase1.py --data_path phase1_dataset_final/ --model JointEmbedder --dataset TestOracleInferencePhase1 --fold 1 --gpu_id 0`\n\nIf everything is sound and correct, you should be able to see the following output on your console:\n\n```\nloading data...\n18736 entries\nloading data...\n986 entries\nConstructing Model ...\n```\n\nAfter seeing this, the training phase has been started and the model is consistently fetching a batch from the training dataset, and use it for learning purposes. It could take some time until you see the evaluation results after the first epoch.\n\nIf you do not see the output above, it indicates that something is not right. Please get in touch with the authors in order to resolve your problem.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/intelligent-cat-lab/seer/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[<img padding=\"10\" align=\"right\" src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_evaluated_functional_v1_1.png\" alt=\"ACM Artifacts Evaluated - Functional v1.1\" width=\"114\" height=\"113\"/>][paper]\n[<img padding=\"10\" align=\"right\" src=\"https://www.acm.org/binaries/content/gallery/acm/publications/artifact-review-v1_1-badges/artifacts_available_v1_1.png\" alt=\"ACM Artifacts Available v1.1\" width=\"114\" height=\"113\"/>][paper] \n[ali]: https://alibrahimzada.github.io/\n[yigit]: https://github.com/yigitv4rli\n[dilara]: https://dtekinoglu.github.io/\n[reyhaneh]: https://reyhaneh.cs.illinois.edu/index.htm \n",
                    "original_header": "Perfect Is the Enemy of Test Oracle"
                },
                "confidence": 0.9996769361734316,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/intelligent-cat-lab/seer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-23T03:10:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-08T02:03:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 174674
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 13019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "193": {
        "filename": "greenaiproject_ict4s22_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GreenAIproject/ICT4S22",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-26T10:05:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-05T15:04:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "194": {
        "filename": "microsoft_coderec_programming_states_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/coderec_programming_states",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The environment named 'coderec' is available as a yml file and can be installed using:\n```\nconda env create -f environment.yml\n```\n\nSome of the packages are not required for all the scrips and notebooks, but are included in the environment for convenience. \n\nThere is also a requirements.txt file available, but it does not include pip install so it is insufficient, to use that:\n```\nconda create --name coderec --file requirements.txt\n```\nWe will also need to install further libraries and tools.\n\n- Treesitter for getting code labels\n```\n git clone https://github.com/tree-sitter/tree-sitter-python\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/coderec_programming_states/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft \ntrademarks or logos is subject to and must follow \n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/coderec_programming_states/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-28T18:46:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T18:54:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1589808
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 121172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 19506
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 17224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 11069
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "195": {
        "filename": "gongbell_eosfuzzer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gongbell/EOSFuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Contact Dr. Bo Jiang (gongbell@gmail.com) if you have any questions.\n \n",
                    "original_header": "EOSFuzzer"
                },
                "confidence": 0.9431656929519934,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gongbell/eosfuzzer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/EOSIO/eos/tree/ced8d7db063371aabe8deadb4120767a1d2406a0\n \n",
                    "original_header": "eos"
                },
                "confidence": 0.998083881578065,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gongbell/eosfuzzer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/EOSIO/eosio.cdt/commit/6ee842b07a6860b912344806d05a4d7f3bd8e27c\n \n",
                    "original_header": "eosio.cdt"
                },
                "confidence": 0.9993797093916,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gongbell/eosfuzzer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/gongbell/EOSFuzzer/tree/master/eos\n \n",
                    "original_header": "Where is EOSFuzzer?"
                },
                "confidence": 0.9990698525682603,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gongbell/eosfuzzer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-26T04:08:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-06T12:51:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "WebAssembly",
                    "name": "WebAssembly",
                    "type": "Programming_language",
                    "size": 9227798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1309019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1071489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Less",
                    "name": "Less",
                    "type": "Programming_language",
                    "size": 603611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 217964
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 172024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 144601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 54197
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 24449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 22288
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 16333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15492
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 7983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vue",
                    "name": "Vue",
                    "type": "Programming_language",
                    "size": 6983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 5517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 5014
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3274
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2783
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "196": {
        "filename": "matthewsot_ssi-live22_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/matthewsot/ssi-live22",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-10-17T21:37:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T14:08:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87318
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 35437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "197": {
        "filename": "efactoring-ai_predicting-refactoring-ml_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/refactoring-ai/predicting-refactoring-ml",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can run the data collection by simply running the `RunSingleProject.java` class. This class contains a program that requires the following parameters, in this order:\n\n1. _The dataset name_: A hard-coded string with the name of the dataset (e.g., \"apache\", \"fdroid\"). This information appears in the generated data later on, so that you can use it as a filter.\n\n1. _The git URL_: The git url of the project to be analyzed. Your local machine must have all the permissions to clone it (i.e., _git clone url_ should work). Cloning will happen in a temporary directory.\n\n1. _Storage path_: The directory where the tool is going to store the source code before and after the refactoring. This step is important if you plan to do later analysis on the refactored files. The directory structure basically contains the hash of the refactoring, as well as the file before and after. The name of the file also contains the refactoring it suffered, to facilitate parsing. For more details on the name of the file, see our implementation.\n\n1. _Database URL_: JDBC URL that points to your MySQL. The database must exist and be empty. The tool will create the required tables.\n\n1. _Database user_: Database user.\n\n1. _Database password_: Database password. \n\n1. _Store full source code?_: True if you want to store the source code before and after in the storage path.\n\nThese parameters can be passed via command-line, if you exported a JAR file. \nExample:\n\n```\njava -jar refactoring.jar <dataset> <git-url> <output-path> <database-url> <database-user> <database-password> <k-threshold>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Running in a manual way",
                    "parent_header": [
                        "Machine Learning for Software refactoring",
                        "The data collection tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "value": "First, install all the dependencies:\n\n```\npip3 install --user -r requirements.txt\n```\n\nThen, create a `config.ini` file, following the example structure in\n`config-example.ini`. In this file, you configure your database connection.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and configuring the database.",
                    "parent_header": [
                        "Machine Learning for Software refactoring",
                        "The machine learning pipeline"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use Maven: `mvn clean compile`. Or just import it via IntelliJ; it will know what to do. \nIf you want to export a jar file and run it somewhere else, just do `mvn clean package`. A .jar file will be created under the `target/` folder. You can use this jar to run the tool manually. \n",
                    "original_header": "Compiling the tool"
                },
                "confidence": 0.9915390615309756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For this script to run, you need to create a `results/` folder inside the\n`machine-learning` folder. The results will be stored there. \nIf you need to clean up the cache, simply delete the `_cache` directory that is created under the `machine-learning` folder. \n",
                    "original_header": "Training and testing models"
                },
                "confidence": 0.9440151941554866,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/refactoring-ai/predicting-refactoring-ml/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-10T12:25:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T04:12:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 264349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 80716
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 122
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "198": {
        "filename": "se2p_scratch-online-course_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/scratch-online-course",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-15T13:54:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-29T06:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3784
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "199": {
        "filename": "basedrhys_obfuscated-code2vec_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/basedrhys/obfuscated-code2vec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Class distributions shown below generated by [WEKA](https://www.cs.waikato.ac.nz/ml/weka/)\n \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9757226697452905,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/basedrhys/obfuscated-code2vec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-10T08:46:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T06:26:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 54671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "200": {
        "filename": "ssc-oscar_biman_bot_detection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ssc-oscar/BIMAN_bot_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-21T05:30:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-09T03:59:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 104347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 1736
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 181
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "201": {
        "filename": "mark-gerarts_ou-afstuderen-artefact_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mark-gerarts/ou-afstuderen-artefact",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-23T08:56:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-14T23:37:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 37010
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PureScript",
                    "name": "PureScript",
                    "type": "Programming_language",
                    "size": 29215
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 23494
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 2016
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dhall",
                    "name": "Dhall",
                    "type": "Programming_language",
                    "size": 693
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 455
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 377
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "202": {
        "filename": "lfd_pasta_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lfd/PaStA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Installation and Setup\n======================\n\nTo reproduce our results, we provide a prepared docker container. If desired,\nthe docker container can also be built from scratch, please find the\ninstructions in Section \"Docker from scratch\". These are the requirements for\nthe analysis:\n\n  * A Linux distribution of your choice\n  * Docker\n  * curl, zcat, bash, git\n\n1. Clone the repository\n\n```\n$ git clone https://github.com/lfd/PaStA.git\n$ cd PaStA/docker\n```\n\n2. Run the analysis\n\n```\n$ ./run-icse-artifact.sh\n```\n\nStep 2 will automatically download a prepared container image, start the\ncontainer and run the analysis.\n\nDocker from Scratch (expert)\n============================\n\nWe also provide the dockerfiles to create the docker container from scratch.\n\n1. Clone the repository\n\n```\n$ git clone https://github.com/lfd/PaStA.git\n$ cd PaStA/docker\n```\n\n2. Create the docker container\n\nThe following command will first create a docker container for PaStA's base\nsystem, inherit from that image and create a ICSE Artifact specific container\nthat contains all required artefact files and the correct version of our tool.\n\n```\n$ ./build-icse.sh\n```\n\n3. Start the container, and attach to it\n\n```\n$ docker run -ti pasta:icse-artifact\n```\n\n4. Run the analysis\n\nInside the container, run\n\n```\n$ ./icse-artifact-analysis.sh\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/icse-artifact/INSTALL.md"
            },
            {
                "result": {
                    "value": "Default locations inside that directory:\n- `config`: the main configuration file of the project. This file sets the\n  project name, different version ranges, time windows and default thresholds.\n- `repo/`: This is the default location of the repository of the project. While\n  not strictly required, repos are usually added as git submodules.\n- `resources/patch-stack-definition.dat`: Definition of the patch stacks.\n  Lines beginning with **#** are interpreted as comments, lines beginning with\n  **##** group major versions of projects. Take a look at existing patch stack\n  definitions.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparing the repository",
                    "parent_header": [
                        "PaStA - Patch Stack Analysis",
                        "Creating a new PaStA project"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/README.md"
            },
            {
                "result": {
                    "value": "```\n$ ./pasta set_config linux\n```\n\nAll further calls on **PaStA** tools will use this configuration file. To use a\nspecific configuration for a single **PaStA** command, this may be overridden\nwith the `-c` command line parameter:\n```\n$ ./pasta -c busybox subcommand ...\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Set active configuration",
                    "parent_header": [
                        "PaStA - Patch Stack Analysis",
                        "Creating a new PaStA project"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/README.md"
            },
            {
                "result": {
                    "value": "1. Install Patchwork on your system, following the guidelines in Patchwork's [documentation](https://patchwork.readthedocs.io/en/latest/development/installation/)\n\n2. Start a shell inside Patchwork's docker container with `docker-compose run --rm web --shell`\n\n3. Bring up a Patchwork development server, by running\n`./manage.py runserver 0.0.0.0:8000` inside the shell started in step 2. You should now have a Patchwork instance\nrunning at `<Patchwork-Docker-Container-IP-address>:8000` on your host. The Patchwork container's IP address can be\nfound using `ifconfig` command on Linux distributions.\n\n4. Start PaStA's docker container on the same network as the Patchwork one by running the command:\n`docker run -it --rm --network patchwork_default --name pasta -v </path/to/PaStA>:/home/pasta pasta:latest`\n\n5. Set the Patchwork specific settings in config:\n```\n[mbox]\n...\n\n[mbox.patchwork]\nurl = 'http://<Patchwork-Container-IP-Address>/api/1.2/'\nprojects = [{ id = x, initial_archive=\"path/to/archive\", list_email=\"list@domain.org\"},\n{id = y, initial_archive=\"\", list_email=\"anotherlist@anotherdomain.org\"}, ...]\npage_size = 10\n\n# Provide an api_token token or username/password if restricted api access is\n# needed (e.g updating relations)\ntoken = 'your_token'\nusername = 'your_username'\npassword = 'your_password'\n```\n\nEach Patchwork project from which mails are to be imported needs to be listed in the configuration. If\nthe `initial_archive` property of the project is specified (project with id `x` in the example above)\n, PaStA will import mails from the archive treating it as a raw mail box. If the `initial_archive`\nproperty is an empty string (project with id `y` in the example above),\nPaStA will fetch mails using Patchwork's API, only importing those mails which are not already in PaStA.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up PaStA and Patchwork",
                    "parent_header": [
                        "PaStA - Patch Stack Analysis"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All configuration file inherit from `resources/common/default.cfg` and\nmust implement some mandatory values. This is a minimal example for a project\nconfiguration file:\n```\n[PaStA]\nPROJECT_NAME = foobar\nMODE = mbox / patchstack\n\nUPSTREAM = v1.0..v2.0\n```\n \n",
                    "original_header": "PaStA configuration format"
                },
                "confidence": 0.9830060216355686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. `./pasta set_config linux`\n2. Either get mailboxes. PaStA supports raw unix-style mailboxes and public\n   inboxes, and add them to the configuration. Use the linux project\n   configuration as a reference. There are several possibilities to acquire\n   mailbox data:\n   * Use [nntp2mbox][2] on gmane.org\n   * Convert your local maildir\n   * Use public inboxes from [git.kernel.org][3]\n3. Parse mailboxes and create local caches with `./pasta sync -mbox` \n[1]: https://public-inbox.org/README.html\n[2]: https://github.com/xai/nntp2mbox\n[3]: https://git.kernel.org/pub/scm/public-inbox/\n \n",
                    "original_header": "PaStA Mailbox Analysis"
                },
                "confidence": 0.9999977992614486,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lfd/pasta/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-06-06T18:57:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-28T23:24:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 307217
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 41077
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13318
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "203": {
        "filename": "tbabm_teval-plus_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tbabm/TEval-plus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\nconda create -n revisit_toga python=3.9\nconda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3 -c pytorch -c conda-forge\npip3 install -r requirements.txt\npip3 uninstall protobuf\npip3 install protobuf==3.20\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare the environment",
                    "parent_header": [
                        "README"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tbabm/teval-plus/main/README.md"
            },
            {
                "result": {
                    "value": "- See: https://github.com/rjust/defects4j\n- Install v2.0.0\n- Patch Defects4j to fix compilation errors\n\n```diff\ndiff --git a/framework/projects/defects4j.build.xml b/framework/projects/defects4j.build.xml\nindex f7065dfc..4e2efdcb 100644\n--- a/framework/projects/defects4j.build.xml\n+++ b/framework/projects/defects4j.build.xml\n@@ -270,6 +270,7 @@ project-specific build file (\"project_id\"/\"project_id\".build.xml) for the\n                     \n                     <path refid=\"d4j.lib.testgen.rt\"/>\n                </classpath>\n+               <compilerarg line=\"-Xmaxerrs 1000\"/>\n         </javac>\n     </target>\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Defects4J",
                    "parent_header": [
                        "README"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tbabm/teval-plus/main/README.md"
            },
            {
                "result": {
                    "value": "- clone TOGA's repository and TOGA's models, see https://github.com/microsoft/toga\n- place TOGA's exception model and assertion model to model/exceptions/pretrained/pytorch_model.bin and model/assertions/pretrained/pytorch_model.bin, respectively\n\n```bash\n# run EvoSuite 10 times on the buggy and the bug-fixed versions\n# generate oracles using TOGA and NoException\n# It takes about 20 hours when we using 64 CPU cores\nbsah rq0.sh\n\n# run experiments for rq1 and rq2 \nbash run_rq1_2.sh\n# obtain the results\npython -m rqs.rq1_2 cal_result\n\n# run experiments for rq3\nbash run_rq3.sh\n# obtain the results\npython -m rqs.rq3 cal_result\n\n# run our ranking method\npython -m rqs.ranking dump_features\npython -m rqs.ranking cal_result\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare Test Prefixes",
                    "parent_header": [
                        "README"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tbabm/teval-plus/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-25T08:46:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T14:17:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 222917
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "204": {
        "filename": "diffblue_cbmc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/diffblue/cbmc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[CPROVER Manual TOC](../)\n\n# Installation\n\n## Requirements\n\nCBMC is available for Windows, i86 Linux, and MacOS X. CBMC requires a\ncode pre-processing environment comprising of a suitable preprocessor\nand an a set of header files.\n\n1.  **Linux:** the preprocessor and the header files typically come with\n    a package called *gcc*, which must be installed prior to the\n    installation of CBMC.\n\n2.  **Windows:** The Windows version of CBMC requires the preprocessor\n    `cl.exe`, which is part of Microsoft Visual Studio. We recommend the\n    free [Visual Studio Community](http://www.visualstudio.com/en-us/products/visual-studio-community-vs).\n\n3.  **MacOS:** Install the [XCode Command Line\n    Utilities](http://developer.apple.com/technologies/xcode.html) prior\n    to installing CBMC. Just installing XCode alone is not enough.\n\nImportant note for Windows users: Visual Studio's `cl.exe` relies on a\ncomplex set of environment variables to identify the target architecture\nand the directories that contain the header files. You must run CBMC\nfrom within the *Visual Studio Command Prompt*.\n\nNote that the distribution files for the [Eclipse\nplugin](http://www.cprover.org/eclipse-plugin/)\ninclude the CBMC executable.  Therefore, if you intend to run CBMC\nexclusively within Eclipse, you can skip the installation of the CBMC\nexecutable.  However, you still have to install the compiler environment as\ndescribed above.\n\n## Installing the CBMC Binaries\n\n1.  Download CBMC for your operating system. The binaries are available\n    from http://www.cprover.org/cbmc/.\n2.  Unzip/untar the archive into a directory of your choice. We\n    recommend you add this directory to your `PATH` environment variable.\n\nYou are now ready to use CBMC. We recommend you follow the\n[tutorial](../cbmc/tutorial/).\n\n## Building CBMC from Source\n\nSee the [CPROVER Developer Documentation](https://diffblue.github.io/cbmc/compilation-and-development.html).\n\n# Installing the Eclipse Plugin\n\n## Requirements\n\nWe provide a graphical user interface to CBMC which is\nrealized as a plugin to the Eclipse framework. Eclipse is available at\nhttp://www.eclipse.org. Installation is very simple. Just download the\nlatest version and extract the files.\n\nImportant note for Windows users: Visual Studio's `cl.exe` relies on a\ncomplex set of environment variables to identify the target architecture\nand the directories that contain the header files. You must run Eclipse\nfrom within the *Visual Studio Command Prompt*.\n\n## Installing the Eclipse Plugin\n\nThe installation instructions for the Eclipse Plugin, including the link\nto the download site, are available\n[here](http://www.cprover.org/eclipse-plugin/). This includes a short\ntutorial on the Eclipse plugin.\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/doc/cprover-manual/installation.md"
            },
            {
                "result": {
                    "value": "\\page installation_guide Installation Guide\n\nThe [CBMC release page](https://github.com/diffblue/cbmc/releases/latest)\ngives instructions for installing CBMC on MacOS, Ubuntu, Windows, and\nDocker.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/doc/doxygen-root/installation.md"
            },
            {
                "result": {
                    "value": "For windows you can install cbmc binaries via the .msi's found on the\n[releases](https://github.com/diffblue/cbmc/releases) page.\n\nNote that we depend on the Visual C++ redistributables. You likely\nalready have these, if not please download and run vcredist.x64.exe from\n[Microsoft](https://support.microsoft.com/en-gb/help/2977003/the-latest-supported-visual-c-downloads) to install them prior to running\ncbmc.\n",
                    "type": "Text_excerpt",
                    "original_header": "Windows",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/README.md"
            },
            {
                "result": {
                    "value": "For different linux environments, you have these choices:\n\n1. Install CBMC through the distribution's repositories, with the downside\n   that this might install an older version of cbmc, depending on what the\n   package maintenance policy of the distribution is, or\n2. Install CBMC through the `.deb` package built by each release, available\n   on the [releases](https://github.com/diffblue/cbmc/releases) page. To\n   do that, download the `.deb` package and run `apt install cbmc-x.y.deb`\n   with `root` privileges, with `x.y` being substituted for the version\n   you are attempting to install.\n\n   *NOTE*: Because of libc/libc++ ABI compatibility and package\n   dependency names, if you follow this path make sure you install the\n   package appropriate for the version of operating system you are using.\n3. Compile from source using the instructions [here](COMPILING.md)\n",
                    "type": "Text_excerpt",
                    "original_header": "Linux",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/README.md"
            },
            {
                "result": {
                    "value": "For macOS there is a package available in [Homebrew/core](https://formulae.brew.sh/formula/cbmc).\nAssuming you have homebrew installed, you can run\n\n```sh\n$ brew install cbmc\n```\n\nto install CBMC, or if you already have it installed via homebrew\n\n```sh\n$ brew upgrade cbmc\n```\n\nto get an up-to-date version.\n\nHomebrew will always update formulas to their latest version available, so you may\nperiodically see an upgraded version of CBMC being downloaded regardless of whether\nyou explicitly requested that or not. If you would rather this didn't happen, you\ncan pin the CBMC version with:\n\n```sh\n$ brew pin cbmc\n```\n\nIf instead of the latest version, you would want to install a historic version, you\ncan do so with a [homebrew tap](https://github.com/diffblue/homebrew-cbmc) that we\nmaintain. Instructions for that are available in the [documentation](doc/ADR/homebrew_tap.md)\n",
                    "type": "Text_excerpt",
                    "original_header": "macOS",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Get the [latest release](https://github.com/diffblue/cbmc/releases)\n* Releases are tested and for production use. \nGet the current *develop* version: `git clone https://github.com/diffblue/cbmc.git`\n* Develop versions are not recommended for production use.\n \n",
                    "original_header": "Versions"
                },
                "confidence": 0.9848022018556339,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[![Build Status][coverity_img]][coverity]\n[![Build Status][codecov_img]][codecov] \n"
                },
                "confidence": 0.9863855595444676,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/diffblue/cbmc/develop/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-02-16T23:03:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T20:49:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 15418691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 14269814
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 8822994
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 526096
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scilab",
                    "name": "Scilab",
                    "type": "Programming_language",
                    "size": 280163
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jasmin",
                    "name": "Jasmin",
                    "type": "Programming_language",
                    "size": 271687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 155601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yacc",
                    "name": "Yacc",
                    "type": "Programming_language",
                    "size": 146767
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 100591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 97354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lex",
                    "name": "Lex",
                    "type": "Programming_language",
                    "size": 94650
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 76261
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 32862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 25996
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 19169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6994
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 6695
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 6019
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 5877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "BitBake",
                    "name": "BitBake",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1673
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 274
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "jq",
                    "name": "jq",
                    "type": "Programming_language",
                    "size": 169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 131
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 67
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "205": {
        "filename": "microwalk-project_microwalk_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microwalk-project/Microwalk",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you just want to use Microwalk with your project, you don't need to read further -- we recommend using our templates and the pre-built Docker images, as detailed above. The following documentation is for building and running Microwalk directly from source, as is required when working on the Microwalk code and adding new analysis plugins. \nFor Windows, it is recommended to install Visual Studio, as it brings almost all dependencies and compilers, as well as debugging support. The solution can then be built directly in the IDE. \nThe following guide is mostly for Linux systems and command line builds on Windows.\n \n",
                    "original_header": "Compiling"
                },
                "confidence": 0.9996100671751785,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microwalk-project/microwalk/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Compile (optional):\n```\ncd Microwalk\ndotnet build -c Release\n``` \nRun (compiles and executes; if you compile manually, you can suppress compiliation with `--no-build`):\n```\ncd Microwalk\ndotnet run -c Release <args>\n``` \n",
                    "original_header": "Main application"
                },
                "confidence": 0.9999927281656535,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microwalk-project/microwalk/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Microwalk comes with a Pin tool for instrumenting and tracing x86 binaries. Building the Pin tool requires the [full Pin kit](https://software.intel.com/content/www/us/en/develop/articles/pin-a-binary-instrumentation-tool-downloads.html), preferably the latest version. It is assumed that Pin's directory path is contained in the variable `$pinDir`. \n**When building through Visual Studio**: Edit [Settings.props](PinTracer/Settings.props) to point to the Pin directory. You also need to install the clang-cl toolset for Visual Studio. \nCompiling and running the Pin tool via command line on Linux:\n```\ncd PinTracer\nmake PIN_ROOT=\"$pinDir\" obj-intel64/PinTracer.so\n$pinDir/pin -t PinTracer/obj-intel64/PinTracer.so -o /path/to/output/file -- /path/to/wrapper/executable\n``` \nNote that the above run command is needed for testing/debugging only, since `Microwalk` calls the Pin tool itself.\n \n",
                    "original_header": "Pin tool"
                },
                "confidence": 0.9881897880802422,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microwalk-project/microwalk/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Follow these steps to create a custom framework plugin with a new module:\n1. Create a new project `MyPlugin` and add a reference to the `Microwalk.FrameworkBase` project. \n6. Compile the plugin project. \n7. Run Microwalk and pass the plugin's build folder via the `-p` command line switch. \n",
                    "original_header": "Creating own framework modules"
                },
                "confidence": 0.991670137011897,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microwalk-project/microwalk/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-30T15:44:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T21:41:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 480111
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 108785
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 49218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 33280
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7036
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1822
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 775
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "206": {
        "filename": "microsoft_ar2_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/AR2",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repo is still developing, feel free to report bugs and we will fix them ~ \n",
                    "original_header": "AR2 Project"
                },
                "confidence": 0.9894053298432249,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/ar2/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-03T03:10:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-11T08:09:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 218237
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "207": {
        "filename": "vet-ui-testing_main_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/VET-UI-Testing/main",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "See [here](https://github.com/VET-UI-Testing/main/releases/download/apps/Apps-VET.zip) for all APKs.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation packages of apps involved in experiments",
                    "parent_header": [
                        "Experiment artifacts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/vet-ui-testing/main/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*We're in the process of populating this repository. If you don't see something you're looking for, please check back later.* \nWe assume that you are using a *Unix-like environment* throughout this guide. All experiments were conducted on Ubuntu 16.04.\n \n",
                    "original_header": "About"
                },
                "confidence": 0.9824891558212419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vet-ui-testing/main/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available [here](https://github.com/VET-UI-Testing/test-recorder). If you want to record traces during testing using [TOLLER's experiment framework](https://github.com/TOLLER-Android/main), place this repo in the `test-recorder` folder in the root directory of TOLLER's repo.\n \n",
                    "original_header": "TOLLER's on-computer test recorder"
                },
                "confidence": 0.9999499708580463,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vet-ui-testing/main/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you want to record screenshots during testing using [TOLLER's experiment framework](https://github.com/TOLLER-Android/main), place and build this repo in the `minicap` folder in the root directory of TOLLER's repo.\n \n",
                    "original_header": "Modified version of minicap"
                },
                "confidence": 0.9999772336803904,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vet-ui-testing/main/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please see [useful-scripts-vet/](useful-scripts-vet/). If you want to use these scripts with TOLLER's experiment framework, place this folder in the root directory of TOLLER's repo.\n \n",
                    "original_header": "Misc scripts"
                },
                "confidence": 0.9994149101011229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vet-ui-testing/main/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-25T07:41:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-21T15:05:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19312
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "208": {
        "filename": "jacsonrbinf_bulner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jacsonrbinf/bulner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. AspectJ: https://github.com/eclipse/org.aspectj \n\n2. Birt: https://github.com/eclipse/birt \n\n3. Tomcat: https://github.com/apache/tomcat \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9991560098592709,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jacsonrbinf/bulner/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Bulner source code is available through [Notebooks](notebooks/).\n \n",
                    "original_header": "BULNER source code"
                },
                "confidence": 0.920701182340449,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jacsonrbinf/bulner/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-20T22:02:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-14T00:59:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 3326464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 197728
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 9947
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "209": {
        "filename": "sap_vulnerability-assessment-kb_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SAP/project-kb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-02-13T16:19:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T15:25:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 432449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 175369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 123395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 27418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 24794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4408
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2063
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jinja",
                    "name": "Jinja",
                    "type": "Programming_language",
                    "size": 1008
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "210": {
        "filename": "snaraya7_early-bird_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/snaraya7/early-bird",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://upload.wikimedia.org/wikipedia/commons/c/c5/The_Early_Bird..._%28165702619%29.jpg\" width=\"250\">\n \n",
                    "original_header": "<a href=\"https://arxiv.org/abs/2105.11082\">Paper: Assessing the  Early Bird Heuristic (for Predicting Project Quality)</a>"
                },
                "confidence": 0.9807287647225731,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/snaraya7/early-bird/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-24T16:55:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-19T17:56:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 415219
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 907
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "211": {
        "filename": "sch8906_intabs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ChunghaSung/intAbs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The source code is a modified version from https://github.com/markus-kusano/watts \n",
                    "original_header": "README"
                },
                "confidence": 0.9999231957394418,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intabs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The program is an LLVM opt pass. It is built using CMake. \nSince we are using CMake, this likely requires LLVM version 3.6.0 \nModify the CMakeLists file variable APRON_PREFIX to be the location where Apron is installed \nAssuming your LLVM library files are in a standard location (more on this below), simply: \n    mkdir build\n    cd build\n    cmake ../\n    make \nIf you need to tell CMake where LLVM lives, you need to add the option -DLLVM_DIR, e.g., \ncmake -DLLVM_DIR=/home/chungha/src/share/llvm/cmake ../ \nThe directory passed to LLVM_DIR should be the location where the LLVM CMake files are (e.g., LLVM-Config.cmake). \nYou also may need to set -DZ3_INC and -DZ3_LIB to the include directory, and library file for Z3, respectively.\n \n",
                    "original_header": "Building"
                },
                "confidence": 0.9868560177756414,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intabs/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You need to modify LLVM path and build path in src/test/export.sh file to test program such as LLVM_PREFIX, WORKLIST_SO, Z3_BIN. \n",
                    "original_header": "Test Path"
                },
                "confidence": 0.9998948050388188,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sch8906/intabs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-08-18T00:50:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-15T14:03:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2297302
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 525024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 347396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 29395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 12118
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 1599
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 1567
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "212": {
        "filename": "tzer-anonbot_tzer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Tzer-AnonBot/tzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "<details><summary><b>Expected requirements</b> <i>[click to expand]</i></summary>\n<div>\n\n- **Hardware**: 8GB RAM; 256G Storage; X86 CPU; Good Network to GitHub; [Docker](https://docs.docker.com/get-docker/) (for Docker installation)\n- **Software**: Linux (tested under Manjaro and Ubuntu20.04. Other Linux distributions should also work)\n\n</div>\n</details>\n\nWe provide 3 methods for installing Tzer:\n\n<details><summary><b>Docker Hub (Recommended, Out-of-the-box!)</b> <i>[click to expand]</i></summary>\n<div>\n\nDirectly run Tzer in pre-built container image! Make sure you have [docker](https://docs.docker.com/get-docker/) installed.\n\n```shell\ndocker run --rm -it tzerbot/oopsla\n```\n</div>\n</details>\n\n<details><summary><b>Docker Build (10~20 min., for customized development)</b> <i>[click to expand]</i></summary>\n<div>\n\nBuild Tzer under a docker environment! Make sure you have [docker](https://docs.docker.com/get-docker/) installed.\n\n1. `git clone https://github.com/Tzer-AnonBot/tzer.git && cd tzer`\n2. `docker build --tag tzer-oopsla:eval .`\n3. `docker run --rm -it tzer-oopsla:eval`\n\n</div>\n</details>\n\n<details><summary><b>Manual Build (20~30 min., for customized dev. and native performance)</b> <i>[click to expand]</i></summary>\n<div>\nBuild Tzer natively on your Linux:\n\nPrepare dependencies:\n\n```shell\n# Arch Linux / Manjaro\nsudo pacman -Syy\nsudo pacman -S compiler-rt llvm llvm-libs compiler-rt clang cmake git python3\n# Ubuntu\nsudo apt update\nsudo apt install -y libfuzzer-12-dev # If you fail, try \"libfuzzer-11-dev\", \"-10-dev\", ...\nsudo apt install -y clang cmake git python3\n```\n\nBuild TVM and Tzer:\n\n```shell\ngit clone https://github.com/Tzer-AnonBot/tzer.git\ncd tzer/tvm_cov_patch\n\n# Build TVM with intruments\nbash ./build_tvm.sh # If you fail, check the script for step-by-step instruction;\ncd ../../../\n# If success:\n# tvm with coverage is installed under `tvm_cov_patch/tvm`\n# tvm without coverage is under `tvm_cov_patch/tvm-no-cov`\n\n# Install Python dependency\npython3 -m pip install -r requirements.txt\n\n# Set up TVM_HOME and PYTHONPATH env var before using TVM and Tzer.\nexport TVM_HOME=$(realpath tvm_cov_patch/tvm)\nexport TVM_NO_COV_HOME=$(realpath tvm_cov_patch/tvm-no-cov)\nexport PYTHONPATH=$TVM_HOME/python\n```\n</div>\n</details>\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Coverage-Guided Tensor Compiler Fuzzing with Joint IR-Pass Mutation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tzer-anonbot/tzer/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n    Artifact \u2022\n    Reproduce Bugs \u2022\n    Quick Start \u2022\n    Installation \u2022\n    Extend Tzer \n"
                },
                "confidence": 0.9530479588994427,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tzer-anonbot/tzer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-01T04:28:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-27T03:46:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 433537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 79399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1998
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "213": {
        "filename": "eroenooms_jsonlite_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jeroen/jsonlite",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2013-10-03T18:05:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T16:16:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 178287
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 117373
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 66258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 3083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "214": {
        "filename": "mileschen360_higgs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mileschen360/Higgs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-03-14T21:32:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-24T17:27:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 848091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 287315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 267597
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 129062
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2790
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Awk",
                    "name": "Awk",
                    "type": "Programming_language",
                    "size": 142
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 89
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "215": {
        "filename": "christof93_scikgtex_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Christof93/SciKGTeX",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "## Installation\n1. Copy the files `scikgtex.lua` and `scikgtex.sty` from the latest stable release to your latex project \n \n   - latest stable release: https://github.com/Christof93/SciKGTeX/releases/tag/v3.0.0 \n2. Set `\\usepackage[compatibility]{scikgtex}` in your document preamble to use the package \n"
                },
                "confidence": 0.9922570802274842,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can use this link: https://www.overleaf.com/latex/examples/scikgtex-example/wrhmyrwfgrgw to view a working example in Overleaf with some explanation. Open the template and start making your own metadata annotations right away! \nIt is necessary to compile your LaTeX source  with LuaLaTeX for the package to work. This is typically straightforward with most modern LaTeX environments.\nIn Overleaf it can be configured like this for example: \n",
                    "original_header": "Template on Overleaf"
                },
                "confidence": 0.9657119426220961,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### Optional Properties \n### Defining Custom Properties\nIt is possible to declare new properties (with custom namespaces) in your document preamble with `\\addmetaproperty`.\nThe namespace specification must be added as a comma-separated pair of prefix and uri in the optional argument. If no namesapce is defined the self-defined properties will be added to the namespace `http://orkg.org/property` (which is also the case if you just use them with out defining). \n"
                },
                "confidence": 0.9420587766910895,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The compatibility mode can be activated by importing the package with the compatibility parameter:\n```\n\\usepackage[compatibility]{scikgtex}\n```\n \n",
                    "original_header": "Compatibility"
                },
                "confidence": 0.9900533927550661,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "## Testing\nA number of integration tests can be run with:\n```\nsh test/run.sh\n```\nIf desired individual test can be run with:\nBASH12*\nTo create a new test, make a new directory starting with the word test and copy the `run_test.sh` script into it. Then, add your LaTeX file called `test.tex` and a file with the expected metadata you want to test against (`xmp_metadata_expected.xml`). Make changes to `run_test.sh` to change the integration test as you see fit. \n"
                },
                "confidence": 0.9999997371224144,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Email: christofbless@gmail.com \nGithub: https://github.com/Christof93\n \n",
                    "original_header": "License"
                },
                "confidence": 0.9530146967353648,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/christof93/scikgtex/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-05T17:50:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T01:52:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Lua",
                    "name": "Lua",
                    "type": "Programming_language",
                    "size": 380368
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 4435
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 609
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "216": {
        "filename": "dvermin_dvermin_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dVermin/dVermin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The python version of dVermin is here: https://github.com/dVermin/dVermin-Python \nOur presentation ppt is here: https://github.com/dVermin/dVermin/blob/main/presentation.pdf \n",
                    "original_header": "Hi there \ud83d\udc4b"
                },
                "confidence": 0.9871295331271933,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dvermin/dvermin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-11T08:42:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-09T02:05:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "217": {
        "filename": "stamp-project_dspot_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/STAMP-project/dspot",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-02-11T09:14:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-03T08:40:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1406610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 447107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 361336
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 43060
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 18728
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 17895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pug",
                    "name": "Pug",
                    "type": "Programming_language",
                    "size": 275
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "218": {
        "filename": "testingautomated-usi_surprise-adequacy_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/testingautomated-usi/surprise-adequacy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-03T09:29:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T06:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 49570
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 204
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "219": {
        "filename": "ashwinprasadme_headergen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/secure-software-engineering/HeaderGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install headergen\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install HeaderGen",
                    "parent_header": [
                        "HeaderGen"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      git clone --recursive\n      git submodule update --init --recursive\n      git pull --recurse-submodules \n      docker build -t headergen .\n      docker run -v {$PWD}/headergen_output:/headergen_output -it headergen bash \n      docker build -t headergen .\n      docker run -v \"%cd%\"/headergen_output:/headergen_output -it headergen bash \n",
                    "original_header": "1. Build container"
                },
                "confidence": 0.991561074121421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      rm framework_models/models_cache.pickle\n      rm pycg_extended/machinery/pytd_cache.pickle \n+ Setup venv and dependencies with `setup.sh` script \n      ./setup.sh -i \n      make ROOT_PATH=<path to repo root> microbench \n      make ROOT_PATH=<path to repo root> realworldbench \n      make ROOT_PATH=<path to repo root> all \n",
                    "original_header": "Building from Source"
                },
                "confidence": 0.9815456418981499,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      make clean \n",
                    "original_header": "2. Run HeaderGen benchmarks from inside contatiner"
                },
                "confidence": 0.9100120183711615,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-07T16:20:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7525477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6071246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 44823
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4989
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3751
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "220": {
        "filename": "zeberhart_dm4api_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Zeberhart/dm4api",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-07-26T15:55:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-22T22:45:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 106561
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 30334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2158
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "221": {
        "filename": "castor-software_journey-paper-replication_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/journey-paper-replication",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-23T16:35:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-24T16:24:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "PostScript",
                    "name": "PostScript",
                    "type": "Programming_language",
                    "size": 122833
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 109420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "222": {
        "filename": "weifoo_easyoverhard_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WeiFoo/EasyOverHard",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "__NOTE: only tested on Linux(ubuntu 16.04) and Mac(10.12), sorry for Windows users.__\n\nIf you don't want to mess up your local pacakges, please install dependencies\naccording to ```requirement.txt``` manually.\n\nOr simply run the following command in your terminal\n\n```\nsudo pip install -r requirements.txt\n\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/weifoo/easyoverhard/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-03-22T16:18:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T12:33:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "223": {
        "filename": "troublor_erebus-redgiant_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Troublor/erebus-redgiant",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- 2023 TSE Publication: https://ieeexplore.ieee.org/document/10108045\n- Arxiv version can be found at: https://arxiv.org/abs/2212.12110 \n",
                    "original_header": "Combatting Front-Running in Smart Contracts: Attack Mining, Benchmark Construction and Vulnerability Detector Evaluation"
                },
                "confidence": 0.9753895181628102,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/troublor/erebus-redgiant/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-28T06:57:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T02:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 444031
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 1785
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yul",
                    "name": "Yul",
                    "type": "Programming_language",
                    "size": 376
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "224": {
        "filename": "nulog_nulog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nulog/nulog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The libraries needed are listed in requirements.txt \nTo execute all the experiments please run all /Benchmark/*\\*_benchmark.py* scripts. \n\nThe previous implemented algorithms for log parsing and the datasets are completely cloned from:\nhttps://github.com/logpai/logparser/ \n"
                },
                "confidence": 0.9730654446791517,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nulog/nulog/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-12T16:35:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T07:23:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 402115
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 65206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 44628
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1041
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 1022
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 193
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "225": {
        "filename": "kth_codrep-competition_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/CodRep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "E.g.;\n```\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/1.txt 42\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/2.txt 78\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/3.txt 30\n...\n```\n \n",
                    "original_header": "Command-line interface"
                },
                "confidence": 0.9999740990380444,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/codrep-competition/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For evaluating specific datasets, use [-d] or [-datasets=] options and specify paths to datasets. The default behaviour is evaluating on all datasets. The path must be absolute path and multiple paths should be separated by `:`, for example:\n```shell\nyour-program Files | python evaluate.py -d /Users/foo/bar/CodRep-competition/Datasets/Dataset1:/Users/foo/bar/CodRep-competition/Datasets/Dataset2\n``` \n",
                    "original_header": "How to evaluate your competing program"
                },
                "confidence": 0.9999550394185479,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/codrep-competition/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-23T15:42:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-31T11:51:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "226": {
        "filename": "kth_checkstylerr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/checkstylerr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-03T13:10:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T09:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 354047
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29511
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "227": {
        "filename": "game-dev-database_postmortem-problems_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/game-dev-database/postmortem-problems",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-18T15:56:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-17T16:05:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "228": {
        "filename": "bin123apple_fortran-cpp-hpc-code-translation-dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bin123apple/OpenMP-Fortran-CPP-Translation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also download the dataset from : [My Huggingface](https://huggingface.co/datasets/Bin12345/HPC_Fortran_CPP) \n",
                    "original_header": "Fortran-CPP-HPC-code-translation-dataset"
                },
                "confidence": 0.9446157328528614,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bin123apple/fortran-cpp-hpc-code-translation-dataset/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Overview of steps are explained below.  \n[cc-by]: http://creativecommons.org/licenses/by/4.0/\n[cc-by-image]: https://i.creativecommons.org/l/by/4.0/88x31.png\n[cc-by-shield]: https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg\n \n",
                    "original_header": "Reproduce our result"
                },
                "confidence": 0.9914285433050973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bin123apple/fortran-cpp-hpc-code-translation-dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-13T02:09:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-06T02:32:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "229": {
        "filename": "mshudrak_ida-metrics_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mxmssh/IDAmetrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Minimal requirements: \n",
                    "original_header": "IDAMetrics-static.py"
                },
                "confidence": 0.9760286703763255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mshudrak/ida-metrics/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We tested metrics to predict bugs in the following list of vulnerable apps: http://goo.gl/4dKypy \n",
                    "original_header": "Metrics efficiency analysis"
                },
                "confidence": 0.9487037662686649,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mshudrak/ida-metrics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-28T05:38:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T00:27:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 83765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 4250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "230": {
        "filename": "miranska_restore_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/miranska/restore",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install it directly from GitHub:\n```R\ndevtools::install_github(\"https://github.com/miranska/restore\")\n```\n\nTo install it locally:\n\n1. Download the source code from GitHub\n2. In R console, run the following command:\n\n```R\ndevtools::install(\"The full path to the source code\", repos=NULL, type='source')\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing",
                    "parent_header": [
                        "RESTORE",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/miranska/restore/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We are working on porting the code from a private Github repo to this one; please stay tuned.\n \n",
                    "original_header": "Announcements"
                },
                "confidence": 0.9853721744234724,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/miranska/restore/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-03T17:54:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-04-09T16:36:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 48742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "231": {
        "filename": "jetbrains-research_sosed_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/sosed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-05T17:40:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-22T23:34:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 36683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 528
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "232": {
        "filename": "danaderp_securereqnet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WM-SEMERU/SecureReqNet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "https://wm-semeru.github.io/SecureReqNet/\n",
                    "type": "Text_excerpt",
                    "original_header": "SecureReqNet Documenation website at:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1mOXvgvkqCEgrAahyUH9Bw0ZO_nLglNFq\n",
                    "type": "Text_excerpt",
                    "original_header": "\u03b1-SecureReqNet:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`",
                        "Want to try out SecureReqNet? Checkout these examples in google colab:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/github/wm-semeru/SecureReqNet/blob/master/Gamma_SecureReqNet.ipynb\n",
                    "type": "Text_excerpt",
                    "original_header": "\u0393-SecureReqNet:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`",
                        "Want to try out SecureReqNet? Checkout these examples in google colab:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1pb_QQOm0jA0SwejgqxBXKBhkuM42al4k \n",
                    "type": "Text_excerpt",
                    "original_header": "Or serve your own version:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "value": "https://colab.research.google.com/drive/1C4D4Wvv0xW8UfoFNLM-7Bc2NxP0AISvB\n",
                    "type": "Text_excerpt",
                    "original_header": "For model interpretability:",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "value": "- [x] Using Shallow Neural Network to predict security relatedness on issues (or requirements) \n- [x] Using Deep Neural Network to predict security relatedness on issues (or requirements)\n- [ ] Using a Neural Network to predict quantitatively (regression) how critical is an issue (or requirement)\n- [ ] Implementing a Transformer Architecture to predict security criticality on issues (or requirements)\n- [ ] Recovering security related relationships among software artifacts by employing traceability theory\n\n\n*SecureReqNet* consists of a two-phase deep learning architecture that operates *(for now)* purely on the natural language descriptions of issues. The first phase of our approach learns high dimensional sentence embeddings from hundreds of thousands of descriptions extracted from software vulnerabilities listed in the CVE database and issue descriptions extracted from open source projects using an unsupervised learning process. The second phase then utilizes this semantic ontology of embeddings to train a deep convolutional neural network capable of predicting whether a given issue contains security-related information.\n\n<object data=\"https://github.com/danaderp/SecureReqNet/blob/master/data/plots/architecture.pdf\" type=\"application/pdf\" width=\"100%\"> \n</object>\n\n\n![\u03b1-SecureReqNet](https://github.com/danaderp/SecureReqNet/blob/master/data/plots/architecture-1.png)\n\n\n*SecureReqNet* has four versions that vary in terms of the size of the tensors and the parameters of the convolutional layers.\n\n\n1. **SecureReqNet (shallow)** was based on the best architecture achived by Han, et al. Such architecture implemented one convolution layer with 3 kernes of different sizes. The authors set up the size of each kernel as 1-gram, 3-gram, and 5-gram to reduce an input matrix. This matrix was built by means of an unsupervised word2vec where the rows represents the words in a given document (or issue) and the columns the size of the embedding. Details of how we trained our word2vec can be found in the notebook [*03_Clustering*](https://github.com/danaderp/SecureReqNet/blob/master/nbs/03_Clustering.ipynb).  **SecureReqNet (shallow)** has a max pooling layer followed by a flatten function. The final tensor is a merged vector from the 3 initial kernels. Unlike Han, et al.' SVM multi-class output layer, we utilized a binary classification throughout a softmax layer.\n\n\n```python\n# 1st Convolutional Layer (1-gram)\nconv_filter_1_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(1,embeddigs_cols), padding='valid',data_format=\"channels_last\")(gram_input)\n# 2sd Convolutional Layer (3-gram)\nconv_filter_3_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(3,embeddigs_cols), padding='valid')(gram_input)\n# 3rd Convolutional Layer (5-gram)\nconv_filter_5_gram = Conv2D(filters= N_filters, input_shape=input_sh, activation='relu', \n                       kernel_size=(5,embeddigs_cols), padding='valid')(gram_input)\n\n# Max Pooling Layer\nmax_pool_1_gram = MaxPooling2D(pool_size=((max_len_sentences-1+1), 1), strides=None, padding='valid')(conv_filter_1_gram)\nmax_pool_3_gram = MaxPooling2D(pool_size=((max_len_sentences-3+1), 1), strides=None, padding='valid')(conv_filter_3_gram)\nmax_pool_5_gram = MaxPooling2D(pool_size=((max_len_sentences-5+1), 1), strides=None, padding='valid')(conv_filter_5_gram)     \n\n# Fully Connected layer\nfully_connected_1_gram = Flatten()(max_pool_1_gram)\nfully_connected_3_gram = Flatten()(max_pool_3_gram)\nfully_connected_5_gram = Flatten()(max_pool_5_gram)\n\nmerged_vector = layers.concatenate([fully_connected_1_gram, fully_connected_3_gram, \n                                    fully_connected_5_gram], axis=-1)\n\nintegration_layer = Dropout(0.2)(merged_vector) # <-------- [HyperParameter]\n\npredictions = Dense(K, activation='softmax')(integration_layer)\n\n#Criticality Model\ncriticality_network = Model(inputs=[gram_input],outputs=[predictions])\n```\n\n\n2. **SecureReqNet (deep)** was an expansion of **SecureReqNet (shallow)**. We included an extra convolutional layer, a max pooling, and a flatten function. The final tensor is a merged vector from the 3 initial kernels. A fully connected sigmoid layers was added just before the binary softmax layer. \n\n\n\n3. **Alex-SecureReqNet (deep)** was based on the proposed architecture by Krizhevsky et al., where 5 convolutional layers extract the abstract features and 3 fully connected reduce the dimensionality. This is the classical convolutional ImageNet network with a small adaptation in the final layer to induce binary classification. \n\n\n4. **\u03b1-SecureReqNet (deep)** was a modification of the **Alex-SecureReqNet (deep)** in the convolutional layers. The modification consisted in implementing the n-gram kernel strategy for text-based datasets [(Han, et al., 2017)](https://ieeexplore.ieee.org/abstract/document/8094415). The input layer is a document embedding in the shape of a matrix. The first convolutional layer has a kernel of 7-gram size to reduce the input matrix into 32 vector feature maps. Later, it is applied a max pooling and a flatten function to obtain a column matrix. The second convolutional layer has a 5-gram filter followed by a max pooling and flatten function that merged 64 features. The third, fourth, and fifth convolutional layers are very similar to the original distribution in ImageNet but using 3-gram filters and 128/64 features respectively. Three fully connected layers went after the fifth conv layer to reduce the dimensionality and control the overfitting with the dropout units. The final layer is again a binary softmax layer (security vs non-security related).\n\n\n```python\n# 1st Convolutional Layer Convolutional Layer (7-gram)\nconv_1_layer = Conv2D(filters=32, input_shape=input_sh, activation='relu', \n                      kernel_size=(7,embeddigs_cols), padding='valid')(gram_input)\n# Max Pooling \nmax_1_pooling = MaxPooling2D(pool_size=((max_len_sentences-7+1),1), strides=None, padding='valid')(conv_1_layer)\n\n# Fully Connected layer\nfully_connected_1_gram = Flatten()(max_1_pooling)\nfully_connected_1_gram = Reshape((32, 1, 1))(fully_connected_1_gram)\n\n# 2nd Convolutional Layer (5-gram)\nconv_2_layer = Conv2D(filters=64, kernel_size=(5,1), activation='relu', \n                      padding='valid')(fully_connected_1_gram)\n                      \nmax_2_pooling = MaxPooling2D(pool_size=((32-5+1),1), strides=None, padding='valid')(conv_2_layer)  \n\n# Fully Connected layer\nfully_connected_2_gram = Flatten()(max_2_pooling)\nfully_connected_2_gram = Reshape((64, 1, 1))(fully_connected_2_gram)\n\n# 3rd Convolutional Layer (3-gram)\nconv_3_layer =  Conv2D(filters=128, kernel_size=(3,1), activation='relu', \n                      padding='valid')(fully_connected_2_gram)\n                      \n# 4th Convolutional Layer (3-gram)\nconv_4_layer = Conv2D(filters=128, kernel_size=(3,1), activation='relu', \n                     padding='valid')(conv_3_layer)\n                     \n# 5th Convolutional Layer (3-gram)\nconv_5_layer = Conv2D(filters=64, kernel_size=(3,1), activation='relu', \n                     padding='valid')(conv_4_layer)\n                     \n# Max Pooling\nmax_5_pooling = MaxPooling2D(pool_size=(58,1), strides=None, padding='valid')(conv_5_layer)  \n\n# Fully Connected layer\nfully_connected = Flatten()(max_5_pooling)\n\n# 1st Fully Connected Layer\ndeep_dense_1_layer = Dense(32, activation='relu')(fully_connected)\ndeep_dense_1_layer = Dropout(0.2)(deep_dense_1_layer) # <-------- [HyperParameter]\n\n# 2nd Fully Connected Layer\ndeep_dense_2_layer = Dense(32, activation='relu')(deep_dense_1_layer)\ndeep_dense_2_layer = Dropout(0.2)(deep_dense_2_layer) # <-------- [HyperParameter]\n\n# 3rd Fully Connected Layer\ndeep_dense_3_layer = Dense(16, activation='relu')(deep_dense_2_layer)\ndeep_dense_3_layer = Dropout(0.2)(deep_dense_3_layer) # <-------- [HyperParameter]\n\npredictions = Dense(K, activation='softmax')(deep_dense_3_layer)\n\n#Criticality Model\ncriticality_network = Model(inputs=[gram_input],outputs=[predictions])\n```\n\n\n> If you are using **\u03b1-SecureReqNet**, please consider citing [(N. Palacio, et al., 2019)](https://arxiv.org/abs/1908.00614)\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Research and Components Roadmap",
                    "parent_header": [
                        "SecureReqNet",
                        "Install with `pip install securereqnet`"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Dataset Source | Embedding | Training | Validation | Testing |\n--- | --- | --- | --- | --- |\nCVE Database | 52908 | 37036 | 10582 | - |\nGitLab Issues (SR) | 578 | 405 | 116 | 58 |\nGitLab Issues (Non-SR) | 578 | 405 | 116 | 58 |\nGitHub Issues (SR) | 4575 | 3203 | 915 | 458 |\nGitHub Issues (Non-SR) | 47483 | 33238 | 9497 | 458 |\nWikipedia | 10000 | - | - | - | \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9161591874421884,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/danaderp/securereqnet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-27T22:26:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-08T19:17:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 13629012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87875
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 465
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 186
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "233": {
        "filename": "akisaarinen_smartdiet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/akisaarinen/smartdiet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Setting up the constraint analysis part of SmartDiet is relatively\nstraightforward, but involves a bit of work. You'll need a machine with\nJava installed and sources codes for one or more Android programs. You need to\ncompile the SmartDiet analysis program (written in Scala). You also need to \nunzip Android SDK jars in order to track dependencies to the Android SDK\nfiles. This section covers the setup of this part of SmartDiet.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up constraint analysis tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "* Run <code>./sbt</code> to open up SBT (simple-build-tool) console. SBT documentation at\n  https://github.com/harrah/xsbt/wiki, if you want to dig deeper.\n* Fetch dependencies by running <code>update</code> in sbt console. This will take a while.\n* Assemble a runnable JAR by running <code>assembly:assembly</code> in sbt console.\n* You should see <code>target/smartdiet-{version}.jar</code>, runnable with\n  <code>java -jar smartdiet-{version}.jar</code>.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling the SmartDiet toolkit",
                    "parent_header": [
                        "Setting up constraint analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Configure applications in <code>sources.json</code> or a file similar to this\n(the name of the configuration file can be specified from the command line).\n\nRemember to point the SDK directory (\"sdkClassFilePath\") to one where you have\n*unzipped* all the SDK <code>.class</code> files, the tool doesn't read the\nlibrary files from inside jars.\n\nFor each program, you should specify:\n\n* \"name\": Just something to describe it.\n* \"appPath\": Directory containing compiled <code>.class</code> files for all application classes.\n* \"appSrcPath\": Directory containing <code>.java</code> source files for all application classes.\n* \"libPath\": Directory containing compiled <code>.class</code> files for all libraries that the application depends on (except for the SDK classes, which are under the sdkClassFilepath). These also need to be unzipped, nothing is looked from inside jars.\n",
                    "type": "Text_excerpt",
                    "original_header": "Configuring the constraint analysis tool",
                    "parent_header": [
                        "Setting up constraint analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "To start using dynamic energy profiling part of SmartDiet, you need a more\ncomplex procedure. You will need to root your Nexus One phone, compile the\nAndroid distribution and a custom kernel with some patches. You'll also need to\ncompile the traffic monitor kernel module against this same custom kernel.  The\ncustom stuff then needs to be installed into the phone. This section will cover\nthese topics.\n\nNote that I'm assuming you're familiar with the Android platform and know that\nthere is a risk of bricking your phone, as always when installing custom\nfirmware. You're doing all of this on your own risk. Shouldn't be too big\na risk if you're careful, but still.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up energy analysis tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Start by compiling the Android platform.\n\nOfficial instructions are available at http://source.android.com/source/initializing.html,\nthese are the steps that worked for me in Ubuntu 11.04. Another useful resource is\nhttp://source.android.com/source/build-numbers.html for the various build numbers and\nidentifiers for Android.\n\n* Fetch the repo script if you don't already have it. Tested with version (1,13)\n  <pre>\n  $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo\n  </pre>\n* Make sure your system is configured with Java 1.5 (Android compilation requires this).\n  For my Ubuntu 11.04 this can be done with the following command:\n  <pre>\n  $ sudo update-alternatives --set java /usr/lib/jvm/java-1.5.0-sun/jre/bin/java\n  </pre>\n* Create a working directory for the platform compilation. Rest of the instructions assume you work under the\n  directory created here.\n  <pre>\n  $ mkdir android-2.2.1-r2\n  $ cd android-2.2.1-r2\n  </pre>\n* Initialize and fetch the repository (last step downloads a *lot* of stuff and takes time)\n  <pre>\n  $ repo init -u https://android.googlesource.com/platform/manifest -b android-2.2.1_r2\n  $ repo sync\n  </pre>\n* Compile the ADB tool and make it available in PATH\n  <pre>\n  $ make adb\n  $ export PATH=`pwd`/out/host/linux-x86/bin:$PATH\n  $ which adb\n  </pre>\n  You should see <code>/home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/adb</code> or something similar.\n* Connect the Nexus One with USB and test connection with adb\n  <pre>\n  $ adb devices\n  List of devices attached\n  HT0B2P800954  device\n  </pre>\n* Fetch required proprietary files from Nexus One (in order to compile the platform). These\n  files are not distributed with the platform sources, so you need to have the stock Android\n  2.2 in the phone to do this.\n  <pre>\n  $ cd device/htc/passion\n  $ ./extract-files.sh\n  </pre>\n* Compile Android platform first without any modifications (to make sure everything works in your environment).\n  This will also take a while, results should appear in <code>out/target/product/passion/</code>\n  <pre>\n  $ source build/envsetup.sh\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n  Results will appear in <code>out/target/product/passion/</code> if everything went well.\n* Install the resulting images to your phone to make sure everything works as supposed at this point.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling Android 2.2.1-r2",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "* First compile the distribution, and then go to <code>out/target/product/passion/</code>\n  <pre>\n  $ cd out/target/product/passion/\n  </pre>\n* Reboot the phone to bootloader\n  <pre>\n  $ adb reboot-bootloader\n  </pre>\n* Find path to fastboot (should appear there if you adjusted the PATH earlier in the compile process).\n  <pre>\n  $ which fastboot\n  /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot\n  </pre>\n  Yours should look similar to this. Adjust paths correctly in the following commands.\n* Flash all partitions. Make sure you don't disconnect or boot the phone while flashing.\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash boot boot.img\n        sending 'boot' (2338 KB)... OKAY [  0.338s]\n                  writing 'boot'... OKAY [  0.975s]\n  finished. total time: 1.313s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash recovery recovery.img\n    sending 'recovery' (2564 KB)... OKAY [  0.369s]\n              writing 'recovery'... OKAY [  1.063s]\n  finished. total time: 1.433s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash system system.img\n     sending 'system' (74841 KB)... OKAY [ 10.323s]\n                writing 'system'... OKAY [ 27.256s]\n  finished. total time: 37.580s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash userdata userdata.img\n       sending 'userdata' (2 KB)... OKAY [  0.014s]\n              writing 'userdata'... OKAY [  2.377s]\n  finished. total time: 2.391s\n  </pre>\n* Reboot the phone\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot reboot\n  </pre>\n* Phone should boot up normally, goto Settings -> About phone and check that Build number is something like this:\n  <pre>\n  full_passion-userdebug 2.2.1 FRG83D eng.\n  amsaarin.20111024.152752 test-keys\n  </pre>\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing custom Android distribution to Nexus One",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Next, you'll need to compile your custom kernel. I used kernel version 2.6.32\nand patches are available for that version. Modifications might be needed if\nanother version is used.\n\nAs a result you will have a compiled kernel which will be referred later as\n<code>/path/to/zImage</code>. It will lie under the kernel source tree\nat <code>arch/arm/boot/zImage</code>. You should test this kernel as-is, and\nthen continue applying our patches for it.\n\nShort instructions for compiling the kernel:\n\n1) Clone the msm kernel repository\n\nAs of now (Dec 2th, 2011) the official Android kernel source code repository is\ndown because kernel.org was hacked a few months ago and Google is still in the\nprocess of recovering the hosting of the kernel sources. So you need to use one\nof the unofficial mirrors to get the sources, this one worked for me:\n\n<pre>\n$\u00a0git clone https://github.com/android/kernel_msm.git\n</pre>\n\n2) Checkout a new custom branch from 2.6.32 in <code>kernel_msm</code>\n\n<pre>\n$ cd kernel_msm\n$ git checkout remotes/origin/archive/android-msm-2.6.32\n$ git checkout -b smartdiet-2.6.32\n</pre>\n\n3) Get the default kernel configuration\n\nOne is available at with SmartDiet as a patch:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/0002-Add-initial-config.patch\nApplying: Added initial config\n</pre>\n\nAlternatively, if you have a stock 2.2.1-r2 in your phone, you can use the\nfollowing to get your stock configuration from the phone as well:\n\n<pre>\n$ adb pull /proc/config.gz\n$ gunzip config.gz\n</pre>\n\n4) Setup environment for kernel compiling \n\nDo it manually or use the script provided with smartdiet:\n\n<pre>\n$ source /path/to/smartdiet/patches/env_kernel.sh\n</pre>\n\n5) Make the kernel\n\n<pre>\n$ make\n</pre>\n\nAnd you're done. \n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling a custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "In order to work with the traffic monitor kernel module, you need to patch the\nkernel a bit. SmartDiet kernel also includes patches to enable oprofiler and\nTaintDroid support (http://appanalysis.org/), which are not necessary to use\nSmartDiet but will make other debugging tasks easier. You can take a look into\nwhat's under <code>patches/kernel-2.6.32</code> and decide to only use part of\nthe patches, if you wish.\n\nYou can apply all patches to the kernel source tree by running the following\nunder the git checkout of the Android kernel source tree:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/*\nApplying: Add traffic monitor protocol\nApplying: Added initial config\nApplying: Add profiling support to config\nApplying: Remove support for ext2 and ext3 from kernel to make it fit\nApplying: Add patch for oprofile and Nexus One\nApplying: yaffs2: Add xattr patches by TaintDroid guys\nApplying: Enable YAFFS2 support in .config for TaintDroid\n</pre>\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling custom kernel with SmartDiet patches",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "See the <code>trafficmonitor</code> subdirectory for more information.  This is\na separate kernel module developed at the Aalto University School of Science\nand it can be compiled against the patched kernel sources. You should get a\n<code>ec.ko</code> file which should be put into the <code>files</code>\nsubdirectory to be used by the measurement scripts later on (they will upload\nand load it into use into the phone). Note that because this is a kernel\nmodule, it has to be compiled against the exact kernel version you are running\nor it won't load up correctly.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling the traffic monitor kernel module",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Next you should compile the Android with your custom kernel and check that it\nworks. \n\nNote that standard kernel modules distributed with the Android distribution\nwill be incompatible with the new kernel and won't hence load up. Most\nimportant one is the driver dealing with WiFi, <code>bcm4329.ko</code>, so\nyou'll want to copy the new driver into the distribution before compiling it.\nCopy the one from the compiled kernel under\n<code>drivers/net/wireless/bcm4329/bcm4329.ko</code> to\n<code>device/htc/passion-common/bcm4329.ko</code> under the Android\ndistribution before compiling, and it'll be shipped to the phone when flashing.\n\nCompile the distribution with your new kernel by running the following in the\nAndroid platform directory (not the kernel source directory):\n\n<pre>\n$ make TARGET_PREBUILT_KERNEL=/path/to/zImage\n</pre>\n\n<code>/path/to/zImage</code> refers now to the custom kernel you built earlier.\n\nBefore continuing, check that everything works by booting up the phone and\nchecking versions (in addition to the platform version, kernel version should\nnow  also change in Settings -> About phone to refer somehow into your\nmachine).\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling Android with custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "This procedure will allow SmartDiet to get more information about Java threads\nunder Dalvik VM because of some added loggings.\n\n* Compile stock Android 2.2.1-r2 first as instructed above\n* Go to <code>dalvik</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd dalvik\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/dalvik-logging.patch\n  Applying: Log more clock-related variables and increase buffer size\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Recompile Android, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n* Install the modified version to the phone using the same procedure as before. This time you only\n  need to re-flash the system partition.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling SmartDiet modifications to Android platform with the custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "This procedure will increment the default buffer size that DDMS sets when\nrecording a Java execution trace. This enabled you to capture longer execution\nruns, the default buffer size will overflow rather quickly and you only record\nvery short runs, especially with CPU intensive apps.\n\n* Go to your <code>android-2.2.1-r2</code> platform source directory.\n* Go to <code>sdk/ddms</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd sdk/ddms\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/ddms-buffer_size_increase.patch\n  Applying: Increase default buffer size in ddms java application\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Compile Android SDK, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 1 | lunch\n  $ make sdk\n  </pre>\n* Compiled SDK is available under <code>out/host/linux-x86/sdk/</code>, to use DDMS with a bigger\n  tracing buffer size limit, run it from there (<code>tools/ddms</code>).\n\nTo take this new buffer size limit into use, you need to use the newly compiled\nDDMS and not the one which comes with the official SDK from Google.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling SmartDiet modifications to Android SDK",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<pre>\n$ export ANDROID_SDK=/path/to/your/android_sdk\n$ ./process-smartdiet-dynamic-measurements.sh test-data/dynamic-profiling-run-simpleapp/\n</pre> \n",
                    "original_header": "Testing out with sample data"
                },
                "confidence": 0.9963553542221275,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Compile and install the program you are profiling so that it allows debugging,\n  i.e. you can connect to it using DDMS (flags in the AndroidManifest.xml file).\n* Start the program in the phone.\n* Run <code>./run-smartdiet-dynamic-measurements.sh DIR</code> with phone\n  connected with either USB or TCP to adb. For more information check the\n  sources of the script. \n* Start up Android DDMS from your customized SDK. This customized DDMS has a\n  larger buffer size for the program tracing, so longer test runs can be done\n  than would be possible with the default settings. From DDMS, select the program\n  you're profiling and select 'start method profiling' to start tracing\n  the program execution.\n* Unplug the USB cable if you're measuring physical power consumption with\n  Monsoon. It will try to load the imaginary battery and mess up the\n  measurements.\n \n",
                    "original_header": "1) Before measurements"
                },
                "confidence": 0.9993732643247644,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2011-11-02T10:14:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-03-20T02:13:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 128932
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 81677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 70491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 18665
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rebol",
                    "name": "Rebol",
                    "type": "Programming_language",
                    "size": 913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "234": {
        "filename": "tum-i22_disa-windows-server-2016_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/disa-windows-server-2016",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-10T13:53:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-10-13T16:32:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "235": {
        "filename": "terryyz_llm-code-eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/terryyz/ice-score",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Our experiment is mainly built on the [codegen-metrics](https://github.com/JetBrains-Research/codegen-metrics) and [code-bert-score](https://github.com/neulab/code-bert-score) repositories. To replicate all experiments, please follow their instructions to set up the environment.\n\n\nTo run `compute_results.ipynb` and modules in `llm-code-eval` folder, use the following command to install all dependencies:\n```bash\npip install -r requirements.txt\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "ICE-Score: Instructing Large Language Models to Evaluate Code"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/terryyz/llm-code-eval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-26T12:21:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T23:26:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 40412
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 17538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "236": {
        "filename": "zkcpku_hit-hierarchy-transformer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zkcpku/HiT-hierarchy-transformer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also change the config file in `config.py` for testing, just set `args.test = True`\n \n",
                    "original_header": "Method Name Prediction"
                },
                "confidence": 0.9846029451843962,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python run_xxx.py` to train or test different models, we give a example sh in `run.sh`\n \n",
                    "original_header": "Code Classification"
                },
                "confidence": 0.9794636744114751,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also change the config file in `probe_config.py` for testing, just set `args.test = True`\n \n",
                    "original_header": "Variable Scope Detection"
                },
                "confidence": 0.9117947871775293,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- We list source code for four tasks, including code classificaiton, clone detection, method name prediction and variable scope detection.\n- We edit config files which contain personal information. So be careful! We will release our full version of source code as soon as possible. *There might be some small adjustments to the file structure on Github that could cause certain bugs. I will organize it when I have some free time later. If you find any issues, feel free to create an issue or send me an email.*\n- The preprocessing script for each task is in each dir.\n- RAW DATASET Link are from open-source repo:\n  - Code Classification: https://github.com/IBM/Project_CodeNet\n  - Clone Detection: https://github.com/microsoft/CodeXGLUE/tree/main/Code-Code/Clone-detection-POJ-104\n  - Method Name Prediction: https://github.com/github/CodeSearchNet\n  - You can download the raw dataset and preprocess with the script we provided. \n"
                },
                "confidence": 0.9999999999761258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-23T11:59:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-16T23:55:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 521414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "237": {
        "filename": "castor-software_decompilercmp_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/decompilercmp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-06-12T11:19:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-14T10:16:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 353169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 168952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "238": {
        "filename": "castor-software_pankti_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/pankti",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd /path/to/pankti/pankti-extract/`\n3. `mvn clean install`\n4. `java -jar target/pankti-extract-<version>-jar-with-dependencies.jar /path/to/maven/project`\n  - Available flags: `-h` (`--help`) for usage, `-v` (`--void`) to include methods that return void\n5. The output is a CSV file at `/path/to/pankti/pankti-extract/` called _extracted-methods-\\<project-name\\>.csv_.\n6. Generate Descartes report(s) to find pseudo-tested methods in the project (we use the `method.json` files)\n  - [pitest-descartes on GitHub](https://github.com/STAMP-project/pitest-descartes)\n  - [pitest-descartes for multi-module projects](https://github.com/STAMP-project/pitmp-maven-plugin)\n7. `python find-pseudo-tested.py /path/to/method/list/from/step5.csv /space/separated/paths/to/descartes/method.json` outputs a CSV with the list of methods that are candidates for instrumentation.\n___\n \n",
                    "original_header": "Extract (pankti-extract)"
                },
                "confidence": 0.9999613362449221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-instrument**,\n1. `cd /path/to/pankti/pankti-instrument/`\n2. `python instrument.py <path/to/instrumentation/candidates/from/previous/phase>.csv`\n3. New aspect classes for these methods are generated in `se.kth.castor.pankti.instrument.plugins`. These aspect classes are also included in `./src/main/resources/META-INF/glowroot.plugin.json`\n4. `mvn clean install`\n5. Drop `<pankti-instrument-<version>-jar-with-dependencies.jar` to `/path/to/glowroot/plugins/` \n___\n \n",
                    "original_header": "Instrument (pankti-instrument)"
                },
                "confidence": 0.9999999999772058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-generate**,\n1. `cd /path/to/pankti/pankti-generate/`\n2. `mvn clean install`\n3. `java -jar target/pankti-generate-<version>-jar-with-dependencies.jar /path/to/project /path/to/invoked/methods.csv /path/to/directory/with/objects/` \n<p align=\"center\">\n  <img src=\"https://github.com/castor-software/pankti/blob/master/pankti-workflow.jpg\">\n</p>\n \n",
                    "original_header": "Generate (pankti-generate)"
                },
                "confidence": 0.9982887693440337,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd pankti/`\n3. `mvn clean install`\n--- \n",
                    "original_header": "Building"
                },
                "confidence": 0.9999962576155678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-20T10:41:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T18:21:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1469306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45033
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 1525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "239": {
        "filename": "jweisz_iui22-code-translation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jweisz/iui22-code-translation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-18T16:51:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-14T16:46:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 81860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 8959
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "240": {
        "filename": "uispedro_mahotas_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luispedro/mahotas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you are using [conda](https://anaconda.org/), you can install mahotas from\n[conda-forge](https://conda-forge.github.io/) using the following commands:\n\n```bash\nconda config --add channels conda-forge\nconda install mahotas\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Mahotas"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "value": "You will need python (naturally), numpy, and a C++ compiler. Then you\nshould be able to use:\n\n```bash\npip install mahotas\n```\n\nYou can test your installation by running:\n\n```bash\npython -c \"import mahotas as mh; mh.test()\"\n```\n\nIf you run into issues, the manual has more [extensive documentation on\nmahotas\ninstallation](https://mahotas.readthedocs.io/en/latest/install.html),\nincluding how to find pre-built for several platforms.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compilation from source",
                    "parent_header": [
                        "Mahotas",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the `DEBUG` environment variable before compilation to get a\ndebug version:\n```bash\nexport DEBUG=1\npython setup.py test\n```\nYou can set it to the value `2` to get extra checks:\n```bash\nexport DEBUG=2\npython setup.py test\n```\n \nThe `Makefile` that is shipped with the source of mahotas can be useful\ntoo. `make debug` will create a debug build. `make fast` will create a\nnon-debug build (you need to `make clean` in between). `make test` will\nrun the test suite.\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9999768446398865,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Haralick features and NumPy 2 (thanks to @Czaki, see [#150](https://github.com/luispedro/mahotas/pull/150))\n \n",
                    "original_header": "Version 1.4.18 (Jul 18 2024)"
                },
                "confidence": 0.915729940183164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug that stopped mahotas from working on Windows\n \n",
                    "original_header": "Version 1.4.17 (Jul 13 2024)"
                },
                "confidence": 0.995878487819367,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- update for NumPy 2\n- Add deprecated warning for freeimage \n",
                    "original_header": "Version 1.4.16 (Jul 3 2024)"
                },
                "confidence": 0.99377000300729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update build system (thanks to @Czaki, see #147)\n \n",
                    "original_header": "Version 1.4.15 (Mar 24 2024)"
                },
                "confidence": 0.9920526737135964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix code for C++17 (issue #146) \n",
                    "original_header": "Version 1.4.14 (Mar 24 2024)"
                },
                "confidence": 0.9328260784441005,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix freeimage testing (and make freeimage loading more robust, see #129)\n- Add GIL fixed (which triggered crashes in newer NumPy versions)\n \n",
                    "original_header": "Version 1.4.13 (Jun 28 2022)"
                },
                "confidence": 0.9999458699420978,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update to newer NumPy\n- Build wheels for Python 3.9 & 3.10\n \n",
                    "original_header": "Version 1.4.12 (Oct 14 2021)"
                },
                "confidence": 0.999970123030918,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Build wheels automatically (PR #114 by [nathanhillyer](https://github.com/nathanhillyer))\n \n",
                    "original_header": "Version 1.4.10 (Jun 11 2020)"
                },
                "confidence": 0.9963411445665138,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix compilation on Windows\n \n",
                    "original_header": "Version 1.4.7 (Jul 10 2019)"
                },
                "confidence": 0.9754926039619221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Upgrade code to newer NumPy API (issue #95)\n \n",
                    "original_header": "Version 1.4.5 (Oct 20 2018)"
                },
                "confidence": 0.9984512185882864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Bernsen thresholding (issue #84)\n \n",
                    "original_header": "Version 1.4.4 (Nov 5 2017)"
                },
                "confidence": 0.9212411613482554,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix distribution (add missing `README.md` file)\n \n",
                    "original_header": "Version 1.4.3 (Oct 3 2016)"
                },
                "confidence": 0.9996030062889439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Add PIL based IO\n \n",
                    "original_header": "Version 1.2.4 (December 23 2014)"
                },
                "confidence": 0.9029959944597186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Explicitly set numpy.include\\_dirs() in setup.py [patch by Andrew\n    Stromnov]\n \n",
                    "original_header": "Version 1.2.1 (July 21 2014)"
                },
                "confidence": 0.9951016577073964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the\n[ChangeLog](https://github.com/luispedro/mahotas/blob/master/ChangeLog)\nfor older version. \n",
                    "original_header": "1.1.0 (February 12 2014)"
                },
                "confidence": 0.9752121832242753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2010-01-31T00:13:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:25:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 321916
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 213804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "241": {
        "filename": "ilwoof_logdp_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ilwoof/LogDP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-20T00:16:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-21T23:49:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2915
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "242": {
        "filename": "vardhah_epsilon_weighted_hybrid_query_strategy_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vardhah/Batch-mode-DeepAL-for-regression",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T22:08:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T11:22:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 13942132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 239391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 12345
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "243": {
        "filename": "dritter-hd_db-net-eip-patterns_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dritter-hd/db-net-eip-patterns",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n7. Enter the port configured in the connect artifact into the extension GUI and connect CPN/COMM (default `9001`).\n![pic4](pictures/comm-connected.png#center)\n8. Start executing enabled transitions.\n![pic5](pictures/fire-transition.png#center)\n \n",
                    "original_header": "Simulating the patterns"
                },
                "confidence": 0.9993582561410155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dritter-hd/db-net-eip-patterns/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-06T08:03:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-08T07:25:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "244": {
        "filename": "luckyper_ptsg_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luckyPer/PBACE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-08-21T13:39:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-05T06:30:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 108939
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "245": {
        "filename": "anonyauthors_code_review_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RosaliaTufano/code_review",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-26T08:16:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T01:16:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 4954
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "246": {
        "filename": "arcelikhmi_code2image_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ArcelikAcikKaynak/Code2Image",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-05T15:48:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T05:53:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42875
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 261
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 49
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "247": {
        "filename": "bommarito-consulting_pypi-research-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/licensio/pypi-research-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-22T14:02:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T17:49:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 74232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "248": {
        "filename": "tatiskit_autowig_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/StatisKit/AutoWIG",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-01-16T14:14:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T11:06:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 337632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7100
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 3937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "249": {
        "filename": "facebookresearch_code-prediction-transformer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/facebookresearch/code-prediction-transformer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**generate_new_trees.py**: a preprocessing script that converts the ASTs in py150 dataset (https://www.sri.inf.ethz.ch/phog) to modified ASTs, explained further below in **Modifying the AST**. \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9947876985346842,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/facebookresearch/code-prediction-transformer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-23T19:31:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-22T06:58:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 119227
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "250": {
        "filename": "program-repair_repairthemall_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/program-repair/RepairThemAll",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Usage \n\nRepairThemAll can be executed directly from the **source** or via a **Docker** image where RepairThemAll has been pre-configured and is ready to be used.\n\n## From source\n\n### Requirements\n\n1. Linux or OSX\n2. Java 7\n3. Java 8\n4. Python 2\n5. Maven\n6. Ant\n7. wget\n8. Git >= 1.9\n9. SVN >= 1.8\n10. Perl >= 5.0.10\n\n### Init RepairThemAll\n\n1. Clone this repository with `git clone --recursive https://github.com/program-repair/RepairThemAll.git`\n\n2. Init the repository with `./init.sh`.\n\n3. Go to `script/config.py` and update the configuration for your machine (java home, and working directory)\n\n### Default Configuration\n\nThe default configuration is stored at `script/config.py`.\n\n```ini\n# Specify the working directory where the repair attempts will be executed\nWORKING_DIRECTORY = os.path.join(\"/tmp/\") \n# Where the results of the execution will be stored\nOUTPUT_PATH = os.path.join(REPAIR_ROOT, \"results/\")\n\n# Path to Z3 binary (it is used by Nopol) \nZ3_PATH = os.path.join(REPAIR_ROOT, \"libs\", \"z3\", \"build\")\n\n# Path to Java 7 and Java 8 bin folders\nJAVA7_HOME = expanduser(\"/usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/\")\nJAVA8_HOME = expanduser(\"/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/\")\n\n# Java arguments that are given to the repair tools\nJAVA_ARGS = \"-Xmx4g -Xms1g\"\n\n# number of parallel execution thread for local execution\nLOCAL_THREAD = 1\n# maximum parallel in Grid5000\nGRID5K_MAX_NODE = 50\n\n# Repair Attemps timeout in minute\nTOOL_TIMEOUT = \"120\"\n```\n\n### Execute \n\nUse `python script/repair.py` to run the repair tools on the benchmarks\n\nCommand line\n\n```bash\npython script/repair.py {Arja,GenProg,Kali,RSRepair,jKali,jGenProg,jMutRepair,Cardumen,Nopol,DynaMoth,NPEFix}\n    --benchmark {Bears, Bugs.jar, Defects4J, IntroClassJava, QuixBugs}\n    --id <bug_id> # optional, if not specified all the bugs of the benchmark will be used. The format is specific for each benchmark, and you can check the list of bugs available per benchmark with `python script/print_bugs_available.py --benchmark <benchmark_name>`\n```\n\nExample:\n\n```bash\npython script/repair.py Nopol --benchmark Defects4J --id chart-5\n```\n\n## From Docker\n\n### Setup\n\n1. First, install Docker ([doc](https://docs.docker.com/)).\n\n2. Then, execute the command to download the image:\n\n```\ndocker pull tdurieux/repairthemall\n```\n\n### Execute\n\nThe shortest command to run Nopol on a particular defect from Defects4J is:\n```\ndocker run -it --rm -v <absolute_path_to_store_results>:/results tdurieux/repairthemall Nopol -b Defects4J -i Chart_5\n```\n\n### Output\n\nThe output folder can be setup in `script/config.py`. One will find there the following structure:\n\n```\n\u251c\u2500\u2500 benchmark name\n\u2502 \u251c\u2500\u2500 project\n\u2502 \u2502 \u251c\u2500\u2500 bug id\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 tool\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 random seed\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 repair.log (stdout from the repair tool)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 result.json (see below)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 grid5k.stderr.log (on Grid5k)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 detailed-result.json (available only for some repair tool)\n```\n\nThe `result.json` file is structured as follows:\n\n```javascript\n{\n  \"repair_begin\": timestamp of the beginning of the repair tool execution, \n  \"repair_end\": timestamp of the end of the repair tool execution, \n  \"patches\": [\n    {\n      \"patch\": textual representation of the diff between the buggy source code and the patched source code\n      // other information depending on the repair tool\n    }\n  ]\n}\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| #  | Tool          | Language | Repository                          | Commit id |\n| -- | ------------- | -------- | ----------------------------------- | --------- |\n| 1  | Nopol         | Java     | https://github.com/SpoonLabs/nopol  | 7ba58a78d |\n| 2  | DynaMoth      | Java     | https://github.com/SpoonLabs/nopol  | 7ba58a78d |\n| 3  | NPEFix        | Java     | https://github.com/SpoonLabs/npefix | 403445b9a |\n| 4  | jGenProg      | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 5  | jKali         | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 6  | jMutRepair    | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 7  | Cardumen      | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 8  | ARJA          | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 9  | GenProg-A     | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 10 | RSRepair-A    | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 11 | Kali-A        | Java     | https://github.com/yyxhdy/arja      | e60b990f9 | \n",
                    "original_header": "2. Supported repair tools"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| # | Benchmark      | Language | # Projects | # Bugs | Link                                           |\n| - | -------------- | -------- | ----------:| ------:| ---------------------------------------------  |\n| 1 | Bears          | Java     |         72 |    251 | https://github.com/bears-bugs/bears-benchmark  |\n| 2 | Bugs.jar       | Java     |          8 |  1,158 | https://github.com/bugs-dot-jar/bugs-dot-jar   | \n| 3 | Defects4J      | Java     |          6 |    395 | https://github.com/rjust/defects4j             |\n| 4 | IntroClassJava | Java     |          6 |    297 | https://github.com/Spirals-Team/IntroClassJava |\n| 5 | QuixBugs       | Java     |         40 |     40 | https://github.com/jkoppel/QuixBugs            |\n|   | **Total**      |          |        132 |  2,141 |                                                |\n \n",
                    "original_header": "3. Supported benchmarks of bugs"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-22T12:55:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T22:18:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 94623
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2871
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 984
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "251": {
        "filename": "tum-i22_disa-windows-server-2019_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/disa-windows-server-2019",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-10T13:41:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-19T09:46:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "252": {
        "filename": "jetbrains-research_codegen-metrics_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/codegen-metrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We use poetry to manage the environment and library versions. \n1. You can find the installation manual [here](https://python-poetry.org/docs/).\n2. Run `poetry install` to setup the environment.\n\nTo run grading scripts you will also need to install `tkinter`. \n- For linux users: `sudo apt-get install python3-tk`. \n- For Mac users: `brew install python-tk@3.9`\n\nTo run metric computations, you will also need [tree-sitter](https://github.com/tree-sitter/tree-sitter). \n- To use it, run `git clone https://github.com/tree-sitter/tree-sitter-python.git build/tree-sitter-python`.\n  - To make sure that you use the right version of tree, checkout the specific version:\n  - `cd build/tree-sitter-python && git checkout 9e53981` \n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Evaluation of metrics for code generation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jetbrains-research/codegen-metrics/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We expect all scripts to be run from the root directory of this repository. \n",
                    "original_header": "Repository structure"
                },
                "confidence": 0.9493832980809773,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jetbrains-research/codegen-metrics/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-27T09:42:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T07:10:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 815577
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 437409
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 36705
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 129
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "253": {
        "filename": "alibaba_sionnx_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/alibaba/sionnx",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-05-29T03:13:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-14T13:39:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 120772594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 80348638
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 45286438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 996629
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 838705
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 514505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "OCaml",
                    "name": "OCaml",
                    "type": "Programming_language",
                    "size": 414841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 141288
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 97206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 37873
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 25354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 24063
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Vim Script",
                    "name": "Vim Script",
                    "type": "Programming_language",
                    "size": 17449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 15944
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 14026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 10683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 10254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5884
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pawn",
                    "name": "Pawn",
                    "type": "Programming_language",
                    "size": 1572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Swift",
                    "name": "Swift",
                    "type": "Programming_language",
                    "size": 271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Logos",
                    "name": "Logos",
                    "type": "Programming_language",
                    "size": 28
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "254": {
        "filename": "h4iku_t5apr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/h4iku/T5APR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\n1. Install Python 3.9 or higher and clone this repository with its submodules:\r\n\r\n    ```bash\r\n    git clone --recurse-submodules https://github.com/h4iku/T5APR.git\r\n    cd T5APR\r\n    ```\r\n\r\n2. Create a virtual environment and install the dependencies:\r\n\r\n    ```bash\r\n    python -m venv .venv\r\n    source .venv/bin/activate\r\n\r\n    python -m pip install -U pip setuptools\r\n    pip install -r requirements.txt\r\n    ```\r\n\r\n3. Prepare evaluation benchmarks and tree-sitter language grammars:\r\n\r\n    Place the evaluation benchmarks in the `benchmarks` directory. Repositories for [QuixBugs](https://github.com/jkoppel/QuixBugs), [Defects4J](https://github.com/rjust/defects4j/), [Bears](https://github.com/bears-bugs/bears-benchmark), and [BugAID](https://dl.acm.org/doi/abs/10.1145/2950290.2950308) are already there. Defects4J needs further steps to install:\r\n\r\n    ```bash\r\n    cd benchmarks/Defects4J\r\n    cpanm --installdeps .\r\n    ./init.sh\r\n    ```\r\n    For further information, follow [Defects4J set up instructions](https://github.com/rjust/defects4j/#setting-up-defects4j).\r\n\r\n    For the [Codeflaws](https://codeflaws.github.io/) benchmark, download [codeflaws.tar.gz](http://www.comp.nus.edu.sg/%7Erelease/codeflaws/codeflaws.tar.gz) archive and extract it in the `benchmarks/Codeflaws` directory. For [ManyBugs](https://repairbenchmarks.cs.umass.edu/) benchmark, the necessary files are in `benchmarks/ManyBugs.7z`, which you can directly extract in the `benchmarks` directory, but you can also download the complete [scenario tarballs](https://repairbenchmarks.cs.umass.edu/ManyBugs/scenarios/) and extract them in the `benchmarks/ManyBugs/scenarios` directory.\r\n    \r\n    Submodules for tree-sitter language grammars are in the `tools/tree-sitter-lib/vendor` directory, and the compiled library will be in the `tools/tree-sitter-lib/build`. If you didn't download the submodules, you can follow the [tree-sitter](https://github.com/tree-sitter/py-tree-sitter) instructions to clone the required language grammars into the same directory.\r\n\r\n4. To run each module, navigate to the root of the repository and execute the following command:\r\n\r\n    ```bash\r\n    python -m package.module\r\n    ```\r\n\r\n    For example, to run the `src/bugline_finders/quixbugs_python.py` module:\r\n\r\n    ```bash\r\n    python -m src.bugline_finders.quixbugs_python\r\n    ```\r\n\r\n    To run tests:\r\n\r\n    ```bash\r\n    python -m pytest tests\r\n    ```\r\n\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Set Up",
                    "parent_header": [
                        "T5APR: Empowering Automated Program Repair across Languages through Checkpoint Ensemble",
                        "How to Use"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/h4iku/t5apr/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-17T11:03:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T02:55:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 208662
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "255": {
        "filename": "kth_sequencer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/sequencer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Choose a directory and:\n```bash\ngit clone https://github.com/OpenNMT/OpenNMT-py\n```\nWhen testing a new configuration, copy a working data directory and modify *sh files as desired.\n\nSet up environment variables:\n\n```bash\nexport CUDA_VISIBLE_DEVICES=0\nexport THC_CACHING_ALLOCATOR=0\nexport OpenNMT_py=.../OpenNMT-py\nexport data_path=.../results/Golden  # Or a new directory path as desired\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair",
                        "Model creation, training and use:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/kth/sequencer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To rerun our experiment of SequenceR over [Defects4J](https://github.com/rjust/defects4j). Run `src/Defects4J_Experiment/Defects4J_experiment.sh`, make sure you have `defects4j` installed. \n",
                    "original_header": "Defects4J experiment"
                },
                "confidence": 0.9945422490173241,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/sequencer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-27T10:35:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-14T04:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 73385569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 33404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7059
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2010
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "256": {
        "filename": "nkarasovd_aggregationmodel_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nkarasovd/AggregationModel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To convert this JSON file to our format, please use the following converter:\n```bash\npython src/scripts/state_to_events_converter.py\n  --state_path path_to_netbeans.json\n  --reports_path dir_path_for_saving_reports\n  --events_path path_to_events.csv\n```\n \n",
                    "original_header": "NetBeans"
                },
                "confidence": 0.9931163100292631,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nkarasovd/aggregationmodel/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-28T10:14:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-08T09:34:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 146565
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "257": {
        "filename": "nemo9cby_icse2022rep_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nemo9cby/ICSE2022Rep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-02T23:19:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-11T15:09:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 41998
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "258": {
        "filename": "guanqun-yang_testaug_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/guanqun-yang/testaug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following will demonstrate how TestAug is applied to testing a sentiment classifier's ability to handle negation in a sentence. Before going through each step, make sure that \n   ```bash\n   export OPENAI_API_KEY=\"XYZ\"\n   ``` \nNow we are ready to use the TestAug system: \n- Step 0: Clone the repository and make sure the paths in the `setting/setting.py` are set correctly. \n  - If $\\tau \\geq 90\\%$, directly proceed to Step 4 without stepping into Step 3.\n  - if $\\tau < 90\\%$, repeat Step 1 as follows, where `--phase2` will query a training set to train a `roberta-base` classifier to filter out the invalid sentences. Proceed to Step 3 after this step. \n  ```bash\n  # prepare training data\n  python pipeline/02_prepare_data.py --task sentiment --description 3 --save\n  \n  # train the classifier\n  python pipeline/03_classify.py --task sentiment --description 3 --train --test\n  ``` \n",
                    "original_header": "Pipeline"
                },
                "confidence": 0.9713512408250669,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "With all three tasks' test suites available, Table 3 could be reproduced following the steps below. \n- Step 1: Run the `reproduce.sh` script below: \n  ```bash\n  bash reproduce.sh\n  ``` \n  ```bash\n  python pipeline/07_report.py --task sentiment --table\n  ```\n  \n \n",
                    "original_header": "Reproducing Experiments"
                },
                "confidence": 0.9676395343287882,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It is recommended to set up our system using a computing platform with GPU support.\n```bash\nconda create --name testaug python==3.8.0\nconda activate testaug\n\n# generic libraries\nconda install numpy pandas matplotlib seaborn scikit-learn ipython tqdm termcolor\nconda install pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=10.1 -c pytorch \n\n# libraries related to NLP models\npip install transformers datasets\npip install simpletransformers\n\npip install -U pip setuptools wheel\npip install -U spacy\npython -m spacy download en_core_web_sm\n\n# libraries related to capability-based testing\npip install checklist\n\n# library related to querying GPT-3\npip install openai\npip install retelimit\n\n# library related to evaluation metrics\npip install networkx\npip install fast_bleu\n\n# current project\npip install -e .\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-03T17:45:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-06T11:26:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 58977
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "259": {
        "filename": "rgai-usz_js-patch-exploration-apr2021_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AAI-USZ/JS-patch-exploration-APR2021",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-11T06:39:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-12T10:24:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4526935
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3271
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "260": {
        "filename": "bthink-bgu_bpjs-context_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bThink-BGU/COBPjs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This section assumes that you are already familiar with the COBP paradigm. If this is not the case, you should start by reading the [COBP Paper](https://www.sciencedirect.com/science/article/pii/S095058492030094X). \n> [!IMPORTANT]  \n> You must not use ```bp.sync``` and BASH2*. Instead, use BASH3* and BASH4*.\n>\n> If you wish to bind a bthread to a context, use BASH5*.\n \n",
                    "original_header": "Writing COBP Programs"
                },
                "confidence": 0.9711954640391591,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bthink-bgu/bpjs-context/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-27T12:19:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-15T17:57:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 66847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 54491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "261": {
        "filename": "apwbs_attributebasedencryption_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apwbs/CAKE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Check the [Wiki](https://github.com/apwbs/CAKE-Ethereum/wiki) to run CAKE.\n",
                    "type": "Text_excerpt",
                    "original_header": "Guide",
                    "parent_header": [
                        "Fine-grained Data Access Control for Collaborative Process Execution on Blockchain"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/apwbs/attributebasedencryption/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-12T09:22:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T08:01:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 51972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 1053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "262": {
        "filename": "tum-i22_rritbed_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tum-i4/rritbed",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-02T06:23:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-13T18:13:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 268247
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 13572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "263": {
        "filename": "serval-dtf_apr-efficiency_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/APR-Efficiency",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "=========\n> ACS and SimFix are available at: https://drive.google.com/drive/folders/1OS9-GG2WQjFpvOPARaLW-k9b-9ZpO_3J?usp=sharing \n> kPAR: https://github.com/SerVal-DTF/FL-VS-APR/tree/master/kPAR \n> AVATAR: https://github.com/SerVal-DTF/AVATAR \n> TBar: https://github.com/SerVal-DTF/TBar\n \n",
                    "original_header": "APR tools"
                },
                "confidence": 0.9953572331944254,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serval-dtf/apr-efficiency/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> **FixMiner:** [Chart-1], [Chart-4], [Math-22], [Math-30], [Math-34], [Math-57], [Math-70], [Math-75], [Math-79]; \n> **jGenProg:** [Math-5], [Math-53], [Math-70]; \n> **SimFix:** [Chart-1], [Chart-7], [Chart-20], [Closure-14], [Closure-57], [Closure-62], [Closure-63], [Closure-73], [Lang-33], [Lang-43], [Lang-58], [Lang-60], [Math-5], [Math-41], [Math-53], [Math-57], [Math-59], [Math-70], [Math-(71)], [Math-75], [Math-79]; \n",
                    "original_header": "R0: Identical Patch"
                },
                "confidence": 0.9790979332509089,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/serval-dtf/apr-efficiency/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-25T03:36:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-30T07:58:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "264": {
        "filename": "llm-ethics_ethicssuite_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LLM-Ethics/EthicsSuite",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-08T10:45:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-11T13:02:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "265": {
        "filename": "pytest-dev_pytest-inline_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pytest-dev/pytest-inline",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    ```python {.line-numbers}\n    def FileHeader(self):\n        dt = self.date_time\n        dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2]\n        itest().assume(2 < 4).given(dt, (1980, 1, 25, 17, 13, 14)).check_eq(dosdate, 57)\n    ``` \n",
                    "original_header": "Provide any assumptions using an assume call"
                },
                "confidence": 0.9408995659540034,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- check\\_none(variable): \n        Checks if the variable is none. \n- check\\_not\\_none(variable): \n        Checks if the variable is not none. \n",
                    "original_header": "Specify test oracles using check calls"
                },
                "confidence": 0.9942754946567551,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-21T21:46:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T18:31:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2445
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "266": {
        "filename": "agapia_btreegeneticframework_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AGAPIA/BTreeGeneticFramework",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-03-24T19:15:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-25T15:02:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 870497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ASP.NET",
                    "name": "ASP.NET",
                    "type": "Programming_language",
                    "size": 363450
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ShaderLab",
                    "name": "ShaderLab",
                    "type": "Programming_language",
                    "size": 294812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GLSL",
                    "name": "GLSL",
                    "type": "Programming_language",
                    "size": 65322
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HLSL",
                    "name": "HLSL",
                    "type": "Programming_language",
                    "size": 10688
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "267": {
        "filename": "wsu-seal_cr-classification-esem23_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WSU-SEAL/CR-classification-ESEM23",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Clone the project </br>\n$ git clone https://github.com/WSU-SEAL/CR-classification-ESEM23.git\n \n",
                    "original_header": "Clone the project"
                },
                "confidence": 0.9999999983602734,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wsu-seal/cr-classification-esem23/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-07T18:05:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-28T03:22:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 430242957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 137012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 70712
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "268": {
        "filename": "soarsmu_incbl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/IncBL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-18T07:30:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-08T05:04:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 69342
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6675
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "269": {
        "filename": "yikun-li_satd-issue-tracker-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yikun-li/satd-issue-tracker-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Latest version available on [arXiv](https://arxiv.org/abs/2202.02180) \n",
                    "original_header": "Paper"
                },
                "confidence": 0.9926709977607804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yikun-li/satd-issue-tracker-data/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-14T09:48:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-16T21:41:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "270": {
        "filename": "kaanakdeniz_reproducibility_assessment_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kaanakdeniz/reproducibility_assessment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone the Repo\n2. Prepare the data\n\n    1. Data ([download](https://mega.nz/file/5jFiAKoa#cNITq38YDnAyqS3eGzWncJJ7XPfO4FPvYPS5xjQMYqA))\n    2. Model ([download](https://mega.nz/file/Eyk0Qa6L#IbLmo7_ZE_1TYyGnH7kM8uSOKkRhbBTGiLkbJiAyRCE))\n      - Models are also available at [HuggingFace](https://huggingface.co/kaanakdeniz)\n\n    Download all the data and model from the links provided above, unzip/ unarchive the data, and then copy the `data` ve `model` folders to the main directory in the repo.\n\n3. Make sure you have `Python 3.9.13` installed on your system\n4. In order to use the GitHub API, you need to rename the `example.config.ini` file to `config.ini` and enter your api token.\n5. Follow the steps specified in [Requirements](#Requirements)\n",
                    "type": "Text_excerpt",
                    "original_header": "General Installation",
                    "parent_header": [
                        "How to Start?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/kaanakdeniz/reproducibility_assessment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Demo page is available at**: https://repro-der.streamlit.app/\n \n",
                    "original_header": "An End-to-End System for Reproducibility Assessment of Source Code Repositories via Their Readmes"
                },
                "confidence": 0.9150383533527211,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kaanakdeniz/reproducibility_assessment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-07T00:27:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-14T19:11:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 841453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 26414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "271": {
        "filename": "eth-sri_robust-code_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eth-sri/robust-code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prepare virtual environment. Tested with python 3.6.8 but any version 3.5+ should work:\n\n```bash\npython3.6 -m venv venv\n```\nor \n```bash \nvirtualenv -p python3.6 --system-site-packages venv\n```\n\nInstall requirements\n\n```bash\nsource venv/bin/activate\n```\n\nInstall this project in editable state\n\n```bash\npip install wheel\npip install -e .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Adversarial Robustness for Code"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "value": "For developlment, we recomment installing pre-commit hooks\n\n```bash\npip install -e .[dev]\npre-commit install\n```\n\nThe following hooks are enabled:\n - [Flake8](https://gitlab.com/pycqa/flake8): Python Linter. The configuration can be adjusted in `setup.cfg`\n - [Black](https://github.com/psf/black): Code formatter. Instructions how to integrate it with your IDE can be found [here](https://github.com/psf/black#editor-integration)\n - [Reorder Python Imports](https://github.com/asottile/reorder_python_imports).\n \nIf necessary, the hooks can be bypassed with the `--no-verify` option passed to `git commit`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Pre-commit Hooks",
                    "parent_header": [
                        "Adversarial Robustness for Code",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Download and extract datasets using:\n```\nwget https://files.sri.inf.ethz.ch/data/bigcode/deeptyperast.tar.gz\ntar -vxf deeptyperast.tar.gz\n```\n \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9999993190137292,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u251c\u2500\u2500 deeptyperast_1k/\n\u2502   \u251c\u2500\u2500 config.json         # configuration file used to generate the dataset \n\u2502   \u251c\u2500\u2500 test.json.gz        # test split\n\u2502   \u251c\u2500\u2500 valid.json.gz       # valid split\n\u2502   \u251c\u2500\u2500 train.json.gz       # train split \n",
                    "original_header": "Dataset Format (Optional)"
                },
                "confidence": 0.9999722192055861,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For a more detailed evaluation please run:\n```bash\ntime python std_train.py --config configs/ast_ggnn.ini --adversarial True --n_subtree=300 --n_renames=1000 --repeat 3\n```\nfor adversarial (`--adversarial True`) and standard training (`--adversarial False`).\nFor training with representation refinement, the following command is needed.\n```bash\ntime python train_sparse.py --config configs/ast_ggnn.ini --n_subtree=300 --n_renames=1000 --repeat 1 --max_models 8 --last_base --eval\n\nBase Accuracy:  22033/ 25120 (87.71%), reject:      0/ 25120 (0.00%)\n\t   correct                SOUND:  16819/ 22033 (76.34%)\n\t   correct        SOUND_PRECISE:  16819/ 22033 (76.34%)\n\t   correct              UNSOUND:   5214/ 22033 (23.66%)\n\t incorrect              UNSOUND:   3087/  3087 (100.00%)\n\t    reject                SOUND:      0/     0 (0.00%)\n\t    reject        SOUND_PRECISE:      0/     0 (0.00%)\n\t    reject              UNSOUND:      0/     0 (0.00%)\n\t     total                SOUND:  16819/ 25120 (66.95%)\n\t     total              UNSOUND:   8301/ 25120 (33.05%)\n```\n \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9921347542783251,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run other models, simply change the config file. E.g., for ggnn use the following:\n```bash\ncd robustcode/models/robust\npython std_train.py --config configs/ast_ggnn.ini --adversarial False --n_subtree=300 --n_renames=1000 --repeat 1\n```\n \n",
                    "original_header": "Experiments: Other models"
                },
                "confidence": 0.9999385660981323,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To train robust models, use the following command:\n```bash\ncd robustcode/models/robust\ntime python train_sparse.py --config configs/ast_ggnn.ini --n_subtree=300 --n_renames=1000 --repeat 1 --max_models 8 --last_base\n```\n \n",
                    "original_header": "Experiments: Robust Models"
                },
                "confidence": 0.9999427117594379,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/robust-code/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-30T00:11:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T13:17:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 438406
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 16700
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 3144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "272": {
        "filename": "s2-group_msr-2021-robotics-green-practices-replication-package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S2-group/msr-2021-robotics-green-practices-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-22T21:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-14T14:04:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95718
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 86
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "273": {
        "filename": "saltudelft_codefill_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/saltudelft/codefill",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-11T14:02:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-11T02:58:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 73451
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "274": {
        "filename": "castor-software_core-83_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/core-83",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-04T14:40:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-24T08:32:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 371011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 4223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "275": {
        "filename": "s4fs_sematacc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/s4fs/sematacc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2013-01-01T19:40:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-01-24T02:53:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 610433
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 22337
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 17869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "276": {
        "filename": "serval-dtf_tbar_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TruX-DTF/TBar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---------------------------\n 1. Download and Install Defects4J.\n - `./installD4J.sh`\n \n 2. Check out and compile each bug.\n - `./checkoutD4JBugs.sh`\n    \n  If you fail to install defects4j, checkout or compile defects4j bugs, please reference these [introductions](https://github.com/rjust/defects4j#steps-to-set-up-defects4j).\n \n  The docker image of TBar is available: [TBar](https://cloud.docker.com/u/kuiliu/repository/docker/kuiliu/tbar).\n  \n IV. Run TBar\n ------------\n 1. Fixing Defects4J bugs with perfect fault localization configuration.\n - `./PerfectFLTBarRunner.sh <Bug_Data_Path> <Bug_ID> <defects4j_Home> <true/false>`\n    \n    Example: `./PerfectFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/ false` to fix bug Chart_8 with perfect fault localization configuration.\n    \n    `./PerfectFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/ true` tries to fix bug Chart_8 with all possible matching fix patterns.\n \n 2. Fixing Defects4J bugs with normal fault localization configuration.\n - `./NormalFLTBarRunner.sh <Bug_Data_Path> <Bug_ID> <defects4j_Home>`\n   \n   Example: `./NormalFLTBarRunner.sh D4J/projects/ Chart_8 D4J/defects4j/`. \n \n If it executes failed because of the paths of <Bug_Data_Path> and <defects4j_Home>, please use their absolute paths.\n \n \n V. Structure of the Directories\n -------------------------------\n ```powershell\n  |--- README.md               :  user guidance\n  |--- D4J                     :  Defects4J information\n  |--- FailedTestCases         :  Failed test cases of each Defects4J bug\n  |--- lib                     :  GZoltar jar files\n  |--- Results                 :  Generated patches\n  |------ FixPatterns          :  Bugs fixed by each fix pattern\n  |------ PerfectFL            :  Bugs fixed with perfect fault localization configuration\n  |------ NormalFL             :  Bugs fixed with normal fault localization configuration\n  |--- src                     :  source code\n  |--- SuspiciousCodePositions :  Bug positions localized with GZoltar\n  |--- target                  :  binary code\n```\n\n----\n\n__ALL__ suggestions are welcomed.\n",
                    "type": "Text_excerpt",
                    "original_header": "III. Prepare Defects4J Bugs",
                    "parent_header": [
                        "TBar"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/serval-dtf/tbar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-20T08:30:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T02:35:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 546894
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "277": {
        "filename": "yaxirhuxxain_source-code-suggestion_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yaxirhuxxain/Source-Code-Suggestion",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-24T10:54:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-14T02:43:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "278": {
        "filename": "casperboone_dltpy_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/casperboone/dltpy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "`input-preparation/generate_df.py` can be used to combine all the separate csv files per project into one big file\nwhile applying filtering.\n\n`input-preparation/df_to_vec.py` can be used to convert this generated csv to vectors.\n\n`input-preparation/embedder.py` can be used to train word embeddings for `input-preparation/df_to_vec.py`.\n",
                    "type": "Text_excerpt",
                    "original_header": "`input-preparation/` Input Preparation (e-f)",
                    "parent_header": [
                        "DLTPy",
                        "Components"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/casperboone/dltpy/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Start using:\n``` bash\n$ python preprocessing/pipeline.py\n```\nOptional arguments:\nBASH2*\n \n",
                    "original_header": "`preprocessing/` Preprocessing Pipeline (a-d)"
                },
                "confidence": 0.9969868732988083,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/casperboone/dltpy/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-19T13:30:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T14:07:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 227557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 87973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 70668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "279": {
        "filename": "zhangjianzhang_pctd_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhangjianzhang/PCTD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-11T02:40:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-11T02:41:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 651282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 9037
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "280": {
        "filename": "m3soulu_maskedeventanomalydetection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/M3SOulu/MaskedEventAnomalyDetection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-31T19:20:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-05T10:30:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29327
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "281": {
        "filename": "logpai_hybridlog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/hybridlogparser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T06:38:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T17:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "282": {
        "filename": "huhangithub_papt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/huhanGitHub/papt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"459\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9078829/222717542-07412c06-6393-4046-b03a-8de0af488ca7.png\"> \n",
                    "original_header": "Pair format"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/huhangithub/papt/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-22T04:59:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T02:20:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 188334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "283": {
        "filename": "qishenghu_codeinstruct_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/qishenghu/InstructCoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also plan to release our LoRA checkpoints [here](https://huggingface.co/happylkx). \n",
                    "original_header": "Release"
                },
                "confidence": 0.9230301884379253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/qishenghu/codeinstruct/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-21T16:27:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T07:10:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 46520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "284": {
        "filename": "nuprl_typeweaver_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nuprl/TypeWeaver",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `build`: build the project \n",
                    "original_header": "Makefile Targets"
                },
                "confidence": 0.986824006633095,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    make NOCONTAINERS=true build\n    make NOCONTAINERS=true all\n \n",
                    "original_header": "No containers"
                },
                "confidence": 0.9158540785350775,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Setting this variable will skip the InCoder experiments, which require a GPU: \n",
                    "original_header": "No GPU"
                },
                "confidence": 0.9937185711182369,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When running `make predict`, `make weave`, or `make typecheck`, the `MODEL`\nvariable must be provided, e.g.: \n",
                    "original_header": "Model"
                },
                "confidence": 0.9959200314891063,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "By default, `make all` will use all available processors on the machine.\nThis can be configured: \n",
                    "original_header": "Number of processors"
                },
                "confidence": 0.9633882943805901,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    make DOCKER=docker build\n    make DOCKER=docker shell\n    DOCKER=docker ./run.sh\n \n",
                    "original_header": "Docker"
                },
                "confidence": 0.9387699562380736,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nuprl/typeweaver/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-05-05T14:09:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-29T16:12:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 55014202
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 36010364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1681874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 465715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 207979
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 53190
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Mathematica",
                    "name": "Mathematica",
                    "type": "Programming_language",
                    "size": 47714
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 24463
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 14815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 4946
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 1363
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 114
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "285": {
        "filename": "shuyanzhou_docprompting_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/shuyanzhou/docprompting",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download data for `CoNaLa` and `tldr` from [link](https://drive.google.com/file/d/1CzNlo8-e4XqrgAME5zHEWEKIQMPga0xl/view?usp=sharing)\n```bash\n# unzip\nunzip docprompting_data.zip\n# move to the data folder\nmv docprompting_data/* data\n```\n\nDownload trained generator weights from [link](https://drive.google.com/file/d/1NmPMxY1EOWkjM7S8VSKa13DKJmEZ3TqV/view?usp=sharing)\n```bash\nunzip docprompting_generator_models.zip\n# move to the model folder\nmv docprompting_generator_models/* models/generator\n\n```",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "DocPrompting: Generating Code by Retrieving the Docs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/shuyanzhou/docprompting/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We make the following models available on Huggingface: \n",
                    "original_header": "Huggingface \ud83e\udd17 Models"
                },
                "confidence": 0.9799858662968152,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shuyanzhou/docprompting/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " To evaluate `pass@k`, we need more generations, we use nucleus sampling (instead of beam search) for the generation. \n ```bash\n ds='conala'\n t=1.0 # set this from 0.2, 0.4, 0.6, .. 1.0. Use the dev set to find the best temperature\n python generator/fid/test_reader_simple.py \\\n    --model_path models/generator/${ds}.fid.codet5.top10/checkpoint/best_dev \\\n    --tokenizer_name models/generator/codet5-base \\\n    --eval_data data/${ds}/fid.cmd_test.codet5.t10.ns200.json \\\n    --per_gpu_batch_size 8 \\\n    --n_context 10 \\\n    --name ${ds}.fid.codet5.top10.ns200 \\\n    --checkpoint_dir models/generator  \\\n    --result_tag test_same \\\n    --num_beams 1 \\\n    --temperature $t \\\n    --top_p 0.95 \\\n    --num_return_sequences 200 \\\n    --main_port 81692\n ```\n Then run this [script](./dataset_helper/conala/execution_eval.py)\n BASH3* \n",
                    "original_header": "FID generation"
                },
                "confidence": 0.9998546685196963,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shuyanzhou/docprompting/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [tldr](https://github.com/tldr-pages/tldr) Github repo. Thanks for all the contributors!\n* [CoNaLa](https://conala-corpus.github.io)\n \n",
                    "original_header": "Resources"
                },
                "confidence": 0.9420080402208432,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/shuyanzhou/docprompting/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-13T06:51:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T22:24:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 259229
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "286": {
        "filename": "mostafamahdieh_clusteringfaultpronenesstcp_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mostafamahdieh/ClusteringFaultPronenessTCP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-20T01:23:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T13:24:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135308
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "287": {
        "filename": "troublor_darcher_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Troublor/darcher",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\nBefore install, make sure you have met the requirements specified in [REQUIREMENTS](REQUIREMENTS.md).\n\nThe project is manager by [yarn workspace](https://classic.yarnpkg.com/en/docs/workspaces/). \nAll commands below are executed at the root directory of the project, unless explicitly specified. \n\n## Fetch Node.js Dependencies\n\nAt root folder: \n```bash\nyarn\n```\n\n## Build Project \n\n```bash\nyarn build\n```\n\n## Generate Ethererum DAG\n\nThe [Ethereum DAG](https://eth.wiki/en/fundamentals/mining) (directed acyclic graph) is essential for the Controlled Blockchain insider *\u0110Archer*. \n\n```bash\nyarn workspace @darcher/go-ethereum gen:dag\n```\n\nThe Ethereum DAG will be generated at the `ethash` folder under root directory.\n\nAlternatively, we provide a pre-generated ethash [here](https://zenodo.org/record/4893187). Download it and extract it at the `ethash` folder under root directory.\n\n## Prepare the Chrome Profile\n\n*\u0110Archer* is designed to test Web-based DApps, so we need to configure a browser profile to use *\u0110Archer*.\nWe provide a preconfigured profile. \nDownload [`ChromeProfile.zip`](https://github.com/Troublor/darcher/releases) and extract it at the `ChromeProfile` folder under the root directory.\n\nThe profile contains two extensions configured for *\u0110Archer* as follows:\n\n### MetaMask for *\u0110Archer*\n\n*\u0110Archer* is working closely with an adapted version of [MetaMask](https://metamask.io/) to retrieve information of transactions sent by DApps. \n\n`MetaMask for *\u0110Archer*` should be correctly built when [building the project](#Build Project).\nThe built artifact (Chrome Extension) can be found under `packages/darcher-metamask/builds/chrome`.\n\n### Off-Chain State Fetcher (Browser Extension)\n\n*\u0110Archer* supports fetch off-chain state from HTML DOM in a DApp's website. \nThis functionality requires a Chrome extension to make it possible. \n\n`Off-Chain State Fetcher (Browser Extension)` should be correctly built when [building the project](#Build Project).\nThe built artifact (Chrome Extension) can be found under `packages/darcher-dbmonitor-browser/dist`.\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/troublor/darcher/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "Alternatively, we provide a VirtualBox image [here on Zenodo](https://doi.org/10.5281/zenodo.5111309) (please always use the latest version on Zenodo), which contains pre-configured environment of *\u0110Archer*.\nYou can import it into your VirtualBox by following this [tutorial](https://docs.oracle.com/cd/E26217_01/E26796/html/qs-import-vm.html).\nNote that the size of the image is huge (approximate 23.2 GB) due to the fact that *\u0110Archer* works on integrated testing of Apps, which requires a GUI environment.\n\nThe default user of the virtual machine is `darcher` with password `darcher` (in case you need root privilege).\nInside the virtual machine, the *\u0110Archer* project is located at `$HOME/darcher`.\nAll commands below are executed at the root directory of *\u0110Archer* project.\n",
                    "type": "Text_excerpt",
                    "original_header": "Pre-configured Virtual Machine",
                    "parent_header": [
                        "*\u0110Archer* - Detecting On-Chain-Off-Chain Synchronization Bugs in Decentralized Applications",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/troublor/darcher/master/README.md"
            },
            {
                "result": {
                    "value": "**Note**: If you use the pre-configured virtual machine, you do not need to do the following things.\n\nPlease check the system requirements: [REQUIREMENTS](./REQUIREMENTS.md)\n\nClone this project:\n```bash\ngit clone --recurse-submodules https://github.com/Troublor/darcher.git && cd darcher \n```\n**Note**: This project contains several submodules. Be sure to add `--recurse-submodules` when git cloning.\n\nProceed at [INSTALL](./INSTALL.md) for installation of dependencies and compilation.\n",
                    "type": "Text_excerpt",
                    "original_header": "Build from Source",
                    "parent_header": [
                        "*\u0110Archer* - Detecting On-Chain-Off-Chain Synchronization Bugs in Decentralized Applications",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/troublor/darcher/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After the experiment finishes, if the docker-compose services are not stopped automatically, cleanup the services using the following command:\n```bash\nyarn workspace @darcher/examples cleanup:<subject>\n``` \n",
                    "original_header": "Experiment Output"
                },
                "confidence": 0.999741832257209,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/troublor/darcher/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-02T05:54:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-31T04:38:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 652126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 242802
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 214078
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 45374
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 20412
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 14881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "288": {
        "filename": "wujunjie1998_btpgbt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wujunjie1998/BTPGBT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-17T06:52:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-16T16:30:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 73961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 12498
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "289": {
        "filename": "google-research-datasets_eth_py150_open_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/google-research-datasets/eth_py150_open",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use this manifest, one may download the ETH Py150 repository from its\noriginal location, and then retain only the files with the file paths included\nin the corresponding manifest we release. \n",
                    "original_header": "eth_py150_open"
                },
                "confidence": 0.983231966642879,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/google-research-datasets/eth_py150_open/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-08T23:43:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-30T08:21:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "290": {
        "filename": "yuchenxia_gpt4industrialautomation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YuchenXia/GPT4IndustrialAutomation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-20T21:37:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T15:56:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "291": {
        "filename": "indikakuma_datamesh_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/IndikaKuma/DataMesh",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-02T16:54:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-13T13:43:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "292": {
        "filename": "i-se_satspaceexpo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/SatSpaceExpo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We used [Z3 v4.8.4](https://github.com/Z3Prover/z3/releases/tag/z3-4.8.4) during the experiment, but newer version could be probably faster.\n```\nwget https://github.com/Z3Prover/z3/archive/z3-4.8.4.tar.gz\ntar -xzf z3-4.8.4.tar.gz\n# follow steps in README.md inside the z3-4.8.4 like following...\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Download and set up Z3 solvers",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/satspaceexpo/master/README.md"
            },
            {
                "result": {
                    "value": "In the SNAP, for convenient, we use the ID to represent the benchmarks,  you can also replace or add more test cases by editing the `src/commons/utility/utility.h`.\nBe default, the id shows as \n```\nstatic std::vector<std::string> benchmark_models{\n    \"Benchmarks/Blasted_Real/blasted_case47.cnf\", // 0\n    \"Benchmarks/Blasted_Real/blasted_case110.cnf\", // 1\n    \"Benchmarks/V7/s820a_7_4.cnf\", // 2\n    \"Benchmarks/V15/s820a_15_7.cnf\", // 3\n    \"Benchmarks/V3/s1238a_3_2.cnf\", // 4\n    \"Benchmarks/V3/s1196a_3_2.cnf\", // 5\n    \"Benchmarks/V15/s832a_15_7.cnf\", // 6\n    \"Benchmarks/Blasted_Real/blasted_case_1_b12_2.cnf\", // 7\n    \"Benchmarks/Blasted_Real/blasted_squaring16.cnf\", // 8\n    \"Benchmarks/Blasted_Real/blasted_squaring7.cnf\", // 9\n    \"Benchmarks/70.sk_3_40.cnf\", // 10\n    \"Benchmarks/ProcessBean.sk_8_64.cnf\", // 11\n    \"Benchmarks/56.sk_6_38.cnf\", // 12\n    \"Benchmarks/35.sk_3_52.cnf\", // 13\n    \"Benchmarks/80.sk_2_48.cnf\", // 14\n    \"Benchmarks/7.sk_4_50.cnf\", // 15\n    \"Benchmarks/doublyLinkedList.sk_8_37.cnf\", // 16\n    \"Benchmarks/19.sk_3_48.cnf\", // 17\n    \"Benchmarks/29.sk_3_45.cnf\", // 18\n    \"Benchmarks/isolateRightmost.sk_7_481.cnf\", //19\n    \"Benchmarks/17.sk_3_45.cnf\", // 20\n    \"Benchmarks/81.sk_5_51.cnf\", // 21\n    \"Benchmarks/LoginService2.sk_23_36.cnf\", // 22\n    \"Benchmarks/sort.sk_8_52.cnf\", // 23\n    \"Benchmarks/parity.sk_11_11.cnf\", // 24\n    \"Benchmarks/77.sk_3_44.cnf\", // 25\n    \"Benchmarks/20.sk_1_51.cnf\", // 26\n    \"Benchmarks/enqueueSeqSK.sk_10_42.cnf\", // 27\n    \"Benchmarks/karatsuba.sk_7_41.cnf\", // 28\n    \"Benchmarks/tutorial3.sk_4_31.cnf\" // 29\n};\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4. Understanding the Benchmark ID",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/satspaceexpo/master/README.md"
            },
            {
                "result": {
                    "value": "```\ncd /path/to/SatSpaceExpo\nmake snap\n/path/to/SatSpaceExpo/bin/snap -i ID@Step4\n\n# To clean up all compiled binaries\ncd /path/to/SatSpaceExpo\nmake clean\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 5. Compile SNAP and execution",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/satspaceexpo/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-28T14:44:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-18T09:20:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14162865
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1116034
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 148813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 141281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 89079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 75208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 55627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 44252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 27303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 21403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 8099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 3895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SAS",
                    "name": "SAS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Module Management System",
                    "name": "Module Management System",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 787
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "293": {
        "filename": "lkpsg_ccscanner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lkpsg/ccscanner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "CCScanner is written using Python3.\nInstall dependencies.\n```\u00b7\npip install json5 bs4 GitPython lxml requests\n```\nOr\n```\u00b7\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Towards Understanding Third-party Library Dependency in C/C++ Ecosystem",
                        "CCScanner"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/lkpsg/ccscanner/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-20T07:23:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T14:48:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 106465
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 85422
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Lua",
                    "name": "Lua",
                    "type": "Programming_language",
                    "size": 10325
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Meson",
                    "name": "Meson",
                    "type": "Programming_language",
                    "size": 4460
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "294": {
        "filename": "assert-kth_supersonic_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/Supersonic",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All executable file uses `argparse`, meaning that you can run `python foo.py -h` to see all command line arguments\n \n",
                    "original_header": "Files"
                },
                "confidence": 0.9991533905562295,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/assert-kth/supersonic/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* `src/code-preprocessing/find_improvement_submissions.py`: Using the Codeforces and Codenet submissions, we find submission where either the time or memory improved.\n* `src/code-preprocessing/format_code.py`: Uses `gcc` to remove source code comment and `clang-format` to format all submissions.\n \n",
                    "original_header": "src/code-preprocessing"
                },
                "confidence": 0.9058199803806148,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/assert-kth/supersonic/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* `src/submit_code/aizu_submit.py`: Upload generated solutions to AIZU.\n* `src/submit_code/atcoder_submit.py`:  Upload generated solutions to AtCoder.\n* `src/submit_code/codeforces_submit.py`: Upload generated solutions to Codeforces.\n \n",
                    "original_header": "src/submit_code"
                },
                "confidence": 0.9708515366001144,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/assert-kth/supersonic/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-03T10:33:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-15T07:42:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 28027304
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1806888
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 241938
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 124919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "295": {
        "filename": "dakuo_haconvgnn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dakuo/HAConvGNN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-08T01:48:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-27T12:34:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 93
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "296": {
        "filename": "wssun_badcode_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wssun/BADCODE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\u251c\u2500\u2500\u2500 datasets\n\u2502    \u251c\u2500\u2500\u2500 attack\n\u2502    \u2502    \u251c\u2500\u2500\u2500 attack_util.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 poison_data.py\n\u2502    \u251c\u2500\u2500\u2500 codesearch\n\u2502    \u251c\u2500\u2500\u2500 extract_data.py\n\u2502    \u251c\u2500\u2500\u2500 preprocess_data.py\n\u251c\u2500\u2500\u2500 figures\n\u2502    \u251c\u2500\u2500\u2500 framework.png\n\u251c\u2500\u2500\u2500 models\n\u251c\u2500\u2500\u2500 src\n\u2502    \u251c\u2500\u2500\u2500 CodeBERT\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 mrr.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_classifier.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 CodeT5\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 _utils.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 configs.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 models.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_search.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 stealthiness\n\u2502    \u2502    \u251c\u2500\u2500\u2500 defense\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500activation_clustering.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500spectral_signature.py\n\u251c\u2500\u2500\u2500 utils\n\u2502    \u251c\u2500\u2500\u2500 results\n\u2502    \u2502    \u251c\u2500\u2500\u2500 matching_pair\n\u2502    \u2502    \u251c\u2500\u2500\u2500 selecting_trigger\n\u2502    \u251c\u2500\u2500\u2500 vocab_frequency.py\n\u2502    \u251c\u2500\u2500\u2500 select_trigger.py\n\u251c\u2500\u2500\u2500 README.md\n\u251c\u2500\u2500\u2500 trigger-injected samples.pdf\n```\n \n",
                    "original_header": "Glance"
                },
                "confidence": 0.979202029418469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Data preprocess\npreprocess the dataset\n```shell script\n# preprocess for the python training dataset\ncd datasets/codesearch\ngdown https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/python.zip  \nunzip python.zip\nrm  python.zip\ncd ..\npython preprocess_data.py\ncd ..\n\n# poisoning the training dataset\ncd datasets/attack\npython poison_data.py\n\n# generate the test data for evaluating the backdoor attack\npython extract_data.py\n\n# more details on the datasets can be found in https://github.com/github/CodeSearchNet\n\n``` \n- Trigger Generation\n```shell\ncd utils\npython vocab_frequency.py\npython select_trigger.py\n```\n \n",
                    "original_header": "Backdoor attack"
                },
                "confidence": 0.986323296839297,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- fine-tune\n```shell\ncd src/CodeBERT\nnohup python -u run_classifier.py \\\n--model_type roberta \\\n--task_name codesearch \\\n--do_train \\\n--do_eval \\\n--eval_all_checkpoints \\\n--train_file rb-file_100_1_train.txt \\\n--dev_file valid.txt \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 64 \\\n--per_gpu_eval_batch_size 64 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--gradient_accumulation_steps 1 \\\n--overwrite_output_dir \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--cuda_id 0  \\\n--model_name_or_path microsoft/codebert-base  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeBERT\nnohup python run_classifier.py \\\n--model_type roberta \\\n--model_name_or_path microsoft/codebert-base \\\n--task_name codesearch \\\n--do_predict \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_eval_batch_size 32 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--test_file file_batch_0.txt \\\n--pred_model_dir ../../models/codebert/python/ratio_100/file/file_rb/checkpoint-best \\\n--test_result_dir ../results/codebert/python/fixed_file_100_train/0_batch_result.txt \\\n--cuda_id 0\n``` \n",
                    "original_header": "CodeBERT"
                },
                "confidence": 0.9999895427472683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- fine-turn\n```shell\ncd src/CodeT5\nnohup python -u run_search.py \\\n--do_train  \\\n--do_eval  \\\n--model_type codet5 --data_num -1  \\\n--num_train_epochs 1 --warmup_steps 1000 --learning_rate 3e-5  \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--save_last_checkpoints  \\\n--always_save_model  \\\n--train_batch_size 32  \\\n--eval_batch_size 32  \\\n--max_source_length 200  \\\n--max_target_length 200  \\\n--max_seq_length 200  \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file  \\\n--train_filename rb-file_100_1_train.txt  \\\n--dev_filename valid.txt  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--cuda_id 0  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeT5\npython -u run_search.py \\\n--model_type codet5  \\\n--do_test \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--train_batch_size 64  \\\n--eval_batch_size 64  \\\n--max_seq_length 200  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--criteria last \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--test_filename file_batch_0.txt  \\\n--test_result_dir ../results/codeT5/python/fixed_file_100_train/0_batch_result.txt\n``` \n",
                    "original_header": "CodeT5"
                },
                "confidence": 0.9997499260840078,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\ncd src/stealthiness/defense\n# Spectral Signature\npython spectral_signature.py\n\n# Activation Clustering\npython activation_clustering.py\n```\n \n",
                    "original_header": "Backdoor Defense"
                },
                "confidence": 0.9975536944523158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-22T12:46:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-21T12:07:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 161877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "297": {
        "filename": "diversify-project_sosie-results_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DIVERSIFY-project/sosie-results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-08-26T11:56:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-03-23T08:27:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "298": {
        "filename": "monperrus_replication-package-exhaustive-systematic-review-rickrolling_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/rickrolling",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-11T14:04:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-22T13:30:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "299": {
        "filename": "seers-utd_empirical-study-constraints_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SEERS-UTD/empirical-study-constraints",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-03-12T17:05:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-29T14:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 10501293
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 466365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 55703
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 38011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7651
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5698
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 3262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2960
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 1770
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "OCaml",
                    "name": "OCaml",
                    "type": "Programming_language",
                    "size": 961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Scheme",
                    "name": "Scheme",
                    "type": "Programming_language",
                    "size": 192
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 134
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "300": {
        "filename": "se2p_artifact-iticse2020_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/artifact-iticse2020",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-03T07:36:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-04-14T06:26:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1168365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5503
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "301": {
        "filename": "lesunb_bsn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lesunb/bsn",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-01-14T23:29:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-08T18:36:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 403998
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 36750
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29064
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7245
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 7102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "302": {
        "filename": "profuzzbench_profuzzbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/profuzzbench/profuzzbench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\ngit clone https://github.com/profuzzbench/profuzzbench.git\ncd profuzzbench\nexport PFBENCH=$(pwd)\nexport PATH=$PATH:$PFBENCH/scripts/execution:$PFBENCH/scripts/analysis\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step-0. Set up environmental variables",
                    "parent_header": [
                        "Tutorial - Fuzzing LightFTP server with <a href=\"https://github.com/aflnet/aflnet\">AFLNet</a> and <a href=\"https://github.com/aflnet/aflnwe\">AFLnwe</a>, a network-enabled version of AFL"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
            },
            {
                "result": {
                    "value": "The following folder structure shows all files we have prepared for fuzzing LightFTP server. Please read [our paper](https://arxiv.org/pdf/2101.05102.pdf) to understand the purposes of these files.\n\n```\nsubjects/FTP/LightFTP\n\u251c\u2500\u2500 Dockerfile (required): based on this, a target-specific Docker image is built (See Step-1 in the tutorial)\n\u251c\u2500\u2500 run.sh (required): main script to run experiment inside a container\n\u251c\u2500\u2500 cov_script.sh (required): script to do code coverage analysis\n\u251c\u2500\u2500 clean.sh (optional): script to clean server states before fuzzing to improve the stability\n\u251c\u2500\u2500 fuzzing.patch (optional): code changes needed to improve fuzzing results (e.g., remove randomness)\n\u251c\u2500\u2500 gcov.patch (required): code changes needed to support code coverage analysis (e.g., enable gcov, add a signal handler)\n\u251c\u2500\u2500 ftp.dict (optional): a dictionary containing protocol-specific tokens/keywords to support fuzzing\n\u2514\u2500\u2500 in-ftp (required): a seed corpus capturing sequences of client requests sent to the server under test.\n\u2502   \u2502       To prepare these seeds, please follow the AFLNet tutorial at https://github.com/aflnet/aflnet.\n\u2502   \u2502       Please use \".raw\" extension for all seed inputs.\n\u2502   \u2502\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ftp_requests_full_anonymous.raw\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ftp_requests_full_normal.raw\n\u2514\u2500\u2500 README.md (optional): a target-specific README containing commands to run experiments\n```\nAll the required files (i.e., Dockerfile, run.sh, cov_script.sh, gcov.patch, and the seed corpus) follow some templates so that one can easily follow them to prepare files for a new target.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step-2. Write a Docker file for the new target server and prepare all the subject-specific scripts/files (e.g., target-specific patch, seed corpus)",
                    "parent_header": [
                        "FAQs",
                        "1. How do I extend ProFuzzBench?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nprotocol-fuzzing-benchmark\n\u251c\u2500\u2500 subjects: this folder contains all protocols included in this benchmark and\n\u2502\u00a0\u00a0 \u2502         each protocol may have more than one target server\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 RTSP\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 FTP\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 LightFTP\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 Dockerfile: subject-specific Dockerfile\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 run.sh: (subject-specific) main script to run experiment inside a container\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 cov_script.sh: (subject-specific) script to do code coverage analysis\n\u2502\u00a0\u00a0 \u2502       \u2514\u2500\u2500 other files (e.g., patches, other subject-specific scripts)\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 scripts: this folder contains all scripts to run experiments, collect & analyze results\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 execution\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 profuzzbench_exec_common.sh: main script to spawn containers and run experiments on them\n\u2502\u00a0\u00a0 \u2502   \u2514\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 analysis\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 profuzzbench_generate_csv.sh: this script collect code coverage results from different runs\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 profuzzbench_plot.py: sample script for plotting\n\u2514\u2500\u2500 README.md\n``` \n",
                    "original_header": "Folder structure"
                },
                "confidence": 0.999909437499815,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "ProFuzzBench also includes scripts for running all fuzzers on all targes, with pre-configured parameters. To build all targets for all fuzzers, you can run the script [profuzzbench_build_all.sh](scripts/execution/profuzzbench_build_all.sh). To run the fuzzers, you can use the script [profuzzbench_exec_all.sh](scripts/execution/profuzzbench_exec_all.sh). \n",
                    "original_header": "Utility scripts"
                },
                "confidence": 0.9995844860772981,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To speed-up the build of Docker images, you can pass the option \"-j\" to `make`, using the `MAKE_OPT` environment variable and the `--build-arg` option of `docker build`. Example:\n```\nexport MAKE_OPT=\"-j4\"\ndocker build . -t lightftp --build-arg MAKE_OPT\n```\n \n",
                    "original_header": "Parallel builds"
                },
                "confidence": 0.9999997577227484,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/profuzzbench/profuzzbench/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-01-13T09:58:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T16:22:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 120218
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 43184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6496
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 766
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "303": {
        "filename": "wm-semeru_acer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WM-SEMERU/ACER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This is a Python library that we have yet to (but will soon) package to PyPI. As of right now, develop your generator within this repo, or, just copy the 3 files in `src/` and install the packages in `requirements.txt`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ACER"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wm-semeru/acer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [ ] Develop a Java CHA generator.\n- [ ] Develop a Java RTA generator.\n- [ ] Develop a Java k-CFA generator.\n- [ ] Develop a Python CHA generator that handles `eval()`. \n",
                    "original_header": "Plan"
                },
                "confidence": 0.9991956957121987,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wm-semeru/acer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-26T15:30:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T04:06:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 281743
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 17066
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 8190
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5852
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4277
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "304": {
        "filename": "ananevans_icse2020_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "305": {
        "filename": "dynaroars_neuralsat_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dynaroars/neuralsat",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\nsudo apt-get install libbz2-dev\nsudo apt-get install lzma\nsudo apt-get install liblzma-dev\n```\n\n```bash\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121\n```\n\n```bash\npip install -r reqs.txt \n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/neuralsat-pt201/installation/installation.md"
            },
            {
                "result": {
                    "value": "# NeuralSAT Installation and Usage\n\n> While NeuralSAT can be installed and run on any platforms satisfying its [dependencies](#installation), we mainly develop and test NeuralSAT on Linux.\n\n\n## Content\n\n- ```neuralsat-pt201```: source code\n- ```third_party```: external libraries\n- ```vnncomp_scripts```: scripts for competition\n\n\n## Installation\n\n- [Anaconda](https://www.anaconda.com/) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html)\n- [Gurobi](https://www.gurobi.com/): Gurobi requires a license (a [free academic license](https://www.gurobi.com/downloads/free-academic-license/) is available).\n\n- Remove pre-installed environment \n\n```bash\nconda deactivate; conda env remove --name neuralsat\n```\n\n- Install required packages \n\n```bash\nconda env create -f env.yaml\n```\n\n- Activate `conda` environment\n\n```bash\nconda activate neuralsat\n```\n\n- (Optional) Install specific Pytorch C++/CUDA extensions\n\n```bash\npip install \"third_party/haioc\"\n```\n\n- (Optional) Install `DNNV` for ONNX simplification\n\n```bash\nconda deactivate; conda env remove --name dnnv\nconda env create -f neuralsat-pt201/installation/env_dnnv.yaml\nconda activate dnnv\npip install --no-deps git+https://github.com/dlshriver/DNNV.git@d4f59a01810cf4dac99f8f5e5b9d7a350cbfa8d7#egg=dnnv\n```\n\n## \ud83d\ude80 Usage\n\n```python\nmain.py [-h] --net NET --spec SPEC \n        [--batch BATCH] [--timeout TIMEOUT] [--device {cpu,cuda}] [--verbosity {0,1,2}] \n        [--result_file RESULT_FILE] [--export_cex] \n        [--disable_restart] [--disable_stabilize] \n```\n\n### Options\nUse ```-h``` or ```--help``` to see options that can be passed into **NeuralSAT**. \n\n- `--net`: Path to `ONNX` model.\n- `--spec`: Path to `VNNLIB` specification file.\n- `--batch`: Maximum number of parallel checking branches.\n- `--timeout`: Timeout (in second) for verifying one instance.\n- `--device`: Device to use (either `cpu` or `cuda`).\n- `--verbosity`: Logging options (0: NOTSET, 1: INFO, 2: DEBUG).\n- `--result_file`: File to export execution results (including counter-example if found).\n- `--export_cex`: Enable writing counter-example to `result_file`.\n- `--disable_restart`: disable RESTART heuristic.\n- `--disable_stabilize`: disable STABILIZE.\n\n\n### Examples\n\n- Examples showing **NeuralSAT** verifies properties (i.e., returning `unsat``):\n\n```python\npython3 main.py --net \"example/onnx/mnistfc-medium-net-554.onnx\" --spec \"example/vnnlib/test.vnnlib\"\n# unsat,24.9284\n```\n\n```python\npython3 main.py --net \"example/onnx/cifar10_2_255_simplified.onnx\" --spec \"example/vnnlib/cifar10_spec_idx_4_eps_0.00784_n1.vnnlib\"\n# unsat,17.9806\n```\n\n```python\npython3 main.py --net \"example/onnx/ACASXU_run2a_1_1_batch_2000.onnx\" --spec \"example/vnnlib/prop_6.vnnlib\" --disable_restart\n# unsat,3.0907\n```\n\n```python\npython3 main.py --net \"example/onnx/mnist-net_256x4.onnx\" --spec \"example/vnnlib/prop_1_0.03.vnnlib\"\n# unsat,139.4125\n```\n\n- Examples showing **NeuralSAT** disproves properties (i.e., returning `sat` and counterexample):\n\n```python\npython3 main.py --net \"example/onnx/mnist-net_256x2.onnx\" --spec \"example/vnnlib/prop_1_0.05.vnnlib\"\n# sat,0.7526\n```\n\n```python\npython3 main.py --net \"example/onnx/ACASXU_run2a_1_9_batch_2000.onnx\" --spec \"example/vnnlib/prop_7.vnnlib\" --disable_restart\n# sat,6.1320\n```\n\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/doc/INSTALL.md"
            },
            {
                "result": {
                    "value": "- see [INSTALL.md](./doc/INSTALL.md)\n",
                    "type": "Text_excerpt",
                    "original_header": "INSTALLATION &amp; USAGE",
                    "parent_header": [
                        "NeuralSAT: A DPLL(T) Framework for Verifying Deep Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-11T20:10:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T05:03:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1183113
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 1234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 981
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "306": {
        "filename": "mosabrezaei_test-case-recommendation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mosabrezaei/Test-Case-Recommendation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-10T20:07:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-06T06:24:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4479978
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 629107
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "307": {
        "filename": "ehsanmashhadi_msr2021-programrepair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EhsanMashhadi/MSR2021-ProgramRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://www.buymeacoffee.com/ehsanmashhadi\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a> \n",
                    "original_header": "MSR2021-ProgramRepair"
                },
                "confidence": 0.999999845040731,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ehsanmashhadi/msr2021-programrepair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Note**: If you are facing issues regarding the LFS bandwidth, you can download the dataset from Zenodo: https://zenodo.org/record/6802730. \n",
                    "original_header": "Data"
                },
                "confidence": 0.9998875273691389,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ehsanmashhadi/msr2021-programrepair/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-29T08:32:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-18T05:01:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 41572
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "308": {
        "filename": "julianepa_auv_profeat_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/remaro-network/auv_profeat",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To run the model, [PRISM](https://www.prismmodelchecker.org/) and [ProFeat](https://wwwtcs.inf.tu-dresden.de/ALGI/PUB/ProFeat/doc/index.html) have to be installed. We recommend getting PRISM v4.7 and ProFeat v1.0.2.1 (commit id dfa7f03214bb92e7fd30f1402ff5a19dbdd5929c) from the respective Github repositories, the [PRISM Github repository](https://github.com/prismmodelchecker/prism/tree/v4.7) and the [ProFeat Github repository](https://github.com/pchrszon/profeat).\n\nWhen both PRISM and ProFeat are installed, make them executable from anywhere or put them in the same folder. In the latter case, the commands below have to be run from the directory which includes the executables of PRISM and ProFeat, and the file names have to include the path to these files. Below, we will assume that PRISM and ProFeat are executable from anywhere.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set-up",
                    "parent_header": [
                        "Analysing Self-Adaptive Systems as Software Product Lines"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/julianepa/auv_profeat/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-09T09:39:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-04T10:07:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "309": {
        "filename": "i4soft_droidbugs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/I4Soft/DroidBugs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. ***PRJ_Bug.zip***: the buggy version.\n2. ***PRJ_Bug_appName_version.zip***: A version of PRJ_Bug modified to run in [Astor4Android](https://github.com/kayquesousa/astor4android).\n3. ***PRJ_Fix.zip***: the fixed version.\n4. ***Files_previous***:  the files of the buggy version that were modified by the PRJ_Fix commit.\n5. ***Files_uptaded***: the files modified in the fixed version commit.\n6. ***Test_Suite***:\n\t- ***Test_Cases***: all files with test cases (test suite) for the fixed version.\n\t- ***PRJ_Bug***: reports from test suite execution over the buggy version.\n\t- ***PRJ_Fix***: reports from the test suite execution over fixed version.\n7. **changes.txt**: changes made in PRJ_Bug version to enable its execution in [Astor4Android](https://github.com/kayquesousa/astor4android), resulting in PRJ_Bug_appName_version version.\n8. **diff_lines.txt**: the diff between the buggy and fixed version.\n9. **diff_test.txt**: test cases that changed their results in PRJ_Fix in comparison to PRJ_Bug.\n10. **file_diff.txt**: a list of files modified by PRJ_Fix.\n11. **appName_version.sh**: script to run PRJ_Bug_appName_version in Astor4Android. It is necessary to put the absolute path of PRJ_Bug_appName_version in the script where \u201c$LOCATION\u201d is written. \n",
                    "original_header": "Benchmark's Composition"
                },
                "confidence": 0.9999999991892992,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/i4soft/droidbugs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-10-09T15:21:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T12:11:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 64873280
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4484196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1986286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 1583074
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6586
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "310": {
        "filename": "flowss_how-to-certify-machine-learning-basedsafety-critical-systems-a-systematic-literature-review_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FlowSs/How-to-Certify-Machine-Learning-BasedSafety-critical-Systems-A-Systematic-Literature-Review",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-03T17:17:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-18T12:00:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "311": {
        "filename": "testingautomated-usi_dnn-tip_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/testingautomated-usi/dnn-tip",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\nlayout: page\ntitle: Installation\npermalink: /install/\nhas_children: false\nnav_order: 10\n---\n\n\n## Installation from pypi\n\nFor most applications, the easiest way to install the package is to use pip.\n\n```shell\npip install dnn-tip\n```\n\n## Manual installation\n\nIf you want to change anything in this library, clone the [repo](https://github.com/testingautomated-usi/dnn-tip),\nmake your changes and then install it using\n\n```shell\npip install -e .\n```\n\nIdeally, you want to also run the tests, which needs additional dependencies.\n\n```shell\npip install -e .[test]\n```\nYou can then run the test suite using\n\n```shell\npytest tests\n```\n\nIf you added a nice feature, or fixed a bug, please consider opening a pull request.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/testingautomated-usi/dnn-tip/main/docs/pages/installation.md"
            },
            {
                "result": {
                    "value": "It's as easy as `pip install dnn-tip`.\n\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DNN-TIP: Common Test Input Prioritizers Library"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/testingautomated-usi/dnn-tip/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-05T13:31:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T01:56:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57621
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "312": {
        "filename": "kth_drr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/drr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-04T09:42:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-06T01:20:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1111588237
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 174672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 125869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 99635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 56418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "313": {
        "filename": "huangknipc_apr-survey_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KaiHuangNIPC/APR-Survey",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-18T08:25:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-25T06:19:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59888
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1415
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "314": {
        "filename": "ortegasa_squwals-repo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OrtegaSA/squwals-repo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Open a system's console or an Anaconda Prompt depending on your python installation.\n\nFirst, clone the repository.\n```bash\ngit clone https://github.com/OrtegaSA/squwals-repo\n```\nThis creates a folder called squwals-repo. Change the directory to it.\n```bash\ncd squwals-repo\n```\nInstall the package using pip.\n```bash\npip install .\n```\n\nAlternativelly, you can download the folder squwals and copy it in your python working directory, or in some directory included in PYTHONPATH.\n\n  \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ortegasa/squwals-repo/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-24T16:45:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-19T15:04:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2284986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 50763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "315": {
        "filename": "bdqnghi_treecaps_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bdqnghi/treecaps",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-06T09:50:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T05:50:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 33660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "316": {
        "filename": "yz1019117968_icpc-21-mmtrans_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yz1019117968/ICPC-21-MMTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-15T13:00:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-24T17:34:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 72423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "317": {
        "filename": "ispras_oss-sydr-fuzz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ispras/oss-sydr-fuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Fuzz target for libFuzzer\n* Fuzz target for AFL++\n* Fuzz target for Sydr\n* Target built with llvm-cov\n* Build script\n* Dictionary\n* Initial seed corpus\n* Dockerfile that installs dependencies, builds targets, creates initial corpus,\n  etc.\n* Hybrid fuzzing configuration file for sydr-fuzz\n* Instructions to start hybrid fuzzing \nNOTE: Some listed above files may not be present or can be gathered from\nexternal repositories.\n \n",
                    "original_header": "Project Structure"
                },
                "confidence": 0.9959926247839141,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/oss-sydr-fuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Supported projects are located [here](projects). In addition to C/C++ projects Sydr-Fuzz currently supports:\n* Rust: capstone-rs, image-rs, goblin, libhtp-rs, vector-rs, rust-regex, serde-json, gdb-command;\n* Go: image-go;\n* Python: crunch, h5py, msgspec, pillow, pytorch-py, ruamel-yaml, tensorflow-py, ultrajson, langchain;\n* Java: hsqldb, json-sanitizer;\n* JavaScript: fast-xml-parser, node-xml2js;\n* \u0421#: yamldotnet, cppsharp.\n \n",
                    "original_header": "Supported Open Source Projects"
                },
                "confidence": 0.9979081352541701,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/oss-sydr-fuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-10-11T11:25:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T09:44:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 757708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 337189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 211322
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 143140
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 28150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 11508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4938
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 4792
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 4489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 4097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Meson",
                    "name": "Meson",
                    "type": "Programming_language",
                    "size": 1778
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "318": {
        "filename": "por-se_por-se_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/por-se/por-se",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We recommend building this tool using our [workspace](https://www.github.com/por-se/workspace/). \nAlternatively, you can use the [CAV 2020 artifact](https://doi.org/10.5281/zenodo.5771251).\n \n",
                    "original_header": "Building Instructions"
                },
                "confidence": 0.9615265833970907,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/por-se/por-se/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-20T11:16:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T15:10:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2098950
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1301297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 116497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 92577
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 89241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 37526
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 17212
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "NASL",
                    "name": "NASL",
                    "type": "Programming_language",
                    "size": 16486
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 10517
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 2917
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2810
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2140
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "319": {
        "filename": "fasterxml_smile-format-specification_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FasterXML/smile-format-specification",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-06-29T19:33:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-31T09:10:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "320": {
        "filename": "salesforce_logai_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salesforce/logai",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install LogAI core library using `pip install`:\n\n```shell\n\n# Check out LogAI code repo from Github\ngit clone https://github.com/salesforce/logai.git\ncd logai\n\n# [Optional] Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install LogAI\npip install logai\n\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Quick Install",
                    "parent_header": [
                        "LogAI: A Library for Log Analytics and Intelligence",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salesforce/logai/main/README.md"
            },
            {
                "result": {
                    "value": "LogAI core library is light-weight with limited dependent packages installed. Users can install optional dependencies\nto enable extended functionalities of LogAI.\n\n**Deep Learning Log Analysis**. To conduct deep learning model related tasks and run benchmarking,\nplease install extra requirements by `pip install \"logai[deep-learning]\"`.\n\n**Enable LogAI GUI Portal***. To use LogAI GUI portal, \nplease install extra requirements by `pip install \"logai[gui]\"`.\n\n**LogAI Development**. To contribute to LogAI development, build and test code changes, \nplease install extra requirements by `pip install \"logai[dev]\"`.\n\n**Complete Installation**. you can install the full list of dependencies by `pip install \"logai[all]\"`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Optional Dependencies",
                    "parent_header": [
                        "LogAI: A Library for Log Analytics and Intelligence",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salesforce/logai/main/README.md"
            },
            {
                "result": {
                    "value": "> :warning: You may see `Resource punkt not found` while using LogAI. You can download `punkt`\n> package from NLTK to solve the problem.\n> ```shell\n> python -m nltk.downloader punkt\n> ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Known Issues",
                    "parent_header": [
                        "LogAI: A Library for Log Analytics and Intelligence",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salesforce/logai/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-27T17:42:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T14:27:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 574848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 17304
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2343
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 523
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "321": {
        "filename": "spirals-team_defects4j-repair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/defects4j-repair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Nopol-SMT: 103 bugs repaired with one test-suite adequate patch\n    * Chart: 9 bugs repaired with one test-suite adequate patch\n    * Closure: 56 bugs repaired with one test-suite adequate patch\n    * Lang: 4 bugs repaired with one test-suite adequate patch\n    * Math: 24 bugs repaired with one test-suite adequate patch\n    * Mockito: 2 bugs repaired with one test-suite adequate patch\n    * Time: 8 bugs repaired with one test-suite adequate patch \n* Nopol: 35 bugs with one test-suite adequate patch \n* jGenprog/Astor: 27 bugs  with one test-suite adequate patch\n* jKali: 22 bugs  with one test-suite adequate patch\n* Total: 47/224 bugs (20%) with at least one test-suite adequate patch \n",
                    "original_header": "Repair results"
                },
                "confidence": 0.9972700302087818,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/defects4j-repair/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See https://github.com/Spirals-Team/defects4j-repair/branches for all branches\n \n",
                    "original_header": "Branches for each Defects4j bug"
                },
                "confidence": 0.9916392987638478,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/defects4j-repair/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/Spirals-Team/defects4j-repair/tree/master/src contains scripts we use to run the repair tools on all bugs. \n",
                    "original_header": "Scripts"
                },
                "confidence": 0.9982479761956298,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/defects4j-repair/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-18T17:23:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-14T08:16:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 967553
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 200071
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 33351
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "322": {
        "filename": "zfj1998_so_title_generation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zfj1998/Copying-enhanced-CodeBERT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-07-02T08:22:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-17T02:56:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 108187
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "323": {
        "filename": "logpai_logpub_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/loghub-2.0",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Software systems          | # Annotated Logs (Loghub-2.0) | # Templates  (Loghub-2.0) | # Templates (Loghub-2k) |\n| ------------------------- | ------------------------- | --------------------- | ----------------------- |\n| **Distributed systems**   |                           |                       |                         |\n| Hadoop                    | 179,993                   | 236                   | 114                     |\n| HDFS                      | 11,167,740                | 46                    | 14                      |\n| OpenStack                 | 207,632                   | 48                    | 43                      |\n| Spark                     | 16,075,117                | 236                   | 36                      |\n| Zookeeper                 | 74,273                    | 89                    | 50                      |\n| **Supercomputer systems** |                           |                       |                         |\n| BGL                       | 4,631,261                 | 320                   | 120                     |\n| HPC                       | 429,987                   | 74                    | 46                      |\n| Thunderbird               | 16,601,745                | 1,241                 | 149                     |\n| **Operating systems**     |                           |                       |                         |\n| Linux                     | 23,921                    | 338                   | 118                     |\n| Mac                       | 100,314                   | 626                   | 341                     |\n| **Server application**    |                           |                       |                         |\n| Apache                    | 51,977                    | 29                    | 6                       |\n| OpenSSH                   | 638,946                   | 38                    | 27                      |\n| **Standalone software**   |                           |                       |                         |\n| HealthApp                 | 212,394                   | 156                   | 75                      |\n| Proxifier                 | 21,320                    | 11                    | 8                       |\n| **Average**               | **3,601,187**             | **249.1**             | **81.9**                | \n",
                    "original_header": "Datasets Characteristics"
                },
                "confidence": 0.9350883351064828,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logpub/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you woud like to re-run all parsers using Loghub-2.0, please follow our large-scale benchmarking steps.\n \n",
                    "original_header": "Large-scale benchmarking"
                },
                "confidence": 0.9781101786846768,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logpub/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Run all statistic-based log parsers on Loghub-2k\n```bash\ncd benchmark/\n./run_statistic_2k.sh\n```\n- Run all statistic-based log parsers on Loghub-2.0\n```bash\ncd benchmark/\n./run_statistic_full.sh\n```\n \n",
                    "original_header": "Evaluation of all 15 parsers"
                },
                "confidence": 0.9999705949305031,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logpub/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-23T11:58:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T13:47:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 636188
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 65206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 42826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 8945
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 193
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "324": {
        "filename": "cornejo_fieldmonitoringfeasibility_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ocornejo/fieldmonitoringfeasibility",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-01-27T18:45:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-07-17T07:42:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 168901
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "325": {
        "filename": "ssert-kth_n-eth_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/N-ETH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-28T11:45:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-27T14:40:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 59427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 7962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "326": {
        "filename": "iv4xr-project_jocc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iv4xr-project/jocc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The general steps to do UX testing with JOCC are as follows: \n",
                    "original_header": "UX Testing with OCC"
                },
                "confidence": 0.9180125542288635,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iv4xr-project/jocc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-17T20:32:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-27T17:41:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 32539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "327": {
        "filename": "apcl-research_funcom-useloss_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apcl-research/funcom-useloss",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Please create a directory named outdir with 3 subdirectories named histories, models, and predictions.\n- Please download the model and config file from our [Hugginface profile](https://huggingface.co/apcl/funcom_useloss/tree/main) and put the files in the config directory to your local directory called histories and put the files in funcom-java-long/funcom-java/funcom-python directory to your local directory called models if you want to finetune models with SIMILE or BLEU.\n- Note that you need to put files in config directory to the same directory as the outdir argument in train.py\n- For setting up your environment, run the following command. We recommend you to use virtual environment.\n\n  ```\n  pip install -r requirements.txt\n  ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "code for replication of results for paper \"Semantic Similarity Loss for Neural Source Code Summarization\""
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  ```\n  python3 predict.py {path to your model} --gpu=0 --data={your data path}\n  ```\n  \n  For example, if your model path is outdir/models/transformer-base.h5 and your data path is ./mydata, run the following command.\n  \n  BASH2* \n",
                    "original_header": "Step 2 Predictions"
                },
                "confidence": 0.9992003868439867,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- We provide scripts for calculating the metrics that we report on the paper. The following commands are for BLEU score, METEOR, and USE score respectively.\n  ```\n  python3 bleu.py {path to your preiction file} --data={path to reference file}\n  ```\n  \n  BASH2*\n  \n  BASH3*\n  For example, if we want to compute the Bleu score and the path of the prediction file is outdir/predictions/transformer-base.txt and the reference file is on ./mydata directory, the command will be as follows.\n  \n  BASH4* \n",
                    "original_header": "Step 3 Metrics"
                },
                "confidence": 0.9965860143076513,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-01T19:47:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T17:43:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 348918
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 14579
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "328": {
        "filename": "davidhin_linevd_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/davidhin/linevd",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository provides the code for [LineVD: Statement-level Vulnerability Detection using Graph Neural Networks](https://arxiv.org/pdf/2203.05181.pdf). The environment can be built using [Singularity](https://sylabs.io/singularity/), or by following / following the commands in the Singularity file. To start, clone the repository and navigate to the root directory.\n \n",
                    "original_header": "LineVD"
                },
                "confidence": 0.9999461529385906,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/davidhin/linevd/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Build and initialise environment and download dataset\n```sh\nsudo singularity build main.sif Singularity\nsingularity run main.sif -p initialise\n```\nFeature extraction (Increase NUM_JOBS if running on HPC for speed up)\n```sh\nsingularity exec main.sif python sastvd/scripts/prepare.py\nsingularity exec main.sif python sastvd/scripts/getgraphs.py\n```\nTrain model (Training takes around 1-2 hours using GTX 3060)\n```sh\nsingularity exec --nv main.sif python sastvd/scripts/train_best.py\n```\n \n",
                    "original_header": "Training LineVD from scratch"
                },
                "confidence": 0.9999992237759046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/davidhin/linevd/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-20T03:08:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T14:48:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 234388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Singularity",
                    "name": "Singularity",
                    "type": "Programming_language",
                    "size": 1896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "329": {
        "filename": "khairulislam_predict-code-changes_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/khairulislam/Predict-Code-Changes",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-10-01T15:45:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-02-09T05:20:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 117532
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "330": {
        "filename": "hdi-project_autobazaar_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MLBazaar/AutoBazaar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest and recommended way to install **AutoBazaar** is using\n[pip](https://pip.pypa.io/en/stable/):\n\n```\npip install autobazaar\n```\n\nThis will pull and install the latest stable release from [PyPI](https://pypi.org/).\n\nIf you want to install from source or contribute to the project please read the\n[Contributing Guide](https://MLBazaar.github.io/AutoBazaar/contributing.html#get-started).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install with pip",
                    "parent_header": [
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/autobazaar/master/README.md"
            },
            {
                "result": {
                    "value": "Make sure to have your data prepared in the [Data Format](#data-format) explained above inside\nand uncompressed folder in a filesystem directly accessible by **AutoBazaar**.\n\nIn order to check, whether your dataset is available and ready to use, you can execute\nthe `abz` command in your command line with its `list` subcommand.\nIf your dataset is in a different place than inside a folder called `data` within your\ncurrent working directory, do not forget to add the `-i` argument to your command indicating\nthe path to the folder that contains your dataset.\n\nAssuming that the data is inside a folder called `input` within your current folder,\nyou can run:\n\n```\n$ abz list -i /path/to/your/datasets/folder\n```\n\nThe output should be a table which includes the details of all the datasets found inside\nthe indicated directory:\n\n```\n             data_modality                task_type task_subtype             metric size_human  train_samples\ndataset\n185_baseball  single_table           classification  multi_class            f1Macro       148K           1073\n196_autoMpg   single_table               regression   univariate   meanSquaredError        32K            298\n30_personae           text           classification       binary                 f1       1,4M            116\n32_wikiqa      multi_table           classification       binary                 f1       4,9M          23406\n60_jester     single_table  collaborative_filtering               meanAbsoluteError        44M         880719\n```\n\n**Note:** If you see an error saying that `No matching datasets found`, please review your\ndataset format and make sure to have indicated the right path.\n\nFor the rest of this quickstart, we will be using the `185_baseball` dataset that you can\nfind inside the [input folder](https://github.com/MLBazaar/AutoBazaar/tree/master/input)\ncontained in this repository.\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Prepare your Data",
                    "parent_header": [
                        "Quickstart"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hdi-project/autobazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* License: [MIT](https://github.com/MLBazaar/AutoBazaar/blob/master/LICENSE)\n* Development Status: [Pre-Alpha](https://pypi.org/search/?c=Development+Status+%3A%3A+2+-+Pre-Alpha)\n* Documentation: https://MLBazaar.github.io/AutoBazaar/\n* Homepage: https://github.com/MLBazaar/AutoBazaar\n* Paper: https://arxiv.org/pdf/1905.08942.pdf\n \n",
                    "original_header": "AutoBazaar"
                },
                "confidence": 0.9999942165270265,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/autobazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In this short tutorial we will guide you through a series of steps that will help you getting\nstarted with **AutoBazaar** using its CLI command `abz`. \n",
                    "original_header": "Quickstart"
                },
                "confidence": 0.9866143646789544,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/autobazaar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The output will be a table similar to this one:\n```\n                                          pipeline     score      rank  cv_score   metric data_modality       task_type task_subtype    elapsed  iterations  load_time  trivial_time  fit_time    cv_time error  step\ndataset\n185_baseball  fce28425-e45c-4620-9d3c-d329b8684bea  0.316961  0.682957  0.317043  f1Macro  single_table  classification  multi_class  10.024457         0.0   0.011041      0.026212       NaN        NaN  None  None\n185_baseball  f7428924-79ee-439d-bc32-998a9efea619  0.675132  0.390927  0.609073  f1Macro  single_table  classification  multi_class  21.412262         1.0   0.011041      0.026212   9.99484        NaN  None  None\n185_baseball  397780a5-6bf6-48c9-9a85-06b0d08c5a9d  0.675132  0.357361  0.642639  f1Macro  single_table  classification  multi_class  31.712946         2.0   0.011041      0.026212   9.99484  12.618179  None  None\n```\nAlternatively, a `-r` option can be passed with the name of a CSV file, and the results will\nbe stored there:\n```bash\nabz search 185_baseball -c10,20,30 -b10 -r results.csv\n```\n \n",
                    "original_header": "3. Explore the results"
                },
                "confidence": 0.9999450207563471,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hdi-project/autobazaar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-31T01:36:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T13:46:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 49238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 6975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "331": {
        "filename": "huyuqing_bestconf_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhuyuqing/bestconf",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-01-06T01:17:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-03T13:26:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 216972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2946
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "332": {
        "filename": "hesl-polymtl_benchmark_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HESL-polymtl/benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-23T19:29:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-13T07:26:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 351116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1947
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "333": {
        "filename": "uphf_eapr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/eapr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-13T10:47:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-11-16T07:16:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "334": {
        "filename": "wang-jingyi_ziqian_evaluation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wang-jingyi/Ziqian_evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In the following, we use *crowds* case study with configuration TotalRuns=5,CrowdSize=5 as an example.\n\n  ***model_name***         The name of the system to learn.     *crowds*\n  \n  ***trace_path***         The directory path containing all the system traces.     *./LAR/crowds/TotalRuns=5,CrowdSize=5/paths*\n  \n  ***property_path***      The path to the property to verify.          *./LAR/crowds/TotalRuns=5,CrowdSize=5/input/crowds_learn_1.pctl*\n  \n  ***result_path***        The directory path to store the results.     *./LAR/crowds/TotalRuns=5,CrowdSize=5*\n  \n  ***model***              The model to sample new traces for hypothesis testing.      *./LAR/crowds/TotalRuns=5,CrowdSize=5/input*/crowds.pm\n  \n  ***model_setting***      The model setting to sample new traces for hypothesis testing.   *TotalRuns=5,CrowdSize=5*\n  \n  \n  \nThe options can be left by default with *--alpha=0.05 --beta=0.05, --sigma=0.05 --min_acc=0.8 --max_iter=20 --collect=false --loop=false --delimiter=\" \" --step=1 --length=20000 --epsilon=64 --sampler=prism --random_length=false --random_seed=777*.\n\nTo reproduce *SWaT* case study, the following parameters are different and several options should be turned on.\n\n  ***model***              The model to sample new traces for hypothesis testing.     */path/to/swat/simulator*\n  \n  ***model_setting***      The model setting to sample new traces for hypothesis testing.   *5,1/5,5/10,5 (for config 1/2/3 respectively)*\n  \n  ***--collect***             Whether to collect all or part of the concrete states.     *--collect=true*\n  \n  ***--sampler=<sampler>***   The sampler to sample a new path.     *--sampler=swat*\n  \n  ***--random_length***       Whether the sample length is randmized.     *--random_length=true*\n  \n  ***--random_seed***         The random seed for random generator.     *--random_seed=325965/562483/379824 (for config 1/2/3 respectively)*\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Parameter setting for running <a href=\"https://github.com/wang-jingyi/Ziqian\">LAR</a> tool",
                    "parent_header": [
                        "README",
                        "Guide to reprodue the LAR experiements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/wang-jingyi/ziqian_evaluation/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-07-05T13:05:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-10-05T08:47:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "335": {
        "filename": "sophiehye_selfapr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/SelfAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npython3 3_prepare_test_data.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare a set of evaluation bugs from Defects4J:",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sophiehye/selfapr/main/README.md"
            },
            {
                "result": {
                    "value": "```\npip install transformers\npip install sentencepiece\npython3 4_train.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "We are ready to train the perturbed samples with transformer:Pytorch==1.7.1 and transformers&gt;=4.10.0",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sophiehye/selfapr/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|\tPerturb Actions\t| Explanation |\n|\t---\t|---\t|\n|\tP1 Replace type\t|modify declaring type ... |\n|\tP2 Replace operator\t| modify operator ==, !=, etc|\n|\tP3 replace literal\t| modify literal, \"STRING\", true, false |\n|\tP4 replace constructor\t| modify constructor |\n|\tP5 replace variable\t| modify arguments/swap argumens |\n|\tP6 replace condition expression\t| reduce/expand boolean expression|\n|\tP7 replace invocation\t| modify invocation |\n|\tP8 compound statement\t| compound of rules|\n|\tP9 replace with similarity\t| replace by transplanting a similar donor statement|\n|\tP10 move statement\t| move a later statement before the target statement |\n|\tP11 transplatant statement\t| transplanting a donor statement |\n|\tP12 transplatant condition\t|  wrap target statement with an existing conditional block|\n|\tP13 transplatant a block\t| insert an existing block (if, loop, etc)|\n|\tP14 remove a statement\t| delete statement |\n|\tP15 unwrap a statement\t| unwrap block |\n|\tP16 remove a block\t| remove block | \n",
                    "original_header": "All perturbed rules generated by SelfAPR"
                },
                "confidence": 0.9999902398969833,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sophiehye/selfapr/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-24T05:19:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-08T04:49:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2193023055
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 68452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "336": {
        "filename": "sri-csl_solidity_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SRI-CSL/solidity",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Instructions about how to build and install the Solidity compiler can be\nfound in the [Solidity documentation](https://docs.soliditylang.org/en/latest/installing-solidity.html#building-from-source).\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Build and Install",
                    "parent_header": [
                        "The Solidity Contract-Oriented Programming Language"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sri-csl/solidity/0.7/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Solidity is still under development. Contributions are always welcome!\nPlease follow the\n[Developers Guide](https://docs.soliditylang.org/en/latest/contributing.html)\nif you want to help. \n",
                    "original_header": "Development"
                },
                "confidence": 0.9493430443335046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sri-csl/solidity/0.7/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This is an extended version of the compiler that is able to perform automated formal verification on Solidity code using annotations and modular program verification. For more information on building, installing and examples, see [SOLC-VERIFY-README.md](SOLC-VERIFY-README.md). \n",
                    "original_header": "Formal Verification Extension"
                },
                "confidence": 0.9900360264538864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sri-csl/solidity/0.7/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-17T06:35:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T09:07:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 5807306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 2592775
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 171596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 84833
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 77684
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 59283
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 14708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5018
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 4371
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 2519
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "337": {
        "filename": "spirals-team_coming_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/coming",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Coming is deployed on Maven Central, see [past versions](https://repo1.maven.org/maven2/com/github/spoonlabs/coming/).\nAs of version 1.72 (May 2024), it requires Java 17.\n\nTo build yourself, the procedure is as follows.\n\nAdd a github token in `.m2/settings.xml`.\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>brufulascam</id>\n      <username>yourlogin</username>\n      \n      <password>FOOBAR</password>\n    </server>\n  </servers>\n</settings>\n```\n\n\nInstall a JDK 17 and configure Maven or your IDE to use it.\n\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/\n$ mvn -version\nApache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 17.0.9, vendor: Private Build, runtime: /usr/lib/jvm/java-17-openjdk-amd64\n\n# now installing\n$ mvn install -DskipTests\n```\n\nTests:\n\n```\ngit clone https://github.com/SpoonLabs/repogit4testv0\nmvn test\n```\n\n\n`repogit4testv0` is a GIT repository included inside Coming which is used by the test cases.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Coming"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "value": "\nFor studying only commits which messages include words related to bug fixing (e.g., bug, fix, issue), add the following command.\n\n```\n\n-filter bugfix \n```\n\nThe bugfix keywords are predefined. If you want to use  other keywords, use the `Custom keywords`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Bug fix keywords",
                    "parent_header": [
                        "Coming",
                        "Filtering Commits",
                        "By commit message"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming is a tool for commit analysis in git repositories. \n",
                    "original_header": "Coming"
                },
                "confidence": 0.9599959789662506,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In order to perform an analysis of possible repair tools that may have generated commits use the python script at https://github.com/kth-tcs/defects4j-repair-reloaded/tree/comrepair-coming/. \n",
                    "original_header": "Mode Repairability"
                },
                "confidence": 0.9964233947156539,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming read the input from the folder indicated by the argument `-location`. The kind of input depends on the argument `-input`. \n \n",
                    "original_header": "Input Types"
                },
                "confidence": 0.9268920145664327,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If `-input filespair`, the location argument is supposed to specified in the following format: `-location <source_file_path>:<target_file_path>` \n",
                    "original_header": "filespair"
                },
                "confidence": 0.9783324316147742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### files \nIf `-input files`, the location path should follow the following hierarchy. Note here `-location <location_arg>`.\n```\n<location_arg>\n\u251c\u2500\u2500 <diff_folder>\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 <modif_file>\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 <diff_folder>_<modif_file>_s.java\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 <diff_folder>_<modif_file>_t.java\n```\nIn the above case, the analysis are performed on the revision form `<diff_folder>_<modif_file>_s.java` to `<diff_folder>_<modif_file>_t.java`, where `s` stands for source and `t` stands for target. \n",
                    "original_header": "files"
                },
                "confidence": 0.9993044110650349,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For studying only commits which messages include `[MATH-`, add the following two commands:\n```\n\n-filter keywords filtervalue [MATH- \n\n```\n \n",
                    "original_header": "Custom keywords"
                },
                "confidence": 0.994973291005867,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The argument `-filter withtest` indicates that only commits with at least one modification on test cases are considered.\n \n",
                    "original_header": "By presence of Tests"
                },
                "confidence": 0.9217881708805058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/coming/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-10-01T14:15:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-30T13:11:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 117331202
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "338": {
        "filename": "autopurchase_name_compare_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AutoPurchase/name_compare",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. install namecompare library (by running \"**pip install namecompare**\").\n2. In the head of the python file type \"**import names_matcher**\".\n3. Generate **names_matcher.NamesMatcher** object, set names to compare, and run comparison function (as detailed below)... \n \n\nExample:\n    \n    import names_matcher\n    print(names_matcher.NamesMatcher('FirstLightAFire', 'LightTheFireFirst').ordered_words_match())\n\nOutput:\n\n    name_1: ['first', 'light', 'a', 'fire'], name_2: ['light', 'the', 'fire', 'first']\n    Ratio: 0.4\n    Matches:\n\t    name_1[1:2], name_2[0:1], length: 1, local ratio: 1.0, partial ratio: 0.2:\n\t\t    ['light'] vs. \n\t\t    ['light']\n\t    name_1[3:4], name_2[2:3], length: 1, local ratio: 1.0, partial ratio: 0.2:\n\t\t    ['fire'] vs. \n\t\t    ['fire']\n\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "User Manual",
                    "parent_header": [
                        "names_matcher library"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/autopurchase/name_compare/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Get the both name after dividing to words (depends on *word_separators* value).\n \n",
                    "original_header": "names_matcher.NamesMatcher.*get_words*()"
                },
                "confidence": 0.9109560047460421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/autopurchase/name_compare/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-06T16:21:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-08T14:24:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 155399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "339": {
        "filename": "library-testing_muffin_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/library-testing/Muffin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you don't want to reproduce the experiments, you can directly get the output of E1 in [E1_output.zip](https://drive.google.com/file/d/1_dI0UjHKYosPkrIVC6kQMTB3GkCQHHBc/view?usp=sharing). \n",
                    "original_header": "Libraries"
                },
                "confidence": 0.9828884885616437,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/library-testing/muffin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* **Step 0:** Please install ***nvidia-docker2***. You can install it by following this [document](https://codepyre.com/2019/01/installing-nvidia-docker2-on-ubuntu-18.0.4/).\n* **Step 1:** Clone this repository into `[PATH_TO_MUFFIN]`. If you want to use the last three dataset mentioned above, download and unzip them into `[PATH_TO_MUFFIN]/dataset`.\n   \n   `[PATH_TO_MUFFIN]` is the local path you want to `git clone` this repository into. \n  ```shell\n  docker pull librarytesting/muffin:E1\n  docker run --runtime=nvidia -it -v [PATH_TO_MUFFIN]:/data --name muffin-E1 librarytesting/muffin:E1 /bin/bash\n  ``` \n* **Step 3**: Enter the virtual environment we have set up in the container: \n  ```shell\n  source activate lemon\n  ``` \n",
                    "original_header": "Environment"
                },
                "confidence": 0.9902462257976831,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/library-testing/muffin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A configuration file `testing_config.json` should be provided to flexibly set up testing configuration. Here is an example:\n```json\n{\n    \"debug_mode\": 1,\n    \"dataset_name\": \"mnist\",\n    \"case_num\": 200,\n    \"generate_mode\": \"seq\",\n    \"data_dir\": \"data\",\n    \"timeout\": 300,\n    \"use_heuristic\": 1\n}\n```\n \n",
                    "original_header": "1. Configuration"
                },
                "confidence": 0.9976911404839038,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/library-testing/muffin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* **Dataset:** Execute the following command in `/data/dataset` to preprocess the dataset or downloading them from [Keras API](https://keras.io/api/datasets/) if you want to use existing dataset: \n  ```\n  sqlite3 [DATASET_NAME].db < create_db.sql\n  ``` \n",
                    "original_header": "2. Preprocessing"
                },
                "confidence": 0.9524099078129531,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/library-testing/muffin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-27T06:39:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-09T12:37:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 206394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "340": {
        "filename": "zcyyc_anofusion_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found."
    },
    "341": {
        "filename": "spoonlabs_flacoco_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/flacoco",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "flacoco is currently available through Maven Central and as a SNAPSHOT\n\nYou can use it by installing locally yourself (if you do so, the install version will be `1.0.7-SNAPSHOT`), or by adding flacoco as a maven dependency:\n```bash\n$ mvn install -DskipTests\n```\n```xml\n<dependency>\n    <groupId>com.github.spoonlabs</groupId>\n    <artifactId>flacoco</artifactId>\n    <version>1.0.6</version>\n</dependency>\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "flacoco \u00b7 <a href=\"https://github.com/SpoonLabs/flacoco/actions/workflows/tests.yml\"><img alt=\"tests\" src=\"https://github.com/SpoonLabs/flacoco/actions/workflows/tests.yml/badge.svg\" /></a> <a href=\"https://codecov.io/gh/SpoonLabs/flacoco\"><img alt=\"codecov\" src=\"https://codecov.io/gh/SpoonLabs/flacoco/branch/master/graph/badge.svg?token=7WWFGI1KWW\" /></a> <img alt=\"Supported Platforms\" src=\"https://img.shields.io/badge/platforms-Linux%2C%20macOS%2C%20Windows-blue.svg\" /> <a href=\"https://mavenbadges.herokuapp.com/maven-central/com.github.spoonlabs/flacoco\"><img alt=\"Maven Central\" src=\"https://maven-badges.herokuapp.com/maven-central/com.github.spoonlabs/flacoco/badge.svg\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/spoonlabs/flacoco/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* https://github.com/SpoonLabs/CoCoSpoon/\n* https://github.com/GZoltar/gzoltar/\n* https://github.com/saeg/jaguar\n \n",
                    "original_header": "Related tools"
                },
                "confidence": 0.9999999929047689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spoonlabs/flacoco/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-11T14:59:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T18:24:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 331109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "342": {
        "filename": "kth_styler_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/styler",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-09-04T09:11:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-05T11:41:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 86668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "343": {
        "filename": "assert-kth_n-eth_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/N-ETH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-28T11:45:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-27T14:40:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 59427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 7962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "344": {
        "filename": "uphf_miga_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/migA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, execute `mvn clean -Dmaven.test.skip=true`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "migA"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uphf/miga/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A Tool for analyzing migrations from Java to Kotlin on Git repositories. \n",
                    "original_header": "migA"
                },
                "confidence": 0.9764375198222345,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uphf/miga/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-31T12:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-01-20T09:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "345": {
        "filename": "spirals-team_npefix_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/npefix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Maven-repair is a Maven plugin for bug-fixing, see <https://github.com/Spirals-Team/repairnator/tree/master/maven-repair>\n \n",
                    "original_header": "Using maven-repair"
                },
                "confidence": 0.9996839922292059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/npefix/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Install:\n```\ngit clone https://github.com/Spirals-Team/npefix/\ncd npefix\nmvn install\n``` \n",
                    "original_header": "Command line"
                },
                "confidence": 0.9999999999803464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/npefix/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce the evaluation from the [paper]():\n1. Gets the NPE Dataset: https://github.com/Spirals-Team/npe-dataset\n2. Installs each bug on your system, in order to download the dependencies\n3. Configures the location of the dataset in src/main/resources/config.ini\n4. Creates the jar with all dependencies: `mvn clean compile assembly:single`\n5. Execute `java -jar target/npefix-0.3-jar-with-dependencies.jar` (see the execution usage below)\n \n",
                    "original_header": "Reproduce the Scientific Evaluation"
                },
                "confidence": 0.9999997452326039,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/npefix/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-09-09T15:18:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T10:18:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 570337
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "346": {
        "filename": "ualberta-smr_refactoringawaremerging_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ualberta-smr/RefactoringAwareMergingEvaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project comes with the version of IntelliMerge that we used to run the IntelliMerge replication, \nfound in our fork of IntelliMerge, https://github.com/max-ellis/IntelliMerge.git, at commit `5966f75`.\n \n",
                    "original_header": "Using IntelliMerge"
                },
                "confidence": 0.9998914615308505,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ualberta-smr/refactoringawaremerging/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Edit the configuration tasks to have `:runIde -Pmode=comparison -PdataPath=path \n-PevaluationProject=project`, where path is the path to the cloned test projects\nand project is the test project.\n \n",
                    "original_header": "Edit configuration"
                },
                "confidence": 0.9986477002553387,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ualberta-smr/refactoringawaremerging/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project comes with the versions of IntelliMerge and RefMerge used in the paper. The source code for \nthe version of IntelliMerge we used is the same as that in our IntelliMerge replication.\n If you would like to use a different version of IntelliMerge, build the respective IntelliMerge version \nand copy and paste that version into the lib folder. \nRefMerge's history can be found here: https://github.com/ualberta-smr/RefMerge.git. The\nversion used within this evaluation is release 1.0.0 in commit `adb13ff`.\nIf you would like to use a different version of\nRefMerge, you first need to clone RefMerge. After you clone RefMerge, copy the code in\n`ca.ualberta.cs.smr.refmerge` and replace the code in the `ca.ualberta.cs.smr.refmerge` package within this project (found [here](https://github.com/ualberta-smr/RefactoringAwareMergingEvaluation/tree/master/src/main/java/ca/ualberta/cs/smr/refmerge)). \n### Edit configuration\nEdit the configuration tasks in the IntelliJ IDE under `Run | Edit Configurations` (more information can be found [here](https://www.jetbrains.com/help/idea/run-debug-configuration.html#create-permanent)) to have `:runIde` and include set `-Pmode=` to `comparison`.\nThen, set `-PevaluationProject=` to the project that you want to evaluate on. For example,\nit would look like `-PevaluationProject=error-prone` if you want to evaluate on error-prone.\n \n",
                    "original_header": "Using IntelliMerge and RefMerge"
                },
                "confidence": 0.9783246276577736,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ualberta-smr/refactoringawaremerging/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-11T22:30:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-04T17:30:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 770192
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 179067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "347": {
        "filename": "brittany-reid_nlp2testablecode_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Brittany-Reid/nlp2testablecode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the plugin for development:\n 1. Download and install the Java Development Kit (JDK)\n 2. Download and install Eclipse IDE for RCP and RAP Developers from the Eclipse Project website.\n 3. File -> Import -> Git -> Projects from Git -> Clone URI.\n 4. Copy and paste the .git URI from the NLP2TestableCode GitHub.\n 5. Press Next until you get to the project import wizard. Choose \"Import exisiting Eclipse projects\" and press Next and Finish.\n 6. Download CoreNLP (https://stanfordnlp.github.io/CoreNLP/) and extract into /lib\n 7. Download the SO dataset (http://doi.org/10.5281/zenodo.3752789) and extract into /data\n 8. You can now run the plugin by right-clicking launches/NLP2TestableCode.launch and selecting Run As... > NLP2TestableCode. If you recieve an error about the JRE, open 'Run Configurations...' in the Run menu and Eclipse should automatically update the JRE to your default.\n\nTo install the plugin on your regular Eclipse environment (e.g. for personal use), you will need to package the plugin so it can be installed via the Eclipse Install New Software tool. Since this repository is purely for the development of the tool, there is currently no support in this repository for packaging the plugin for installation.\n",
                    "type": "Text_excerpt",
                    "original_header": "Plugin Installation Instructions:",
                    "parent_header": [
                        "NLP2TestableCode"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/brittany-reid/nlp2testablecode/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You will need to download Stanford CoreNLP (https://stanfordnlp.github.io/CoreNLP/) and extract the folder (stanford-corenlp-full-2018-10-05) into /lib.\n \n",
                    "original_header": "Required Libraries:"
                },
                "confidence": 0.9928222055330609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/brittany-reid/nlp2testablecode/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-15T11:52:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-20T13:14:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 311918
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "348": {
        "filename": "ttn-to-fc_attn-to-fc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Attn-to-FC/Attn-to-FC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-23T15:31:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T15:54:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200076
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "349": {
        "filename": "verified-intelligence_alpha-beta-crown_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Verified-Intelligence/alpha-beta-CROWN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\u03b1,\u03b2-CROWN is tested on Python 3.11 and PyTorch 2.2.1 (lower versions, including Python 3.7 and PyTorch 1.11, may also work). It can be installed\neasily into a conda environment. If you don't have conda, you can install\n[miniconda](https://docs.conda.io/en/latest/miniconda.html).\n\nClone our verifier including the [auto_LiRPA](https://github.com/Verified-Intelligence/auto_LiRPA) submodule:\n```bash\ngit clone --recursive https://github.com/Verified-Intelligence/alpha-beta-CROWN.git\n```\n\nSetup the conda environment:\n```bash\n# Remove the old environment, if necessary.\nconda deactivate; conda env remove --name alpha-beta-crown\n# install all dependents into the alpha-beta-crown environment\nconda env create -f complete_verifier/environment.yaml --name alpha-beta-crown\n# activate the environment\nconda activate alpha-beta-crown\n```\n\nIf you use the CROWN, \u03b1-CROWN and/or \u03b2-CROWN verifiers (which cover the most use\ncases), a Gurobi license is *not needed*.  If you want to use MIP-based\nverification algorithms (which are feasible only for small models), you need to\ninstall a Gurobi license with the `grbgetkey` command.  If you don't have\naccess to a license, by default, the above installation procedure includes a\nfree and restricted license, which is actually sufficient for many relatively\nsmall NNs. If you use the GCP-CROWN verifier, an installation of IBM CPlex\nsolver is required. Instructions to install the CPlex solver can be found\nin the [VNN-COMP benchmark instructions](/complete_verifier/docs/vnn_comp.md#installation)\nor the [GCP-CROWN instructions](https://github.com/tcwangshiqi-columbia/GCP-CROWN).\n\nIf you prefer to install packages manually rather than using a prepared conda\nenvironment, you can refer to this [installation\nscript](/vnncomp_scripts/install_tool_general.sh).\n\nIf you want to run \u03b1,\u03b2-CROWN verifier on the VNN-COMP benchmarks\n(e.g., to make a comparison to a new verifier), you can follow [this\nguide](/complete_verifier/docs/vnn_comp.md).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation and Setup",
                    "parent_header": [
                        "\u03b1,\u03b2-CROWN (alpha-beta-CROWN): A Fast and Scalable Neural Network Verifier with Efficient Bound Propagation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/verified-intelligence/alpha-beta-crown/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<a href=\"https://arxiv.org/pdf/2103.06624.pdf\"><img src=\"https://www.huan-zhang.com/images/upload/alpha-beta-crown/logo_2022.png\" width=\"36%\"></a>\n</p> \n",
                    "original_header": "\u03b1,\u03b2-CROWN (alpha-beta-CROWN): A Fast and Scalable Neural Network Verifier with Efficient Bound Propagation"
                },
                "confidence": 0.9979156459346756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/verified-intelligence/alpha-beta-crown/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n<a href=\"https://arxiv.org/pdf/2103.06624.pdf\"><img src=\"https://www.huan-zhang.com/images/upload/alpha-beta-crown/banner.png\" width=\"100%\"></a>\n</p> \nSee the [Guide on Algorithm\nSelection](/complete_verifier/docs/abcrown_usage.md#guide-on-algorithm-selection)\nto find the most suitable example to get started.\n \n",
                    "original_header": "Supported Features"
                },
                "confidence": 0.9950102631587534,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/verified-intelligence/alpha-beta-crown/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide a unified front-end for the verifier, `abcrown.py`.  All parameters\nfor the verifier are defined in a `yaml` config file. For example, to run\nrobustness verification on a CIFAR-10 ResNet network, you just run:\n```bash\nconda activate alpha-beta-crown  # activate the conda environment\ncd complete_verifier\npython abcrown.py --config exp_configs/tutorial_examples/cifar_resnet_2b.yaml\n```\n \n",
                    "original_header": "Instructions"
                },
                "confidence": 0.9999999983557473,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/verified-intelligence/alpha-beta-crown/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-29T04:26:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T15:44:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1122035
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 17539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 279
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "350": {
        "filename": "martin-wey_metamodel-concepts-bert_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/martin-wey/metamodel-concepts-bert",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-02T10:56:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-02T14:57:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61621
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 10931
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Xtend",
                    "name": "Xtend",
                    "type": "Programming_language",
                    "size": 2492
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "351": {
        "filename": "zju-aces-ise_chatunitest_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ZJU-ACES-ISE/ChatUniTest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-07T07:15:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T08:35:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found."
    },
    "352": {
        "filename": "schibsted_jslt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/schibsted/jslt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To include JSLT in your project, depend on:\n```\n<dependency>\n  <groupId>com.schibsted.spt.data</groupId>\n  <artifactId>jslt</artifactId>\n  <version>0.1.14</version>\n</dependency>\n```\n \nFor more alternatives, see [the\njavadoc](http://javadoc.io/doc/com.schibsted.spt.data/jslt).\n \n",
                    "original_header": "Using the library"
                },
                "confidence": 0.9925167069467828,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run transforms on the command-line, first build with `./gradlew\nclean shadowJar`. Then you can run with:\n```\njava -cp build/libs/*.jar com.schibsted.spt.data.jslt.cli.JSLT transform.jslt input.json\n```\n \n",
                    "original_header": "Command-line"
                },
                "confidence": 0.9999755094418034,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have questions about how to use JSLT, please ask the question\non StackOverflow, with the tag `jslt`. \nIf you have problems, feature requests, or think you found a bug,\nplease open an issue.\n \n",
                    "original_header": "Feedback"
                },
                "confidence": 0.9330638610418092,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build JSLT as a jar file, run `./gradlew jar`. \nTo build a fat jar with all dependencies included, run `./gradlew\nshadowJar`. \n",
                    "original_header": "Building JSLT"
                },
                "confidence": 0.972040656802811,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Developing a language for JSON processing: [video of\ntalk](https://vimeo.com/289470470), [slides\nonly](https://www.slideshare.net/larsga/jslt-json-querying-and-transformation). \n",
                    "original_header": "More information"
                },
                "confidence": 0.9518955080321723,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-11T13:11:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T20:08:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 299113
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2941
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "353": {
        "filename": "softsec-kaist_tiknib_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SoftSec-KAIST/TikNib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We ran all our experiments on a server equipped with four Intel Xeon E7-8867v4\n2.40 GHz CPUs (total 144 cores), 896 GB DDR4 RAM, and 4 TB SSD. We setup Ubuntu\n16.04 with IDA Pro v6.95 on the server. \n",
                    "original_header": "Tested environment"
                },
                "confidence": 0.9994158173858145,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/softsec-kaist/tiknib/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-21T11:07:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-03T10:27:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 196405
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 19824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "354": {
        "filename": "elges_tetraband_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HelgeS/tetraband",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n## Dependencies\n\nTensorflow Object Detection API depends on the following libraries:\n\n*   Protobuf 3.0.0\n*   Python-tk\n*   Pillow 1.0\n*   lxml\n*   tf Slim (which is included in the \"tensorflow/models/research/\" checkout)\n*   Jupyter notebook\n*   Matplotlib\n*   Tensorflow (>=1.9.0)\n*   Cython\n*   contextlib2\n*   cocoapi\n\nFor detailed steps to install Tensorflow, follow the [Tensorflow installation\ninstructions](https://www.tensorflow.org/install/). A typical user can install\nTensorflow using one of the following commands:\n\n``` bash\n# For CPU\npip install tensorflow\n# For GPU\npip install tensorflow-gpu\n```\n\nThe remaining libraries can be installed on Ubuntu 16.04 using via apt-get:\n\n``` bash\nsudo apt-get install protobuf-compiler python-pil python-lxml python-tk\npip install --user Cython\npip install --user contextlib2\npip install --user jupyter\npip install --user matplotlib\n```\n\nAlternatively, users can install dependencies using pip:\n\n``` bash\npip install --user Cython\npip install --user contextlib2\npip install --user pillow\npip install --user lxml\npip install --user jupyter\npip install --user matplotlib\n```\n\n<!-- common_typos_disable -->\n**Note**: sometimes \"sudo apt-get install protobuf-compiler\" will install\nProtobuf 3+ versions for you and some users have issues when using 3.5.\nIf that is your case, try the [manual](#Manual-protobuf-compiler-installation-and-usage) installation.\n\n## COCO API installation\n\nDownload the\n[cocoapi](https://github.com/cocodataset/cocoapi) and\ncopy the pycocotools subfolder to the tensorflow/models/research directory if\nyou are interested in using COCO evaluation metrics. The default metrics are\nbased on those used in Pascal VOC evaluation. To use the COCO object detection\nmetrics add `metrics_set: \"coco_detection_metrics\"` to the `eval_config` message\nin the config file. To use the COCO instance segmentation metrics add\n`metrics_set: \"coco_mask_metrics\"` to the `eval_config` message in the config\nfile.\n\n```bash\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\ncp -r pycocotools <path_to_tensorflow>/models/research/\n```\n\n## Protobuf Compilation\n\nThe Tensorflow Object Detection API uses Protobufs to configure model and\ntraining parameters. Before the framework can be used, the Protobuf libraries\nmust be compiled. This should be done by running the following command from\nthe tensorflow/models/research/ directory:\n\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n**Note**: If you're getting errors while compiling, you might be using an incompatible protobuf compiler. If that's the case, use the following manual installation\n\n## Manual protobuf-compiler installation and usage\n\n**If you are on linux:**\n\nDownload and install the 3.0 release of protoc, then unzip the file.\n\n```bash\n# From tensorflow/models/research/\nwget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nunzip protobuf.zip\n```\n\nRun the compilation process again, but use the downloaded version of protoc\n\n```bash\n# From tensorflow/models/research/\n./bin/protoc object_detection/protos/*.proto --python_out=.\n```\n\n**If you are on MacOS:**\n\nIf you have homebrew, download and install the protobuf with\n```brew install protobuf```\n\nAlternately, run:\n```PROTOC_ZIP=protoc-3.3.0-osx-x86_64.zip\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/$PROTOC_ZIP\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nrm -f $PROTOC_ZIP\n```\n\nRun the compilation process again:\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n## Add Libraries to PYTHONPATH\n\nWhen running locally, the tensorflow/models/research/ and slim directories\nshould be appended to PYTHONPATH. This can be done by running the following from\ntensorflow/models/research/:\n\n\n``` bash\n# From tensorflow/models/research/\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNote: This command needs to run from every new terminal you start. If you wish\nto avoid running this manually, you can add it as a new line to the end of your\n~/.bashrc file, replacing \\`pwd\\` with the absolute path of\ntensorflow/models/research on your system.\n\n# Testing the Installation\n\nYou can test that you have correctly installed the Tensorflow Object Detection\\\nAPI by running the following command:\n\n```bash\npython object_detection/builders/model_builder_test.py\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/g3doc/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These environments can be used by importing the `envs` module and instantiating the wanted configuration:\n```\nimport gym\nimport envs\nenv = gym.make('ImageClassificationEnv-basic-cifar10-v0')\nprint(\"Number of actions: \", env.action_space.n)\nprint(\"Observation space: \", env.observation_space)\nprint(\"Actions: \", env.action_names())\n```\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9581080794724207,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available datasets (will be automatically downloaded): \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9897322357517745,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-13T18:03:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-21T08:03:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3441365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "355": {
        "filename": "jinxhy_smartappattack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jinxhy/SmartAppAttack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In experiments, we use three different TensorFlow official pre-trained models including MobileNetV2, InceptionV3 and ResNet50V2 to build our victim fine-tuned models (i.e., on-device models). All the pre-trained models are trained on the ImageNet dataset of 1.3 million images, these models can effectively serve as generic models of the visual world and are capable of transfer learning.\n- MobileNetV2\n- InceptionV3\n- ResNet50V2\n",
                    "type": "Text_excerpt",
                    "original_header": "Pre-trained models",
                    "parent_header": [
                        "Smart App Attack: Hacking Deep Learning Models in Android Apps",
                        "Evaluation",
                        "Experimental setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jinxhy/smartappattack/main/README.md"
            },
            {
                "result": {
                    "value": "Since most on-device models are commonly used in task domains related to the images, we follow the previous works to select three frequently-used image classification datasets to build the victim fine-tuned models for experiments. The classification tasks associated with these datasets represent typical scenarios developers may face during transfer learning.\n- CIFAR-10\n- GTSRB\n- Oxford Flowers\n",
                    "type": "Text_excerpt",
                    "original_header": "Datasets",
                    "parent_header": [
                        "Smart App Attack: Hacking Deep Learning Models in Android Apps",
                        "Evaluation",
                        "Experimental setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jinxhy/smartappattack/main/README.md"
            },
            {
                "result": {
                    "value": "To evaluate the effectiveness of our attack on two transfer learning approaches (_Feature Extraction_ and _Fine-Tuning_), we unfreeze a different number of the top layers (except for the classifier) of a pre-trained model (e.g., MobileNetV2) and jointly train both the newly-added classifier as well as the last unfreezing layers of the base model to build our victim fine-tuned models. These resulting models are able to cover most tuning strategies.\n- _Feature Extraction_\n- _Fine-Tuning_\n",
                    "type": "Text_excerpt",
                    "original_header": "Transfer learning approaches",
                    "parent_header": [
                        "Smart App Attack: Hacking Deep Learning Models in Android Apps",
                        "Evaluation",
                        "Experimental setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jinxhy/smartappattack/main/README.md"
            },
            {
                "result": {
                    "value": "For the evaluation of our attack effectiveness against different adversarial attacks, we focus on untargeted attacks in the white-box setting as our attack fools fine-tuned models to misclassify targeted images by constructing adversarial examples on known binary adversarial models. Considering a wide range of white-box untargeted attack algorithms have been proposed, it is unfeasible to cover all of them. We thus select three representative attacks including Fast Gradient Sign Method (FGSM), Carlini and Wagner (C&W), and Clipping-Aware Noise (CAN) attacks for experiments as they are either the basis of many powerful attacks or effective in computer vision tasks.\n- FGSM\n- C&W\n- CAN\n",
                    "type": "Text_excerpt",
                    "original_header": "Adversarial attack algorithms",
                    "parent_header": [
                        "Smart App Attack: Hacking Deep Learning Models in Android Apps",
                        "Evaluation",
                        "Experimental setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jinxhy/smartappattack/main/README.md"
            },
            {
                "result": {
                    "value": "- Default Binary Adversarial Model Attack (BAMA), which crafts adversarial images based on a binary model trained on the targeted class (i.e., the class the attacker intends to force the victim model to misclassify) and non-targeted class (i.e., an arbitrary class recognized by the victim model except for the targeted one).\n- Enhanced Binary Adversarial Model Attack (E-BAMA), it is similar to the first setting but substitutes the non-targeted class with the most error-prone class (i.e., the class most likely to be misclassified as the targeted one) during binary model training.\n- Pre-trained Model Attack (PMA), which directly generates adversarial images solely based on the victim model's pre-trained model without taking any other model information into account, i.e., it ignores the structure and parameter information of a victim model.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Baselines",
                    "parent_header": [
                        "Smart App Attack: Hacking Deep Learning Models in Android Apps",
                        "Evaluation",
                        "Experimental setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jinxhy/smartappattack/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-05T05:19:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T06:20:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 36690
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "356": {
        "filename": "mull-project_mull_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mull-project/mull",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For installation and usage please refer to the latest documentation: https://mull.readthedocs.io \n",
                    "original_header": "Mull"
                },
                "confidence": 0.995022842663913,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mull-project/mull/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is the invitation link to the Discord channel: https://discord.gg/Hphp7dW\n \n",
                    "original_header": "Join us in Discord"
                },
                "confidence": 0.9065608786992643,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mull-project/mull/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Copyright (c) 2016-2024 Alex Denisov <alex@lowlevelbits.org> and Stanislav Pankevich <s.pankevich@gmail.com>. See LICENSE for details.\n \n",
                    "original_header": "Copyright"
                },
                "confidence": 0.9053959630260268,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mull-project/mull/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-05-15T19:08:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T15:50:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 629655
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 29826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 25762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 981
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "357": {
        "filename": "lhmtriet_msr2019_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lhmtriet/MSR2019",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Please see the Readme.txt in the Reproduction package folder for more information on how to use the package.\n \n",
                    "original_header": "Automated Software Vulnerability Assessment with Concept Drift"
                },
                "confidence": 0.9991277450964696,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/lhmtriet/msr2019/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-12T13:21:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-04T17:37:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 64817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "358": {
        "filename": "mooselab_suppmaterial-logrepforanomalydetection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mooselab/suppmaterial-LogRepForAnomalyDetection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-21T20:19:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T08:57:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 55615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "359": {
        "filename": "poonlabs_nopol_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/nopol",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-05-15T13:34:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-01T04:19:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1410749
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "360": {
        "filename": "michaelpradel_lexecutor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michaelpradel/LExecutor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Guide\n\nCreate and enter a virtual environment:\n\n```\nvirtualenv -p /usr/bin/python3.8 myenv\nsource myenv/bin/activate\n```\n\nInstall requirements:\n\n```\npip install -r requirements.txt\n```\n\nLocally install the package in development/editable mode:\n\n```\npip install -e ./\n```\n\n# Usage Guide\n\n1. Instrument the Python files that will be LExecuted\n\n2. Run the Python files instrumented in step 1\n\nAs a simple example, consider that the following code is in `./files/file.py`. \n\n```python\nif (not has_min_size(all_data)):\n    raise RuntimeError(\"not enough data\")\n\ntrain_len = round(0.8 * len(all_data))\n\nlogger.info(f\"Extracting training data with {config_str}\")\n\ntrain_data = all_data[0:train_len]\n```\nThen, to *LExecute* the code, do as follows:\n\n1. Instrument the code:\n```\npython -m lexecutor.Instrument --files ./files/file.py\n```\n\n2. Run the instrumented code:\n```\npython ./files/file.py\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "1. Check that your setup meets the [REQUIREMENTS.md](REQUIREMENTS.md).\n2. Follow the installation instructions in [INSTALL.md](INSTALL.md).\n",
                    "type": "Text_excerpt",
                    "original_header": "Getting Started Guide",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the results from the paper, follow these instructions. The results of the following instructions are provided in the [artifact](https://zenodo.org/record/8270900), i.e., you can also inspect them there to skip some of the below steps.\n\nFirst, install LExecutor using the instructions above.\n",
                    "type": "Text_excerpt",
                    "original_header": "Replication Guide",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "To gather a corpus of value-use events for training and evaluating the neural model, we proceed as follows:\n\n1. Set the LExecutor mode to RECORD at `./src/lexecutor/Runtime.py`\n\n2. Make `get_traces.sh` executable:\n```\nchmod +x get_traces.sh\n```\n\n3. For every considered project, execute `get_traces.sh` giving the required arguments, e.g.:\n```\n./get_traces.sh https://github.com/Textualize/rich rich tests\n```\n\n4. Get the path of all the generated traces:\n```\nfind ./data/repos/ -type f -name \"trace_*.h5\" > traces.txt\n```\n\nThe output is stored as follows: the repositories with instrumented files and trace files are stored in `./data/repos`; the instruction ids is stored in `./iids.json`; the trace paths are stored in `./traces.txt`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Value-use events dataset",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Accuracy of the Neural Model (RQ1)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "Our current implementation integrates two pre-trained models, CodeT5 and CodeBERT, which we fine-tune for our prediction task as follows.\n",
                    "type": "Text_excerpt",
                    "original_header": "Model training and validation",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Accuracy of the Neural Model (RQ1)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "1. Create a folder to store the output:\n```\nmkdir ./data/codeT5_models_fine-grained\n```\n\n2. Prepare the dataset:\n```\npython -m lexecutor.predictors.codet5.PrepareData \\\n  --iids iids.json \\\n  --traces traces.txt \\\n  --output_dir ./data/codeT5_models_fine-grained\n```\n\n3. Fine-tune the model:\n```\npython -m lexecutor.predictors.codet5.FineTune \\\n  --train_tensors ./data/codeT5_models_fine-grained/train.pt \\\n  --validate_tensors ./data/codeT5_models_fine-grained/validate.pt \\\n  --output_dir ./data/codeT5_models_fine-grained \\\n  --stats_dir ./data/codeT5_models_fine-grained\n```\n\nThe output, i.e. the tensors, models for every epoch, training loss and validation accuracy, is stored in `./data/codeT5_models_fine-grained`.\n",
                    "type": "Text_excerpt",
                    "original_header": "CodeT5",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Accuracy of the Neural Model (RQ1)",
                        "Model training and validation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "1. Create a folder to store the output:\n```\nmkdir ./data/codeBERT_models_fine-grained\n```\n\n2. Prepare the dataset:\n```\npython -m lexecutor.predictors.codebert.PrepareData \\\n  --iids iids.json \\\n  --traces traces.txt \\\n  --output_dir ./data/codeBERT_models_fine-grained\n```\n\n3. Fine-tune the model:\n```\npython -m lexecutor.predictors.codeBERT.FineTune \\\n  --train_tensors ./data/codeBERT_models_fine-grained/train.pt \\\n  --validate_tensors ./data/codeBERT_models_fine-grained/validate.pt \\\n  --output_dir ./data/codeBERT_models_fine-grained \\\n  --stats_dir ./data/codeBERT_models_fine-grained\n```\n\nThe output, i.e. the tensors, the models for every epoch, training loss and validation accuracy, is stored in `./data/codeBERT_models_fine-grained`.\n\nBy default, we train and use the models based on the fine-grained abstraction of values. To fine-tune the models based on the coarse-grained abstraction of values, set `value_abstraction` to `coarse-grained-deterministic` or `coarse-grained-randomized` in `./src/lexecutor/Hyperparams.py`. Then, replace `fine-grained` by `coarse-grained` in the steps 1-3 above. \n",
                    "type": "Text_excerpt",
                    "original_header": "CodeBERT",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Accuracy of the Neural Model (RQ1)",
                        "Model training and validation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "To gather a dataset of functions extracted from open-source Python projects, we proceed as follows:\n\n1. Make `get_function_bodies_dataset.sh` executable:\n```\nchmod +x get_function_bodies_dataset.sh\n```\n\n2. Execute `get_function_bodies_dataset.sh`:\n```\n./get_function_bodies_dataset.sh\n```\n\nThe output contains two extra versions of each function to fit the considered baseline approaches: 1) for functions that are methods, we wrapp them in a `Wrapper` class, otherwise we would not be able run Pynguin on them; 2) we add a function invocation to each function for them to be executed. This is required to run the code inside each function when running the baseline predictor based on Type4Py.\n\nThe output is stored as follows: the repositories are stored in `./data/repos`; the randomly selected functions are stored in `./popular_projects_snippets_dataset`; the paths to the files in each version of the dataset are stored in `popular_projects_function_bodies_dataset.txt`, `popular_projects_functions_dataset.txt` and `popular_projects_functions_with_invocation_dataset.txt`. Finally, auxiliary information useful to calculate line coverage afterwards are stored in `wrapp_info.csv` and `aux_data_functions_with_invocation_dataset.csv`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Open-source functions",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Effectiveness at Covering Code and Efficiency at Guiding Executions (RQ2 and RQ3)",
                        "Datasets"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "To gather a dataset of code snippets from Stack Overflow, we proceed as follows:\n\n1. Create a folder to store the code snippets:\n```\nmkdir so_snippets_dataset\n```\n\n2. Get the code snippets:\n```\npython get_stackoverflow_snippets_dataset.py --dest_dir so_snippets_dataset\n```\n\n3. Get the path of all the collected snippets:\n```\nfind ./so_snippets_dataset -type f -name \"*.py\" > so_snippets_dataset.txt\n```\n\nThe output is stored as follows: the code snippets from Stack Overflow are stored in `./so_snippets_dataset` and their paths are stored in `so_snippets_dataset.txt`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Stack Overflow snippets",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Effectiveness at Covering Code and Efficiency at Guiding Executions (RQ2 and RQ3)",
                        "Datasets"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "1. Set the dataset under evaluation at `./src/lexecutor/Hyperparams.py`\n\n2. Calculate the total lines in each file on the dataset under evaluation, e.g.:\n```\npython -m lexecutor.evaluation.CountTotalLines --files popular_projects_function_bodies_dataset.txt\n```\n\n3. Instrument the files in the dataset under evaluation, e.g.:\n```\npython -m lexecutor.Instrument --files popular_projects_function_bodies_dataset.txt --iids iids.json\n```\n\n4. Execute each predictor/baseline on the dataset under evaluation as follows:\n\n   1. Set `./src/lexecutor/Runtime.py` to use the desired predictor. Some predictors/baselines require additional steps:\n      - For the predictors based on CodeT5 and CodeBERT, the value abstraction must also be set at `./src/lexecutor/Hyperparams.py`\n      - For the predictor based on Type4Py, make sure that the docker image containing Type4Py's pre-trained model is running according to [this tutorial](https://github.com/saltudelft/type4py/wiki/Type4Py's-Local-Model)\n      - For the Pynguin baseline, execute the following steps:\n           1. Create and enter a virtual environment for Python 3.10 (required by the newest Pynguin version):\n               ```\n               python3.10 -m venv myenv_py3.10\n               source myenv_3.10/bin/activate\n               ```\n\n           2. Generate tests with Pynguin for the extracted functions:\n               ```\n               mkdir pynguin_tests\n               python -m lexecutor.evaluation.RunPynguin --files popular_projects_functions_dataset.txt --dest pynguin_tests\n               ```\n\n           3. Get the path of all the generated tests:\n               ```\n               find ./pynguin_tests -type f -name \"test_*.py\" > pynguin_tests.txt\n               ```\n\n           4. Set the predictor to `AsIs` and the file_type to `TESTE` in `./src/lexecutor/Runtime.py`\n           \n   2. Create a folder to store the log files, e.g.:\n      ```\n      mkdir logs\n      mkdir logs/popular_projects_functions_dataset\n      mkdir logs/popular_projects_functions_dataset/RandomPredictor\n      ```\n\n   3. Execute `RunExperiments.py` with the required arguments, e.g.:\n      ```\n      python -m lexecutor.evaluation.RunExperiments \\\n        --files popular_projects_functions_dataset.txt \\\n        --log_dest_dir logs/popular_projects_functions_dataset/RandomPredictor\n      ```\n\n      For the Pynguin baseline, make sure to include `--tests` and give the path to the generated tests, i.e. `pynguin_tests.txt`, to `--files` when executing `RunExperiments.py`\n\n5. Process and combine the raw data generated:\n   ```\n   python -m lexecutor.evaluation.CombineData\n   ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Data generation",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Effectiveness at Covering Code and Efficiency at Guiding Executions (RQ2 and RQ3)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "The code to get the plots for RQ2 and table content for RQ3 is available at `./src/notebooks/analyze_code_coverage_effectiveness_and_efficiency.ipynb`\n  ",
                    "type": "Text_excerpt",
                    "original_header": "Data analysis and plots generation",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Effectiveness at Covering Code and Efficiency at Guiding Executions (RQ2 and RQ3)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "To gather a corpus of pairs of old + new function from commits, we proceed as follows:\n\n1. Create a folder to store the function pairs for every considered project, e.g.:\n```\nmkdir data/function_pairs && mkdir data/function_pairs/flask\n```\n\n2. For every considered project, execute `FunctionPairExtractor.py` providing the required arguments, e.g.:\n```\npython -m lexecutor.evaluation.FunctionPairExtractor \\\n  --repo data/repos_with_commit_history/flask/ \\\n  --dest data/function_pairs/flask/\n```\n\nThe output, i.e. the function pairs with code that invokes both functions and compares their return values, is stored in `compare.py` files under `data/function_pairs/`\n",
                    "type": "Text_excerpt",
                    "original_header": "Pairs of old + new function from commits dataset",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Using LExecutor to Find Semantics-Changing Commits (RQ4)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            },
            {
                "result": {
                    "value": "1. Instrument the code in the `compare.py` files, e.g.:\n```\npython -m lexecutor.Instrument --files `find data/function_pairs/flask -name compare.py | xargs`\n```\n\n2. Run the instrumented code to compare its runtime behavior, e.g.:\n```\nfor f in `find data/function_pairs/flask -name compare.py | xargs`; do timeout 30 python $f; done > out_flask\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Finding semantics-changing commits",
                    "parent_header": [
                        "LExecutor: Learning-Guided Execution",
                        "Replication Guide",
                        "Using LExecutor to Find Semantics-Changing Commits (RQ4)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/michaelpradel/lexecutor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T06:41:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-09T01:21:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 1013639
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 158505
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "361": {
        "filename": "bigdogmanluo_chatgpt-for-power-system-programming-tasks_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/BigdogManLuo/ChatGPT-for-Power-System-Programming-Tasks",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repository and install the requirements:\n```bash\ngit clone https://github.com/yourusername/ChatGPT-for-Power-System-Programming-Tasks.git\ncd ChatGPT-for-Power-System-Programming-Tasks\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ChatGPT for Power System Programming Tasks",
                        "Getting Started\ud83d\udcbe"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bigdogmanluo/chatgpt-for-power-system-programming-tasks/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-16T10:01:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:30:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 163669
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "362": {
        "filename": "gleisonbt_migrating-to-graphql_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gleisonbt/migrating-to-graphql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-10-23T15:04:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-21T19:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1226936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 151292
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 55141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 10953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 9559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 66
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "363": {
        "filename": "spirals-team_jperturb-experiments_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/correctness-attraction-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the gui on zip:\n```\nmvn exec:java -Dexec.mainClass=\"experiment.Main\" -Dexec.args=\"-s zip -run gui\"\n```\n \n",
                    "original_header": "GUI"
                },
                "confidence": 0.9983629528435878,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/jperturb-experiments/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-03-30T12:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-11-27T21:16:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 483647
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 56382
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48930
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9006
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "364": {
        "filename": "yikun-li_satd-relations_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yikun-li/satd-relations",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The replication package includes both the dataset and the trained SATD relation detector.\n```\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 SATD relation detector\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 satd_relation_detector.py\n\u2514\u2500\u2500 SATD_relation_dataset.csv\n```\n \n",
                    "original_header": "Structure of the Replication Package"
                },
                "confidence": 0.9027878266666862,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yikun-li/satd-relations/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Latest version available on [arXiv](https://arxiv.org/abs/2303.07079) \n",
                    "original_header": "Paper"
                },
                "confidence": 0.9926709977607804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yikun-li/satd-relations/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-13T11:55:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-16T21:43:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4973
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "365": {
        "filename": "spirals-team_repairnator_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eclipse/repairnator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See <https://github.com/eclipse/repairnator/blob/master/doc/media.md>.\n \n",
                    "original_header": "Media coverage"
                },
                "confidence": 0.9998940345201542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/repairnator/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Maven releases: https://search.maven.org/search?q=repairnator\n* DockerHub releases: https://hub.docker.com/r/repairnator/\n \n",
                    "original_header": "Releases"
                },
                "confidence": 0.9999942751464507,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/repairnator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-12-21T16:12:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T11:23:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1570691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 92919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 42273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 33046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Sass",
                    "name": "Sass",
                    "type": "Programming_language",
                    "size": 18269
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 1538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "366": {
        "filename": "fsoft-ai4code_thevault_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FSoft-AI4Code/TheVault",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We seperated the source code into multiple steps (coresponde for each process). Or you can run the full pipeline follow [this tutorial](#processing-custom-dataset). \n",
                    "original_header": "Processing Pipeline"
                },
                "confidence": 0.948388590218904,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/fsoft-ai4code/thevault/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-27T09:12:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T02:03:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 335170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1393
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "367": {
        "filename": "deepsoftwareanalytics_codesumevaluation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DeepSoftwareAnalytics/CodeSumEvaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These raw or processed datasets can be downloaded from [here](https://figshare.com/s/fe32740133b33d719ab5) \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9800379495525618,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/deepsoftwareanalytics/codesumevaluation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    USAGE:\n    \n        cd codepreprocessing/\n        python preprocess.py -h [-OPTIONS...]\n    \n    OPTIONS:\n    \n          -h, --help            show this help message and exit\n          -data_filename DATA_FILENAME\n                                The path of raw dataset\n          -java_files_dir JAVA_FILES_DIR\n                                The directory to save extracted Java file\n          -output_dir OUTPUT_DIR\n                                The directory to save processed files\n          -djl                  Parse source code using javalang\n          -dfp                  Filter punctuation in code tokens\n          -dsi                  Split identifiers according to camelCase and\n                                snake_case\n          -dlc                  Lowercase code tokens\n          -dr                   Replace string and number witt generic symbols\n                                <STRING> and <NUM> in code tokens\n          -cfp                  Filter punctuation in summaries\n          -csi                  Split summary token according to camelCase and\n                                snake_case\n          -clc                  Lowercase summary tokens\n          -sbt_type {1,2}       1\uff1aSBT_AO; 2:SBT \n    \n    DEFAULTS:\n    \n       - If not specified, the default [`data_filename'] is [`original/data.pkl`]\n       - If not specified, the default [`java_files_dir'] is [`./java_files`]\n       - If not specified, the default [`output_dir'] is [`./processed`]\n       - If not specified, the default [-djl], [-dfp], [-dsi], [-dlc], [-dr], [-cfp], [-csi] and [-clc] are False\n       - If not specified, the default [`sbt_type'] is [`2`]\n       \n       \n    EXAMPLES:\n    \n        python preprocess.py -djl\n        \n            This example will use javalang to tokenize the all Java methods.\n    \n        python preprocess.py -djl -dsi -dlc \n        \n            This example will use javalang to tokenize all Java methods.\n            Then split identifiers according to camelCase and snake_case and lowercase them.\n            \n    NOTES:\n        \n       - data.pkl saves a dict. \n       The keys  are ['train', 'test', 'val']\n       The values are {fid:item}. item is {\"code\":\"xxx\", \"summary\":\"xxx\"}\n       - The tools are based on python3\n       - The packages \"spiral\" and \"javalang\" are needed. You can install them by:\n            pip install git+https://github.com/casics/spiral.git\n            pip install  javalang==0.12.0\n      \n \n",
                    "original_header": "Data Pre-processing"
                },
                "confidence": 0.9999858462360176,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/deepsoftwareanalytics/codesumevaluation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|   Models     | Source  |          \n|:-------      |:----------|\n|   Codenn     |   https://github.com/sriniiyer/codenn        |  \n|   Deepcom    |   ./Deepcom_Reimplement        |  \n|   Astattgru  |   https://github.com/mcmillco/funcom         |  \n|   Rencos     |   https://github.com/zhangj111/rencos        |  \n|   NCS        |   https://github.com/wasiahmad/NeuralCodeSum |  \n \n",
                    "original_header": "Baselines"
                },
                "confidence": 0.9999999999953104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/deepsoftwareanalytics/codesumevaluation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n    USAGE:\n    \n        cd metric\n        python evaluate.py \n    \n    OPTIONS:\n    \n        --refs_filename  The path of the reference file\n        --preds_filename The path of the predicted file\n        \n    DEFAULTS:\n        - If not specified, the default [`refs_filename'] is [`test/test.gold`] \n    EXAMPLES:\n        python evaluate.py \n        \n        This example will calculate the six bleu variants scores between [`test/test.gold`] and [`test/test.pred`]\n        output:\n        \n        +-----------+---------+---------+---------+----------+---------+\n        | BLEU-DCOM | BLEU-FC | BLEU-DC | BLEU-CN | BLEU-NCS | BLEU-RC |\n        +-----------+---------+---------+---------+----------+---------+\n        |   18.94   | 18.3675 | 21.8686 | 27.9888 | 28.4195  | 18.9404 |\n        +-----------+---------+---------+---------+----------+---------+\n        \n        \n    NOTES:\n        - The tools are based on python3\n        - The packages \"nltk\"(3.6.1 or newer, \"numpy\" and \"prettytable\" are needed. You can install them by:\n            pip install nltk==3.6.1 numpy  prettytable==2.1.0 \n",
                    "original_header": "Evaluated Metric"
                },
                "confidence": 0.9632381224804909,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/deepsoftwareanalytics/codesumevaluation/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "        .\n        \u251c\u2500\u2500 RQ1\n        \u2502         \u251c\u2500\u2500 calculate_correlation.py\n        \u2502         \u251c\u2500\u2500 cal_human_agreement.py\n        \u2502         \u251c\u2500\u2500 correlatio_coefficient_log\n        \u2502         \u251c\u2500\u2500 human_aggrement_log\n        \u2502         \u251c\u2500\u2500 human_evaluation.xlsx\n        \u2502         \u251c\u2500\u2500 README.md\n        \u2502         \u251c\u2500\u2500 RQ1.ipynb\n        \u2502         \u251c\u2500\u2500 score.xlsx\n        \u2502         \u251c\u2500\u2500 TLC\n        \u2502         \u2502         \u251c\u2500\u2500 astattgru\n        \u2502         \u2502         \u2502         \u2514\u2500\u2500 test.pred\n        \u2502         \u2502         \u251c\u2500\u2500 codenn\n        \u2502         \u2502         \u2502         \u2514\u2500\u2500 test.pred\n        \u2502         \u2502         \u251c\u2500\u2500 deepcom\n        \u2502         \u2502         \u2502         \u2514\u2500\u2500 test.pred\n        \u2502         \u2502         \u251c\u2500\u2500 ncs\n        \u2502         \u2502         \u2502         \u2514\u2500\u2500 test.pred\n        \u2502         \u2502         \u251c\u2500\u2500 rencos\n        \u2502         \u2502         \u2502         \u2514\u2500\u2500 test.pred\n        \u2502         \u2502         \u2514\u2500\u2500 test.gold\n        \u2502         \u2514\u2500\u2500 TLC_dedup\n        \u2502             \u251c\u2500\u2500 astattgru\n        \u2502             \u2502         \u2514\u2500\u2500 test.pred\n        \u2502             \u251c\u2500\u2500 codenn\n        \u2502             \u2502         \u2514\u2500\u2500 test.pred\n        \u2502             \u251c\u2500\u2500 deepcom\n        \u2502             \u2502         \u2514\u2500\u2500 test.pred\n        \u2502             \u251c\u2500\u2500 ncs\n        \u2502             \u2502         \u2514\u2500\u2500 test.pred\n        \u2502             \u251c\u2500\u2500 rencos\n        \u2502             \u2502         \u2514\u2500\u2500 test.pred\n        \u2502             \u2514\u2500\u2500 test.gold\n        ..... \n",
                    "original_header": "Predicted Logs"
                },
                "confidence": 0.9965764813818175,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/deepsoftwareanalytics/codesumevaluation/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-07T05:39:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-30T16:33:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 182689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 147798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3199
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "368": {
        "filename": "arise-lab_concord_issta_23_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/CONCORD_ISSTA_23",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\nconda create -n concord Python=3.8.12;\nconda activate concord;\n\n# install torch\nconda install pytorch==1.10.1 torchvision==0.11.2 torchaudio==0.10.1 cudatoolkit=11.3 -c pytorch -c conda-forge;\n\n# install apex\ngit clone https://github.com/NVIDIA/apex.git;\ncd apex/;\ngit checkout feae3851a5449e092202a1c692d01e0124f977e4;\npip install -v --disable-pip-version-check --no-cache-dir ./;\ncd ../\n\n# install pip packages\ncd CONCORD_ISSTA23;\npip install -r requirements.txt;\nexport PYTHONPATH=$(pwd);\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "CONCORD_ISSTA23"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/arise-lab/concord_issta_23/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note that `process_code.py` script is just to illustrate the basic data processing steps using CodeXGLUE raw data; you may need to customize the script for your specific goal. \n",
                    "original_header": "Data Pre-processing"
                },
                "confidence": 0.9971173304955788,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/arise-lab/concord_issta_23/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-29T22:16:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T07:41:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 131648
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 302
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    },
    "369": {
        "filename": "indigo-dc_udocker_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/indigo-dc/udocker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation and configuration manual\n\nIn most cases the end user can download and execute udocker without\nsystem administrator intervention. udocker itself is written in Python, but\nalso uses external binaries and libraries to provide a chroot like\nenvironment where containers are executed in user space. These tools do not\nrequire any privileges and constitute the udocker tools and libraries for\nengines that is downloaded and installed by udocker itself.\n\nRedistribution, commercial use and code changes must regard all licenses\nshipped with udocker. For more information see\n[section 6 External tools and libraries](#6-external-tools-and-libraries).\n\n## 1. Dependencies\n\nThe udocker dependencies are minimal and should be supported by most Linux installations.\nudocker requires:\n\n* Python 3 or alternatively Python >= 2.7\n* pycurl or alternatively the curl command\n* python hashlib or alternatively the openssl command\n* tar\n* find\n* chmod\n* chgrp\n* ldconfig (only used by the Fn execution modes)\n\n## 2. Installation\n\n### 2.1. Install from a released version\n\nDownload a release tarball from <https://github.com/indigo-dc/udocker/releases>:\n\n```bash\nwget https://github.com/indigo-dc/udocker/releases/download/1.3.17/udocker-1.3.17.tar.gz\ntar zxvf udocker-1.3.17.tar.gz\nexport PATH=`pwd`/udocker-1.3.17/udocker:$PATH\n```\n\nAlternatively use `curl` instead of `wget` as follows:\n\n```bash\ncurl -L https://github.com/indigo-dc/udocker/releases/download/1.3.17/udocker-1.3.17.tar.gz \\\n  > udocker-1.3.17.tar.gz\ntar zxvf udocker-1.3.17.tar.gz\nexport PATH=`pwd`/udocker-1.3.17/udocker:$PATH\n```\n\nudocker executes containers using external tools and libraries that\nare enhanced and packaged for use with udocker. For more information see\n[section 6 External tools and libraries](#6-external-tools-and-libraries).\nTherefore to complete the installation invoke `udocker install` to download\nand install the required tools and libraries.\n\n```bash\nudocker install\n```\n\n### 2.2. Install from the GitHub repositories\n\nTo install the latest stable code from the github `master` branch:\n\n```bash\ngit clone --depth=1 https://github.com/indigo-dc/udocker.git\n(cd udocker/udocker; ln -s maincmd.py udocker)\nexport PATH=`pwd`/udocker/udocker:$PATH\n```\n\nAlternatively, install the latest development code from the github `dev-v1.4` branch:\n\n```bash\ngit clone -b dev-v1.4 --depth=1 https://github.com/indigo-dc/udocker.git\n(cd udocker/udocker; ln -s maincmd.py udocker)\nexport PATH=`pwd`/udocker/udocker:$PATH\n```\n\nAlternatively, install the latest development code from the github `devel3` branch:\n\n```bash\ngit clone -b devel3 --depth=1 https://github.com/indigo-dc/udocker.git\n(cd udocker/udocker; ln -s maincmd.py udocker)\nexport PATH=`pwd`/udocker/udocker:$PATH\n```\n\nudocker executes containers using external tools and libraries that\nare enhanced and packaged for use with udocker. For more information see\n[section 6 External tools and libraries](#6-external-tools-and-libraries).\nTherefore to complete the installation invoke `udocker install` to download\nand install the required tools and libraries.\n\n```bash\nudocker install\n```\n\n### 2.3. Install from PyPI using pip\n\nFor installation with pip it is advisable to setup a Python3 virtual environment\nbefore proceeding, see\n[Creating a virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment).\n\n```bash\npython3 -m venv udockervenv\nsource udockervenv/bin/activate\npip install udocker\n```\n\nThe udocker command will be `udockervenv/bin/udocker`.\n\nudocker executes containers using external tools and libraries that\nare enhanced and packaged for use with udocker. For more information see\n[section 6 External tools and libraries](#6-external-tools-and-libraries).\nTherefore to complete the installation invoke `udocker install` to download\nand install the required tools and libraries.\n\n```bash\nudocker install\n```\n\n### 2.4. Install without outbound network access\n\nWhen the installation is attempted without having outbound network connectivity,\nthe installation of the binary tools and libraries with `udocker install` will\nfail the download step. The solution is to fetch the the tarball in advance\nand then install the tools and libraries directly from the tarball file.\n\nThe tarballs containing the tools and libraries are available at <https://github.com/jorge-lip/udocker-builds>.\n\nFirst, download a tarball file using:\n\n```bash\ncurl -L https://github.com/jorge-lip/udocker-builds/raw/master/tarballs/udocker-englib-1.2.8.tar.gz > udocker-englib-1.2.8.tar.gz\n```\n\nSecond, transfer the udocker code plus the tarball containing the tools and\nlibraries to the target destination host.\n\nFinally perform the `udocker install` step using the transferred tarball file.\n\n```bash\nexport UDOCKER_TARBALL=udocker-englib-1.2.8.tar.gz\nudocker install\n```\n\nThe environment variable `UDOCKER_TARBALL` can also point to an URL to fetch\nthe tarball from a specific or alternate location. To fetch from multiple\npossible locations for redundancy the environment variable `UDOCKER_TARBALL`\ncan contain multiple URLs separated by a blank.\n\n```bash\nexport UDOCKER_TARBALL=\"https://... https://... http://...\"\nudocker install\n```\n\n### 2.5. Force the re-installation of the tools and libraries\n\nTo force download and re-installation of the udocker tools and libraries.\nInvoke `udocker install` with the flag `--force`:\n\n```bash\nudocker install --force\n```\n\n## 3. Configuration\n\nThe configuration of udocker has the following hierarchy:\n\n1. The default configuration options are set in the `conf` dictionary in the `Config` class.\n2. If a configuration file is present ([section 4. Configuration files](#4-configuration-files)),\n   it will override 1.\n3. If environment variables are set ([section 5. Environment variables](#5-environment-variables)),\n   they will override 2.\n4. The presence of general udocker command line options, will override 3.\n\n### 3.1. Directories\n\nWith the default configuration, udocker creates files and subdirectories under\n`$HOME/.udocker` these are:\n\n* `doc`: documentation and licenses.\n* `bin`: executables to support the execution engines.\n* `lib`: libraries, namely the fakechroot libraries to support the **F** execution mode.\n* `repos`: container image repositories.\n* `layers`: the layers and metadata for the container images.\n* `containers`: created containers.\n* `keystore.github`: authentication to access repositories (created on demand).\n\nBoth installed files, as well as the containers to be downloaded or created\nwith udocker, will be installed by default under `$HOME/.udocker`.\n\nA default configuration file is available at\n[udocker.conf](https://github.com/indigo-dc/udocker/blob/master/etc/udocker.conf)\nit can be copied to your udocker directory as `$HOME/.udocker/udocker.conf` and\ncustomized.\n\n## 4. Configuration files\n\nThe configuration files allow overriding of the udocker `Config` class\n`conf` dictionary. Example of the `udocker.conf` syntax:\n\n```ini\ndockerio_registry_url = \"https://myregistry.mydomain:5000\"\nhttp_insecure = True\nverbose_level = 5\n```\n\nudocker loads the following configuration files if they are present:\n\n1. `/etc/udocker.conf`\n2. `$HOME/.udocker/udocker.conf`: overrides the options set in 1.\n3. `$UDOCKER_DIR/udocker.conf` (if different from the above): overrides the options set in 2.\n4. Configuration file set with the general CLI option `--config=`: overrides the options set in 3.\n\n## 5. Environment variables\n\nThe following environment variables can be used to customize the installation.\nThe location of the udocker directories can be changed via the environment\nvariables:\n\n* `UDOCKER_DIR`: root directory of udocker usually $HOME/.udocker\n* `UDOCKER_BIN`: location of udocker related executables\n* `UDOCKER_LIB`: location of udocker related libraries\n* `UDOCKER_DOC`: location of documentation and licenses\n* `UDOCKER_REPOS` images metadata and links to layers\n* `UDOCKER_LAYERS`: the common location for image layers data\n* `UDOCKER_CONTAINERS`: location of container directory trees (not images)\n* `UDOCKER_TMP`: location of temporary directory\n* `UDOCKER_KEYSTORE`: location of keystore for login/logout credentials\n* `UDOCKER_TARBALL`: location of installation tarball (file of URL)\n* `UDOCKER_NOSYSCONF`: do not read system wide config files in /etc\n\nThe Docker index and registry can be overridden via the environment variables.\n\n* `UDOCKER_INDEX=https://...`\n* `UDOCKER_REGISTRY=https://...`\n\nThe verbosity level of udocker can be enforced. Removing banners and most\nmessages can be achieved by executing with `UDOCKER_LOGLEVEL=2`.\n\n* `UDOCKER_LOGLEVEL`: set verbosity level from 0 to 5 (MIN to MAX verbosity)\n\nForcing the use of a given curl executable instead of pycurl can be\nspecified with:\n\n* `UDOCKER_USE_CURL_EXECUTABLE`: pathname to the location of curl executable\n\nThe fakechroot execution modes (Fn modes), the translation of symbolic links\nto the actual links can be controlled by the environment variable\n`UDOCKER_FAKECHROOT_EXPAND_SYMLINKS`. The default value is\n`none` which will select automatically the mode to be used, `false` if mounts are\nnot performed or if the mount points pathname for the host and container\nare equal (e.g `-v /home:/home`), `true` otherwise (e.g `-v /data:/home`).\n\n* `UDOCKER_FAKECHROOT_EXPAND_SYMLINKS`: true, false, none\n\nThe location of some executables used by the execution modes can be enforced with\nthe environment variables described below together with the default behavior.\nA value of `UDOCKER` will force the usage of the executables provided by the\nudocker installation.\n\nA full pathname can be used to force selection of a specific executable (or library)\nfrom the host or from the udocker installation.\n\n* `UDOCKER_USE_PROOT_EXECUTABLE`: path to proot, default is proot from udocker.\n* `UDOCKER_USE_RUNC_EXECUTABLE`: path to runc, default is search the host and\n  if not found use runc from udocker.\n* `UDOCKER_USE_SINGULARITY_EXECUTABLE`: path to singularity, default is search\n  the host.\n* `UDOCKER_FAKECHROOT_SO`: path to a fakechroot library, default is search\n  in udocker under `$HOME/.udocker/lib`.\n* `UDOCKER_DEFAULT_EXECUTION_MODE`: default execution mode can be P1, P2, F1,\n  S1, R1, R2 or R3.\n\nSeveral executables and libraries are shipped with udocker. For instance\nthe executable for the Rn modes can be selected to be either `runc` or\n`crun`. This can be accomplished by setting `UDOCKER_USE_RUNC_EXECUTABLE`\nto the path of the desired executable. If `runsc` is available in the\nhost it can also be selected in this manner.\n\n```\n# Forcing the use of crun instead of runc\nexport UDOCKER_USE_RUNC_EXECUTABLE=$HOME/.udocker/bin/crun-x86_64\nexport UDOCKER_DEFAULT_EXECUTION_MODE=R1\nudocker run <mycontainerid>\n```\n\n## 6. External tools and libraries\n\n### 6.1. Source code repositories\n\nudocker uses external tools and libraries to execute the created containers.\nThe source code for the udocker tools and libraries is taken from several repositories.\nThe **F** modes need heavily modified Fakechroot libraries and also a modified Patchelf\nboth specifically improved to work with udocker. The Fakechroot for musl is a port\nof the Fakechroot library for the musl libc performed by the udocker development team.\nThe **P** modes need a modified PRoot that includes fixes and enhancements to work with\nudocker. The **R** modes use the original runc and crun software with small changes for\nstatic compilation. The following table highlights the repositories used by udocker\ncontaining the modified source code and the original repositories.\n\n| Mode  | Engine           | Repository used by udocker                                 | Original repository\n|-------|:-----------------|:-----------------------------------------------------------|:-----------------------------------------\n| **P** | PRoot            | <https://github.com/jorge-lip/proot-udocker>               | <https://github.com/proot-me/proot>\n| **F** | Fakechroot glibc | <https://github.com/jorge-lip/libfakechroot-glibc-udocker> | <https://github.com/dex4er/fakechroot>\n| **F** | Fakechroot musl  | <https://github.com/jorge-lip/libfakechroot-musl-udocker>  | <https://github.com/dex4er/fakechroot>\n| **F** | Patchelf         | <https://github.com/jorge-lip/patchelf-udocker>            | <https://github.com/NixOS/patchelf>\n| **R** | runc             | THE ORIGINAL REPOSITORY IS USED                            | <https://github.com/opencontainers/runc>\n| **R** | crun             | THE ORIGINAL REPOSITORY IS USED                            | <https://github.com/containers/crun>\n\n### 6.2. Software Licenses\n\nRedistribution, commercial use and code changes must regard all licenses shipped with udocker.\nThese include the [udocker license](https://github.com/indigo-dc/udocker/blob/master/LICENSE)\nand the individual licenses of the external tools and libraries packaged for use with udocker.\n\n| Mode  | Engine           | License\n|-------|:-----------------|:----------------------------------------------------------------------------\n| **P** | PRoot            | [GPL v2](https://github.com/jorge-lip/proot-udocker/blob/master/COPYING)\n| **F** | Fakechroot glibc | [LGPL v2.1](https://github.com/jorge-lip/libfakechroot-glibc-udocker/blob/master/LICENSE)\n| **F** | Fakechroot musl  | [LGPL v2.1](https://github.com/jorge-lip/libfakechroot-musl-udocker/blob/master/LICENSE)\n| **F** | Patchelf         | [GPL v3](https://github.com/jorge-lip/patchelf-udocker/blob/master/COPYING)\n| **R** | runc             | [Apache v2.0](https://github.com/opencontainers/runc/blob/master/LICENSE)\n| **R** | crun             | [GPL v2](https://github.com/containers/crun/blob/master/COPYING)\n\n### 6.3. Binaries\n\nAs mentioned in the previous sections the compiled binaries can be installed\nwith `udocker install`. Optionally they can be downloaded from the repository\ncontaining the binary builds at: <https://github.com/jorge-lip/udocker-builds>\n\nThe executables are provided statically compiled for use across systems.\nThe shared libraries that support the **F** modes need to match the libc\nwithin the container and are provided for several Linux distributions.\nSee `$HOME/.udocker/lib` for the supported distributions and corresponding\nversions. The tools are also delivered for several architectures.\n\n| Mode  | Supported architecture                       |\n|-------|:---------------------------------------------|\n| **P** | x86_64, i386, aarch64 and arm                |\n| **F** | x86_64, aarch64, ppc64le                     |\n| **R** | x86_64  aarch64                              |\n| **S** | uses the binaries present in the host system |\n\n### 6.3. Compiling\n\nudocker already provides executables and libraries for the engines. These\nare statically compiled to be used across different Linux distributions.\nIn some cases these executables may not work and may require recompilation.\nUse the repositories in section 6.2 if you which to compile the executables\nor libraries. Notice that the git repositories that are specific of udocker\nhave branches or tags like `UDOCKER-x` where `x` is a number. Use the branch\nor tag with the highest number.\n\nA notable case are the fakechroot libraries used in the Fn modes that need\nto match the libc in the container. This means that a libfakechroot.so must\nbe produced for each different distribution release and intended architecture.\nTwo implementations of the `libc` are supported `glibc` and `musl`, choose\nthe one that matches the distribution inside the container. Once compiled the\nselection of the library can be forced by setting the environment variable\n`UDOCKER_FAKECHROOT_SO`.\n\n```\nudocker setup --execmode=F3 <mycontainerid>\nUDOCKER_FAKECHROOT_SO=$HOME/mylibfakechroot.so  udocker run <mycontainerid>\n```\n\nThe latest binary tarball can be produced from the source code using:\n\n```bash\ngit clone -b devel3 https://github.com/indigo-dc/udocker\ncd udocker/utils\n./build_tarball.sh\n```\n\n## 7. Central installation\n\nudocker can be installed and made available system wide from a central location\nsuch as a shared read-only directory tree or file-system. The following guidelines\nshould be followed when installing udocker in a central shared location or in a\nread only file system.\n\n### 7.1. Install executables and libraries centrally\n\nThe executables and libraries can be installed with any of the methods described\nin section 2 of this manual. The directory tree should contain the following\nsubdirectories: `bin`,  `containers`,  `layers`,  `lib`,  `repos`. For the\nbinaries and libraries the only directories required are `bin` and `lib`.\n\nThe udocker tool should be installed as shown in section 2.1:\n\n```bash\ncd /sw\nwget https://github.com/indigo-dc/udocker/releases/download/1.3.17/udocker-1.3.17.tar.gz\ntar zxvf udocker-1.3.17.tar.gz\n```\n\nDirecting users to the central udocker installation can be done using the\nenvironment variables described in section 5, or through the configuration files\ndescribed in section 6. The recommended approach is to set environment\nvariables at the user level as in the example where the assumed central location\nwill be under `/sw/udocker`:\n\n```bash\nexport UDOCKER_BIN=/sw/udocker/bin\nexport UDOCKER_LIB=/sw/udocker/lib\nexport PATH=$PATH:$UDOCKER_BIN:/sw/udocker\n```\n\nNote that the command `udocker` will be in `/sw/udocker` with all the python\ndirectory structure, while `/sw/udocker/bin` has all execution engines.\n\nMake sure that the file protections are adequate namely that the files are\nnot modifiable by others.\n\n### 7.2. Images and layers in central installations\n\nThe repository of pulled images can also be placed in a different location\nthan the user home directory `$HOME/.udocker`. Notice that if the target\nlocation is not writable then the users will be unable to pull new images,\nwhich may be fine if these images are managed centrally by someone else.\nMake sure that the file protections are adequate to the intended purpose.\n\nFrom the images in the common location the users can then create containers\nwhose content will be placed in the user home directory under `$HOME/.udocker`.\nThis can be accomplished by redirecting the directories `layers` and  `repos`\nto a common location. The users will need to set the following environment\nvariables. Therefore assuming that the common location will be `/sw/udocker`:\n\n```bash\nexport UDOCKER_REPOS=/sw/udocker/repos\nexport UDOCKER_LAYERS=/sw/udocker/layers\n```\n\n### 7.3. Containers in central installations\n\nIf a container is extracted to the common location, it is possible to\npoint udocker to execute the container from that location. Making\nudocker pointing at different `containers` directory such as for example\n`/sw/udocker/containers` can be accomplished with:\n\n```bash\nexport UDOCKER_CONTAINERS=/sw/udocker/containers\n```\n\nAssuming that the container is to be created under `/sw/udocker/containers`\nit can be extracted with:\n\n```bash\nexport UDOCKER_CONTAINERS=/sw/udocker/containers\nudocker --allow-root pull  centos:centos7\nudocker --allow-root create  --name=myContainerId  centos:centos7\nudocker --allow-root run  -v /tmp myContainerId\n```\n\nNotice the `--allow-root` should only be used when running\nfrom the root user. However depending on the execution mode and several other\nfactors the limitations described in the next sections apply.\n\n#### 7.3.1. Selection of execution mode for central installations\n\nThe selection of the execution mode requires writing in the `containers`\ndirectory, therefore if the container is in a read-only location the\nexecution mode cannot be changed. If a container is to be executed in a mode\nother than the default then this must be set in advance. This must be done\nby someone with write access. A table summarizing the execution modes\nand their implications:\n\n|Mode| Engine      | Execution from readonly location\n|----|:------------|:------------------------------------------\n| P1 | PRoot       | OK\n| P2 | PRoot       | OK\n| F1 | Fakechroot  | OK\n| F2 | Fakechroot  | OK\n| F3 | Fakechroot  | OK see restrictions in section 7.3.1.2.\n| F4 | Fakechroot  | NOT SUPPORTED REQUIRES WRITE ACCESS\n| R1 | runc / crun | OK requires udocker version above v1.1.7\n| R2 | runc / crun | OK see restrictions in section 7.3.1.3.\n| R3 | runc / crun | OK see restrictions in section 7.3.1.3.\n| S1 | Singularity | OK\n\nChanging the execution mode can be accomplished with the following udocker\ncommand where `<MODE>` is one of the supported modes in column one.\n\n```bash\nudocker --allow-root setup --execmode=<MODE> myContainerId\n```\n\nNotice the `--allow-root` should only be used when running\nfrom the root user.\n\nIf the same container is to be provided for execution using more\nthan one execution mode (e.g. to be executed with P1 and F3), then\nmake copies of the initial container and setup each one of them with\nthe intended mode. The command `udocker clone` can be used to create\ncopies of existing containers.\n\n##### 7.3.1.1. Mode F4 is not supported\n\nThe mode F4 is not suitable for readonly containers as it is meant to\nsupport the dynamic creation of new executables and libraries inside of\nthe container, which cannot happen if the container is readonly. Use the\nmode F3 instead of F4.\n\n##### 7.3.1.2. Mode F3 restrictions\n\nThe F3 mode (and also F4) perform changes to the container executables\nand libraries, in particular they change the pathnames in ELF headers\nmaking them pointing at the container location. This means that the\npathname to the container must be always the same across all the\nhosts that may share the common location. Therefore if the original\nlocation pathname is `/sw/udocker/containers` then all hosts must\nalso mount it at the same exact path `/sw/udocker/containers`.\n\n##### 7.3.1.3. Modes R1, R2 and R3 general restrictions\n\nThese modes make use of runc or crun and require that user namespaces\nare enabled in the kernel. Older distributions may either not have\nsupport for namespaces (e.g. CentOS 6) or may have the support for\nuser namespaces disabled at the system level (e.g. CentOS 7). More\nrecent releases of Linux distributions do have support for user\nnamespaces (e.g. CentOS 8 and CentOS 9).\n\nFor Centos 7 there are steps that system administrators may perform\nto enable user namespaces, such as:\n\n```bash\nsudo echo \"user.max_user_namespaces=10000\" >> /etc/sysctl.conf\n```\n\n##### 7.3.1.4. Modes R2 and R3 specific restrictions\n\nCentral installation from readonly location using any of the R modes\nrequires udocker above v1.1.7.\nThese modes require the creation of a mount point inside the container\nthat is transparently created when the container is first executed,\ntherefore (as recommended for all other modes) the container\nmust be executed once by someone with write access prior to making it\navailable to the users. Furthermore these execution modes are nested\nthey use P1 or P2 inside the R engine, the Pn modes require a tmp\ndirectory that is writable. Therefore it is recommended to mount the\nhost `/tmp` in the container `/tmp` like this:\n\n```bash\nudocker --allow-root run  -v /tmp myContainerId\n```\n\nOr alternatively:\n\n```bash\nexport PROOT_TMP_DIR=/<path-to-host-writable-directory>\nudocker --allow-root run  -v /<path-to-host-writable-directory>  myContainerId\n```\n\nNotice the `--allow-root` should only be used when running from the root user.\n\n#### 7.3.2. Mount directories and files in central installations\n\nMaking host files and directories visible inside the container requires\ncreating the corresponding mount points. The creation of mount-points\nrequires write access to the container. Therefore if a container is in\na read-only location these files and directories must be created in\nadvance.\n\nNotice that some default mount points are required and automatically\ncreated by udocker itself, therefore the container should be executed\nby the administrator to ensure that the required files and directories\nare created. Furthermore if additional mount points are required to\naccess data or other user files from the host, such mount points\nmust also be created by the administrator by executing the container\nwith the adequate volume pathnames. The example shows how to setup\nthe default mount points and in addition create a new mount point\nnamed `/data`.\n\n```bash\nudocker --allow-root run -v /home:/data  myContainerId\n```\n\nNotice the `--allow-root` should only be used when running\nfrom the root user.\n\nNotice that once `/data` is setup the end users can mount other\ndirectories in `/data` at runtime, meaning that users are not\nrestricted to mount only the `/home` directory as the mapping\nis defined at run time.\n\n#### 7.3.3. Protection of container files and directories\n\nFor the container to be executed by other users the files and\ndirectories within the container must be readable. When udocker\nis installed in the user home directory all files belong to\nthe user and are therefore readable by him. If a common location\nis shared by several users the file protections will likely\nneed to be adjusted. Consider carefully your security policies\nand requirements when changing the file protections.\n\nThe following example assumes making all files readable to\nanyone and making all files (and directories) that have the\nexecutable bit to be also *executable* by anyone.\n\n```bash\nexport mycdir=$(udocker --allow-root inspect -p myContainerId)\nchmod -R uog+r $mycdir\nfind $mycdir -executable -exec chmod oug+x {} \\;\n```\n\nNotice the `--allow-root` should only be used when running\nfrom the root user.\n\n### 7.4. Using a common directory for executables and containers\n\nIf the common directory is used both for executables and containers\nthen the following environment variables can be used:\n\n```bash\nexport UDOCKER_DIR=/sw/udocker\nexport PATH=$PATH:$UDOCKER_DIR:$UDOCKER_DIR/bin\n```\n\n## 8. Uninstall\n\nudocker does not provide an uninstall command. udocker can be uninstalled\nby simply removing the created files and directories. The recommended\napproach is as follows:\n\n1. Fix permissions for all created containers\n   `for id in $(udocker ps | cut -f1 -d\" \" | grep -v CONTAINER); do udocker setup --fixperm $id; done`\n2. Remove all created containers\n   `for id in $(udocker ps | cut -f1 -d\" \" | grep -v CONTAINER); do udocker rm -f $id; done`\n3. Remove the *udocker directory tree* usually under `$HOME/.udocker`\n   `cd $HOME ; rm -Rf .udocker`\n4. Remove the udocker Python code\n\nThe *udocker directory tree* contains the external executables, libraries,\ndocumentation, container images and container file system trees. By removing\nit all created containers will be also removed. Changing the file permissions\nmight be required prior to deletion especially for the container file system\ntrees in the `containers` subdirectory.\n\n## 9. Quality assurance\n\nThe udocker software quality assurance follows the Common Software\nQuality Assurance Baseline Criteria for Research Projects\nDOI: <http://hdl.handle.net/10261/160086.> available at\n<https://indigo-dc.github.io/sqa-baseline/>.\n\nudocker uses the Jenkins Pipeline Library\n<https://github.com/indigo-dc/jenkins-pipeline-library>\nto implement Jenkins CI/CD pipelines for quality assurance.\n\n### 9.1. Functional and integration tests\n\nHigh level functional and integration tests used for quality assurance are available\nin <https://github.com/indigo-dc/udocker/tree/master/utils>.\nThese tests are also suitable to be executed by end-users to verify the installation.\nAfter cloning the udocker repository with `git` the `bash` scripts\ncan be executed using:\n\n```bash\ncd utils\n./udocker_test.sh\n./udocker_test-run.sh\n```\n\nIf the `.udocker` directory already exists these tests will not execute as they require\na clean environment. In this case proceed as follows:\n\n1. rename the directory `$HOME/.udocker`, as in `mv $HOME/.udocker $HOME/.udocker.ORIG`\n2. execute the tests\n3. remove the `$HOME/.udocker` created by the tests\n4. restore the original `.udocker` directory as in `mv $HOME/.udocker.ORIG $HOME/.udocker`\n\n### 9.2. Unit and security tests\n\nThe unit tests used in the software quality assurance pipelines are available at\n<https://github.com/indigo-dc/udocker/tree/master/tests/unit>.\nThe tests can be executed after creating a virtualenv and installing the development\nrequirements in [requirements-dev.txt](https://github.com/indigo-dc/udocker/blob/master/requirements-dev.txt)\nThese tests are meant to be executed by the automated quality assurance pipelines.\n\n```bash\nvirtualenv -p python3 ud3\nsource ud3/bin/activate\ngit clone https://github.com/indigo-dc/udocker.git\ncd udocker\npip install -r requirements-dev.txt\n```\n\nThe unit tests coverage can be executed using:\n\n```bash\nnosetests -v --with-coverage --cover-package=udocker tests/unit\n```\n\nOther tests configured in `tox.ini`, can be executed as well, such as linting\n(code style checking) and static security tests:\n\n```bash\npylint --rcfile=pylintrc --disable=R,C udocker\nbandit -r udocker -f html -o bandit.html\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/docs/installation_manual.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "With the exception of Singularity the tools and libraries to support\nexecution are downloaded and deployed by udocker during the installation\nprocess. This installation is performed in the user home directory\nand does not require privileges. The udocker related files such as\nlibraries, executables, documentation, licenses, container images and\nextracted directory trees are placed by default under `$HOME/.udocker`.\n \n",
                    "original_header": "How does it work"
                },
                "confidence": 0.9848117152566688,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Can be deployed by the end-user\n* Does not require privileges for installation\n* Does not require privileges for execution\n* Does not require compilation, just transfer the Python code\n* Encapsulates several tools and execution methods\n* Includes the required tools already statically compiled to work\n  across systems\n* Provides a docker like command line interface\n* Supports a subset of docker commands:\n  search, pull, import, export, load, save, login, logout, create and run\n* Understands docker container metadata\n* Allows loading of docker and OCI containers\n* Supports NVIDIA GPGPU applications\n* Can execute in systems and environments where Linux namespaces\n  support is unavailable\n* Runs both on new and older Linux distributions including:\n  CentOS 6, CentOS 7, CentOS 8, Ubuntu 14, Ubuntu 16, Ubuntu 18, Ubuntu 20,\n  Ubuntu 21, Alpine, Fedora, etc\n \n",
                    "original_header": "Advantages"
                },
                "confidence": 0.9999999997501163,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```txt\n        Commands:\n          search <repo/expression>      :Search dockerhub for container images\n          pull <repo/image:tag>         :Pull container image from dockerhub\n          create <repo/image:tag>       :Create container from a pulled image\n          run <container>               :Execute container\n          run <repo/image:tag>          :Pull, create and execute container\n\n          images -l                     :List container images\n          ps -m -s                      :List created containers\n          name <container_id> <name>    :Give name to container\n          rmname <name>                 :Delete name from container\n          rename <name> <new_name>      :Change container name\n          clone <container_id>          :Duplicate container\n          rm <container-id>             :Delete container\n          rmi <repo/image:tag>          :Delete image\n          tag <repo/image:tag> <repo2/image2:tag2> :Tag image\n\n          import <tar> <repo/image:tag> :Import tar file (exported by docker)\n          import - <repo/image:tag>     :Import from stdin (exported by docker)\n          export -o <tar> <container>   :Export container directory tree\n          export - <container>          :Export container directory tree\n          load -i <imagefile>           :Load image from file (saved by docker)\n          load                          :Load image from stdin (saved by docker)\n          save -o <imagefile> <repo/image:tag>  :Save image with layers to file\n\n          inspect <repo/image:tag>      :Return low level information on image\n          inspect -p <container>        :Return path to container location\n          verify <repo/image:tag>       :Verify a pulled or loaded image\n          manifest inspect <repo/image:tag> :Print manifest metadata\n\n          protect <repo/image:tag>      :Protect repository\n          unprotect <repo/image:tag>    :Unprotect repository\n          protect <container>           :Protect container\n          unprotect <container>         :Unprotect container\n\n          mkrepo <top-repo-dir>         :Create another repository in location\n          setup                         :Change container execution settings\n          login                         :Login into docker repository\n          logout                        :Logout from docker repository\n\n          help                          :This help\n          run --help                    :Command specific help\n          version                       :Shows udocker version\n\n        Options common to all commands must appear before the command:\n          -D                            :Debug\n          --quiet                       :Less verbosity\n          --repo=<directory>            :Use repository at directory\n          --insecure                    :Allow insecure non authenticated https\n          --allow-root                  :Allow execution by root NOT recommended\n```\n \n",
                    "original_header": "Syntax"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "udocker does not require privileges and runs under the identity of the user\ninvoking it. Users can downloaded udocker and execute it without requiring\nsystem administrators intervention. \nWhen executed by normal unprivileged users, udocker limits privilege\nescalation issues since it does not use or require system privileges.\n \n",
                    "original_header": "Security"
                },
                "confidence": 0.9300321438368782,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The default accelerated mode of PRoot (mode P1) may exhibit problems in Linux\nkernels above 4.0 due to kernel changes and upstream issues, in this case use\nmode P2 or any of the other execution modes.\n```bash\n./udocker setup  --execmode=P2  my-container-id\n```\nThe Fakechroot modes (Fn modes) require shared libraries compiled against\nthe libc shipped with the container. udocker provides these libraries for\nseveral Linux distributions, these shared libraries are installed by\nudocker under:\n```bash\n$HOME/.udocker/lib/libfakechroot-*\n```\n \n",
                    "original_header": "Execution mode specific limitations"
                },
                "confidence": 0.9999994185043292,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The `codemeta.json` metadata file was initially generated with `codemetapy`\npackage:\n```bash\ncodemetapy udocker --with-orcid --affiliation \"LIP Lisbon\" \\\n  --buildInstructions \"https://https://github.com/indigo-dc/udocker/blob/master/docs/installation_manual.md#3-source-code-and-build\" \\\n  --citation \"https://doi.org/10.1016/j.cpc.2018.05.021\" \\\n  --codeRepository \"https://github.com/indigo-dc/udocker\" \\\n  --contIntegration \"https://jenkins.eosc-synergy.eu/job/indigo-dc/job/udocker/job/master/\" --contributor \"Mario David\" \\\n  --copyrightHolder \"LIP\"  --copyrightYear \"2016\" --creator \"Jorge Gomes\" \\\n  --dateCreated \"2021-05-26\" --maintainer \"Jorge Gomes\" \\\n  --readme \"https://github.com/indigo-dc/udocker/blob/master/README.md\" \\\n  --referencePublication \"https://doi.org/10.1016/j.cpc.2018.05.021\" \\\n  --releaseNotes \"https://github.com/indigo-dc/udocker/blob/master/changelog\" \\\n  -O codemeta.json\n```\n \n",
                    "original_header": "Metadata generation"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Redistribution, commercial use and code changes must regard all licenses\nshipped with udocker. These include the [udocker license](LICENSE) and the\nindividual licences of the external tools and libraries packaged for use\nwith udocker. For further information see the\n[software licenses section](https://indigo-dc.github.io/udocker/installation_manual.html#62-software-licenses)\nof the installation manual.\n \n",
                    "original_header": "Licensing"
                },
                "confidence": 0.9203368231818749,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Important notice: We have changed the udocker tools location as of udocker 1.3.17.\nThis affects the configuration option `conf['tarball']` and environment variable\n`UDOCKER_TARBALL`, so if you are using udocker <= 1.3.16, make sure to:\n`export UDOCKER_TARBALL=https://download.a.incd.pt/udocker/udocker-englib-1.2.11.tar.gz`.** \n"
                },
                "confidence": 0.9999999998653948,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/indigo-dc/udocker/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-04-28T15:40:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T09:29:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 932591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 359234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 22356
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ]
    }
}