{
    "819": {
        "filename": "boschresearch_neuzzplusplus_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/boschresearch/neuzzplusplus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Neuzz++ is implemented as a custom mutator for AFL++, so it requires this fuzzer to be installed.\nFor reproducing experimental results from the paper, we recommend using the AFL++ version specified by the commit hash below.\nWe provide two alternative installation options:\n* Either clone and compile AFL++ from source in the folder of your choice:\n\n      git clone https://github.com/AFLplusplus/AFLplusplus\n      cd AFLplusplus/\n      git checkout 9e2a94532b7fd5191de905a8464176114ee7d258\n      make\n\n* Or install from Ubuntu repositories:\n\n      sudo apt install afl++\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing AFL++",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "This project uses `python>=3.8` and [`poetry`](https://python-poetry.org/) for managing the Python environment.\nInstall `poetry` system-wide or in an empty virtual environment (e.g., created via `virtualenv` or `conda`).\nThen run\n\n    poetry install --without dev\n\nto install the project dependencies.\nNote that Neuzz++ and MLFuzz have the same Pythhon dependencies; you only need to create one virtual environment for both of them.\nUse\n\n    poetry shell\n\nto activate the environment.\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Python dependencies",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "In the cloned `NEUZZplusplus` folder, run:\n\n    make -C ./aflpp-plugins/\n",
                    "type": "Text_excerpt",
                    "original_header": "Build Neuzz++ custom mutator",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "value": "Finally, export the `AFL_PATH` and `NEUZZPP_PATH` pointing to the cloned repos:\n\n    export AFL_PATH=/path/to/AFLplusplus/\n    export NEUZZPP_PATH=/path/to/NEUZZplusplus/\n\nYou are now ready to use Neuzz++.\n",
                    "type": "Text_excerpt",
                    "original_header": "Set environment variables",
                    "parent_header": [
                        "Neuzz++ - Neural program smoothing for fuzzing in AFL++",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Neuzz++ follows a standard Python package structure. \n    NEUZZplusplus/\n    \u251c\u2500\u2500 aflpp-plugins/          # Neuzz++ custom mutator for AFL++ linking to Python code for ML \n    \u251c\u2500\u2500 docs/                   # Sphinx documentation sources\n    \u251c\u2500\u2500 neuzzpp/                # Python package with reusable ML logic\n    \u251c\u2500\u2500 notebooks/              # Jupyter notebooks reproducing mutations effectiveness analysis\n    \u251c\u2500\u2500 scripts/                # Scripts folder with Neuzz++ ML code used by AFL++ custom mutator\n    \u251c\u2500\u2500 LICENSE                 # License file\n    \u251c\u2500\u2500 poetry.lock             # Project requirements in Poetry format\n    \u251c\u2500\u2500 pyproject.toml          # Standard Python package description for pip\n    \u2514\u2500\u2500 README.md               # The present README file\n \n",
                    "original_header": "Project structure"
                },
                "confidence": 0.970443381612886,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/boschresearch/neuzzplusplus/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-16T12:16:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-01T06:54:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 66306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 30598
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 17593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 400
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1093": {
        "filename": "akisaarinen_smartdiet_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/akisaarinen/smartdiet",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Setting up the constraint analysis part of SmartDiet is relatively\nstraightforward, but involves a bit of work. You'll need a machine with\nJava installed and sources codes for one or more Android programs. You need to\ncompile the SmartDiet analysis program (written in Scala). You also need to \nunzip Android SDK jars in order to track dependencies to the Android SDK\nfiles. This section covers the setup of this part of SmartDiet.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up constraint analysis tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "* Run <code>./sbt</code> to open up SBT (simple-build-tool) console. SBT documentation at\n  https://github.com/harrah/xsbt/wiki, if you want to dig deeper.\n* Fetch dependencies by running <code>update</code> in sbt console. This will take a while.\n* Assemble a runnable JAR by running <code>assembly:assembly</code> in sbt console.\n* You should see <code>target/smartdiet-{version}.jar</code>, runnable with\n  <code>java -jar smartdiet-{version}.jar</code>.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling the SmartDiet toolkit",
                    "parent_header": [
                        "Setting up constraint analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Configure applications in <code>sources.json</code> or a file similar to this\n(the name of the configuration file can be specified from the command line).\n\nRemember to point the SDK directory (\"sdkClassFilePath\") to one where you have\n*unzipped* all the SDK <code>.class</code> files, the tool doesn't read the\nlibrary files from inside jars.\n\nFor each program, you should specify:\n\n* \"name\": Just something to describe it.\n* \"appPath\": Directory containing compiled <code>.class</code> files for all application classes.\n* \"appSrcPath\": Directory containing <code>.java</code> source files for all application classes.\n* \"libPath\": Directory containing compiled <code>.class</code> files for all libraries that the application depends on (except for the SDK classes, which are under the sdkClassFilepath). These also need to be unzipped, nothing is looked from inside jars.\n",
                    "type": "Text_excerpt",
                    "original_header": "Configuring the constraint analysis tool",
                    "parent_header": [
                        "Setting up constraint analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "To start using dynamic energy profiling part of SmartDiet, you need a more\ncomplex procedure. You will need to root your Nexus One phone, compile the\nAndroid distribution and a custom kernel with some patches. You'll also need to\ncompile the traffic monitor kernel module against this same custom kernel.  The\ncustom stuff then needs to be installed into the phone. This section will cover\nthese topics.\n\nNote that I'm assuming you're familiar with the Android platform and know that\nthere is a risk of bricking your phone, as always when installing custom\nfirmware. You're doing all of this on your own risk. Shouldn't be too big\na risk if you're careful, but still.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up energy analysis tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Start by compiling the Android platform.\n\nOfficial instructions are available at http://source.android.com/source/initializing.html,\nthese are the steps that worked for me in Ubuntu 11.04. Another useful resource is\nhttp://source.android.com/source/build-numbers.html for the various build numbers and\nidentifiers for Android.\n\n* Fetch the repo script if you don't already have it. Tested with version (1,13)\n  <pre>\n  $ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo\n  </pre>\n* Make sure your system is configured with Java 1.5 (Android compilation requires this).\n  For my Ubuntu 11.04 this can be done with the following command:\n  <pre>\n  $ sudo update-alternatives --set java /usr/lib/jvm/java-1.5.0-sun/jre/bin/java\n  </pre>\n* Create a working directory for the platform compilation. Rest of the instructions assume you work under the\n  directory created here.\n  <pre>\n  $ mkdir android-2.2.1-r2\n  $ cd android-2.2.1-r2\n  </pre>\n* Initialize and fetch the repository (last step downloads a *lot* of stuff and takes time)\n  <pre>\n  $ repo init -u https://android.googlesource.com/platform/manifest -b android-2.2.1_r2\n  $ repo sync\n  </pre>\n* Compile the ADB tool and make it available in PATH\n  <pre>\n  $ make adb\n  $ export PATH=`pwd`/out/host/linux-x86/bin:$PATH\n  $ which adb\n  </pre>\n  You should see <code>/home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/adb</code> or something similar.\n* Connect the Nexus One with USB and test connection with adb\n  <pre>\n  $ adb devices\n  List of devices attached\n  HT0B2P800954  device\n  </pre>\n* Fetch required proprietary files from Nexus One (in order to compile the platform). These\n  files are not distributed with the platform sources, so you need to have the stock Android\n  2.2 in the phone to do this.\n  <pre>\n  $ cd device/htc/passion\n  $ ./extract-files.sh\n  </pre>\n* Compile Android platform first without any modifications (to make sure everything works in your environment).\n  This will also take a while, results should appear in <code>out/target/product/passion/</code>\n  <pre>\n  $ source build/envsetup.sh\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n  Results will appear in <code>out/target/product/passion/</code> if everything went well.\n* Install the resulting images to your phone to make sure everything works as supposed at this point.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling Android 2.2.1-r2",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "* First compile the distribution, and then go to <code>out/target/product/passion/</code>\n  <pre>\n  $ cd out/target/product/passion/\n  </pre>\n* Reboot the phone to bootloader\n  <pre>\n  $ adb reboot-bootloader\n  </pre>\n* Find path to fastboot (should appear there if you adjusted the PATH earlier in the compile process).\n  <pre>\n  $ which fastboot\n  /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot\n  </pre>\n  Yours should look similar to this. Adjust paths correctly in the following commands.\n* Flash all partitions. Make sure you don't disconnect or boot the phone while flashing.\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash boot boot.img\n        sending 'boot' (2338 KB)... OKAY [  0.338s]\n                  writing 'boot'... OKAY [  0.975s]\n  finished. total time: 1.313s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash recovery recovery.img\n    sending 'recovery' (2564 KB)... OKAY [  0.369s]\n              writing 'recovery'... OKAY [  1.063s]\n  finished. total time: 1.433s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash system system.img\n     sending 'system' (74841 KB)... OKAY [ 10.323s]\n                writing 'system'... OKAY [ 27.256s]\n  finished. total time: 37.580s\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot flash userdata userdata.img\n       sending 'userdata' (2 KB)... OKAY [  0.014s]\n              writing 'userdata'... OKAY [  2.377s]\n  finished. total time: 2.391s\n  </pre>\n* Reboot the phone\n  <pre>\n  $ sudo /home/amsaarin/android/2.2.1-r2/out/host/linux-x86/bin/fastboot reboot\n  </pre>\n* Phone should boot up normally, goto Settings -> About phone and check that Build number is something like this:\n  <pre>\n  full_passion-userdebug 2.2.1 FRG83D eng.\n  amsaarin.20111024.152752 test-keys\n  </pre>\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing custom Android distribution to Nexus One",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Next, you'll need to compile your custom kernel. I used kernel version 2.6.32\nand patches are available for that version. Modifications might be needed if\nanother version is used.\n\nAs a result you will have a compiled kernel which will be referred later as\n<code>/path/to/zImage</code>. It will lie under the kernel source tree\nat <code>arch/arm/boot/zImage</code>. You should test this kernel as-is, and\nthen continue applying our patches for it.\n\nShort instructions for compiling the kernel:\n\n1) Clone the msm kernel repository\n\nAs of now (Dec 2th, 2011) the official Android kernel source code repository is\ndown because kernel.org was hacked a few months ago and Google is still in the\nprocess of recovering the hosting of the kernel sources. So you need to use one\nof the unofficial mirrors to get the sources, this one worked for me:\n\n<pre>\n$\u00a0git clone https://github.com/android/kernel_msm.git\n</pre>\n\n2) Checkout a new custom branch from 2.6.32 in <code>kernel_msm</code>\n\n<pre>\n$ cd kernel_msm\n$ git checkout remotes/origin/archive/android-msm-2.6.32\n$ git checkout -b smartdiet-2.6.32\n</pre>\n\n3) Get the default kernel configuration\n\nOne is available at with SmartDiet as a patch:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/0002-Add-initial-config.patch\nApplying: Added initial config\n</pre>\n\nAlternatively, if you have a stock 2.2.1-r2 in your phone, you can use the\nfollowing to get your stock configuration from the phone as well:\n\n<pre>\n$ adb pull /proc/config.gz\n$ gunzip config.gz\n</pre>\n\n4) Setup environment for kernel compiling \n\nDo it manually or use the script provided with smartdiet:\n\n<pre>\n$ source /path/to/smartdiet/patches/env_kernel.sh\n</pre>\n\n5) Make the kernel\n\n<pre>\n$ make\n</pre>\n\nAnd you're done. \n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling a custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "In order to work with the traffic monitor kernel module, you need to patch the\nkernel a bit. SmartDiet kernel also includes patches to enable oprofiler and\nTaintDroid support (http://appanalysis.org/), which are not necessary to use\nSmartDiet but will make other debugging tasks easier. You can take a look into\nwhat's under <code>patches/kernel-2.6.32</code> and decide to only use part of\nthe patches, if you wish.\n\nYou can apply all patches to the kernel source tree by running the following\nunder the git checkout of the Android kernel source tree:\n\n<pre>\n$ git am /path/to/smartdiet/patches/kernel-2.6.32/*\nApplying: Add traffic monitor protocol\nApplying: Added initial config\nApplying: Add profiling support to config\nApplying: Remove support for ext2 and ext3 from kernel to make it fit\nApplying: Add patch for oprofile and Nexus One\nApplying: yaffs2: Add xattr patches by TaintDroid guys\nApplying: Enable YAFFS2 support in .config for TaintDroid\n</pre>\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling custom kernel with SmartDiet patches",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "See the <code>trafficmonitor</code> subdirectory for more information.  This is\na separate kernel module developed at the Aalto University School of Science\nand it can be compiled against the patched kernel sources. You should get a\n<code>ec.ko</code> file which should be put into the <code>files</code>\nsubdirectory to be used by the measurement scripts later on (they will upload\nand load it into use into the phone). Note that because this is a kernel\nmodule, it has to be compiled against the exact kernel version you are running\nor it won't load up correctly.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling the traffic monitor kernel module",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "Next you should compile the Android with your custom kernel and check that it\nworks. \n\nNote that standard kernel modules distributed with the Android distribution\nwill be incompatible with the new kernel and won't hence load up. Most\nimportant one is the driver dealing with WiFi, <code>bcm4329.ko</code>, so\nyou'll want to copy the new driver into the distribution before compiling it.\nCopy the one from the compiled kernel under\n<code>drivers/net/wireless/bcm4329/bcm4329.ko</code> to\n<code>device/htc/passion-common/bcm4329.ko</code> under the Android\ndistribution before compiling, and it'll be shipped to the phone when flashing.\n\nCompile the distribution with your new kernel by running the following in the\nAndroid platform directory (not the kernel source directory):\n\n<pre>\n$ make TARGET_PREBUILT_KERNEL=/path/to/zImage\n</pre>\n\n<code>/path/to/zImage</code> refers now to the custom kernel you built earlier.\n\nBefore continuing, check that everything works by booting up the phone and\nchecking versions (in addition to the platform version, kernel version should\nnow  also change in Settings -> About phone to refer somehow into your\nmachine).\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling Android with custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "This procedure will allow SmartDiet to get more information about Java threads\nunder Dalvik VM because of some added loggings.\n\n* Compile stock Android 2.2.1-r2 first as instructed above\n* Go to <code>dalvik</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd dalvik\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/dalvik-logging.patch\n  Applying: Log more clock-related variables and increase buffer size\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Recompile Android, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 4 | lunch\n  $ make -j2\n  </pre>\n* Install the modified version to the phone using the same procedure as before. This time you only\n  need to re-flash the system partition.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling SmartDiet modifications to Android platform with the custom kernel",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "value": "This procedure will increment the default buffer size that DDMS sets when\nrecording a Java execution trace. This enabled you to capture longer execution\nruns, the default buffer size will overflow rather quickly and you only record\nvery short runs, especially with CPU intensive apps.\n\n* Go to your <code>android-2.2.1-r2</code> platform source directory.\n* Go to <code>sdk/ddms</code> subdirectory in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ cd sdk/ddms\n  </pre>\n* Apply patch using <code>git am</code>\n  <pre>\n  $ git am /path/to/smartdiet/patches/android-2.2.1-r2/ddms-buffer_size_increase.patch\n  Applying: Increase default buffer size in ddms java application\n  </pre>\n* Verify that patch got applied by running <code>git log</code>\n* Compile Android SDK, run the following in your <code>android-2.2.1-r2</code> platform source directory.\n  <pre>\n  $ echo 1 | lunch\n  $ make sdk\n  </pre>\n* Compiled SDK is available under <code>out/host/linux-x86/sdk/</code>, to use DDMS with a bigger\n  tracing buffer size limit, run it from there (<code>tools/ddms</code>).\n\nTo take this new buffer size limit into use, you need to use the newly compiled\nDDMS and not the one which comes with the official SDK from Google.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compiling SmartDiet modifications to Android SDK",
                    "parent_header": [
                        "Setting up energy analysis tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<pre>\n$ export ANDROID_SDK=/path/to/your/android_sdk\n$ ./process-smartdiet-dynamic-measurements.sh test-data/dynamic-profiling-run-simpleapp/\n</pre> \n",
                    "original_header": "Testing out with sample data"
                },
                "confidence": 0.9963553542221275,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Compile and install the program you are profiling so that it allows debugging,\n  i.e. you can connect to it using DDMS (flags in the AndroidManifest.xml file).\n* Start the program in the phone.\n* Run <code>./run-smartdiet-dynamic-measurements.sh DIR</code> with phone\n  connected with either USB or TCP to adb. For more information check the\n  sources of the script. \n* Start up Android DDMS from your customized SDK. This customized DDMS has a\n  larger buffer size for the program tracing, so longer test runs can be done\n  than would be possible with the default settings. From DDMS, select the program\n  you're profiling and select 'start method profiling' to start tracing\n  the program execution.\n* Unplug the USB cable if you're measuring physical power consumption with\n  Monsoon. It will try to load the imaginary battery and mess up the\n  measurements.\n \n",
                    "original_header": "1) Before measurements"
                },
                "confidence": 0.9993732643247644,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akisaarinen/smartdiet/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2011-11-02T10:14:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-03-20T02:13:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Scala",
                    "name": "Scala",
                    "type": "Programming_language",
                    "size": 128932
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 81677
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 70491
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 18665
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rebol",
                    "name": "Rebol",
                    "type": "Programming_language",
                    "size": 913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "607": {
        "filename": "henry2cox_lcov_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/henry2cox/lcov",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The LCOV package is available as either RPM or tarball from:\n\n  https://github.com/linux-test-project/lcov/releases\n\nTo install the tarball, unpack it to a directory and run:\n\n  make install\n\nUse Git for the most recent (but possibly unstable) version:\n\n  git clone https://github.com/linux-test-project/lcov.git\n\nChange to the resulting lcov directory and type:\n\n  make install\n\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Installing LCOV"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  README             - This README file\n  CHANGES            - List of changes between releases\n  bin/lcov           - Tool for capturing LCOV coverage data\n  bin/genhtml        - Tool for creating HTML output from LCOV data\n  bin/gendesc        - Tool for creating description files as used by genhtml\n  bin/geninfo        - Internal tool (creates LCOV data files)\n  bin/genpng         - Internal tool (creates png overviews of source files)\n  bin/install.sh     - Internal tool (takes care of un-/installing)\n  man                - Directory containing man pages for included tools\n  example            - Directory containing an example to demonstrate LCOV\n  lcovrc             - LCOV configuration file\n  Makefile           - Makefile providing 'install' and 'uninstall' targets \n",
                    "original_header": "1. Important files"
                },
                "confidence": 0.999999972525757,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  https://github.com/linux-test-project/lcov\n \n",
                    "original_header": "6. Questions and comments"
                },
                "confidence": 0.9997331532191335,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-------------------------------------------------\n- README file for the LTP GCOV extension (LCOV) -\n- Last changes: 2022-10-04\n------------------------------------------------- \n"
                },
                "confidence": 0.9800278476028504,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/henry2cox/lcov/master/README"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-27T13:49:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-11T20:36:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 818143
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 61762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 27226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 2730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "682": {
        "filename": "joymallyac_Fairway_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/Fairway",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-23T04:23:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-29T09:07:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 196706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 74817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 90
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "671": {
        "filename": "michaeldorner_tax_se_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michaeldorner/tax_se",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-06T08:03:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-24T18:58:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 9630
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7817
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1061": {
        "filename": "basedrhys_obfuscated-code2vec_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/basedrhys/obfuscated-code2vec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Class distributions shown below generated by [WEKA](https://www.cs.waikato.ac.nz/ml/weka/)\n \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9757226697452905,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/basedrhys/obfuscated-code2vec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-10T08:46:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T06:26:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 79042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 54671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1169
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "451": {
        "filename": "orlenyslp_Caterpillar_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/orlenyslp/Caterpillar",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "By default, the core of Caterpillar was configured to run on top of Ganache CLI which is a Node.js based Ethereum client for testing and development. It uses ethereumjs to simulate full client behavior and make developing Ethereum applications. All the instructions about the installation can be found here: https://github.com/trufflesuite/ganache-cli/. However, the Ethereum Provider can be updated at the beginning of the source code in the controller \"caterpillar-core/src/models/models.controller.ts\" (check the comments).\n\nNote that Ganache CLI is written in Javascript and distributed as a Node package via npm. Make sure you have Node.js (>= v6.11.5) installed. Besides, be aware to start the Ganache CLI server before running the applications Caterpillar Core and Services Manager. In that respect, you only need to open a terminal on your computer and run the command:\n\n     ganache-cli\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Ganache CLI",
                    "parent_header": [
                        "Caterpillar"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/orlenyslp/Caterpillar/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For running Caterpillar locally, download the source code from the repository and follow the next steps to set up the applications and install the required dependencies. For running caterpillar from a Docker image go directly to the last section of this document. Be aware that the Docker image works only on the version v1.0.\n \n",
                    "original_header": "Caterpillar"
                },
                "confidence": 0.9999458393086353,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/orlenyslp/Caterpillar/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-06-17T12:53:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T12:48:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1583425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 315942
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 238540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 71238
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18258
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 7876
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 4270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 675
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "150": {
        "filename": "haoxintu_LLM4CBI_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/haoxintu/LLM4CBI",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Operating System: Ubuntu 18.04\n* Python version: 3.9.16\n* Torch version 1.4.0\n",
                    "type": "Text_excerpt",
                    "original_header": "Experimental environment",
                    "parent_header": [
                        "LLM4CBI",
                        "Setup Instructions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/haoxintu/LLM4CBI/main/README.md"
            },
            {
                "result": {
                    "value": "```\n# To isolate GCC bugs for example\n$ cd llm4cbi-gcc\n$ python setup-gcc.py\n```\n\nWe provide the required compiler version in the file `llvmbug.txt` and `gccbugs.txt`. An example of this format shown in gccbugs.txt is as follows:\n\n ```\n57303,r198967,-O0,-O1,checkIsPass_wrongcodeOneline,install_no\n```\n\n* `57303` is the bug ID in the [GCC bug repository](https://gcc.gnu.org/bugzilla/).\n* `r198967` is the buggy version on SVN.\n* `-O0,-O1` are correct and wrong optimization options.\n* `checkIsPass_wrongcodeOneline` is the test oracle checking, please refer to the description [here]( https://github.com/haoyang9804/RecBi/tree/master?tab=readme-ov-file#deploying--1--preparing-for-installing-target-llvm-trunk).\n* `install_no` means this LLVM trunk has not been installed while `install_yes` means the opposite.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Build compilers with coverage profilers (i.e.,`gcov`)",
                    "parent_header": [
                        "LLM4CBI",
                        "Setup Instructions"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/haoxintu/LLM4CBI/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-29T07:13:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T08:05:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 232120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 45002
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 10687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3472
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "179": {
        "filename": "askaratas_Feather_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/askaratas/Feather",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The executable jar file (i.e., feather.jar) needs SICStus Prolog native dll's to execute. The evaluation version (even if the trial period has expired) works. \r\n\r\nYou can download SICStus Prolog from: https://sicstus.sics.se/eval.html\r\n \n"
                },
                "confidence": 0.9998018877972229,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/askaratas/Feather/master/README.txt"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-03-16T16:43:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-19T18:46:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 702291
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "586": {
        "filename": "pkuserc_MPCos_ASE2022_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pkuserc/MPCos_ASE2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-09-03T14:36:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-19T08:16:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17547
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "965": {
        "filename": "jazzbob_stb_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lenzbelzner/stb",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-02-27T15:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2017-02-27T15:35:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 7846
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "618": {
        "filename": "Learner0x5a_kTrans-release_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Learner0x5a/kTrans-release",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-24T08:44:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T02:19:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 63902
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "515": {
        "filename": "NAIST-SE_PATSQL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/PATSQL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Execute the following maven command. This generates `patsql-engine-1.0.0.jar` in the `target` directory. \n\n```\nmvn install -DskipTests\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PATSQL - SQL Synthesizer"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- `src`  - source code.\n- `test` - test code.\n- `test/patsql/synth/benchmark/ScytheSqlSynthesizerTest.java` - test code to execute `ase13` benchmark.\n- `test/patsql/synth/benchmark/ScytheTopRatedPostsTest.java` - test code to execute `so-top` benchmark.\n- `test/patsql/synth/benchmark/ScytheDevSetTest.java` - test code to execute `so-dev` benchmark.\n- `test/patsql/synth/benchmark/ScytheRecentPostsTest.java` - test code to execute `so-rec` benchmark.\n- `test/patsql/synth/benchmark/KaggleTest.java` - test code to execute `kaggle` benchmark.\n- `examples` - input and output tables used for test and evaluation.\n- `evaluation` - benchmark results in html. \n \n",
                    "original_header": "Contents"
                },
                "confidence": 0.9267427049798416,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the transitive dependencies from each link below.  \n \n",
                    "original_header": "Third-party libraries used in this project"
                },
                "confidence": 0.9117382247555469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Module \"junit-jupiter-api\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api/5.5.1  \n \n",
                    "original_header": "JUnit Jupiter API"
                },
                "confidence": 0.9991149948891617,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Module \"junit-jupiter-engine\" of JUnit 5.  \nLicense: EPL 2.0  \nVersion: 5.5.1  \nhttps://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine/5.5.1  \n \n",
                    "original_header": "JUnit Jupiter Engine"
                },
                "confidence": 0.9975455142165027,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to validate the syntax of synthesized queries in test.  \nLicense: EPL 1.0, MPL 2.0  \nVersion: 1.4.200  \nhttps://mvnrepository.com/artifact/com.h2database/h2/1.4.200  \n \n",
                    "original_header": "H2 Database Engine"
                },
                "confidence": 0.9964433721899372,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to serialize and deserialize Java objects to JSON.  \nLicense: Apache 2.0  \nVersion: 2.8.6  \nhttps://mvnrepository.com/artifact/com.google.code.gson/gson/2.8.6\n \n",
                    "original_header": "Gson"
                },
                "confidence": 0.9992130645927784,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Used to format SQL queries.  \nLicense: LGPL 2.1  \nVersion: 5.4.11.Final  \nhttps://mvnrepository.com/artifact/org.hibernate/hibernate-core/5.4.11.Final  \n \n",
                    "original_header": "Hibernate Core Relocation"
                },
                "confidence": 0.9970795871807295,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NAIST-SE/PATSQL/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-29T01:50:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-14T07:55:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 566591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 381328
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2094
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 29
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "60": {
        "filename": "EngineeringSoftware_teco_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/teco",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Ensure that you met the [pre-requisites](#pre-requisites) before proceeding.\n\nThen, you can install a conda environment for TeCo by running the following script, which includes GPU support if GPU is available:\n```\n./prepare-env.sh\n```\n\nAfter this script finishes, you can activate the conda environment by running:\n```\nconda activate teco\n```\nIf this step is successful you should see a `(teco)` prefix in the command line prompt. You may need to reactivate this conda environment every time you open a new terminal.\n\nIf you need to rerun the installation script, make sure the existing conda environment is deactivated by `conda deactivate`.\n\nYou can run the following commands to quickly check if the installation is successful:\n```\n# try if data collection is working\ninv data.collect-raw-data --debug\n\n# try if model training is working (requires first downloading the processed corpus)\ninv data.eval-setup --debug\ninv exp.train-codet5 --setup CSNm-Debug --overwrite --suffix teco-norr --args \"--model.inputs=[fields_notset,last_called_method,types_local,types_absent,similar_stmt_1_0,setup_teardown,focalm,sign,prev_stmts] --model.output=stmt --seed_everything=4197\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TeCo"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            },
            {
                "result": {
                    "value": "TL;DR:\n- If you have an older GPU (e.g., GTX 1080 Ti) and encounter CUDA-related errors, try `./prepare-env.sh 10.2`.\n- If you want to use the system-wide installed CUDA (must be 10.2/11.3/11.6) together with cuDNN and NCCL, do `./prepare-env.sh system`.\n\nTeCo uses PyTorch 1.12.1, which requires CUDA with version 10.2/11.3/11.6, together with cuDNN and NCCL libraries. Our installation script detects whether GPU is available by checking the output of `nvidia-smi`. If GPU is not available, this script will install PyTorch in CPU-only mode, which is usually not suitable for training and evaluating the ML models (unless you know what you're doing), but enables the data collection and processing part of the TeCo to run. If GPU is available, this script will install CUDA 11.6, cuDNN, and NCCL in the conda environment. The installed CUDA is only usable when the conda environment is activated.\n\nYou can change the CUDA version installed by adding an option to the installation script: `./prepare-env.sh cuda_version`, where cuda_version can be cpu, system, 10.2, 11.3, 11.6. Use \"cpu\" if you want to install PyTorch in CPU-only mode even if GPU is available. Use \"system\" if you have already performed a system-wide installation of CUDA (must be one of 10.2/11.3/11.6), together with cuDNN and NCCL, and would like to use it instead of installing another CUDA. The default option \"11.6\" is usually fine especially if you're using a recent GPU, but if you're using an older GPU (e.g., GTX 1080 Ti) and encounter CUDA-related errors, you may want to try \"10.2\" instead.\n",
                    "type": "Text_excerpt",
                    "original_header": "Notes on GPU support and alternative CUDA installation methods",
                    "parent_header": [
                        "TeCo",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- The files of the repositories used in our study, archived in case some repositories are removed or renamed. To reproduce the full data collection + model training/evaluation workflow, you need to download all repositories (*large size* - 41GB). To reproduce only the model training/evaluation part, you need to download the repositories in the evaluation set (2GB).\n- Download link for all repositories: https://utexas.box.com/s/n2gjzd4toy5j4t0sv4ztnngezxrx3rhc\n  - Unzip the files (multi-volume zip files) with the following commands: `zip -s 0 downloads.zip --out downloads-single.zip && unzip downloads-single.zip && rm downloads-single.zip`, then move the extracted `downloads` folder to this repository at `_work/downloads`.\n- Download link for repositories in the evaluation set: https://utexas.box.com/s/edmidy4h1plpmoeg5ew1bru3qg6zp8hi\n  - Unzip the downloaded file with `tar xzf downloads.tgz`, then move the extracted `downloads` folder to this repository at `_work/downloads`.\n- Contents:\n  - each repository is stored in a separate folder, with the folder name being the `{user_name}_{repo_name}` (e.g., `apache_fluo` corresponds to github.com/apache/fluo).\n \n",
                    "original_header": "repositories files"
                },
                "confidence": 0.9999998495849354,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/teco/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-24T17:30:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-16T17:59:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 658957
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 255132
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10527
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "417": {
        "filename": "se2p_pynguin_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/pynguin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Pynguin can be easily installed using the `pip` tool by typing:\n```bash\npip install pynguin\n```\n\nMake sure that your version of `pip` is that of a supported Python version, as any \nolder version is not supported by Pynguin!\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Pynguin",
                    "parent_header": [
                        "Pynguin"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/se2p/pynguin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pynguin is a command-line application.\nOnce you installed it to a virtual environment, you can invoke the tool by typing\n`pynguin` inside this virtual environment.\nPynguin will then print a list of its command-line parameters. \nA minimal full command line to invoke Pynguin could be the following,\nwhere we assume that a project `foo` is located in `/tmp/foo`,\nwe want to store Pynguin's generated tests in `/tmp/testgen`,\nand we want to generate tests using a whole-suite approach for the module `foo.bar`\n(wrapped for better readability):\n```bash\npynguin \\\n  --project-path /tmp/foo \\\n  --output-path /tmp/testgen \\\n  --module-name foo.bar\n```\nPlease find a more detailed example in the [quick start guide](https://pynguin.readthedocs.io/en/latest/user/quickstart.html). \n",
                    "original_header": "Using Pynguin"
                },
                "confidence": 0.9812892529172652,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/pynguin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-27T15:50:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:10:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1943012
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2984
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2645
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2471
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "757": {
        "filename": "logpai_logparser_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/logparser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\nWe recommend installing the logparser package and requirements via pip install.\r\n\r\n```\r\npip install logparser3\r\n```\r\n\r\nIn particular, the package depends on the following requirements. Note that regex matching in Python is brittle, so we recommend fixing the regex library to version 2022.3.2.\r\n\r\n+ python 3.6+\r\n+ regex 2022.3.2\r\n+ numpy\r\n+ pandas\r\n+ scipy\r\n+ scikit-learn\r\n\r\nConditional requirements:\r\n\r\n+ If using MoLFI: `deap`\r\n+ If using SHISO: `nltk`\r\n+ If using SLCT: `gcc`\r\n+ If using LogCluster: `perl`\r\n+ If using NuLog: `torch`, `torchvision`, `keras_preprocessing`\r\n+ If using DivLog: `openai`, `tiktoken` (require python 3.8+)\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Logparser"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n<div>\r\n<a href=\"https://pypi.org/project/logparser3\"><img src=\"https://img.shields.io/badge/python-3.6+-blue\" style=\"max-width: 100%;\" alt=\"Python version\"></a>\r\n<a href=\"https://pypi.org/project/logparser3\"><img src=\"https://img.shields.io/pypi/v/logparser3.svg\" style=\"max-width: 100%;\" alt=\"Pypi version\"></a>\r\n<a href=\"https://github.com/logpai/logparser/actions/workflows/ci.yml\"><img src=\"https://github.com/logpai/logparser/workflows/CI/badge.svg?event=push\" style=\"max-width: 100%;\" alt=\"Pypi version\"></a>\r\n<a href=\"https://pepy.tech/project/logparser3\"><img src=\"https://static.pepy.tech/badge/logparser3\" style=\"max-width: 100%;\" alt=\"Downloads\"></a>\r\n<a href=\"https://github.com/logpai/logparser/blob/main/LICENSE.md\"><img src=\"https://img.shields.io/badge/license-view-brightgreen\" style=\"max-width: 100%;\" alt=\"License\"></a>\r\n<a href=\"https://github.com/logpai/logparser#discussion\"><img src=\"https://img.shields.io/badge/chat-wechat-brightgreen?style=flat\" style=\"max-width: 100%;\"></a>\r\n</div>\r\n<hr/>\r\n\r\n<div>\r\n<a href=\"https://github.com/logpai/logparser/stargazers\"><img src=\"http://bytecrank.com/nastyox/reporoster/php/stargazersSVG.php?user=logpai&repo=logparser\" width=\"600\"/><a/>\r\n</div>\r\n\r\nLogparser provides a machine learning toolkit and benchmarks for automated log parsing, which is a crucial step for structured log analytics. By applying logparser, users can automatically extract event templates from unstructured logs and convert raw log messages into a sequence of structured events. The process of log parsing is also known as message template extraction, log key extraction, or log message clustering in the literature.\r\n\r\n<p align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/logpai/logparser@main/docs/img/example.jpg\" width=\"485\"><br>An example of log parsing</p>\r\n\r \n",
                    "original_header": "Logparser"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\n+ Since the first release of logparser, many PRs and issues have been submitted due to incompatibility with Python 3. Finally, we update logparser v1.0.0 with support for Python 3. Thanks for all the contributions ([#PR86](https://github.com/logpai/logparser/pull/86), [#PR85](https://github.com/logpai/logparser/pull/85), [#PR83](https://github.com/logpai/logparser/pull/83), [#PR80](https://github.com/logpai/logparser/pull/80), [#PR65](https://github.com/logpai/logparser/pull/65), [#PR57](https://github.com/logpai/logparser/pull/57), [#PR53](https://github.com/logpai/logparser/pull/53), [#PR52](https://github.com/logpai/logparser/pull/52), [#PR51](https://github.com/logpai/logparser/pull/51), [#PR49](https://github.com/logpai/logparser/pull/49), [#PR18](https://github.com/logpai/logparser/pull/18), [#PR22](https://github.com/logpai/logparser/pull/22))!\r\n+ We build the package wheel logparser3 and release it on pypi. Please install via `pip install logparser3`.\r\n+ We refactor the code structure and beautify the code via the Python code formatter black.\r\n\r \n",
                    "original_header": "\ud83c\udf08 New updates"
                },
                "confidence": 0.9999999997429541,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/logpai/logparser/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-08-05T11:32:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T17:29:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 446664
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 67264
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 44628
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1268
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "1184": {
        "filename": "davidhin_linevd_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/davidhin/linevd",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository provides the code for [LineVD: Statement-level Vulnerability Detection using Graph Neural Networks](https://arxiv.org/pdf/2203.05181.pdf). The environment can be built using [Singularity](https://sylabs.io/singularity/), or by following / following the commands in the Singularity file. To start, clone the repository and navigate to the root directory.\n \n",
                    "original_header": "LineVD"
                },
                "confidence": 0.9999461529385906,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/davidhin/linevd/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Build and initialise environment and download dataset\n```sh\nsudo singularity build main.sif Singularity\nsingularity run main.sif -p initialise\n```\nFeature extraction (Increase NUM_JOBS if running on HPC for speed up)\n```sh\nsingularity exec main.sif python sastvd/scripts/prepare.py\nsingularity exec main.sif python sastvd/scripts/getgraphs.py\n```\nTrain model (Training takes around 1-2 hours using GTX 3060)\n```sh\nsingularity exec --nv main.sif python sastvd/scripts/train_best.py\n```\n \n",
                    "original_header": "Training LineVD from scratch"
                },
                "confidence": 0.9999992237759046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/davidhin/linevd/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-20T03:08:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T14:48:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 234388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7438
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Singularity",
                    "name": "Singularity",
                    "type": "Programming_language",
                    "size": 1896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "312": {
        "filename": "wssun_SourceCodeSearch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wssun/SourceCodeSearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n**NOTE: We intend to keep updating with the most recent papers whenever time permits, and we warmly welcome pull requests or issues regarding any missing papers. If you find any information is incorrect, please feel free to contact us. We will promptly confirm and make the necessary corrections. All researchers are encouraged to participate in enhancing this repository and expanding the knowledge within the field of source code search.** \n",
                    "original_header": "A Survey of Source Code Search: A 3-Dimensional Perspective"
                },
                "confidence": 0.9325111872260037,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/SourceCodeSearch/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-11-06T11:59:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T13:54:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Source"
        ]
    },
    "681": {
        "filename": "logpai_hybridlog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/hybridlogparser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-14T06:38:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-24T17:32:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "362": {
        "filename": "ahealy19_F-IDE-2016_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ahealy19/F-IDE-2016",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-08-22T10:15:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2018-01-23T04:03:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1358065
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 636338
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 142584
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "557": {
        "filename": "v-m_GDGNC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/v-m/GDGNC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-01-22T10:11:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-19T17:56:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 89164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1007": {
        "filename": "akashdhruv_jobrunner_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Lab-Notebooks/Jobrunner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "``jobrunner setup <JobWorkDir>`` creates a ``job.setup`` file using\n``job.setup`` scripts defined in Jobfiles along the directory tree.\nJobrunner executes each script serially by changing the working\ndirectory to the location of the script. A special environment variable\n``JobWorkDir`` provides the value of ``<JobWorkDir>`` supplied during\ninvocation of the command.\n\n.. code:: console\n\n   Working directory: /Project/simulation/PoolBoiling\n   Parsing Jobfiles in directory tree\n\n   job.setup: [\n           /Project/environment.sh\n           /Project/simulation/PoolBoiling/flashSetup.sh\n           ]\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**************\n Installation\n************** \nStable releases of Jobrunner are hosted on Python Package Index website\n(https://pypi.org/project/PyJobRunner/) and can be installed by\nexecuting, \n   pip install PyJobrunner \nNote that ``pip`` should point to ``python3+`` installation package\n``pip3``. \n   pip install --upgrade PyJobrunner\n   pip uninstall PyJobRunner \nThe following installation option can be used to allow for using\ncustomization specific to instruments. \n   pip install PyJobruner --user --install-option=\"--with-instruments\" \nThere maybe situations where users may want to install Jobrunner in\ndevelopment mode $\\\\textemdash$ to design new features, debug, or\ncustomize options/commands to their needs. This can be easily\naccomplished using the ``setup`` script located in the project root\ndirectory and executing, \n   ./setup develop --with-instruments \nDevelopment mode enables testing of features/updates directly from the\nsource code and is an effective method for debugging. Note that the\n``setup`` script relies on ``click``, which can be installed using, \n   pip install click \nThe ``jobrunner`` script is installed in ``$HOME/.local/bin`` directory\nand therfore the environment variable, ``PATH``, should be updated to\ninclude this location for command line use. \n``python3.8+`` ``click`` ``toml`` ``pyyaml`` ``alive-progress`` \n   $ tree Project/sites\n   \u251c\u2500\u2500 sites/\n       \u251c\u2500\u2500 sedona/\n           \u251c\u2500\u2500 modules.sh \nThe site-specific subnode ``sites/sedona/`` consists of commands to load\nplatform specific compilers and libraries required to build Flash-X\nwhich is the instrument used to perform the experiments. \n   # file: Project/sites/sedona/modules.sh\n   #\n   # Load Message Passing Interface (MPI) and\n   # Hierarchical Data Format (HDF5) libraries\n   module load openmpi\n   module load hdf5 \nThere are situations where requirements for Flash-X are not available as\nmodules and may have to be built from their respective source. This is\nusually the case when a specific version of the library or compiler is\ndesired. The ``software/`` node provides configuration details for\nthese, \n   \u251c\u2500\u2500 software/\n       \u251c\u2500\u2500 Jobfile\n       \u251c\u2500\u2500 setupFlashX.sh\n       \u251c\u2500\u2500 setupAMReX.sh \nHere the script ``setupAMReX.sh`` provides commands to get the source\ncode for AMReX(https://github.com/AMReX-Codes/amrex) and build it for\ndesired version and configuration. The script ``setupFlashX.sh`` sets\nthe version for Flash-X to perform the experiments. The ``Jobfile``\nindicates the use of these files by assigning them to specific Jobrunner\ncommands, \n   # file: Project/software/Jobfile\n   #\n   # Run these scripts during jobrunner setup command\n   job:\n     setup:\n       - setupAMReX.sh\n       - setupFlashX.sh \nThe ``environment.sh`` file at the root of the ``Project`` directory\nsources the site-specific ``modules.sh`` and sets environment variables\nfor compilation and execution. \n   # file: Project/environment.sh\n   #\n   # Set project home using realpath of current directory\n   export PROJECT_HOME=$(realpath .) \n   # Enter site information and source the modules\n   SiteName=\"sedona\"\n   SiteHome=\"$PROJECT_HOME/sites/$SiteName\"\n   source $SiteHome/modules.sh \n   # Set environment variables required for Makefile.h\n   export MPI_HOME=$(which mpicc | sed s/'\\/bin\\/mpicc'//)\n   export HDF5_HOME=$(which h5pfc | sed s/'\\/bin\\/h5pfc'//) \n   # Assign path for local AMReX installation\n   export AMREX2D_HOME=\"$PROJECT_HOME/software/AMReX/install-$SiteName/2D\"\n   export AMREX3D_HOME=\"$PROJECT_HOME/software/AMReX/install-$SiteName/3D\" \nThe ``Jobfile`` at this node assigns the use of ``environment.sh``, \n   # Scripts to include during jobrunner setup and submit commands\n   job:\n     setup:\n       - environment.sh\n     submit:\n       - environment.sh \nDuring the invocation of ``jobrunner setup software/`` command,\n``environment.sh``, ``setupAMReX.sh`` and ``setupFlashX.sh`` are\ncombined using the information in Jobfiles and executed in sequence to\nbuild the software stack. \n   # file: Project/simulation/PoolBoiling/Jobfile\n   #\n   job:\n     # list of scripts that need to execute during setup\n     setup:\n       - flashSetup.sh \n     # target executable created during setup\n     target: flashx \n     # list of scripts that need to execute during submit\n     submit:\n       - flashRun.sh \nDuring the invocation of ``jobrunner setup simulation/PoolBoiling``\ncommand, ``environment.sh`` and ``flashSetup.sh`` are combined using the\ninformation in Jobfiles and executed in sequence to build the target\nexecutable ``flashx``. The software stack built in the previous step is\navailable through the environment variables in ``environment.sh``. \n   # file: Project/Jobfile\n   #\n   # Scripts to include during jobrunner setup and submit commands\n   job:\n     setup:\n       - environment.sh\n     submit:\n       - environment.sh \n   # schedular command and options to dispatch jobs\n   schedular:\n     command: slurm\n     options:\n       - \"#SBATCH -t 0-30:00\"\n       - \"#SBATCH --job-name=myjob\"\n       - \"#SBATCH --ntasks=5\" \n"
                },
                "confidence": 0.9847306327816922,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "``jobrunner clean <JobWorkDir>`` removes Jobrunner artifacts from the\nworking directory \n-  `akashdhruv/Multiphase-Simulations\n   <https://github.com/akashdhruv/Multiphase-Simulations>`_: A lab\n   notebook to manage development of Flash-X \n-  `Lab-Notebooks/Outflow-Forcing-BubbleML\n   <https://github.com/Lab-Notebooks/Outflow-Forcing-BubbleML>`_:\n   Reproducibility capsule for research papers\n   (https://arxiv.org/pdf/2306.10174.pdf)\n   (https://arxiv.org/pdf/2307.14623.pdf) \n.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n \n",
                    "original_header": "Clean"
                },
                "confidence": 0.988198310442634,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/akashdhruv/jobrunner/development/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-01T15:22:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T08:26:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 5177
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 3385
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 3365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 830
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 799
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "sed",
                    "name": "sed",
                    "type": "Programming_language",
                    "size": 591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "548": {
        "filename": "ashwinprasadme_headergen_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/secure-software-engineering/HeaderGen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install headergen\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install HeaderGen",
                    "parent_header": [
                        "HeaderGen"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      git clone --recursive\n      git submodule update --init --recursive\n      git pull --recurse-submodules \n      docker build -t headergen .\n      docker run -v {$PWD}/headergen_output:/headergen_output -it headergen bash \n      docker build -t headergen .\n      docker run -v \"%cd%\"/headergen_output:/headergen_output -it headergen bash \n",
                    "original_header": "1. Build container"
                },
                "confidence": 0.991561074121421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      rm framework_models/models_cache.pickle\n      rm pycg_extended/machinery/pytd_cache.pickle \n+ Setup venv and dependencies with `setup.sh` script \n      ./setup.sh -i \n      make ROOT_PATH=<path to repo root> microbench \n      make ROOT_PATH=<path to repo root> realworldbench \n      make ROOT_PATH=<path to repo root> all \n",
                    "original_header": "Building from Source"
                },
                "confidence": 0.9815456418981499,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "      make clean \n",
                    "original_header": "2. Run HeaderGen benchmarks from inside contatiner"
                },
                "confidence": 0.9100120183711615,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ashwinprasadme/headergen/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-07T16:20:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:54:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7525477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6071246
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 44823
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4989
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 3751
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "874": {
        "filename": "salab_refsearch_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salab/refsearch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Launch the app\n   - `make up`\n   - or equivalently, `docker compose --compatibility up -d --build`\n2. Go to http://localhost:8080/ to view the app.\n   - See \"Usage\" below for how to use the app.\n3. Stop the app\n   - `make down`\n   - or equivalently, `docker compose down`\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "RefSearch",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salab/refsearch/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Playground: https://refsearch.toki317.dev/\n \n",
                    "original_header": "RefSearch"
                },
                "confidence": 0.980505627250361,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salab/refsearch/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-04T05:14:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-20T02:52:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 143732
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 34174
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1616
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "686": {
        "filename": "moji1_tp_rl_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/moji1/tp_rl",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-07-13T23:20:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-27T19:39:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135975
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "669": {
        "filename": "ColinIanKing_stress-ng_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ColinIanKing/stress-ng",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The [Ubuntu stress-ng reference guide](https://wiki.ubuntu.com/Kernel/Reference/stress-ng)\ncontains a brief overview and worked examples.\n",
                    "type": "Text_excerpt",
                    "original_header": "Quick Start Reference Guide",
                    "parent_header": [
                        "stress-ng (stress next generation)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a href=\"https://repology.org/project/stress-ng/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/stress-ng.svg\" alt=\"Packaging status\" align=\"right\">\n</a> \n  * 350+ stress tests\n  * 80+ CPU specific stress tests that exercise floating point, integer,\n    bit manipulation and control flow\n  * 20+ virtual memory stress tests\n  * 40+ file system stress tests\n  * 30+ memory/CPU cache stress tests\n  * portable: builds on Linux (Debian, Devuan, RHEL, Fedora, Centos, Slackware\n    OpenSUSE, Ubuntu, etc..), Solaris, FreeBSD, NetBSD, OpenBSD, DragonFlyBSD,\n    Minix, Android, MacOS X, Serenity OS, GNU/Hurd, Haiku, Windows Subsystem\n    for Linux, Cygwin and SunOs/Dilos/Solaris.\n    with gcc, musl-gcc, clang, icc, icx, tcc and pcc.\n  * tested on alpha, armel, armhf, arm64, hppa, i386, loong64, m68k, mips32, mips64,\n    power32, ppc64el, risc-v, sh4, s390x, sparc64, x86-64 \n",
                    "original_header": "stress-ng (stress next generation)"
                },
                "confidence": 0.9991103772859324,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "https://github.com/ColinIanKing/stress-ng/tarball/version \nhttps://github.com/ColinIanKing/stress-ng/tarball/V0.13.05\n \n",
                    "original_header": "Tarballs"
                },
                "confidence": 0.9999315469409893,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Recent versions of stress-ng are available in the Ubuntu stress-ng ppa for various\nUbuntu releases: \nhttps://launchpad.net/~colin-king/+archive/ubuntu/stress-ng\n```\nsudo add-apt-repository ppa:colin-king/stress-ng\nsudo apt update\nsudo apt install stress-ng\n```\n \n",
                    "original_header": "Debian packages for Ubuntu"
                },
                "confidence": 0.9999375671493156,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build, the following libraries will ensure a fully functional stress-ng\nbuild: (note libattr is not required for more recent disto releases). \nDebian, Ubuntu: \n  * gcc g++ libacl1-dev libaio-dev libapparmor-dev libatomic1 libattr1-dev libbsd-dev libcap-dev libeigen3-dev libgbm-dev libcrypt-dev libglvnd-dev libipsec-mb-dev libjpeg-dev libjudy-dev libkeyutils-dev libkmod-dev libmd-dev libmpfr-dev libsctp-dev libxxhash-dev zlib1g-dev \nRHEL, Fedora, Centos (static builds): \n  * gcc g++ eigen3-devel glibc-static Judy-devel keyutils-libs-devel libacl-devel libaio-devel libatomic-static libattr-devel libbsd-devel libcap-devel libgbm-devel libcrypt-devel libglvnd-core-devel libglvnd-devel libjpeg-devel libmd-devel libX11-devel libXau-devel libxcb-devel lksctp-tools-devel mpfr-devel xorg-x11-proto-devel xxhash-devel zlib-devel \nSUSE:\n  * gcc gcc-c++ eigen3-devel keyutils-devel libaio-devel libapparmor-devel libatomic1 libattr-devel libbsd-devel libcap-devel libgbm-devel libglvnd-devel libjpeg-turbo libkmod-devel libmd-devel libseccomp-devel lksctp-tools-devel mpfr-devel xxhash-devel zlib-devel \nAlpine Linux:\n  * build-base eigen-dev jpeg-dev judy-dev keyutils-dev kmod-dev libacl-dev libaio-dev libatomic libattr libbsd-dev libcap-dev libmd-dev libseccomp-dev lksctp-tools-dev mesa-dev mpfr-dev xxhash-dev zlib-dev \nNOTE: the build will try to detect build dependencies and will build an image\nwith functionality disabled if the support libraries are not installed. \nAt build-time stress-ng will detect kernel features that are available on the\ntarget build system and enable stress tests appropriately. Stress-ng has been\nbuild-tested on Ubuntu, Debian, Debian GNU/Hurd, Slackware, RHEL, SLES, Centos,\nkFreeBSD, OpenBSD, NetBSD, FreeBSD, Debian kFreeBSD, DragonFly BSD, OS X, Minix,\nSolaris 11.3, OpenIndiana and Hiaku. Ports to other POSIX/UNIX like operating\nsystems should be relatively easy. \nNOTE: ALWAYS run ```make clean``` after fetching changes from the git repository\nto force the build to regenerate the build configuration file. Parallel builds using\nmake -j are supported. \nTo build on BSD systems, one requires gcc and GNU make:\n```\n        CC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on OS X systems, just use:\n```\n\tmake clean\n\tmake -j\n``` \nTo build on MINIX, gmake and clang are required:\n```\n\tCC=clang gmake clean\n\tCC=clang gmake\n``` \nTo build on SunOS, one requires GCC and GNU make, build using:\n```\n\tCC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on Dilos, one requires GCC and GNU make, build using:\n```\n\tCC=gcc gmake clean\n\tCC=gcc gmake\n``` \nTo build on Haiku R1/beta5:\n```\n\t# GCC\n\tmake clean\n\tmake\n\t# Clang\n\tCC=clang make clean\n\tCC=clang make\n``` \nTo build a static image (example, for Android), use:\n```\n\t# path to Android NDK\n\texport NDK=$HOME/android-ndk-r27-beta2\n\texport PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin\n\texport TARGET=aarch64-linux-android\n\t# Define Android API level\n\texport API=27\n\texport CC=$TARGET$API-clang\n\n\tmake clean\n\tSTATIC=1 make\n``` \nTo build with full warnings enabled:\n```\n\tmake clean\n\tPEDANTIC=1 make\n``` \nTo build with the Tiny C compiler:\n```\n\tmake clean\n\tCC=tcc make\n``` \nTo build  with the PCC portable C compiler use:\n```\n\tmake clean\n\tCC=pcc make\n``` \nTo build with the musl C library:\n```\n\tmake clean\n\tCC=musl-gcc\n``` \nTo build with the Intel C compiler icc use:\n```\n\tmake clean\n\tCC=icc make\n``` \nTo build with the Intel C compiler icx use:\n```\n\tmake clean\n\tCC=icx make\n``` \nTo perform a cross-compilation using gcc, use a static build, specify\nthe toolchain (both CC and CXX). For example, a mips64 cross build:\n```\n\tmake clean\n\tSTATIC=1 CC=mips64-linux-gnuabi64-gcc CXX=mips64-linux-gnuabi64-g++ make -j $(nproc)\n```\nTo perform a cross-compile for qnx, for example, a aarch64 qnx cross build:\n```\n    make clean\n    CC=aarch64-unknown-nto-qnx7.1.0-gcc CXX=aarch64-unknown-nto-qnx7.1.0-g++ STATIC=1 make\n```\n \nTo build with debug (-g) enabled use:\n```\n\tmake clean\n\tDEBUG=1 make\n```\n \n",
                    "original_header": "Building stress-ng"
                },
                "confidence": 0.9912811014759251,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ColinIanKing/stress-ng/master/README.Android"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-06-05T12:05:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T21:55:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 6333558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 323026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 24093
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 20826
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 7758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "441": {
        "filename": "UPHF_eapr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/eapr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-11-13T10:47:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-11-16T07:16:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "325": {
        "filename": "google-research_r_u_sure_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/google-research/r_u_sure",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you would like to install the R-U-SURE library on your own system, you can\nfollow the instructions below.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "It is highly recommended to install this package into a virtual environment,\nas it currently depends on a patched version of `numba` that may be incompatible\nwith a global installation.\n\nTo create and activate a virtual environment, you can run the Bash commands\n\n```\n# you can use any path here\nvenv_path=\"$HOME/venvs/rusure\"\npython3 -m venv $venv_path\nsource $venv_path/bin/activate\necho \"Active virtual environment is: $VIRTUAL_ENV\"\n```\n\n(On Linux, you may need to run `sudo apt-get install python3-venv` first.)\n",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisite: Setting up a virtual environment",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "If you want to use the `r_u_sure` package from Python without modifying it, you\ncan directly install it from GitHub using `pip`:\n\n```\n# Optional: disable some unused numba features to prevent build errors\nexport NUMBA_DISABLE_TBB=1\nexport NUMBA_DISABLE_OPENMP=1\n\npip install \"r_u_sure @ git+https://github.com/google-research/r_u_sure\"\n```\n\n`pip` will then automatically install the most recent version of the package\nand make it available from Python via `import r_u_sure`.\n\nNote that you can also add `r_u_sure @ git+https://github.com/google-research/r_u_sure`\nto your `requirements.txt` or `pyproject.toml` files if you are developing a\npackage that depends on R-U-SURE.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the package directly from GitHub",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            },
            {
                "result": {
                    "value": "If you prefer to download the R-U-SURE source files manually, or if you would\nlike to contribute to the R-U-SURE library, you can perform a local installation.\nStart by cloning this GitHub repository:\n\n```\ngit clone https://github.com/google-research/r_u_sure\ncd r_u_sure\n```\n\nNext, install it:\n\n```\n# Optional: disable some unused numba features to prevent build errors\nexport NUMBA_DISABLE_TBB=1\nexport NUMBA_DISABLE_OPENMP=1\n\npip install -e .\n```\n\nLocal edits to the source files will now be reflected properly in the python\ninterpreter.\n\n(If you'd prefer, you can also omit the `export NUMBA_DISABLE_{X}=1` lines to\ncompile those features into numba. Those features have additional dependencies;\nsee the [Numba documentation][numba-opt-deps].)\n\n[numba-opt-deps]: https://numba.readthedocs.io/en/stable/user/installing.html#build-time-environment-variables-and-configuration-of-optional-components\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing from source",
                    "parent_header": [
                        "R-U-SURE? Uncertainty-Aware Code Suggestions By Maximizing Utility Across Random User Intents",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/google-research/r_u_sure/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-10T02:10:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-14T03:27:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2867115
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1312223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "955": {
        "filename": "expressapr_expressapr_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ExpressAPR/ExpressAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Use Linux (we have tested on Ubuntu 18.04 and 22.04)\n- Install Git, JDK \u22651.8, and Python \u22653.7\n- Install [Defects4J](https://github.com/rjust/defects4j) and/or Maven if you want to validate patches with them\n- Clone this repository\n- `pip3 install -r requirements.txt`\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Preparation",
                    "parent_header": [
                        "ExpressAPR",
                        "\ud83d\udcda Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Equipped with mutation testing accerelation techniques**\n  - Mutant Schemata + Mutant Deduplication + Test Virtualization + Test Case Prioritization + Parallelization\n  - ~100x faster than `defects4j compile && defects4j test` (experimented with four APR systems) \n",
                    "original_header": "\u2728 Highlights"
                },
                "confidence": 0.9380905096958598,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Step 2: Use `-t fallback` flag.** If the result is still wrong with `--no-dedup`, it may be a problem in [VMVM](https://github.com/Programming-Systems-Lab/vmvm), a third-party Test Virtualization dependency of ExpressAPR (similar to the JVM Reset component in UniAPR). We have [already fixed a few problems we encounter](https://github.com/ExpressAPR/VMVM/compare/07a36dc21373147c50ceacd7bff2b2e7a86c8780...master) in our VMVM fork, but there may be more problems. You may investigate the problem, or pass `-t fallback` to the `expapr-cli run` command to disable Test Virtualization (and also Mutant Deduplication that depends on it).\n \n",
                    "original_header": "Q2. Patch validation results are wrong"
                },
                "confidence": 0.9745911524695523,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We currently don't support validating patches to submodules. If this is the case, please directly validate the submodule (set `-b` to the directory of the submodule), not the parent module. \n",
                    "original_header": "Q3. Cannot `init` for a Maven project"
                },
                "confidence": 0.9670008527147421,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/expressapr/expressapr/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-25T13:59:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T10:49:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 201160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 90557
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 586
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "196": {
        "filename": "Microsoft_msrc-dpu-learning-to-represent-edits_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/msrc-dpu-learning-to-represent-edits",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-10-29T19:09:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-02T01:16:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 54815
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 349
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1012": {
        "filename": "haozeke_anneal_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HaoZeke/anneal",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`pdm` is used throughout.\n``` sh\nmicromamba create -f environment.yml\nmicromamba activate anneal-dev\n```\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9991390585417838,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/haozeke/anneal/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-05T23:29:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-23T14:04:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "297": {
        "filename": "SpoonLabs_astor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/astor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Open-science repository with jMutRepair patches: <https://github.com/SpoonLabs/astor-experiments/>\n \n",
                    "original_header": "jMutRepair"
                },
                "confidence": 0.9971560800102998,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* [Sorting and Transforming Program Repair Ingredients via Deep Learning Code Similarities](https://arxiv.org/pdf/1707.04742.pdf) (Martin White, Michele Tufano, Matias Martinez, Martin Monperrus and Denys Poshyvanyk), Proceedings of SANER, 2019.  ([doi:10.1109/SANER.2019.8668043](https://doi.org/10.1109/SANER.2019.8668043))\n* Open-science repository with DeepRepair patches: <https://github.com/SpoonLabs/astor-experiments/>\n* Open-science package at Zenodo: <https://zenodo.org/record/2578775>\n \n",
                    "original_header": "DeepRepair"
                },
                "confidence": 0.9949616933620569,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Paper: [The Remarkable Role of Similarity in Redundancy-based Program Repair (arxiv 1811.05703, 2018)](http://arxiv.org/pdf/1811.05703)\n* Open-science repository: <https://github.com/kth-tcs/3sFix-experiments> \n",
                    "original_header": "3sfix"
                },
                "confidence": 0.9657704727991794,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SpoonLabs/astor/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-10-01T09:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-28T12:14:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1491193
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "228": {
        "filename": "eth-sri_mn-bab_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eth-sri/mn-bab",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\n  conda create --name MNBAB python=3.7 -y\n  conda activate MNBAB\n  ```\n\nThis script installs a few necessary prerequisites including the ELINA library and GUROBI solver and sets some PATHS. It was tested on an AWS Deep Learning AMI (Ubuntu 18.04) instance.\n\n```\nsource setup.sh\n```\n\nInstall remaining dependencies:\n```\npython3 -m pip install -r requirements.txt\nPYTHONPATH=$PYTHONPATH:$PWD\n```\n\nDownload the full MNIST, CIFAR10, and TinyImageNet test datasets in the right format and copy them into the `test_data` directory:  \n[MNIST](https://files.sri.inf.ethz.ch/sabr/mnist_test_full.csv)  \n[CIFAR10](https://files.sri.inf.ethz.ch/sabr/cifar10_test_full.csv)  \n[TinyImageNet](https://files.sri.inf.ethz.ch/sabr/tin_val.csv)  \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "MN-BaB <img width=\"100\" alt=\"portfolio_view\" align=\"right\" src=\"http://safeai.ethz.ch/img/sri-logo.svg\">"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/eth-sri/mn-bab/SABR_ready/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ngit clone --branch SABR_ready --recurse-submodules https://github.com/eth-sri/mn-bab\n``` \nor clone normally and initialize the submodule later on\n```\ngit clone --branch SABR_ready https://github.com/eth-sri/mn-bab\ngit submodule init\ngit submodule update\n```\n \nThere's no need for a further installation of the submodules. \n",
                    "original_header": "Cloning"
                },
                "confidence": 0.9717208072619531,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/eth-sri/mn-bab/SABR_ready/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-07T10:49:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-05T19:40:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1358891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "738": {
        "filename": "stg-tud_unsafe_go_study_results_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/stg-tud/unsafe_go_study_results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4130780.svg)](https://zenodo.org/record/4130780)\n\nThis is the data set and scripts for our paper \"Uncovering the Hidden Dangers: Finding Unsafe Go Code in the Wild\".\n\n**Authors:**  \nJohannes Lauinger, Lars Baumg\u00e4rtner, Anna-Katharina Wickert, and Mira Mezini  \nTechnische Universit\u00e4t Darmstadt, D-64289 Darmstadt, Germany  \nE-mail: {baumgaertner, wickert, mezini} (with) cs.tu-darmstadt.de, jlauinger (with) seemoo.tu-darmstadt.de\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data Set: Finding Unsafe Go Code in the Wild"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To create and process the data for our study, we used the following pipeline:\n\n 1. **Raw Projects and Dependencies.** This set contains the 500 open-source Go projects that we crawled from GitHub.\n    The projects at the specific revision that we examined are referenced in this repository through Git submodules.\n    The `projects/` directory contains the submodules.\n 2. **Package and Unsafe Data.** From the projects and their dependencies, we compiled the list of all packages used\n    transitively. Within all packages, we identified usages of `unsafe` Go code. The results of this stage are\n    included in the `data/` directory.\n 3. **Labeled Unsafe Usages.** We used Python to examine the data and sample 1,400 code snippets for manual classification by unsafe usage type\n    and purpose. The results of this stage are included in the `analysis/` and `labeled-usages-dataset/` directories.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Research pipeline",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "The directories in this repository contain the following:\n\n - `data/` contains gzipped versions of the CSV files holding project, package, and unsafe code block information,\n   as well as the sampled and labeled code snippets.\n - `figures/` contains Figures 1 to 5 as included in our paper.\n - `labeled-usages-dataset/` contains our data set of labaled usages of unsafe code blocks in Go code. The data set\n   is divided into 400 Go standard library usages (*std*) and 1,000 application code (non-standard library) usages\n   (app). Each directory contains subfolders with names similar to `efficiency__cast-struct`, where the purpose\n   label and usage label as used in our paper are included, separated by two underscores. Each of the directories\n   contains one file for each classified usage, as described in more detail below.\n - `projects/` contains Git submodules for each of the 500 projects under examination, set to the specific revision\n   that we analyzed.\n - `scripts/` contains Python scripts to replicate the figures and tables included in our paper, as well as the\n   data acquisition tool that we used to extract unsafe code blocks from the projects and a Jupyter notebook with\n   the Python code that we used to explore the data.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Directory structure",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "The `data/geiger_findings.csv.gz` file contains the unsafe code findings. Each line in the file represents one\nfinding. It holds the corresponding code line, as +/- 5 lines of code context, as well as meta data about the finding.\nThis meta data includes the line number, column, file, package, module, and project where it was found. Package and\nproject data is a foreign key to the `data/packages.csv.gz` and `data/projects.csv.gz` files, respectively,\nwhich provide more detailed information. For example, the packages file contains total finding counts for each\npackage.\n\nThe `data/vet_findings.csv.gz` and `data/gosec_findings.csv.gz` contain warnings that were generated by `go vet` and\n`gosec` on the packages.\n\nThe `data/` directory also contains the `sampled_usages_app.csv.gz` and `sampled_usages_std.csv.gz` files, which are\nsamples subsets of the `geiger_findings.csv.gz` file containing 1,000 and 400 unique samples together with two\nlabels for each line.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Data: unsafe code blocks",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "As described in our paper, we randomly sampled 1,400 unique unsafe usages from the 10 projects with the most overall\nunsafe usages. We then manually classified these samples in two dimensions: by what is being done and for what purpose.\n\nWe identified the following classes for the first dimension, what is being done:\n\n - `cast-struct`, `cast-basic`, `cast-bytes`, `cast-pointer`, `cast-header` (all summarized as `cast` in our paper to\n   save space): all kinds of casts between arbitrary types and structs, basic Go types, `[]byte` slices or `[N]byte`\n   arrays, actual `unsafe.Pointer` values, or `reflect.SliceHeader` and `reflect.StringHeader` values, respectively.\n - `memory-access`: dereferencing of unsafe pointers, manipulation of referenced memory, or comparison of the actual\n   stored addresses.\n - `pointer-arithmetic`: all kinds of arithmetic manipulation of addresses, such as manually advancing a slice.\n - `definition`: groups usages where a field or method of type `unsafe.Pointer` is declared for later usage.\n - `delegate`: instances where unsafe is needed only because another function requires an argument of type `unsafe.Pointer`.\n - `syscall`: groups calls to `syscall.Syscall` or other native syscalls.\n - `unused`: occurences that are not actually being used, e.g. dead code or unused function parameters.\n\nPurpose of usage is labeled with the following classes:\n\n - `efficiency`: all uses of unsafe to improve time or space complexity, such as in-place casts. Code contained in this class could also be written\n   without the use of unsafe, decreasing effeciency.\n - `serialization`: contains marshalling and serialization operations.\n - `generics`: contains usages of unsafe that achieve functionality that could have been written without unsafe if Go provided\n   support for generics.\n - `no-gc` (avoid garbage collection): contains usages where unsafe is used to tell the compiler to not free a value until\n   a function returns, such as when calling assembly code.\n - `atomic` (atomic operations): contains usages of the atomic package which require unsafe.\n - `ffi` (foreign function interface): contains calls to Cgo or other function interfaces that require unsafe by their contract.\n - `hide-escape`: contains snippets where unsafe is used to hide a value from Go escape analysis.\n - `layout` (memory layout control): contains unsafe usages to achieve low-level memory management, such as precise alignment.\n - `types`: contains unsafe usages needed to implement the Go type system itself. Only present in the `std` samples.\n - `reflect`: contains instances of type reflection and re-implementations of some types from the reflect package,\n   such as using `unsafe.Pointer` instead of `uintptr` for slice headers.\n - `unused`: again, contains occurences that are not actually being used.\n\nThe `labeled-usages-dataset` is organized as follows: the `app` and `std` contain 1,000 and 400 samples, respectively, divided by\napplication (non-standard libraries) and standard-library usages. Each of them contains subdirectories grouping the snippets by\ntheir combination of labels. The subdirectories are named similar to `efficiency__cast-struct`. Both labels of the samples are\nconcatenated using two underscores. Every combination of labels that actually contains samples has its own directory.\n\nThe samples are provided as one file for each sample. The file name is a hash of line number, file, package etc. of the finding,\nproviding a guaranteed unique name. The files contain 4 sections divided by dashes. The first section provides information\nabout the module, version, package, file, and line of the snippet. It also states which project included this snippet (but\nthere can be more projects in the data set that share usage of the snippet), and the labels as already included in the directory\nname. The information is guaranteed to be in the same line number across files. The second section contains the snippet\ncode line. The third and fourth section contain a +/- 5 lines and +/- 100 lines context, respectively.\n\nAdditionally, the labaled data set is included in machine-readable CSV format in the `data/sampled_usages_app.csv.gz` and\n`data/sampled_usaged_std.csv.gz` as described previously.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Labeled data set of unsafe usages in the wild",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the figures and tables included in our paper, simply execute the corresponding scripts in the `scripts/` directory.\nThey also provide formal documentation about the specific data analysis that we did:\n\n```\ncd scripts\n./create-figure-distribution-unsafe-types.py\n./create-figure-unsafe-import-depth.py\n./create-table-dataset-labels.py\n./create-table-dataset-projects.py\n```\n\nFigures are saved as PDF files in the same directory, tables are written to the terminal as LaTeX code.\n\nTo execute the scripts, you need the following Python libraries:\n\n - Pandas\n - Numpy\n - Matplotlib\n - Tikzplotlib\n - Seaborn\n\n",
                    "type": "Text_excerpt",
                    "original_header": "How to reproduce figures and tables",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            },
            {
                "result": {
                    "value": "To reproduce the data set, first obtain the raw project code and dependencies. The easiest way to do this is to get the\ncompressed archive with the exact project code that we used from our Zenodo record:\n[https://zenodo.org/record/4001728](https://zenodo.org/record/4001728)\n\nAlternatively, you can recursively clone this repository to check out the projects data set submodules. The projects\nare included as submodules at the correct revision that we used for analysis in this repository. They are located in\nthe `projects/` directory. After recursively cloning the repositories, you may need to run `go mod vendor` in the root\ndirectory of each repository to make sure that all dependencies are properly downloaded. This step is unnecessary when\nusing the Zenodo record.\n\nThen, build and execute the data acquisition tool in the `scripts/data-acquisition-tool` directory. The folder contains\na README file with the build instructions and usage information.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "How to reproduce the data set",
                    "parent_header": [
                        "Data Set: Finding Unsafe Go Code in the Wild"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/stg-tud/unsafe_go_study_results/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-23T08:25:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-23T15:43:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 99577
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 46254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11358
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "419": {
        "filename": "SNTSVV_PRINS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SNTSVV/PRINS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Firstly, to render generated models in PDF, you must install `dot`. \nTry the following command to check if `dot` is installed:\n```shell script\ndot -V\n```\n\nIf `dot` is not installed, you can install it by following [this page](https://www.graphviz.org/download/).\nOn Windows, you can follow the [installation procedure](https://forum.graphviz.org/t/new-simplified-installation-procedure-on-windows/224).\n\nSecond, initialize python's virtual environment & install required packages:\n```shell script\npython3 -m venv venv\nsource venv/bin/activate  # venv should be activated during the execution of PRINS\npip install -r requirements.txt\n```\n\nFinally, you must have JDK to run MINT, which is used as a backend for PRINS. \nTry the following command to check if JDK is installed:\n```shell script\njava -version\n```\n\nIf JDK is not installed, you can install it by following [this page](https://openjdk.org/install/).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "PRINS: Scalable Model Inference for Component-based System Logs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can simply run the following script:\n```shell script\n(venv) python check_dataset_summary.py\n``` \n",
                    "original_header": "Dataset Check"
                },
                "confidence": 0.9997507650405713,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run the unit tests:\n```shell script\ncd PRINS\n(venv) python -m unittest\n``` \n",
                    "original_header": "Unit Tests"
                },
                "confidence": 0.9945206931247464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell script\n(venv) PROMPT PRINS-expr % python run_model_inference.py -h\nusage: run_model_inference.py [-h] [-s SYSTEM] [-n NUM_LOGS] [--prins_only]\n                              [--mint_sys_only] [-d DUPLICATE_RANGE]\n                              [-r REPETITIONS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SYSTEM, --system SYSTEM\n                        System name (default=None)\n  -n NUM_LOGS, --num_logs NUM_LOGS\n                        Number of logs (default=all)\n  --prins_only          Specify this to run PRINS only\n  --mint_sys_only       Specify this to run MINT-SYS only\n  -d DUPLICATE_RANGE, --duplicate_range DUPLICATE_RANGE\n                        Input log duplication factor range 'from,to'\n                        (default='1,1')\n  -r REPETITIONS, --repetitions REPETITIONS\n                        Number of repetitions (default=1)\n```\n \n",
                    "original_header": "Execution Time Evaluation (RQ1, RQ2, RQ4)"
                },
                "confidence": 0.999999674810677,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell script\n(venv) PROMPT PRINS-expr % python run_k_folds_cv.py -h\nusage: run_k_folds_cv.py [-h] [-k NUM_FOLDS] [-n NUM_LOGS] system technique\n\npositional arguments:\n  system                System name (e.g., Hadoop)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -k NUM_FOLDS, --num_folds NUM_FOLDS\n                        Number of folds\n  -n NUM_LOGS, --num_logs NUM_LOGS\n                        Number of logs (default: all)\n```\n \n",
                    "original_header": "Accuracy Evaluation (RQ3, RQ5)"
                },
                "confidence": 0.9570649168023051,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the script (note that the experimental results must be provided in `/expr_output`; by default, the results reported in the paper are given):\n```shell script\n(venv) python run_analyze_results.py\n``` \n",
                    "original_header": "Result Data Analysis"
                },
                "confidence": 0.9261053076600447,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SNTSVV/PRINS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-03T14:53:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T08:26:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 168874
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "499": {
        "filename": "NVIDIA_NVFlare_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NVIDIA/NVFlare",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the [current release](https://pypi.org/project/nvflare/):\n```\n$ python3 -m pip install nvflare\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "NVIDIA FLARE"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NVIDIA/NVFlare/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-23T17:26:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:43:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6181189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 494383
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Astro",
                    "name": "Astro",
                    "type": "Programming_language",
                    "size": 165223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 121843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 23925
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 14203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 6732
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 350
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Package Manager"
        ]
    },
    "46": {
        "filename": "PrivacyEngineering_janus-graphql-anonym-directives_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/janus-graphql-anonym-directives",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "npm install graphql-anonym-directives\r\n```\r",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "graphql-anonym-directives",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/janus-graphql-anonym-directives/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-30T08:52:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-07-06T13:49:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "1131": {
        "filename": "s2-group_msr-2021-robotics-green-practices-replication-package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S2-group/msr-2021-robotics-green-practices-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-22T21:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-14T14:04:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95718
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 86
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "974": {
        "filename": "solar-group_sentinel_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SOLAR-group/sentinel",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-10-20T20:46:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-05-20T12:15:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 795420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "17": {
        "filename": "WilliamLwj_PyXAB_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/WilliamLwj/PyXAB",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install via pip, run the following lines of code\n```bash\npip install PyXAB                 # normal install\npip install --upgrade PyXAB       # or update if needed\n```\n\n\nTo install via git, run the following lines of code\n```bash\ngit clone https://github.com/WilliamLwj/PyXAB.git\ncd PyXAB\npip install .\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PyXAB - Python *X*-Armed Bandit"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<p align=\"left\">\n<a href='https://pypi.org/project/PyXAB/'>\n       <img src='https://img.shields.io/pypi/v/PyXAB.svg?color=yellow' alt='PyPI version' />\n</a>\n<a href=\"https://codecov.io/gh/WilliamLwj/PyXAB\" > \n <img src=\"https://codecov.io/gh/WilliamLwj/PyXAB/branch/main/graph/badge.svg?token=VACRX9AQBM\"/> \n </a>\n<a href='https://pyxab.readthedocs.io/en/latest/?badge=latest'>\n    <img src='https://readthedocs.org/projects/pyxab/badge/?version=latest' alt='Documentation Status' />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/codeql.yml\" target=\"blank\">\n<img src=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/codeql.yml/badge.svg\" alt=\"Code style: black\" />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/testing.yml\" target=\"blank\">\n<img src=\"https://github.com/WilliamLwj/PyXAB/actions/workflows/testing.yml/badge.svg\" alt=\"testing\" />\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/fork\" target=\"blank\">\n<img src=\"https://img.shields.io/github/forks/WilliamLwj/PyXAB?\" alt=\"github-PyXAB forks\"/>\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/stargazers\" target=\"blank\">\n<img src=\"https://img.shields.io/github/stars/WilliamLwj/PyXAB?\" alt=\"github-PyXAB stars\"/>\n</a>\n<a href=\"https://pepy.tech/project/pyxab\" target=\"blank\">\n<img src=\"https://static.pepy.tech/badge/pyxab\" alt=\"downloads\"/>\n</a>\n<a href=\"https://github.com/WilliamLwj/PyXAB/blob/main/LICENSE\" target=\"blank\">\n<img src=\"https://img.shields.io/github/license/WilliamLwj/PyXAB?color=purple\" alt=\"github-PyXAB license\" />\n</a>\n<a href=\"https://github.com/psf/black\" target=\"blank\">\n<img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\" />\n</a>\n</p> \n\n<p align='center'>\n  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/HCT_trajectory.gif\" alt=\"trajectory\" width=\"48%\"/>  \n  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/HCT_heatmap.gif\" alt=\"heatmap\" width=\"48%\"/>  \n</p> \n",
                    "original_header": "PyXAB - Python *X*-Armed Bandit"
                },
                "confidence": 0.9999999179341397,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Objectives <img width=200/>| Image | \n| --- |--- |\n| [Garland](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Garland.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Garland.png\" alt=\"Garland\" width=\"100\"/> |\n| [DoubleSine](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/DoubleSine.py)  | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/DoubleSine.png\" alt=\"DoubleSine\" width=\"100\"/>  |\n| [DifficultFunc](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/DifficultFunc.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/DifficultFunc.png\" alt=\"DifficultFunc\" width=\"100\"/>  |\n| [Ackley](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Ackley.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Ackley.png\" alt=\"Ackley\" width=\"100\"/>  |\n| [Himmelblau](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Himmelblau.py) | <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Himmelblau.png\" alt=\"Himmelblau\" width=\"100\"/>  |\n| [Rastrigin](https://github.com/WilliamLwj/PyXAB/blob/main/PyXAB/synthetic_obj/Rastrigin.py) |  <img src=\"https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/figs/synthetic/Rastrigin.png\" alt=\"Rastrigin\" width=\"100\"/>  | \n",
                    "original_header": "Synthetic objectives"
                },
                "confidence": 0.9999999999777742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/WilliamLwj/PyXAB/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-16T19:21:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T07:07:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 198522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "335": {
        "filename": "awsm-research_ChatGPT4Vul_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/awsm-research/ChatGPT4Vul",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First of all, clone this repository to your local machine and access the main dir via the following command:\n```\ngit clone https://github.com/awsm-research/ChatGPT4Vul.git\ncd ChatGPT4Vul\n``` \nThen run the following command to dowload and unzip the experimental datasets:\n```\nsh download_data.sh\n``` \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9996959190729948,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/awsm-research/ChatGPT4Vul/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-15T06:37:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-20T13:53:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 613660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 17952
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "430": {
        "filename": "Spirals-Team_coming_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SpoonLabs/coming",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Coming is deployed on Maven Central, see [past versions](https://repo1.maven.org/maven2/com/github/spoonlabs/coming/).\nAs of version 1.72 (May 2024), it requires Java 17.\n\nTo build yourself, the procedure is as follows.\n\nAdd a github token in `.m2/settings.xml`.\n\n```xml\n<settings>\n  <servers>\n    <server>\n      <id>brufulascam</id>\n      <username>yourlogin</username>\n      \n      <password>FOOBAR</password>\n    </server>\n  </servers>\n</settings>\n```\n\n\nInstall a JDK 17 and configure Maven or your IDE to use it.\n\n\n```\n$ export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/\n$ mvn -version\nApache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 17.0.9, vendor: Private Build, runtime: /usr/lib/jvm/java-17-openjdk-amd64\n\n# now installing\n$ mvn install -DskipTests\n```\n\nTests:\n\n```\ngit clone https://github.com/SpoonLabs/repogit4testv0\nmvn test\n```\n\n\n`repogit4testv0` is a GIT repository included inside Coming which is used by the test cases.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Coming"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "value": "\nFor studying only commits which messages include words related to bug fixing (e.g., bug, fix, issue), add the following command.\n\n```\n\n-filter bugfix \n```\n\nThe bugfix keywords are predefined. If you want to use  other keywords, use the `Custom keywords`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Bug fix keywords",
                    "parent_header": [
                        "Coming",
                        "Filtering Commits",
                        "By commit message"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming is a tool for commit analysis in git repositories. \n",
                    "original_header": "Coming"
                },
                "confidence": 0.9599959789662506,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In order to perform an analysis of possible repair tools that may have generated commits use the python script at https://github.com/kth-tcs/defects4j-repair-reloaded/tree/comrepair-coming/. \n",
                    "original_header": "Mode Repairability"
                },
                "confidence": 0.9964233947156539,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Coming read the input from the folder indicated by the argument `-location`. The kind of input depends on the argument `-input`. \n \n",
                    "original_header": "Input Types"
                },
                "confidence": 0.9268920145664327,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If `-input filespair`, the location argument is supposed to specified in the following format: `-location <source_file_path>:<target_file_path>` \n",
                    "original_header": "filespair"
                },
                "confidence": 0.9783324316147742,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "### files \nIf `-input files`, the location path should follow the following hierarchy. Note here `-location <location_arg>`.\n```\n<location_arg>\n\u251c\u2500\u2500 <diff_folder>\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 <modif_file>\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 <diff_folder>_<modif_file>_s.java\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 <diff_folder>_<modif_file>_t.java\n```\nIn the above case, the analysis are performed on the revision form `<diff_folder>_<modif_file>_s.java` to `<diff_folder>_<modif_file>_t.java`, where `s` stands for source and `t` stands for target. \n",
                    "original_header": "files"
                },
                "confidence": 0.9993044110650349,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For studying only commits which messages include `[MATH-`, add the following two commands:\n```\n\n-filter keywords filtervalue [MATH- \n\n```\n \n",
                    "original_header": "Custom keywords"
                },
                "confidence": 0.994973291005867,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The argument `-filter withtest` indicates that only commits with at least one modification on test cases are considered.\n \n",
                    "original_header": "By presence of Tests"
                },
                "confidence": 0.9217881708805058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Spirals-Team/coming/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-10-01T14:15:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-30T13:11:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 117331202
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "287": {
        "filename": "sergioburdisso_pyss3_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sergioburdisso/pyss3",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\nSimply use:\n```console\npip install pyss3\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "A Python package implementing a new simple and interpretable model for text classification",
                        "Want to give PySS3 a shot? :eyeglasses: :coffee:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sergioburdisso/pyss3/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ":sushi: **Online live demos:** http://tworld.io/ss3/ :icecream::ice_cream::cake: \n",
                    "original_header": "A Python package implementing a new simple and interpretable model for text classification"
                },
                "confidence": 0.9738462335345947,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sergioburdisso/pyss3/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-11T16:14:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T09:47:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 334711
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 57852
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 18099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "337": {
        "filename": "sola-st_Nalin_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sola-st/Nalin",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "#### Python Packages\n\nThe required packages are listed in _requirements.txt_. The packages may be installed using the command ```pip install -r requirements.txt```. \nAdditionally, install the [PyTorch](https://pytorch.org/get-started/locally/) package (We have tested on PyTorch version 1.10.1).  \n\n```shell\npip install -r requirements.txt\npip install torch==1.10.1+cpu torchvision==0.11.2+cpu torchaudio==0.10.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html\n```\n\n\ud83d\udca1 The above command will install the **CPU** version of PyTorch. If you want CUDA support, please change the command accordingly as mentioned in the [link](https://pytorch.org/get-started/locally).\n\n#### Jupyter Notebook Dataset\n\nWe use the dataset from a CHI\u201918 [paper](https://dl.acm.org/doi/10.1145/3173574.3173606) that has analyzed more than 1.3 million publicly available Jupyter \nNotebooks from GitHub. Download the dataset using the [link](https://library.ucsd.edu/dc/collection/bb6931851t).\nWe provide a sample of about 2000 Jupyter notebooks (_benchmark/jupyter_notebook_datasets/sample.zip_) obtained from this dataset for testing. \n\n#### Embedding\n\nDownload the embedding file from the [link](https://u.pcloud.link/publink/show?code=XZyeJaXZrnrbvwzBcYSOWYgzsn4usJ6DOqPy) and put in the _benchmark_ folder.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "\ud83d\udccc\nWe have tested using Ubuntu 18.04 LTS and Python 3.8.12. Additionally, we use a Docker \ncontainer to run dynamic analysis which also needs to be installed. \n",
                    "type": "Text_excerpt",
                    "original_header": "Requirements &amp; Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "The directory structure is as follows:\n\n```shell\nsrc/ # The root directory of all source files\nbenchmark/ # This may contain the input Python files & the Jupyter Notebooks\ndynamic_analysis_runner/ # Code for running Dynamic Analysis\nsrc/dynamic_analysis_tracker_local_package/ # Python package for saving the assignments encountered during execution\nsrc/get_scripts_and_instrument/ # Code for getting Jupyter Notebooks, converting them to Python scripts and instrumenting\nsrc/nn/ # Code for running the Classifier\nresults/ # The results generated by running the experiments are written here\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Directory Structure",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "The required packages are listed in _requirements.txt_. The packages may be installed using the command ```pip install -r requirements.txt```. \nAdditionally, install the [PyTorch](https://pytorch.org/get-started/locally/) package (We have tested on PyTorch version 1.10.1).  \n\n\ud83d\udccc\n```shell\npip install -r requirements.txt\npip install torch==1.10.1+cpu torchvision==0.11.2+cpu torchaudio==0.10.1+cpu -f https://download.pytorch.org/whl/cpu/torch_stable.html\n```\n\n\ud83d\udca1 The above command will install the **CPU** version of PyTorch. If you want CUDA support, please change the command accordingly as mentioned in the [link](https://pytorch.org/get-started/locally).\n",
                    "type": "Text_excerpt",
                    "original_header": "Python Packages",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "We use the dataset from a CHI\u201918 [paper](https://dl.acm.org/doi/10.1145/3173574.3173606) that has analyzed more than 1.3 million publicly available Jupyter \nNotebooks from GitHub. Download the dataset using the [link](https://library.ucsd.edu/dc/collection/bb6931851t).\nWe provide a sample of about 2000 Jupyter notebooks (_benchmark/jupyter_notebook_datasets/sample.zip_) obtained from this dataset for testing (Download the sample from \nthe Zenodo [archive](https://zenodo.org/record/6078527)). \n",
                    "type": "Text_excerpt",
                    "original_header": "Jupyter Notebook Dataset",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "value": "\ud83d\udccc\nDownload the embedding file present at _benchmark/python_embeddings.bin_ from the Zenodo [archive](https://zenodo.org/record/6078527) and put in the _benchmark_ folder.\n\n---\n",
                    "type": "Text_excerpt",
                    "original_header": "Embedding",
                    "parent_header": [
                        "Requirements &amp; Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Simply run or follow the \ud83d\udccc marked instructions from the root directory of this repository. \n \n",
                    "original_header": "TL;DR \ud83e\ude9c"
                },
                "confidence": 0.9994997770758726,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command from the root folder. \n\ud83d\udccc\n```bash\npython src/get_scripts_and_instrument/run_get_scripts_and_instrument.py\n``` \nBy default, this script should: \n1) Extract the Jupyter notebooks present in '_benchmark/jupyter_notebook_datasets/sample.zip_' to '_benchmark/python_scripts_'\n2) Convert the extracted notebooks to Python script \n3) Delete the extracted notebooks\n4) Instrument the converted Python scripts \nNot all Jupyter Notebooks present in _sample.zip_ get instrumented. Some encounter errors while conversion to Python\nscripts and some during instrumentation. \n \n",
                    "original_header": "Instrument Python files for tracking assignments"
                },
                "confidence": 0.9881671002324744,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "All experiments using the classifier is run using the command ```python src/nn/run_classification.py```.\n \n",
                    "original_header": "2. Classifier \ud83e\udd9e"
                },
                "confidence": 0.9958202355966442,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/Nalin/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-08T12:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T21:39:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 141241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 110467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Container"
        ]
    },
    "126": {
        "filename": "OpenBMB_ChatDev_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OpenBMB/ChatDev",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"center\">\n    \u3010English   | <a href=\"readme/README-Chinese.md\">Chinese</a> | <a href=\"readme/README-Japanese.md\">Japanese</a> | <a href=\"readme/README-Korean.md\">Korean</a> | <a href=\"readme/README-Filipino.md\">Filipino</a> | <a href=\"readme/README-French.md\">French</a> | <a href=\"readme/README-Slovak.md\">Slovak</a> | <a href=\"readme/README-Portuguese.md\">Portuguese</a> | <a href=\"readme/README-Spanish.md\">Spanish</a> | <a href=\"readme/README-Dutch.md\">Dutch</a> | <a href=\"readme/README-Turkish.md\">Turkish</a> | <a href=\"readme/README-Hindi.md\">Hindi</a> | <a href=\"readme/README-Bahasa-Indonesia.md\">Bahasa Indonesia</a> | <a href=\"readme/README-Russian.md\">Russian</a> | <a href=\"readme/README-Urdu.md\">Urdu</a>\u3011\n</p>\n<p align=\"center\">\n    \u3010\ud83d\udcda <a href=\"wiki.md\">Wiki</a> | \ud83d\ude80 <a href=\"wiki.md#visualizer\">Visualizer</a> | \ud83d\udc65 <a href=\"Contribution.md\">Community Built Software</a> | \ud83d\udd27 <a href=\"wiki.md#customization\">Customization</a> | \ud83d\udc7e <a href=\"https://discord.gg/bn4t2Jy6TT\")>Discord</a>\u3011 \n",
                    "original_header": "Communicative Agents for Software Development"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* November 2, 2023: ChatDev is now supported with a new feature: incremental development, which allows agents to develop upon existing codes. Try `--config \"incremental\" --path \"[source_code_directory_path]\"` to start it.\n  <p align=\"center\">\n  <img src='./misc/increment.png' width=700>\n  </p> \n* October 26, 2023: ChatDev is now supported with Docker for safe execution (thanks to contribution from [ManindraDeMel](https://github.com/ManindraDeMel)). Please see [Docker Start Guide](wiki.md#docker-start).\n  <p align=\"center\">\n  <img src='./misc/docker.png' width=400>\n  </p>\n* September 25, 2023: The **Git** mode is now available, enabling the programmer <img src='visualizer/static/figures/programmer.png' height=20> to utilize Git for version control. To enable this feature, simply set ``\"git_management\"`` to ``\"True\"`` in ``ChatChainConfig.json``. See [guide](wiki.md#git-mode).\n  <p align=\"center\">\n  <img src='./misc/github.png' width=600>\n  </p>\n- September 20, 2023: The **Human-Agent-Interaction** mode is now available! You can get involved with the ChatDev team by playing the role of reviewer <img src='visualizer/static/figures/reviewer.png' height=20> and making suggestions to the programmer <img src='visualizer/static/figures/programmer.png' height=20>;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Human\"``. See [guide](wiki.md#human-agent-interaction) and [example](WareHouse/Gomoku_HumanAgentInteraction_20230920135038).\n  <p align=\"center\">\n  <img src='./misc/Human_intro.png' width=600>\n  </p>\n- September 1, 2023: The **Art** mode is available now! You can activate the designer agent <img src='visualizer/static/figures/designer.png' height=20> to generate images used in the software;\n  try ``python3 run.py --task [description_of_your_idea] --config \"Art\"``. See [guide](wiki.md#art) and [example](WareHouse/gomokugameArtExample_THUNLP_20230831122822).\n- August 28, 2023: The system is publicly available.\n- August 17, 2023: The v1.0.0 version was ready for release.\n- July 30, 2023: Users can customize ChatChain, Phase, and Role settings. Additionally, both online Log mode and replay\n  mode are now supported.\n- July 16, 2023: The [preprint paper](https://arxiv.org/abs/2307.07924) associated with this project was published.\n- June 30, 2023: The initial version of the ChatDev repository was released.\n</details>\n \n",
                    "original_header": "\ud83c\udf89 News"
                },
                "confidence": 0.9927929633478683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<https://github.com/OpenBMB/ChatDev/assets/11889052/80d01d2f-677b-4399-ad8b-f7af9bb62b72>\n \n",
                    "original_header": "\u2753 What Can ChatDev Do?"
                },
                "confidence": 0.998083881578065,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To get started, follow these steps: \n1. **Clone the GitHub Repository:** Begin by cloning the repository using the command: \n   ```\n   git clone https://github.com/OpenBMB/ChatDev.git\n   ``` \n2. **Set Up Python Environment:** Ensure you have a version 3.9 or higher Python environment. You can create and\n   activate this environment using the following commands, replacing `ChatDev_conda_env` with your preferred environment\n   name: \n   ```\n   conda create -n ChatDev_conda_env python=3.9 -y\n   conda activate ChatDev_conda_env\n   ``` \n3. **Install Dependencies:** Move into the `ChatDev` directory and install the necessary dependencies by running: \n   ```\n   cd ChatDev\n   pip3 install -r requirements.txt\n   ``` \n4. **Set OpenAI API Key:** Export your OpenAI API key as an environment variable. Replace `\"your_OpenAI_API_key\"` with\n   your actual API key. Remember that this environment variable is session-specific, so you need to set it again if you\n   open a new terminal session.\n   On Unix/Linux: \n5. **Build Your Software:** Use the following command to initiate the building of your software,\n   replacing `[description_of_your_idea]` with your idea's description and `[project_name]` with your desired project\n   name:\n   On Unix/Linux: \n   ```\n   python3 run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ``` \n   ```\n   python run.py --task \"[description_of_your_idea]\" --name \"[project_name]\"\n   ``` \n6. **Run Your Software:** Once generated, you can find your software in the `WareHouse` directory under a specific\n   project folder, such as `project_name_DefaultOrganization_timestamp`. Run your software using the following command\n   within that directory:\n   On Unix/Linux: \n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python3 main.py\n   ``` \n   ```\n   cd WareHouse/project_name_DefaultOrganization_timestamp\n   python main.py\n   ```\n \n",
                    "original_header": "\ud83d\udda5\ufe0f Quickstart with terminal"
                },
                "confidence": 0.9907235222832862,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Code**: We are enthusiastic about your interest in participating in our open-source project. If you come across any\nproblems, don't hesitate to report them. Feel free to create a pull request if you have any inquiries or if you are\nprepared to share your work with us! Your contributions are highly valued. Please let me know if there's anything else\nyou need assistance! \n**Software**: Whenever you develop software using ChatDev, a corresponding folder is generated containing all the\nessential information. Sharing your work with us is as simple as making a pull request. Here's an example: execute the\ncommand ``python3 run.py --task \"design a 2048 game\" --name \"2048\"  --org \"THUNLP\" --config \"Default\"``. This will\ncreate a software package and generate a folder named ``/WareHouse/2048_THUNLP_timestamp``. Inside, you'll find: \n",
                    "original_header": "\ud83e\udd17 Share Your Software"
                },
                "confidence": 0.9957879855312946,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/OpenBMB/ChatDev/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-28T02:18:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T16:06:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 556421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 552297
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 126697
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 52314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 48379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 687
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Binary",
            "Container"
        ]
    },
    "245": {
        "filename": "autonomy-and-verification_varanus_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/autonomy-and-verification/varanus",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Using the instructions from: https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html\n\nThe instructions below work for **Ubuntu 22.10, 22.04, 21.10 or 20.04** (for 18.04, check https://www.linuxuprising.com/2018/05/fix-libpng12-0-missing-in-ubuntu-1804.html )\n\n```\nsudo add-apt-repository ppa:linuxuprising/libpng12\nsudo apt update\nsudo apt install libpng12-0\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Cannot Install FDR: Depends: libpng12-0 but it is not installable",
                    "parent_header": [
                        "Varanus 0.9.4"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have problems installing or running **FDR4** please check the [FDR Troubleshooting](docs/fdr-troubleshooting.md) document.\n \n",
                    "original_header": "Troubleshooting"
                },
                "confidence": 0.9939232832677886,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here, the workaround uses the Python 2.7 version of this library, aliasing it to the Python 2.6 version. \nMake sure that you have `libpython2.7.so.1.0` installed (it should be at `/usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0`). If you do not, then you should be able to install it using:\n```bash\nsudo apt install python2.7-dev\n```\nWhen you are sure the library is installed, run the following:\n```bash\nsudo ln -s /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0 \\\n/usr/lib/x86_64-linux-gnu/libpython2.6.so.1.0\n\n```\nwhich is modified from [Stack Exchange](https://askubuntu.com/questions/427884/libpython2-6-so-1-0-doesnt-exist), which adds a link from the missing `libpython2.6.so.1.0` to the existing `libpython2.7.so.1.0` file.\n \n",
                    "original_header": "ImportError: libpython2.6.so.1.0: cannot open shared object file: No such file or directory"
                },
                "confidence": 0.9940852796880861,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/autonomy-and-verification/varanus/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-03T15:49:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-21T16:49:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1658334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "283": {
        "filename": "huhanGitHub_iOS-App-database_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/huhanGitHub/iOS-App-database",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-16T06:32:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T14:32:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "469": {
        "filename": "jku-ssw_gcc-builtin-study_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jku-ssw/gcc-builtin-study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Some of the README Markdown files refer to an environment variable `$ARTIFACT_ROOT`. Please ensure that this environment variable is set. For example, you can set this variable for the current console by typing `export ARTIFACT_ROOT=path/to/the/artifact/root` on Linux.\n\nPlease also unpack the database file contained in the `database.zip` archive.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/INSTALLATION.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The database is stored in the [./database.db](./database.db) file. It is stored as a SQLite3 database, so that it can be easily distributed and shared. For convenience, we suggest to explore the database's content using [sqlitebrowser](https://sqlitebrowser.org/dl/), which is a GUI for SQLite3 databases and can be used on both Linux, Windows, and MacOS. Alternatively, the database can also be accessed on the command line by installing [SQLite3](https://www.sqlite.org/index.html) and typing `sqlite3 database.db`. The figure below shows an ER diagram created using [Dia](http://dia-installer.de/shapes/ER/index.html.en) with the most important entities and relations represented in the database. \n",
                    "original_header": "Database"
                },
                "confidence": 0.9992402170565315,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* For the script that fetches the projects, see the [./src/fetch_github_projects.py](./src/fetch_github_projects.py) script.\n* For the coverage score, see the [./coverage](./coverage) directory.\n* For how we filtered projects, see the definition of the `GithubProjectView` in [./database.db](./database.db).\n* For how we identified builtins from the documentation, see [./defs](./defs).\n* For how we identified builtins from the GCC source code, and how we identified builtin usages in the ~5,000 projects, see [./BuiltinAnalyzer](./BuiltinAnalyzer).\n* For how we excluded builtins, see [./src/sync-excludes.py](./src/sync-excludes.py).\n* For how we extracted builtin usages, see [./src/README.md](./src/README.md).\n \n",
                    "original_header": "Selecting the projects"
                },
                "confidence": 0.9996783676349377,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 STATUS.md\n\u251c\u2500\u2500 __pycache__\n\u251c\u2500\u2500 coverage\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sampling_software_projects\n\u251c\u2500\u2500 defs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 architecture-specific\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 internal\n\u251c\u2500\u2500 excludes\n\u251c\u2500\u2500 gcc-builtin-tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tests\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 test-cases\n\u251c\u2500\u2500 generated\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 historical-data\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 csv\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 pdf\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 png\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 latex\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 plots\n\u251c\u2500\u2500 paper\n\u251c\u2500\u2500 projects\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 FETCH_GITHUB_PROJECTS.md\n    \u251c\u2500\u2500 JavaProject\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 JAVA_PROJECTS.md\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 lib\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 src\n    \u251c\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 helper-gcc-doc-extraction\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u251c\u2500\u2500 include\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 __pycache__\n    \u251c\u2500\u2500 plots\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n    \u2514\u2500\u2500 screenshots\n```\n \n",
                    "original_header": "Directory structure including all Markdown files"
                },
                "confidence": 0.9999999999582201,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jku-ssw/gcc-builtin-study/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-06-25T13:15:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-23T16:46:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 235137
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 78090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 51554
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 16317
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 3929
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "690": {
        "filename": "hrishikeshrt_sangrahaka_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hrishikeshrt/sangrahaka",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation Instructions\n\nSa\u1e45gr\u0101haka is presented as a full-stack application that you can install on your\nown server. Installing it is fairly straightforward if you have the necessary\ncomponents.\n\n## Requirements\n\nSa\u1e45gr\u0101haka makes use of cross-platform technologies, and in theory should\nrun on all operating systems. It has been tested and is known to work on Ubuntu\n18.04 and Windows.\n\n### Primary Requirements\n\n* [Python3](https://www.python.org/downloads/): First and foremost, being powered by [Flask](https://flask.palletsprojects.com/en/2.2.x/), Sa\u1e45gr\u0101haka requires Python 3.\n  - Tested on Python 3.8.\n  - You may want to use [Anaconda](https://docs.anaconda.com/free/anaconda/install/).\n* Several features of Sa\u1e45gr\u0101haka are made possible through use of numerous Python packages available on the [Python Package Index (PyPI)](https://pypi.org/).\n  - Install them using `pip install -r requirements.txt`\n\n### Secondary Requirements\n\n*  [Neo4j](https://neo4j.com/download-center/#community) is a graph database management system (Think MySQL but for graphs!). Sa\u1e45gr\u0101haka uses Neo4j as its graph database to store and query knowledge graphs.\n  - Check the installation instructions for your platform.\n  - **Note**: Annotation process does not require Neo4j. Therefore, if you want to quickly get started with annotation without worrying about knowledge graphs, you can skip installing Neo4j.\n  - **Caution**: The interfaces under `Graph` tab will not function if a graph database is not connected.\n\n## Core Setup\n\n### Start Web (Flask) Server\n\n* Configure the application.\n  - Copy `settings.sample.py` to `settings.py`\n  - Open `settings.py` in a text editor and make appropriate changes.\n* Run application server.\n  - Open a terminal.\n  - Run `python3 server.py`\n  - **Note**: If you want to run it on a production environment, it is recommended to use a Web Server Gateway Interface (WSGI) such as [Gunicorn](https://gunicorn.org/)\n* Access the frontend to start using\n  - Copy the URL displayed on the terminal and load it in the browser of your choice.\n\nYour Sa\u1e45gr\u0101haka instance is now running!\n\n## Annotation Setup\n\n### Setup Annotation Task\n\n* Login using the administrator username and password set by you in `settings.py`\n* Go to `Admin` tab.\n* Upload Corpus\n  - Create a corpus entry by providing a name and an optional description.\n  - Prepare chapter files. (Check [examples](examples/) directory for the format of chapter files.)\n  - Upload chapter files.\n* Create Ontology\n  - Prepare a list of node types relevant to your corpus.\n  - Prepare a list of relationships that you want to capture among these node types.\n  - Upload the ontology in one of the two ways:\n    - Use GUI to `Add` relations one by one.\n    - Use `CSV` or `JSON` files to upload `Ontology` in bulk. (Check to [data/tables](data/tables) for file format and sample data.)\n\nYour Sa\u1e45gr\u0101haka instance is now ready for annotation!\n\n### Start Annotation\n\n* Ask your annotators to create accounts on your system.\n* Go to `Admin` tab to add `Annotator` role to the desired users.\n\n## Querying Setup\n\n### Build Knowledge Graph\n\nThe knowledge graph needs to be constructed using the collected annotations.\nThe `PropertyGraph()` class provided in [`utils/property_graph.py`](utils/property_graph.py) can be used for this purpose.\n\n**Disclaimer**: This step requires a certain level of familiarity with Python,\nproperty graph data model and computational aspects.\n\n**Note**: [`examples`](examples/) directory contains sample files for building the knowledge graph.\n\n### Prepare Query Templates\n\nQuery templates should be prepared at `data/query.json`. The format of query templates as well as sample\nfiles highlighting the query template preparation are available in [`examples`](examples/).\n\n**Disclaimer**: Creating query templates requires a certain level of familiarity\nwith [Cypher](https://neo4j.com/docs/getting-started/cypher-intro/) query\nlanguage and computational aspects.\n\n### Start Graph Database (Neo4j) Server *(optional)*\n\nIf you have installed Neo4j and want to use graph related features, you should\nstart a graph database server. It need not be on the same machine as the web\nserver, but it needs to be accessible via network to the machine hosting your\nweb server.\n\n* Start Neo4j graph server\n  - Open a terminal.\n  - Navigate to the `Neo4j` installation directory. (`cd <your-neo4j-installation-path>`)\n  - Run `./bin/neo4j console`\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "Sa\u1e45gr\u0101haka is presented as a full-stack application that you can install on your own server.\n\nThe detailed installation instructions are available at [INSTALL.md](INSTALL.md).\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "value": "* Clone (or Download) this repository.\n* `pip install -r requirements.txt`\n* Copy `settings.sample.py` to `settings.py` and make appropriate changes.\n* Run application server using `python3 server.py`\n* Load the URL displayed on the terminal in the browser of your choice.\n* Login using the administrator username and password set by you in `settings.py`\n* Go to `Admin` tab to create a corpus and upload chapter files.\n* Create `Ontology` in one of the two ways.\n  - Use GUI to `Add` single relations.\n  - Use `CSV` or `JSON` files to upload `Ontology` in bulk. (Check to [data/tables](data/tables) for file format and sample data)\n\nYour Sangrahaka instance is now ready for annotation!\n\n* Ask your annotators to create accounts on your system.\n* Go to `Admin` tab to add `Annotator` role to the desired users.\n",
                    "type": "Text_excerpt",
                    "original_header": "Basic Setup",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "value": "*  Install [Neo4j](https://neo4j.com/download-center/#community) (Required for querying)\n  - Navigate to the `Neo4j` installation directory\n  - Start the graph server: `./bin/neo4j console`\n* Construct the knowledge graph.\n* Load the knowledge graph into Neo4j.\n* Prepare the query templates file and place it in the `data/` folder.\n* Restart web server.\n\n**Disclaimer**: Steps such as preparing corpus files, query templates building knowledge graph requires\na certain level of familiarity with programming and the computational aspects.\n\n**Note**: `examples` directory contains sample files for corpus creation, query template and graph building.\n",
                    "type": "Text_excerpt",
                    "original_header": "Graph Setup",
                    "parent_header": [
                        "Sa\u1e45gr\u0101haka",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n.\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 settings.sample.py\n\u251c\u2500\u2500 models_admin.py\n\u251c\u2500\u2500 models_sqla.py\n\u251c\u2500\u2500 server.py -> server_sqla.py\n\u251c\u2500\u2500 server_sqla.py\n\u251c\u2500\u2500 constants.py\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 query.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tables\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 sample\n\u251c\u2500\u2500 db\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 main.db\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 templates [*.html]\n\u251c\u2500\u2500 utils\n\u2502   \u251c\u2500\u2500 configuration.py\n\u2502   \u251c\u2500\u2500 cypher_utils.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 graph.py\n\u2502   \u251c\u2500\u2500 plaintext.py\n\u2502   \u251c\u2500\u2500 property_graph.py\n\u2502   \u251c\u2500\u2500 query.py\n\u2502   \u2514\u2500\u2500 reverseproxied.py\n\u251c\u2500\u2500 static\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 audio [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 css [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 custom\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 builder\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 builder.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 [...]\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 sticky-footer.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 admin\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 admin.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 browse\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 browse.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 builder\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 builder.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u251c\u2500\u2500 corpus\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 annotation.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 curation.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 elements.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 events.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 functions.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 query\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u251c\u2500\u2500 network.js\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 query.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 fontawesome [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 images [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 js [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 plugins [...]\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 themes [...]\n\u251c\u2500\u2500 examples\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ayurveda [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 epics [...]\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 output [...]\n\u251c\u2500\u2500 explore_database.py\n\u251c\u2500\u2500 setup.cfg\n\u251c\u2500\u2500 INSTALL.md\n\u2514\u2500\u2500 README.md\n```\n \n",
                    "original_header": "Structure"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hrishikeshrt/sangrahaka/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-07T03:17:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T13:22:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 305828
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200018
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 101206
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1031": {
        "filename": "regot-chalmers_treqs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/regot-chalmers/treqs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone this repo, then from the root of repo directory, run\n\n    pip install -e .\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development",
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
            },
            {
                "result": {
                    "value": "The minimal setup (as provided by the folders in this project) is as follows.\n \n* An .md file containing requirements simulates system requirements. For instance, the following text would represent a single requirement with id REQ1 that has traces to user stories US1 and US2:\n\n\t```\n\tSome supplementary text\n\t[requirement id=REQ1 story=US1,US2]\n\tRequirement text\n\t[/requirement]\n\tMore supplementary text\n\t```\n* A test case file with test cases. Test cases can be markdown files (for manual test routines) or source files (here: python) (for automated test scripts). An example for a manual test case and a python test case are depicted below. In both cases, the [testcase] tag contains a test case id as well as tracing information to user stories and system requirements.\n\n\t```\n\t[testcase id=TC1TestCaseName story=US1 req=REQ1]\n\tPurpose: Purpose of the test case without linebreak.\n\t\n\t## Setup\n\tDescribe any steps that must be done before performing the test.\n\t\n\t## Scenario / Steps\n\t\n\t## Expected outcome\n\t\n\t## Tear down\n\tDescribe what to do after the test\n\t\n\t## Test result\n\tProtocol of the result of executing this test, latest on top.\n\t```\n\n\t```\n\t#==================================\n\t# [testcase id=TC_python_test1 story=US4 req=REQ3]\n\t# \n\t# <Purpose of the test case>\n\t# \n\t#==================================\n\ttestcase TC1__test_case_name() {\n\t...\n\t}\n\t```\t\n* A list of user stories. Currently, both issues in the github project labeled \"user story\" and markdown files are accepted. In both cases, the [userstory] tag is required to obtain a unique id for each story. An example for a markdown file containing user stories is depicted below.\n\n\t```\n\t[userstory id=US2]\n\tAs a system manager, I want to make sure that proposed updates to requirements are of good quality, do not conflict with each other, or with the product mission. \n\t\n\t[userstory id=US3]\n\tAs member of an experimenting team, I want to experiment with new requirements and features so that I can better assess their business value and cost. This must not affect existing requirements during the experiment or block the requirements database afterwards. \n\t\n\t[userstory id=US4]\n\tAs a test architect or system manager, I want to be aware of new requirements for the test infrastructure early on so that I can plan verification and validation pro-actively. \n```\n\nThe formats are here mainly chosen for convenience, but can easily be adapted to any company standard. \n",
                    "type": "Text_excerpt",
                    "original_header": "Minimal setup",
                    "parent_header": [
                        "T-Reqs: Tool Support for Managing Requirements in Large-Scale Agile System Development"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/regot-chalmers/treqs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-07T09:05:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T12:50:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 35223
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 67
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1075": {
        "filename": "mileschen360_higgs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mileschen360/Higgs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-03-14T21:32:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-24T17:27:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 848091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 287315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 267597
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 129062
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 2790
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Awk",
                    "name": "Awk",
                    "type": "Programming_language",
                    "size": 142
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 89
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1143": {
        "filename": "mostafamahdieh_clusteringfaultpronenesstcp_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mostafamahdieh/ClusteringFaultPronenessTCP",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-02-20T01:23:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T13:24:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 135308
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "629": {
        "filename": "kth_SequenceR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/sequencer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Choose a directory and:\n```bash\ngit clone https://github.com/OpenNMT/OpenNMT-py\n```\nWhen testing a new configuration, copy a working data directory and modify *sh files as desired.\n\nSet up environment variables:\n\n```bash\nexport CUDA_VISIBLE_DEVICES=0\nexport THC_CACHING_ALLOCATOR=0\nexport OpenNMT_py=.../OpenNMT-py\nexport data_path=.../results/Golden  # Or a new directory path as desired\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair",
                        "Model creation, training and use:"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/kth/SequenceR/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To rerun our experiment of SequenceR over [Defects4J](https://github.com/rjust/defects4j). Run `src/Defects4J_Experiment/Defects4J_experiment.sh`, make sure you have `defects4j` installed. \n",
                    "original_header": "Defects4J experiment"
                },
                "confidence": 0.9945422490173241,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/SequenceR/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-27T10:35:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-14T04:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 73385569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 33404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7059
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6341
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2010
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "884": {
        "filename": "cuhk-arise_aeon_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CUHK-ARISE/AEON",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Installing all the packages using `pip` is suggested:\n```\n$ pip install -r requirements.txt \n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "AEON"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/cuhk-arise/aeon/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-25T11:53:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-07T07:19:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52635
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13692
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "551": {
        "filename": "poojaruhal_RP-class-comment-classification_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/poojaruhal/RP-class-comment-classification",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-12-08T23:28:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T09:36:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 2365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "601": {
        "filename": "LogIntelligence_log-analytics-chatgpt_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/log-analytics-chatgpt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-31T11:19:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-29T08:27:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 52685
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "791": {
        "filename": "jkoppel_QuixBugs_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jkoppel/QuixBugs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply clone the repo. \n\n    git clone https://github.com/jkoppel/QuixBugs\n    \nThe Java programs are already compiled (see `*.class` files in `java_programs`). Note the all java programs are in the same package called `java_programs`. The utility class `JavaDeserialization.java` requires you to download the external library Gson.\n\nAll Python is written in Python3.\n\nTo run both defective versions of a program against their tests, as well as the corrected Python version, use the test driver:\n\n> python3 tester.py _program\\_name_\n\nOutput is printed for visual comparison.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation &amp; Usage"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            },
            {
                "result": {
                    "value": "There are JUnit tests in the `java_testcases/junit` folder for the Java version. Running `TestsGenerator.java` can regenerate them if needed.\n\nTo run these tests, you can use [Gradle](https://gradle.org/) tasks provided by the `build.gradle` file. First, install Gradle. Then,\n\n- `gradle test` can be used to run tests on the buggy programs (Runs JUnit tests from the `java_testcases/junit` folder);\n- `gradle crtTest` can be used to run tests on the correct programs (Runs JUnit tests from the `java_testcases/junit/crt_program` folder).\n\nIt is also possible to run tests for a single program with the `--tests` option:\n\n```bash\n$ gradle test --tests KNAPSACK_TEST\n\n> Task :test\n\njava_testcases.junit.KNAPSACK_TEST > test_1 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:14\n\njava_testcases.junit.KNAPSACK_TEST > test_3 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:26\n\njava_testcases.junit.KNAPSACK_TEST > test_4 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:32\n\njava_testcases.junit.KNAPSACK_TEST > test_5 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:38\n\njava_testcases.junit.KNAPSACK_TEST > test_6 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:44\n\njava_testcases.junit.KNAPSACK_TEST > test_7 FAILED\n    java.lang.AssertionError at KNAPSACK_TEST.java:50\n\n10 tests completed, 6 failed\n```\n\n```bash\n$ gradle crtTest --tests KNAPSACK_TEST\n\nBUILD SUCCESSFUL in 4s\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using JUnit tests",
                    "parent_header": [
                        "Installation &amp; Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            },
            {
                "result": {
                    "value": "For the Python version, there are [pytest](https://pytest.org/) tests for each program in the `python_testcases` folder. To run them, install pytest using `pip` and then, from the root of the repository, call `pytest` to run tests for a single program or target the whole directory to run every test inside it.\n\n```bash\npip install pytest\npytest python_testcases/test_quicksort.py\n# Or\npytest python_testcases\n```\n\nTests work for both buggy and correct versions of programs. The default test calls the buggy version, but there is a custom `--correct` flag that uses the correct version of a program.\n\n```bash\npytest --correct python_testcases\n```\n\nMost of the tests run fast and finish in less than a second, but two tests are slow. The first one is the last test case of the `knapsack` program, and the second one is the fourth test case of the `levenshtein` program. The default behavior skips both these tests. For the `knapsack` test case, using the `--runslow` pytest option will include it in the running tests. However, the `levenshtein` test case is always skipped since it takes a long time to pass and is ignored by the JUnit tests as well.\n\n```bash\n$ pytest --correct --runslow python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 10 passed in 240.97s (0:04:00) ========== \n```\n\n```bash\n$ pytest --correct python_testcases/test_knapsack.py\n\ncollected 10 items\npython_testcases/test_knapsack.py ..........     [100%]\n\n========== 9 passed, 1 skipped in 0.08s ========== \n```\n\nSome tests, such as the `bitcount` ones, need a timeout. pytest itself doesn't have a timeout mechanism, but there is a [pytest-timeout](https://github.com/pytest-dev/pytest-timeout) plugin for it. Installing pytest-timeout adds additional options to the `pytest` CLI so, for example, to timeout `bitcount` tests after five seconds, you can do like this:\n\n```bash\npip install pytest-timeout\npytest --timeout=5 python_testcases/test_bitcount.py\n```\nMake sure to check pytest-timeout's documentation to understand its caveats and how it handles timeouts on different systems.\n\nThere is also a [pytest-xdist](https://github.com/pytest-dev/pytest-xdist) plugin that runs tests in parallel and can be used similarly to the timeout plugin.\n",
                    "type": "Text_excerpt",
                    "original_header": "Using pytest tests",
                    "parent_header": [
                        "Installation &amp; Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/jkoppel/QuixBugs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-07-16T02:10:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T04:04:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 392435
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 117257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1103": {
        "filename": "dritter-hd_db-net-eip-patterns_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dritter-hd/db-net-eip-patterns",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n7. Enter the port configured in the connect artifact into the extension GUI and connect CPN/COMM (default `9001`).\n![pic4](pictures/comm-connected.png#center)\n8. Start executing enabled transitions.\n![pic5](pictures/fire-transition.png#center)\n \n",
                    "original_header": "Simulating the patterns"
                },
                "confidence": 0.9993582561410155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dritter-hd/db-net-eip-patterns/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-06T08:03:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-06-08T07:25:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "585": {
        "filename": "PrivacyEngineering_hawk-service_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-service",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For the Hawk Service to run you need to its mandatory to have a PostgreSQL Database connected. With\nsmaller workloads Postgres itself is fine, for bigger workloads you might need some technologies\nlike [YugabyteDB](https://github.com/yugabyte/yugabyte-db). Just pass the following environment\nvariables:\n\n```properties\nSPRING_DATASOURCE_URL=jdbc:postgresql://localhost/hawk\nSPRING_DATASOURCE_USERNAME=xxxx\nSPRING_DATASOURCE_PASSWORD=xxxx\n```\n\nProfiles can be activated using the following environment variable.\n\n```\nSPRING_PROFILES_ACTIVE=flagger-canary,test-data\n```\n\nBy default, the service starts on port 8080. Pass the env `SERVER_PORT` to change that.\n\nTo install via. Docker run the following command and pass the environment variables after using you\nneed:\n\n```\ndocker run -p 8080:8080 -e ENV1=1 ENV2=2 p4skal/hawk-service\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Hawk Service"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "When the Spring Profile `flagger-canary` is active and the current environment is a Kubernetes\nenvironment this services uses\nthe [Fabric8 Kubernetes Client](https://github.com/fabric8io/kubernetes-client) to watch for new\n[Flagger Canary Releases](https://github.com/fluxcd/flagger). Recent and active releases are\navailable at the `/api/release/*` endpoints. \n",
                    "original_header": "Hawk Release"
                },
                "confidence": 0.9735749224916153,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Although we recommend to create Mappings / Fields with\nthe [Hawk Core Monitor UI](https://github.com/PrivacyEngineering/hawk-core-monitor), when using IaaC\nyou may want to specify the fields / mappings directly. On startup, this service will sync the\nupdates. You have many possibilities to provide such entities, as they are provided\nvia [Spring External Configuration](). The following things are described via. Environment variables.\nIf you want to use Properties, JSON, YAML etc., see there.\n```dotenv\nFIELDS_JSON='[\n    {\n        \"name\": \"user.email\",\n        \"description\": \"E-Mail address of the User\",\n        \"personalData\": false,\n        \"specialCategoryPersonalData\": false,\n        \"legalBases\": [\n            {\n                \"reference\": \"GDPR1\", \n                \"description\": \"\"\n            }\n        ]\n        \"legalRequirement\": false,\n        \"contractualRegulation\": false,\n        \"obligationToProvide\": false,\n        \"consequences\": \"\"\n    }\n]'\nMAPPINGS_JSON='[\n    {\n        endpointId: \"http:GET:user-service:/api/users\"\n        fields: [\n            {\n                field: \"user.email\",\n                side: \"SERVER\",\n                phase: \"RESPONSE\",\n                namespace: \"body\",\n                format: \"json\",\n                path: \"$.[*].email\"\n            }\n        ]\n    }\n]'\n```\nIt is also possible insert those values one by one by using:\nBASH2*\n \n",
                    "original_header": "Mapping / Field import from JSON"
                },
                "confidence": 0.9999999772056756,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-service/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-16T17:49:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-18T09:09:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 87747
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Container"
        ]
    },
    "1210": {
        "filename": "elges_tetraband_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HelgeS/tetraband",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n## Dependencies\n\nTensorflow Object Detection API depends on the following libraries:\n\n*   Protobuf 3.0.0\n*   Python-tk\n*   Pillow 1.0\n*   lxml\n*   tf Slim (which is included in the \"tensorflow/models/research/\" checkout)\n*   Jupyter notebook\n*   Matplotlib\n*   Tensorflow (>=1.9.0)\n*   Cython\n*   contextlib2\n*   cocoapi\n\nFor detailed steps to install Tensorflow, follow the [Tensorflow installation\ninstructions](https://www.tensorflow.org/install/). A typical user can install\nTensorflow using one of the following commands:\n\n``` bash\n# For CPU\npip install tensorflow\n# For GPU\npip install tensorflow-gpu\n```\n\nThe remaining libraries can be installed on Ubuntu 16.04 using via apt-get:\n\n``` bash\nsudo apt-get install protobuf-compiler python-pil python-lxml python-tk\npip install --user Cython\npip install --user contextlib2\npip install --user jupyter\npip install --user matplotlib\n```\n\nAlternatively, users can install dependencies using pip:\n\n``` bash\npip install --user Cython\npip install --user contextlib2\npip install --user pillow\npip install --user lxml\npip install --user jupyter\npip install --user matplotlib\n```\n\n<!-- common_typos_disable -->\n**Note**: sometimes \"sudo apt-get install protobuf-compiler\" will install\nProtobuf 3+ versions for you and some users have issues when using 3.5.\nIf that is your case, try the [manual](#Manual-protobuf-compiler-installation-and-usage) installation.\n\n## COCO API installation\n\nDownload the\n[cocoapi](https://github.com/cocodataset/cocoapi) and\ncopy the pycocotools subfolder to the tensorflow/models/research directory if\nyou are interested in using COCO evaluation metrics. The default metrics are\nbased on those used in Pascal VOC evaluation. To use the COCO object detection\nmetrics add `metrics_set: \"coco_detection_metrics\"` to the `eval_config` message\nin the config file. To use the COCO instance segmentation metrics add\n`metrics_set: \"coco_mask_metrics\"` to the `eval_config` message in the config\nfile.\n\n```bash\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\ncp -r pycocotools <path_to_tensorflow>/models/research/\n```\n\n## Protobuf Compilation\n\nThe Tensorflow Object Detection API uses Protobufs to configure model and\ntraining parameters. Before the framework can be used, the Protobuf libraries\nmust be compiled. This should be done by running the following command from\nthe tensorflow/models/research/ directory:\n\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n**Note**: If you're getting errors while compiling, you might be using an incompatible protobuf compiler. If that's the case, use the following manual installation\n\n## Manual protobuf-compiler installation and usage\n\n**If you are on linux:**\n\nDownload and install the 3.0 release of protoc, then unzip the file.\n\n```bash\n# From tensorflow/models/research/\nwget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nunzip protobuf.zip\n```\n\nRun the compilation process again, but use the downloaded version of protoc\n\n```bash\n# From tensorflow/models/research/\n./bin/protoc object_detection/protos/*.proto --python_out=.\n```\n\n**If you are on MacOS:**\n\nIf you have homebrew, download and install the protobuf with\n```brew install protobuf```\n\nAlternately, run:\n```PROTOC_ZIP=protoc-3.3.0-osx-x86_64.zip\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/$PROTOC_ZIP\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nrm -f $PROTOC_ZIP\n```\n\nRun the compilation process again:\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n## Add Libraries to PYTHONPATH\n\nWhen running locally, the tensorflow/models/research/ and slim directories\nshould be appended to PYTHONPATH. This can be done by running the following from\ntensorflow/models/research/:\n\n\n``` bash\n# From tensorflow/models/research/\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNote: This command needs to run from every new terminal you start. If you wish\nto avoid running this manually, you can add it as a new line to the end of your\n~/.bashrc file, replacing \\`pwd\\` with the absolute path of\ntensorflow/models/research on your system.\n\n# Testing the Installation\n\nYou can test that you have correctly installed the Tensorflow Object Detection\\\nAPI by running the following command:\n\n```bash\npython object_detection/builders/model_builder_test.py\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/g3doc/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These environments can be used by importing the `envs` module and instantiating the wanted configuration:\n```\nimport gym\nimport envs\nenv = gym.make('ImageClassificationEnv-basic-cifar10-v0')\nprint(\"Number of actions: \", env.action_space.n)\nprint(\"Observation space: \", env.observation_space)\nprint(\"Actions: \", env.action_names())\n```\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9581080794724207,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available datasets (will be automatically downloaded): \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9897322357517745,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-13T18:03:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-21T08:03:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3441365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "10": {
        "filename": "smartbugs_smartbugs-results_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/smartbugs/smartbugs-results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|  #  | Tool       | Avg. Execution Time | Total Execution Time |\n| --- | ---------- | ------------------- | -------------------- |\n|   1 | Honeybadger | 0:00:46    | 0:53:11    |\n|   2 | Maian      | 0:02:57    | 3:23:50    |\n|   3 | Manticore  | 0:08:11    | 5:03:04    |\n|   4 | Mythril    | 0:01:13    | 1:23:42    |\n|   5 | Osiris     | 0:00:44    | 0:50:03    |\n|   6 | Oyente     | 0:00:36    | 0:41:29    |\n|   7 | Securify   | 0:01:00    | 1:09:08    |\n|   8 | Slither    | 0:00:03    | 0:03:35    |\n|   9 | Smartcheck | 0:00:06    | 0:06:34    | \n",
                    "original_header": "Execution Time Stats"
                },
                "confidence": 0.9875240153265377,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smartbugs/smartbugs-results/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-18T14:41:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T15:28:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "751": {
        "filename": "bommarito-consulting_pypi-research-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/licensio/pypi-research-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-22T14:02:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T17:49:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 74232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "432": {
        "filename": "sajedjalil_ChatGPT-Software-Testing-Study_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sajedjalil/ChatGPT-Software-Testing-Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install the latest version of this software directly from GitHub with ```pip```:\n\n```pip install git+https://github.com/mmabrouk/chatgpt-wrapper```\n\nThis will install chatgpt-wrapper and its dependencies. Before starting the program, you will need to install a browser\nin Playwright (if you haven't already). The program will use Firefox by default.\n\n```playwright install firefox```\n\nWith that done, you should start up the program in install mode, which will open up a browser window.\n\n```chatgpt install```\n\nLog in to ChatGPT in the browser window, then stop the program.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "About"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sajedjalil/ChatGPT-Software-Testing-Study/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-06T15:28:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-06T03:00:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 26274
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6197
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "383": {
        "filename": "aserg-ufmg_sbsi2016-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aserg-ufmg/sbsi2016-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-04-05T00:27:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-10-13T18:25:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "1017": {
        "filename": "aise-tudelft_capybara-bint5_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AISE-TUDelft/Capybara-BinT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, clone the CodeT5 repo into this directory:\n\n```bash\ngit clone https://github.com/salesforce/CodeT5.git\n```\n\nRun the following command to set the correct working directory in the training script:\n\n```bash\nwdir=\\WORKDIR=\\\"`pwd`/'CodeT5/CodeT5'\\\" && sed -i '1 s#^.*$#'$wdir'#' CodeT5/CodeT5/sh/exp_with_args.sh\n```\n\nNow that the model is set up we need to download the data, use the following commands to download and unpack the data:\n```bash\nwget https://zenodo.org/record/7229809/files/Capybara.zip\nunzip Capybara.zip\nrm Capybara.zip\n```\nSimilarly to download the pretrained BinT5 checkpoints:\n```bash\nwget https://zenodo.org/records/7229913/files/BinT5.zip?download=1\nunzip BinT5.zip\nrm Capybara.zip\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Capybara-BinT5"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate the experimental setup of the paper follow the following steps:\n \n",
                    "original_header": "HuggingFace \ud83e\udd17"
                },
                "confidence": 0.9895226925936823,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It is recommended to use the provided Docker image, which has the correct Cuda version and all of the required dependencies installed. \nPull the image, create a container, and mount this folder as a volume:\n``` bash\ndocker pull aalkaswan/bint5\ndocker run -i -t --name {containerName} --gpus all -v $(pwd):/data aalkaswan/bint5 /bin/bash\n```\n \nThis should spawn a shell, which allows you to use the container. Change to the mounted volume:\n```bash\ncd /data/\n``` \nAll of the following commands should then be run from within the Docker container. You can respawn the shell using:\n```bash\ndocker exec -it {containerName} /bin/bash\n```\n \nIf you wish to run without using docker, we also provide a `requirements.txt` file.\n \n",
                    "original_header": "Docker Image"
                },
                "confidence": 0.9905031376786464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use this data in BinT5, setup the data folders in the CodeT5 project:\n```bash\nmkdir -p CodeT5/CodeT5/data/summarize/{C,decomC,demiStripped,strippedDecomC}\n```\nNow you can simply move the data of your choice from `\\Capybara\\training_data\\{lan}\\{dup/dedup}` to `CodeT5\\data\\summarize\\{lan}`. \nIn the downloaded CodeT5 repo change [this line and add the languages to the subtask list](https://github.com/salesforce/CodeT5/blob/e78a61a17f6dc2f3cbb968447d3e2d065b426e7b/CodeT5/sh/run_exp.py#L134C1-L135C1). \nFinally, edit the `language` variable in the `job.sh` file and start training in detached mode:\n```bash\ndocker exec -d {containerName} /bin/bash \"/data/job.sh\"\n``` \n \n",
                    "original_header": "Finetune Models"
                },
                "confidence": 0.9997378769973985,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/aise-tudelft/capybara-bint5/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-04T15:08:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T10:05:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "785": {
        "filename": "CUHK-Shenzhen-SE_RetromorphicTesting_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/CUHK-Shenzhen-SE/RetromorphicTesting",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-10-04T08:26:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-12T14:14:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 26270
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "590": {
        "filename": "ideas-labo_DaL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ideas-labo/DaL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download all the files into the same folder/clone the repository.\n\n2. Install the specified version of Python and Tensorflow:\nthe codes have been tested with **Python 3.6 - 3.9** and **Tensorflow 2.x**, other versions might cause errors.\n\n3. Install all missing packages according to **requirements.txt** and runtime messages.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Prerequisites and Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ideas-labo/DaL/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run more complicated experiments, alter the codes following the instructions below and comments in *DaL_main.py*.\n \n",
                    "original_header": "Change Experiment Settings"
                },
                "confidence": 0.9990559765500389,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ideas-labo/DaL/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-06-02T08:03:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-15T05:46:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61789
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "563": {
        "filename": "yuzhimanhua_HiGitClass_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yuzhimanhua/HiGitClass",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For training, a GPU is strongly recommended.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "HiGitClass: Keyword-Driven Hierarchical Classification of GitHub Repositories"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            },
            {
                "result": {
                    "value": "The code is based on Keras. You can find installation instructions [**here**](https://keras.io/#installation).\n",
                    "type": "Text_excerpt",
                    "original_header": "Keras",
                    "parent_header": [
                        "HiGitClass: Keyword-Driven Hierarchical Classification of GitHub Repositories",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**NOTE: If you would like to run our code on your own dataset, when you prepare this json file, make sure you list the labels in the top-down order. For example, if the label path of your repository is ROOT-A-B-C, then the \"labels\" field should be \\[\"A\", \"B\", \"C\"\\].** \n",
                    "original_header": "Data"
                },
                "confidence": 0.9963110080736239,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yuzhimanhua/HiGitClass/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-08-12T18:31:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T08:11:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57516
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 34418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4124
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1054
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 992
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "1053": {
        "filename": "miranska_se-tti_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/miranska/se-tti",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-20T17:34:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-24T03:43:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 146661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4405
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "174": {
        "filename": "KIT-IAI_EasyMLServe_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/KIT-IAI/EasyMLServe",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the framework, simply use pip within this directory by calling `pip install .` or `pip install -e .` if you want to change the code and directly test it within your projects.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "EasyMLServe: Easy Deployment of REST Machine Learning Services"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/KIT-IAI/EasyMLServe/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-23T13:06:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-29T04:58:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 31535
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "973": {
        "filename": "hajranaeem_dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HajraNaeem/Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We have collected these SmartApps from: https://github.com/SmartThingsCommunity/SmartThingsPublic. To prepare this dataset Celik et al. [[1]](#1) have collected SmartApps from marketplace, community, SmartThings forum and IoTBench.\n \n",
                    "original_header": "SmartThings - Corpus 1"
                },
                "confidence": 0.9750090009729908,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hajranaeem/dataset/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-14T18:41:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-26T10:38:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "605": {
        "filename": "ARiSE-Lab_Patch-as-translation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/Patch-as-translation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-08-23T20:15:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-21T07:24:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 70958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1218": {
        "filename": "gleisonbt_migrating-to-graphql_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gleisonbt/migrating-to-graphql",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-10-23T15:04:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-21T19:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1226936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 151292
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 55141
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 10953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 9559
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 937
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 66
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "407": {
        "filename": "salesforce_PyRCA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/salesforce/PyRCA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install ``pyrca`` from PyPI by calling ``pip install sfr-pyrca``. You may install from source by\ncloning the PyRCA repo, navigating to the root directory, and calling\n``pip install .``, or ``pip install -e .`` to install in editable mode. You may install additional dependencies:\n\n- **For plotting & visualization**: Calling ``pip install sfr-pyrca[plot]``, or ``pip install .[plot]`` from the\n  root directory of the repo.\n- **Install all the dependencies**: Calling ``pip install sfr-pyrca[all]``, or ``pip install .[all]`` from the\n  root directory of the repo.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "PyRCA: A Python library for Root Cause Analysis"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<div align=\"center\">\n  <a href=\"#\">\n  <img src=\"https://img.shields.io/badge/Python-3.7, 3.8, 3.9-blue\">\n  </a>\n  <a href=\"https://pypi.python.org/pypi/sfr-pyrca\">\n  <img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/sfr-pyrca.svg\"/>\n  </a>\n  <a href=\"https://opensource.salesforce.com/PyRCA/\">\n  <img alt=\"Documentation\" src=\"https://github.com/salesforce/PyRCA/actions/workflows/docs.yml/badge.svg\"/>\n  </a>\n  <a href=\"https://pepy.tech/project/sfr-pyrca\">\n  <img alt=\"Downloads\" src=\"https://static.pepy.tech/badge/sfr-pyrca\">\n  </a>\n  <a href=\"https://arxiv.org/abs/2306.11417\">\n  <img alt=\"DOI\" src=\"https://zenodo.org/badge/DOI/10.48550/ARXIV.2306.11417.svg\"/>\n  </a>\n</div>\n \n",
                    "original_header": "PyRCA: A Python library for Root Cause Analysis"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|                             |  Recall@1   |  Recall@3   |  Recall@5   |\n:---------------------------:|:-----------:|:-----------:|:-----------:\n|         \u03b5-Diagnosis         | 0.06 \u00b1 0.02 | 0.16 \u00b1 0.04 | 0.16 \u00b1 0.04 |\n|             RCD             | 0.28 \u00b1 0.05 | 0.29 \u00b1 0.05 | 0.30 \u00b1 0.05 |\n|          Local-RCD          | 0.44 \u00b1 0.05 | 0.70 \u00b1 0.05 | 0.70 \u00b1 0.05 |\n|         Random Walk         | 0.07 \u00b1 0.03 | 0.20 \u00b1 0.04 | 0.24 \u00b1 0.04 |\n|      Random Walk (PC)       | 0.06 \u00b1 0.02 | 0.17 \u00b1 0.04 | 0.21 \u00b1 0.04 |\n|     Bayesian Inference      | 0.15 \u00b1 0.04 | 0.35 \u00b1 0.05 | 0.43 \u00b1 0.05 |\n|   Bayesian Inference (PC)   | 0.11 \u00b1 0.03 | 0.30 \u00b1 0.05 | 0.40 \u00b1 0.05 |\n|     Hypothesis-testing      | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n|   Hypothesis-testing (PC)   | 0.95 \u00b1 0.02 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n|  Hypothesis-testing (ADJ)   | 0.95 \u00b1 0.02 | 1.00 \u00b1 0.00 | 1.00 \u00b1 0.00 |\n| Hypothesis-testing (ADJ-PC) | 0.77 \u00b1 0.04 | 0.92 \u00b1 0.03 | 0.92 \u00b1 0.03 | \n",
                    "original_header": "Benchmarks"
                },
                "confidence": 0.9999999628683447,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/salesforce/PyRCA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-24T07:57:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T05:50:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 220086
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 15872
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 292
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "1125": {
        "filename": "agapia_btreegeneticframework_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AGAPIA/BTreeGeneticFramework",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-03-24T19:15:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-25T15:02:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 870497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ASP.NET",
                    "name": "ASP.NET",
                    "type": "Programming_language",
                    "size": 363450
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ShaderLab",
                    "name": "ShaderLab",
                    "type": "Programming_language",
                    "size": 294812
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "GLSL",
                    "name": "GLSL",
                    "type": "Programming_language",
                    "size": 65322
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HLSL",
                    "name": "HLSL",
                    "type": "Programming_language",
                    "size": 10688
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "112": {
        "filename": "Spirals-Team_test4repair-experiments_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/test4repair-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-09-30T12:28:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-02T06:29:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 137185443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 200793
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 122234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "336": {
        "filename": "aebeljs_VeRLPy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/aebeljs/VeRLPy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The easiest way to start using VeRLPy is to install it using `pip install verlpy`\n\nVeRLPy is currently dependent on OpenAI [Gym](https://gym.openai.com/), [cocotb](https://docs.cocotb.org/en/stable/), [cocotb-bus](https://github.com/cocotb/cocotb-bus), and [Stable Baselines3](https://stable-baselines3.readthedocs.io/en/master/). These packages should get installed alongside VeRLPy when installing using `pip`. For running the verification, a simulator compatible with cocotb is additionally required. Please refer to the official  [cocotb](https://docs.cocotb.org/en/stable/) documentation to set this up.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "VeRLPy"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "Having familiarity with [cocotb](https://docs.cocotb.org/en/stable/), OpenAI [Gym](https://gym.openai.com/) and [this whitepaper on VeRLPy](https://arxiv.org/abs/2108.03978) will be very beneficial to get started with the VeRLPy library.\n\nThe hardware design provided in Verilog or VHDL is simulated by cocotb using the chosen simulator. VeRLPy aims to offer a clean interface for bringing RL logic into the conventional cocotb testbench while adhering to the OpenAI Gym environment structure allowing users to leverage the standard RL tools. The DUT and the verification testbench are the environment for the RL agent to act on. The agent chooses an action which is executed on the environment and the consequences of that action are informed back to the agent in terms of the state and the reward. \n",
                    "type": "Text_excerpt",
                    "original_header": "Usage Guide",
                    "parent_header": [
                        "VeRLPy"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "To build a testbench using VeRLPy, we need to start by defining the verification goals in terms of functional coverage. This involves identifying the events occurring in the DUT that correspond to the features that are part of the design specifications. The reward given to the RL agent will be a function of how often these events occur during the simulation.\n\nIn addition, since there is the additional RL component involved, the MDP has to be defined. This means identifying what each timestep and each episode corresponds to in terms of verification logic and input stimulus to the DUT, and what the state and the action space of the MDP represent. \n\nEach RL episode starts with a call to to the `reset()` function of the Gym environment. Followed by this, there are one or more calls to the `step(action)` function until `done` is returned with a value of `True` from the RL environment.  Refer to [Gym](https://gym.openai.com/) for a more detailed understanding of how the control flow occurs in a Gym environment. \n",
                    "type": "Text_excerpt",
                    "original_header": "Identifying verification goals and defining the MDP",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The library provides a Gym environment object `CocotbEnv` which can be inherited to build the verification testbench. This class has predefined functions/coroutines which interact with the RL agent to facilitate the learning process. These functions are triggered by the `reset()`, `step(action)`, `done` variable, etc. Please refer [here](https://github.com/aebeljs/VeRLPy/blob/main/src/cocotb_env.py) for more detailed explanations of these functions and their implementation details. We start with implementing this class that inherits `CocotbEnv`. \n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut # DUT object used for cocotb-based verification\n        self.observation_space = observation_space # state space of the RL agent\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n```\nNote that all the coroutines with the decorator `cocotb.coroutine` require a `yield` statement in the body like how it is in standard cocotb testbenches.\n",
                    "type": "Text_excerpt",
                    "original_header": "Inheriting CocotbEnv",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The functions/coroutine implementations defined in `MyExampleDesignCocotbEnv` should contain the appropriate logic that must run from the cocotb side. Once this class is defined, the cocotb test can be added to invoke the verification logic from this class. While defining this, the state space of the MDP should also be passed as an argument as shown below.\n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv, utils\nimport gym\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut\n        self.observation_space = observation_space\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n\n# entry point for the cocotb verification test\n@cocotb.test()\ndef run_test(dut):\n    cocotb_env = MyExampleDesignCocotbEnv(dut, gym.spaces.Discrete(1))\n    # gym.spaces.Discrete(1) => Just 1 state in the state space\n    yield cocotb_env.run()\n\n    # plot the results of the verification experiment\n    utils.visualize(cocotb_env.log_file_name)\n```\n\nVeRLPy also provides some plotting capabilities which can be accessed from `utils` as shown above.\n",
                    "type": "Text_excerpt",
                    "original_header": "Instantiating the verification environment object",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The identified functional coverage events can be tracked by using cocotb coroutines like in conventional cocotb-based verification.\n\n```python\n# test_my_example_design.py\n\nimport cocotb\nfrom verlpy import CocotbEnv, utils\nimport gym\n\nclass MyExampleDesignCocotbEnv(CocotbEnv):\n    def __init__(self, dut, observation_space):\n        super().__init__()\n        self.dut = dut\n        self.observation_space = observation_space\n\n        # add here any \"self.\" variables that need to be accessed in\n        # other functions below\n\n    @cocotb.coroutine\n    def setup_rl_episode(self):\n        # add here the logic to be \n        # executed on each call to reset() by the RL agent\n        self.cocotb_coverage.clear() # clear last episode's coverage\n        self.coverage_coroutine = cocotb.fork(monitor_signals(self.dut, self.cocotb_coverage))\n\n    @cocotb.coroutine\n    def rl_step(self):\n        # add here the verification logic to be \n        # executed on each call to step() by the RL agent\n        \n\n    @cocotb.coroutine\n    def terminate_rl_episode(self):\n        # add here the logic to be executed at the end\n        # of each RL episode when done == 1 for the Gym env\n\n        self.coverage_coroutine.kill()\n\n\n    def finish_experiment(self):\n        # add here the logic to be executed after all\n        # the episodes are completed\n\n@cocotb.coroutine\ndef monitor_signals(dut, cocotb_coverage):\n    while True:\n        yield RisingEdge(dut.CLK)\n        s = [(int)(dut.reg_1.value == 1),\n             (int)((dut.reg_2.value) % 4 != 0),\n             (int)(dut.reg_3.value == 32)]\n        # Here reg_1, reg_2 and reg_3 are some\n        # key registers of interest in the DUT\n\n        s = ''.join(map(str, s))\n        cocotb_coverage.append(s)\n\n# entry point for the cocotb verification test\n@cocotb.test()\ndef run_test(dut):\n    cocotb_env = MyExampleDesignCocotbEnv(dut, gym.spaces.Discrete(1))\n    # gym.spaces.Discrete(1) => Just 1 state in the state space\n    yield cocotb_env.run()\n\n    # plot the results of the verification experiment\n    utils.visualize(cocotb_env.log_file_name)\n```\nThe `monitor_signals` coroutine added above monitors the DUT for events of interest that count towards the functional coverage. The  boolean logical expressions in the list `s` above correspond to the logical expressions for identifying each event. The number of times these events occur affect the reward signal given to the RL agent. `monitor_signals` should track these events and add them to the `cocotb_coverage` attribute of the `MyExampleDesignCocotbEnv` class that we wrote. `monitor_signals` is invoked in the `setup_rl_episode` coroutine along with the clock and reset coroutines. It is passed the `cocotb_coverage` attribute as an argument. Note that `monitor_signals` is killed in the `terminate_rl_episode` coroutine at the end of each RL episode. This is important for all coroutines since it might otherwise lead to performance issues with multiple \"alive\" coroutines still ongoing from previous episodes.\n",
                    "type": "Text_excerpt",
                    "original_header": "Adding coroutines to track events",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "A configuration file `config.ini` needs to be provided to specify the parameters related to the simulation and the RL agent. A sample coniguration file is provided below with comments for what each section and key corresponds to.\n\n```ini\n; This section is to provide the\n; main parameters for the verification runs\n[main]\n; number of RL steps for which the experiment is run\nnum_steps = 1000\n\n; number of functional events tracked\nnum_events = 3\n\n; weightage of each functional event for reward computation\nreward_function = [0, 0, 1]\n\n; set log_step as 0 for logging just aggregated results and 1 for logging details in each step\nlog_step = 0\n\n; set mode as 0 to generate the random baseline without RL and 1 for using RL\nmode = 1\n\n; specify the stable_baselines3 algorithm to be used from SAC, DDPG and TD3\nalgorithm = SAC\n\n; fsm_states contains the regex patterns for \n; state-based binary sequence generation\n; (leave as [] unless utils.get_next_state_of_FSM() is needed in the code)\nfsm_states = []\n\n; Provide the discrete action component names here. \n; The valid dscrete value set for the specified keys\n; should be given in the [discrete] section\ndiscrete_params = ['count_width', 'fmap_len']\n\n\n; This section is to provide the bounds\n; of the continuous dimensions of the action space.\n; If multiple dimensions are there, provide the list of bounds for each dimension\n; eg: lower_bounds = [0, 0, 1] and upper_bounds = [1, 1, 3] corresponds to\n; [0, 1] x [0, 1] x [1, 3] as the continuous action space\n[continuous]\nlower_bounds = [0, 5]\nupper_bounds = [1, 7]\n\n\n; This section is to provide the list of valid \n; discrete values for each discrete action\n; component named in discrete_params\n[discrete]\ncount_width = [1, 2, 3, 4, 5, 6, 7, 8]\nfmap_len = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]\n\n\n; This section is to provide the required\n; hyperparameters of the chosen stable_baselines3 algorithm\n[RL]\npolicy = 'MlpPolicy'\nlearning_starts = 100\nlearning_rate = 0.0003\ntrain_freq = (1, 'episode')\nverbose = 1\n```\nThe `reward_function` key specifies how the functional events tracked in the `self.cocotb_coverage` attribute need to be rewarded for improving coverage. `reward_function` set as `[0, 0, 1]` like above implies that if the third functional event occurs during a step, a reward is given to the RL agent. Refer to the [paper](https://arxiv.org/abs/2108.03978) for the actual computation details.\n\nThe `[continuous]` and `[discrete]` sections together specify the total action space of the RL agent. The continuous dimensions of the action space based on the above configuration file is the cross product `[0, 1] x [5, 7]`. The discrete dimensions of the the action space is the cross product `{1, 2, ..., 8} x {100, 200, ..., 1000}`. Therefore the complete action space is the cross product `[0, 1] x [5, 7] x {1, 2, ..., 8} x {100, 200, ..., 1000}`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Configuration File",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "Finally, the body of each of the coroutines overriden in `MyExampleDesignCocotbEnv` need to be completed. The action suggested by the RL agent based on the `config.ini` can be accessed through the `self.continuous_actions` and `self.discrete_actions` attributes of the class. In the above example, `self.continuous_actions` will sample from `[0, 1] x [5, 7]` and `self.discrete_actions` will sample from `{1, 2, ..., 8} x {100, 200, ..., 1000}`.\n\nThe list `self.cocotb_coverage` needs to be updated with the strings corresponding to the covered events from the previous timestep of the RL episode for proper reward computation based on the reward function defined in the `config.ini` file. This update will happen on its own if `self.cocotb_coverage` is passed as the argument `cocotb_coverage` to the  `monitor_signals` coroutine defined above  Refer to the examples folder for more concrete examples on how this is done in various designs.\n",
                    "type": "Text_excerpt",
                    "original_header": "Filling in the verification logic",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "VeRLPy by default assumes a single step single state MDP. If a multi-step MDP is required, it can be implemented by overriding `compute_rl_observation` function in the `MyExampleDesignCocotbEnv` class. The internal elements of the DUT that need to be tracked for computing the observation/state after each step can be done so by utilizing a separate coroutine like how `monitor_signals` is used for tracking the coverage to compute the reward.\n",
                    "type": "Text_excerpt",
                    "original_header": "Multi-step RL",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            },
            {
                "result": {
                    "value": "The make file can be written like how it is done usually in cocotb testbenches. Once it is done and `make` is run, the verification simulation runs and the logs, models and plots are generated. Use the `mode` configuration parameter in `config.ini` for running the verification with/without the RL feedback.\n",
                    "type": "Text_excerpt",
                    "original_header": "Make file",
                    "parent_header": [
                        "VeRLPy",
                        "Usage Guide"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aebeljs/VeRLPy/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-08T11:14:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T02:30:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25581
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "545": {
        "filename": "tsigalko18_webembed-replication-package_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tsigalko18/webembed-replication-package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-30T10:59:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-27T08:28:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114500
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 6072
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "809": {
        "filename": "ML-Bugs-2022_Replication-Package_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ML-Bugs-2022/Replication-Package",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-04-30T22:02:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-26T09:12:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "45": {
        "filename": "skylineprof_skyline_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/skylineprof/skyline",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "---\nid: install\ntitle: Installing Skyline\n---\n\n### Requirements\n\nSkyline works with GPU-based neural networks that are implemented in PyTorch.\nTo run Skyline, you need:\n\n- A system equipped with an NVIDIA GPU\n- PyTorch 1.1.0+\n- Python 3.6+\n\nNote that Skyline only supports profiling models that are trained using a GPU.\n\nSkyline consists of two components: (i) the Skyline profiler, and (ii) a plugin\nfor Atom. The Skyline profiler has only been tested on Ubuntu 18.04, but should\nalso work on other versions of Ubuntu that have Python 3.6+. The Skyline plugin\nhas been tested on both Ubuntu 18.04 and macOS Mojave (10.14) with the latest\nversion of Atom.\n\n\n### Installation\n\nFor interactive profiling (i.e. Skyline inside Atom), you need both components.\nIf you only plan to use Skyline for [Standalone Profiling](standalone.md), you\nonly need the Skyline profiler component.\n\n#### Skyline Profiler\n\nThe Skyline profiler can be installed using `pip`. In your shell, run:\n\n```bash\npip install skyline-cli\n```\n\nAs with most Python packages, we recommend installing Skyline inside a\n`virtualenv`. After installing the Skyline profiler, you will be able to\ninvoke it by running `skyline` in your shell.\n\n#### Skyline Atom Plugin\n\nThe Skyline Atom plugin can be installed using `apm` (the Atom package\nmanager), which should be automatically installed after you install\n[Atom](https://atom.io). In your shell, run:\n\n```bash\napm install skyline\n```\n\nYou can alternatively install Skyline by using Atom's preferences pane and\nsearching for `skyline` under the Install section.\n\nAfter installing the Skyline plugin, the `Skyline:Toggle` command should be\navailable in your command palette. A Skyline sub-menu should also appear\nunder the \"Packages\" menu.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/skylineprof/skyline/master/website/docs/install.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<h2 id=\"installing-skyline\">Installing Skyline</h2> \nTo run Skyline, you need: \n- A system equipped with an NVIDIA GPU\n- PyTorch 1.1.0+\n- Python 3.6+ \nSkyline is installed using `pip` and the Atom Package Manager (`apm`).\n```bash\npip install skyline-cli\napm install skyline\n```\n \nGenerally you need *both* packages to use Skyline. However, depending on your\nuse case and development setup, you may only need the `pip` package or you may\nneed to install the packages on different machines. **See the [installation\npage on the website](https://skylineprof.github.io/docs/install) for detailed\ninstallation instructions tailored to different use cases.** \nAfter installing Skyline, you will be able to invoke the command line tool by\nrunning `skyline` in your shell. \nTo get started quickly, check out the [Getting Started page on the Skyline\nwebsite](https://skylineprof.github.io/docs/getting-started). \nFor more information about using Skyline, including standalone profiling and\nsetting up a remote project, please [see the Skyline\ndocumentation](https://skylineprof.github.io/docs/). \nSkyline uses semantic versioning. Before the 1.0.0 release, backward\ncompatibility between minor versions will not be guaranteed. \nThe Skyline command line tool and plugin use *independent* version numbers.\nHowever, it is very likely that minor and major versions of the command line\ntool and plugin will be released together (and hence share major/minor version\nnumbers). \nSkyline began as a research project at the [University of\nToronto](https://web.cs.toronto.edu) in collaboration with [Tovi\nGrossman](https://www.tovigrossman.com) and [Gennady\nPekhimenko](https://www.cs.toronto.edu/~pekhimenko/).\n \n",
                    "original_header": "Installing Skyline"
                },
                "confidence": 0.9765943896934914,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skylineprof/skyline/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-18T17:57:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-20T20:50:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 160822
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 157372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Less",
                    "name": "Less",
                    "type": "Programming_language",
                    "size": 14792
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13021
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2497
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 543
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Package Manager"
        ]
    },
    "746": {
        "filename": "ika-rwth-aachen_robotkube_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ika-rwth-aachen/robotkube",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-23T05:49:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T16:08:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1569
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "177": {
        "filename": "EngineeringSoftware_time-segmented-evaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/time-segmented-evaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Requires Anaconda/Miniconda, and the models' source code at `_work/src/`.\n\n```\npython -m tseval.main prepare_envs --which=$model_cls\n# Example: python -m tseval.main prepare_envs --which=TransformerACL20\n```\n\nWhere the `$model_cls` for each model can be looked up in this table\n(Transformer and Seq2Seq are using the same model class and\nenvironment):\n\n| $task | $model_cls         | Model         |\n|:------|:-------------------|:--------------|\n| CG    | DeepComHybridESE19 | DeepComHybrid |\n| CG    | TransformerACL20   | Transformer   |\n| CG    | TransformerACL20   | Seq2Seq       |\n| MN    | Code2VecPOPL19     | Code2Vec      |\n| MN    | Code2SeqICLR19     | Code2Seq      |\n\nThe name of the conda environment created is `tseval-$task-$model_cls`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare the Python environments for ML models",
                    "parent_header": [
                        "Impact of Evaluation Methodologies on Code Summarization",
                        "Code for Training and Evaluating Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the dataset at `_work/$task/setup/$method/`, and\nactivating the right conda environment\n(`conda activate tseval-$task-$model_cls`).\n```\npython -m tseval.main exp_train \\\n    --task=$task \\\n    --setup_name=$method \\\n    --model_name=$model_cls \\\n    --exp_name=$exp_name \\\n    --seed=$seed \\\n    $model_args\n# Example: python -m tseval.main exp_train \\\n#     --task=CG \\\n#     --setup_name=T \\\n#    --model_name=TransformerACL20 \\\n#    --exp_name=Transformer \\\n#    --seed=4182\n```\n \n",
                    "original_header": "Train ML models under a methodology"
                },
                "confidence": 0.9995136901614255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the dataset at `_work/$task/setup/$method/`, the trained\nmodel at `_work/$task/exp/$method/$exp_name/`, and activating the\nright conda environment (`conda activate tseval-$task-$model_cls`).\n```\nfor $action in val test_standard test_common; do\n    python -m tseval.main exp_eval \\\n        --task=$task \\\n        --setup_name=$method \\\n        --exp_name=$exp_name \\\n        --action=$action\ndone\n# Example: for $action in val test_standard test_common; do\n#    python -m tseval.main exp_eval \\\n#        --task=CG \\\n#        --setup_name=T \\\n#        --exp_name=Transformer \\\n#        --action=$action\n#done\n```\n \n",
                    "original_header": "Evaluate ML models"
                },
                "confidence": 0.9988459401605935,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the evaluation results at\n`_work/$task/result/$method/$exp_name/`, and the use of `tseval`\nenvironment (`conda activate tseval`).\n```\nfor $action in val test_standard test_common; do\n    python -m tseval.main exp_compute_metrics \\\n        --task=$task \\\n        --setup_name=$method \\\n        --exp_name=$exp_name \\\n        --action=$action\ndone\n# Example: for $action in val test_standard test_common; do\n#    python -m tseval.main exp_compute_metrics \\\n#        --task=CG \\\n#        --setup_name=T \\\n#        --exp_name=Transformer \\\n#        --action=$action\n#done\n```\n \n[paper-arxiv]: https://arxiv.org/abs/2108.09619\n[paper-utcs]: https://www.cs.utexas.edu/users/ai-lab/downloadPublication.php?filename=http://www.cs.utexas.edu/users/ml/papers/nie.acl2022.pdf&pubid=127948\n \n",
                    "original_header": "Compute automatic metrics"
                },
                "confidence": 0.9854270086253287,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/time-segmented-evaluation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-10T17:15:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-27T02:06:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 245906
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 39042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14320
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "703": {
        "filename": "GammaTauAI_opentau_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GammaTauAI/opentau",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run `make` while being in the directory\n\nThe output binary (symlinked) will be at `/out/client`\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "OpenTau: Using Large Language Models for Gradual Type Inference"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/GammaTauAI/opentau/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-02T05:41:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T00:46:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 138281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 95831
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 37399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 695
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "815": {
        "filename": "logpai_logzip_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/logzip",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Logzip can be directly execute through source code. \n\n1. Download and install python3 [here](https://www.python.org/downloads/).\n\n2. Install Pandas.\n\n   ```$ pip3 install pandas```\n\n3. Clone logzip.\n\n   ``` $ clone https://github.com/logpai/logzip.git``` \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "logzip"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/logpai/logzip/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-09-15T12:10:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T19:16:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "640": {
        "filename": "i-se_SatSpaceExpo_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/SatSpaceExpo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We used [Z3 v4.8.4](https://github.com/Z3Prover/z3/releases/tag/z3-4.8.4) during the experiment, but newer version could be probably faster.\n```\nwget https://github.com/Z3Prover/z3/archive/z3-4.8.4.tar.gz\ntar -xzf z3-4.8.4.tar.gz\n# follow steps in README.md inside the z3-4.8.4 like following...\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```",
                    "type": "Text_excerpt",
                    "original_header": "Step 1. Download and set up Z3 solvers",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "In the SNAP, for convenient, we use the ID to represent the benchmarks,  you can also replace or add more test cases by editing the `src/commons/utility/utility.h`.\nBe default, the id shows as \n```\nstatic std::vector<std::string> benchmark_models{\n    \"Benchmarks/Blasted_Real/blasted_case47.cnf\", // 0\n    \"Benchmarks/Blasted_Real/blasted_case110.cnf\", // 1\n    \"Benchmarks/V7/s820a_7_4.cnf\", // 2\n    \"Benchmarks/V15/s820a_15_7.cnf\", // 3\n    \"Benchmarks/V3/s1238a_3_2.cnf\", // 4\n    \"Benchmarks/V3/s1196a_3_2.cnf\", // 5\n    \"Benchmarks/V15/s832a_15_7.cnf\", // 6\n    \"Benchmarks/Blasted_Real/blasted_case_1_b12_2.cnf\", // 7\n    \"Benchmarks/Blasted_Real/blasted_squaring16.cnf\", // 8\n    \"Benchmarks/Blasted_Real/blasted_squaring7.cnf\", // 9\n    \"Benchmarks/70.sk_3_40.cnf\", // 10\n    \"Benchmarks/ProcessBean.sk_8_64.cnf\", // 11\n    \"Benchmarks/56.sk_6_38.cnf\", // 12\n    \"Benchmarks/35.sk_3_52.cnf\", // 13\n    \"Benchmarks/80.sk_2_48.cnf\", // 14\n    \"Benchmarks/7.sk_4_50.cnf\", // 15\n    \"Benchmarks/doublyLinkedList.sk_8_37.cnf\", // 16\n    \"Benchmarks/19.sk_3_48.cnf\", // 17\n    \"Benchmarks/29.sk_3_45.cnf\", // 18\n    \"Benchmarks/isolateRightmost.sk_7_481.cnf\", //19\n    \"Benchmarks/17.sk_3_45.cnf\", // 20\n    \"Benchmarks/81.sk_5_51.cnf\", // 21\n    \"Benchmarks/LoginService2.sk_23_36.cnf\", // 22\n    \"Benchmarks/sort.sk_8_52.cnf\", // 23\n    \"Benchmarks/parity.sk_11_11.cnf\", // 24\n    \"Benchmarks/77.sk_3_44.cnf\", // 25\n    \"Benchmarks/20.sk_1_51.cnf\", // 26\n    \"Benchmarks/enqueueSeqSK.sk_10_42.cnf\", // 27\n    \"Benchmarks/karatsuba.sk_7_41.cnf\", // 28\n    \"Benchmarks/tutorial3.sk_4_31.cnf\" // 29\n};\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 4. Understanding the Benchmark ID",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            },
            {
                "result": {
                    "value": "```\ncd /path/to/SatSpaceExpo\nmake snap\n/path/to/SatSpaceExpo/bin/snap -i ID@Step4\n\n# To clean up all compiled binaries\ncd /path/to/SatSpaceExpo\nmake clean\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 5. Compile SNAP and execution",
                    "parent_header": [
                        "SNAP for building very small test suites",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ai-se/SatSpaceExpo/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-28T14:44:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-18T09:20:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14162865
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1116034
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 148813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 141281
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ada",
                    "name": "Ada",
                    "type": "Programming_language",
                    "size": 89079
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Pascal",
                    "name": "Pascal",
                    "type": "Programming_language",
                    "size": 75208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 55627
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 44252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "DIGITAL Command Language",
                    "name": "DIGITAL Command Language",
                    "type": "Programming_language",
                    "size": 27303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Objective-C",
                    "name": "Objective-C",
                    "type": "Programming_language",
                    "size": 21403
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18594
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10727
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 8099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 3895
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SAS",
                    "name": "SAS",
                    "type": "Programming_language",
                    "size": 1847
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Module Management System",
                    "name": "Module Management System",
                    "type": "Programming_language",
                    "size": 1545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 787
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 178
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary"
        ]
    },
    "49": {
        "filename": "sillywalk_defect-prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sillywalk/defect-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nThe open source code for this work is updated here: https://github.com/sillywalk/defect-prediction/tree/dev \r\n \n",
                    "original_header": "<a href=\"https://arxiv.org/abs/1905.01719\">EMBLEM Paper</a> repository:"
                },
                "confidence": 0.9978620804138911,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sillywalk/defect-prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-19T18:35:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-01T01:19:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 22128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 698
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "728": {
        "filename": "iSEngLab_AwesomeLearningAPR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iSEngLab/AwesomeLearningAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\ud83d\udd25\ud83d\udd25\ud83d\udd25[2024-05-03] We have released a new paper about LLM4APR, [A Systematic Literature Review on Large Language Models for Automated Program Repair](https://arxiv.org/abs/2405.01466). Please refer to <a href=\"https://arxiv.org/abs/2405.01466\"><img src=\"https://img.shields.io/badge/arXiv-2405.01466-blue.svg\"></a> and <a href=\"https://github.com/iSEngLab/AwesomeLLM4APR/\"><img src=\"https://img.shields.io/badge/GitHub-AwesomeLLM4APR-blue.svg\"></a> \n",
                    "original_header": "Awesome Learning-based APR"
                },
                "confidence": 0.9997868722194697,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iSEngLab/AwesomeLearningAPR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Dataset | Language | #Items | Test Case | #Papers Used |\n| :-- | --- | --- | --- | --- |\n| Bears | Java | 251 | yes | 2+ papers |\n| BFP medium | Java | 65454 | no | 9+ papers |\n| BFP samll | Java | 58350 | no | 9+ papers | \n| BigFix | Java | 1.824 M | no | 2+ papers |\n| Bugs2Fix | Java | 92849 | no | 2+ papers | \n| Bugs.jar | Java | 1158 | yes | 3+ papers |\n| Code-Change-Data | Java | 44372 | no | 1+ papers | \n| CodeXGlue | Java | 122 K | no | 1+ papers |\n| CodRep | Java | 58069 | no | 2+ papers | \n| CPatMiner | Java | 44 K | no | 1+ papers |\n| DeepRepair | Java | 374 | no | 1+ papers | \n| Defects4J | Java | 835 | yes | 11+ papers |\n| Function-SStuBs4J | Java | 21047 | no | 1+ papers | \n| IntroClassJava | Java | 998 | yes | 2+ papers |\n| Java-med | Java | 7454 | no | 1+ papers | \n| ManySStuBs4J large | Java | 63923 | no | 1+ papers |\n| ManySStuBs4J small | Java | 10231 | no | 2+ papers | \n| MegaDiff | Java | 663029 | no | 1+ papers |\n| Ponta | Java | 624 | no | 1+ papers |\n| Pull-Request-Data | Java | 10666 | no | 2+ papers |\n| Ratchet | Java | 35 K | no | 1+ papers |\n| Recoder | Java | 103585 | no | 1+ papers |\n| TRANSFER | Java | 408091 | no | 1+ papers |\n| Mesbah | Java | 4.8 M | no | 1+ papers |\n| AOJ | C | 2482 | no | 1+ papers |\n| Big-Vul | C | 3745 | no | 1+ papers |\n| Code4Bench | C | 25 K | yes | 1+ papers |\n| CodeHunt | C | 195 K | yes | 1+ papers |\n| CVEFixes | C |  | 8482 | 2+ papers |\n| DeepFix | C | 6971 | yes | 6+ papers |\n| ManyBugs | C | 185 | yes | 3+ papers |\n| Prophet | C | 69 | yes | 2+ papers |\n| Prutor | C | 6971 | yes | 2+ papers |\n| BugAID | JS | 105133 | no | 4+ papers |\n| BugsJS | JS | 453 | yes | 1+ papers |\n| HOPPITY | JS | 363 K | no | 1+ papers |\n| KATANA | JS | 114 K | no | 1+ papers |\n| REPTORY | JS | 407 K | no | 1+ papers |\n| TFix | JS | 100 K | no | 1+ papers |\n| ETH Py150 | Python | 150 K | no | 3+ papers |\n| GitHub-Python | Python | 3 M | no | 1+ papers |\n| Mester | Python | 13 K | no | 1+ papers |\n| PyPIBug | Python | 2374 | no | 2+ papers |\n| SSB-9M | Python | 9 M | no | 1+ papers |\n| VUDENC | Python | 10 K | no | 1+ papers |\n| Chhatbar | Python | 286 | yes | 1+ papers |\n| SPoC | C++ | 18356 | yes | 1+ papers |\n| QuixBugs | Java,Python | 40 | yes | 11+ papers |\n| DeepDebug | Java,Python | 523 | no | 2+ papers |\n| MSR20 | C,C++ | 188K | no | 1+ papers |\n| CoCoNut | Java,C,JS,Python | 24 M | yes | 4+ papers |\n| CodeFlaw | C,Python | 3902 | yes | 3+ papers |\n| ENCORE | Java,C++,JS,Python | 9.2 M | no | 1+ papers | \n",
                    "original_header": "Datasets"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iSEngLab/AwesomeLearningAPR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-18T09:46:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T12:06:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Binary"
        ]
    },
    "502": {
        "filename": "RoBERTaCode_roberta_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RoBERTaCode/roberta",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "python3 run_on_test_set.py --model_path [path of the trained model] --test_set_inputs_path [Path of the test file (has the name matching *_masked_code_test.txt)] --predictions_path [Path of the textual file where predictions will be written (the file is created by the script)]\n",
                    "type": "Text_excerpt",
                    "original_header": "Running a trained model on a test set",
                    "parent_header": [
                        "Replication package for RoBERTa Model",
                        "CODE"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/RoBERTaCode/roberta/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-08-28T11:31:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T07:27:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 40910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 7545
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "289": {
        "filename": "sulir_runtimesamp_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sulir/runtimesamp",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build both the Java agent and the IDE plugin, run the command: \n",
                    "original_header": "Building"
                },
                "confidence": 0.9997095124156381,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sulir/runtimesamp/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-17T13:35:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-20T15:25:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 46475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "294": {
        "filename": "AizazSharif_DeepOrder-ICSME21_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/T3AS/DeepOrder-ICSME21",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone the GitHub repository and install the dependencies.\n1. Clone the repo and go to the directory \n```\n$ git clone https://github.com/T3AS/DeepOrder-ICSME21/DeepOrder.git\n$ cd DeepOrder\n\n```\n2. Install Anaconda (for creating and activating a separate environment)\n3. Run: \n```\n$ conda create -n DeepOrder python==3.6\n$ conda activate DeepOrder\n```\n4. Inside the enviroment, run:\n```\n$ pip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DeepOrder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/AizazSharif/DeepOrder-ICSME21/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-30T10:11:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T16:58:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 228898
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99508
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 703
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1180": {
        "filename": "cornejo_fieldmonitoringfeasibility_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ocornejo/fieldmonitoringfeasibility",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-01-27T18:45:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2019-07-17T07:42:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 168901
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "120": {
        "filename": "joymallyac_Fair-SMOTE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/Fair-SMOTE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-05-24T04:32:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-06T20:59:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7450512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96296
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "82": {
        "filename": "SNTSVV_SEDE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/SNTSVV/SEDE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-09-20T07:40:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-26T08:19:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1006861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1085": {
        "filename": "kth_codrep-competition_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/CodRep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "E.g.;\n```\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/1.txt 42\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/2.txt 78\n/Users/foo/bar/CodRep-competition/Datasets/Dataset1/Tasks/3.txt 30\n...\n```\n \n",
                    "original_header": "Command-line interface"
                },
                "confidence": 0.9999740990380444,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/codrep-competition/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For evaluating specific datasets, use [-d] or [-datasets=] options and specify paths to datasets. The default behaviour is evaluating on all datasets. The path must be absolute path and multiple paths should be separated by `:`, for example:\n```shell\nyour-program Files | python evaluate.py -d /Users/foo/bar/CodRep-competition/Datasets/Dataset1:/Users/foo/bar/CodRep-competition/Datasets/Dataset2\n``` \n",
                    "original_header": "How to evaluate your competing program"
                },
                "confidence": 0.9999550394185479,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kth/codrep-competition/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-03-23T15:42:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-31T11:51:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "497": {
        "filename": "sailuh_kaiaulu_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sailuh/kaiaulu",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Kaiaulu has been tested on OS X and Ubuntu. For Windows and other OS users, try [Virtualbox](https://www.virtualbox.org/),\n[VMware](https://www.vmware.com/), or any other software to run virtual machines for Ubuntu. \n\nYou can install Kaiaulu using the following command in your R console:\n\n```\nif (!require(\"devtools\")) install.packages(\"devtools\")\ndevtools::install_github(\"sailuh/kaiaulu\")\n```\n\nI also recommend you download the repo to have some example project configuration files, and notebooks to experiment:\n\n 1. Clone this repo \n 2. Open `kaiaulu.Rproj` using RStudio\n 3. Run the unit tests `devtools::test()`. If any fail, and you are not clear why, feel free to [ask in Discussions](https://github.com/sailuh/kaiaulu/discussions)\n 4. Build the documentation `devtools::document(roclets = c('rd', 'collate', 'namespace'))`.\n 5. Build Kaiaulu (Top right pane in RStudio -> Build tab -> Install and Restart)\n 6. Run `vignettes/kaiaulu_architecture.Rmd` \n 7. See the Wiki's [Third Party Tools Setup](https://github.com/sailuh/kaiaulu/wiki/Third-Party-Tools-Setup) if you are using a Notebook that relies on them. These require very minimal overhead by downloading a binary file, and specifying their path on `tools.yml` (see example on the repository). \n ",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Kai\u0101ulu <a href=\"https://github.com/sailuh/kaiaulu\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"140\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            },
            {
                "result": {
                    "value": "\n| Social Smells | Architectural Flaws |\n| ------------- | ------------- |\n| <a href=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/social-smells-cheatsheet.pdf\"><img src=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/social_smells_cheatsheet.png\" width=\"272\" height=\"210\"/></a> |  <a href=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/dv8-cheatsheet.pdf\"><img src=\"https://github.com/sailuh/kaiaulu_cheatsheet/blob/main/cheatsheets/dv8_cheatsheet.png\" width=\"272\" height=\"210\"/></a>   |\n\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Cheatsheets",
                    "parent_header": [
                        "Kai\u0101ulu <a href=\"https://github.com/sailuh/kaiaulu\"><img src=\"man/figures/logo.png\" align=\"right\" height=\"140\" /></a>",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For detailed functionality, see Kaiaulu's [API](http://itm0.shidler.hawaii.edu/kaiaulu/reference/index.html). \n",
                    "original_header": "Overview"
                },
                "confidence": 0.9275121223351014,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sailuh/kaiaulu/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-18T03:27:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-02T03:26:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 403375
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "111": {
        "filename": "consult-kcl_fhir-ehr-adapter_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kclconsult/ehr-fhir-converter",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run setup tools from the root directory:\n\n```\npython setup.py sdist bdist_wheel\n```\n\nGiven a certain release, either available in ``dist/`` if built, or via Github, install as follows:\n\n```\npython setup.py install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install as package",
                    "parent_header": [
                        "EHR-FHIR Converter"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Build these containers:\n```\ndocker-compose build\n```\nRun these containers:\n```\ndocker-compose up -d\n```\n(Optional) Run without queue:\n```\ndocker-compose up --scale webapp-queue=0 rabbit=0\n```\n \n",
                    "original_header": "Deployment"
                },
                "confidence": 0.9817946320192527,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/martinchapman/nokia-health/tags).\n \n",
                    "original_header": "Versioning"
                },
                "confidence": 0.9351360543374216,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/consult-kcl/fhir-ehr-adapter/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-02-16T11:33:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-02T04:03:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 95683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5314
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 272
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Container"
        ]
    },
    "167": {
        "filename": "ChristianBirchler_sdc-scissor_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/christianbirchler-org/sdc-scissor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```{code-block} text\n ____    ____    ____              ____\n/\\  _`\\ /\\  _`\\ /\\  _`\\           /\\  _`\\           __\n\\ \\,\\L\\_\\ \\ \\/\\ \\ \\ \\/\\_\\         \\ \\,\\L\\_\\    ___ /\\_\\    ____    ____    ___   _ __\n \\/_\\__ \\\\ \\ \\ \\ \\ \\ \\/_/_  _______\\/_\\__ \\   /'___\\/\\ \\  /',__\\  /',__\\  / __`\\/\\`'__\\\n   /\\ \\L\\ \\ \\ \\_\\ \\ \\ \\L\\ \\/\\______\\ /\\ \\L\\ \\/\\ \\__/\\ \\ \\/\\__, `\\/\\__, `\\/\\ \\L\\ \\ \\ \\/\n   \\ `\\____\\ \\____/\\ \\____/\\/______/ \\ `\\____\\ \\____\\\\ \\_\\/\\____/\\/\\____/\\ \\____/\\ \\_\\\n    \\/_____/\\/___/  \\/___/            \\/_____/\\/____/ \\/_/\\/___/  \\/___/  \\/___/  \\/_/\n\n\n```\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-%23FE5196?logo=conventionalcommits&logoColor=white)](https://conventionalcommits.org)\n[![GitHub issues](https://img.shields.io/github/issues/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/issues)\n[![GitHub forks](https://img.shields.io/github/forks/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/network)\n[![GitHub stars](https://img.shields.io/github/stars/christianbirchler-org/sdc-scissor)](https://github.com/christianbirchler-org/sdc-scissor/stargazers)\n[![](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml/badge.svg)](https://github.com/christianbirchler-org/sdc-scissor/actions/workflows/ci.yml)\n[![PyPI](https://img.shields.io/pypi/v/sdc-scissor)](https://pypi.org/project/sdc-scissor/)\n[![](https://readthedocs.org/projects/sdc-scissor/badge)](https://sdc-scissor.readthedocs.io)\n[![](https://img.shields.io/badge/code%20style-black-000000.svg)](https://black.readthedocs.io/)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=alert_status)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=ncloc)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=coverage)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_index)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=reliability_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=duplicated_lines_density)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=vulnerabilities)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=bugs)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=security_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=sqale_rating)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![](https://sonarcloud.io/api/project_badges/measure?project=christianbirchler-org_sdc-scissor&metric=code_smells)](https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor)\n[![DOI](https://zenodo.org/badge/363107094.svg)](https://zenodo.org/badge/latestdoi/363107094)\n<div style=\"text-align: center;\">\n<a href=\"https://github.com/christianbirchler-org/sdc-scissor\">\n<img src=\"https://raw.githubusercontent.com/christianbirchler-org/sdc-scissor/main/docs/images/github_logo_icon.png\">\n</a>\n<a href=\"https://sonarcloud.io/summary/overall?id=christianbirchler-org_sdc-scissor\">\n<img src=\"https://sonarcloud.io/images/project_badges/sonarcloud-black.svg\">\n</a>\n</div>\n \n",
                    "original_header": "SDC-Scissor"
                },
                "confidence": 0.9999999999999432,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ChristianBirchler/sdc-scissor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-30T10:32:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-04T21:06:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 21482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 14209
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 2715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1379
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 359
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "56": {
        "filename": "lascam-UFU_automatic-diff-dissection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/lascam-UFU/automatic-diff-dissection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-12-02T11:59:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-02T11:35:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 15604603
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 5226
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1181": {
        "filename": "ssert-kth_n-eth_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/N-ETH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-28T11:45:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-27T14:40:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 59427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 7962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1038": {
        "filename": "stevekommrusch_vrepair_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/VRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * Python: 3.9.1\n * Clang: 13.0.0\n * GCC: 10.2.0\n * OpenNMT-py: 1.2.0\n \n",
                    "original_header": "Software versions"
                },
                "confidence": 0.9619758603659467,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stevekommrusch/vrepair/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The trained models are available at:\n* all_VRepair_models_parts.z01  https://zenodo.org/records/10445594 md5:f4029f3f48298b20cf085f3f37d798fd\n* all_VRepair_models_parts.z02  https://zenodo.org/records/10448514 md5:9b74b49484fba0cd72361d81618c6a9f \n* all_VRepair_models_parts.z03  https://zenodo.org/records/10693640 md5:dc05f8b53d947e24b38124fa07d73636\n* all_VRepair_models_parts.z04 https://zenodo.org/records/10694133 md5:ce4ac1a83e2d33e73bf59b7582400466\n* all_VRepair_models_parts.z05 https://zenodo.org/records/10694179 md5:21a2de5969f34113cdbd13b78a1fd2fc\n* all_VRepair_models_parts.zip  https://zenodo.org/records/10695406 md5:82ed7c8bc58c867755e8a2616cf8dd5d \nThe source domain training dataset  for the main approach is available at <https://github.com/ASSERT-KTH/VRepair/releases/download/v20240223/BugFix.tar.bz2> (extracted from the Zenodo package) \n \n",
                    "original_header": "Trained models"
                },
                "confidence": 0.9999882275520158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/stevekommrusch/vrepair/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-22T10:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:11:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 834515176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96106
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20044
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 11502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary"
        ]
    },
    "1118": {
        "filename": "guanqun-yang_testaug_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/guanqun-yang/testaug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following will demonstrate how TestAug is applied to testing a sentiment classifier's ability to handle negation in a sentence. Before going through each step, make sure that \n   ```bash\n   export OPENAI_API_KEY=\"XYZ\"\n   ``` \nNow we are ready to use the TestAug system: \n- Step 0: Clone the repository and make sure the paths in the `setting/setting.py` are set correctly. \n  - If $\\tau \\geq 90\\%$, directly proceed to Step 4 without stepping into Step 3.\n  - if $\\tau < 90\\%$, repeat Step 1 as follows, where `--phase2` will query a training set to train a `roberta-base` classifier to filter out the invalid sentences. Proceed to Step 3 after this step. \n  ```bash\n  # prepare training data\n  python pipeline/02_prepare_data.py --task sentiment --description 3 --save\n  \n  # train the classifier\n  python pipeline/03_classify.py --task sentiment --description 3 --train --test\n  ``` \n",
                    "original_header": "Pipeline"
                },
                "confidence": 0.9713512408250669,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "With all three tasks' test suites available, Table 3 could be reproduced following the steps below. \n- Step 1: Run the `reproduce.sh` script below: \n  ```bash\n  bash reproduce.sh\n  ``` \n  ```bash\n  python pipeline/07_report.py --task sentiment --table\n  ```\n  \n \n",
                    "original_header": "Reproducing Experiments"
                },
                "confidence": 0.9676395343287882,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It is recommended to set up our system using a computing platform with GPU support.\n```bash\nconda create --name testaug python==3.8.0\nconda activate testaug\n\n# generic libraries\nconda install numpy pandas matplotlib seaborn scikit-learn ipython tqdm termcolor\nconda install pytorch==1.7.1 torchvision==0.8.2 torchaudio==0.7.2 cudatoolkit=10.1 -c pytorch \n\n# libraries related to NLP models\npip install transformers datasets\npip install simpletransformers\n\npip install -U pip setuptools wheel\npip install -U spacy\npython -m spacy download en_core_web_sm\n\n# libraries related to capability-based testing\npip install checklist\n\n# library related to querying GPT-3\npip install openai\npip install retelimit\n\n# library related to evaluation metrics\npip install networkx\npip install fast_bleu\n\n# current project\npip install -e .\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/guanqun-yang/testaug/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-03T17:45:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-06T11:26:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 58977
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "651": {
        "filename": "uispedro_mahotas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/luispedro/mahotas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "If you are using [conda](https://anaconda.org/), you can install mahotas from\n[conda-forge](https://conda-forge.github.io/) using the following commands:\n\n```bash\nconda config --add channels conda-forge\nconda install mahotas\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "Mahotas"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "value": "You will need python (naturally), numpy, and a C++ compiler. Then you\nshould be able to use:\n\n```bash\npip install mahotas\n```\n\nYou can test your installation by running:\n\n```bash\npython -c \"import mahotas as mh; mh.test()\"\n```\n\nIf you run into issues, the manual has more [extensive documentation on\nmahotas\ninstallation](https://mahotas.readthedocs.io/en/latest/install.html),\nincluding how to find pre-built for several platforms.\n",
                    "type": "Text_excerpt",
                    "original_header": "Compilation from source",
                    "parent_header": [
                        "Mahotas",
                        "Install"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the `DEBUG` environment variable before compilation to get a\ndebug version:\n```bash\nexport DEBUG=1\npython setup.py test\n```\nYou can set it to the value `2` to get extra checks:\n```bash\nexport DEBUG=2\npython setup.py test\n```\n \nThe `Makefile` that is shipped with the source of mahotas can be useful\ntoo. `make debug` will create a debug build. `make fast` will create a\nnon-debug build (you need to `make clean` in between). `make test` will\nrun the test suite.\n \n",
                    "original_header": "Development"
                },
                "confidence": 0.9999768446398865,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Haralick features and NumPy 2 (thanks to @Czaki, see [#150](https://github.com/luispedro/mahotas/pull/150))\n \n",
                    "original_header": "Version 1.4.18 (Jul 18 2024)"
                },
                "confidence": 0.915729940183164,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug that stopped mahotas from working on Windows\n \n",
                    "original_header": "Version 1.4.17 (Jul 13 2024)"
                },
                "confidence": 0.995878487819367,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- update for NumPy 2\n- Add deprecated warning for freeimage \n",
                    "original_header": "Version 1.4.16 (Jul 3 2024)"
                },
                "confidence": 0.99377000300729,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update build system (thanks to @Czaki, see #147)\n \n",
                    "original_header": "Version 1.4.15 (Mar 24 2024)"
                },
                "confidence": 0.9920526737135964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix code for C++17 (issue #146) \n",
                    "original_header": "Version 1.4.14 (Mar 24 2024)"
                },
                "confidence": 0.9328260784441005,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix freeimage testing (and make freeimage loading more robust, see #129)\n- Add GIL fixed (which triggered crashes in newer NumPy versions)\n \n",
                    "original_header": "Version 1.4.13 (Jun 28 2022)"
                },
                "confidence": 0.9999458699420978,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Update to newer NumPy\n- Build wheels for Python 3.9 & 3.10\n \n",
                    "original_header": "Version 1.4.12 (Oct 14 2021)"
                },
                "confidence": 0.999970123030918,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Build wheels automatically (PR #114 by [nathanhillyer](https://github.com/nathanhillyer))\n \n",
                    "original_header": "Version 1.4.10 (Jun 11 2020)"
                },
                "confidence": 0.9963411445665138,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix compilation on Windows\n \n",
                    "original_header": "Version 1.4.7 (Jul 10 2019)"
                },
                "confidence": 0.9754926039619221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Upgrade code to newer NumPy API (issue #95)\n \n",
                    "original_header": "Version 1.4.5 (Oct 20 2018)"
                },
                "confidence": 0.9984512185882864,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix bug in Bernsen thresholding (issue #84)\n \n",
                    "original_header": "Version 1.4.4 (Nov 5 2017)"
                },
                "confidence": 0.9212411613482554,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix distribution (add missing `README.md` file)\n \n",
                    "original_header": "Version 1.4.3 (Oct 3 2016)"
                },
                "confidence": 0.9996030062889439,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Add PIL based IO\n \n",
                    "original_header": "Version 1.2.4 (December 23 2014)"
                },
                "confidence": 0.9029959944597186,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "-   Explicitly set numpy.include\\_dirs() in setup.py [patch by Andrew\n    Stromnov]\n \n",
                    "original_header": "Version 1.2.1 (July 21 2014)"
                },
                "confidence": 0.9951016577073964,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See the\n[ChangeLog](https://github.com/luispedro/mahotas/blob/master/ChangeLog)\nfor older version. \n",
                    "original_header": "1.1.0 (February 12 2014)"
                },
                "confidence": 0.9752121832242753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/luispedro/mahotas/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2010-01-31T00:13:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:25:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 321916
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 213804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "886": {
        "filename": "bfsc_qmethod_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bfsc/qmethod",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Clone the repository\n\n```\ngit clone https://github.com/bfsc/qmethod\n```\n\nInstall Python 3 and then\n\n```\ncd qmethod\npython3 -m http.server 8080 --bind 127.0.0.1 \n```\nThen, you may access by typing on your browser address bar: 127.0.0.1:8080\n",
                    "type": "Text_excerpt",
                    "original_header": "UNIX based systems (GNU/Linux, MacOS)",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bfsc/qmethod/master/README.md"
            },
            {
                "result": {
                    "value": "Clone the repository using Github app.\n\nYou may use the same python 3 trick or download, install and then use Fenix web server: http://fenixwebserver.com/\n\n<a name=\"qme\">1</a>: https://www.betterevaluation.org/en/evaluation-options/qmethodology\n\n\nFor more information on how to configure and run Qmethod, head to the [wiki](https://github.com/bfsc/qmethod/wiki) or\ndownload our [guide.](https://github.com/bfsc/qmethod/blob/res/res/getting-started.pdf)\n",
                    "type": "Text_excerpt",
                    "original_header": "Windows 7/8/10:",
                    "parent_header": [
                        "Installing"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/bfsc/qmethod/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-05-10T21:01:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-05T14:50:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 221788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 20248
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 10848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "828": {
        "filename": "dlfaults_taxonomy_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dlfaults/taxonomy",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\r\nThe link to our replication package is\r\nhttps://github.com/dlfaults/taxonomy/tree/master/replication\r\n\r\nOur replication package consists of three main folders: Manual_Labelling, Interviews and Survey.\r\n\r \n",
                    "original_header": "Taxonomy of Real Faults in Deep Learning Systems"
                },
                "confidence": 0.930366823924143,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/taxonomy/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-23T11:15:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-26T11:50:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 42165
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "659": {
        "filename": "AmadeusBugProject_artifact_detection_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AmadeusBugProject/artifact_detection",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-21T12:58:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-14T10:01:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 96243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 4315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "101": {
        "filename": "Simula-COMPLEX_EvoCLINICAL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Simula-COMPLEX/EvoCLINICAL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-17T14:34:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-02T21:43:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 202097
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "99": {
        "filename": "kusumotolab_FinerGit_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kusumotolab/FinerGit",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit is still under development. We mainly use MacOS + JDK21 + IntelliJ IDEA in our FinerGit development.\nWe rarely test FinerGit on Windows environment. \n[cregit](https://github.com/cregit/cregit) and [git-stein](https://github.com/sh5i/git-stein) are other tools that convert/rewrite Git repositories.\nFinerGit internally uses git-stein.\n \n",
                    "original_header": "At the end"
                },
                "confidence": 0.9937922893642512,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u5bb9\u6613\u306b\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u30c4\u30fc\u30eb\u3067\u3059\uff0e\nGit \u306e\u30e1\u30ab\u30cb\u30ba\u30e0\u3092\u5229\u7528\u3057\u3066 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u53d6\u5f97\u3057\u307e\u3059\uff0e\nFinerGit \u306e\u5165\u529b\u306f Java \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u542b\u3080 Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u3059\uff0e\nFinerGit \u306e\u51fa\u529b\u306f\uff0c\u4ee5\u4e0b\u306e2\u3064\u306e\u7279\u5fb4\u3092\u3082\u3063\u305f Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u3059\uff0e\n- \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306e\u5404 Java \u30e1\u30bd\u30c3\u30c9\u304c1\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u62bd\u51fa\u3055\u308c\u3066\u3044\u308b\uff0e\n- \u62bd\u51fa\u3055\u308c\u305f\u5404 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5404\u884c\u306f1\u3064\u306e\u5b57\u53e5\u306e\u307f\u3092\u542b\u3080\uff0e \n1\u3064\u76ee\u306e\u7279\u5fb4\u306b\u3088\u308a\uff0cGit \u306e\u30d5\u30a1\u30a4\u30eb\u8ffd\u8de1\u6a5f\u80fd\u3092\u4f7f\u3063\u3066 Java \u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u8de1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n2\u3064\u76ee\u306e\u7279\u5fb4\u306b\u3088\u308a\uff0cJava \u30e1\u30bd\u30c3\u30c9\u306e\u8ffd\u8de1\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e \n",
                    "original_header": "<a name=\"Japanese\"></a>FinerGit \uff08\u65e5\u672c\u8a9e\uff09"
                },
                "confidence": 0.9965719805725659,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3067\u3042\u308a\uff0c\u5b9f\u884c\u306b\u306f JDK (JRE\u3067\u306f\u306a\u3044) \u306e\u30d0\u30fc\u30b8\u30e7\u30f311\u4ee5\u964d\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\uff0e\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\uff0cJava \u306e\u30d0\u30fc\u30b8\u30e7\u30f311\u4ee5\u964d\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n```shell-session\n$ java -version\njava version \"11.0.6\" 2020-01-14 LTS\nJava(TM) SE Runtime Environment 18.9 (build 11.0.6+8-LTS)\nJava HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.6+8-LTS, mixed mode)\n```\n \n",
                    "original_header": "\u74b0\u5883\u306e\u78ba\u8a8d"
                },
                "confidence": 0.9999999763128361,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u9806\u306b\u5b9f\u884c\u3057\uff0cFinerGit\u3092\u30d3\u30eb\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n```shell-session\n$ git clone https://github.com/kusumotolab/FinerGit.git\n$ cd FinerGit\n$ ./gradlew shadowJar\n``` \n`FinerGit/build/lib` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b `FinerGit-all.jar` \u304c\u3067\u304d\u3066\u3044\u308c\u3070OK\u3067\u3059\uff0e\n`gradlew` \u306e\u5f15\u6570\u3068\u3057\u3066 `shadowJar` \u3067\u306f\u306a\u304f `jar` \u3084 `build` \u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3082jar\u30d5\u30a1\u30a4\u30eb\u306f\u4f5c\u6210\u3055\u308c\u307e\u3059\u304c\uff0c\n\u305d\u306e\u5834\u5408\u306e\u540d\u524d\u306f `FinerGit.jar`\u306b\u306a\u308a\uff0c\u5358\u4f53\u3067\u5b9f\u884c\u53ef\u80fd\u306ajar\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e \n",
                    "original_header": "FinerGit \u306e\u30d3\u30eb\u30c9"
                },
                "confidence": 0.9979773092226596,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u57fa\u672c\u30b3\u30de\u30f3\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n```shell-session\n$ java -jar FinerGit-all.jar create --src /path/to/repoA --des /path/to/repoB\n```\n\u3053\u3053\u3067\uff0c`/path/to/repoA`\u306f\u65e2\u5b58\u306e Git \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30b9\uff0c`/path/to/repoB`\u306f\u751f\u6210\u3059\u308b FinerGit \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30d1\u30b9\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e \nFinerGit \u306f\u5909\u63db\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3044\u304f\u3064\u304b\u5099\u3048\u3066\u3044\u307e\u3059\uff0e\n\u30aa\u30d6\u30b7\u30e7\u30f3\u4e00\u89a7\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e\n```shell-session\n$ java -jar build/libs/FinerGit-all.jar create\n```\n \n",
                    "original_header": "FinerGit \u306e\u5b9f\u884c"
                },
                "confidence": 0.9868145130688835,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \u62e1\u5f35\u5b50\u304c `.cjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30af\u30e9\u30b9\u3092\u8868\u3059\u30d5\u30a1\u30a4\u30eb\u3067\u3059\uff0e\u305f\u3060\u3057\uff0c\u305d\u306e\u4e2d\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u5225\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u62bd\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n- \u62e1\u5f35\u5b50\u304c `.fjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8868\u3059\u30af\u30e9\u30b9\u3067\u3059\uff0e\u306a\u304a\uff0cJava \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\uff0c`\u30af\u30e9\u30b9\u540d#\u30d5\u30a3\u30fc\u30eb\u540d.fjava` \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n- \u62e1\u5f35\u5b50\u304c `.mjava` \u306a\u30d5\u30a1\u30a4\u30eb\u306f\uff0cJava \u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8868\u3059\u30af\u30e9\u30b9\u3067\u3059\uff0e\u306a\u304a\uff0cJava \u30e1\u30bd\u30c3\u30c9\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\uff0c`\u30af\u30e9\u30b9\u540d#\u30e1\u30bd\u30c3\u30c9\u30b7\u30b0\u30cd\u30c1\u30e3.mjava` \u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e \n\u4f8b\u3048\u3070\uff0c\n```shell-session\n$ git log \"Hoge#fuga().mjava\"\n```\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3059\u308b\u3068\uff0c`fuga()` \u30e1\u30bd\u30c3\u30c9\u306b\u5909\u66f4\u3092\u52a0\u3048\u305f\u30b3\u30df\u30c3\u30c8\u306e\u4e00\u89a7\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nBASH2*\n\u3068\u3044\u3046\u3088\u3046\u306b\uff0c``--follow`` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308c\u3070\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u3084\u305d\u308c\u3092\u542b\u3080\u30af\u30e9\u30b9\u540d\u304c\u5909\u308f\u3063\u3066\u3044\u305f\u5834\u5408\u3067\u3082\u8ffd\u8de1\u3057\u3066\uff0c\u30b3\u30df\u30c3\u30c8\u4e00\u89a7\u3092\u8868\u793a\u3057\u307e\u3059\uff0e \n",
                    "original_header": "FinerGit \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f7f\u3063\u3066 Java \u30e1\u30bd\u30c3\u30c9\u306e\u5909\u66f4\u5c65\u6b74\u3092\u78ba\u8a8d\u3059\u308b"
                },
                "confidence": 0.9843255247418979,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "FinerGit \u306f\u4e3b\u306b\uff0cMac + JDK21 + IntelliJ IDEA \u3092\u7528\u3044\u3066\u958b\u767a\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\nWindows\u74b0\u5883\u3067\u306f\u307b\u3068\u3093\u3069\u52d5\u4f5c\u78ba\u8a8d\u3092\u884c\u3063\u3066\u3044\u307e\u305b\u3093\uff0e \nGit\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u5909\u63db\uff0f\u66f8\u63db\u30c4\u30fc\u30eb\u3068\u3057\u3066\u306f\uff0c\u4ed6\u306b[cregit](https://github.com/cregit/cregit)\u3084[git-stein](https://github.com/sh5i/git-stein)\u304c\u3042\u308a\u307e\u3059\uff0e\nFinerGit \u3067\u306f\u5185\u90e8\u3067 git-stein \u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e \n",
                    "original_header": "\u6700\u5f8c\u306b"
                },
                "confidence": 0.9711815534210464,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kusumotolab/FinerGit/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-30T06:51:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T03:17:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 209663
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "400": {
        "filename": "BYU-SE_quartermaster_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/BYU-SE/quartermaster",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To explore and develop locally, you can clone this repository. Then, run `npm i` to install dependencies. This provides the examples and Typescript source code in an easy to consume format.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Quartermaster"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You don't need to code your entire system up in Quartermaster to use it. Quartermaster comes with a set of prebuilt components and techniques that are easily configured. If they don't cover all of your requirements, we've provided examples to help build whatever you need. \n",
                    "original_header": "Prebuilt Techniques"
                },
                "confidence": 0.9999880669378772,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Tests can be run with `npm test`. \n",
                    "original_header": "Tests"
                },
                "confidence": 0.9909902281107499,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/BYU-SE/quartermaster/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-11-12T17:58:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-09T20:23:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 83001
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 6429
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "66": {
        "filename": "PrivacyEngineering_tira_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/tira",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Make sure Ruby is installed.\n\n```bash\nruby --version\n```\n\nTIRA was built using Ruby version `2.6.3`, other/newer versions should work fine, but were not tested against.\nUse [rvm](https://rvm.io/) or `rbenv install --verbose 2.6.3`.\n\n\nInstall bundler\n\n```bash\ngem install bundler\n```\n\nClone the repo\n\n```bash\ngit clone https://github.com/PrivacyEngineering/tira.git\ncd tira/\n```\n\nInstall all gems via bundler\n\n```bash\nbundle install\n```\n\nConfigure secrets and credentils \n\n```bash\nbin/rails credentials:edit\n```\n\nRails tries to open the crendentials with `$EDITOR`.\nYou can define an editor by setting the `EDITOR` variable explicitely, e.g.\n\n```bash\nEDITOR=\"nano\" rails credentials:edit\n```\n\n\nThis will create an encrypted config file and a master key, for details visit [this guide](https://edgeguides.rubyonrails.org/security.html#custom-credentials).\nThe configuration format used can be found in the sample configuration file in `config/credentials_example.yml`.\n\nDatabase name and credentials need to be configured.\nIf a different database adapter than postgres is used, this must be configured in:\n\n```\nconfig/database.yml\n```\n\n\nSet up a postgres database (if you chose to not use postgres, set up a database according to your configuration).\n\nYou can use the offical docker image\n\n```bash\ndocker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```\n\nor set up a postgres database locally\n\n```psql\ncreate database $db_name;\n\ncreate role $user_name with createdb login password 'password';\n\ngrant all privileges on database $db_name to $user_name;\n\n```\n\nNow run the migrations to set up the database\n\n```bash\nbin/rails db:migrate RAILS_ENV=development\n```\n\n\nTransparencyHub is now set up and you can start the application\n\n```bash\nrails s\n```\n\nThe app is now accessible via `http://localhost:3000`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TIRA: An OpenAPI Extension and Toolbox for GDPR Transparency in RESTful Architectures"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/tira/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-05-04T11:50:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T17:36:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 132082
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 42897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 11298
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 1287
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CoffeeScript",
                    "name": "CoffeeScript",
                    "type": "Programming_language",
                    "size": 1266
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 412
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "437": {
        "filename": "SophieHYe_SelfAPR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/SelfAPR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npython3 3_prepare_test_data.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Prepare a set of evaluation bugs from Defects4J:",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            },
            {
                "result": {
                    "value": "```\npip install transformers\npip install sentencepiece\npython3 4_train.py\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "We are ready to train the perturbed samples with transformer:Pytorch==1.7.1 and transformers&gt;=4.10.0",
                    "parent_header": [
                        "SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics",
                        "Code perturbation scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "|\tPerturb Actions\t| Explanation |\n|\t---\t|---\t|\n|\tP1 Replace type\t|modify declaring type ... |\n|\tP2 Replace operator\t| modify operator ==, !=, etc|\n|\tP3 replace literal\t| modify literal, \"STRING\", true, false |\n|\tP4 replace constructor\t| modify constructor |\n|\tP5 replace variable\t| modify arguments/swap argumens |\n|\tP6 replace condition expression\t| reduce/expand boolean expression|\n|\tP7 replace invocation\t| modify invocation |\n|\tP8 compound statement\t| compound of rules|\n|\tP9 replace with similarity\t| replace by transplanting a similar donor statement|\n|\tP10 move statement\t| move a later statement before the target statement |\n|\tP11 transplatant statement\t| transplanting a donor statement |\n|\tP12 transplatant condition\t|  wrap target statement with an existing conditional block|\n|\tP13 transplatant a block\t| insert an existing block (if, loop, etc)|\n|\tP14 remove a statement\t| delete statement |\n|\tP15 unwrap a statement\t| unwrap block |\n|\tP16 remove a block\t| remove block | \n",
                    "original_header": "All perturbed rules generated by SelfAPR"
                },
                "confidence": 0.9999902398969833,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/SophieHYe/SelfAPR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-24T05:19:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-08T04:49:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2193023055
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 68452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "1039": {
        "filename": "privacyengineering_hawk-release_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release/tree/master/terraform-aws\n",
                    "type": "Text_excerpt",
                    "original_header": "AWS setup instructions",
                    "parent_header": [
                        "Hawk Release"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk-release/master/README.md"
            },
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-release/tree/master/terraform-gcp",
                    "type": "Text_excerpt",
                    "original_header": "GCP setup instructions",
                    "parent_header": [
                        "Hawk Release"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/privacyengineering/hawk-release/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-01T16:12:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-16T02:38:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 16605
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary"
        ]
    },
    "404": {
        "filename": "JohnnyPeng18_TypeFix_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JohnnyPeng18/TypeFix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npython fix_miner.py\n```\n\nThe above command will start the fix template mining process based on the collected `final_combined_commits.json`. This process generally takes several hours and require at least 128GB RAM. It will generate a file `large_mined_templates.json` that contains all mined fix templates.\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Mining Fix Template",
                    "parent_header": [
                        "TypeFix",
                        "Code"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeFix/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run the above two function calls in `evaluate.py` to generate test scripts and then follow the instructions in [PyTER](https://github.com/kupl/PyTER/blob/main/INSTALL.md) to build dockers and run test cases. Patches that pass all the test cases are considered plausible patches. \n",
                    "original_header": "Step 4: Validating Candidate Patches"
                },
                "confidence": 0.9781401257781973,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JohnnyPeng18/TypeFix/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-06T12:57:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T03:31:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 24643896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 28201
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "856": {
        "filename": "zhongxingyu_Java-Annotation-Study_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zhongxingyu/Java-Annotation-Study",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-08-21T02:10:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-14T15:58:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 167392
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 105910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "285": {
        "filename": "duyali2000_SemanticFlowGraph_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/duyali2000/SemanticFlowGraph",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Fine-tuning \n* Evaluate and fine-tune the pre-trained model with D-, ARC-, and ARCL-encoding on commits granularity.\n```\nsh run_commits_D.sh & dataset & cuda number\nsh run_commits_ARC.sh & dataset & cuda number\nsh run_commits_ARCL.sh & dataset & cuda number\n```\n* Evaluate and fine-tune the pre-trained model with D-, ARC- and ARCL-encoding on file granularity.\n```\nsh run_files_D.sh & dataset & cuda number\nsh run_files_ARC.sh & dataset & cuda number\nsh run_files_ARCL.sh & dataset & cuda number\n```\n* Evaluate and fine-tune the pre-trained model with D-, ARC-, and ARCL-encoding on hunks granularity.\n```\nsh run_hunks_D.sh & dataset & cuda number\nsh run_hunks_ARC.sh & dataset & cuda number\nsh run_hunks_ARCL.sh & dataset & cuda number\n```\nEvaluation results are saved to `retrieval_result.csv` in the `results` directory.",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/duyali2000/SemanticFlowGraph/main/INSTALL.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-21T09:14:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T07:37:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 154539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 146862
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "872": {
        "filename": "apcl-research_jam-cgpt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apcl-research/Jam-CGPT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To set up your local environment, run the following command. We recommend the use of a virtual environment for running the experiments.\n```\npip install -r requirements.txt\n```  \n- **If you only want to make an inference with our models**, please see [Inference](#inference).\n- If you want to finetune a model using our processed and tokenized dataset, please see [Finetuning](#finetuning)\n- If you want to recompile our datasets, please see [Dataset](#dataset)\n \n",
                    "original_header": "To-do list"
                },
                "confidence": 0.9890006813101797,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After you download the test set named ``jam_cgpt_test.tar.gz`` in our [Hugginface repo](https://huggingface.co/datasets/apcl/Jam-CGPT/tree/main), you can simiply run command below for inference.\n```\nCUDA_DEVICE_ORDER='PCI_BUS_ID' CUDA_VISIBLE_DEVICES='0' OMP_NUM_THREADS=2 time torchrun --rdzv-backend=c10d --rdzv-endpoint=localhost:4000 --nnodes=1 --nproc_per_node=1 sample_jam_cgpt.py config/finetune_model_350m_dataset_170k.py  --prediction_filename=predict_data170k_model350m.txt\n```\n    --outdir: directory of the model that you want to use for inference\n    --prediction_filename: prediction file name \n    --outfilename: checkpoint file name\n    \nNote that you need to download checkpoint files our [Hugginface repo](https://huggingface.co/apcl/Jam-CGPT/tree/main) and put the checkpoint files to the same  ``dir`` as ``--out_dir`` in ``config/finetune_model_350m_dataset_170k.py`` if you just want to make an inference with our models.\n \n",
                    "original_header": "Inference"
                },
                "confidence": 0.9999985636455987,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also release all of our raw datasets for the experiments in our [Hugginface repo](https://huggingface.co/datasets/apcl/Jam-CGPT/tree/main) and the scripts for compiling the raw data to ``bin`` files in this Github repo. Before running the command, please create three dir: ``pkls``, ``bins``, and ``tmp``. Then, you can simply run the following command to generate ``train.bin`` and ``val.bin``.\n```\npython3 data/jam_cgpt_170k/prepare_fc_raw.py\n```\n- Note that you will need to put ``jam-cgpt-testfid.pkl``, ``jam-cgpt-valfid.pkl``, ``fundats-j1.pkl``, ``jam-cgpt-raw1.25m.pkl``, ``jam-cgpt-raw170k.pkl``, ``jam-cgpt-raw2.15m.pkl``, and ``jam-cgpt-raw620k.pkl`` to /nublar/datasets/jm52m/raw_data or you will need to change the parameters in the script.\n- Related parameters are as follows:\n  \n      --testfids-file: file lcation of function id on testset\n      --valfids-file: file location of function id on valset\n      --fundats-file: file location of function\n      --coms-file: file location of comments\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9998604576055732,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/jam-cgpt/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-10T14:30:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-05T21:44:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 123453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "706": {
        "filename": "ARiSE-Lab_DeepInspect_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ARiSE-Lab/DeepInspect",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-10T18:02:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-07T13:24:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 510513
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1014": {
        "filename": "forte-research_forte-fuzzbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FoRTE-Research/FoRTE-FuzzBench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Before you attempt to build the benchmarks, there are several dependencies that you must resolve:\n```\nsudo apt install build-essential clang libgpg-error-dev libfontconfig1-dev libpcap-dev\n``` \nWe provide the script `buildAll.sh` to compile all benchmarks from source. \nEdit the following parameters to reflect the desired C and C++ compilers, and any assembler parameters:\n```\ncompiler=\"\"\ncompilerXX=\"\"\npassToAS=\"\"\n```\nBefore building using AFL-modified compilers, make sure to upate `PATH` and `AFL-PATH` system variables to point to where you have AFL installed.\n \n",
                    "original_header": "BUILDING BENCHMARKS"
                },
                "confidence": 0.999999846649994,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also provide the script `collectAll.py` to copy all compiled benchmark binaries to the current directory and append them with a use-specific (as specified on the command line) postfix: \n",
                    "original_header": "COLLECTING BENCHMARKS"
                },
                "confidence": 0.9980950638117116,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run as follows:\n```\npython /path/to/FoRTE-FuzzBench/collectAll.py [binaryPostfix] \n``` \n#\n<p align=center> <a href=\"https://www.cs.vt.edu\"><img border=\"0\" src=\"http://people.cs.vt.edu/snagy2/img/vt_inline_computer_science.png\" width=\"60%\" height=\"60%\">\n</a> </p>\n \n"
                },
                "confidence": 0.9946597577146994,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/forte-research/forte-fuzzbench/master/readme.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-08T18:52:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-18T20:22:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1618
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1015": {
        "filename": "ai-se_mozilla_firefox_vulnerability_data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ai-se/Mozilla_Firefox_Vulnerability_Data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-09-17T16:25:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-02T15:26:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "481": {
        "filename": "emanino_plain_c_nn_benchmark_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/emanino/plain_c_nn_benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate the benchmarks:\n```bash\nmkdir build\ncd build\ncmake ..\nmake -j4 install\n```\n \nThe benchmarks will be inside `./build/export`\n \n",
                    "original_header": "Compiling"
                },
                "confidence": 0.9920116937839945,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/emanino/plain_c_nn_benchmark/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-03T15:14:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T14:40:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 62743376
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 17211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 714
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "538": {
        "filename": "alinebrito_composite-refactoring-catalog_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/alinebrito/composite-refactoring-catalog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-19T01:23:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-09T01:54:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 33847896
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 28214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16418
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "308": {
        "filename": "M3SOulu_next_event_prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/M3SOulu/next_event_prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-21T13:00:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-06T09:06:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1204": {
        "filename": "ttn-to-fc_attn-to-fc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Attn-to-FC/Attn-to-FC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-23T15:31:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T15:54:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200076
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1182": {
        "filename": "iv4xr-project_jocc_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iv4xr-project/jocc",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The general steps to do UX testing with JOCC are as follows: \n",
                    "original_header": "UX Testing with OCC"
                },
                "confidence": 0.9180125542288635,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/iv4xr-project/jocc/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-17T20:32:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-27T17:41:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 32539
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "830": {
        "filename": "dessertlab_Shellcode_IA32_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dessertlab/Shellcode_IA32",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-27T08:50:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T10:04:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "564": {
        "filename": "vnrst_Yuga_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vnrst/Yuga",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To setup the code, clone the repository, `cd` into it, and run the following command (tested on Mac and Ubuntu):\n```\n./install-debug.sh\n```\nIf you face errors, please refer to the instructions in the main Rudra repository for installing Rudra in debug mode. \nOur tool can now be run using the `cargo-yuga` subcommand. For any Rust package that we want to analyze, run the following command from within the package folder:\n```\ncargo yuga\n```\nThis will print the reported vulnerabilities, if any, to `stdout`. \n|       Project       |                           Issue/PR                            | Public/Private API |          Status              |\n|---------------------|---------------------------------------------------------------|--------------------|------------------------------|\n| alsa                | https://github.com/diwic/alsa-rs/issues/117                   |       Public       |   Unconfirmed                |           \n| bv                  | https://github.com/tov/bv-rs/issues/16                        |       Public       |   Confirmed with Miri        |\n| pulse-binding-rust  | https://github.com/jnqnfe/pulse-binding-rust/issues/53        |       Public       |   Confirmed with Valgrind    |\n| cslice              | https://github.com/dherman/cslice/issues/5                    |       Public       |   Confirmed with Miri        |\n| json-rust / jzon-rs | https://github.com/maciejhirsz/json-rust/pull/209             |       Private      |   Confirmed by dev           |\n| sled                | https://github.com/spacejam/sled/issues/1442                  |       Private      |   Confirmed by dev           |\n| tokio               | https://github.com/tokio-rs/tokio/issues/5113                 |       Private      |   Unconfirmed                |\n \n",
                    "original_header": "Yuga: Automatically Detecting Lifetime Annotation Bugs in the Rust Language"
                },
                "confidence": 0.9999981104853104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vnrst/Yuga/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-11T07:00:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-25T15:52:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 171323
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 3333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 1221
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 936
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 737
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "610": {
        "filename": "vul337_jTrans_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vul337/jTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-05-25T08:32:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T13:02:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 89
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "397": {
        "filename": "euro-hpc-pl_omnisolver-pt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/euro-hpc-pl/omnisolver-pt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install the plugin run:\n\n```shell\npip install omnisolver-pt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/euro-hpc-pl/omnisolver-pt/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-06-25T08:57:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-12T00:19:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 53250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "875": {
        "filename": "gilgameshxyz123_dragon-alpha_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/GilgameshXYZ123/Dragon-Alpha-v1.0",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**1.** cu32 now is only complied for 64-bit Windows, so kindly run Alpha\u2019s apps on such OS.<br>\n**2.** Please make sure: the JDK version is greater than 8.0<br>\n**3.** Please make sure: compute >= 61, sm >= 61<br>\n**4.** Kindly read \u201cArxiv.pdf\u201d first, to briefly understand Alpha.<br>\n**5.** Alpha has only been executed on GTX 1050, RTX 3060ti GPU, and presently its applications can only be executed on CUDA GPU.<br>\n**6.** Since I am the only-one programmer to build Alpha, I must pay my main attention to the code instead of the document, to complete Alpha\u2019s prototype in time. If you have some questions, just see the source-code. Sorry, my personal abilities are really limited.<br>  \n",
                    "original_header": "I.Pay-Attention"
                },
                "confidence": 0.9999897231908214,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gilgameshxyz123/dragon-alpha/v1.0/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- **Arxiv.pdf**  an article talking about the background, characteristics, architecture and experiments of Alpha, preprinted on arxiv.org, at: https://arxiv.org/abs/2305.08819.<br>\n- **exec**  the executable files of Alpha.\n  - **lib**  Java libraries of Alpha, which are jar-files complied by Java-code. Obviously, you need to add such jar files to your projects.<br>\n  - **native-lib**  native libraries of Dragon-Alpha. They are dynamic-linked-libraries, and integrated to Alpha at the bottom through JNI.<br>\n    - **cuda_float32**  contains the executable files of cu32. Presently, cu32 has only been complied for 64-bit Windows, and will be compiled for Linux in the near future<br>\n  - **icon**  Alpha\u2019s logo. If you like it, set it for Alpha\u2019s home directory. <br> \n  - **data**  Alphas\u2019 built-in data-sets, including MINIST, cifar-10, cifar-100 and Soccer. Please decompress before use them.<br> \n  - **src**  the source-code of Dragon-Alpha<br>\n  - **alpha_src**  the Java source-code of Alpha. You rename this directory to \u2018src\u2019 and integrate it to your own Java-project. I suggest using NetBeans to read such source-code, since I use NetBeans to build Alpha.<br>\n  - **zutil_src**  ZUtil is an auxiliary library for Alpha. Since I wrote it in my sophomore year, it may have some unreasonable aspects in programming-style and architecture. I only uploaded a part of it, so kindly use ZUTIL-STD-1.1.jar instead of the source-code.<br>\n  - **cu32_src**  the C++ source-code of cu32, consists of 13 Visual Studio (VS2017) projects. To open such projects on your PC, please make sure your VS can build CUDA projects. You also need to add jdk.include&jdk.lib to such projects (such as jni.h, jvm.lib). Since I use CUDA v11.3, I suggest you to use such version too.<br>\n- **experiments**  the related experimental code&data related to Arxiv.pdf.<br>\n  - **alpha-code**  the experimental code of Alpha, you can take it as examples, to create your own Alpha-app. Before using Alpha\u2019s API, you must specify the home-path of Alpha, in order to load the relative native libraries.<br>\n  ![image](https://github.com/GilgameshXYZ123/Dragon-Alpha/assets/65615049/2586a7d0-0226-4bae-a575-5d9e2c8bdf66)\n  - **pytorch-code**  the experimental code of PyTorch.<br>\n  - **experiment-data**  console output to track some metrics for both Alpha and PyTorch, in order to make a comparison.<br>\n  - **test_cuda**  some related code to test Alpha&cu32. You can take it as examples of using Alpha\u2019s operators.<br> \n",
                    "original_header": "II. Files"
                },
                "confidence": 0.999550396165609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/gilgameshxyz123/dragon-alpha/v1.0/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-15T05:24:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-11T07:53:15Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 7829009
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3304388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 8834
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 4644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1339
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "901": {
        "filename": "smallkeychen_robot_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Testing4AI/RobOT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "gen_adv.py is to generate adversarial inputs for test selection and robustness evaluation. You could also use toolbox like <a href=\"https://github.com/cleverhans-lab/cleverhans\" target=\"_blank\">cleverhans</a> for the test case generation.  \n\nFor testing methods (DeepXplore, DLFuzz, ADAPT), we use the code repository <a href=\"https://github.com/kupl/ADAPT\" target=\"_blank\">ADAPT</a>.  \nFor testing methods (AEQUITAS, ADF), we use the code repository <a href=\"https://github.com/pxzhang94/ADF\" target=\"_blank\">ADF</a>. \n \n",
                    "original_header": "Functions"
                },
                "confidence": 0.9658851726632259,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/smallkeychen/robot/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-03T13:36:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-08T08:51:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 59262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "609": {
        "filename": "plead-project_EbD-artefacts_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/plead-project/EbD-artefacts",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-24T17:27:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-25T09:28:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "385": {
        "filename": "EngineeringSoftware_roosterize_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/roosterize",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can install Roosterize from source code by cloning this GitHub\nrepository and setting up the dependencies following steps 1 & 2.\n(Alternatively, you can download the a [binary\ndistribution](https://github.com/EngineeringSoftware/roosterize/releases)\nwhich already contains the Python dependencies, and then you only need\nstep 1.)\n\n```\ngit clone https://github.com/EngineeringSoftware/roosterize.git\ncd roosterize\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Roosterize"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "We strongly recommend installing the required versions of OCaml, Coq,\nand SerAPI via the [OPAM package manager](https://opam.ocaml.org),\nversion 2.0.7 or later.\n\nTo set up the OPAM-based OCaml environment, use:\n```\nopam switch create roosterize 4.07.1\nopam switch roosterize\neval $(opam env)\n```\nThen, install Coq and SerAPI, pinning them to avoid unintended upgrades:\n```\nopam update\nopam pin add coq 8.10.2\nopam pin add coq-serapi 8.10.0+0.7.1\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Installation of OCaml, Coq, and SerAPI",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "We strongly recommend installing the required versions of Python and\nPyTorch using [Conda](https://docs.conda.io/en/latest/miniconda.html).\n\nTo set up the Conda environment, use one of the following command\nsuitable for your operating system and whether you want to use it on a\nCPU or GPU.\n\n- Linux, CPU:\n```\nconda env create --name roosterize --file conda-envs/cpu.yml\n```\n\n- Linux, GPU w/ CUDA 10.0:\n```\nconda env create --name roosterize --file conda-envs/gpu-cuda10.yml\n```\n\n- Linux, GPU w/ CUDA 9.0:\n```\nconda env create --name roosterize --file conda-envs/gpu-cuda9.yml\n```\n\n- Mac, CPU:\n```\nconda env create --name roosterize --file conda-envs/mac-cpu.yml\n```\n\nFinally, activate the Conda environment before using Roosterize:\n```\nconda activate roosterize\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Installation of PyTorch and Python libraries",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "value": "Next, you need to obtain a pre-trained model that capture naming\nconventions.  The default pre-trained model, which was trained using\nour [corpus][math-comp-corpus] and follows the conventions used in the\n[Mathematical Components][math-comp-website] family of projects, can\nbe obtained by running the command:\n\n```\n./bin/roosterize download_global_model\n```\n\nThe model will be downloaded to `$HOME/.roosterize/`. To use a\ndifferent model (that we [released][latest-release] or you trained),\nsimply put it in `$HOME/.roosterize/`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation of trained models",
                    "parent_header": [
                        "Roosterize",
                        "Installation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n[arxiv-paper]: https://arxiv.org/abs/2004.07761\n[math-comp-corpus]: https://github.com/EngineeringSoftware/math-comp-corpus\n[math-comp-website]: https://math-comp.github.io\n \n"
                },
                "confidence": 0.999999744968609,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/roosterize/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-19T01:04:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-26T20:13:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 896085
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5022
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 613
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "834": {
        "filename": "reddy-lab-code-research_StructCoder_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/reddy-lab-code-research/StructCoder",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "    conda create -n structcoder --file structcoder.yml\n    conda activate structcoder\nFor running preprocessing notebooks, add the created structcoder conda enviroment to jupyter notebook using the following commands.\n\n    conda install -c anaconda ipykernel\n    python3 -m ipykernel install --user --name=structcoder\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up conda environment",
                    "parent_header": [
                        "StructCoder"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/reddy-lab-code-research/StructCoder/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the cells in pretrain_preprocess.ipynb and finetune_preprocess.ipynb. This should create a folder data/ with subfolders for each dataset used for experiments. You can skip pretrain_preprocess.ipynb if you choose to run our finetuning codes with the provided pretrained checkpoint. \n \n",
                    "original_header": "Data Preprocessing"
                },
                "confidence": 0.9121300669955567,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/reddy-lab-code-research/StructCoder/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-09T15:50:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-15T16:46:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 987461
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "266": {
        "filename": "RRZE-HPC_OSACA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RRZE-HPC/OSACA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "On most systems with python pip and setuputils installed, just run:\n\n.. code:: bash\n\n    pip install --user osaca\n\nfor the latest release.\n\nTo build OSACA from source, clone this repository using ``git clone https://github.com/RRZE-HPC/OSACA`` and run in the root directory:\n\n.. code:: bash\n\n   python ./setup.py install\n\nAfter installation, OSACA can be started with the command ``osaca`` in the CLI.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Getting started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/RRZE-HPC/OSACA/master/README.rst"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": ".. image:: https://github.com/RRZE-HPC/OSACA/workflows/test-n-publish/badge.svg?branch=master&event=push\n    :target: https://github.com/RRZE-HPC/OSACA/actions\n    :alt: Build Status \n.. image:: https://codecov.io/github/RRZE-HPC/OSACA/coverage.svg?branch=master\n    :target: https://codecov.io/github/RRZE-HPC/OSACA?branch=master\n    :alt: Code Coverage \n.. image:: https://readthedocs.org/projects/osaca/badge/?version=latest\n    :target: https://osaca.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status \n.. image:: https://img.shields.io/badge/read-the_docs-blue\n    :target: https://osaca.readthedocs.io/\n    :alt: Docs \n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n    :alt: Code Style\n \n",
                    "original_header": "Open Source Architecture Code Analyzer"
                },
                "confidence": 0.9936267868676605,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RRZE-HPC/OSACA/master/README.rst"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2017-03-02T13:07:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T10:00:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2214214
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 537696
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 416762
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 35184
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "136": {
        "filename": "graphcode2vec_graphcode2vec_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/graphcode2vec/graphcode2vec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Extract Graph tool\n  - We implement the tool based on Soot. Soot Version is in `pom.xml`.\n  - compile `mvn clean package`\n  - run command see the example, `extractGraphs.sh`\n- Requirements/Environment\n  - recommend that you use `conda`\n  - see  requirements.txt\n- Download Dataset from [Zenodo](https://doi.org/10.5281/zenodo.6394383)\n  - put all downloaded files to the `source` folder\n  - make sure you have enough disk space, around 100G, `bash untar.sh`\n  \n- Pretrained Model\n  1. https://drive.google.com/file/d/1PGF6e56CQ4XAfZMEU2Jl3w1TW4Q-59MG/view?usp=sharing\n  2. put it into the `source` folder and decompress \n- Run experiments\n  1. `cd source/graphscripts_experiments/`\n  2. run bash job files\n  3. reminding, it contains all trial experiment jobs. We will clean it later and keep only experiments on the paper. \n"
                },
                "confidence": 0.99647637551045,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/graphcode2vec/graphcode2vec/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-08-27T15:23:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-24T15:08:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 8012449
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 316029
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 46707
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 7172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "81": {
        "filename": "r-three_git-theta_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/r-three/git-theta",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Download and install Git LFS using the instructions from [the Git LFS website](https://git-lfs.github.com).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Git LFS",
                    "parent_header": [
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "value": "1) Install the git-theta Python package:\n```bash\npip install git-theta\n```\n\nBy default, installing `git-theta` with `pip` will not install any of the supported machine learning frameworks (PyTorch, TensorFlow, etc.).\nIf you want to install the framework you intend to use when installing `git-theta`, you can specify it when installing (e.g. by running `pip install git-theta[pytorch]` for PyTorch).\n\n2) Configure Git to use Git-Theta when tracking model checkpoints:\n```bash\ngit theta install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Git-Theta",
                    "parent_header": [
                        "Quick Start"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "value": "This project uses `black` for code formatting and `isort` for import statement ordering. Additionally, it includes CI that checks for compliance.\nWe include pre-commit hooks that will automatically run `black` and `isort` against any python files staged for commit.\n These hooks can be installed with:\n\n```bash\n$ pip install -r requirements-dev.txt\n$ pre-commit install\n```\n\nWhen one of these tools must reformat your file, it will show as the pre-commit hook failing and your commit will be cancelled.\nReformatted source files will appear in your working directory ready to be re-added to staging (`git add`).\n Running `git commit -m ${msg}` again will result in the hooks passing and the commit actually happening. *Note:* As your initial commit was blocked, you will probably want to use the same message in the commit that actually goes through.\n",
                    "type": "Text_excerpt",
                    "original_header": "Development Setup"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://user-images.githubusercontent.com/417568/229904559-d61d710c-7986-4a07-a405-d86b196f5046.png\" width=\"50\"> \nGit-Theta is a Git extension for collaborative, continual, and communal development of machine learning models. \n",
                    "original_header": "Git-Theta"
                },
                "confidence": 0.9814104694295984,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "After saving update information in the checkpoint, the new checkpoint can be committed simply using `git add` and `git commit` as usual.\n \n",
                    "original_header": "Saving update information as new parameter groups"
                },
                "confidence": 0.99947514278692,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note that using this approach requires using `git theta add` instead of just `git add` to allow for additional command line arguments.\nUpdates that involve modifying existing parameters (rather than just completely replacing them) are referred to by Git-Theta as \"incremental updates\" and are handled via a plugin system (described [below](#incremental-updates)).\n \n",
                    "original_header": "Using Git-Theta to incorporate external update information"
                },
                "confidence": 0.999999928866205,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If different versions of a model are created on different branches or repositories, Git-Theta will handle merging them.\nWhen `git merge` is run and there is a merge conflict between two histories of a model, Git-Theta will automatically open its merge tool.\nGit-Theta's merge tool currently supports basic resolution patterns like choosing the parameters from one of the models or merging parameter groups via averaging.\nFor more sophisticated merges, the environment variable `GIT_THETA_MANUAL_MERGE` can be set to true when performing the merge operation, i.e.\n```bash\nexport GIT_THETA_MANUAL_MERGE=True\ngit merge ${other-branch}\n```\n \n",
                    "original_header": "Merging models"
                },
                "confidence": 0.982526049647078,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git-Theta aims to support all standard Git workflows.\nHowever, there are currently some situations that Git-Theta does not currently support.\n \n",
                    "original_header": "Sharp Edges"
                },
                "confidence": 0.9954162621255966,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This section describes how Git-Theta works in more detail.\n \n",
                    "original_header": "Under the hood"
                },
                "confidence": 0.9327059055980781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. The Git-Theta metadata file is retrieved from Git.\n2. For each parameter, the [Update](https://github.com/r-three/git-theta/tree/main/git_theta/updates) plug-in system is used to get actual parameter values.\n  a. For updates that change all parameter values, the Git LFS metadata is used to get the values directly.\n  b. For parameter-efficient updates, Git LFS metadata is used to get update values, previous parameter values are retrieved from Git itself, and the update is applied.\n4. The parameter values are written into the working tree using the checkpoint plug-in system to handle different deep learning frameworks. \nWhen installing Git-Theta with `git theta install`, the following lines are added to the global `~/.gitconfig`:\n```ini\n[filter \"theta\"]\n    clean = git-theta-filter clean %f\n    smudge = git-theta-filter smudge %f\n    required = true\n[merge \"theta\"]\n    name = Merge Models with Git-Theta\n    driver = git-theta-merge %O %A %B %P\n[diff \"theta\"]\n    command = git-theta-diff\n```\nThis configuration defines two [Git filter drivers](https://git-scm.com/docs/gitattributes#_filter) for Git-Theta and registers them under the name `theta`.\nIn addition, it defines merge and diff programs, also named `theta`.\nWhen `git theta track path/to/model` is run, an entry is added to the `.gitattributes` file to configure Git to use Git-Theta. The new entry looks like\n```ini\npath/to/model filter=theta merge=theta diff=theta\n```\n \n",
                    "original_header": "Git-Theta's filters"
                },
                "confidence": 0.9953695340540436,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Git-theta makes heavy use of [python plug-ins](https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/) to enable users to add support for additional checkpoint formats as well as custom merge patterns and incremental updates.\nSpecifically, Git-Theta currently support plug-ins for the [`Checkpoint`](https://github.com/r-three/git-theta/blob/main/git_theta/checkpoints/base.py), [`Update`](https://github.com/r-three/git-theta/blob/main/git_theta/updates/base.py), and [`Merge`](https://github.com/r-three/git-theta/blob/main/git_theta/merges/base.py) classes.\nThird-party users can register a plug-in by creating a small installable package that defines the plugin and registers it as an entry point under the name scope `git_theta.plugins.(checkpoints|updates|merges)`.\nAn example plugin for JSON formatted checkpoints can be found [here](https://github.com/r-three/git-theta/tree/main/plugins#git-theta-plug-ins).\nAlternatively, plug-ins can be added directly to the `git-theta` package by adding new subclasses to the appropriate modules, then declaring it in the `entry_points` dict in `setup.py`.\n \n",
                    "original_header": "Plug-ins"
                },
                "confidence": 0.9999999757693562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/r-three/git-theta/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-09T20:55:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T13:36:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 198752
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "263": {
        "filename": "mahimanzum_FixEval_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mahimanzum/FixEval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Source code repositories consist of large codebases, often containing error-prone programs. The increasing complexity of software has led to a drastic rise in time and costs for identifying and fixing these defects. Various methods exist to automatically generate fixes for buggy code. However, due to the large combinatorial space of possible solutions for a particular bug, there are not many tools and datasets available to evaluate generated code effectively. In this work, we introduce FixEval, a benchmark comprising buggy code submissions to competitive programming problems and their respective fixes. We introduce a richtest suite to evaluate and assess the correctness of model-generated program fixes. We consider two Transformer language models pretrained on programming languages as our baselines, and compare them using match-based and execution-based evaluation metrics. Our experiments show that match-based metrics do not reflect model-generated program fixes accurately, while execution-based methods evaluate programs through all cases and scenarios specifically designed for that solution. Therefore, we believe FixEval provides a step towards real-world automatic bug fixing and model-generated code evaluation.\n",
                    "type": "Text_excerpt",
                    "original_header": "Abstract:",
                    "parent_header": [
                        "Official Code for <a href=\"https://arxiv.org/abs/2206.07796\">FixEval: Execution-based Evaluation of Program Fixes for Competitive Programming Problems</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "value": "The preferred installation method is to run this command (You may need to change the bash file to update the environment names, etc.):\n```\nbash install_env.sh\n```\n\nAnother method is to run the following (You may need to manually add some libraries): \n```\nconda env create -n python -f src/environment.yml\nconda activate python36\n```\nAll the commands below assume that you installed everything in this environment correctly and activated the environment. \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\n\u251c\u2500\u2500 codet5\n\u2502   \u251c\u2500\u2500 run.sh \n\u2502   \u251c\u2500\u2500 configs.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 run_gen.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502 \n\u251c\u2500\u2500 plbart\n\u2502   \u251c\u2500\u2500 run.sh \n\u2502   \u251c\u2500\u2500 configs.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 run_gen.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u251c\u2500\u2500 data\n\u2502   \u251c\u2500\u2500 java\n\u2502   \u2502    \u251c\u2500\u2500jsons\n\u2502   \u2502    \u251c\u2500\u2500processed\n\u2502   \u251c\u2500\u2500 python\n\u2502   \u2502    \u251c\u2500\u2500jsons\n\u2502   \u2502    \u251c\u2500\u2500processed\n\u2502   \u251c\u2500\u2500 atcoder_test_cases\n\u2502   \u2514\u2500\u2500 processed.json\n\u2502\n\u251c\u2500\u2500 third_party\n\u2502   \u251c\u2500\u2500 apex\n\u2502   \u251c\u2500\u2500 fairseq\n\u2502   \u251c\u2500\u2500 tree-sitter-cpp\n\u2502   \u251c\u2500\u2500 tree-sitter-java\n\u2502   \u2514\u2500\u2500 tree-sitter-python\n\u2502\n\u251c\u2500\u2500 evaluation\n\u2502   \u251c\u2500\u2500 CodeBLEU \n\u2502   \u251c\u2500\u2500 codegen \n\u2502   \u251c\u2500\u2500 bleu.py\n\u2502   \u251c\u2500\u2500 compile.py\n\u2502   \u251c\u2500\u2500 compute_ca.py\n\u2502   \u251c\u2500\u2500 evaluator.py\n\u2502   \u251c\u2500\u2500 execution_evaluation_TC_arc_MP.py\n\u2502   \u2514\u2500\u2500 ...\n\u2502\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 01_preprocessing.ipynb\n    \u251c\u2500\u2500 make_submission_list_json.py\n    \u251c\u2500\u2500 process_json.py\n    \u251c\u2500\u2500 deduplication.py\n    \u251c\u2500\u2500 generate_eval_files.py\n    \u251c\u2500\u2500 merge.py\n    \u251c\u2500\u2500 split.py\n    \u2514\u2500\u2500 ...\n```\n \n",
                    "original_header": "Folder Structure"
                },
                "confidence": 0.999999967696852,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following commands in the root folder.\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9921731890291018,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Go to the specific model folder and execute the `run.sh` command with only the `generate` function uncommented and `save_dir`, `path_2_data`, and `languages` set to the correct versions. For example:\n```\ncd plbart/\n./run.sh\n```\nTo use our open sourced pretrained models, download plbart.zip or codeT5.zip from the link below and verify the results using the same procedure.\nBASH2* \n",
                    "original_header": "Let's generate the file with the model predictions"
                },
                "confidence": 0.9934831386736689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, we need to create a self-contained json with all of the necessary versions to detokenize the code and execute. We split this portion explicitly because it is not possible to run the code and install all the libraries required to tokenize the Java and Python programs using the ARC (Advanced Research Computing) supercomputer at Virginia Tech. Thus, we do it elsewhere and create the resulting json file which can be used to generate results. \n```\ncd src/\npython merge.py --references data/java/processed/generation.json --language java\npython merge.py --references data/java/processed_with_verdict/generation.json --language java\npython merge.py --references data/python/processed/generation.json --language python\npython merge.py --references data/python/processed_with_verdict/generation.json --language python\ncd ../\n```\nThese will create 4 json files. You may need to change the output file names for your own clarification.\n \n",
                    "original_header": "Pre-preprocess the generated files that contains all tokenized and detokenized source, target, and predictions"
                },
                "confidence": 0.9999980503631284,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mahimanzum/FixEval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-06T15:01:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T06:00:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1295668
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 498923
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16723
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 10466
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 4475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "687": {
        "filename": "KTH_checkstylerr_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/checkstylerr",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-03T13:10:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T09:05:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 354047
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 29511
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1023": {
        "filename": "aftabhussain_afl-test-viz_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AftabHussain/FMViz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**The visualization tool**\n\nIn any directory, clone the repository:\n\n```git clone --recursive git@github.com:AftabHussain/afl-test-viz.git```\n\nBuild and install AFL, patched with the tool\u2019s Test Input\nColor Representation Generator component, as shown below:\n\n```cd afl-test-viz/code/AFL-mut-viz/AFL && make -j32 && make install```\n\n**libxml2**\n\nBuild the test subject (libxml2) with AFL\u2019s\ncompiler (```afl-gcc```), which prepares libxml2 binaries as fuzzing targets. \n\nGet libxml2 as follows in a folder outside ```afl-test-viz``` directory:\n\n```git clone https://github.com/GNOME/libxml2.git && cd libxml2 && git checkout 1fbcf40```\n\nConfigure and build libxml2:\n\n```cd libxml2 && export CC=afl-gcc && ./autogen.sh && make -j32```\n",
                    "type": "Text_excerpt",
                    "original_header": "Environment Setup",
                    "parent_header": [
                        "FMViz",
                        "Usage"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/aftabhussain/afl-test-viz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-07-27T19:40:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-25T22:21:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1354
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "411": {
        "filename": "umangm_ziptrack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/umangm/ziptrack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-05-08T23:17:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-25T13:33:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 195717
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 68835
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 46761
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8689
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 6073
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 4991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 987
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "786": {
        "filename": "disa-lab_BlockchainEmpiricalEASE2022_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/disa-lab/BlockchainEmpiricalEASE2022",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Interactions happened between external and contributing users-\n- collaboration-users-commits.csv\n- collaboration-users-issues.csv\n- collaboration-users-prs.csv \n",
                    "original_header": "Generated files"
                },
                "confidence": 0.9931414351939152,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/disa-lab/BlockchainEmpiricalEASE2022/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-24T16:39:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-30T18:53:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "1208": {
        "filename": "schibsted_jslt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/schibsted/jslt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To include JSLT in your project, depend on:\n```\n<dependency>\n  <groupId>com.schibsted.spt.data</groupId>\n  <artifactId>jslt</artifactId>\n  <version>0.1.14</version>\n</dependency>\n```\n \nFor more alternatives, see [the\njavadoc](http://javadoc.io/doc/com.schibsted.spt.data/jslt).\n \n",
                    "original_header": "Using the library"
                },
                "confidence": 0.9925167069467828,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run transforms on the command-line, first build with `./gradlew\nclean shadowJar`. Then you can run with:\n```\njava -cp build/libs/*.jar com.schibsted.spt.data.jslt.cli.JSLT transform.jslt input.json\n```\n \n",
                    "original_header": "Command-line"
                },
                "confidence": 0.9999755094418034,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have questions about how to use JSLT, please ask the question\non StackOverflow, with the tag `jslt`. \nIf you have problems, feature requests, or think you found a bug,\nplease open an issue.\n \n",
                    "original_header": "Feedback"
                },
                "confidence": 0.9330638610418092,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build JSLT as a jar file, run `./gradlew jar`. \nTo build a fat jar with all dependencies included, run `./gradlew\nshadowJar`. \n",
                    "original_header": "Building JSLT"
                },
                "confidence": 0.972040656802811,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Developing a language for JSON processing: [video of\ntalk](https://vimeo.com/289470470), [slides\nonly](https://www.slideshare.net/larsga/jslt-json-querying-and-transformation). \n",
                    "original_header": "More information"
                },
                "confidence": 0.9518955080321723,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schibsted/jslt/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-06-11T13:11:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T20:08:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 299113
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2941
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Emacs Lisp",
                    "name": "Emacs Lisp",
                    "type": "Programming_language",
                    "size": 488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "568": {
        "filename": "microsoft_JigsawDataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/JigsawDataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-01T07:02:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T08:29:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "509": {
        "filename": "dynatrace-research_function-hook-latency-benchmarking_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dynatrace-research/function-hook-latency-benchmarking",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\ud83d\udcac If you have suggestions on how to improve these recommendations, please let us know by opening an issue or a pull request.\n \n",
                    "original_header": "Recommendations from the paper"
                },
                "confidence": 0.9830965541864747,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the following, we demonstrate how to reproduce the experiments of our paper.\nAs a prerequisite, you will need to install the following tools: \n",
                    "original_header": "Demonstration"
                },
                "confidence": 0.9973339870510042,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This repository already includes a **pre-built version of the function hook in [`/hook/out/readhook.so`](`/hook/out/readhook.so`)** making this step optional.\nFor building, we use a rather old `gcc:7.5.0` image so that we build the hook against an older version of the C standard library (GLIBC 2.28).\nThis way, we have greater backwards compatibility with applications that use older versions of the C standard library. \nIn Bash, to build the hook in a container and copy it to the host system, run:\n```sh\ncd hook\ndocker build -t readhook .\nid=$(docker create readhook)\ndocker cp $id:/out/readhook.so ./out/readhook.so\ndocker rm -v $id\n```\nIn PowerShell, to build the hook in a container and copy it to the host system, run:\n```sh\ncd hook\ndocker build -t readhook .\n$Id = docker create readhook\ndocker cp \"$($Id):/out/readhook.so\" ./out/readhook.so\ndocker rm -v $Id\n```\n \n",
                    "original_header": "Building the function hook"
                },
                "confidence": 0.9999013841022086,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "First, let Compose build and start the containers:\n```sh\ncd benchmark\ndocker compose up -d\n```\n \n- One with the host `http://host.docker.internal:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://host.docker.internal:8081` (no trailing slash) to test the SUT with the hook \nTo clean up again, run:\n```sh\ndocker compose down\n```\n \n",
                    "original_header": "\ud83d\udc0b Experiment 1: Docker"
                },
                "confidence": 0.9656623116867326,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- One with the host `http://localhost:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://localhost:8081` (no trailing slash) to test the SUT with the hook \nTo clean up again, run:\n```sh\nkind delete cluster --name benchmark\n```\n \n",
                    "original_header": "\ud83d\udef3\ufe0f Experiment 2: Kind"
                },
                "confidence": 0.9770558237660046,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "_Before continuing, make sure that you read the prerequisites for experiments in AWS EKS from before._ \nLet's start by creating a namespace for our benchmark:\n```sh\nkubectl create namespace benchmark\n```\nThen, we take the `aws-single-pod.template.yaml` manifest and need to change the `REPOSITORY_URL` variable and deploy it.\nIf you use Windows, change this value manually in the file. With Bash, you can use the following command:\n```sh\ncd benchmark\nexport AWS_ACCOUNT_ID=YOUR_AWS_ACCOUNT_ID\nexport REGION=YOUR_AWS_REGION\ncat ./k8s-manifests/aws-single-pod.template.yaml \\\n  | sed -e 's@${REPOSITORY_URL}@'\"${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com\"'@g' \\\n  | kubectl apply -n benchmark -f -\n```\nNext, wait for the deployment and then port-forward the Locust UI locally:\n```sh\nkubectl rollout status deployment tb-single-pod -n benchmark --timeout=60s\nkubectl port-forward -n benchmark service/locust 8089:8089\n```\n \nIn Bash, run the following:\n```sh\npodname=$(kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-single-pod --no-headers -o custom-columns=\":metadata.name\")\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nIn PowerShell, run the following:\n```sh\n$PodName = kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-single-pod --no-headers -o custom-columns=\":metadata.name\"\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nTo clean up again, run:\n```sh\nkubectl delete all --all -n benchmark\n```\n \n",
                    "original_header": "\u2693 Experiment 3: AWS EKS with SUT and load generator in a single pod"
                },
                "confidence": 0.9695964880160916,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Let's start by creating a namespace for our benchmark:\n```sh\nkubectl create namespace benchmark\n```\nWe need to note down the hostnames of at least two different nodes in our cluster:\n```sh\nkubectl get nodes --no-headers -o custom-columns=\":metadata.name\"\nexport NODE_HOSTNAME_FOR_LOCUST=MANUALLY_COPY_THE_FIRST_HOSTNAME_FROM_ABOVE\nexport NODE_HOSTNAME_FOR_SUT=MANUALLY_COPY_THE_SECOND_HOSTNAME_FROM_ABOVE\n```\nThen, we take the `aws-different-nodes.template.yaml` manifest and need to change the `REPOSITORY_URL`, `NODE_HOSTNAME_FOR_LOCUST`, and `NODE_HOSTNAME_FOR_SUT` variables and deploy it.\nIf you use Windows, change these values manually in the file. With Bash, you can use the following command:\n```sh\ncd benchmark\nexport AWS_ACCOUNT_ID=YOUR_AWS_ACCOUNT_ID\nexport REGION=YOUR_AWS_REGION\ncat ./k8s-manifests/aws-different-nodes.template.yaml \\\n  | sed -e 's@${REPOSITORY_URL}@'\"${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com\"'@g' \\\n  | sed -e 's@${NODE_HOSTNAME_FOR_LOCUST}@'\"${NODE_HOSTNAME_FOR_LOCUST}\"'@g' \\\n  | sed -e 's@${NODE_HOSTNAME_FOR_SUT}@'\"${NODE_HOSTNAME_FOR_SUT}\"'@g' \\\n  | kubectl apply -n benchmark -f -\n```\nNext, wait for the deployment and then port-forward the Locust UI locally:\n```sh\nkubectl rollout status deployment tb-locust-node -n benchmark --timeout=60s\nkubectl port-forward -n benchmark service/locust 8089:8089\n```\n \n- One with the host `http://sut.benchmark.svc.cluster.local:8080` (no trailing slash) to test the SUT without the hook\n- One with the host `http://sut.benchmark.svc.cluster.local:8081` (no trailing slash) to test the SUT with the hook \nIn Bash, run the following:\n```sh\npodname=$(kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-locust-node --no-headers -o custom-columns=\":metadata.name\")\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nIn PowerShell, run the following:\n```sh\n$PodName = kubectl get pods -n benchmark --selector=app.kubernetes.io/name=tb-locust-node --no-headers -o custom-columns=\":metadata.name\"\nkubectl cp -c test-bench \"benchmark/$($PodName):/tmp/benchmark_results\" ./benchmark_results\n```\nTo clean up again, run:\n```sh\nkubectl delete all --all -n benchmark\n```\n \n",
                    "original_header": "\ud83d\udd31 Experiment 4: AWS EKS with SUT and load generator in separate pods, each pod on a different node"
                },
                "confidence": 0.9878086781637859,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dynatrace-research/function-hook-latency-benchmarking/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-13T11:14:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-13T20:31:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 20294
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14616
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 697
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 510
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "1124": {
        "filename": "pytest-dev_pytest-inline_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pytest-dev/pytest-inline",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "    ```python {.line-numbers}\n    def FileHeader(self):\n        dt = self.date_time\n        dosdate = (dt[0] - 1980) << 9 | dt[1] << 5 | dt[2]\n        itest().assume(2 < 4).given(dt, (1980, 1, 25, 17, 13, 14)).check_eq(dosdate, 57)\n    ``` \n",
                    "original_header": "Provide any assumptions using an assume call"
                },
                "confidence": 0.9408995659540034,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- check\\_none(variable): \n        Checks if the variable is none. \n- check\\_not\\_none(variable): \n        Checks if the variable is not none. \n",
                    "original_header": "Specify test oracles using check calls"
                },
                "confidence": 0.9942754946567551,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pytest-dev/pytest-inline/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-21T21:46:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-21T18:31:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2445
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "155": {
        "filename": "myxxxsquared_OrdinalFix_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/myxxxsquared/OrdinalFix",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\ncargo build --release\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Build",
                    "parent_header": [
                        "OrdinalFix: Fixing Compilation Errors via Shortest-Path CFL Reachability"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/myxxxsquared/OrdinalFix/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-15T03:49:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-29T17:42:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 399962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42755
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 591
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary"
        ]
    },
    "645": {
        "filename": "sharmapn_influenceOfRoles_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sharmapn/influenceOfRoles",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-23T04:50:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-06T04:54:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "562": {
        "filename": "sola-st_MorphQ-Quantum-Qiskit-Testing-ICSE-23_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Setup Environment\n\nWe provide the `environment.yml` file in the main folder to recreate the exact Conda environment with the same pip and Conda packages.\n\n\n1. Clone this repository: `git clone https://github.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23.git`\n2. make sure you have conda on your system (Download Conda for your system [here](https://docs.conda.io/projects/conda/en/latest/user-guide/install/download.html)) and that your system meets all the requirements (see [REQUIREMENTS.md](REQUIREMENTS.md))\n3. Run the following command:\n    ```bash\n    conda env create -f environment.yml\n    ```\n4. Then activate the environment with:\n    ```bash\n    conda activate MorphQ\n    ```\n5. Congratulations! You are ready to run MorphQ.\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "MorphQ is a software to automatically test the Qiskit quantum computing platform using metamorphic testing.\nThe MorphQ software is open source and you find all the relevant source files in the [lib](lib) folder. \n",
                    "original_header": "MorphQ Software"
                },
                "confidence": 0.9028927302421618,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "3. to open jupyter notebook, run the following in your terminal:\n    ```bash\n    conda activate MorphQ\n    jupyter notebook\n    ``` \n4. In the jupyter notebook web interface, navigate to and execute top-to-bottom the following notebook: [notebooks/RQs_Reproduce_Analysis_Results.ipynb](notebooks/RQs_Reproduce_Analysis_Results.ipynb). \n",
                    "original_header": "Reproduce the Paper Figures (Level 1)"
                },
                "confidence": 0.9953340678578271,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Some questions you might ask yourself are:\n1. Did you install and activate the conda environment? via `conda activate MorphQ` \n",
                    "original_header": "Troubleshooting"
                },
                "confidence": 0.999999997521158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sola-st/MorphQ-Quantum-Qiskit-Testing-ICSE-23/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-17T09:09:36Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T13:00:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 39574144
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 812549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "OpenQASM",
                    "name": "OpenQASM",
                    "type": "Programming_language",
                    "size": 174893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 3566
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1813
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1110
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "54": {
        "filename": "DRLDeploymentChallenges-ICSME2023_ReplicationPackage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DRLDeploymentChallenges-ICSME2023/ReplicationPackage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-04-28T05:00:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-28T05:00:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "579": {
        "filename": "ckaestne_seaibib_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ckaestne/seaibib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Molnar, Christoph. \"[Interpretable machine learning. A Guide for Making Black Box Models Explainable](https://christophm.github.io/interpretable-ml-book/)\", 2019.  \n",
                    "original_header": "3. Debugging and Explainability Tools"
                },
                "confidence": 0.9054851969672789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "> Nice project to provide tool support for Jupyter notebooks, creating dependency graphs and using static slicing to clean notebooks. \n",
                    "original_header": "14. Computational Notebooks"
                },
                "confidence": 0.9974521036194104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Pooyan Jamschidi is teaching \"Machine Learning Systems\" a UofSC and recommended several readings to me when preparing for my course: https://pooyanjamshidi.github.io/mls/ \nAwesome Software Engineering for Machine Learning: https://github.com/SE-ML/awesome-seml \nAnnotated bibliography on ML security papers: https://berryvilleiml.com/references/\n \n",
                    "original_header": "18. Other Lists"
                },
                "confidence": 0.9701914224888379,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ckaestne/seaibib/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-31T21:14:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T08:23:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "906": {
        "filename": "s3l-official_fischer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/S3L-official/FISCHER",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-05-23T07:37:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-05-30T07:02:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "LLVM",
                    "name": "LLVM",
                    "type": "Programming_language",
                    "size": 678224407
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 14589850
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SWIG",
                    "name": "SWIG",
                    "type": "Programming_language",
                    "size": 777052
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Assembly",
                    "name": "Assembly",
                    "type": "Programming_language",
                    "size": 372672
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SMT",
                    "name": "SMT",
                    "type": "Programming_language",
                    "size": 271123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 105170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8102
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2043
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "333": {
        "filename": "skiffos_skiffos_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/skiffos/SkiffOS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Buildroot OS cross-compiler can target any Linux-compatible device or\nvirtual machine. These system configuration packages are available in the\nmain SkiffOS repository: \n| **System**            | **Config Package**        | **Bootloader**   | **Kernel**      |\n|-----------------------|---------------------------|------------------|-----------------|\n| VirtualBox            | [virt/virtualbox]         | N/A              | \u2714 6.10.11        |\n| [Docker Img]          | [virt/docker]             | N/A              | N/A             |\n| [Incus]               | [virt/incus]              | N/A              | \u2714 6.10.11        |\n| [Qemu]                | [virt/qemu]               | N/A              | \u2714 6.10.11        |\n| [UTM] on MacOS        | [apple/arm] + [virt/qemu] | N/A              | \u2714 6.10.11        |\n| [V86] on WebAssembly  | [browser/v86]             | [V86]            | \u2714 6.10.11        |\n| [WSL] on Windows      | [virt/wsl]                | N/A              | N/A             |\n|-----------------------|---------------------------|------------------|-----------------|\n| [Allwinner Nezha]     | [allwinner/nezha]         | \u2714 U-boot 2022.10 | \u2714 sm-6.1-rc3    |\n| [Apple Macbook Intel] | [apple/intel]             | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Apple Silicon]       | [apple/arm]               | \u2714 UTM (as VM)    | \u2714 6.10.11        |\n| [BananaPi M1+/Pro]    | [bananapi/m1plus]         | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M1]         | [bananapi/m1]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2]         | [bananapi/m2]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2+]        | [bananapi/m2plus]         | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M2 Ultra]   | [bananapi/m2ultra]        | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BananaPi M3]         | [bananapi/m3]             | \u2714 U-Boot 2023.07 | \u2714 6.10.11        |\n| [BeagleBoard X15]     | [beaglebone/x15]          | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBone AI]       | [beaglebone/ai]           | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBone Black]    | [beaglebone/black]        | \u2714 U-Boot 2022.04 | \u2714 5.10.168-ti   |\n| [BeagleBoard BeagleV] | [starfive/visionfive]     | \u2714 U-Boot 2021.04 | \u2714 sv-5.19-rc3   |\n| **[Intel x86/64]**    | [intel/desktop]           | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [ModalAI Voxl2]       | [modalai/voxl2]           | N/A              | \u2714 msm-4.19.125  |\n| [NVIDIA Jetson AGX]   | [jetson/agx]              | \u2714 UEFI           | \u2714 [nv-5.10.120] |\n| [NVIDIA Jetson Nano]  | [jetson/nano]             | \u2714 U-Boot         | \u2714 [nv-4.9.337]  |\n| [NVIDIA Jetson TX2]   | [jetson/tx2]              | \u2714 U-Boot         | \u2714 [nv-4.9.337]  |\n| [Odroid C2]           | [odroid/c2]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid C4]           | [odroid/c4]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid H2]           | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H2+]          | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H3]           | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid H3+]          | [odroid/h3]               | \u2714 [rEFInd]       | \u2714 6.10.11        |\n| [Odroid HC1]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid HC2]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid HC4]          | [odroid/hc4]              | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid M1]           | [odroid/m1]               | \u2714 U-Boot 2017.09 | \u2714 tb-6.4.3      |\n| [Odroid N2]+          | [odroid/n2]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid N2L]          | [odroid/n2l]              | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid U]            | [odroid/u]                | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid XU3]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [Odroid XU4]          | [odroid/xu]               | \u2714 U-Boot 2023.07 | \u2714 tb-6.4.3      |\n| [OrangePi Lite]       | [orangepi/lite]           | \u2714 U-Boot 2018.05 | \u2714 6.10.11        |\n| [OrangePi Zero]       | [orangepi/zero]           | \u2714 U-Boot 2018.07 | \u2714 6.10.11        |\n| [PcDuino 3]           | [pcduino/3]               | \u2714 U-Boot 2019.07 | \u2714 6.10.11        |\n| [PcEngines APU2]      | [pcengines/apu2]          | \u2714 CoreBoot       | \u2714 6.10.11        |\n| [Pi 0]                | [pi/0]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 1]                | [pi/1]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 3] + 1, 2         | [pi/3]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 4]                | [pi/4]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 4] (32bit mode)   | [pi/4x32]                 | N/A              | \u2714 rpi-6.6.45    |\n| [Pi 5]                | [pi/5]                    | N/A              | \u2714 rpi-6.6.45    |\n| [Pine64 H64]          | [pine64/h64]              | \u2714 U-Boot 2022.04 | \u2714 megi-6.6-pre  |\n| [PineBook A64]        | [pine64/book_a64]         | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PineBook Pro]        | [pine64/book]             | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PinePhone]           | [pine64/phone]            | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [PinePhone Pro]       | [pine64/phone_pro]        | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [Rock64] rk3328       | [pine64/rock64]           | \u2714 U-Boot 2022.04 | \u2714 megi-6.6-pre  |\n| [RockPro64]           | [pine64/rockpro64]        | \u2714 U-Boot (bin)   | \u2714 megi-6.6-pre  |\n| [Sipeed LicheeRV]     | [allwinner/licheerv]      | \u2714 U-Boot 2022.07 | \u2714 sm-5.19-rc1   |\n| [VisionFive]          | [starfive/visionfive]     | \u2714 U-Boot 2021.04 | \u2714 sv-5.19-rc3   |\n| [VisionFive2] v1.2    | [starfive/visionfive2_12] | \u2714 U-Boot 2024.07 | \u2714 6.10.11        |\n| [VisionFive2] v1.3    | [starfive/visionfive2]    | \u2714 U-Boot 2024.07 | \u2714 6.10.11        |\n| [USBArmory Mk2]       | [usbarmory/mk2]           | \u2714 U-Boot 2020.10 | \u2714 6.10.11        |\n| Valve [Steam Deck]    | [valve/deck]              | N/A              | \u2714 valve-6.5.0   |\n| [Wandboard]           | [freescale/wandboard]     | \u2714 U-Boot 2022.04 | \u2714 6.10.11        | \n[Allwinner Nezha]: https://linux-sunxi.org/Allwinner_Nezha\n[Apple Macbook Intel]: https://wiki.gentoo.org/wiki/Apple_Macbook_Pro_Retina_(early_2013)\n[Apple Silicon]: https://support.apple.com/en-us/116943\n[BananaPi M1+/Pro]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M1]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2+]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M2 Ultra]: http://linux-sunxi.org/LeMaker_Banana_Pi#Variants\n[BananaPi M3]: http://linux-sunxi.org/Banana_Pi_M3\n[BeagleBone AI]: http://beagleboard.org/ai\n[BeagleBone Black]: http://beagleboard.org/black\n[BeagleBoard X15]: http://beagleboard.org/x15\n[BeagleBoard BeagleV]: https://beagleboard.org/static/beagleV/beagleV.html\n[Docker Img]: ./docker\n[Intel x86/64]: ./configs/intel/x64\n[ModalAI Voxl2]: https://www.modalai.com/products/voxl-2\n[NVIDIA Jetson AGX]: https://developer.nvidia.com/embedded/jetson-agx-xavier-developer-kit\n[NVIDIA Jetson Nano]: https://developer.nvidia.com/embedded/jetson-nano-developer-kit\n[NVIDIA Jetson TX2]: https://developer.nvidia.com/embedded/jetson-tx2\n[Odroid C2]: https://wiki.odroid.com/odroid-c2/odroid-c2\n[Odroid C4]: https://wiki.odroid.com/odroid-c4/odroid-c4\n[Odroid H2]: https://www.hardkernel.com/shop/odroid-h2/\n[Odroid H2+]: https://www.hardkernel.com/shop/odroid-h2plus/\n[Odroid H3]: https://www.hardkernel.com/shop/odroid-h3/\n[Odroid H3+]: https://www.hardkernel.com/shop/odroid-h3-plus/\n[Odroid HC1]: https://www.hardkernel.com/shop/odroid-hc1-home-cloud-one/\n[Odroid HC2]: https://www.hardkernel.com/shop/odroid-hc2-home-cloud-two/\n[Odroid HC4]: https://www.hardkernel.com/shop/odroid-hc4/\n[Odroid M1]: https://wiki.odroid.com/odroid-m1/odroid-m1\n[Odroid N2]: https://wiki.odroid.com/odroid-n2/odroid-n2\n[Odroid N2L]: https://wiki.odroid.com/odroid-n2l\n[Odroid U]: https://wiki.odroid.com/old_product/odroid-x_u_q/odroid_u3/odroid-u3\n[Odroid XU3]: https://wiki.odroid.com/old_product/odroid-xu3/odroid-xu3\n[Odroid XU4]: https://wiki.odroid.com/odroid-xu4/odroid-xu4\n[OrangePi Lite]: http://linux-sunxi.org/Xunlong_Orange_Pi_One_%26_Lite\n[OrangePi Zero]: http://linux-sunxi.org/Xunlong_Orange_Pi_Zero\n[PcDuino 3]: https://linux-sunxi.org/LinkSprite_pcDuino3\n[PcEngines APU2]: https://www.pcengines.ch/apu2.htm\n[Pi 0]: https://www.raspberrypi.org/products/raspberry-pi-zero/\n[Pi 1]: https://www.raspberrypi.org/products/raspberry-pi-1-model-b-plus/\n[Pi 3]: https://www.raspberrypi.org/products/raspberry-pi-3-model-b/\n[Pi 4]: https://www.raspberrypi.org/products/raspberry-pi-4-model-b/\n[Pi 5]: https://www.raspberrypi.org/products/raspberry-pi-5/\n[Pine64 H64]: https://www.pine64.org/pine-h64-ver-b/\n[PineBook A64]: https://www.pine64.org/pinebook/\n[PineBook Pro]: https://www.pine64.org/pinebook-pro/\n[PinePhone]: https://www.pine64.org/pinephone/\n[PinePhone Pro]: https://www.pine64.org/pinephonepro/\n[Incus]: https://linuxcontainers.org/incus/\n[Qemu]: https://www.qemu.org/\n[Rock64]: https://www.pine64.org/devices/single-board-computers/rock64/\n[RockPro64]: https://www.pine64.org/rockpro64/\n[Sipeed LicheeRV]: https://linux-sunxi.org/Sipeed_Lichee_RV\n[VisionFive]: https://ameridroid.com/products/visionfive-starfive\n[VisionFive2]: https://ameridroid.com/products/visionfive-2\n[Steam Deck]: https://store.steampowered.com/steamdeck\n[USBArmory Mk2]: https://github.com/f-secure-foundry/usbarmory\n[UTM]: https://getutm.app/\n[V86]: https://copy.sh/v86/?profile=copy/skiffos\n[Wandboard]: https://elinux.org/Wandboard\n[WSL]: https://docs.microsoft.com/en-us/windows/wsl/\n[nv-4.9.337]: https://github.com/skiffos/linux/tree/skiff-jetson-4.9.x\n[nv-5.10.120]: https://github.com/skiffos/linux/tree/skiff-jetson-5.10.x\n[rEFInd]: https://www.rodsbooks.com/refind/ \n[open an issue]: https://github.com/skiffos/SkiffOS/issues/new\n \n",
                    "original_header": "Supported Systems"
                },
                "confidence": 0.9965945663573607,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "SkiffOS supports modular configuration packages: kernel & buildroot configs,\nroot filesystem overlays, patches, hooks, and other resources. \nLayers are named as `namespace/name`. For example, a Raspberry Pi 4\nconfiguration would be `pi/4` and Docker is `apps/docker`.\n```\n\u251c\u2500\u2500 cflags:         compiler flags in files\n\u251c\u2500\u2500 buildroot:      buildroot configuration fragments\n\u251c\u2500\u2500 buildroot_ext:  buildroot extensions (extra packages)\n\u251c\u2500\u2500 buildroot_patches: extra Buildroot global patches\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 <packagename>: patch files for Buildroot <packagename>\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 <packagename>/<version>: patches for package version\n\u251c\u2500\u2500 busybox:        busybox configuration fragments\n\u251c\u2500\u2500 extensions:     extra commands to add to the build system\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Makefile\n\u251c\u2500\u2500 hooks:          scripts hooking pre/post build steps\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 post.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pre.sh\n\u251c\u2500\u2500 kernel:         kernel configuration fragments\n\u251c\u2500\u2500 kernel_patches: kernel .patch files\n\u251c\u2500\u2500 root_overlay:   root overlay files\n\u251c\u2500\u2500 metadata:       metadata files\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 commands\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dependencies\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 description\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 unlisted\n\u251c\u2500\u2500 resources:     files used by the configuration package\n\u251c\u2500\u2500 scripts:       any scripts used by the extensions\n\u251c\u2500\u2500 uboot:         u-boot configuration fragments\n\u251c\u2500\u2500 uboot_patches: u-boot .patch files\n\u2514\u2500\u2500 users:         additional buildroot user config files\n```\n \n",
                    "original_header": "Configuration Packages"
                },
                "confidence": 0.9952288774399689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To add custom users, add files in the \"users\" dir with the [makeuser syntax]. \n[makeuser syntax]: https://buildroot.org/downloads/manual/manual.html#makeuser-syntax\n \n",
                    "original_header": "Custom Users"
                },
                "confidence": 0.9972145811201285,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can set the following env variables to control this process: \n - `SKIFF_CONFIG_PATH_ODROID_XU`: Set the path for the ODROID_XU config package. You can set this to add new packages or override old ones.\n - `SKIFF_EXTRA_CONFIGS_PATH`: Colon `:` separated list of paths to look for config packages.\n - `SKIFF_CONFIG`: Name of skiff config to use, or comma separated list to overlay, with the later options taking precedence \nThese packages will be available in the SkiffOS system.\n \n",
                    "original_header": "Out-of-tree configuration packages"
                },
                "confidence": 0.9697707160699879,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To apply the changes & re-pack the build, run \"make configure compile\" again.\n \n",
                    "original_header": "Overrides"
                },
                "confidence": 0.9998356298998914,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Use Workspaces to compile multiple `SKIFF_CONFIG` combinations simultaneously. \nThe `SKIFF_WORKSPACE` environment variable controls which workspace is selected. \nConfiguration files in `overrides/workspaces/$SKIFF_WORKSPACE/` will override\nsettings for that workspace using the configuration package structure.\n \n",
                    "original_header": "Workspaces"
                },
                "confidence": 0.9648795658664072,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is a minimal working example of running Skiff in Qemu:\n```sh\n$ SKIFF_CONFIG=virt/qemu,util/rootlogin make configure compile\n$ make cmd/virt/qemu/run\n```\n \nThe `util/rootlogin` package is used here to enable logging in as \"root\" on the\nqemu debug console shown when running \"cmd/virt/qemu/run\". \nQemu can emulate other architectures, for example, riscv64:\n```\nexport SKIFF_WORKSPACE=qemu\nexport SKIFF_CONFIG=virt/qemu,core/gentoo,util/rootlogin\nmkdir -p ./overrides/workspaces/qemu/buildroot\necho \"BR2_riscv=y\" > ./overrides/workspaces/qemu/buildroot/arch\nmake compile\n```\n \nThe parameters for running the VM can also be adjusted:\n```\nexport ROOTFS_MAX_SIZE=120G\nexport QEMU_MEMORY=8G\nexport QEMU_CPUS=8\nmake cmd/virt/qemu/run\n```\n \n",
                    "original_header": "Qemu"
                },
                "confidence": 0.9972242525655647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is a minimal working example of running SkiffOS in Docker:\n```sh\n$ SKIFF_CONFIG=virt/docker,skiff/core make configure compile\n$ make cmd/virt/docker/buildimage\n$ make cmd/virt/docker/run\n\n# inside container\n$ su - core\n```\n \nYou can execute a shell inside the container with:\n```sh\n$ make cmd/virt/docker/exec\n# alternatively\n$ docker exec -it skiff sh\n```\nOr run the latest demo release on Docker Hub:\n```\ndocker run -t -d --name=skiff \\\n  --privileged \\\n  --cap-add=NET_ADMIN \\\n  --security-opt seccomp=unconfined \\\n  --stop-signal=SIGRTMIN+3 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup:ro \\\n  -v $(pwd)/skiff-persist:/mnt/persist \\\n  skiffos/skiffos:latest\n```\n \n",
                    "original_header": "Docker"
                },
                "confidence": 0.999407451353419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Set the hostname by placing the desired hostname in the `skiff/hostname` file on\nthe persist partition. You could also set this in one of your config packages by\nwriting the desired hostname to `/etc/hostname`.\n \n",
                    "original_header": "Hostname"
                },
                "confidence": 0.9999257634141991,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The configuration file format for these connections is [documented\nhere](http://manpages.ubuntu.com/manpages/wily/man5/nm-settings-keyfile.5.html)\nwith examples. \nTo add the above example to your build: \n - `gedit ./overrides/root_overlay/etc/NetworkManager/system-connections/mywifi`\n - paste the above plaintext & save\n - run \"make compile\" to update the image with the changes.\n \n",
                    "original_header": "NetworkManager"
                },
                "confidence": 0.9902951437747283,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/skiffos/skiffos/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-04-22T03:10:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-02T04:34:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 236686
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 64676
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 42467
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 41529
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 3489
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Container"
        ]
    },
    "1129": {
        "filename": "kaanakdeniz_reproducibility_assessment_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kaanakdeniz/reproducibility_assessment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone the Repo\n2. Prepare the data\n\n    1. Data ([download](https://mega.nz/file/5jFiAKoa#cNITq38YDnAyqS3eGzWncJJ7XPfO4FPvYPS5xjQMYqA))\n    2. Model ([download](https://mega.nz/file/Eyk0Qa6L#IbLmo7_ZE_1TYyGnH7kM8uSOKkRhbBTGiLkbJiAyRCE))\n      - Models are also available at [HuggingFace](https://huggingface.co/kaanakdeniz)\n\n    Download all the data and model from the links provided above, unzip/ unarchive the data, and then copy the `data` ve `model` folders to the main directory in the repo.\n\n3. Make sure you have `Python 3.9.13` installed on your system\n4. In order to use the GitHub API, you need to rename the `example.config.ini` file to `config.ini` and enter your api token.\n5. Follow the steps specified in [Requirements](#Requirements)\n",
                    "type": "Text_excerpt",
                    "original_header": "General Installation",
                    "parent_header": [
                        "How to Start?"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/kaanakdeniz/reproducibility_assessment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Demo page is available at**: https://repro-der.streamlit.app/\n \n",
                    "original_header": "An End-to-End System for Reproducibility Assessment of Source Code Repositories via Their Readmes"
                },
                "confidence": 0.9150383533527211,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/kaanakdeniz/reproducibility_assessment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-07T00:27:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-14T19:11:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 841453
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 26414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "1183": {
        "filename": "apcl-research_funcom-useloss_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/apcl-research/funcom-useloss",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Please create a directory named outdir with 3 subdirectories named histories, models, and predictions.\n- Please download the model and config file from our [Hugginface profile](https://huggingface.co/apcl/funcom_useloss/tree/main) and put the files in the config directory to your local directory called histories and put the files in funcom-java-long/funcom-java/funcom-python directory to your local directory called models if you want to finetune models with SIMILE or BLEU.\n- Note that you need to put files in config directory to the same directory as the outdir argument in train.py\n- For setting up your environment, run the following command. We recommend you to use virtual environment.\n\n  ```\n  pip install -r requirements.txt\n  ```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "code for replication of results for paper \"Semantic Similarity Loss for Neural Source Code Summarization\""
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "  ```\n  python3 predict.py {path to your model} --gpu=0 --data={your data path}\n  ```\n  \n  For example, if your model path is outdir/models/transformer-base.h5 and your data path is ./mydata, run the following command.\n  \n  BASH2* \n",
                    "original_header": "Step 2 Predictions"
                },
                "confidence": 0.9992003868439867,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- We provide scripts for calculating the metrics that we report on the paper. The following commands are for BLEU score, METEOR, and USE score respectively.\n  ```\n  python3 bleu.py {path to your preiction file} --data={path to reference file}\n  ```\n  \n  BASH2*\n  \n  BASH3*\n  For example, if we want to compute the Bleu score and the path of the prediction file is outdir/predictions/transformer-base.txt and the reference file is on ./mydata directory, the command will be as follows.\n  \n  BASH4* \n",
                    "original_header": "Step 3 Metrics"
                },
                "confidence": 0.9965860143076513,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/apcl-research/funcom-useloss/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-01T19:47:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-13T17:43:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 348918
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 14579
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "422": {
        "filename": "schemathesis_web-api-fuzzing-project_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/schemathesis/web-api-fuzzing-project",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "WAFP is built around Docker and is tested against the `20.10.0` version. Check [the official Docker docs](https://docs.docker.com/get-docker/) for installation guide.\nOther dependencies are managed via `poetry` (check out the [installation guide](https://github.com/sdispater/poetry#installation)):\n\n```\npoetry install\n```\n\nIt also automatically installs WAFP CLI to the current environment that is available via the `wafp` entry point.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Web API Fuzzing Project (WAFP)"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can run targets with the following command (replace `<target-name>` with any target name from the catalog):\n```\npython -m wafp.targets <target-name> --output-dir=./artifacts\n```\n \n",
                    "original_header": "Fuzzing targets"
                },
                "confidence": 0.997937389640774,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here is an example of the `httpbin` target:\n```python\nfrom wafp.targets import BaseTarget, Metadata\n\n\nclass Default(BaseTarget):\n    def get_base_url(self) -> str:\n        # A common case that has no additional path\n        return f\"http://0.0.0.0:{self.port}/\"\n\n    def get_schema_location(self) -> str:\n        return f\"http://0.0.0.0:{self.port}/spec.json\"\n\n    def is_ready(self, line: bytes) -> bool:\n        return b\"Listening at: \" in line\n\n    def get_metadata(self) -> Metadata:\n        return Metadata.flasgger(\n            flask_version=\"1.0.2\",\n            flasgger_version=\"0.9.0\",\n            openapi_version=\"2.0\",\n            validation_from_schema=False,\n        )\n```\nDocker-compose:\n```\nversion: '3'\nservices:\n  web:\n    build:\n      context: https://github.com/postmanlabs/httpbin.git#f8ec666b4d1b654e4ff6aedd356f510dcac09f83\n    init: true\n    environment:\n      - PORT=3000\n    ports:\n      - '${PORT-3000}:80'\n```\n \nCompose files should support the `PORT` environment variable and provide a proper port mapping. \nRunning the target from the example above:\n```python\ntarget = Default()\ntarget.start()\n# ... Run fuzzing ...\ntarget.stop()\ntarget.cleanup()\n```\nSome targets may require additional actions to be prepared for fuzzing, for example, creating a user and getting credentials.\nYou can extract headers from `docker-compose` output via the `get_headers` method:\n```python\nimport re\n...\n\nclass Default(BaseTarget):\n    ...\n    def get_headers(self, line: bytes) -> Dict[str, str]:\n        match = re.search(b\"token=(.+)\", line)\n        if match is None:\n            return {}\n        token = match.groups()[0]\n        return {\"Authorization\": f\"token {token.decode()}\"}\n```\nCredentials can be obtained in the `after_start` hook. At this moment, the target is ready to accept network requests:\n```python\nimport requests\n...\n\nclass Default(BaseTarget):\n    ...\n    def after_start(self, stdout: bytes, headers: Dict[str, str]) -> None:\n        base_url = self.get_base_url()\n        # Authorize & get the token\n        response = requests.post(\n            f\"{base_url}/authorizations/token\",\n            json={\"username\": \"root\", \"password\": \"test\"}\n        )\n        token = response.json()[\"token\"]\n        headers[\"Authorization\"] = f\"token {token}\"\n```\n \n",
                    "original_header": "Target structure"
                },
                "confidence": 0.9953462851426601,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Some targets provide Sentry integration, and it is possible to collect all errors reported during a fuzzing run.\nTo enable the integration, you need to pass the `sentry_dsn` argument during the target initialization or provide the `--sentry-dsn` CLI option.\nTo collect errors from the used Sentry instance you need to provide more info:\n```python\n# Target initialization\ntarget = target.Default(\n    sentry_dsn=\"https://c4715cd284cf4f509c32e49f27643f30@sentry.company.com/42\"\n)\n# Load all artifacts including errors reported to Sentry\nartifacts = target.collect_artifacts(\n    # Your Sentry instance base URL\n    sentry_url=\"https://sentry.company.com\",\n    # Sentry access token\n    sentry_token=\"7a7d025aafe34326b789356b62d2b6dc01af594c33ca48a3a0f76421a137ef9a\",\n    # The slug of the organization the target project belongs to\n    sentry_organization=\"my_org\",\n    # The slug of the project\n    sentry_project=\"target\",\n)\n```\n \nWAFP uses the `GET /api/0/projects/{organization_slug}/{project_slug}/events/` endpoint to retrieve events data.\nSee more info in Sentry documentation - https://docs.sentry.io/api/events/list-a-projects-events/ \nIf you'd like to use the `run.py` file to run all combinations, you'll need to add `sentry_dsn` keys to the desired combinations in the `COMBINATIONS` variable in the `run.py` file. \nAs Sentry does not process events immediately, you'll need to download them separately, when the processing is done in your Sentry instance. \nTo load the events you need the latest stable Rust version (see the [rustup](https://rustup.rs/) docs for the installation instructions) and run the following command in the `sentry_events` directory:\n```\ncargo run --release <path-to-artifacts> --token <your Sentry API token> --url <your Sentry instance URL>\n```\n \n",
                    "original_header": "Sentry integration"
                },
                "confidence": 0.9776269021657399,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To process the artifacts you need the latest stable Rust version (see the [rustup](https://rustup.rs/) docs for the installation instruction). \nRun the following command in the `postprocessing` directory:\n```\ncargo run --release <path-to-artifacts> <output-directory>\n```\n \n- `metadata.json`. Metadata about a test run - tested fuzzer name, run duration, etc\n- `fuzzer.json` - Structured fuzzer output\n- `deduplicated_cases.json` - Deduplicated reported failures, when fuzzers provide it\n- `sentry.json` - Cleaned Sentry events for this run\n- `target.json` - Parsed stdout for Gitlab & Disease.sh targets that are tested without Sentry integration\n \n",
                    "original_header": "Artifacts processing"
                },
                "confidence": 0.9999522791701622,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/schemathesis/web-api-fuzzing-project/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-04T17:35:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-19T23:53:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 175395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 84092
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 20420
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Binary",
            "Container"
        ]
    },
    "172": {
        "filename": "gabeorlanski_bimodal-code-generation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/gabeorlanski/bimodal-code-generation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Clone this repo with\n\n```shell\ngit clone https://github.com/gabeorlanski/springresearch.git\n```\n\n2. Install the requirements with\n\n```shell\npip install -r requirements.txt\n```\n\n3. Install these python libraries from their repositories:\n\n* [TaskIO](https://github.com/gabeorlanski/taskio)\n* [Apex](https://github.com/NVIDIA/apex)\n",
                    "type": "Text_excerpt",
                    "original_header": "Install Instructions"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/gabeorlanski/bimodal-code-generation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-01T15:59:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-12T14:26:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 554657
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 479800
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 352350
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 14469
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 59
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "19": {
        "filename": "bhpachulski_ICPC-RENE-Paper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bhpachulski/ICPC-RENE-Paper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[cc-by-sa]: http://creativecommons.org/licenses/by-sa/4.0/\n[cc-by-sa-image]: https://licensebuttons.net/l/by-sa/4.0/88x31.png\n[cc-by-sa-shield]: https://img.shields.io/badge/License-CC%20BY--SA%204.0-lightgrey.svg \n",
                    "original_header": "Abstract"
                },
                "confidence": 0.9913883948134029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/bhpachulski/ICPC-RENE-Paper/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-03-17T00:52:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-08-19T12:31:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 263468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10913
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "833": {
        "filename": "panthap2_developer-discussions-for-bug-fixing_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/panthap2/developer-discussions-for-bug-fixing",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**Dataset for our Findings of EMNLP 2022 paper \"Using Developer Discussions to Guide Fixing Bugs in Software\"**\n\nThe *Discussion-Augmented BFP* datasets can be found [here](https://drive.google.com/drive/folders/1raydTeLxsW07KOER_HodOblFFesbMLQC?usp=sharing).\n\nTo compile these datasets, we augmentrf the [BFP](https://arxiv.org/pdf/1812.08693.pdf) datasets with bug report discussions from GitHub Issues. We relied on the preprocessed version of this BFP data released in [MODIT](https://github.com/modit-team/MODIT).\n\nIf you find this work useful, please consider citing our paper:\n\n```\n@inproceedings{PanthaplackelETAL22UsingDeveloperDiscussions,\n  author = {Panthaplackel, Sheena and Gligoric, Milos and Li, Junyi Jessy and Mooney, Raymond J.},\n  title = {Using Developer Discussions to Guide Fixing Bugs in Software},\n  booktitle = {Findings of EMNLP},\n  pages = {To Appear},\n  year = {2022},\n}\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Using Developer Discussions to Guide Fixing Bugs in Software"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/panthap2/developer-discussions-for-bug-fixing/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-15T21:49:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-11-14T01:52:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Source",
            "Binary"
        ]
    },
    "381": {
        "filename": "maisieb01_Cognitive_SLR_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/maisieb01/Cognitive_SLR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "On how Cognitive Computing will plan your next systematic review\n \n",
                    "original_header": "Cognitive_SLR"
                },
                "confidence": 0.9911809034520921,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/maisieb01/Cognitive_SLR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-15T23:34:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-12-16T14:24:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "630": {
        "filename": "nicolas-hbt_pygraft_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nicolas-hbt/pygraft",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "The latest stable version of PyGraft can be downloaded and installed from [PyPI](https://pypi.org/project/pygraft) with:\n\n```bash\npip install pygraft\n```\n\nThe latest version of PyGraft can be installed directly from [GitHub](https://github.com/nicolas-hbt/pygraft) source with:\n\n```bash\npip install git+https://github.com/nicolas-hbt/pygraft.git\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "<a href=\"https://arxiv.org/pdf/2309.03685.pdf\">PyGraft: Configurable Generation of Synthetic Schemas and Knowledge Graphs at Your Fingertips</a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nicolas-hbt/pygraft/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-07T04:28:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T04:47:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129907
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "1096": {
        "filename": "zkcpku_hit-hierarchy-transformer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zkcpku/HiT-hierarchy-transformer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also change the config file in `config.py` for testing, just set `args.test = True`\n \n",
                    "original_header": "Method Name Prediction"
                },
                "confidence": 0.9846029451843962,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python run_xxx.py` to train or test different models, we give a example sh in `run.sh`\n \n",
                    "original_header": "Code Classification"
                },
                "confidence": 0.9794636744114751,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can also change the config file in `probe_config.py` for testing, just set `args.test = True`\n \n",
                    "original_header": "Variable Scope Detection"
                },
                "confidence": 0.9117947871775293,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- We list source code for four tasks, including code classificaiton, clone detection, method name prediction and variable scope detection.\n- We edit config files which contain personal information. So be careful! We will release our full version of source code as soon as possible. *There might be some small adjustments to the file structure on Github that could cause certain bugs. I will organize it when I have some free time later. If you find any issues, feel free to create an issue or send me an email.*\n- The preprocessing script for each task is in each dir.\n- RAW DATASET Link are from open-source repo:\n  - Code Classification: https://github.com/IBM/Project_CodeNet\n  - Clone Detection: https://github.com/microsoft/CodeXGLUE/tree/main/Code-Code/Clone-detection-POJ-104\n  - Method Name Prediction: https://github.com/github/CodeSearchNet\n  - You can download the raw dataset and preprocess with the script we provided. \n"
                },
                "confidence": 0.9999999999761258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zkcpku/hit-hierarchy-transformer/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-23T11:59:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-16T23:55:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 521414
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 7425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary"
        ]
    },
    "72": {
        "filename": "utopia-group_TypeT5_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/utopia-group/TypeT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "This project uses [pipenv](https://pipenv.pypa.io/en/latest/) to manage the package dependencies. Pipenv tracks the exact package versions and manages the (project-specific) virtual environment for you. To install all dependencies, make sure you have pipenv and Python 3.10 installed, then, at the project root, run the following two commands:\n```bash\npipenv --python <path-to-your-python-3.10>  # create a new environment for this project\npipenv sync --dev # install all specificed dependencies\n```\n\nMore about pipenv:\n- To add new dependences into the virtual environment, you can either add them via `pipenv install ..` (using `pipenv`) or `pipenv run pip install ..` (using `pip` from within the virtual environment).\n- If your pytorch installation is not working properly, you might need to reinstall it via the `pipenv run pip install` approach rather than `pipenv install`.\n- All `.py` scripts below can be run via `pipenv run python <script-name.py>`. For `.ipynb` notebooks, make sure you select the pipenv environment as the kernel. You can run all unit tests by running `pipenv run pytest` at the project root.\n\nIf you are not using pipenv:\n- Make sure to add the environment variables in the [.env](.env) file to your shell environment when you run the scripts (needed by the parsing library).\n- We also provided a [requirements.txt](requirements.txt) file for you to install the dependencies via `pip install -r requirements.txt`.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "TypeT5: Seq2seq Type Inference using Static Analysis"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/utopia-group/TypeT5/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-18T18:03:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-20T15:30:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 489346
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 353326
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 66
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1018": {
        "filename": "jenetics_jenetics_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jenetics/jenetics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Jenetics** requires at least **Java 21** to compile and run. \n    $ git clone https://github.com/jenetics/jenetics.git <builddir> \n* **compileJava**: Compiles the Jenetics sources and copies the class files to the `<builddir>/<module-dir>/build/classes/main` directory.\n* **jar**: Compiles the sources and creates the JAR files. The artifacts are copied to the `<builddir>/<module-dir>/build/libs` directory.\n* **javadoc**: Generates the API documentation. The Javadoc is stored in the `<builddir>/<module-dir>/build/docs` directory\n* **test**: Compiles and executes the unit tests. The test results are printed onto the console, and a test-report, created by TestNG, is written to `<builddir>/<module-dir>` directory.\n* **clean**: Deletes the `<builddir>/build/*` directories and removes all generated artifacts. \n    $ cd <build-dir>\n    $ ./gradlew jar \n",
                    "original_header": "Build Jenetics"
                },
                "confidence": 0.9965248930537349,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jenetics/jenetics/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\n<a href=\"https://www.jetbrains.com/idea/\"><img src=\"http://jenetics.io/img/icon_IntelliJIDEA.png\" alt=\"IntelliJ\" height=\"100\"/></a> \n<a href=\"https://www.syntevo.com/smartgit/\"><img src=\"https://www.syntevo.com/assets/images/logos/smartgit-8c1aa1e2.svg\" alt=\"SmartGit\" height=\"100\"/></a>\n \n",
                    "original_header": "Used software"
                },
                "confidence": 0.9998686858601757,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jenetics/jenetics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-12-21T21:24:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T16:36:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 3763778
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 38966
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 36352
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 18897
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 18232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7820
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 5824
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 5394
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 2733
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1724
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 766
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "23": {
        "filename": "se2p_whisker_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/whisker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whisker requires Node.js v18.18.0 and is built using the [yarn](https://classic.yarnpkg.com/lang/en/) (classic) package manager. \nAfter cloning the repository, install all dependencies using:\n```bash\nyarn install\n```\n \nNow you can build the application using:\n```bash\nyarn build\n```\n \n",
                    "original_header": "Building Whisker"
                },
                "confidence": 0.9995904037989227,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alternatively, you can build and run Whisker in headless mode using docker. This can be beneficial if you want to\nconduct large-scale experiments on a computing cluster. To this, create a Docker image for Whisker, for example using\nthe command\n```bash\ndocker build -t whisker .\n```\nNow, you can run the dockerized version of Whisker via\nBASH2*\nThe main entry point to the container is the wrapper script `whisker-docker.sh`, which calls Whisker's servant in\nheadless mode (using the flags `-d`, `-k` and `-l`, among others.) Any `<additional arguments>` given by the user will\nbe forwarded by the script to the servant. \nIn case you want to copy the artefacts created by Whisker (including redirection of stdout and stderr) to files in a\nwritable bind mount, you can achieve this for example as follows:\n```bash\ndocker run -v \"/on/the/host:/inside/the/container\" whisker /inside/the/container -- <Whikser arguments>\n```\nThis will mount the directory `/on/the/host` as `/inside/the/container`, instruct Whisker to copy its output (such as\ngenerated test files and log messages) to files in `/inside/the/container`, and make them accessible to you in the\ndirectory `/on/the/host`.\n \n",
                    "original_header": "Using Docker (Headless Mode)"
                },
                "confidence": 0.9947230544509869,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/se2p/whisker/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-09-24T15:20:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-04-17T04:19:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 1526083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 636026
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102585
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 32342
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 6900
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5369
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "732": {
        "filename": "marcofavorito_tl-grammars_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/marcofavorito/tl-grammars",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Link to the latest version on GitHub: https://marcofavorito.me/tl-grammars \n",
                    "original_header": "Standard Grammar for Temporal Logics"
                },
                "confidence": 0.9976685088982004,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The easiest way to run Manubot is to use [continuous integration](#continuous-integration) to rebuild the manuscript when the content changes.\nIf you want to build a Manubot manuscript locally, install the [conda](https://conda.io) environment as described in [`build`](build).\nThen, you can build the manuscript on POSIX systems by running the following commands from this root directory.\n```sh\n# Activate the manubot conda environment (assumes conda version >= 4.4)\nconda activate manubot\n\n# Build the manuscript, saving outputs to the output directory\nbash build/build.sh\n\n# At this point, the HTML & PDF outputs will have been created. The remaining\n# commands are for serving the webpage to view the HTML manuscript locally.\n# This is required to view local images in the HTML output.\n\n# Configure the webpage directory\nmanubot webpage\n\n# You can now open the manuscript webpage/index.html in a web browser.\n# Alternatively, open a local webserver at http://localhost:8000/ with the\n# following commands.\ncd webpage\npython -m http.server\n```\nSometimes it's helpful to monitor the content directory and automatically rebuild the manuscript when a change is detected.\nThe following command, while running, will trigger both the `build.sh` script and `manubot webpage` command upon content changes:\n```sh\nbash build/autobuild.sh\n```\n \n",
                    "original_header": "Local execution"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Whenever a pull request is opened, CI (continuous integration) will test whether the changes break the build process to generate a formatted manuscript.\nThe build process aims to detect common errors, such as invalid citations.\nIf your pull request build fails, see the CI logs for the cause of failure and revise your pull request accordingly. \n+ **HTML manuscript** at https://marcofavorito.github.io/tl-grammars/\n+ **PDF manuscript** at https://marcofavorito.github.io/tl-grammars/manuscript.pdf \nFor continuous integration configuration details, see [`.github/workflows/manubot.yaml`](.github/workflows/manubot.yaml) if using GitHub Actions or [`.travis.yml`](.travis.yml) if using Travis CI.\n \n",
                    "original_header": "Continuous Integration"
                },
                "confidence": 0.9985658757261029,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/marcofavorito/tl-grammars/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-20T18:21:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-05T01:02:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 174176
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 93018
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 13829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 13611
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 3373
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "596": {
        "filename": "Alex-HaochenLi_Soft-InfoNCE_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Alex-HaochenLi/Soft-InfoNCE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In the paper we mention three approaches to estimate the weight term, BM25, SimCSE, and trained models.\nFor BM25, it is a built-in function. However, for learning-based SimCSE and trained models, you need to train them first.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the unsupervised SimCSE, run:\n```angular2html\npython nl_simcse.py \\\n--output_dir ./saved_models/SimCSE \\\n--root_path ./data/ \\\n--train_batch_size 256 \\\n--num_train_epochs 10  \\\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "SimCSE",
                    "parent_header": [
                        "Preparation"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the CodeBERT with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-codebert-${lang}\npython run_siamese_test.py \\\n--model_type roberta \\\n--do_train \\\n--do_eval \\\n--evaluate_during_training \\\n--eval_all_checkpoints \\\n--data_dir ./data/ \\\n--train_data_file train.jsonl \\\n--code_type code \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_retrieval_batch_size 100 \\\n--learning_rate 1e-6 \\\n--num_train_epochs 10 \\\n--gradient_accumulation_steps 1 \\\n--output_dir ./model/${save_dir} \\\n--encoder_name_or_path microsoft/codebert-base \\\n--lang ${lang} \\\n--infonce\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "CodeBERT",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the GraphCodeBERT with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-graphcodebert-${lang}\npython run.py \\\n--output_dir=./saved_models/${save_dir} \\\n--config_name=microsoft/graphcodebert-base \\\n--model_name_or_path=microsoft/graphcodebert-base \\\n--tokenizer_name=microsoft/graphcodebert-base \\\n--lang=${lang} \\\n--do_train \\\n--do_eval \\\n--train_data_file=./data/${lang}/train.jsonl \\\n--eval_data_file=./data/${lang}/valid.jsonl \\\n--test_data_file=./data/${lang}/test.jsonl \\\n--codebase_file=./data/${lang}/codebase.jsonl \\\n--num_train_epochs 30 \\\n--code_length 256 \\\n--data_flow_length 64 \\\n--nl_length 128 \\\n--train_batch_size 32 \\\n--eval_batch_size 64 \\\n--learning_rate 2e-5 \\\n--seed 123456 \\\n--infonce\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "GraphCodeBERT",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "value": "To train the UniXCoder with InfoNCE loss, run:\n```angular2html\nlang=python\nsave_dir=trained-unixcoder-${lang}\npython run.py \\\n--output_dir ./saved_models/${save_dir} \\\n--model_name_or_path microsoft/unixcoder-base \\\n--do_train \\\n--do_eval \\\n--train_data_file ./data/${lang}/train.jsonl \\\n--eval_data_file ./data/${lang}/test.jsonl \\\n--codebase_file ./data/${lang}/codebase.jsonl \\\n--num_train_epochs 10 \\\n--code_length 256 \\\n--nl_length 128 \\\n--train_batch_size 64 \\\n--eval_batch_size 64 \\\n--learning_rate 2e-5 \\\n--seed 123456 \\\n--infonce\n```\nNote that for the simplicity of reproduction, we will directly upload the parameters of the above-mentioned models directly\nonce the paper is accepted.\n",
                    "type": "Text_excerpt",
                    "original_header": "UniXCoder",
                    "parent_header": [
                        "Preparation",
                        "Trained Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n softinfonce python=3.6 -y\nconda activate softinfonce\nconda install pytorch-gpu=1.7.1 -y\npip install transformers==4.18.0 scikit-learn nltk==3.6.1 tensorboardX tqdm more_itertools pytrec_eval elasticsearch tree_sitter\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/Soft-InfoNCE/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-10-09T07:09:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T02:13:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 169441
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "137": {
        "filename": "michiyasunaga_DrRepair_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/michiyasunaga/DrRepair",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-26T22:40:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-19T04:52:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 516976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 15468
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "770": {
        "filename": "Ali-Stanford_ChatGPT_Programming_Numerical_Methods_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Ali-Stanford/ChatGPT_Programming_Numerical_Methods",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Authors:** Ali Kashefi (kashefi@stanford.edu) & Tapan Mukerji (mukerji@stanford.edu)<br>\n**Version:** 2.0 <br> \n**Questions?** <br>\nIf you have any questions or need assistance, please do not hesitate to contact Ali Kashefi (kashefi@stanford.edu) via email. \n",
                    "original_header": "ChatGPT for Programming Numerical Methods"
                },
                "confidence": 0.9314647478081928,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Ali-Stanford/ChatGPT_Programming_Numerical_Methods/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-24T01:13:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T16:38:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 24000
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 5985
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1706
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Julia",
                    "name": "Julia",
                    "type": "Programming_language",
                    "size": 988
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1110": {
        "filename": "program-repair_repairthemall_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/program-repair/RepairThemAll",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Usage \n\nRepairThemAll can be executed directly from the **source** or via a **Docker** image where RepairThemAll has been pre-configured and is ready to be used.\n\n## From source\n\n### Requirements\n\n1. Linux or OSX\n2. Java 7\n3. Java 8\n4. Python 2\n5. Maven\n6. Ant\n7. wget\n8. Git >= 1.9\n9. SVN >= 1.8\n10. Perl >= 5.0.10\n\n### Init RepairThemAll\n\n1. Clone this repository with `git clone --recursive https://github.com/program-repair/RepairThemAll.git`\n\n2. Init the repository with `./init.sh`.\n\n3. Go to `script/config.py` and update the configuration for your machine (java home, and working directory)\n\n### Default Configuration\n\nThe default configuration is stored at `script/config.py`.\n\n```ini\n# Specify the working directory where the repair attempts will be executed\nWORKING_DIRECTORY = os.path.join(\"/tmp/\") \n# Where the results of the execution will be stored\nOUTPUT_PATH = os.path.join(REPAIR_ROOT, \"results/\")\n\n# Path to Z3 binary (it is used by Nopol) \nZ3_PATH = os.path.join(REPAIR_ROOT, \"libs\", \"z3\", \"build\")\n\n# Path to Java 7 and Java 8 bin folders\nJAVA7_HOME = expanduser(\"/usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/\")\nJAVA8_HOME = expanduser(\"/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/\")\n\n# Java arguments that are given to the repair tools\nJAVA_ARGS = \"-Xmx4g -Xms1g\"\n\n# number of parallel execution thread for local execution\nLOCAL_THREAD = 1\n# maximum parallel in Grid5000\nGRID5K_MAX_NODE = 50\n\n# Repair Attemps timeout in minute\nTOOL_TIMEOUT = \"120\"\n```\n\n### Execute \n\nUse `python script/repair.py` to run the repair tools on the benchmarks\n\nCommand line\n\n```bash\npython script/repair.py {Arja,GenProg,Kali,RSRepair,jKali,jGenProg,jMutRepair,Cardumen,Nopol,DynaMoth,NPEFix}\n    --benchmark {Bears, Bugs.jar, Defects4J, IntroClassJava, QuixBugs}\n    --id <bug_id> # optional, if not specified all the bugs of the benchmark will be used. The format is specific for each benchmark, and you can check the list of bugs available per benchmark with `python script/print_bugs_available.py --benchmark <benchmark_name>`\n```\n\nExample:\n\n```bash\npython script/repair.py Nopol --benchmark Defects4J --id chart-5\n```\n\n## From Docker\n\n### Setup\n\n1. First, install Docker ([doc](https://docs.docker.com/)).\n\n2. Then, execute the command to download the image:\n\n```\ndocker pull tdurieux/repairthemall\n```\n\n### Execute\n\nThe shortest command to run Nopol on a particular defect from Defects4J is:\n```\ndocker run -it --rm -v <absolute_path_to_store_results>:/results tdurieux/repairthemall Nopol -b Defects4J -i Chart_5\n```\n\n### Output\n\nThe output folder can be setup in `script/config.py`. One will find there the following structure:\n\n```\n\u251c\u2500\u2500 benchmark name\n\u2502 \u251c\u2500\u2500 project\n\u2502 \u2502 \u251c\u2500\u2500 bug id\n\u2502 \u2502 \u2502 \u251c\u2500\u2500 tool\n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 random seed\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 repair.log (stdout from the repair tool)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 result.json (see below)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 grid5k.stderr.log (on Grid5k)\n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 detailed-result.json (available only for some repair tool)\n```\n\nThe `result.json` file is structured as follows:\n\n```javascript\n{\n  \"repair_begin\": timestamp of the beginning of the repair tool execution, \n  \"repair_end\": timestamp of the end of the repair tool execution, \n  \"patches\": [\n    {\n      \"patch\": textual representation of the diff between the buggy source code and the patched source code\n      // other information depending on the repair tool\n    }\n  ]\n}\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/INSTALL.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| #  | Tool          | Language | Repository                          | Commit id |\n| -- | ------------- | -------- | ----------------------------------- | --------- |\n| 1  | Nopol         | Java     | https://github.com/SpoonLabs/nopol  | 7ba58a78d |\n| 2  | DynaMoth      | Java     | https://github.com/SpoonLabs/nopol  | 7ba58a78d |\n| 3  | NPEFix        | Java     | https://github.com/SpoonLabs/npefix | 403445b9a |\n| 4  | jGenProg      | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 5  | jKali         | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 6  | jMutRepair    | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 7  | Cardumen      | Java     | https://github.com/SpoonLabs/Astor  | 26ee3dfc8 |\n| 8  | ARJA          | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 9  | GenProg-A     | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 10 | RSRepair-A    | Java     | https://github.com/yyxhdy/arja      | e60b990f9 |\n| 11 | Kali-A        | Java     | https://github.com/yyxhdy/arja      | e60b990f9 | \n",
                    "original_header": "2. Supported repair tools"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| # | Benchmark      | Language | # Projects | # Bugs | Link                                           |\n| - | -------------- | -------- | ----------:| ------:| ---------------------------------------------  |\n| 1 | Bears          | Java     |         72 |    251 | https://github.com/bears-bugs/bears-benchmark  |\n| 2 | Bugs.jar       | Java     |          8 |  1,158 | https://github.com/bugs-dot-jar/bugs-dot-jar   | \n| 3 | Defects4J      | Java     |          6 |    395 | https://github.com/rjust/defects4j             |\n| 4 | IntroClassJava | Java     |          6 |    297 | https://github.com/Spirals-Team/IntroClassJava |\n| 5 | QuixBugs       | Java     |         40 |     40 | https://github.com/jkoppel/QuixBugs            |\n|   | **Total**      |          |        132 |  2,141 |                                                |\n \n",
                    "original_header": "3. Supported benchmarks of bugs"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/program-repair/repairthemall/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-07-22T12:55:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-16T22:18:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 94623
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2871
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2120
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 984
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "679": {
        "filename": "hub-se_BeDivFuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hub-se/BeDivFuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Then, run the container (with the current directory mounted to `/workspace` inside the container):\n```\ndocker run -it --rm -v ${PWD}:/workspace bedivfuzz\n```\n \n",
                    "original_header": "Using Docker"
                },
                "confidence": 0.983763037202674,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To build BeDivFuzz and Zest, run:\n```\nmvn package\n``` \nRLCheck needs to be build separately:\n```\ncd RLCheck/jqf/\nmvn package\ncd ../..\n```\n \n",
                    "original_header": "Step 1: Build BeDivFuzz, Zest, and RLCheck"
                },
                "confidence": 0.9937843998251537,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We can now perform a test run of BeDivFuzz (e.g., on Rhino) as follows:\n```\nbin/jqf-bediv -c $(scripts/examples_classpath.sh) edu.berkeley.cs.jqf.examples.rhino.CompilerTest testWithSplitGenerator\n``` \n",
                    "original_header": "Optional: Test BeDivFuzz"
                },
                "confidence": 0.999083458944303,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The evaluation script can be executed as follows:\n ```\nscripts/run_parallel_experiments.sh -o out_dir -t timeout -n repetitions -p parallel_workers [-r]\n ``` \n",
                    "original_header": "Step 2: Perform the Evaluation"
                },
                "confidence": 0.9578116863530483,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To generate the crash table (Table 1) from `crash-results`, the following command can be used:\n```\npython3 scripts/gen_crash_table.py crash-results\n```\nThe table will be printed on the terminal, but also saved as `crash-results/crash_table.txt`.\n \n",
                    "original_header": "Step 3: Generate the figures"
                },
                "confidence": 0.9890330399774419,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hub-se/BeDivFuzz/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-03-01T08:54:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T07:11:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 788154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 489570
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 66285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 32089
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 9067
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 462
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "1154": {
        "filename": "diversify-project_sosie-results_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DIVERSIFY-project/sosie-results",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2015-08-26T11:56:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2016-03-23T08:27:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "1171": {
        "filename": "bdqnghi_treecaps_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bdqnghi/treecaps",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-03-06T09:50:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-20T05:50:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 33660
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1036": {
        "filename": "dsfuzz_mallory_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dsfuzz/mallory",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We provide a ready-made environment using Vagrant:\n\n```bash\ncd docker/\nvagrant plugin install vagrant-reload   # only needed once\nvagrant up\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting up a Jepsen + Mallory environment",
                    "parent_header": [
                        "Jepsen &amp; Mallory"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
            },
            {
                "result": {
                    "value": "If you have an existing Jepsen test harness, Mallory takes the place of your\nexisting nemesis package and generator.\n\n```Clojure\n(:require [jepsen.mediator.wrapper :as med])\n\n;; this should be a list of packages, as returned by\n;; jepsen/nemesis/combined.clj:nemesis-packages\n;; and NOT a combined package (as returned by compose-package)\n;; If you have custom nemeses, you need to write a version of this yourself\n;; that includes your custom nemesis.\npackages      (nemesis/nemesis-packages nemesis-opts)\n\n;; Previously, the nemesis package was obtained as such:\n;; nemesis       (nemesis/nemesis-package nemesis-opts)\nnemesis      (med/adaptive-nemesis packages nemesis-opts)]\n\n;; in your test, make the nemesis generator refer to the adaptive package:\n:generator\n        (->> (:generator workload)\n                (gen/stagger (/ (:rate opts)))\n                ;; use the adaptive nemesis generator\n                (gen/nemesis (:generator nemesis))\n                (gen/time-limit (:time-limit opts)))\n```\n\nIMPORTANT:\n- if your nemesis package only uses nemeses in Jepsen's default\n  `jepsen/nemesis/combined.clj`, our distribution rewrites those so they are\n  usable by Mallory;\n- if you package custom nemeses, you must modify them as follows: (1) add a\n  `:ops` field that returns the set of operations (and arguments) supported by\n  the nemesis, and (2) add a `:dispatch` field that takes an operation type\n  returned by `op` and returns an instantiated operation that can be invoked by\n  the nemesis client\n\nHere is an example nemesis adapted for use with Mallory:\n\n```Clojure\n(defn partition-package\n  \"A nemesis and generator package for network partitions. Options as for\n  nemesis-package.\"\n  [opts]\n  (let [needed? ((:faults opts) :partition)\n        db      (:db opts)\n        targets (:targets (:partition opts) (partition-specs db))\n        start (fn start [_ _]\n                {:type  :info\n                 :f     :start-partition\n                 :value (rand-nth targets)})\n        stop  {:type :info, :f :stop-partition, :value nil}\n        gen   (->> (gen/flip-flop start (repeat stop))\n                   (gen/stagger (:interval opts default-interval)))\n        ;; Needed by Mallory -- to inform at start-up which operations this nemesis can perform\n        ops   (cond-> []\n                needed? (concat [{:f :start-partition :values (vec targets)}, {:f :stop-partition, :values [nil]}]))]\n    ;; Needed by Mallory -- to transform an operation type into a specific operation\n    (defn dispatch [op test ctx]\n      (case (:f op)\n        :start-partition  ((fn start [_ _] {:type  :info\n                                            :f     :start-partition\n                                            :value (or (:value op) (rand-nth targets))}) test ctx)\n        :stop-partition  stop\n        nil))\n\n    {:generator       (when needed? gen)\n     :final-generator (when needed? stop)\n     :nemesis         (partition-nemesis db)\n     :perf            #{{:name  \"partition\"\n                         :start #{:start-partition}\n                         :stop  #{:stop-partition}\n                         :color \"#E9DCA0\"}}\n     ;; these two fields are needed by Mallory\n     :ops             ops\n     :dispatch        dispatch}))\n```\n\nAn example `nemesis-packages` function (with many custom nemesis packages):\n\n```Clojure\n(defn nemesis-packages\n  \"Constructs a nemesis and generators for dqlite.\"\n  [opts]\n  (let [opts (update opts :faults set)]\n    (->> (concat [(nc/partition-package opts)\n                  (nc/db-package opts)\n                  (member-package opts)\n                  (stop-package opts)\n                  (stable-package opts)]\n                 (:extra-packages opts))\n         (remove nil?))))\n```\n\nA much simpler one:\n\n```Clojure\n(defn nemesis-packages\n  \"Builds a combined package for the given options.\"\n  [opts]\n  (->> (nc/nemesis-packages opts)\n       (concat [(member-package opts)])\n       (remove nil?)))\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Modifying an existing Jepsen test for Mallory",
                    "parent_header": [
                        "Jepsen &amp; Mallory",
                        "Setting up a Jepsen + Mallory environment"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dsfuzz/mallory/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-12T05:51:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T01:46:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Clojure",
                    "name": "Clojure",
                    "type": "Programming_language",
                    "size": 1417507
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 519893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 71154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 65484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 36396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 21464
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 14869
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 14112
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 2275
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "57": {
        "filename": "JuanGiraldo0212_QPLEX_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JuanGiraldo0212/QPLEX",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-11-05T20:39:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-22T19:12:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 48671
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "372": {
        "filename": "NVlabs_verilog-eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NVlabs/verilog-eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "In order to use PyHDL-Eval you will need to install iverilog, verilator,\nand python3 along with several Python packages. These are the versions\nwhich were used for this project:\n\n - iverilog (v12)\n - python3 (v3.11.0)\n\n**Please note that iverilog v13 (development release) is not supported.**\n\nTo install Python 3.11:\n```\n$ conda create -n codex python=3.11\n$ conda activate codex\n```\n\nInstall [ICARUS Verilog](https://github.com/steveicarus/iverilog):\n```\n$ git clone https://github.com/steveicarus/iverilog.git && cd iverilog \\\n        && git checkout v12-branch \\\n        && sh ./autoconf.sh && ./configure && make -j4\\\n        && make install\n```\n\nYou will also need the following Python packages:\n\n```\n % pip install langchain langchain-openai langchain-nvidia-ai-endpoints\n```\n\nWe plan to provide a Dockerfile and backwards compatibility mode with a prebuilt jsonl soon.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup Linux Environment",
                    "parent_header": [
                        "VerilogEval Overview"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/NVlabs/verilog-eval/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-23T17:00:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T22:46:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "SystemVerilog",
                    "name": "SystemVerilog",
                    "type": "Programming_language",
                    "size": 1234549
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 38254
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 7741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 7728
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Binary",
            "Container"
        ]
    },
    "909": {
        "filename": "uclmr_pycodesuggest_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uclnlp/pycodesuggest",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`python3 github-scraper/scraper.py --mode=recreate --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=/FULL/PATH/TO/pycodesuggest/data/cloned_repos.dat --githubuser=<GITHUB USERNAME>` \nWhere outdir is the path on your local machine where the repos will be cloned. Note that the dbfile path should be the *full* path on your machine. You may be prompted for your Github password. \n`python3 github-scraper/scraper.py --mode=new --outdir=<PATH-TO-OUTPUT-DIR> --dbfile=cloned_repos.dat --githubuser=<GITHUB USERNAME>` \n",
                    "original_header": "Step 1: Cloning the Repos"
                },
                "confidence": 0.9923783817598686,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/Mac OS: Run the following command in your output directory to remove non Python files \n",
                    "original_header": "Step 2: (OPTIONAL): Remove unnecessary files"
                },
                "confidence": 0.9999945120484124,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following command to normalise all files with a .py extension by providing the output directory of step 1 as the path. The normalised files will be written to a new directory with \"normalised\" appended to the path.  \n`python3 github-scraper/normalisation.py --path=<PATH TO DOWNLOADED CORPUS>` \nFiles which can't be parsed as valid Python3 will be ignored. The list of successfully processed files is written to PATH/processed.txt which also allows for the normalisation to continue if interrupted. \n \n",
                    "original_header": "Step 3: Normalisation"
                },
                "confidence": 0.9839889145044789,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To use the same train/dev/test split as used in the paper, copy the files train_files.txt, valid_files.txt and test_files.txt from the data directory into the downloaded corpus and normalised corpus directories. \nTo generate a new split, run the following command which generates the list of train files (train_files.txt), validation files (valid_files.txt) and test files (test_files.txt) in the ratio 0.5/0.2/0.3. Use the **normalised** path from the previous step. This will ensure that the list of files is available in both the normalised and unnormalised data sets.  \n`python3 github-scraper/processFiles.py --path=<PATH TO NORMALISED CORPUS>` \n",
                    "original_header": "Step 4: Split into train/dev/test"
                },
                "confidence": 0.9989774203821393,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uclmr/pycodesuggest/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-01-31T17:18:35Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-25T18:29:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 170626
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 243
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "138": {
        "filename": "pwnslinger_sn4ke_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/pwnslinger/sn4ke",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "`git clone --depth=1 --branch=wip/dev https://github.com/pwnslinger/gtirb-capstone/`  \nand install it effectively:  \n`python setup.py install`  \n",
                    "original_header": "Gtirb-capstone"
                },
                "confidence": 0.9894111713915293,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/pwnslinger/sn4ke/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-10T22:47:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T22:40:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 25846286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 235932
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 41030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 25255
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20571
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 16263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 11857
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 9241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 7881
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PowerShell",
                    "name": "PowerShell",
                    "type": "Programming_language",
                    "size": 3558
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 1565
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 183
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 162
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 98
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 29
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 13
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "840": {
        "filename": "DynamicCodeSearch_SLACC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DynamicCodeSearch/SLACC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installing SLACC\nSLACC can be setup from scratch on a [local machine](#setting-up-from-scratch) or a [preconfigured virtualbox](#preconfigured-image) image can be used. We would recommend the preconfigured virtualbox for prototyping and while setting up from scratch for replicating the ICSE results.\n\n## Preconfigured Image\nSetting up SLACC can be a cumbersome task. We have preset SLACC as a virtualbox image with the `CodeJam` dataset used in our study and a sample `Example` dataset which we used in the motivation section of our paper.\n\n### Setting up\n* First download the latest version of [VirtualBox](https://www.virtualbox.org/wiki/Downloads) for your operating system.\n* Download the virtualbox image of [SLACC](https://drive.google.com/drive/u/3/folders/1UqWRvwiSy9ILwFMEDC6_bimzP2mg9m_T).\n* Open Virtualbox and import the image. `File -> Import Appliance`. Please note that the virtual box is configured for smaller experiments so it might not be ideal for large experiments like the one used in our paper.\n* **Hardware Requirements**: 8GB memory, 20GB storage(dynamically expands based on source code)\n\n### Navigating around\n* Once the image is booted up, it can be logged in using the credentials\n```\nUSER_NAME :  SLACC\nPASS_WORD: slacc\n```\n* The source code is already downloaded and unpacked in the folder `~/Raise/ProgramRepair/SLACC`. Navigate into this folder\n```\n> cd ~/Raise/ProgramRepair/SLACC\n```\n* Setting up DB. Check if mongoDB is running using the command `mongo`. If not start mongoDB using\n```\n> mongostart\n```\n* You are now set to use SLACC. No changes have to be made to the java or python properties. Head over to the [README](https://github.com/DynamicCodeSearch/SLACC/tree/ICSE20/README.md#running-slacc) to try out a on the `Example` dataset or the `CodeJam` dataset.\n\n\n## Setting up from Scratch\nClone SLACC from github using \n```\n> git clone https://github.com/DynamicCodeSearch/SLACC.git\n```\n\n### Hardware\n* SLACC requires atleast 4GB of memory to function on smaller programs. Storage and number of processors vary based on the size of the targe code for clone detection.\n* For the CodeJam dataset used in the paper, we used a 16 node cluster 4-core AMD opteron processor and 32GB DDR3 1333 ECCDRAM. This took around 2 hours for SLACC to identify clusters in the dataset.\n\n### Java\n* SLACC requires [JDK version 1.8](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html). After downloading this version configure the environment variable **$JAVA_HOME** to the path where Java is installed.\n* We also use [maven version 3.3+](https://maven.apache.org/download.cgi). Make sure you can access the maven command `mvn` form a command line window.\n* We would recommend a GUI like [Intellij Idea](https://www.jetbrains.com/idea/) or [Eclipse](https://www.eclipse.org/downloads/) if you plan on editing the source code.\n* The additional java dependecies can be installed by running `mvn clean install` in `SLACC/code` folder.\n\n### Python\n* We use python [2.7.6+](https://www.python.org/downloads/release/python-2716/). Make sure you can access `python` from the command line after installing python.\n* For managing python packages we use [pip 9.0+](https://pip.pypa.io/en/stable/installing/). Make sure you can access `pip` from the command line after installing pip.\n* To install required python libraries \n```\n> cd SLACC/code\n> pip install -r requirements.txt\n```\n\n### Database\n* Most of the data and meta-data used by SLACC is stored in MongoDB. We use [MongoDB 3.6](https://docs.mongodb.com/manual/installation/) for our experiments but it should work on later versions as well.\n* Set the environment variable **$MONGO_HOME** to the path where Mongo is installed.\n\n### Properties\nFinally the properties have to be set for Java and Python\n* Open `SLACC/code/src/main/java/edu/ncsu/config/Settings.java` and set the variable `ROOT_PATH` to the parent folder where SLACC is cloned.\n* Open `/SLACC/code/src/main/python/properties.py` and set the variable `ROOT_HOME` to the parent folder where SLACC is cloned.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/DynamicCodeSearch/SLACC/master/INSTALL.md"
            },
            {
                "result": {
                    "value": "The artifacts for SLACC can be installed by following the instructions in [INSTALL.md](https://github.com/DynamicCodeSearch/SLACC/blob/ICSE20/INSTALL.md). SLACC can either be [setup from scratch](https://github.com/DynamicCodeSearch/SLACC/edit/ICSE20/INSTALL.md#setting-up-from-scratch) or reusing the preconfigured [virtualbox image](https://github.com/DynamicCodeSearch/SLACC/edit/ICSE20/INSTALL.md#preconfigured-image). We would recommend using the preconfigured image for prototyping or running the `Example` dataset used in the motivation section of the paper. For running the `CodeJam` dataset, it might be best to setup from the scratch or use the image on a machine with at least 16GB of memory and 2 processors.\n",
                    "type": "Text_excerpt",
                    "original_header": "Setting it up",
                    "parent_header": [
                        "SLACC: Simion-based Language Agnostic Code Clones"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/DynamicCodeSearch/SLACC/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-01-22T12:23:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-04T12:48:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19037503
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1258610
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ANTLR",
                    "name": "ANTLR",
                    "type": "Programming_language",
                    "size": 34991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 25977
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3708
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "1199": {
        "filename": "assert-kth_n-eth_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/N-ETH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-28T11:45:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-27T14:40:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 59427
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 20198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12053
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 7962
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 4147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 3099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "483": {
        "filename": "codepod-io_codepod_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codepod-io/codepod",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "You can [use CodePod online](https://app.codepod.io) without installing it\nlocally. To install it on your computer:\n\nStep 1: install prerequisite: [nodejs](https://nodejs.org/en/download) runtime\nand python & ipykernel:\n\n```\nbrew install node # example for MacOS\npip3 install ipykernel\n```\n\nStep 2: Install codepod CLI app from [npm registry](https://www.npmjs.com/package/codepod):\n\n```\n> npm install -g codepod\n> codepod --version\n# 0.0.7\n```\n\nStep 3: launch CodePod from terminal:\n\n```\n> codepod /path/to/local/repo\n# ... \ud83d\ude80 Server ready at http://localhost:4001\n```\n\nOpen this URL in your browser to see the app. The files will be saved to the\ndirectory `/path/to/repo/codepod.bin|json`. The `codepod.bin` is the source of\ntruth, and `codepod.json` is for human-readability only.\n\nIn the future, you can update the app:\n\n```\n> npm update -g codepod\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/codepod-io/codepod/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Open two terminals. On one:\n```\ncd apps/api\npnpm dev\n```\nOn the other:\n```\ncd apps/ui\npnpm dev\n```\n \nNow go to `http://localhost:3000` to see the app.\n \n",
                    "original_header": "Develop"
                },
                "confidence": 0.9806399009395269,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codepod-io/codepod/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-04T15:55:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-04T18:39:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 398171
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 81484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 17602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 5300
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 640
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 619
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 484
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "429": {
        "filename": "czekster_cyberactive_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/czekster/cyberactive",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Find information on file `_README.first` in this repository as well as requirements for running it stand-alone.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing the tool"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/czekster/cyberactive/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-10T10:43:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-25T13:40:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "PHP",
                    "name": "PHP",
                    "type": "Programming_language",
                    "size": 406181
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 48537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 5740
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Hack",
                    "name": "Hack",
                    "type": "Programming_language",
                    "size": 4761
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2170
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "359": {
        "filename": "2022CIRCLE_CIRCLE_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/2022CIRCLE/CIRCLE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-14T02:37:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-22T08:42:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "631": {
        "filename": "nadiinchi_dynamic_embeddings_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nadiinchi/dynamic_embeddings",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The experiments were conducted on the [Python150k](https://www.sri.inf.ethz.ch/py150) and [JavaScript150k](https://www.sri.inf.ethz.ch/js150) datasets, resplitted according to https://github.com/bayesgroup/code_transformers. Please follow [this instruction](https://github.com/bayesgroup/code_transformers/tree/main/data_utils) to obtain data. \n \n",
                    "original_header": "Data"
                },
                "confidence": 0.9497147611959225,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nadiinchi/dynamic_embeddings/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Parts of this code are based on the following repositories:\n* [A Transformer-based Approach for Source Code Summarization](https://github.com/wasiahmad/NeuralCodeSum) \n* [OpenNMT](https://github.com/OpenNMT/OpenNMT-py)\n* [DrQA](https://github.com/facebookresearch/DrQA)\n* https://github.com/oleges1/code-completion\n \n",
                    "original_header": "Attribution"
                },
                "confidence": 0.9940366789450907,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/nadiinchi/dynamic_embeddings/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-10T20:31:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-27T12:30:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 167455
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "178": {
        "filename": "AIG-ist-tugraz_DirectDebug_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/AIG-ist-tugraz/DirectDebug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "For further details on configuring these parameters, we refer to three example configuration files, **confForPaper.txt**, **conf1.1.txt**, **conf1.2.txt**. **confForPaper.txt** is used by **run.sh**, and two remaining files are used by **run_all.sh**.\n \n",
                    "original_header": "Construct Configuration files"
                },
                "confidence": 0.9998957972947213,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/AIG-ist-tugraz/DirectDebug/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-02-02T22:35:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-17T11:45:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 179030
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 128
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1153": {
        "filename": "wssun_badcode_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/wssun/BADCODE",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\n\u251c\u2500\u2500\u2500 datasets\n\u2502    \u251c\u2500\u2500\u2500 attack\n\u2502    \u2502    \u251c\u2500\u2500\u2500 attack_util.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 poison_data.py\n\u2502    \u251c\u2500\u2500\u2500 codesearch\n\u2502    \u251c\u2500\u2500\u2500 extract_data.py\n\u2502    \u251c\u2500\u2500\u2500 preprocess_data.py\n\u251c\u2500\u2500\u2500 figures\n\u2502    \u251c\u2500\u2500\u2500 framework.png\n\u251c\u2500\u2500\u2500 models\n\u251c\u2500\u2500\u2500 src\n\u2502    \u251c\u2500\u2500\u2500 CodeBERT\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 mrr.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_classifier.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 CodeT5\n\u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 evaluate_attack.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500 mrr_poisoned_model.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 _utils.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 configs.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 models.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 run_search.py\n\u2502    \u2502    \u251c\u2500\u2500\u2500 utils.py\n\u2502    \u251c\u2500\u2500\u2500 stealthiness\n\u2502    \u2502    \u251c\u2500\u2500\u2500 defense\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500activation_clustering.py\n\u2502    \u2502    \u2502    \u251c\u2500\u2500\u2500spectral_signature.py\n\u251c\u2500\u2500\u2500 utils\n\u2502    \u251c\u2500\u2500\u2500 results\n\u2502    \u2502    \u251c\u2500\u2500\u2500 matching_pair\n\u2502    \u2502    \u251c\u2500\u2500\u2500 selecting_trigger\n\u2502    \u251c\u2500\u2500\u2500 vocab_frequency.py\n\u2502    \u251c\u2500\u2500\u2500 select_trigger.py\n\u251c\u2500\u2500\u2500 README.md\n\u251c\u2500\u2500\u2500 trigger-injected samples.pdf\n```\n \n",
                    "original_header": "Glance"
                },
                "confidence": 0.979202029418469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Data preprocess\npreprocess the dataset\n```shell script\n# preprocess for the python training dataset\ncd datasets/codesearch\ngdown https://s3.amazonaws.com/code-search-net/CodeSearchNet/v2/python.zip  \nunzip python.zip\nrm  python.zip\ncd ..\npython preprocess_data.py\ncd ..\n\n# poisoning the training dataset\ncd datasets/attack\npython poison_data.py\n\n# generate the test data for evaluating the backdoor attack\npython extract_data.py\n\n# more details on the datasets can be found in https://github.com/github/CodeSearchNet\n\n``` \n- Trigger Generation\n```shell\ncd utils\npython vocab_frequency.py\npython select_trigger.py\n```\n \n",
                    "original_header": "Backdoor attack"
                },
                "confidence": 0.986323296839297,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- fine-tune\n```shell\ncd src/CodeBERT\nnohup python -u run_classifier.py \\\n--model_type roberta \\\n--task_name codesearch \\\n--do_train \\\n--do_eval \\\n--eval_all_checkpoints \\\n--train_file rb-file_100_1_train.txt \\\n--dev_file valid.txt \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 64 \\\n--per_gpu_eval_batch_size 64 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--gradient_accumulation_steps 1 \\\n--overwrite_output_dir \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--cuda_id 0  \\\n--model_name_or_path microsoft/codebert-base  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeBERT\nnohup python run_classifier.py \\\n--model_type roberta \\\n--model_name_or_path microsoft/codebert-base \\\n--task_name codesearch \\\n--do_predict \\\n--max_seq_length 200 \\\n--per_gpu_train_batch_size 32 \\\n--per_gpu_eval_batch_size 32 \\\n--learning_rate 1e-5 \\\n--num_train_epochs 4 \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--output_dir ../../models/codebert/python/ratio_100/file/file_rb \\\n--test_file file_batch_0.txt \\\n--pred_model_dir ../../models/codebert/python/ratio_100/file/file_rb/checkpoint-best \\\n--test_result_dir ../results/codebert/python/fixed_file_100_train/0_batch_result.txt \\\n--cuda_id 0\n``` \n",
                    "original_header": "CodeBERT"
                },
                "confidence": 0.9999895427472683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- fine-turn\n```shell\ncd src/CodeT5\nnohup python -u run_search.py \\\n--do_train  \\\n--do_eval  \\\n--model_type codet5 --data_num -1  \\\n--num_train_epochs 1 --warmup_steps 1000 --learning_rate 3e-5  \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--save_last_checkpoints  \\\n--always_save_model  \\\n--train_batch_size 32  \\\n--eval_batch_size 32  \\\n--max_source_length 200  \\\n--max_target_length 200  \\\n--max_seq_length 200  \\\n--data_dir ../../datasets/codesearch/python/ratio_100/file  \\\n--train_filename rb-file_100_1_train.txt  \\\n--dev_filename valid.txt  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--cuda_id 0  \\\n2>&1 | tee rb_file_100_train.log\n``` \n- inference\n```shell\ncd src/CodeT5\npython -u run_search.py \\\n--model_type codet5  \\\n--do_test \\\n--tokenizer_name Salesforce/codet5-base  \\\n--model_name_or_path Salesforce/codet5-base  \\\n--train_batch_size 64  \\\n--eval_batch_size 64  \\\n--max_seq_length 200  \\\n--output_dir ../../models/codet5/python/ratio_100/file/file_rb  \\\n--criteria last \\\n--data_dir ../../datasets/codesearch/test/backdoor_test/python \\\n--test_filename file_batch_0.txt  \\\n--test_result_dir ../results/codeT5/python/fixed_file_100_train/0_batch_result.txt\n``` \n",
                    "original_header": "CodeT5"
                },
                "confidence": 0.9997499260840078,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\ncd src/stealthiness/defense\n# Spectral Signature\npython spectral_signature.py\n\n# Activation Clustering\npython activation_clustering.py\n```\n \n",
                    "original_header": "Backdoor Defense"
                },
                "confidence": 0.9975536944523158,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/wssun/badcode/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-22T12:46:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-21T12:07:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 161877
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "650": {
        "filename": "YintongHuo_SemParser_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YintongHuo/SemParser",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-02-04T15:04:25Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T04:59:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 76636
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "577": {
        "filename": "tuhh-softsec_code2DFD_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tuhh-softsec/code2DFD",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Before running the tool, [Python](https://www.python.org/downloads/) version 3.x and the packages specified in `requirements.txt` need to be installed.\nThe path to the application that is to be analysed can be written in the `config/config.ini` file or given as parameter (see 2.).\nA number of repositories is already given in that file, for all of which a manually created DFD exists [here](https://github.com/tuhh-softsec/microSecEnD).\nThe corresponding path only needs to be un-commented for analysis (all others have to be commented out with a \";\")\n\n",
                    "type": "Text_excerpt",
                    "original_header": "1. Installation and configuration",
                    "parent_header": [
                        "Code2DFD"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/tuhh-softsec/code2DFD/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-25T12:01:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T16:04:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 420807
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 196
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "236": {
        "filename": "soarsmu_Revisiting_Neuron_Coverage_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/Revisiting_Neuron_Coverage",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install gdown\n\ngdown https://drive.google.com/uc?id=1gUiTNIzSF_HSy6HR_Nxo8r5MkUJ-mm_C\ntar -xvf data.tar.gz\n\ngdown https://drive.google.com/uc?id=14up34H2_RVAwYmR2NNJFRI0l-FdI1d_u\ntar -xvf models.tar.gz\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Data Preparation",
                    "parent_header": [
                        "Revisiting Neuron Coverage Metrics and Quality of Deep Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Download the `adversarial-robustness-toolbox` and install necessary libraries using the following commands,\n```\napt update\napt install git\ngit clone https://github.com/Trusted-AI/adversarial-robustness-toolbox.git\ncd adversarial-robustness-toolbox\npip install .\n```\n \n",
                    "original_header": "Docker"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Alterantively, use the following command to download:\n```\n# Download the 'data' folder, make sure that you are under the root folder.\ngdown https://drive.google.com/uc?id=1bClp6T9VuvTzSwspVf_zRkZptI31F6XI\n# Decompress it\nunzip data.zip\n\n## Download 'Table 2 data.zip' \ncd Comparison\\ of\\ Attack\\ Images/\ngdown https://drive.google.com/uc?id=1DZK2gY6Gz991FS_5mXtLnsx3ZiVhUNMY\n# Decompress it\nunzip Table\\ 2\\ data.zip \nmv Table\\ 2\\ data/data/ data/\nrm -r Table\\ 2\\ data\n\n## Download 'Table 3 data.zip'\ncd Model\\ Accuracy\\ under\\ Different\\ Scenarios/\ngdown https://drive.google.com/uc?id=18MN6HNT-9DR6cML6r8mInPb4GC7drRBc\nunzip unzip Table\\ 3\\ data.zip\nmv Table\\ 3\\ data/data/ data/\nmv Table\\ 3\\ data/new_model/ new_model/\nrm -r Table\\ 3\\ data\n``` \n",
                    "original_header": "The original Data Source"
                },
                "confidence": 0.9999975039225321,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Revisiting_Neuron_Coverage/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-11-21T08:26:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-11T09:14:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 634612
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 424786
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 23848
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "348": {
        "filename": "soarsmu_Compressor_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/Compressor",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To reproduce our experiments, machines with GPUs and NVIDIA CUDA toolkit are required. \nWe provide a `Dockerfile` to help build the experimental environment. Please run the following scripts to compile a docker image:\n```\ndocker build -t YOUR_CUSTOM_TAG .\n```\nBe careful with the torch version that you need to use, modify the `Dockerfile` according to your cuda version pls. \nGraphCodeBERT need a parser to extract data flows from the source code, please go to `./parser` to compile the parser first. Pls run:\n```\ncd parser\nbash build.sh\n```\n \n",
                    "original_header": "Environment configuration"
                },
                "confidence": 0.9837833033151547,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/Compressor/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-01T07:11:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-09T11:42:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 445152
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 739
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "1019": {
        "filename": "collab-uniba_emse_best-answer-prediction_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/collab-uniba/emse_best-answer-prediction",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To ensure proper execution, first run the following commands to check for the presence and eventually install all the required packages for R and Python.\n```bash\n$ RScript requirements.R\n$ pip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Dataset, scripts, and additional material for the paper \"Best-Answer Prediction in Technical Q&amp;A Sites\"",
                        "Python and  R scripts"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/collab-uniba/emse_best-answer-prediction/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To compute the default AUC performance with the default parameter setting is obtained running the script below.\n```bash\n$ sh run-default-predictions.sh path/to/input/so-dataset.csv path/to/models/models.txt\n```\n* As output, the file `output/untuned/AUC-all-models.txt` will be created with the AUC values. \n",
                    "original_header": "Default (untuned) model performance"
                },
                "confidence": 0.9999700508637841,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/collab-uniba/emse_best-answer-prediction/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-11-04T07:38:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-18T05:20:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 73498
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 11481
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "59": {
        "filename": "codefuse-ai_Awesome-Code-LLM_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/codefuse-ai/Awesome-Code-LLM",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "8. **Phi-1.5**: \"Textbooks Are All You Need II: phi-1.5 technical report\" [2023-09] [[paper](https://arxiv.org/abs/2309.05463)] [[model](https://huggingface.co/microsoft/phi-1_5)] \n29. **Tele-FLM**: \"Tele-FLM Technical Report\" [2024-04] [[paper](https://arxiv.org/abs/2404.16645)] [[model](https://huggingface.co/CofeAI/Tele-FLM)] \n",
                    "original_header": "2.1 Base LLMs and Pretraining Strategies"
                },
                "confidence": 0.9297344236848963,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "11. **StarCoder** (FIM): \"StarCoder: may the source be with you!\" [2023-05] [[paper](https://arxiv.org/abs/2305.06161)] [[model](https://huggingface.co/bigcode/starcoder)] \n12. **Phi-1** (CLM): \"Textbooks Are All You Need\" [2023-06] [[paper](https://arxiv.org/abs/2306.11644)] [[model](https://huggingface.co/microsoft/phi-1)] \n16. **CodeShell** (CLM+FIM): \"CodeShell Technical Report\" [2024-03] [[paper](https://arxiv.org/abs/2403.15747)] [[repo](https://github.com/WisdomShell/codeshell)] \n17. **CodeQwen1.5** [2024-04] [[blog](https://qwenlm.github.io/blog/codeqwen1.5/)] \n",
                    "original_header": "Decoder"
                },
                "confidence": 0.9333437905088753,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "16. **CodeFort**: \"CodeFort: Robust Training for Code Generation Models\" [2024-04] [[paper](https://arxiv.org/abs/2405.01567)] \n",
                    "original_header": "2.4 (Instruction) Fine-Tuning on Code"
                },
                "confidence": 0.9159546989495443,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "19. **CIBench**: \"CIBench: Evaluating Your LLMs with a Code Interpreter Plugin\" [2024-07] [[paper](https://arxiv.org/abs/2407.10499)] \n21. **AdaCoder**: \"AdaCoder: Adaptive Prompt Compression for Programmatic Visual Question Answering\" [2024-07] [[paper](https://arxiv.org/abs/2407.19410)] \n",
                    "original_header": "3.1 Coding for Reasoning"
                },
                "confidence": 0.9714235869754264,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. **Self-collaboration**: \"Self-collaboration Code Generation via ChatGPT\" [2023-04] [[paper](https://arxiv.org/abs/2304.07590)] \n",
                    "original_header": "3.3 Code Agents"
                },
                "confidence": 0.9954708676122075,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Requirements are All You Need: From Requirements to Code with LLMs\" [2024-06] [[paper](https://arxiv.org/abs/2406.10101)] \n- \"I Need Help! Evaluating LLM's Ability to Ask for Users' Support: A Case Study on Text-to-SQL Generation\" [2024-07] [[paper](https://arxiv.org/abs/2407.14767)] \n",
                    "original_header": "3.4 Interactive Coding"
                },
                "confidence": 0.9850150887029552,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"WebArena: A Realistic Web Environment for Building Autonomous Agents\" [2023-07] [[paper](https://arxiv.org/abs/2307.13854)] \n",
                    "original_header": "3.5 Frontend Navigation"
                },
                "confidence": 0.9597789749268247,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- [**Fortran, Julia, Matlab, R, Rust**] \"Evaluating AI-generated code for C++, Fortran, Go, Java, Julia, Matlab, Python, R, and Rust\" [2024-05] [[paper](https://arxiv.org/abs/2405.13101)] \n",
                    "original_header": "4. Code LLM for Low-Resource, Low-Level, and Domain-Specific Languages"
                },
                "confidence": 0.9994180768496562,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Comments as Natural Logic Pivots: Improve Code Generation via Comment Perspective\" [2024-04] [ACL 2024 Findings] [[paper](https://arxiv.org/abs/2404.07549)] \n- \"Distilling Algorithmic Reasoning from LLMs via Explaining Solution Programs\" [2024-04] [[paper](https://arxiv.org/abs/2404.08148)] \n- \"Selection of Prompt Engineering Techniques for Code Generation through Predicting Code Complexity\" [2024-09] [[paper](https://arxiv.org/abs/2409.16416)]\n \n",
                    "original_header": "Code Generation"
                },
                "confidence": 0.9477154429907465,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Code Structure Guided Transformer for Source Code Summarization\" [2021-04] [ACM TSEM] [[paper](https://arxiv.org/abs/2104.09340)] \n",
                    "original_header": "Code Commenting and Summarization"
                },
                "confidence": 0.931292311393239,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Enhancing Automated Program Repair through Fine-tuning and Prompt Engineering\" [2023-04] [[paper](https://arxiv.org/abs/2304.07840)] \n",
                    "original_header": "Program Repair"
                },
                "confidence": 0.9181013412104441,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Automatic HTML Code Generation from Mock-Up Images Using Machine Learning Techniques\", 2019-04, EBBT 2019, [[paper](https://ieeexplore.ieee.org/abstract/document/8741736)] \n- \"AUITestAgent: Automatic Requirements Oriented GUI Function Testing\" [2024-07] [[paper](https://arxiv.org/abs/2407.09018)] \n- \"Self-Elicitation of Requirements with Automated GUI Prototyping\" [2024-09] [[paper](https://arxiv.org/abs/2409.16388)] \n",
                    "original_header": "Frontend Development"
                },
                "confidence": 0.9626748763765387,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"EPI-SQL: Enhancing Text-to-SQL Translation with Error-Prevention Instructions\" [2024-04] [[paper](https://arxiv.org/abs/2404.14453)] \n- \"RH-SQL: Refined Schema and Hardness Prompt for Text-to-SQL\" [2024-06] [[paper](https://arxiv.org/abs/2406.09133)] \n- \"E-SQL: Direct Schema Linking via Question Enrichment in Text-to-SQL\" [2024-09] [[paper](https://arxiv.org/abs/2409.16751)]\n \n",
                    "original_header": "Text-To-SQL"
                },
                "confidence": 0.9501945224831748,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Generating Test Scenarios from NL Requirements using Retrieval-Augmented LLMs: An Industrial Study\" [2024-04] [[paper](https://arxiv.org/abs/2404.12772)] \n",
                    "original_header": "Test Generation"
                },
                "confidence": 0.9789369090517381,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"ViC: Virtual Compiler Is All You Need For Assembly Code Search\" [2024-08] [[paper](https://arxiv.org/abs/2408.06385)] \n",
                    "original_header": "Compiler Optimization"
                },
                "confidence": 0.9978775842069905,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"LLMs in Web-Development: Evaluating LLM-Generated PHP code unveiling vulnerabilities and limitations\" [2024-04] [[paper](https://arxiv.org/abs/2404.14459)] \n",
                    "original_header": "Security and Vulnerabilities"
                },
                "confidence": 0.9352361975199797,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"Validating LLM-Generated Programs with Metamorphic Prompt Testing\" [2024-06] [[paper](https://arxiv.org/abs/2406.06864)] \n",
                    "original_header": "Correctness"
                },
                "confidence": 0.9167340930719251,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"On Evaluating the Efficiency of Source Code Generated by LLMs\" [2024-04] [[paper](https://arxiv.org/abs/2404.06041)] \n",
                    "original_header": "Efficiency"
                },
                "confidence": 0.9045594948805429,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- \"amplified.dev: a living document that begins to sketch a vision for a future where developers are amplified, not automated\" [2024-05] [[paper](https://amplified.dev)] \n- \"Let the Code LLM Edit Itself When You Edit the Code\" [2024-07] [[paper](https://arxiv.org/abs/2407.03157)] \n- \"Can Developers Prompt? A Controlled Experiment for Code Documentation Generation\" [2024-08] [[paper](https://arxiv.org/abs/2408.00686)] \n",
                    "original_header": "7. User-LLM Interaction"
                },
                "confidence": 0.9389291791542193,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**Campus Recruitment**: https://hrrecommend.antgroup.com/guide.html?code=8uoP5mlus5DqQYbE_EnqcE2FD5JZH21MwvMUIb9mb6X3osXPuBraG54SyM8GLn_7 \n**Experienced Hires**: https://talent.antgroup.com/off-campus-position?positionId=1933830 \n**\u6821\u62db**\uff1ahttps://hrrecommend.antgroup.com/guide.html?code=8uoP5mlus5DqQYbE_EnqcE2FD5JZH21MwvMUIb9mb6X3osXPuBraG54SyM8GLn_7 \n**\u793e\u62db**\uff1ahttps://talent.antgroup.com/off-campus-position?positionId=1933830\n \n",
                    "original_header": "Join US"
                },
                "confidence": 0.9775906990539056,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/codefuse-ai/Awesome-Code-LLM/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-21T06:49:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T12:03:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "423": {
        "filename": "ltlfuzzer_LTL-Fuzzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ltlfuzzer/LTL-Fuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* Install basic dependencies:\n```\n   sudo apt install -y build-essential make cmake ninja-build git binutils-gold binutils-dev curl wget\n```\n\n* Install Boost 1.71:\n```\n   sudo apt install libboost-all-dev libboost-dev\n```\n\n* Install LLVM 11.0.0 with Gold-plugin(can refer to this [building script](./scripts/build-llvm-11.sh). After that, please copy the following libraries into the specified location:\n```\n   sudo cp /usr/lib/llvm-11/lib/libLTO.so /usr/lib/bfd-plugins/\n   sudo cp /usr/lib/llvm-11/lib/LLVMgold.so /usr/lib/bfd-plugins/ \n```\n* Install spot 2.9.7. You could also follow thses [instructions](https://spot.lrde.epita.fr/install.html).\n  \n```\n   wget -q -O - https://www.lrde.epita.fr/repo/debian.gpg | sudo apt-key add -\n   sudo echo 'deb http://www.lrde.epita.fr/repo/debian/ stable/' >> /etc/apt/sources.list\n   sudo apt update\n   sudo apt install -y spot libspot-dev libgtest-dev\n```\n* Install Python3 and related modules:\n\n```\n   sudo install python3 python3-dev python3-pip\n   sudo pip3 install --upgrade pip\n   sudo pip3 install networkx pydot pydotplus\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing dependencies",
                    "parent_header": [
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            },
            {
                "result": {
                    "value": "* Clone LTL-Fuzzer and them compile as follows: \n```\n  cd LTL-Fuzzer \n  mkdir build\n  cd build\n  cmake ../\n  make\n  cd ../AFLGo\n  make \n  cd llvm-mode\n  make\n  cd ../distance_calculator\n  cmake -G Ninja ./\n  cmake --build ./\n```",
                    "type": "Text_excerpt",
                    "original_header": "Installing LTL-Fuzzer",
                    "parent_header": [
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            },
            {
                "result": {
                    "value": "* Specifying the home directory, e.g., at home dir:\n```\n  export LTLFuzzer=~/LTL-Fuzzer/\n```\n* Specifying the subject directory and name under test:\n```\n  export SUBJECT=$LTLFuzzer/experiment/Problem1/\n  export EXECName=Problem1\n```\n* Specifying a LTL property to be checked:\n```\n  export LTL=\"!(! (true U oU) | (! oU U ((oZ & ! oU) & X (! oU U oP))))\"\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparing for Instrumentation",
                    "parent_header": [
                        "Example Usage",
                        "Protocol Example"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ltlfuzzer/LTL-Fuzzer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-22T11:23:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-28T14:06:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 538649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 126224
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 62636
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 17782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13993
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 3476
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2011
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "55": {
        "filename": "dcdelia_sniper_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dcdelia/sniper",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-05-01T12:00:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-29T19:54:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 8887720
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 219819
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 61889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "220": {
        "filename": "ZhongLIFR_Logs2Graph_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ZhongLIFR/Logs2Graph",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Readers can follow these steps to use our code:\n \n",
                    "original_header": "Logs2Graphs"
                },
                "confidence": 0.985961439547236,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ZhongLIFR/Logs2Graph/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. for testing Logs2Graph on HDFS: run GraphGeneration_HDFS.py, and then run main_HDFS.py. \n2. for testing Logs2Graph on Hadoop: run GraphGeneration_Hadoop.py, and then run main_Hadoop.py.\n3. for testing Logs2Graph on Spirit: run GraphGeneration_Spirit.py, and then run main_Spirit.py.\n4. for testing Logs2Graph on BGL: run GraphGeneration_BGL.py, and then run main_BGL.py.\n5. for testing Logs2Graph on Thunderbird: run GraphGeneration_Thunderbird.py, and then run main_Thunderbird.py.\n \n",
                    "original_header": "Step3: Testing"
                },
                "confidence": 0.9999999882591056,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ZhongLIFR/Logs2Graph/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-26T07:24:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T12:12:20Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 229933
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "561": {
        "filename": "RosaliaTufano_code_review_automation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/RosaliaTufano/code_review_automation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[Here](https://zenodo.org/record/5387856#.YTDrPZ4zZyo) we stored the extra materials you need in order to replicate our experiments: \n",
                    "original_header": "Resources"
                },
                "confidence": 0.9285701651614469,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RosaliaTufano/code_review_automation/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We also provided a notebook (`Preprocessing.ipynb`) with all the preprocessing steps we followed to prepare our pre-training dataset and to train on it the Sentencepiece tokenizer.\n \n",
                    "original_header": "Train your own T5 models"
                },
                "confidence": 0.9400662176681974,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/RosaliaTufano/code_review_automation/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-14T09:53:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-10T08:56:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 177440
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130676
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "885": {
        "filename": "vanhoanglepsa_neurallog_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/NeuralLog",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "[//]: # ([PyTorch version]&#40;https://github.com/LogIntelligence/LogADEmpirical&#41;) \n",
                    "original_header": "Framework"
                },
                "confidence": 0.9998686982760133,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vanhoanglepsa/neurallog/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-04-13T18:59:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T15:02:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 23436
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "11": {
        "filename": "Attn-to-FC_Attn-to-FC_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Attn-to-FC/Attn-to-FC",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-08-23T15:31:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-14T15:54:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 200076
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "796": {
        "filename": "microsoft_toga_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/microsoft/toga",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "For an easy setup, we recommend our docker container that includes all data, pretrained models, and source. Otherwise, follow the setup instructions in the next section.\n\nFirst, pull the docker image:\n`docker pull edinella/toga-artifact`\n\nConnect to it:\n`docker run -i -t edinella/toga-artifact`\n\nThen, setup some environment variables:\n`export PATH=$PATH:/home/defects4j/framework/bin`\n`export ATLAS_PATH=/home/icse2022_artifact/data/atlas---deep-learning-assert-statements/`\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker Setup",
                    "parent_header": [
                        "ToGA Artifact"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "Requirements: `python3.9`, `git lfs`\n\nFirst, clone this repo and install the dependencies:\n```\ncd toga/\ngit lfs pull\npip install -r requirements.txt\ngit clone https://gitlab.com/cawatson/atlas---deep-learning-assert-statements.git\nexport ATLAS_PATH=<path_to_atlas...>/atlas---deep-learning-assert-statements/\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "ToGA Artifact"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "Paring and extracting new sets of unit test inputs requires the tree sitter java grammar. See https://github.com/tree-sitter/py-tree-sitter for instructions on building a tree sitter grammar and use 'vendor/tree-sitter-java'.\n\nOnce the grammar is built in a `my-languages.so` file, place it in `/tmp/tree-sitter-repos/my-languages.so`\n\nA prebuilt `my-languages.so` for linux is provided in `lib/tree_sitter`.\n",
                    "type": "Text_excerpt",
                    "original_header": "Tree Sitter setup (optional):",
                    "parent_header": [
                        "ToGA Artifact",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "value": "If you want to build and execute defects4j tests, [defects4j](https://github.com/rjust/defects4j) must be installed.\n\nRequirements:\n```\nsudo apt install libdbi-perl\nsudo apt install openjdk-8-jdk\nsudo apt install libdbd-csv-perl\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Defects4j setup (optional):",
                    "parent_header": [
                        "ToGA Artifact",
                        "Setup"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Otherwise, to install our exception and assertion pretrained models, download from: https://drive.google.com/drive/folders/1dZDxu92rZzB_LEwnAkkiy3DblxMJ6nUT?usp=sharing\nPut them in `model/exceptions/pretrained/pytorch_model.bin` and `model/assertions/pretrained/pytorch_model.bin` respectively. The models can also be downloaded from the artifact on zenodo: https://zenodo.org/record/6210589 \nTo train your own model, run\n```\ncd model/exceptions/\nbash run_train.sh\n\ncd model/assertions/\nbash run_train.sh\n```\n \n",
                    "original_header": "Models"
                },
                "confidence": 0.9708999433733898,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To access the evosuite test datasets run:\n```\ncd data\ntar xzf evosuite_reaching_tests.tar.gz\ntar xzf evosuite_5project_tests.tar.gz\ntar xzf evosuite_tests.tar.gz\n```\n \n",
                    "original_header": "Datasets - Preprocessed"
                },
                "confidence": 0.9999999993573567,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The following commands assume you are in the root of this directory. \nTo reproduce the weighted coin experiment in table 1, run:\n```\ncd eval/rq2/exception_inference\npython coin.py\n``` \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9677517644588087,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow [Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general). Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.\n \n",
                    "original_header": "Trademarks"
                },
                "confidence": 0.9988852287322683,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/microsoft/toga/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-20T20:22:47Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T12:03:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 329601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4309
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "386": {
        "filename": "EngineeringSoftware_CoditT5_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EngineeringSoftware/CoditT5",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Requires the pretrain dataset at `data/CoditT5/pretrain/`\n```\ncd python/\n./run.sh pretrain_CoditT5\n```\n \n",
                    "original_header": "Pretrain CoditT5"
                },
                "confidence": 0.995645850558155,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide the sample script to process the downstream datasets for CoditT5. Requires the raw data files at `raw_data/`.\n```\ncd python/\n./run.sh process_coditT5_dataset --dataset ${dataset}\n\n# Example: ./run.sh process_coditT5_dataset --dataset comment-update\n```\n \n",
                    "original_header": "Code for Processing Fine-tuning Data"
                },
                "confidence": 0.9999946804638516,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\ncd python/\n# Rerank CodeT5's outputs with CoditT5\n./run.sh CodeT5_rerank ${dataset}\n# Rerank CoditT5's outputs with CodeT5\n./run.sh CodeT5_rerank ${dataset}\n\n# Example: ./run.sh CoditT5_rerank comment-update\n``` \n",
                    "original_header": "Rerank Models' outputs"
                },
                "confidence": 0.9999892885860772,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/EngineeringSoftware/CoditT5/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-22T17:02:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-23T15:14:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 370046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 10216
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "163": {
        "filename": "hpcclab_OaaS_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hpcclab/OaaS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "// Need some preamble to get TOC:\n{empty} \nimage:https://github.com/hpcclab/OaaS/actions/workflows/platform-container-build.yml/badge.svg?branch=main[link=\"https://github.com/hpcclab/OaaS/actions/workflows/platform-container-build.yml\"]\nimage:https://jitpack.io/v/hpcclab/OaaS.svg[link=\"https://jitpack.io/#hpcclab/OaaS\"] \n* https://github.com/hpcclab/OaaS-Tutorial[tutorial the cover from the basic to deployment]\n* link:cli/README.adoc[ocli installation and usage guide]\n* link:doc/FUNCTION_GUIDE.adoc[function development]\n* link:doc/PACKAGE_REFERENCE.adoc[package definition guide] \n// == Demo\n//\n// * Demo\n// +\n// image::https://asciinema.org/a/zdLjJ77dNEKvEKrghHQzyFahx.svg[link=https://asciinema.org/a/zdLjJ77dNEKvEKrghHQzyFahx] \n"
                },
                "confidence": 0.9728735773503631,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hpcclab/OaaS/main/README.adoc"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-01T19:57:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-13T20:17:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 825421
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 18959
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Just",
                    "name": "Just",
                    "type": "Programming_language",
                    "size": 6391
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "1161": {
        "filename": "dynaroars_neuralsat_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dynaroars/neuralsat",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```bash\nsudo apt-get install libbz2-dev\nsudo apt-get install lzma\nsudo apt-get install liblzma-dev\n```\n\n```bash\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu121\n```\n\n```bash\npip install -r reqs.txt \n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/neuralsat-pt201/installation/installation.md"
            },
            {
                "result": {
                    "value": "# NeuralSAT Installation and Usage\n\n> While NeuralSAT can be installed and run on any platforms satisfying its [dependencies](#installation), we mainly develop and test NeuralSAT on Linux.\n\n\n## Content\n\n- ```neuralsat-pt201```: source code\n- ```third_party```: external libraries\n- ```vnncomp_scripts```: scripts for competition\n\n\n## Installation\n\n- [Anaconda](https://www.anaconda.com/) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html)\n- [Gurobi](https://www.gurobi.com/): Gurobi requires a license (a [free academic license](https://www.gurobi.com/downloads/free-academic-license/) is available).\n\n- Remove pre-installed environment \n\n```bash\nconda deactivate; conda env remove --name neuralsat\n```\n\n- Install required packages \n\n```bash\nconda env create -f env.yaml\n```\n\n- Activate `conda` environment\n\n```bash\nconda activate neuralsat\n```\n\n- (Optional) Install specific Pytorch C++/CUDA extensions\n\n```bash\npip install \"third_party/haioc\"\n```\n\n- (Optional) Install `DNNV` for ONNX simplification\n\n```bash\nconda deactivate; conda env remove --name dnnv\nconda env create -f neuralsat-pt201/installation/env_dnnv.yaml\nconda activate dnnv\npip install --no-deps git+https://github.com/dlshriver/DNNV.git@d4f59a01810cf4dac99f8f5e5b9d7a350cbfa8d7#egg=dnnv\n```\n\n## \ud83d\ude80 Usage\n\n```python\nmain.py [-h] --net NET --spec SPEC \n        [--batch BATCH] [--timeout TIMEOUT] [--device {cpu,cuda}] [--verbosity {0,1,2}] \n        [--result_file RESULT_FILE] [--export_cex] \n        [--disable_restart] [--disable_stabilize] \n```\n\n### Options\nUse ```-h``` or ```--help``` to see options that can be passed into **NeuralSAT**. \n\n- `--net`: Path to `ONNX` model.\n- `--spec`: Path to `VNNLIB` specification file.\n- `--batch`: Maximum number of parallel checking branches.\n- `--timeout`: Timeout (in second) for verifying one instance.\n- `--device`: Device to use (either `cpu` or `cuda`).\n- `--verbosity`: Logging options (0: NOTSET, 1: INFO, 2: DEBUG).\n- `--result_file`: File to export execution results (including counter-example if found).\n- `--export_cex`: Enable writing counter-example to `result_file`.\n- `--disable_restart`: disable RESTART heuristic.\n- `--disable_stabilize`: disable STABILIZE.\n\n\n### Examples\n\n- Examples showing **NeuralSAT** verifies properties (i.e., returning `unsat``):\n\n```python\npython3 main.py --net \"example/onnx/mnistfc-medium-net-554.onnx\" --spec \"example/vnnlib/test.vnnlib\"\n# unsat,24.9284\n```\n\n```python\npython3 main.py --net \"example/onnx/cifar10_2_255_simplified.onnx\" --spec \"example/vnnlib/cifar10_spec_idx_4_eps_0.00784_n1.vnnlib\"\n# unsat,17.9806\n```\n\n```python\npython3 main.py --net \"example/onnx/ACASXU_run2a_1_1_batch_2000.onnx\" --spec \"example/vnnlib/prop_6.vnnlib\" --disable_restart\n# unsat,3.0907\n```\n\n```python\npython3 main.py --net \"example/onnx/mnist-net_256x4.onnx\" --spec \"example/vnnlib/prop_1_0.03.vnnlib\"\n# unsat,139.4125\n```\n\n- Examples showing **NeuralSAT** disproves properties (i.e., returning `sat` and counterexample):\n\n```python\npython3 main.py --net \"example/onnx/mnist-net_256x2.onnx\" --spec \"example/vnnlib/prop_1_0.05.vnnlib\"\n# sat,0.7526\n```\n\n```python\npython3 main.py --net \"example/onnx/ACASXU_run2a_1_9_batch_2000.onnx\" --spec \"example/vnnlib/prop_7.vnnlib\" --disable_restart\n# sat,6.1320\n```\n\n\n\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/doc/INSTALL.md"
            },
            {
                "result": {
                    "value": "- see [INSTALL.md](./doc/INSTALL.md)\n",
                    "type": "Text_excerpt",
                    "original_header": "INSTALLATION &amp; USAGE",
                    "parent_header": [
                        "NeuralSAT: A DPLL(T) Framework for Verifying Deep Neural Networks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dynaroars/neuralsat/develop/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-11T20:10:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T05:03:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1183113
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 5764
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 1234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 981
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "842": {
        "filename": "soarsmu_AutoPruner_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/soarsmu/AutoPruner",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- More than 200GB disk space\n- 2 NVIDIA GPU that CUDA 11.3; supports and have at least 8GB memory.",
                    "type": "Text_excerpt",
                    "original_header": "Hardware",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Requirements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "- Ubuntu 18.04 or newer\n- Docker/Conda\n ",
                    "type": "Text_excerpt",
                    "original_header": "Software",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Requirements"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "```\nconda env create -n autopruner --file environment.yml\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Conda",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Environment Configuration"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "value": "For ease of use, we also provide a \ninstallation package via a [docker image](https://hub.docker.com/r/thanhlecong/autopruner). User can setup AutoPruner's docker step-by-step as follows:\n\n- Pull AutoPruner's docker image: \n```\ndocker pull thanhlecong/autopruner:v2\n```\n- Run a docker container:\n```\ndocker run --name autopruner -it --shm-size 16G --gpus all thanhlecong/autopruner:v2\n```\n- Activate conda:\n```\nsource /opt/conda/bin/activate\n```\n- Activate AutoPruner's conda enviroment: \n```\nconda activate autopruner\n```\nNote that, the source code of AutoPruner are stored at /workspace/ in Docker. So, please move to this folder before running experiments. \n\n",
                    "type": "Text_excerpt",
                    "original_header": "Docker",
                    "parent_header": [
                        "\u2699\ufe0fAutoPruner\u2702\ufe0f",
                        "\ud83d\udd27 Installations",
                        "Environment Configuration"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*by Thanh Le-Cong, Hong Jin Kang, Truong Giang Nguyen, Stefanus Agus Haryono, David Lo, Xuan-Bach D. Le, Quyet Thang Huynh*\n<p align=\"center\">\n    <a href=\"https://dl.acm.org/doi/abs/10.1145/3540250.3549175\"><img src=\"https://img.shields.io/badge/Conference-ESEC/FSE 2023-green?style=for-the-badge\">\n    <a href=\"https://arxiv.org/abs/2209.03230\"><img src=\"https://img.shields.io/badge/arXiv-2209.03230-b31b1b.svg?style=for-the-badge\">\n    <br>\n    <a href=\"https://zenodo.org/records/6369874\"><img src=\"https://img.shields.io/badge/Replication-10.5281%2Fzenodo.6369874-blue?style=for-the-badge\">\n    <a href=\"https://hub.docker.com/r/thanhlecong/autopruner\"><img src=\"https://img.shields.io/badge/docker-thanhlecong%2Fautopruner-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p> \n",
                    "original_header": "\u2699\ufe0fAutoPruner\u2702\ufe0f"
                },
                "confidence": 0.9999953211433628,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To replicate the ablation study of AutoPruner with strutural features, please use\n```\nbash script/rq3_structure.sh\n```\nTo replicate the ablation study of AutoPruner with semantic features, please use\n```\nbash script/rq3_semantic.sh\n```\nTo replicate the ablation study of AutoPruner with caller function, please use\n```\nbash script/rq3_caller.sh\n```\nTo replicate the ablation study of AutoPruner with callee function, please use\n```\nbash script/rq3_callee.sh\n```\n \n",
                    "original_header": "RQ3"
                },
                "confidence": 0.9854276910742108,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/soarsmu/AutoPruner/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-09T01:29:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-02T03:02:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 57088
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager",
            "Container"
        ]
    },
    "321": {
        "filename": "tdurieux_Travis-Listener_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/tdurieux/Travis-Listener",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Build Saver Plugin listens to the Travis Crawler Service and saves all information to the database.\nWe save the following information: TravisCI's job, TravisCI's build, commit information (not including the diff), repository information, and user information.\nThe goal of this plugin is to track all changes, and provide statistics on who is using TravisCI.\n \n",
                    "original_header": "<a href=\"plugins/buildsaver\">Build Saver Plugin</a>"
                },
                "confidence": 0.924497475480737,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/Travis-Listener/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The Restarted Build Plugin collects the information relevant to the present study.  \nIts goal is to detect restarted builds on TravisCI.\nWhen a build is restarted by a developer, all the original information is overwritten.  Tracking restarted builds thus requires live collection of build data (in our case, using the Build Saver Plugin).\nTo detect restarted builds, the Restarted Build Plugin crawls periodically (once a day) the collected builds from the 30 previous days, comparing the build start timestamp provided by the TravisCI' API to the start time saved by the Build Saver Plugin. \nIf the two times differ, the build was restarted.\nFor each restarted build, we collect the new TravisCI job information and execution logs.\n \n",
                    "original_header": "<a href=\"plugins/restartedbuilds\">Restarted Build Plugin</a>"
                },
                "confidence": 0.9999490316396893,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/tdurieux/Travis-Listener/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-10-08T03:59:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-16T20:15:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 180948
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 29116
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 7783
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1390
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "808": {
        "filename": "PrivacyEngineering_hawk-benchmark_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/PrivacyEngineering/hawk-benchmark",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "version: 1.18-alpha \n",
                    "original_header": "Istio"
                },
                "confidence": 0.9017794791476891,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/PrivacyEngineering/hawk-benchmark/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-03-02T15:46:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-02T19:15:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 492662
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 2934
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 189
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "224": {
        "filename": "hongliangliang_leofuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HongliangLiang/leofuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-06-15T07:51:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-27T11:46:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 76017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 27327
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15955
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 8982
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rich Text Format",
                    "name": "Rich Text Format",
                    "type": "Programming_language",
                    "size": 21
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "995": {
        "filename": "facebookresearch_mbr-exec_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/facebookresearch/mbr-exec",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. Download the [MBPP](https://github.com/google-research/google-research/tree/master/mbpp), [Spider](https://yale-lily.github.io/spider), and [NL2Bash](https://github.com/TellinaTool/nl2bash) datasets to `data/` and follow their instructions for necessary preprocessing steps. \n2. Download our [collected Codex data](https://dl.fbaipublicfiles.com/mbr-exec/mbr-exec-release.zip). We have included the pre-executed result with the data; see also `execution.py` if you'd like to execute automatically collected code locally. \n3. Install the `conda` environment by \n```bash\nconda env create -f env.yml\n```\n--- ",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "Natural Language to Code Translation with Execution"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/facebookresearch/mbr-exec/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-19T21:46:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-10T05:35:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 99575
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Package Manager"
        ]
    },
    "636": {
        "filename": "coinse_fonte_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/coinse/fonte",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n1. Install Python 3.9 on your machine\n    - If using `pyenv`, use these commands:\n\n      ```\n      pyenv install 3.9.1\n      pyenv local 3.9.1\n      ```\n2. Install the required Python packages:\n    ```\n    python -m pip install numpy==1.21.0 pandas==1.4.3 scipy==1.9.0 tqdm matplotlib==3.4.0 seaborn==0.11.1 rank-bm25==0.2.2 tabulate==0.8.9 jupyter setuptools\n    python -m pip install lib/SBFL\n    python -m pip install lib/spiral\n    ```\n\n3. Verify the installation by running Fonte using the following sample command:\n    ```bash\n    python Fonte.py data/Defects4J/core/Cli-29b -o output.csv\n    # Number of total commits: 616\n    #          vote  rank  is_style_change\n    # commit\n    # c0d5c79   1.0   1.0            False\n    # 147df44   0.0   2.0             True\n    ```\n---\n**Note: The following steps are only needed for future extension**\n\n4. Download the [Docker client](https://www.docker.com/products/docker-desktop/) and start the Docker daemon\n\n5. Verify the Docker installation by running these command:\n    ```bash\n    docker pull agb94/fonte:latest\n    ```\n    Please note that due to the large size of the image, the download process may take some time.\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/INSTALL.md"
            },
            {
                "result": {
                    "value": "- Hardware\n  - Developed under Mac with Intel chip\n  - Compatible with AMD64 processors\n- Software\n  - Tested with bash (recommended), zsh, PowerShell\n  - Python 3.9+\n    - If using `pyenv`, use these commands:\n      ```bash\n      pyenv install 3.9.1\n      pyenv local 3.9.1\n      ```\n    - **Install dependencies**:\n        ```bash\n        pip install --upgrade pip\n        python -m pip install numpy pandas scipy tqdm matplotlib seaborn rank-bm25 tabulate jupyter setuptools\n        python -m pip install lib/SBFL\n        # Alternative: python -m pip install git+https://github.com/Suresoft-GLaDOS/SBFL \n        python -m pip install lib/spiral\n        # Alternative: python -m pip install git+https://github.com/casics/spiral\n        ```\n  - [Docker client](https://www.docker.com/products/docker-desktop) (only for the future extension)\n",
                    "type": "Text_excerpt",
                    "original_header": "**A. Environmental Setup**",
                    "parent_header": [
                        "**Fonte: Finding Bug Inducing Commit From Failure (ICSE'23)**"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "![Fonte_Logo](./fonte.png)\n```\ngit clone git@github.com:coinse/fonte.git\n```\n \n|File|Description|\n|------------------------------------|----------------|\n|\ud83d\udcc4 [PREPRINT](./preprint.pdf) | Preprint of the paper |\n|\ud83d\udda5 [REQUIREMENTS](./REQUIREMENTS.md)| HW/OS/SW requirements |\n|\ud83d\udd28 [INSTALL](./INSTALL.md)| Installation guide |\n|\ud83e\udeaa [LICENSE](LICENSE)|MIT license|  \n- Instructions for setting up the environment, including required hardware and software (Python and Docker) and information on how to install dependencies\n- Instructions for running Fonte, including an example command and a list of available arguments\n- Instructions for reproducing the experiment results, including information on using a Jupyter notebook\n- Optional instructions for extracting the core data for other Defects4J faults using a pre-built Docker image\n- Information on the structure of the data directory and the location of the core data and BIC dataset\n \n",
                    "original_header": "**Fonte: Finding Bug Inducing Commit From Failure (ICSE'23)**"
                },
                "confidence": 0.9950483738608407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Run the Jupyter notebook\n    ```bash\n    jupyter notebook\n    ```\n    If you're a VSCode user, just install the `Jupyter` extension.\n2. Open `experiment.ipynb` and run the cells to reproduce our experiment results.\n    - The output will be saved to `./experiment_results/`. Note that the directory already contains the pre-computed results. If you want to fully replicate our experiments, remove all files from the `./experiment_results/` and run the cells again.\n \n",
                    "original_header": "**C. Reproducing the experiment results**"
                },
                "confidence": 0.9999999943003104,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Pull the image from DockerHub. This may take a while because the image size is about 4GB.\n    ```bash\n    docker pull agb94/fonte:latest\n    ```\n2. Start a Docker container\n    BASH2*\n    - The directory `./docker/workspace` in the local machine will share data with `/root/workspace` in the container.\n    - `$(pwd)`: The current directory. Change it to `${PWD}` or `%cd%` if you're using PowerShell or Windows Command Prompt, respectively.\n3. Collect the coverage information and the commit history of `<pid>-<vid>b`\n    BASH3*\n    - The output will be saved to `./docker/workspace/data/<pid>-<vid>b/`\n    - Don't forget to append the tool option (`git` or `shovel`)!\n4. Run Fonte on the newly collected data:\n    BASH4*\n    \ud83d\udca1 To **speed up** the AST comparison, you can disable code formatting using OpenRewrite by appending `false` when calling the `collect_core.sh` script:\n    \n    BASH5*\n \n",
                    "original_header": "**D. Extension for other Defects4J faults** (Optional)"
                },
                "confidence": 0.9999993691326097,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/coinse/fonte/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-16T01:53:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-09T13:36:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Package Manager",
            "Source",
            "Container"
        ]
    },
    "714": {
        "filename": "P403n1x87_flamegraph-experiment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/P403n1x87/flamegraph-experiment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-12-11T15:38:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-25T19:33:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 10211
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "898": {
        "filename": "jungyhuk_latent-execution_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Jungyhuk/latent-execution",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-11-23T03:50:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-09T05:56:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 39241
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "850": {
        "filename": "xdevroey_jhipster-dataset_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/xdevroey/jhipster-dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2017-10-11T13:45:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-06-10T00:06:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 9425
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 3294
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "380": {
        "filename": "iitpvisionlab_heterogeneous-ai-system-simulator_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/iitpvisionlab/heterogeneous-ai-system-simulator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-02-10T11:30:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-18T09:18:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 19794
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "435": {
        "filename": "DIVERSIFY-project_sosiefier_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/DIVERSIFY-project/sosiefier",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2014-01-27T16:00:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-10-18T05:45:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 37173315
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 304868
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 144147
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 60506
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Smalltalk",
                    "name": "Smalltalk",
                    "type": "Programming_language",
                    "size": 15020
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 12104
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2317
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "813": {
        "filename": "castor-software_depclean_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/depclean",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Prerequisites:\n\n- [Java OpenJDK 11](https://openjdk.java.net) or above\n- [Apache Maven](https://maven.apache.org/)\n\nIn a terminal clone the repository and switch to the cloned folder:\n\n```bash\ngit clone https://github.com/castor-software/depclean.git\ncd depclean\n```\nThen run the following Maven command to build the application and install the plugin locally:\n\n```bash\nmvn clean install\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing and building from source",
                    "parent_header": [
                        "DepClean <img src=\"https://github.com/castor-software/depclean/blob/master/.img/logo.svg\" align=\"left\" height=\"135px\" alt=\"DepClean logo\"/>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "DepClean automatically cleans the dependency tree of Java projects.\nIt removes all the dependencies that are included in the project's dependency tree but are not actually necessary to build it. \nDepClean detects and removes all the unused dependencies declared in the `pom.xml` file of a project or imported from its parent. \nIt can be executed as a Maven goal through the command line or integrated directly into the Maven build lifecycle (CI/CD).\nDepClean does not modify the original source code of the application nor its original `pom.xml`. It has been presented in [\"A Comprehensive Study of Bloated Dependencies in the Maven Ecosystem](http://arxiv.org/pdf/2001.07808\") ([doi:10.1007/s10664-020-09914-8](https://doi.org/10.1007/s10664-020-09914-8)). \n",
                    "original_header": "What is DepClean?"
                },
                "confidence": 0.9982547867649543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nYou can integrate DepClean in your CI/CD pipeline.\nFor example, if you want to fail the build in the presence of unused direct dependencies, while ignoring all the dependency scopes except the\n`compile`, use the following plugin configuration.\n```xml\n<plugin>\n  <groupId>se.kth.castor</groupId>\n  <artifactId>depclean-maven-plugin</artifactId>\n  <version>2.0.6</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>depclean</goal>\n      </goals>\n      <configuration>\n        <failIfUnusedDirect>true</failIfUnusedDirect>\n        <ignoreScopes>provided,test,runtime,system,import</ignoreScopes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\nOf course, it is also possible to execute DepClean with parameters directly from the command line. The previous example can be executed directly as follows:\n```bash\nmvn se.kth.castor:depclean-maven-plugin:2.0.6:depclean -DfailIfUnusedDirect=true -DignoreScopes=provided,test,runtime,system,import\n```\n \n",
                    "original_header": "Optional Parameters"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. add all used transitive dependencies as direct dependencies\n2. remove all unused direct dependencies\n3. exclude all unused transitive dependencies \n",
                    "original_header": "How does DepClean works?"
                },
                "confidence": 0.9978747960215314,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\"https://github.com/castor-software/depclean/blob/master/.img/wasp.svg\" height=\"50px\" alt=\"Wallenberg Autonomous Systems and Software Program (WASP)\"/>\n \n",
                    "original_header": "Funding"
                },
                "confidence": 0.9934639464983258,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/depclean/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-29T10:19:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T12:39:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302263
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Groovy",
                    "name": "Groovy",
                    "type": "Programming_language",
                    "size": 6551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1107": {
        "filename": "bommarito-consulting_pypi-research-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/licensio/pypi-research-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-07-22T14:02:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-16T17:49:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 74232
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1221": {
        "filename": "spirals-team_repairnator_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/eclipse/repairnator",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "See <https://github.com/eclipse/repairnator/blob/master/doc/media.md>.\n \n",
                    "original_header": "Media coverage"
                },
                "confidence": 0.9998940345201542,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/repairnator/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "* Maven releases: https://search.maven.org/search?q=repairnator\n* DockerHub releases: https://hub.docker.com/r/repairnator/\n \n",
                    "original_header": "Releases"
                },
                "confidence": 0.9999942751464507,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/spirals-team/repairnator/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2016-12-21T16:12:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-05T11:23:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1570691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 92919
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 42273
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 33046
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Sass",
                    "name": "Sass",
                    "type": "Programming_language",
                    "size": 18269
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 12803
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5042
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SCSS",
                    "name": "SCSS",
                    "type": "Programming_language",
                    "size": 1538
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Container"
        ]
    },
    "195": {
        "filename": "joymallyac_FairSSL_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/joymallyac/FairSSL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "*Self-Training*\n```cd Self-Training```\n \n*LabelSpreading*\n```cd LabelSpreading```\n \n*LabelPropagation*\n```cd LabelPropagation```\n \n",
                    "original_header": "For RQ1, \\&amp; RQ2"
                },
                "confidence": 0.922772052641253,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/joymallyac/FairSSL/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```cd Initial-Set-Variation```\n```python Initial_Set_Variation.py```\n \n",
                    "original_header": "For RQ3"
                },
                "confidence": 0.9882889194756411,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/joymallyac/FairSSL/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-02-27T18:29:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-02-27T18:33:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 315537
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 256452
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "892": {
        "filename": "kargaranamir_girt-data_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/kargaranamir/girt-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-01-26T12:38:21Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T15:37:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8632
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "119": {
        "filename": "chijianlei_SeqTrans_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chijianlei/SeqTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-12-30T13:48:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T07:25:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1452499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1147136
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 89633
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "18": {
        "filename": "uds-se_FormatFuzzer_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uds-se/FormatFuzzer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\nsudo apt install git g++ make automake python3-pip zlib1g-dev libboost1.71-dev\npip3 install py010parser six intervaltree\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Requirements on Linux (Debian Packages)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "```\nxcode-select --install\nbrew install python3 automake boost\npip3 install py010parser six intervaltree\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Requirements on MacOS (with Xcode &amp; Homebrew)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "On all systems, using `pip`:\n```\npip install py010parser\npip install six\npip install intervaltree\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing Python Packages Only (All Operating Systems)",
                    "parent_header": [
                        "FormatFuzzer",
                        "Prerequisites"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "If the above `make` method does not work, or if you want more control, you may have to proceed manually.\n",
                    "type": "Text_excerpt",
                    "original_header": "Method 3: Manual steps",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "Run the `ffcompile` compiler to compile the binary template into C++ code. It takes two arguments: the `.bt` binary template, and a `.cpp` C++ file to be generated.\n```\n./ffcompile templates/gif.bt gif.cpp\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Compiling Binary Template Files into C++ code",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building",
                        "Method 3: Manual steps"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "value": "Use the following commands to create a fuzzer `gif-fuzzer`.\nFirst, compile the generic command-line driver:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall fuzzer.cpp\n```\n(`-I .` denotes the location of the `bt.h` file; `-std=c++17` sets the C++ standard.)\n\nThen, compile the binary parser/compiler:\n\n```\ng++ -c -I . -std=c++17 -g -O3 -Wall gif.cpp\n```\n\nFinally, link the binary parser/compiler with the command-line driver to obtain an executable. If you use any extra libraries (such as `-lz`), be sure to specify these here too.\n```\ng++ -O3 gif.o fuzzer.o -o gif-fuzzer -lz\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: Compiling the C++ code",
                    "parent_header": [
                        "FormatFuzzer",
                        "Building",
                        "Method 3: Manual steps"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Note: all building commands require you to be in the same folder as this `README` file. Building a fuzzer outside of this folder is not yet supported.\n \n",
                    "original_header": "Building"
                },
                "confidence": 0.996621661612245,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "There's a `build.sh` script which automates all construction steps.\nSimply run\n```\n./build.sh gif\n```\nto create a GIF fuzzer. \nThis works for all file formats provided in `templates/`; if there is a file `templates/FOO.bt`, then `./build.sh FOO` will build a fuzzer. \n",
                    "original_header": "Method 1: Using the build.sh script"
                },
                "confidence": 0.9940856493583853,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "There's a `Makefile` (source in `Makefile.am`) which automates all construction steps.\n(Requires `GNU make`.)\nFirst do\n```\ntouch configure Makefile.in\n```\nthen\nBASH2*\nand then\nBASH3*\nto create a GIF fuzzer. \n",
                    "original_header": "Method 2: Using Make"
                },
                "confidence": 0.9808698679011718,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In addition to the format-specific fuzzers, such as `gif-fuzzer`, FormatFuzzer can also be compiled into format-specific shared libraries, such as `gif.so` (for that, simply run `./build.sh gif` or `make gif.so`).\nThose shared libraries can be loaded by general-purpose fuzzers, such as [AFL++](https://github.com/AFLplusplus/AFLplusplus). \nTo run AFL++ with FormatFuzzer, just follow the instructions on [our modified version of AFL++](https://github.com/uds-se/AFLplusplus).\nWe support different fuzzing strategies, including: \n",
                    "original_header": "AFL++ Integration"
                },
                "confidence": 0.9692254062438235,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you have created a `gif-fuzzer`, either by running `make gif-fuzzer` or by using the `ffcompile` tool, you have already obtained a C++ file `gif.cpp` which contains an implementation of the GIF generator and parser. This is useful to see how the changes you make to the binary template are translated into executable code. More details on the C++ code are presented on the next section. \n",
                    "original_header": "Creating and Customizing Binary Templates"
                },
                "confidence": 0.999702534310247,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uds-se/FormatFuzzer/master/README"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-07T15:45:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-15T12:35:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 537659
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 288788
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 47796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 26782
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "M4",
                    "name": "M4",
                    "type": "Programming_language",
                    "size": 21282
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "896": {
        "filename": "yangyixiaof_codecompletionmodels_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yangyixiaof/CodeCompletionModels",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-10-21T09:00:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T09:01:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "1083": {
        "filename": "troublor_erebus-redgiant_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Troublor/erebus-redgiant",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- 2023 TSE Publication: https://ieeexplore.ieee.org/document/10108045\n- Arxiv version can be found at: https://arxiv.org/abs/2212.12110 \n",
                    "original_header": "Combatting Front-Running in Smart Contracts: Attack Mining, Benchmark Construction and Vulnerability Detector Evaluation"
                },
                "confidence": 0.9753895181628102,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/troublor/erebus-redgiant/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-28T06:57:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-12T02:56:29Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Go",
                    "name": "Go",
                    "type": "Programming_language",
                    "size": 444031
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Solidity",
                    "name": "Solidity",
                    "type": "Programming_language",
                    "size": 1785
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Yul",
                    "name": "Yul",
                    "type": "Programming_language",
                    "size": 376
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1003": {
        "filename": "spirals-team_runtime-repair-experiments_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Spirals-Team/failure-oblivious-experiments",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-02-16T13:20:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-02-28T12:00:08Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 34953
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "323": {
        "filename": "MalihehIzadi_nlp4se_eval_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/MalihehIzadi/nlp4se_eval",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-29T09:38:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-04-01T06:28:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "413": {
        "filename": "HadiJahanshahi_WaybackMachine_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HadiJahanshahi/WaybackMachine",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-10-26T16:04:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-03-15T02:43:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 164540
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1098": {
        "filename": "castor-software_pankti_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/pankti",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd /path/to/pankti/pankti-extract/`\n3. `mvn clean install`\n4. `java -jar target/pankti-extract-<version>-jar-with-dependencies.jar /path/to/maven/project`\n  - Available flags: `-h` (`--help`) for usage, `-v` (`--void`) to include methods that return void\n5. The output is a CSV file at `/path/to/pankti/pankti-extract/` called _extracted-methods-\\<project-name\\>.csv_.\n6. Generate Descartes report(s) to find pseudo-tested methods in the project (we use the `method.json` files)\n  - [pitest-descartes on GitHub](https://github.com/STAMP-project/pitest-descartes)\n  - [pitest-descartes for multi-module projects](https://github.com/STAMP-project/pitmp-maven-plugin)\n7. `python find-pseudo-tested.py /path/to/method/list/from/step5.csv /space/separated/paths/to/descartes/method.json` outputs a CSV with the list of methods that are candidates for instrumentation.\n___\n \n",
                    "original_header": "Extract (pankti-extract)"
                },
                "confidence": 0.9999613362449221,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-instrument**,\n1. `cd /path/to/pankti/pankti-instrument/`\n2. `python instrument.py <path/to/instrumentation/candidates/from/previous/phase>.csv`\n3. New aspect classes for these methods are generated in `se.kth.castor.pankti.instrument.plugins`. These aspect classes are also included in `./src/main/resources/META-INF/glowroot.plugin.json`\n4. `mvn clean install`\n5. Drop `<pankti-instrument-<version>-jar-with-dependencies.jar` to `/path/to/glowroot/plugins/` \n___\n \n",
                    "original_header": "Instrument (pankti-instrument)"
                },
                "confidence": 0.9999999999772058,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To run **pankti-generate**,\n1. `cd /path/to/pankti/pankti-generate/`\n2. `mvn clean install`\n3. `java -jar target/pankti-generate-<version>-jar-with-dependencies.jar /path/to/project /path/to/invoked/methods.csv /path/to/directory/with/objects/` \n<p align=\"center\">\n  <img src=\"https://github.com/castor-software/pankti/blob/master/pankti-workflow.jpg\">\n</p>\n \n",
                    "original_header": "Generate (pankti-generate)"
                },
                "confidence": 0.9982887693440337,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Clone this repository\n2. `cd pankti/`\n3. `mvn clean install`\n--- \n",
                    "original_header": "Building"
                },
                "confidence": 0.9999962576155678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/castor-software/pankti/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-20T10:41:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-03T18:21:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1469306
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 45033
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 22541
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2303
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 1525
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "862": {
        "filename": "yueyueL_DL-based-Android-Malware-Defenses-review_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yueyueL/DL-based-Android-Malware-Defenses-review",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "**You are welcome to update our review list!!**\n* fork this repository, add it and merge back;\n* or email us.\n  \nIf you see a project or link here that is no longer maintained or is not a good fit, please submit a pull request to improve this document. Thank you! \n",
                    "original_header": " Systematic review process and paper lists "
                },
                "confidence": 0.9899063809561248,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yueyueL/DL-based-Android-Malware-Defenses-review/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-12-08T13:01:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T08:48:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "904": {
        "filename": "fsoft-ai4code_codesync-tool_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/FSoft-AI4Code/DocChecker",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "1. (Optional) Creating conda environment\n\n```bash\nconda create -n docchecker python=3.8\nconda activate docchecker\n```\n\n2. Install from [PyPI](https://pypi.org/project/docchecker/):\n```bash\npip install docchecker\n```\n    \n3. Alternatively, build DocChecker from source:\n\n```bash\ngit clone https://github.com/FSoft-AI4Code/DocChecker.git\ncd DocChecker\npip install -r requirements.txt .\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation Guide"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fsoft-ai4code/codesync-tool/main/README.md"
            },
            {
                "result": {
                    "value": "Setup environment and install dependencies for pre-training.\n```bash\ncd ./DocChecker\npip -r install requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation for Pre-training",
                    "parent_header": [
                        "Getting Started",
                        "Pre-training Pipeline"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/fsoft-ai4code/codesync-tool/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-05-08T20:39:59Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T23:16:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 116252
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "376": {
        "filename": "maciej-bendkowski_generic-boltzmann-brain_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/maciej-bendkowski/generic-boltzmann-brain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Currently, no pre-compiled binaries are available.\n\n`generic-boltzmann-brain` uses an external [Python](https://www.python.org/) library\ncalled [Paganini](https://github.com/maciej-bendkowski/paganini) to do the construction\nof Boltzmann samplers. `Python` with available `paganini` are expected to be executable\nand present in the `PATH`.\n\nWe recommend using `stack` for compiling `generic-boltzmann-brain` sources.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "Generic Boltzmann Brain <a href=\"https://tldrlegal.com/license/bsd-3-clause-license-(revised)\"><img alt=\"License\" src=\"https://img.shields.io/badge/license-BSD--3-orange.svg\" /></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/maciej-bendkowski/generic-boltzmann-brain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-12T15:42:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-05-10T19:34:10Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 49524
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Nix",
                    "name": "Nix",
                    "type": "Programming_language",
                    "size": 3593
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "745": {
        "filename": "Alex-HaochenLi_RACS_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Alex-HaochenLi/RACS",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```\nconda create -n RACS python=3.6 -y\nconda activate RACS\nconda install pytorch-gpu=1.7.1 -y\npip install transformers==4.18.0 scikit-learn nltk==3.6.1 tensorboardX tqdm more_itertools pytrec_eval elasticsearch tree_sitter\nconda install faiss-cpu -c pytorch\n```\n \n",
                    "original_header": "Environment"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/Alex-HaochenLi/RACS/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-10-17T04:04:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T02:14:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 128117
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "524": {
        "filename": "sakshiudeshi_Aequitas_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sakshiudeshi/Aequitas",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-07-10T12:56:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-15T13:33:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 82860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "488": {
        "filename": "JetBrains-Research_RefactorInsight_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/JetBrains-Research/RefactorInsight",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img src=\".github/readme/refactorinsight_toggle_in_diff.png\" alt=\"Code Diff\" width=\"600\"> \n",
                    "original_header": "Smart diff"
                },
                "confidence": 0.9265403371632743,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To see refactorings in your Git repository, go to the **Git/Log** tab in IntelliJ IDEA and choose `Refactorings` in the drop-down list next to `Show`. \n",
                    "original_header": "Refactorings in commits"
                },
                "confidence": 0.9994117122584781,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To see the refactorings in a specific pull request, go to the **Pull Requests** tab in IntelliJ IDEA, select any pull request and click ![](.github/readme/refactorinsight_toggle.svg). \n",
                    "original_header": "Refactorings in pull requests"
                },
                "confidence": 0.9995345179209059,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available ```Run configurations``` could be found in BASH7*:\n* BASH8* \u2014 builds the plugin;\n* BASH9* \u2014 runs an IDE instance with pre-installed plugin.\n \n",
                    "original_header": "Build instructions"
                },
                "confidence": 0.999594777636543,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You are welcome to submit a bug report or suggest a feature: [open an issue](https://github.com/JetBrains-Research/refactorinsight/issues). \nPull requests are also welcome and encouraged. \n",
                    "original_header": "Contribution and feedback"
                },
                "confidence": 0.99569731296435,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/JetBrains-Research/RefactorInsight/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-06-30T10:05:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T09:50:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 554804
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 31866
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 6654
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Kotlin",
                    "name": "Kotlin",
                    "type": "Programming_language",
                    "size": 1715
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "578": {
        "filename": "zemingd_Mixup4Code_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/zemingd/Mixup4Code",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- pip install torch==1.4.0\n- pip install transformers==2.5.0\n- pip install filelock\n \n",
                    "original_header": "CodeBERT/GraphCodeBERT for Classification Tasks"
                },
                "confidence": 0.9999999999999645,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```shell\ncd CodeBERT\n\npython run.py \\\n    --output_dir=./saved_models \\\n    --tokenizer_name=microsoft/codebert-base \\\n    --model_name_or_path=microsoft/codebert-base \\\n    --do_train \\\n    --num_train_epochs 50 \\\n    --block_size 256 \\\n    --train_batch_size 8 \\\n    --eval_batch_size 16 \\\n    --learning_rate 2e-5 \\\n    --max_grad_norm 1.0 \\\n    --num_labels 250 \\  # Number Classifications\n    --seed 123456  2>&1 | tee train.log\n```\n```shell\ncd GraphCodeBERT\n\npython run.py \\\n    --tokenizer_name=microsoft/graphcodebert-base \\\n    --model_name_or_path=microsoft/graphcodebert-base \\\n    --config_name microsoft/graphcodebert-base \\\n    --do_train \\\n    --num_train_epochs 50 \\\n    --code_length 384 \\\n    --data_flow_length 384 \\\n    --train_batch_size 8 \\\n    --eval_batch_size 16 \\\n    --learning_rate 2e-5 \\\n    --max_grad_norm 1.0 \\\n    --evaluate_during_training \\\n    --num_labels 250 \\  # Number Classifications\n    --seed 123456  2>&1 | tee train.log\n```\n \n",
                    "original_header": "Fine-Tune"
                },
                "confidence": 0.9999999996617248,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Java250: https://developer.ibm.com/exchanges/data/all/project-codenet/\n- Python800: https://developer.ibm.com/exchanges/data/all/project-codenet/\n- Refactory: https://github.com/githubhuyang/refactory\n- CodRep: https://github.com/KTH/CodRep-competition\n \n",
                    "original_header": "Dataset"
                },
                "confidence": 0.9999999922586653,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/zemingd/Mixup4Code/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-09T06:09:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-18T12:51:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 184090
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 430
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "902": {
        "filename": "bthink-bgu_papers-2022-bp-pn_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/bThink-BGU/Papers-2022-BP-PN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-10-10T15:49:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-06-27T15:15:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 360210
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 42502
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 25475
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 22295
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "80": {
        "filename": "amazon-science_recode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/amazon-science/recode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We are using python 3.8, cuda 11.6. Anaconda would be recommended. Please run the following commands for installation.\n```\nconda deactivate; conda env remove --name ReCode\nconda create --name ReCode python=3.8\nconda activate ReCode\n```\n\nInstalling huggingface for model inference\n```\npip install transformers==4.21.1\npip install -U torch==1.11.0+cu113 -f https://download.pytorch.org/whl/torch_stable.html\n```\n\nInstalling humaneval. Need to enable humaneval by uncommenting out execution line `exec(check_program, exec_globals)` in `execution.py`.\n```\ncd evaluate-public-models\ngit clone https://github.com/openai/human-eval\npip install -e human-eval\ncd ..\n```\n\nInstalling nlaugmenter for perturbations\n```\ncd nlaugmenter\npip install -r requirements.txt\npip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.0.0/en_core_web_sm-3.0.0.tar.gz\ncd ..\n```\n\nInstalling treesitter for perturbations. Note that we customized our code syntax perturbatons based on [natgen](https://github.com/saikat107/NatGen). \n```\ncd natgen/treesitter\ngit clone https://github.com/tree-sitter/tree-sitter-python # clone the py-tree-sitter\npython build.py # build my-languages.so file\ncd ../transformations\nln -s ../treesitter/build/my-languages.so ./\npip install sympy\ncd ../..\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "ReCode: Robustness Evaluation of Code Generation Models"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/amazon-science/recode/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-12-19T22:14:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-07T08:09:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 627972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "379": {
        "filename": "isstac_diffuzz_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/isstac/diffuzz",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "We provide a script \"setup.sh\" to simply build everything. But please read first the explanations below. \n\nThe folder *tool* contains 3 subfolders:\n\n* *afl-2.51b-wca*: KelinciWCA, and hence also DifFuzz, is using [AFL](http://lcamtuf.coredump.cx/afl/) as the underlying fuzzing engine. KelinciWCA leverages a server-client architecture to make AFL applicable to Java applications, please refer to the Kelinci [poster-paper](https://dl.acm.org/citation.cfm?id=3138820) for more details. In order to make it easy for the users, we provide our complete modified AFL variant in this folder. Note that we only modified the file *afl-fuzz.c*. For our experiments we have used [afl-2.51b](http://lcamtuf.coredump.cx/afl/releases/?O=D). Please build AFL by following their instructions. Although the `make` command should be enough.\n\n* *fuzzerside*: This folder includes the *interface* program to connect the *Kelinci server* to the AFL fuzzer. Simply use `make` to compile the interface.c file. If there is an error, you will have to modify the Makefile according to your system setup.\n\n* *instrumentor*: This folder includes the *Kelinci server* and the *instrumentor* written in Java. The instrumentor is used to instrument the Java bytecode, which is necessary to add the coverage reporting and other metric collecting for the fuzzing. The Kelinci server handles requests from AFL to execute a mutated input on the application. Both are included in the same Gradle project. Therefore, you can simply use `gradle build` to build them.\n\nAs already mentioned, we have provided a script to build everything. Please execute `tool/setup.sh` to trigger that. Note that depending on your execution environment, you may want to modify this script. We tested our scripts on a Ubuntu Ubuntu 18.04.1 LTS machine.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "DifFuzz: Differential Fuzzing for Side-Channel Analysis",
                        "Tool"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In general, you will have to follow six steps in order to apply DifFuzz for side-channel analysis: \n3. **Instrument the bytecode**: Assuming that your bytecode is in the `bin` folder, the command for instrumentation could look like: `java -cp [..]/diffuzz/tool/instrumentor/build/libs/kelinci.jar edu.cmu.sv.kelinci.instrumentor.Instrumentor -i bin -o bin-instr -skipmain` \n4. **Starting the Kelinci server**: Assuming that the fuzzing driver class is called `Driver`, the command for starting the Kelinci server could look like: `java -cp bin-instr edu.cmu.sv.kelinci.Kelinci Driver @@` \n5. **Start fuzzing by starting the modified AFL**: Assuming that you have installed AFL correctly, the command for starting AFL could be like this: `afl-fuzz -i in_dir -o fuzzer-out -c userdefined -S afl -t 999999999 [..]/diffuzz/tool/fuzzerside/interface @@`.  Depending on your execution environment, you might want to add flags like: `AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES=1` or `AFL_SKIP_CPUFREQ=1`. The timeout parameter `-t` is set to a high value, just because that we want to kill AFL process ourself. \n",
                    "original_header": "General Execution Instructions"
                },
                "confidence": 0.9955445224707187,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The folder *evaluation* contains all our evaluation subjects. After having DifFuzz installed, you can run the script *prepare.sh* to build and instrument all subjects. \nThe subjects *themis_pac4j_** and *themis_tomcat_** need a running database connection. In our experiments we used *h2* databases. Please follow their [instructions](https://www.h2database.com/html/main.html) for setup and maybe consider our helping [notes](evaluation/database_resources/database_notes.txt). Our fuzzing drivers for the *themis_pac4j_** subjects assume a connection with `url=\"jdbc:h2:~/pac4j-fuzz\"`, `user=\"sa\"` and `password=\"\"`. Furthermore they assume an existing table `users (id INT, username varchar(255), password varchar(255))`. Our fuzzing drivers for the *themis_tomcat_** subjects assume a connection with `url=\"jdbc:h2:~/tomcat\"`, `user=\"sa\"` `password=\"\"`, and an existing table `users (user_name varchar(255), user_pass varchar(255))`. Please make sure that your environment matches these requirements or adjust the drivers/subjects. \n",
                    "original_header": "Evaluation"
                },
                "confidence": 0.9796054781723333,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In each subject folder you find two scripts: `01_startKelinciServer.sh` and `02_startFuzzer.sh`. They show how to start the Kelinci server and the modified AFL for this specific subject. You can use them directly to start the analysis (we recommend starting them in multiple terminal windows like mentioned above). Note that the execution order is *crucial*: first start the Kelinci server, and afterwards start the modified AFL! These scripts do not use any timeout, i.e. in general they will run forever. You can stop the scripts by using CTRL-C. Be aware that it is necessary to start the scripts within the specific subject folder, otherwise the paths used in the scripts won't match. Feel free to reuse our scripts to build your own execution environment, e.g. to stop the analysis after a certain timebound or run multiple instances of the same analysis repeatedly.\n \n",
                    "original_header": "Scripts"
                },
                "confidence": 0.9999771052843415,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/isstac/diffuzz/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-11-16T17:48:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-10T08:59:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 23890878
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 407485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SQLPL",
                    "name": "SQLPL",
                    "type": "Programming_language",
                    "size": 224564
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 116701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 90071
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "XSLT",
                    "name": "XSLT",
                    "type": "Programming_language",
                    "size": 32167
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 19563
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 13644
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 4014
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 2978
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "PLpgSQL",
                    "name": "PLpgSQL",
                    "type": "Programming_language",
                    "size": 172
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 133
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 20
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary"
        ]
    },
    "689": {
        "filename": "ise-uiuc_DeepREL_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/DeepREL",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Run the following commands to load the database.\n\n```shell\nmongorestore -h 127.0.0.1:27017 --db tf dump/tf/\nmongorestore -h 127.0.0.1:27017 --db torch dump/torch/\n```\n\n",
                    "type": "Text_excerpt",
                    "original_header": "2. Setting Up with Dataset",
                    "parent_header": [
                        "DeepREL",
                        "Getting Started"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ise-uiuc/DeepREL/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We provide a list of confirmed bug reports on [PyTorch](https://github.com/ise-uiuc/DeepREL/blob/main/PyTorch%20Issues.csv) and [TensorFlow](https://github.com/ise-uiuc/DeepREL/blob/main/TF%20issues.csv).\nWe also provide a Colab notebook to reproduce all 23 high-priority bugs for PyTorch  [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/ise-uiuc/DeepREL/blob/main/PyTorch_High_Priority_Issue_Reproduction.ipynb).\n \n",
                    "original_header": "Reproduce Bugs"
                },
                "confidence": 0.9310787216534303,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/DeepREL/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-21T14:10:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-17T02:00:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 230795
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 34798
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "296": {
        "filename": "TQRG_maintainable-security_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/TQRG/maintainable-security",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Requirements installation:\n\n```\nvirtualenv --python=python3.7 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nMerge different caches in `scripts/maintainability/caches/` folder:\n```\nsource venv/bin/activate\ncd scripts\npython -m maintainability.merge_cache -cache maintainability/cache -output maintainability/bch_cache.zip\n``` \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "security-maintainability"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "How to collect maintainability results from BCH cache:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report export -secdb ../dataset/db_security_changes.csv -regdb ../dataset/db_regular_changes_random.csv -baseline random -results ../results -cache maintainability/bch_cache.zip\n``` \nComparison between security and regular commits:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report comparison -results ../results/ -reports ../reports\n``` \nGet security maintainability report per guideline:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report guideline -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per language:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report language -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per severity:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report severity -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per cwe:\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report cwe -secdb ../results/maintainability_release_security_fixes.csv -reports ../reports\n``` \nGet security maintainability report per specific cwe (available for CWE_664 and CWE_707):\n```\nsource venv/bin/activate\ncd scripts\npython report.py --report cwe-spec -secdb ../results/maintainability_release_security_fixes.csv -cwe CWE_664 -reports ../reports\n``` \n \n",
                    "original_header": "Data Analysis"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Create a config file in `scripts/maintainability/config.json` based on the example in `scripts/maintainability/config-template.json`.\n```\nvirtualenv --python=python3.7 venv\nsource venv/bin/activate\npip install -r requirements.txt\ncd scripts\npython -m maintainability.eval_maintainability\n```\n \n",
                    "original_header": "Experiments"
                },
                "confidence": 1.0,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/TQRG/maintainable-security/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-05T15:49:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-12T20:56:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 241267
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 67861
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 1333
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary",
            "Package Manager"
        ]
    },
    "277": {
        "filename": "logpai_awesome-log-analysis_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/logpai/awesome-log-analysis",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2018-03-09T07:00:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-27T06:01:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "752": {
        "filename": "mrezende_concra_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mrezende/concra",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-04-10T17:35:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-02-21T09:58:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 39099551
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 243520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "4": {
        "filename": "ASSERT-KTH_wasm_evasion_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/wasm_evasion",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "- Clone this repo and its submodules `git clone --recursive`\n- Install Rust in your computer\n    - Set nightly as the version `rustup default nightly`\n    - Compile the analyzer tool `cd crates/evasor && cargo build`\n\n- As an alternative, you can download the [ubuntu release binary](https://github.com/Jacarte/obfuscation_wasm/releases/download/0.1.0/analyzer) `wget -O analyzer https://github.com/Jacarte/obfuscation_wasm/releases/download/0.1.0/evasor_linux_64amd`\n",
                    "type": "Text_excerpt",
                    "original_header": "Setup &amp; requirements",
                    "parent_header": [
                        "Malware evasion for Wasm"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/wasm_evasion/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "The `evasor` bin performs the evasion over an oracle. The oracle can be set with the `--oracle` option. The oracle argument should be another executable script or binary that receives a Wasm program as the first argument. The oracle binary should return exit code 0 if the binary evades, otherwise the exit code is used by the evasor as the numeric value returned by the fitness function. For example, to perform the evasion of VirusTotal, the exit code of the script is the number of bypassed vendors.\n \n",
                    "original_header": "Evasor"
                },
                "confidence": 0.9353785841880682,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ASSERT-KTH/wasm_evasion/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-07-27T09:13:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-18T17:29:03Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "WebAssembly",
                    "name": "WebAssembly",
                    "type": "Programming_language",
                    "size": 83231175
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 64717961
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Rust",
                    "name": "Rust",
                    "type": "Programming_language",
                    "size": 2821730
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1822837
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 293774
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 102910
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 92909
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 50083
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 32741
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 23395
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 17568
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 16368
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 5745
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 2661
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2203
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary"
        ]
    },
    "21": {
        "filename": "mdrafiqulrabin_handcrafted-embeddings_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/handcrafted-embeddings",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Download source code/binaries of [SVMlight](http://svmlight.joachims.org/).\n- Run [data_light.py](https://github.com/mdrafiqulrabin/handcrafted-embeddings/blob/master/svm-handcrafted/data_light.py) to dump SVMlight format file.\n- Run [model_light.py](https://github.com/mdrafiqulrabin/handcrafted-embeddings/blob/master/svm-handcrafted/model_light.py) to train and evaluate SVMlight models. \n",
                    "original_header": "SVM-Handcrafted:"
                },
                "confidence": 0.9897872799898159,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mdrafiqulrabin/handcrafted-embeddings/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-09-12T10:28:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-18T04:03:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 180972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 114602
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 70321
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 2607
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "556": {
        "filename": "ispras_juliet-dynamic_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ispras/juliet-dynamic",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Building all CWEs may require a long time. Building required CWE to measure\nSydr: \n",
                    "original_header": "Build"
                },
                "confidence": 0.991458581192564,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Save statistics to file (results must be already collected): \n    $ ./test_juliet.py > stats.txt \n",
                    "original_header": "Generating LaTex Table"
                },
                "confidence": 0.9570079249558128,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "1. Extract results archive in Juliet root:\n```\n$ tar xf results.tar.xz\n```\n2. The following script will remove `results/stats.json` and rerun sanitizers\n   verification:\nBASH2* \nIf you want to generate LaTex table, see section above.\n \n",
                    "original_header": "Reproducing Statistics"
                },
                "confidence": 0.9285296695653118,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ispras/juliet-dynamic/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T13:39:07Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-12T21:43:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "Source"
        ]
    },
    "352": {
        "filename": "NEUIR_INTERVENOR_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NEUIR/INTERVENOR",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the initial step (**Step A^0**, where 0 signifies the initial turn), we prompt the Code Learner to generate code for the given task. Subsequently, the Code Learner executes the generated code using the code compiler to assess its correctness (**Step B**). Following this, the Code Teacher generates code repair instructions (CoR) based on the bug report and the associated buggy code (**Step C**). These instructions elucidate the reason of the bug, such as ``modified to handle the case where the input decimal is 0``, and include code correction planning, for example, ``we can simply return db0db``. Such instructions are informative and enhance the guidance for the Code Learner. Ultimately, the Code Learner follows the chain-of-repair (CoR) to rectify the code and subsequently resubmits the corrected version to the compiler for execution in the subsequent turn ((**Step A^i**), where i\u22651 denotes the code repair process). The A^i, B, and C steps are iterated sequentially until either the code meets the compiler's estimation or the maximum turn limit is reached.\n![model](assets/model.gif)\n## Requirements \nInstall dependencies:\n```\ngit clone https://github.com/NEUIR/INTERVENOR.git\ncd INTERVENOR\npip install -r requirements.txt\npip install -e human-eval\n```\n \nFor more detailed testing steps, please refer to [HumanEval Repo](https://github.com/openai/human-eval)\n```bash\nevaluate_functional_correctness {result path} --problem_file={problem_path}\n```\n \n",
                    "original_header": "INTERVENOR"
                },
                "confidence": 0.9915039973691678,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/NEUIR/INTERVENOR/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-11-15T10:30:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T16:47:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 121638
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 4991
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1681
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "2": {
        "filename": "arducode-aes_arducode_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/arducode-aes/arducode",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-06-16T13:52:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2020-07-06T15:46:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "461": {
        "filename": "adielashrov_Enhance-DL-with-SBM-Modelsward2023_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/adielashrov/Enhance-DL-with-SBM-Modelsward2023",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "PCC_SBM project was build on top of the https://github.com/PCCproject/PCC-RL project. \n",
                    "original_header": "PCC_SBM"
                },
                "confidence": 0.9908884225003505,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/adielashrov/Enhance-DL-with-SBM-Modelsward2023/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-08T06:42:37Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-07-07T14:33:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 1090615
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 132544
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "ShaderLab",
                    "name": "ShaderLab",
                    "type": "Programming_language",
                    "size": 80492
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 26262
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 15829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 14488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HLSL",
                    "name": "HLSL",
                    "type": "Programming_language",
                    "size": 13994
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C#",
                    "name": "C#",
                    "type": "Programming_language",
                    "size": 13154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CMake",
                    "name": "CMake",
                    "type": "Programming_language",
                    "size": 2655
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 2049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 744
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "1139": {
        "filename": "huhangithub_papt_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/huhanGitHub/papt",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"459\" alt=\"image\" src=\"https://user-images.githubusercontent.com/9078829/222717542-07412c06-6393-4046-b03a-8de0af488ca7.png\"> \n",
                    "original_header": "Pair format"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/huhangithub/papt/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-02-22T04:59:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-26T02:20:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 188334
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 841
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1048": {
        "filename": "chenwangnida_dataset_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/chenwangnida/Dataset",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-04-13T23:22:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-12-27T23:02:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "133": {
        "filename": "uiuc-focal-lab_IVAN_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/uiuc-focal-lab/IVAN",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "GUROBI installation instructions can be found at `https://www.gurobi.com/documentation/9.5/quickstart_linux/software_installation_guid.html`\n\nFor Linux-based systems the installation steps are:\nInstall Gurobi:\n```\nwget https://packages.gurobi.com/9.1/gurobi9.1.2_linux64.tar.gz\ntar -xvf gurobi9.1.2_linux64.tar.gz\ncd gurobi912/linux64/src/build\nsed -ie 's/^C++FLAGS =.*$/& -fPIC/' Makefile\nmake\ncp libgurobi_c++.a ../../lib/\ncd ../../\ncp lib/libgurobi91.so /usr/local/lib -> (You may need to use sudo command for this)   \npython3 setup.py install\ncd ../../\n```\n\nUpdate environment variables:\ni) Run following export commands in command prompt/terminal (these environment values are only valid for the current session) \nii) Or copy the lines in the .bashrc file (or .zshrc if using zshell), and save the file \n\n```\nexport GUROBI_HOME=\"$HOME/opt/gurobi950/linux64\"\nexport GRB_LICENSE_FILE=\"$HOME/gurobi.lic\"\nexport PATH=\"${PATH}:${GUROBI_HOME}/bin\"\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/$HOME/usr/local/lib:/usr/local/lib\n```\n\nGetting the free academic license\nTo run GUROBI one also needs to get a free academic license. https://www.gurobi.com/documentation/9.5/quickstart_linux/retrieving_a_free_academic.html#subsection:academiclicense\n\na) Register using any academic email ID on the GUROBI website. b) Generate the license on https://portal.gurobi.com/iam/licenses/request/\n\nChoose Named-user Academic\n\n\nc)Use the command in the command prompt to generate the licesne. \n\n\n(If not automatically done, place the license in one of the following locations \u201c/opt/gurobi/gurobi.lic\u201d or \u201c$HOME/gurobi.lic\u201d)\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 1: Installing Gurobi",
                    "parent_header": [
                        "IVAN",
                        "Reproducing Testing Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            },
            {
                "result": {
                    "value": "First, make sure you have venv (https://docs.python.org/3/library/venv.html).\nIf venv is not already installed, install it with the following command (Use appropriate python version)\n\n`sudo apt-get install python3.8-venv`\n\n(One can also use other environments such as conda, however we have not tested the experiments on other Python environments) \n\nTo create the virtual environment,\n\n`python3 -m venv env`\n\nThen to enter the virtual environment, run\n\n`source env/bin/activate`\n\nInstall all packages including the compiler with\n\n`pip install -r requirements.txt` \n\nEven if installation of any of the libraries does not work, ignore and continue with the next steps\n",
                    "type": "Text_excerpt",
                    "original_header": "Step 2: Installing Python dependencies in a virtual environment",
                    "parent_header": [
                        "IVAN",
                        "Reproducing Testing Experiments"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "\nSimilar to existing experiments one can easily add new experiments using a unit test. One can add this test in existing test file nnverify/test_pldi.py or can create a new test file.  \nMore information about the adding unittests in python is available here https://docs.python.org/3/library/unittest.html.  \n",
                    "original_header": "Adding New Experiments"
                },
                "confidence": 0.9704207068774942,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uiuc-focal-lab/IVAN/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-04-10T17:55:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-04T21:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 372091
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1760
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "1058": {
        "filename": "matthewsot_ssi-live22_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/matthewsot/ssi-live22",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-10-17T21:37:26Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-03-14T14:08:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 87318
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 35437
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "100": {
        "filename": "agemagician_CodeTrans_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/agemagician/CodeTrans",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<br/>\n<p align=\"center\">\n    <img width=\"70%\" src=\"https://cdn.pixabay.com/photo/2019/10/02/14/44/head-4521114_960_720.jpg\" alt=\"CodeTrans Attention Visualization\">\n</p>\n<br/> \n",
                    "original_header": "CodeTrans"
                },
                "confidence": 0.9914644158607001,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a name=\"question\"></a>\n## \ud83d\udceb&nbsp; Have a question? \n"
                },
                "confidence": 0.9595916147548519,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We are happy to hear your question in our issues page [CodeTrans](https://github.com/agemagician/CodeTrans/issues)! Obviously if you have a private question or want to cooperate with us, you can always **reach out to us directly** via our [RostLab email](mailto:assistant@rostlab.org?subject=[GitHub]CodeTrans)  \n",
                    "original_header": "\ud83d\udceb&nbsp; Have a question?"
                },
                "confidence": 0.9929929563651684,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<a name=\"bug\"></a>\n## \ud83e\udd1d&nbsp; Found a bug? \n<a name=\"requirements\"></a>\n## \u2705&nbsp; Requirements \n"
                },
                "confidence": 0.9710366231778806,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": " * <b>Technical University of Munich:</b><br/>\n \n| Ahmed Elnaggar       |       Wei Ding  |  Florian Matthes | Burkhard Rost |\n|:-------------------------:|:-------------------------:|:-------------------------:|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/ElnaggarAhmend.jpg?raw=true\"> | <img width=120/ src=\"https://github.com/matchlesswei/application_project_nlp_company_description/blob/master/image/Wei_Ding.jpg?raw=true\"> | <img width=120/ src=\"https://wwwmatthes.in.tum.de/file/swwvbhnquwxq/Sebis-Public-Website/Team/20140717_7D_%2047488-3-florian-300x300.jpg\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/B.Rost.jpg?raw=true\"> | \n| Llion Jones       |\n|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Llion-Jones.jpg?raw=true\"> | \n| Tom Gibbs       | Tamas Feher | Christoph Angerer |\n|:-------------------------:|:-------------------------:|:-------------------------:|\n| <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Tom-Gibbs.png?raw=true\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Tamas-Feher.jpeg?raw=true\"> | <img width=120/ src=\"https://github.com/agemagician/ProtTrans/blob/master/images/Christoph-Angerer.jpg?raw=true\"> | \n",
                    "original_header": "\ud83e\udd35&nbsp; Team"
                },
                "confidence": 0.9970234647333327,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/agemagician/CodeTrans/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-10-09T14:22:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-05T20:17:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 10024520
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "29": {
        "filename": "NAIST-SE_GHSponsors_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NAIST-SE/GHSponsors",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-01-12T08:12:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-23T09:21:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "229": {
        "filename": "helges_tetraband_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/HelgeS/tetraband",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "# Installation\n\n## Dependencies\n\nTensorflow Object Detection API depends on the following libraries:\n\n*   Protobuf 3.0.0\n*   Python-tk\n*   Pillow 1.0\n*   lxml\n*   tf Slim (which is included in the \"tensorflow/models/research/\" checkout)\n*   Jupyter notebook\n*   Matplotlib\n*   Tensorflow (>=1.9.0)\n*   Cython\n*   contextlib2\n*   cocoapi\n\nFor detailed steps to install Tensorflow, follow the [Tensorflow installation\ninstructions](https://www.tensorflow.org/install/). A typical user can install\nTensorflow using one of the following commands:\n\n``` bash\n# For CPU\npip install tensorflow\n# For GPU\npip install tensorflow-gpu\n```\n\nThe remaining libraries can be installed on Ubuntu 16.04 using via apt-get:\n\n``` bash\nsudo apt-get install protobuf-compiler python-pil python-lxml python-tk\npip install --user Cython\npip install --user contextlib2\npip install --user jupyter\npip install --user matplotlib\n```\n\nAlternatively, users can install dependencies using pip:\n\n``` bash\npip install --user Cython\npip install --user contextlib2\npip install --user pillow\npip install --user lxml\npip install --user jupyter\npip install --user matplotlib\n```\n\n<!-- common_typos_disable -->\n**Note**: sometimes \"sudo apt-get install protobuf-compiler\" will install\nProtobuf 3+ versions for you and some users have issues when using 3.5.\nIf that is your case, try the [manual](#Manual-protobuf-compiler-installation-and-usage) installation.\n\n## COCO API installation\n\nDownload the\n[cocoapi](https://github.com/cocodataset/cocoapi) and\ncopy the pycocotools subfolder to the tensorflow/models/research directory if\nyou are interested in using COCO evaluation metrics. The default metrics are\nbased on those used in Pascal VOC evaluation. To use the COCO object detection\nmetrics add `metrics_set: \"coco_detection_metrics\"` to the `eval_config` message\nin the config file. To use the COCO instance segmentation metrics add\n`metrics_set: \"coco_mask_metrics\"` to the `eval_config` message in the config\nfile.\n\n```bash\ngit clone https://github.com/cocodataset/cocoapi.git\ncd cocoapi/PythonAPI\nmake\ncp -r pycocotools <path_to_tensorflow>/models/research/\n```\n\n## Protobuf Compilation\n\nThe Tensorflow Object Detection API uses Protobufs to configure model and\ntraining parameters. Before the framework can be used, the Protobuf libraries\nmust be compiled. This should be done by running the following command from\nthe tensorflow/models/research/ directory:\n\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n**Note**: If you're getting errors while compiling, you might be using an incompatible protobuf compiler. If that's the case, use the following manual installation\n\n## Manual protobuf-compiler installation and usage\n\n**If you are on linux:**\n\nDownload and install the 3.0 release of protoc, then unzip the file.\n\n```bash\n# From tensorflow/models/research/\nwget -O protobuf.zip https://github.com/google/protobuf/releases/download/v3.0.0/protoc-3.0.0-linux-x86_64.zip\nunzip protobuf.zip\n```\n\nRun the compilation process again, but use the downloaded version of protoc\n\n```bash\n# From tensorflow/models/research/\n./bin/protoc object_detection/protos/*.proto --python_out=.\n```\n\n**If you are on MacOS:**\n\nIf you have homebrew, download and install the protobuf with\n```brew install protobuf```\n\nAlternately, run:\n```PROTOC_ZIP=protoc-3.3.0-osx-x86_64.zip\ncurl -OL https://github.com/google/protobuf/releases/download/v3.3.0/$PROTOC_ZIP\nsudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc\nrm -f $PROTOC_ZIP\n```\n\nRun the compilation process again:\n\n``` bash\n# From tensorflow/models/research/\nprotoc object_detection/protos/*.proto --python_out=.\n```\n\n## Add Libraries to PYTHONPATH\n\nWhen running locally, the tensorflow/models/research/ and slim directories\nshould be appended to PYTHONPATH. This can be done by running the following from\ntensorflow/models/research/:\n\n\n``` bash\n# From tensorflow/models/research/\nexport PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim\n```\n\nNote: This command needs to run from every new terminal you start. If you wish\nto avoid running this manually, you can add it as a new line to the end of your\n~/.bashrc file, replacing \\`pwd\\` with the absolute path of\ntensorflow/models/research on your system.\n\n# Testing the Installation\n\nYou can test that you have correctly installed the Tensorflow Object Detection\\\nAPI by running the following command:\n\n```bash\npython object_detection/builders/model_builder_test.py\n```\n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/object_detection/g3doc/installation.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "These environments can be used by importing the `envs` module and instantiating the wanted configuration:\n```\nimport gym\nimport envs\nenv = gym.make('ImageClassificationEnv-basic-cifar10-v0')\nprint(\"Number of actions: \", env.action_space.n)\nprint(\"Observation space: \", env.observation_space)\nprint(\"Actions: \", env.action_names())\n```\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9581080794724207,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Available datasets (will be automatically downloaded): \n",
                    "original_header": "Datasets"
                },
                "confidence": 0.9897322357517745,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/helges/tetraband/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2018-12-13T18:03:23Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-12-21T08:03:30Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3441365
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15160
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 7396
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 5701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Binary",
            "Package Manager"
        ]
    },
    "169": {
        "filename": "Sushentsev_DapStep_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Sushentsev/DapStep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "DapStep",
                        "How to use"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/Sushentsev/DapStep/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2021-12-27T13:28:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-09-09T17:09:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 125286
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "267": {
        "filename": "woc-hack_track_hack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/woc-hack/track_hack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-01-12T20:37:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-10-25T20:14:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 3071399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 399
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "835": {
        "filename": "formes20_narv_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/formes20/narv",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-09-17T05:57:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-10-08T16:12:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 519109
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 296976
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 19521
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 1958
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1061
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "QMake",
                    "name": "QMake",
                    "type": "Programming_language",
                    "size": 906
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "710": {
        "filename": "NetManAIOps_CIRCA_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/NetManAIOps/CIRCA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-03-15T04:26:06Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-29T07:33:51Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 201285
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 8482
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1198
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "226": {
        "filename": "mdrafiqulrabin_rm-dd-perses_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mdrafiqulrabin/rm-dd-perses",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "&emsp; [ Related Work: https://github.com/mdrafiqulrabin/CI-DD-Perses ] \n",
                    "original_header": "Research Quest:"
                },
                "confidence": 0.9986523996637047,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/mdrafiqulrabin/rm-dd-perses/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-20T21:44:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-02T04:53:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "948": {
        "filename": "dspinellis_ai-cli_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dspinellis/ai-cli-lib",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```sh\ncd src\n\n# Global installation for all users\nsudo make install\n\n# Local installation for the user executing the command\nmake install PREFIX=~\n```\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "ai-cli-lib: AI help for CLI programs"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/dspinellis/ai-cli/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-09T18:15:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-04T09:47:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 100701
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 10156
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 4596
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1735
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "866": {
        "filename": "EvoTestOps_LogLead_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/EvoTestOps/LogLead",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Simply install with `pip`:\n\n```\npython -m pip install loglead\n```\n\nNOTE: pip version does not have the `tensorflow` dependencies necessary for `BertEmbeddings`.\nInstall them manually (preferably in a conda enviroment).\n",
                    "type": "Text_excerpt",
                    "original_header": "Installing LogLead",
                    "parent_header": [
                        "LogLead"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EvoTestOps/LogLead/main/README.md"
            },
            {
                "result": {
                    "value": "- If `scikit-learn` wheel fails to compile, check that you can `gcc` and `g++` installed.\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Known issues",
                    "parent_header": [
                        "LogLead",
                        "Installing LogLead"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/EvoTestOps/LogLead/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-09-22T04:31:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-26T10:21:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 287485
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "646": {
        "filename": "YuanruiZJU_academic-ai-repos_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YuanruiZJU/academic-ai-repos",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "In the `code_repos` directory, we provide all the academic AI repositories studied in our paper. Input the following commands to retrieve all the repositories:\n```\ngit clone https://github.com/YuanruiZJU/academic-ai-repos.git\ngit submodule init\ngit submodule update\n```\n \n",
                    "original_header": "Data"
                },
                "confidence": 0.9999999999601812,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/YuanruiZJU/academic-ai-repos/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-07-02T05:38:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-12-25T15:56:18Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 248409
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 46463
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "MATLAB",
                    "name": "MATLAB",
                    "type": "Programming_language",
                    "size": 35908
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 23460
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "549": {
        "filename": "yylonly_medshare_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/yylonly/MedShare",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "* git clone https://github.com/yylonly/medshare.git\n* cd medshare\n* docker-compose build\n* docker-compose up -d\n",
                    "type": "Text_excerpt",
                    "original_header": "Install"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/yylonly/medshare/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "http://localhost:8081/net.mydreamy.privacyehr-0.0.1-SNAPSHOT\n* EHR Sharing - Username: doctorgov Password: 123456 (auth service ip: 127.0.0.1 if on localhost)\n* Audit - username: tracker1 password:123\n* Query Patient ID: 73001 - 73100\n \n",
                    "original_header": "Test"
                },
                "confidence": 0.964112055829492,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/yylonly/medshare/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-01-11T21:50:04Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-08-21T14:50:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 118061
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 8454
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 2978
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 546
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 424
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Container"
        ]
    },
    "666": {
        "filename": "saltlab_Katana_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/saltlab/Katana",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "**Abstract**: Contextual information plays a vital role for software developers when understanding and fixing a bug. Context can also be important in deep learning-based program repair to provide extra information about the bug and its fix. Existing techniques, however, treat context in an arbitrary manner, by extracting code in close proximity of the buggy statement within the enclosing file, class, or method, without any analysis to find actual relations with the bug. To reduce noise, they use a predefined maximum limit on the number of tokens to be used as context. We present a program slicing-based approach, in which instead of arbitrarily including code as context, we analyze statements that have a control or data dependency on the buggy statement. We propose a novel concept called dual slicing, which leverages the context of both buggy and fixed versions of the code to capture relevant repair ingredients. We present our technique and tool called Katana, the first to apply slicing-based context for a program repair task. The results show Katana effectively preserves sufficient information for a model to choose contextual information while reducing noise. We compare against four recent state-of-the-art context-aware program repair techniques. Our results show Katana fixes between 1.5 to 3.7 times more bugs than existing techniques.\n",
                    "type": "Text_excerpt",
                    "original_header": "Katana: Dual Slicing-Based Context for Learning Bug Fixes"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/saltlab/Katana/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Use the scripts in bug-miner for collecting one line diff data from github.\n \n",
                    "original_header": "Data collection"
                },
                "confidence": 0.9149210904549225,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/saltlab/Katana/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-09T06:55:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-19T01:50:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 275404
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 43622
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Cuda",
                    "name": "Cuda",
                    "type": "Programming_language",
                    "size": 28049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 16058
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 6633
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 825
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 477
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 443
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "793": {
        "filename": "nantiamak_sql4ml_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/nantiamak/sql4ml",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Sql4ml uses the open source project queryparser (https://github.com/uber/queryparser), also in Haskell.\nTo build queryparser, follow the instructions on the Github page of the project.\n\nThe sql4ml module is in file sql4ml_translator.hs.\nYou can load the module via ghci.\n\nFile main.hs containts two examples on how to translate SQL to TensorFlow code end-to-end.\n\nTo compile main.hs, run in a terminal:\n\n    ghc -o main main.hs\n\nSql4ml uses the MySQL database (https://www.mysql.com/) for storing data.\nTo run the generated TensorFlow code, you need to install MySQL.\nTo install it follow the instructions in https://www.mysql.com/.\n\nAfter installing MySQL, you can run the SQL scripts in the directory /db_setups to create two toy databases, one based\non the Boston Housing dataset (https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html) and the other based\non the Iris dataset (https://archive.ics.uci.edu/ml/datasets/iris), which you can find in the directory /data.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "sql4ml"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/nantiamak/sql4ml/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-07-19T13:32:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-09-12T20:40:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Haskell",
                    "name": "Haskell",
                    "type": "Programming_language",
                    "size": 31045
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TSQL",
                    "name": "TSQL",
                    "type": "Programming_language",
                    "size": 9974
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "292": {
        "filename": "carlos-molina_conch_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/carlos-molina/conch",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "0. Install java jdk 7\n1. Clone conch repo https://github.com/gsfyrakis/conch (Branch cccv2)\n2. install mysql 5.6 https://dev.mysql.com/downloads/mysql/5.6.html#downloads\n3. download jboss-eap-6.4 https://developers.redhat.com/download-manager/file/jboss-eap-6.4.0.GA-installer.jar or jboss as 7.1.1 http://download.jboss.org/jbossas/7.1/jboss-as-7.1.1.Final/jboss-as-7.1.1.Final.zip\n4. install jboss-eap \u279c choose admin password\n5. copy conch/JBOSS-EAP-6.4 configuration/mysql folder to jboss-eap-6.4/modules/com\n6. add datasource and driver configuration in jboss-eap-6.4/standalone/configuration/standalone-full.xml file\n\n`<datasource jta=\"false\" jndi-name=\"java:jboss/datasources/RopeDS\" pool-name=\"RopeDS\" enabled=\"true\" use-ccm=\"false\">\n                    <connection-url>jdbc:mysql://127.0.0.1:3306/rope_historical</connection-url>\n                    <driver-class>com.mysql.jdbc.Driver</driver-class>\n                    <driver>mysql</driver>\n                    <security>\n                        <user-name>rope</user-name>\n                        <password>Me!Uj4^w</password>\n                    </security>\n                    <validation>\n                        <validate-on-match>false</validate-on-match>\n                        <background-validation>false</background-validation>\n                    </validation>\n                    <statement>\n                        <share-prepared-statements>false</share-prepared-statements>\n                    </statement>\n                </datasource>\n                <drivers>\n                    <driver name=\"mysql\" module=\"com.mysql\"/>\n                    <driver name=\"h2\" module=\"com.h2database.h2\">\n                        <xa-datasource-class>org.h2.jdbcx.JdbcDataSource</xa-datasource-class>\n                    </driver>\n                </drivers>`\n\n6. copy conch/JBOSS-EAP-6.4 configuration/drools to  jboss-eap-6.4/standalone/ to install default contract\n7. edit change-set.xml in  jboss-eap-6.4/standalone/drools/upload with full path to Rule.drl   \n8. `export JBOSS_HOME=<installation` path for jboss-eap-6.4>\n9. execute `conch/run.sh` script \n10. check for any exceptions\n11. install maven 3.3.9\n12. create `.mavenrc` file in user folder \n13. add  configuration to `.mavenrc`  file\n`JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home'`\n`JAVA_OPTS=\u201c-Xms512m -Xmx1024m -Xss512k -XX:PermSize=64m -XX:MaxPermSize=128m\u201d`\n\n14. copy `conch/JBOSS-EAP-6.4/settings.xml` to `~/.m2/`\n15. follow the tutorial to adjust the configuration of the maven jboss-as plugin, if it is needed, in order to deploy the `CCC-Rest-ear.ear` archive to jboss server after each maven build.  http://mastertheboss.com/jboss-frameworks/maven-tutorials/jboss-maven/maven-jboss-as-7-plugin-tutorial\nThe configuration for the maven jboss-as plugin is on the `conch/pom.xml` file.\n\nAnother way to manually deploy the CCC-Rest-ear.ear archive is by visiting the management console of jboss: http://www.mastertheboss.com/jboss-server/jboss-deploy/how-to-deploy-an-application-remotely-with-jboss-as  \n\n16. execute in conch folder \u279e `mvn clean package jboss-as:deploy`\n17. check jboss logs for any exceptions\n    15:45:22,446 INFO  [org.jboss.as.server] (management-handler-thread - 1) JBAS015859: Deployed \u201cCCCRest-ear.ear\u201d (runtime-name : \u201cCCCRest-ear.ear\"\n18. `http://localhost:8080/CCCRest-ear-web/UploadForm.html` to upload a new set of rules to the CCC\n19. build client and run examples using client app under `conch/CCCRestClient/runClient.sh` (change path to sequence events) \n",
                    "type": "File_dump"
                },
                "confidence": 1,
                "technique": "file_exploration",
                "source": "https://raw.githubusercontent.com/carlos-molina/conch/master/install.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2013-02-07T16:22:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-16T17:33:48Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 134522
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1304
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Batchfile",
                    "name": "Batchfile",
                    "type": "Programming_language",
                    "size": 168
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "988": {
        "filename": "giganticode_codeprep_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/giganticode/codeprep",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "To store the cache, **codeprep** uses a directory speecified by `$XDG_CACHE_HOME/codeprep/<codeprep_version>` variable if its value is set, \n`$HOME/.cache/codeprep/<codeprep_version>` otherwise. \n",
                    "original_header": "Caching"
                },
                "confidence": 0.9930292828061129,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Add more flixibility with versions of dependencies\n \n",
                    "original_header": "1.0.3"
                },
                "confidence": 0.9180721378880804,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- Fix training custom bpe codes (Thanks to @mir-am)\n- Fix corpus pre-processing on Windows\n \n",
                    "original_header": "1.0.1"
                },
                "confidence": 0.939517339442219,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Initial PyPI release\n \n",
                    "original_header": "1.0.0-alpha.6"
                },
                "confidence": 0.9778317416837412,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/giganticode/codeprep/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-04-05T13:20:24Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-01-04T07:09:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 318614
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 29780
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary"
        ]
    },
    "566": {
        "filename": "cedricrupb_nbfbaselines_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/cedricrupb/nbfbaselines",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "You can try these models easily yourself:\n```python\nfrom nbfbaselines import NBFModel\n\nnbf_model = NBFModel.from_pretrained([model_id])\n\n```\n \n",
                    "original_header": "Models"
                },
                "confidence": 0.964466456244689,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/cedricrupb/nbfbaselines/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-06-28T12:21:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-24T23:07:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 92159
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 11742
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "118": {
        "filename": "Cloudslab_iFogSim_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Cloudslab/iFogSim",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2021-08-28T16:32:13Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-10-01T17:28:42Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 1878972
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "131": {
        "filename": "sea-lab_hybrid-net_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sea-lab/hybrid-net",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2020-12-16T05:01:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-05-23T02:35:09Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 135924
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 54017
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "637": {
        "filename": "ise-uiuc_Repilot_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ise-uiuc/Repilot",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<p align=\"left\">\n    <a href=\"https://arxiv.org/abs/2309.00608\"><img src=\"https://img.shields.io/badge/arXiv-2309.00608-b31b1b.svg?style=for-the-badge\">\n    <a href=\"https://doi.org/10.5281/zenodo.8281250\"><img src=\"https://img.shields.io/badge/DOI-10.5281%2Fzenodo.8281250-blue?style=for-the-badge\">\n    <a href=\"https://hub.docker.com/r/universefly/repilot/tags\"><img src=\"https://img.shields.io/badge/docker-universefly%2Frepilot-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white\"></a>\n</p> \n",
                    "original_header": "\u2699\ufe0f$`\\mathbb{R}\\mathrm{e}\\mathbf{pilot}`$\ud83d\udee0\ufe0f"
                },
                "confidence": 0.9989119940382889,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ise-uiuc/Repilot/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-29T05:21:28Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-30T16:51:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 301488
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1754
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Container"
        ]
    },
    "741": {
        "filename": "ASE-REEF_REEF-data_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASE-REEF/REEF-data",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-08-15T15:04:19Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-06-25T10:11:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "463": {
        "filename": "hiroto-takatoshi_ProgLMBug_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/hiroto-takatoshi/ProgLMBug",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A research for programming language models' performance on bug detection\n[arXiv paper](https://arxiv.org/abs/1909.10309)\n- https://github.com/hiroto-takatoshi/atcoder_java\n- https://github.com/hiroto-takatoshi/XLM\n \n",
                    "original_header": "ProgLMBug"
                },
                "confidence": 0.9809809495003697,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/hiroto-takatoshi/ProgLMBug/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-05-12T14:10:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-04-21T02:51:56Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 154943
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 15260
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1200": {
        "filename": "uphf_miga_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/UPCArtifacts/migA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "First, execute `mvn clean -Dmaven.test.skip=true`\n\n",
                    "type": "Text_excerpt",
                    "original_header": "Install",
                    "parent_header": [
                        "migA"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/uphf/miga/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "A Tool for analyzing migrations from Java to Kotlin on Git repositories. \n",
                    "original_header": "migA"
                },
                "confidence": 0.9764375198222345,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/uphf/miga/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-03-31T12:34:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2021-01-20T09:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 302983
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "649": {
        "filename": "jianguda_mrncs_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/jianguda/mrncs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "```markdown\n**code** implementations to support the experiments\n----**build** the tree-sitter code parser\n----**tree** the code package of the implementations\n----**vendor** the Git submodules for build the code parser\n**resources** raw data and preprocessed data\n----**cache** preprocessed data\n----**data** raw data\n**doc** documentations\n----**exp** experimental results\n----**info** supplementary snippets\n----`@guide.md` guidance for run experiments\n```\n \n",
                    "original_header": "Repo Structure"
                },
                "confidence": 0.9999873306357413,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/jianguda/mrncs/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-02-12T23:03:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-11-22T12:18:22Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 129499
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source"
        ]
    },
    "227": {
        "filename": "dlfaults_dnn-auto-repair-empirical-assesment_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/dlfaults/dnn-auto-repair-empirical-assesment",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Tested with Python 3.8.2\n- tensorflow 2.3.4\n- Keras 2.4.3\n \n",
                    "original_header": "Environments"
                },
                "confidence": 0.9896154350647407,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "- It is highly recommened to use GPU version of Tensorflow.\n \n",
                    "original_header": "Notes"
                },
                "confidence": 0.9899242654388337,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/dlfaults/dnn-auto-repair-empirical-assesment/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-26T16:28:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-01-27T06:37:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 657372
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 354150
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "33": {
        "filename": "ulyantsev_EFSM-tools_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ulyantsev/EFSM-tools",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "LTL properties, or LTL formulae, are represented as text files. Each line represents a single LTL formula. Formulae may use temporal operators X (next), F (future), G (globally), U (until), R (release), Boolean operators \"&&\" (and), \"||\" (or), \"!\" (not), and atomic propositions *event(&lt;event name or a comma-separated list of event names&gt;)*, *action(&lt;action name&gt;)*, *variable(&lt;variable name&gt;)*. \n",
                    "original_header": "Input data format for LTL properties"
                },
                "confidence": 0.9997337939908222,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "It uses incremental cryptominisat by default, but switching to usual versions of cryptominisat or lingeling are possible using command line options. To run the tool: \n> cd examples \n",
                    "original_header": "Mealy machine synthesis from traces and LTL properties based on incremental SAT solvers"
                },
                "confidence": 0.975234735389455,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Run the following tool: \n",
                    "original_header": "Mealy machine synthesis from traces and LTL properties based on SAT and QSAT solvers"
                },
                "confidence": 0.9269093628562352,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Here are scripts to run some examples: \n",
                    "original_header": "Moore machine synthesis from traces and LTL properties"
                },
                "confidence": 0.9005075916320626,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Regarding issues with the tool, bugs, etc., email Igor Buzhinsky.\n \n",
                    "original_header": "Troubleshooting, questions, research collaboration, etc."
                },
                "confidence": 0.9604426559294641,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ulyantsev/EFSM-tools/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2014-03-15T16:00:44Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-25T07:26:00Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "C",
                    "name": "C",
                    "type": "Programming_language",
                    "size": 3430934
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 1433860
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Java",
                    "name": "Java",
                    "type": "Programming_language",
                    "size": 867024
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 339889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "SuperCollider",
                    "name": "SuperCollider",
                    "type": "Programming_language",
                    "size": 132694
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 73512
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 54737
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 38792
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Roff",
                    "name": "Roff",
                    "type": "Programming_language",
                    "size": 14257
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Gnuplot",
                    "name": "Gnuplot",
                    "type": "Programming_language",
                    "size": 8347
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "R",
                    "name": "R",
                    "type": "Programming_language",
                    "size": 1164
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 891
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Binary"
        ]
    },
    "683": {
        "filename": "MShudrak_ida-metrics_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mxmssh/IDAmetrics",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Minimal requirements: \n",
                    "original_header": "IDAMetrics-static.py"
                },
                "confidence": 0.9760286703763255,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MShudrak/ida-metrics/master/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "We tested metrics to predict bugs in the following list of vulnerable apps: http://goo.gl/4dKypy \n",
                    "original_header": "Metrics efficiency analysis"
                },
                "confidence": 0.9487037662686649,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/MShudrak/ida-metrics/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2015-01-28T05:38:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T00:27:14Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 83765
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "C++",
                    "name": "C++",
                    "type": "Programming_language",
                    "size": 4250
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "223": {
        "filename": "co-design-hybrid_co-design-hybrid_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/co-design-hybrid/co-design-hybrid",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "## Recruiting\nParticipants in the co-design workshops should consist of a variety of software engineers, UX designers, and product managers representing the major software development roles at the site. It is ideal that experience and functioning roles of participants can reflect the demongraphics of the office, but be aware that software developers' time are expensive. The number of participants varied from 17 to 22 across our three workshops at SAP.\n",
                    "type": "Text_excerpt",
                    "original_header": "Recruiting",
                    "parent_header": [
                        "Recruiting and Preparation <a name=\"prep\"></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "value": "This workshop is recommended in a large conference room with roundtable seatings, and equipped with whiteboard spaces and wall displays. If there are remote participants, collaborative design space is recommended, including SurfaceHub and Jamboard. **LOTS of sticky notes** will be used during these sessions. For a session size with 20 participants, two facilitators would be sufficient.\n\nAgenda email and calendar invite need to be sent at least one week before the actuall workshop happen for coordinating time.\n",
                    "type": "Text_excerpt",
                    "original_header": "Preparation",
                    "parent_header": [
                        "Recruiting and Preparation <a name=\"prep\"></a>"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"640\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201758038-66ff6d11-9d97-46a7-882d-ef6600336fa7.png\"> \n",
                    "original_header": "Target who we are designing for"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"640\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201765933-7f1554f9-0f49-42f7-91f5-b65b1ac71b05.png\"> \n",
                    "original_header": "Synthesis of Research"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"250\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201828216-dd701c55-2637-495a-97b2-4372ffe7faab.png\"> \n",
                    "original_header": "Vote and Prototype"
                },
                "confidence": 0.9415592075424289,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "<img width=\"200\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5464857/201779139-206cd4c9-079f-4fe0-a420-c9f21b5f4809.png\"> \n \n",
                    "original_header": "Tracking Action Item Progress"
                },
                "confidence": 0.9256969470641162,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/co-design-hybrid/co-design-hybrid/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-11-04T00:10:45Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-02-28T16:37:34Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "1060": {
        "filename": "se2p_scratch-online-course_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/se2p/scratch-online-course",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-07-15T13:54:52Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2022-08-29T06:57:01Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 3784
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1758
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "572": {
        "filename": "vrthra_f1_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/vrthra/F1",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "If you use F1 in a production setting, if you found bugs with it (yay!), or if\nyou have any suggestions to share, please let us know \u2013 your experience is very\nvaluable for us.  Thanks! \n",
                    "original_header": "F1 Fuzzer"
                },
                "confidence": 0.9720903174318392,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/vrthra/f1/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2019-11-17T16:15:16Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-21T04:24:31Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15721829
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 42423
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Makefile",
                    "name": "Makefile",
                    "type": "Programming_language",
                    "size": 126
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "707": {
        "filename": "Copilot-Eval-Replication-Package_CopilotEvaluation_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/Copilot-Eval-Replication-Package/CopilotEvaluation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2022-06-27T16:10:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-17T11:38:17Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 1426123
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 821
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "408": {
        "filename": "kahrabian_RT-X_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "912": {
        "filename": "e0hyl_finer-explain_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/E0HYL/FINER-explain",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "\r\n```shell\r\nconda env create --name FINER --file finer.yml\r\nconda activate FINER\r\n```\r\n\r",
                    "type": "Text_excerpt",
                    "original_header": "Setup",
                    "parent_header": [
                        "FINER"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/e0hyl/finer-explain/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-08-06T12:36:11Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-20T04:18:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 152601
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "1170": {
        "filename": "ortegasa_squwals-repo_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/OrtegaSA/squwals-repo",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "Open a system's console or an Anaconda Prompt depending on your python installation.\n\nFirst, clone the repository.\n```bash\ngit clone https://github.com/OrtegaSA/squwals-repo\n```\nThis creates a folder called squwals-repo. Change the directory to it.\n```bash\ncd squwals-repo\n```\nInstall the package using pip.\n```bash\npip install .\n```\n\nAlternativelly, you can download the folder squwals and copy it in your python working directory, or in some directory included in PYTHONPATH.\n\n  \n",
                    "type": "Text_excerpt",
                    "original_header": "Installation"
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/ortegasa/squwals-repo/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-07-24T16:45:54Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-19T15:04:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 2284986
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 50763
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Source",
            "Package Manager"
        ]
    },
    "258": {
        "filename": "LogIntelligence_LogPPT_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/LogIntelligence/LogPPT",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "| Raw logs                                                                                                                                         | Events                                                                                    |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------------------------------------------------------------------------|\n| TEST 9/13884 \\[2/2 concurrent test workers running\\]                                                                                             | TEST <\\*> \\[<\\*> concurrent test workers running\\]                                        |\n| (1.039 s) Test touch() function : basic functionality \\[ext/standard/tests/file/touch_basic.phpt\\]                                               | <\\*> Test touch() function : basic functionality <*>                                      |\n| (120.099 s) Bug #60120 (proc_open hangs when data in stdin/out/err is getting larger or equal to 2048) \\[ext/standard/tests/file/bug60120.phpt\\] | <\\*> Bug <\\*> (proc_open hangs when data in <\\*> is getting larger or equal to <\\*>) <\\*> |\n| SKIP Bug #54977 UTF-8 files and folder are not shown \\[ext/standard/tests/file/windows_mb_path/bug54977.phpt\\] reason: windows only test         | SKIP Bug <\\*> UTF-8 files and folder are not shown <\\*> reason: windows only test         |\n| Exts skipped    :   17                                                                                                                           | Exts skipped : <*>                                                                        | \n",
                    "original_header": "Parsing results with <a href=\"logs/BuildLog/example.log\">Build Log</a> from <a href=\"https://zenodo.org/record/3632351\">LogChunks</a>"
                },
                "confidence": 0.9999627853394647,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/LogIntelligence/LogPPT/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-09-01T00:50:05Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-20T08:17:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 104691
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 4099
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 1656
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "311": {
        "filename": "sr-lab_GLITCH_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/sr-lab/GLITCH",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "To install run:\n```\npython -m pip install -e .\n```\n\nTo use the tool for Chef you also need Ruby and its Ripper package installed.\n",
                    "type": "Text_excerpt",
                    "original_header": "Installation",
                    "parent_header": [
                        "GLITCH"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/sr-lab/GLITCH/main/README.md"
            },
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "GLITCH has a Visual Studio Code extension which is available [here](https://github.com/sr-lab/GLITCH/tree/main/vscode-extension/glitch).\n \n",
                    "original_header": "VSCode extension"
                },
                "confidence": 0.9809808659515912,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/sr-lab/GLITCH/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-01-28T12:53:43Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-07-12T01:46:32Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 522234
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HCL",
                    "name": "HCL",
                    "type": "Programming_language",
                    "size": 163893
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Puppet",
                    "name": "Puppet",
                    "type": "Programming_language",
                    "size": 9324
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Ruby",
                    "name": "Ruby",
                    "type": "Programming_language",
                    "size": 6683
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "TypeScript",
                    "name": "TypeScript",
                    "type": "Programming_language",
                    "size": 4859
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Dockerfile",
                    "name": "Dockerfile",
                    "type": "Programming_language",
                    "size": 1889
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "664": {
        "filename": "amirhosseinzlf_STARLA_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/amirhosseinzlf/STARLA",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "NOTE:TensorFlow 1.X is no longer supported by Google Colab. It is recommended that you create your own virtual environment with Python 3.7 and install the necessary requirements.\n \n",
                    "original_header": "RQ3. Can we learn accurate rules to characterize the faulty episodes of RL agents?"
                },
                "confidence": 0.9999984634657874,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/amirhosseinzlf/STARLA/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-04-08T15:19:57Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-30T11:18:41Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Jupyter Notebook",
                    "name": "Jupyter Notebook",
                    "type": "Programming_language",
                    "size": 15620526
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "805": {
        "filename": "npaulinastevia_DRL_se_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/npaulinastevia/drl_se",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "```\npip install -r requirements.txt\n```",
                    "type": "Text_excerpt",
                    "original_header": "Set up",
                    "parent_header": [
                        "A Comparison of Reinforcement Learning Frameworks for Software Testing Tasks"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/npaulinastevia/DRL_se/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2022-08-14T08:21:46Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-03-03T11:17:02Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 122843
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "206": {
        "filename": "khaes-kth_simple-nngen_2024-10-03.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ASSERT-KTH/simple-nngen",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2019-12-11T18:17:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2023-04-05T07:40:49Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 8049
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Perl",
                    "name": "Perl",
                    "type": "Programming_language",
                    "size": 5208
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "1147": {
        "filename": "yuchenxia_gpt4industrialautomation_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/YuchenXia/GPT4IndustrialAutomation",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-07-20T21:37:39Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T15:56:27Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "748": {
        "filename": "ananevans_icse2020_2024-10-04.json",
        "code_repository": "No code repository found.",
        "installation_instructions": "No installation instructions found.",
        "date_created": "No date_created found.",
        "date_updated": "No date_updated found.",
        "programming_languages": "No programming languages found.",
        "installation_method": [
            "No method provided"
        ]
    },
    "881": {
        "filename": "ctuning_cbench_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ctuning/cbench",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "type": "Text_excerpt",
                    "value": "Linux/MacOS: \nWindows: \n"
                },
                "confidence": 0.995500723646355,
                "technique": "supervised_classification",
                "source": "https://raw.githubusercontent.com/ctuning/cbench/master/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2020-04-05T13:33:38Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-22T23:58:33Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 165219
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "936": {
        "filename": "momentum-lab-workspace_deepseer_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/ma-labo/DeepSeer",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": [
            {
                "result": {
                    "value": "*We suggest use virtual environment to avoid messing up your own environments.*\n\n~~~sh\n$ python -m venv ./venv\n$ source ./venv/bin/activate\n$ pip install -r ./server/deepstellar_backend/requirements.txt\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "Python &gt;= 3.6",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/deepseer/main/README.md"
            },
            {
                "result": {
                    "value": "~~~sh\n$ cd ./web/dashboard\n$ npm install\n~~~\n",
                    "type": "Text_excerpt",
                    "original_header": "NPM &gt;= 7",
                    "parent_header": [
                        "DeepSeer: Interactive RNN Explanation and Debugging via State Abstraction",
                        "Getting Started",
                        "Environments Set-up"
                    ]
                },
                "confidence": 1,
                "technique": "header_analysis",
                "source": "https://raw.githubusercontent.com/momentum-lab-workspace/deepseer/main/README.md"
            }
        ],
        "date_created": [
            {
                "result": {
                    "value": "2023-01-25T03:58:58Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-13T02:04:50Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Python",
                    "name": "Python",
                    "type": "Programming_language",
                    "size": 130483
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "JavaScript",
                    "name": "JavaScript",
                    "type": "Programming_language",
                    "size": 81631
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "HTML",
                    "name": "HTML",
                    "type": "Programming_language",
                    "size": 8796
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "RAML",
                    "name": "RAML",
                    "type": "Programming_language",
                    "size": 649
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "CSS",
                    "name": "CSS",
                    "type": "Programming_language",
                    "size": 364
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "Package Manager"
        ]
    },
    "928": {
        "filename": "mojtaba-eshghie_soliditydesignpatternsdcrgraph_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/mojtaba-eshghie/SmartContractDesignPatternsInDCRGraphs",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2023-03-12T09:18:53Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-09-19T08:01:55Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 154
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    },
    "355": {
        "filename": "serval-snt-uni-lu_RePack_2024-10-04.json",
        "code_repository": [
            {
                "result": {
                    "value": "https://github.com/serval-snt-uni-lu/RePack",
                    "type": "Url"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_instructions": "No installation instructions found.",
        "date_created": [
            {
                "result": {
                    "value": "2016-08-31T08:07:12Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "date_updated": [
            {
                "result": {
                    "value": "2024-08-12T19:24:40Z",
                    "type": "Date"
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "programming_languages": [
            {
                "result": {
                    "value": "TeX",
                    "name": "TeX",
                    "type": "Programming_language",
                    "size": 13944
                },
                "confidence": 1,
                "technique": "GitHub_API"
            },
            {
                "result": {
                    "value": "Shell",
                    "name": "Shell",
                    "type": "Programming_language",
                    "size": 388
                },
                "confidence": 1,
                "technique": "GitHub_API"
            }
        ],
        "installation_method": [
            "No method provided"
        ]
    }
}