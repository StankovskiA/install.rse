[
    {
        "https://github.com/aig-upf/tarski": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/pellierd/pddl4j": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/fivosts/BenchPress": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/cmu-phil/causal-learn": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/delas/OnlineSoftConformance": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/chuffed/chuffed": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/potassco/plasp": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/BioinformaticsIASBS/LCS-DSclassification": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    },
    {
        "https://github.com/rlworkgroup/garage": {
            "somef_provenance": {
                "somef_version": "0.9.5",
                "somef_schema_version": "1.0.0",
                "date": "2024-07-12 14:27:25"
            },
            "code_repository": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "owner": [
                {
                    "result": {
                        "value": "rlworkgroup",
                        "type": "Organization"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_created": [
                {
                    "result": {
                        "value": "2018-06-10T21:31:23Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "date_updated": [
                {
                    "result": {
                        "value": "2024-07-11T07:48:28Z",
                        "type": "Date"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "license": [
                {
                    "result": {
                        "value": "https://api.github.com/licenses/mit",
                        "type": "License",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "MIT License\n\nCopyright (c) 2019 Reinforcement Learning Working Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/LICENSE"
                }
            ],
            "description": [
                {
                    "result": {
                        "value": "A toolkit for reproducible reinforcement learning research.",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage is a toolkit for developing and evaluating reinforcement learning\nalgorithms, and an accompanying library of state-of-the-art implementations\nbuilt using that toolkit. \nThe toolkit provides wide range of modular tools for implementing RL algorithms,\nincluding: \n* Composable neural network models\n* Replay buffers\n* High-performance samplers\n* An expressive experiment definition interface\n* Tools for reproducibility (e.g. set a global random seed which all components\n  respect)\n* Logging to many outputs, including TensorBoard\n* Reliable experiment checkpointing and resuming\n* Environment interfaces for many popular benchmark suites\n* Supporting for running garage in diverse environments, including always\n  up-to-date Docker containers \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.898375506393665,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "**Join the [garage-announce mailing list](https://groups.google.com/forum/#!forum/garage-announce/join)**\nfor infrequent updates (<1/mo.) on the status of the project and new releases. \nNeed some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9357282942041669,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "We currently support [PyTorch](https://pytorch.org/) and\n[TensorFlow](https://www.tensorflow.org/) for implementing the neural network\nportions of RL algorithms, and additions of new framework support are always\nwelcome. PyTorch modules can be found in the package\n[`garage.torch`](https://github.com/rlworkgroup/garage/tree/master/src/garage/torch)\nand TensorFlow modules can be found in the package\n[`garage.tf`](https://github.com/rlworkgroup/garage/tree/master/src/garage/tf).\nAlgorithms which do not require neural networks are found in the package\n[`garage.np`](https://github.com/rlworkgroup/garage/tree/master/src/garage/np). \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9299852113783027,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "The most important feature of garage is its comprehensive automated unit test\nand benchmarking suite, which helps ensure that the algorithms and modules in\ngarage maintain state-of-the-art performance as the software changes. \n* **Automation:**\n  We use continuous integration to test all modules and algorithms in garage\n  before adding any change. The full installation and test suite is also run\n  nightly, to detect regressions.\n* **Acceptance Testing:**\n  Any commit which might change the performance of an algorithm is subjected to\n  comprehensive benchmarks on the relevant algorithms before it is merged\n* **Benchmarks and Monitoring:**\n  We benchmark the full suite of algorithms against their relevant benchmarks\n  and widely-used implementations regularly, to detect regressions and\n  improvements we may have missed.\n \n",
                        "original_header": "Testing"
                    },
                    "confidence": 0.8929139256041204,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Maintenance releases have a stable API and dependency tree,\nand receive bug fixes and critical improvements but not new features. We\ncurrently support each release for a window of 2 months.\n \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.95267399695817,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "name": [
                {
                    "result": {
                        "value": "garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "full_name": [
                {
                    "result": {
                        "value": "rlworkgroup/garage",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "issue_tracker": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/issues",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_url": [
                {
                    "result": {
                        "value": "https://api.github.com/repos/rlworkgroup/garage/forks",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "stargazers_count": [
                {
                    "result": {
                        "value": 1838,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "keywords": [
                {
                    "result": {
                        "value": "pytorch, reproducibility, rl-algorithms, tensorflow",
                        "type": "String"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "forks_count": [
                {
                    "result": {
                        "value": 309,
                        "type": "Number"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "download_url": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/releases",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "programming_languages": [
                {
                    "result": {
                        "value": "Python",
                        "name": "Python",
                        "type": "Programming_language",
                        "size": 2697508
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Jupyter Notebook",
                        "name": "Jupyter Notebook",
                        "type": "Programming_language",
                        "size": 281272
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Shell",
                        "name": "Shell",
                        "type": "Programming_language",
                        "size": 23905
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Dockerfile",
                        "name": "Dockerfile",
                        "type": "Programming_language",
                        "size": 6738
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "value": "Makefile",
                        "name": "Makefile",
                        "type": "Programming_language",
                        "size": 4766
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "releases": [
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "tag": "v2020.10.0rc5",
                        "name": "2020.10.0rc5",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.10. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.10.0rc5",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.10.0rc5",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.10.0rc5",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/32103053",
                        "release_id": 32103053,
                        "date_created": "2020-10-02T04:53:19Z",
                        "date_published": "2020-10-02T17:12:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "tag": "v2020.06.3",
                        "name": "2020.06.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * PyTorch 1.7 support ([#1934](https://github.com/rlworkgroup/garage/pull/1934))\r\n  * `LocalRunner` ignores `worker_cls` attribute of algorithms ([#1984](https://github.com/rlworkgroup/garage/pull/1984))\r\n  * `mujoco_py` versions greater than v2.0.2.8 are incompatible with some GCC versions in conda ([#2000](https://github.com/rlworkgroup/garage/pull/2000))\r\n  * MTSAC not learning because it corrupts the termination signal by wrapping with `GarageEnv` twice ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC does not respect `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld examples do not use the correct number of tasks ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC now supports a separate `max_episode_length` for evalaution via the `max_episode_length_eval` hyperparameter ([#2029](https://github.com/rlworkgroup/garage/pull/2029))\r\n  * MTSAC MetaWorld MT50 example used an incorrect `max_episode_length` ([#2029](https://github.com/rlworkgroup/garage/pull/2029))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31290356",
                        "release_id": 31290356,
                        "date_created": "2020-09-14T22:28:21Z",
                        "date_published": "2020-09-14T22:30:57Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "tag": "v2020.09.0rc4",
                        "name": "2020.09.0rc4",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc4",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc4",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc4",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/31289666",
                        "release_id": 31289666,
                        "date_created": "2020-09-14T21:46:21Z",
                        "date_published": "2020-09-14T22:12:40Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "tag": "v2020.09.0rc3",
                        "name": "2020.09.0rc3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29945773",
                        "release_id": 29945773,
                        "date_created": "2020-08-20T19:05:26Z",
                        "date_published": "2020-08-20T19:23:53Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "tag": "v2020.06.2",
                        "name": "2020.06.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2020.06.\r\n\r\n- Fixed\r\n  * Better parameters for example `her_ddpg_fetchreach` ([#1763](https://github.com/rlworkgroup/garage/pull/1763))\r\n  * Ensure determinism in TensorFlow by using `tfp.SeedStream` ([#1821](https://github.com/rlworkgroup/garage/pull/1821))\r\n  * Broken rendering of MuJoCo environments to pixels in the NVIDIA Docker container ([#1838](https://github.com/rlworkgroup/garage/pull/1838))\r\n  * Enable cudnn in the NVIDIA Docker container ([#1840](https://github.com/rlworkgroup/garage/pull/1840))\r\n  * Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n  * Populate `TimeLimit.truncated` at every step when using `gym.Env` ([#1852](https://github.com/rlworkgroup/garage/pull/1852))\r\n  * Bug in which parameters where not copied when TensorFlow primitives are `clone()`ed ([#1855](https://github.com/rlworkgroup/garage/pull/1855))\r\n  * Typo in the `Makefile` target `run-nvidia` ([#1914](https://github.com/rlworkgroup/garage/pull/1914))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789990",
                        "release_id": 29789990,
                        "date_created": "2020-08-17T22:15:35Z",
                        "date_published": "2020-08-17T22:16:22Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "tag": "v2020.09.0rc2",
                        "name": "2020.09.0rc2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29790060",
                        "release_id": 29790060,
                        "date_created": "2020-08-17T20:59:43Z",
                        "date_published": "2020-08-17T22:19:49Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "tag": "v2019.10.3",
                        "name": "2019.10.3",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Better parameters for example `her_ddpg_fetchreach` ([#1764](https://github.com/rlworkgroup/garage/pull/1764))\r\n- Bug in `DiscreteQfDerivedPolicy` in which parameters were not returned ([#1847](https://github.com/rlworkgroup/garage/pull/1847))\r\n- Bug which made it impossible to evaluate stochastic policies deterministically ([#1715](https://github.com/rlworkgroup/garage/pull/1715))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.3",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.3",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.3",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/29789650",
                        "release_id": 29789650,
                        "date_created": "2020-08-11T19:09:27Z",
                        "date_published": "2020-08-17T22:05:39Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "tag": "v2020.06.1",
                        "name": "2020.06.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2020.06\r\n\r\n### Fixed\r\n  * Pipenv fails to resolve a stable dependency set because of excessively-narrow dependencies in tensorflow-probability ([#1721](https://github.com/rlworkgroup/garage/pull/1721))\r\n  * Bug which prevented `rollout` from running policies deterministically ([#1714](https://github.com/rlworkgroup/garage/pull/1714))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28522311",
                        "release_id": 28522311,
                        "date_created": "2020-07-13T23:07:14Z",
                        "date_published": "2020-07-13T23:09:08Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "tag": "v2020.09.0rc1",
                        "name": "2020.09.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a pre-release of v2020.09.0rc1. It contains changes to garage since v2020.06.0.\r\n\r\nThis pre-release makes cutting-edge features available via PyPI, but comes with no promises of support or bug fixes. If you encounter problems with this release, you are encouraged to either install from master or revert to the [v2020.06 release](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0).\r\n\r\nFor information on what to expected in garage v2020.09, see the [release notes for v2020.06.0](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.09.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.09.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.09.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/28234065",
                        "release_id": 28234065,
                        "date_created": "2020-07-03T23:59:43Z",
                        "date_published": "2020-07-05T17:59:19Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "tag": "v2019.10.2",
                        "name": "2019.10.2",
                        "author": {
                            "name": "ahtsan",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Fixed\r\n- Use a GitHub Token in the CI to retrieve packages to avoid hitting GitHub API rate limit ([#1250](https://github.com/rlworkgroup/garage/pull/1250))\r\n- Avoid installing dev extra dependencies during the conda check ([#1296](https://github.com/rlworkgroup/garage/pull/1296))\r\n- Install `dm_control` from PyPI ([#1406](https://github.com/rlworkgroup/garage/pull/1406))\r\n- Pin tfp to 0.8.x to avoid breaking pipenv ([#1480](https://github.com/rlworkgroup/garage/pull/1480))\r\n- Force python 3.5 in CI ([#1522](https://github.com/rlworkgroup/garage/pull/1522))\r\n- Separate terminal and completion signal in vectorized sampler ([#1581](https://github.com/rlworkgroup/garage/pull/1581))\r\n- Disable certicate check for roboti.us ([#1595](https://github.com/rlworkgroup/garage/pull/1595))\r\n- Fix `advantages` shape in `compute_advantage()` in torch tree ([#1209](https://github.com/rlworkgroup/garage/pull/1209))\r\n- Fix plotting using tf.plotter ([#1292](https://github.com/rlworkgroup/garage/pull/1292))\r\n- Fix duplicate window rendering when using garage.Plotter ([#1299](https://github.com/rlworkgroup/garage/pull/1299))\r\n- Fix setting garage.model parameters ([#1363](https://github.com/rlworkgroup/garage/pull/1363))\r\n- Fix two example jupyter notebook ([#1584](https://github.com/rlworkgroup/garage/pull/1584))\r\n- Fix collecting samples in `RaySampler` ([#1583](https://github.com/rlworkgroup/garage/pull/1583))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27859340",
                        "release_id": 27859340,
                        "date_created": "2020-06-24T06:35:22Z",
                        "date_published": "2020-06-24T06:48:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "tag": "v2020.06.0",
                        "name": "2020.06.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2020.06 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2020.06/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis released focused primarily on **adding first-class support for meta-RL and multi-task RL**. To achieve this, we rewrote the sampling API and subsystem completely, adding a Sampler API which is now multi-environment and multi-agent aware. We also added a library of baseline meta-RL and multi-task algorithms which reach state-of-the-art performance: MAML, PEARL, RL2, MTPPO, MTTRPO, MTSAC, Task Embeddings.\r\n\r\nHighlights in this release:\r\n* First-class support for meta-RL and multi-task RL, demonstrated using the [MetaWorld benchmark](https://github.com/rlworkgroup/metaworld)\r\n* More PyTorch algorithms, including MAML, SAC, MTSAC, PEARL, PPO, and TRPO ([97% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* More TensorFlow meta-RL algorithms, including RL2 and Task Embeddings ([95% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2020.06/src/garage/torch))\r\n* All-new Sampler API, with first-class support for multiple agents and environments\r\n* All-new experiment definition decorator [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py), which replaces the old `run_experiment` function\r\n* Continued improvements to quality and test coverage. Garage now has [90% overall test coverage](https://codecov.io/gh/rlworkgroup/garage/branch/release-2020.06)\r\n* Simplified and updated the Docker containers, adding better support for CUDA/nvidia-docker2 and removing the complex docker-compose based system\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n## First-class support for meta-RL and MTRL\r\nWe added first-class support for meta-RL and multi-task RL, including state-of-the-art performing versions of the following baseline algorithms:\r\n* [MAML](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/maml.py)\r\n* [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py)\r\n* [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py)\r\n* [Task Embeddings](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/te_ppo.py)\r\n* [MTTRPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_trpo.py)\r\n* [MTPPO](https://github.com/rlworkgroup/garage/blob/v2020.06.0/examples/tf/multi_env_ppo.py)\r\n* [MTSAC](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/mtsac.py)\r\n\r\nWe also added explicit support for [meta-task sampling](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/task_sampler.py) and [evaluation](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/meta_evaluator.py).\r\n\r\n## New Sampler API\r\nThe new [Sampler API](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/sampler.py) allows you to [define a custom worker](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/worker.py) or rollout function for your algorithm, to control the algorithm's sampling behavior. These `Worker`s are agnostic of the sampling parallelization backend used. This makes it easy to customize sampling behavior without forcing you to write your own sampler.\r\n\r\nFor example, you can define one `Worker` and use it to collect samples inside the local process, or alternatively use it to collect many samples in parallel using `multiprocessing`, without ever having to interact with `multiprocessing` code and synchronization. Both [RL2](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/tf/algos/rl2.py) and [PEARL](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/torch/algos/pearl.py) define custom workers, which allow them to implement the special sampling procedure necessary for these meta-RL algorithms.\r\n\r\nThe sampler is also aware of multiple policies and environments, allowing you to customize it for use with multi-task/meta-RL or multi-agent RL.\r\n\r\nCurrently-available sampling backends are:\r\n*  [`LocalSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/local_sampler.py) - collects samples serially within the main optimization process\r\n* [`MultiprocessingSampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/multiprocessing_sampler.py) - collects samples in parallel across multiple processors using the Python standard library's [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) library\r\n*  [`RaySampler`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/sampler/ray_sampler.py) - collect samples in parallel using a [`ray`](https://docs.ray.io/en/latest/) cluster (that cluster can just be your local machine, of course)\r\n\r\nThe API for defining a new `Sampler` backend is small and well-defined. If you have a new bright idea for a parallel sampler backend, send us a PR!\r\n\r\n## New Experiment Definition API\r\nWe added the [`@wrap_experiment`](https://github.com/rlworkgroup/garage/blob/v2020.06.0/src/garage/experiment/experiment.py) decorator, which defines the new standard way of declaring an experiment and its hyperparameters in garage. In short, an experiment is a function, and a hyperparameters are the arguments to that function. You can wrap your experiment function with `@wrap_experiment` to set experiment meta-data such as snapshot schedules and log directories.\r\n\r\nCalling your experiment function runs the experiment.\r\n\r\n`wrap_experiment` has features such as saving the current git context, automatically naming experiments, and automatically saving the hyperparameters of any experiment function it decorates. Take a look at the [`examples/` directory](https://github.com/rlworkgroup/garage/tree/v2020.06.0/examples) for hands-on examples of how to use it.\r\n\r\n## Improvements to quality and test coverage\r\nOverall test coverage increased from 85% to 90% since `v2019.10`, and we expect this to keep climbing. We also now define standard benchmarks for all algorithms in the separate [`benchmarks`](https://github.com/rlworkgroup/garage/tree/v2020.06.0/benchmarks) directory.\r\n\r\n### Why we skipped 2020.02\r\nOur focus on adding meta- and multi-task RL support required changing around and generalizing many APIs in garage. Around January 2020, this support existed, and we were in the process of polishing it for the February 2020 release. Around this time, our development was impacted by the COVID-19 pandemic, forcing many members of the garage core maintainers team to socially isolate in their homes, slowing down communication, and overall the development of garage. Rather than rushing to release the software during stressful times, the team decided to skip the February 2020 release and put together a much more polished version for this release milestone.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.09.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 18.04 and 20.04. We have also used it successfully on Ubuntu 16.04 and macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least February 2021. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2020.06`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2020.06`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2020.06.1`, the second would be tagged `v2020.06.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2020.06` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around late September 2020, e.g. `v2020.00`.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Complete documentation\r\nWe are working feverishly to document garage and its APIs, to give the toolkit a full user manual, how-tos, tutorials, per-algorithm documentation and baseline curves, and a reference guide motivating the design and usage of all APIs.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## More flexible packaging\r\nWe intend on removing hard dependencies on TensorFlow, PyTorch, and OpenAI Gym. Instead, garage will detect what software you have installed and activate features accordingly. This will make it much easier to mix-and-match garage features you'd like to take advantage of, without having to install a giant list of all possible garage dependencies into your project.\r\n\r\n## More algorithms and training environments\r\nWe plan on adding more multi-task and meta-RL methods, such as PCGrad and ProMP. We also plan to add better support for gameplay domains and associated DQN-family algorithms, and will start adding first-class support for imitation learning.\r\n\r\nFor training environments, we are actively working on adding PyBullet support.\r\n\r\n## What about TensorFlow 2.0 support?\r\nGiven the uncertainty about the future of TensorFlow, and frequent reports of performance regressions when using TF2, core maintainers have paused work on moving the TensorFlow tree to use the new TF2 eager execution semantics. Note that garage can be installed using TensorFlow 2, but will still make use of the Graph APIs under `tf.compat.v1`. We are also focusing new algorithm development on the PyTorch tree, but will continue to perform proactive maintenance and usability improvements in the TensorFlow tree. \r\n\r\nWe'll revisit this decision after the next release (`v2020.09`), when we hope the future of TensorFlow APIs is more clear. We suggest those who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nUsers who are eager to add garage support for TF2 are welcome to become contributors and start sending us Pull Requests.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* K.R. Zentner (@krzentner)\r\n* Anson Wong (@ahtsan)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Zequn Yu (@zequnyu)\r\n* Keren Zhu (@naeioi)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Mishari Aliesa (@maliesa96)\r\n* Yonghyun Cho (@yonghyuc)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Chang Su (@CatherineSue)\r\n* Eric Yihan Chen (@AiRuiChen)\r\n* Iris Liu (@irisliucy)\r\n* Ruofu Wang (@yeukfu)\r\n* Hayden Shively (@haydenshively)\r\n* Gagan Khandate (@gagankhandate)\r\n* Lucas Barcelos de Oliveira (@lubaroli)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.06.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.06.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/27848912",
                        "release_id": 27848912,
                        "date_created": "2020-06-23T20:21:00Z",
                        "date_published": "2020-06-23T23:01:17Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "tag": "v2020.05rc1",
                        "name": "2020.05rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "Pre-release of v2020.05",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.05rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.05rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.05rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26682537",
                        "release_id": 26682537,
                        "date_created": "2020-05-19T04:24:37Z",
                        "date_published": "2020-05-19T18:00:38Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "tag": "v2020.04rc1",
                        "name": "2020.04rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the second release candidate for the forthcoming `v2020.04` release. It contains several API changes and improvements over the `v2019.10` series, including more PyTorch algorithms and support for meta- and multi-task RL.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.04` release.\r\n\r\nNote: due to COVID-19, the 2020.02 release has been delayed to April, and will be numbered `v2020.04` to reflect this new reality.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.04rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.04rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.04rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/26013311",
                        "release_id": 26013311,
                        "date_created": "2020-04-29T08:39:32Z",
                        "date_published": "2020-04-29T16:20:30Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "tag": "v2020.02.0rc1",
                        "name": "2020.02.0rc1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is the first release candidate for the forthcoming `v2020.02` release. It contains several API changes and improvements over the `v2019.10` series.\r\n\r\nWe encourage users to install release candidates if they'd like cutting-edge features without the day-to-day instability of installing from tip. Please see the [release notes for `v2019.10`](https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0) for more info on what to expect in the `v2020.02` release.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2020.02.0rc1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2020.02.0rc1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2020.02.0rc1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22090064",
                        "release_id": 22090064,
                        "date_created": "2019-12-09T21:06:33Z",
                        "date_published": "2019-12-09T21:31:44Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "tag": "v2019.10.1",
                        "name": "2019.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.10.\r\n\r\n### Added\r\n- Integration tests which cover all example scripts ([#1078](https://github.com/rlworkgroup/garage/pull/1078), [#1090](https://github.com/rlworkgroup/garage/pull/1090))\r\n- Deterministic mode support for PyTorch ([#1068](https://github.com/rlworkgroup/garage/pull/1068))\r\n- Install script support for macOS 10.15.1 ([#1051](https://github.com/rlworkgroup/garage/pull/1051))\r\n- PyTorch modules now support either functions or modules for specifying their non-linearities ([#1038](https://github.com/rlworkgroup/garage/pull/1038))\r\n\r\n### Fixed\r\n- Errors in the documentation on implementing new algorithms ([#1074](https://github.com/rlworkgroup/garage/pull/1074))\r\n- Broken example for DDPG+HER in TensorFlow ([#1070](https://github.com/rlworkgroup/garage/pull/1070))\r\n- Error in the documentation for using garage with conda ([#1066](https://github.com/rlworkgroup/garage/pull/1066))\r\n- Broken pickling of environment wrappers ([#1061](https://github.com/rlworkgroup/garage/pull/1061))\r\n- `garage.torch` was not included in the PyPI distribution ([#1037](https://github.com/rlworkgroup/garage/pull/1037))\r\n- A few broken examples for `garage.tf` ([#1032](https://github.com/rlworkgroup/garage/pull/1032))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/22089940",
                        "release_id": 22089940,
                        "date_created": "2019-12-09T21:23:43Z",
                        "date_published": "2019-12-09T21:27:15Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "tag": "v2019.10.0",
                        "name": "2019.10.0",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.10 release of garage.\r\n\r\nAs always, **we are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\nThis release contains an immense number of improvements and new features for garage.\r\n\r\nIt includes:\r\n* PyTorch support, including DDPG and VPG ([94% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/torch))\r\n* Flexible new TensorFlow [Model API](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py) and complete re-write of the TensorFlow neural network library using it ([93% test coverage](https://codecov.io/gh/rlworkgroup/garage/tree/release-2019.10/src/garage/tf))\r\n* Better APIs for [defining](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py), [running](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), and [resuming](https://github.com/rlworkgroup/garage/blob/master/scripts/garage#L26) experiments\r\n* New logging API with [dowel](https://github.com/rlworkgroup/dowel), which allows a single `log()` call to stream logs of virtually any object to the screen, disk, CSV files, TensorBoard, and more.\r\n* New algorithms including (D)DQN and TD3 in TensorFlow, and DDPG and VPG in PyTorch\r\n* Distribution via PyPI -- you can now `pip install garage`!\r\n\r\nRead below for more information on what's new in this release. See [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n### Why we skipped 2019.06\r\nAfter 2019.02 we made some large, fundamental changes in garage APIs. Around June these APIs were defined, but the library was in limbo, with some components using new APIs and other using old APIs. Rather than release a half-baked version, we decided our time was better spent getting the toolkit in shape for the next release.\r\n\r\nWe intend to return to our regularly-scheduled release cadence for 2020.02.\r\n\r\n### PyTorch Support\r\nWe added the [`garage.torch`](https://github.com/rlworkgroup/garage/tree/release-2019.10/src/garage/torch) tree and primitives which allow you to define and train on-policy and off-policy algorithms in PyTorch.\r\n\r\nThough the tree is small, the algorithms in this this tree achieve state-of-the-art performance, have 94% test coverage, and use idiomatic PyTorch constructs with garage APIs. Expect to see many more algorithms and primitives in PyTorch in future releases.\r\n\r\n### `garage.tf.Model` API and TensorFlow primitives re-write\r\nThe `garage.tf.layers` library quickly became a maintenance burden, and was hindering progress in TensorFlow.\r\n\r\nTo escape from under this unmaintainable custom library, we embarked on a complete re-write of the TensorFlow primitives around a new API called [`garage.tf.Model`](https://github.com/rlworkgroup/garage/blob/release-2019.10/src/garage/tf/models/base.py). This new API allows you to use idiomatic TensorFlow APIs to define reusable components for RL algorithms such as Policies and Q-functions.\r\n\r\nDefining a new primitive in garage is easier than ever, and most components you want (e.g. MLPs, CNNs, RNNs) already exist as re-usable and composable `Model` classes.\r\n\r\n### Runner API and improvements to experiment snapshotting and resuming\r\nWe defined a new [Runner API](https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/local_runner.py), which unifies how all algorithms, samplers, and environments interact to create an experiment. Using `LocalRunner` handles many of the important minutiae of running a successful experiment, including logging, snapshotting, and consistent definitions of batch size and other hyperparameters.\r\n\r\n`LocalRunner` also makes it very easy to resume an experiment from an arbitrary iteration from disk, either using the Python API, or invoked from command line the `garage` command (e.g. `garage resume path/to/experiment`).\r\n\r\nSee the [examples](https://github.com/rlworkgroup/garage/tree/release-2019.10/examples) for how to run an algorithm using `LocalRunner`.\r\n\r\n###  Log anything to anywhere with [dowel](https://github.com/rlworkgroup/dowel)\r\nWe replaced the `garage.misc.logger` package with a new flexible logger, which is implemented in a new package called dowel.\r\n\r\ndowel has all of the features of the old logger, but a simpler well-defined API, and support logging any object to any number of outputs, provided a handler has been provided for that object and output. For instance, this allows us to log the TensorFlow graph to TensorBoard using a line like `logger.log(tf.get_default_graph())`, and a few lines below to log a message to the console like `logger.log('Starting training...')`.\r\n\r\nDowel knows how to log key-value pairs, TensorFlow graphs, strings, and even histograms. Defining new logger outputs and input handlers is easy. Currently dowel supports output to the console, text files, CSVs, TensorBoard. Add your own today!\r\n\r\n### `pip install garage`\r\nWe delivered many improvements to make garage installable using only `pip`. You no longer need to run a setup script to install system dependencies, unless you'd like support for MuJoCo. We now automatically release new versions to `pip`.\r\n\r\nThis also means using garage with the environment manager of your choice is easy. We test [virtualenv](https://virtualenv.pypa.io/en/latest/), [pipenv](https://pipenv.readthedocs.io/en/latest/), and [conda](https://docs.conda.io/en/latest/) in our CI pipeline to garage can always successfully install in your environment.\r\n\r\n### Extensive maintainability and documentation improvements\r\nThis release includes extensive maintainability and documentation improvements. Most of these are behind-the-scenes, but make an immense difference in the reliability and usability of the toolkit.\r\n\r\n**Highlights:**\r\n* Unit test coverage increased from ~30% to ~80%\r\n* Overall test coverage increased from ~50% to ~85%\r\n* Overall coverage for `garage.tf` and `garage.torch` (which is where algorithm-performance critical code lives) is ~94%\r\n* TensorFlow and PyTorch algorithms are benchmarked before every commit to master\r\n* Every primitive is pickleable/snapshottable and this is tested in the CI\r\n* Docstrings added to all major APIs, including type information\r\n* API documentation is automatically generated and posted to https://garage.readthedocs.io\r\n* Large amounts of old and/or unused code deleted, especially from `garage.misc`\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.13, 10.14, and 10.15.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2020. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.10.1`, the second would be tagged `v2019.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2020, e.g. `v2020.02`.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **meta- and multi-task RL algorithms** (and associated toolkit support) and **stable, well-defined component APIs** for fundamental RL abstractions such as `Policy`, `QFunction`, `ValueFunction`, `Sampler`, `ReplayBuffer`, `Optimizer`, etc.\r\n\r\n## Meta- and Mulit-Task RL\r\nWe are adding a full suite of meta-RL and multi-task RL algorithms to the toolkit, and associated toolkit support where necessary. We would like garage to be the gold standard library for meta- and multi-task RL implementations.\r\n\r\nAs always, all new meta- and multi-task RL algorithms will be thoroughly tested and verified to meet-or-exceed the best state-of-the-art implementation we can find.\r\n\r\n## Stable and well-defined component APIs\r\nThe toolkit has gotten mature-enough that most components have a fully-described formal API or an informal API which all components of that type implement, and large-enough that we have faith that our existing components cover most current RL use cases.\r\n\r\nNow we will turn to formalizing the major component APIs and ensuring that the components in garage all conform to these APIs. This will allow us to simplify lots of logic throughout the toolkit, and will make it easier to mix components defined outside garage with those defined inside garage.\r\n\r\n## Idiomatic TensorFlow model and `tensorflow_probability`\r\nWhile the implementation of the primitives using `garage.tf.Model` is complete, their external API still uses the old style from rllab which defines a new feedforward graph for every call to a symbolic API. For instance, a call to `GaussianMLPPolicy.log_likelihood_sym()` will create a copy of the `GaussianMLPPolicy` graph which implements `GaussianMLPPolicy.get_action()` (the two graphs share parameters so optimization results are unaffected). This is not idiomatic TensorFlow, and can be a source of confusion for algorithm implementers.\r\n\r\nNow that we have stable and well-tested back-end for the primitives, we will embark on simplifying their APIs to only have a single feedforward path. We will also transition to using [`tensorflow_probability`](https://www.tensorflow.org/probability) for modeling stochastic primitives.\r\n\r\nNow that TensorFlow has started to define first-party APIs for composable models (specifically `tf.Module` and `tf.keras.Model`), we will look into integrating these with `garage.tf.Model`.\r\n\r\n## What about TensorFlow 2.0 support?\r\nWe intend to support TensorFlow 2.x and eager execution in the near future, but it may take a release or two to get there. We believe that the `garage.tf.Model` API already makes writing neural network code for RL nearly as painless as TensorFlow 2.0, so most users won't notice much of a difference.\r\n\r\nWe suggest that who really need eager execution APIs today should instead focus on `garage.torch`.\r\n\r\nFor the coming release, we will focus on moving all of our algorithms and primitives to using idiomatic TensorFlow and TensorFlow Probability. Our in-progress transition to `garage.tf.Model` and idiomatic usage of TensorFlow will drastically reduce the amount of code which changes between TensorFlow 2.x and 1.x, so we will focus on that before embarking on TF2 support. This will also give TensorFlow 2.x APIs time to stabilize, and time for its performance to catch up to TensorFlow 1.x (there is currently a 10-20% performance hit for using eager execution).\r\n\r\nIf all goes well, we may be able to begin TF2 support around the 2020.06 release. If you are interested in seeing this happen faster, please contact us on the issue tracker and we will get you started helping with the port!\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Anson Wong (@ahtsan)\r\n* Nisanth Hegde (@nish21)\r\n* Keren Zhu (@naeioi)\r\n* Zequn Yu (@zequnyu)\r\n* Gitanshu Sardana (@gitanshu)\r\n* Utkarsh Patel (@utkarshjp7)\r\n* Avnish Narayan (@avnishn)\r\n* Linda Wong (@lywong92)\r\n* Yong Cho (@yonghyuc)\r\n* K.R. Zentner (@krzentner)\r\n* Peter Lillian (@pelillian)\r\n* Angel Ivan Gonzalez (@gonzaiva)\r\n* Kevin Cheng (@cheng-kevin)\r\n* Chang Su (@CatherineSue)\r\n* Jonathon Shen (@jonashen)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Shadi Akiki (@shadiakiki1986)\r\n* Nate Pham (@nhanph)\r\n* Dhiaeddine Gharsallah (@dgharsallah)\r\n* @wyjw \r\n\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210623",
                        "release_id": 21210623,
                        "date_created": "2019-11-05T04:28:16Z",
                        "date_published": "2019-11-05T21:24:34Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "tag": "v2019.02.2",
                        "name": "2019.02.2",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for 2019.02.\r\n\r\n**This is the final maintenance release for this version, as described in our [maintenance plan](https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0).**\r\n\r\nUsers should expect no further bug fixes for 2019.02, and should plan on moving their projects onto 2019.10 ASAP. Maintainers will accept PRs for the 2019.02 branch which fully conform to the [contributor's guide](https://github.com/rlworkgroup/garage/blob/master/CONTRIBUTING.md), but will not proactively backport new fixes into the release branch.\r\n\r\nThis release fixes several small bugs:\r\n- Improper implementation of entropy regularization in TensorFlow PPO/TRPO ([#579](https://github.com/rlworkgroup/garage/pull/579))\r\n- Broken advantage normalization was broken for recurrent policies ([#626](https://github.com/rlworkgroup/garage/pull/626))\r\n- Bug in `examples/sim_policy.py` ([#691](https://github.com/rlworkgroup/garage/pull/691))\r\n- `FiniteDifferenceHvp` was not pickleable ([#745](https://github.com/rlworkgroup/garage/pull/745))",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.2",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.2",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.2",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21210007",
                        "release_id": 21210007,
                        "date_created": "2019-11-05T02:49:21Z",
                        "date_published": "2019-11-05T03:02:50Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "tag": "v2019.02.1",
                        "name": "2019.02.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2019.02.\r\n\r\nThis release fixes a bug (#622) in GaussianMLPRegressor which causes many on-policy algorithms to run slower with each iteration, eventually virtually-stopping the training process.\r\n\r\nProjects based on v2019.02 are encouraged to upgrade ASAP.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/21209935",
                        "release_id": 21209935,
                        "date_created": "2019-04-24T22:58:26Z",
                        "date_published": "2019-11-05T02:54:03Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "tag": "v2019.02.0",
                        "name": "2019.02",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2019.02 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2019.02/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n### Splitting garage into packages\r\nMost changes in this released are focused on moving garage towards a modular future. We are moving the framework from a single monolithic repository to a family of independent Python packages, where each package serves a well-defined single purpose.\r\n\r\nThis will help garage have the widest impact by:\r\n* Allowing users to pick-and-choose which parts of the software fit well for their project, making using garage not an all-or-nothing decision\r\n* Making the the framework more stable, because smaller codebases are easier to test and maintain\r\n* Making it easier to introduce new frameworks (e.g. PyTorch) and features more easily, by forcing API separation between different parts of the software\r\n* Separating parts of the software at different maturity levels into different packages, making it easier for users to know which parts are stable and well-tested, and which parts are experimental and quickly-changing\r\n\r\nIn service of that goal, in this release we moved 3 packages to independent repositories with their own packages on PyPI (e.g. you can `pip install <package>`).\r\n* [akro](https://github.com/rlworkgroup/akro): Spaces types for reinforcement learning (from `garage.spaces`)\r\n* [viskit](https://github.com/rlworkgroup/viskit): Hyperparamter-tuning dashboard for reinforcement learning experiments (from `garage.viskit`)\r\n* [metaworlds](https://github.com/rlworkgroup/metaworlds): Environments for benchmarking meta-learning and multi-task learning (from `garage.envs.mujoco` and `garage.envs.box2d`)\r\n* [gym-sawyer](https://github.com/rlworkgroup/gym-sawyer): Simulations and ROS bindings for the Sawyer robot, based on the openai/gym interface (from `garage.envs.mujoco.sawyer` and `garage.envs.ros`)\r\n\r\n### Deleting redundant or unused code\r\nWe've also started aggressively deleting unused code, or code where a better implementation already exists in the community. The largest example of this is MuJoCo and Box2D environments, many of which we removed because they have well-tested equivalents in [openai/gym](https://github.com/openai/gym). Expect to find many other smaller examples in this and future releases.\r\n\r\n### Deleting Theano\r\nWe completed feature-parity between the Theano and TensorFlow trees, and deleted the Theano tree because we have not found any future interest in maintaining it. We made sure to port over all algorithms available in Theano to TensorFlow before making this change.\r\n\r\n### Preparing garage for PyTorch and other frameworks\r\nWe have started a full rewrite of the experiment definition, experiment deployment, snapshotting, and logging functionality in garage. This will allow new algorithm libraries or research projects to easily use garage tooling (e.g. logging, snapshotting, environment wrappers), irrespective of what numerical framework they use.\r\n\r\n### conda is now optional\r\nWhile we still use conda in the CI environment for garage, we've moved all Python dependency information into a canonical `setup.py` file. While we are not releasing garage on PyPI yet, this means you can use any Python environment manager you'd like (e.g. pipenv, virtualenv, etc.) for your garage projects. In the future, we will add CI checks to make sure that the environment installs successfully in the most popular Python environment managers.\r\n\r\n### Primitives for pixel-based policies\r\nWe added CNN and wrapper primitives useful for pixel-based algorithms. Our implementation of DQN is forthcoming, since we are still benchmarking to make we can guarantee state-of-the-art performance.\r\n\r\n### Updated Docker support\r\nWe completely rewrote the garage Dockerfiles, added docker-compose examples for using them in your projects, and added a Makefile to help you easily execute your experiments using Docker (for both CPU and GPU machines). We use these Dockerfiles to run out own CI environment, so you can be sure that they are always updated.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features should use the release branch and tags.\r\n\r\nAs always, we recommend existing rllab users migrate their code to a garage release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04 and 18.04. We have also used it successfully on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least October 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2019.02`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2019.02`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2019.02.1`, the second would be tagged `v2019.02.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2019.02` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\nWe hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early June 2019, e.g. `v2019.06`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two related goals: **PyTorch support** and **completely-revamped component APIs**. These are linked because gracefully supporting more than one framework requires well-defined interfaces for the sampler, logger, snapshotter, RL agent, and other components. \r\n\r\nFor TensorFlow algorithms development, we are focusing on adding a full suite of pixel-oriented RL algorithms to the TensorFlow tree, and on adding meta-RL algorithms to and associated new interfaces. We will also finish removing the custom `layers` library from the TensorFlow tree, and replacing it with code based on vanilla TensorFlow, a new abstraction called `Model`(inspired by the [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#module) interface). We will also finish removing the custom `garage.tf.distributions` library and replacing it with fully-differentiable components from [`tensorflow-probability`](https://www.tensorflow.org/probability).\r\n\r\nFor PyTorch algorithms development, we hope to add garage support to a fork of [rlkit](https://github.com/vitchyr/rlkit), to prove the usefulness of our tooling for different algorithm libraries.\r\n\r\nYou can expect to see several more packages split from garage (e.g. the TensorFlow algorithm suite and experiment runner/sampler/logger), along with many API changes which make it easier to use those components independently from the `garage` codebase.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Chang Su (@CatherineSue)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Anson Wong (@ahtsan)\r\n* Keren Zhu (@naeioi)\r\n* K.R. Zentner (@krzentner)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Jonathon Shen (@jonashen)\r\n* Gautam Salhotra (@gautams3)",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2019.02.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2019.02.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2019.02.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849303",
                        "release_id": 15849303,
                        "date_created": "2019-03-01T02:06:48Z",
                        "date_published": "2019-03-02T01:41:58Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "tag": "v2018.10.1",
                        "name": "2018.10.1",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "This is a maintenance release for v2018.10. It contains several bug fixes on top of the v2018.10.0 release, but no new features and API changes.\r\n\r\nWe encourage projects based on v2018.10.0 to rebase onto v2018.10.1 without fear, so that they can enjoy better stability.",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.1",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.1",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.1",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/15849169",
                        "release_id": 15849169,
                        "date_created": "2019-02-28T22:54:00Z",
                        "date_published": "2019-03-01T02:11:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                },
                {
                    "result": {
                        "type": "Release",
                        "value": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "tag": "v2018.10.0",
                        "name": "2018.10",
                        "author": {
                            "name": "ryanjulian",
                            "type": "User"
                        },
                        "description": "The Reinforcement Learning Working Group is proud to announce the 2018.10 release of garage.\r\n\r\n**We are actively seeking new contributors**. If you use garage, please consider submitting a PR with your algorithm or improvements to the framework.\r\n\r\n# Summary\r\nThis release's life began as a maintenance fork of [rllab](https://github.com/rll/rllab). The original authors of rllab, current maintainers, and heavy users conferred about the future of the project. We reached a consensus to continue development of rllab under the new name \"garage,\" and to organize future development within a GitHub organization which is detached from any particular institution. We named this organization the [Reinforcement Learning Working Group](https://github.com/rlworkgroup).\r\n\r\nMost changes in this release concern stability, dependency updates, platform support, testing, and maintainability. We added many pieces of automation which are invisible to everyday users, but greatly assist in speeding garage development and keeping the framework stable. We have made many attempts to remove code which we did not think we could support in the future, though some unstable parts (e.g. viskit, EC2 support in `garage.misc.instrument`) remain and should be treated with caution. We welcome PRs for features which need updates and improvements.\r\n\r\nWe finished building out the TensorFlow tree, added a few algorithms in TensorFlow (e.g. PPO, TRPO, DDPG with HER), and promoted it out of sandbox into the main tree as `garage.tf`.\r\n\r\nLikewise, we moved all Theano-specific modules into their own subtree (`garage.theano`) to separate the framework-agnostic and framework-specific parts of garage clearly. \r\n\r\nNew features include TensorBoard support in the logger, support for dm_control environments, and a general implementation of dynamics randomization for MuJoCo-based environments.\r\n\r\nUsers migrating their projects from [rllab](https://github.com/rll/rllab) should consult the [migration instructions](#migrating-from-rllab) below.\r\n\r\nPlease see the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for detailed information on the changes in this release.\r\n\r\n## Who should use this release, and how\r\nUsers who want to base a project on a semi-stable version of this software, and are not interested in bleeding-edge features (e.g. PyTorch support) should use the release branch and tags. We also recommend existing rllab users migrate their code to this release ASAP.\r\n\r\n## Platform support\r\nThis release has been tested extensively on Ubuntu 16.04. We have also used it successfully on Ubuntu 18.04 and on macOS 10.12, 10.13, and 10.14.\r\n\r\n# Maintenance Plan\r\nWe plan on supporting this branch until at least June 2019. Our support will come mostly in the form of attempting to reproduce and fix critical user-reported bugs, conducting quality control on user-contributed PRs to the release branch, and releasing new versions when fixes are committed.\r\n\r\n**We haven no intention of performing proactive maintenance such as dependency upgrades, nor new features, tests, platform support, or documentation**. However, we welcome PRs to the maintenance branch (`release-2018.10`) from contributors wishing see these enhancements to this version of the software.\r\n\r\n## Hotfixes\r\nWe will post backwards-compatible hotfixes for this release to the branch `release-2018.10`. New hotfixes will also trigger a new release tag which complies with [semantic versioning](http://semver.org/), i.e. the first hotfix release would be tagged `v2018.10.1`, the second would be tagged `v2018.10.2`, etc.\r\n\r\nWe will not add new features, nor remove existing features from the branch `release-2018.10` unless it is absolutely necessary for the integrity of the software.\r\n\r\n## Next release\r\n`v2018.10` marks the first in what will hopefully be a long line of regular releases. We hope to release 2-3 times per year, approximately aligned with the North American academic calendar. We hope to release next around early February 2019, e.g. `v2019.02`.\r\n\r\nSee [Looking forward](#looking-forward) for more information on what to expect in the next release.\r\n\r\n# Migrating from rllab\r\ngarage is based on a predecessor project called [rllab](https://github.com/rll/rllab). Migrating from rllab to garage should be mostly painless, but not completely automatic. Some classes and functions from rllab have been renamed, moved, or had their signatures changed. Very few have been removed. Follow the process below to migrate.\r\n\r\n1. Install the `garage` conda environment\r\nExecute the installation script for [Linux](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_linux.sh) or [macOS](https://github.com/rlworkgroup/garage/blob/master/scripts/setup_macos.sh). This will create a separate conda environment named \"garage\" will, so there won't be any conflicts with a previous installation of a \"rllab\" environment. However, be aware that both scripts try to install miniconda, so there could be conflicts if you already have a different conda installation. If you're not using conda for other purpose, the best option is to remove it as indicated [here](https://conda.io/docs/user-guide/install/linux.html?highlight=uninstall#uninstalling-anaconda-or-miniconda). For a more granular installation of garage, read the installation scripts and only execute those commands that are required for your system.\r\n\r\n2. Rebase or retarget your repository on `garage`\r\nThis step will be very specific to your project. Essentially, get garage into your PYTHONPATH, e.g. by moving your rllab sandbox into `garage/sandbox`, or by editing your environment configuration. \r\n\r\n3. Replace `rllab` package imports with `garage` package imports\r\ne.g. `from rllab.core import Serializable` becomes `from garage.core import Serializable`. Note that some import paths have changed. Please check the [CHANGELOG](https://github.com/rlworkgroup/garage/blob/release-2018.10/CHANGELOG.md) for hints at where to look for changes which affect your project\r\n\r\n4. Run your launcher files and tests, and make sure everything is working as-expected. Fix errors as you find them.\r\n\r\n# Looking forward\r\nThe next release of garage will focus primarily on two goals: **PyTorch support** and **splitting garage** into federated packages.\r\n\r\nOur goal is to make the software foundation for reproducible reinforcement learning research. That requires good maintenance, stability, and widespread adoption. We believe breaking garage up is necessary to ensure the future maintainability of the project, and to speed adoption.\r\n\r\nThe next release will likely bring many breaking changes to garage, along with a new federated project structure which splits what is currently called garage into a family of several Python packages with independent repositories, development infrastructure, dependency management, and documentation. The federated packages will be pip dependencies which may be downloaded and used in any project.\r\n\r\nToday, using garage is an all-or-nothing choice for a prospective user. He or she may either buy into the entire ecosystem — algorithms, experiment runner, conda environment, custom environments, plotter, etc. — or use none of it at all.\r\n\r\n**Our goal for the next release is to take the first steps towards unbundling garage into a family easy-to-adopt Python packages with well-designed interfaces which allow them to easily work together, or be used separately.** Stay tuned to this GitHub repository for details and proposals, and to give your own input.\r\n\r\nHere's an example of how a federated garage might be split into packages:\r\n\r\n**Experiment runner**\r\n* Experiment runner framework and algorithm interface (parallel samplers, logging, live plotting, deployment support for local, EC2, GCP targets, etc.). Contains abstractions for defining experiments, running them, monitoring them, collecting results, and visualizing results.\r\n\r\n    Likely based on [lagom](https://github.com/zuoxingdong/lagom) and/or [ray](https://github.com/ray-project/ray)\r\n\r\n**Algorithm libraries**\r\n* Library of numpy-based RL algorithms, math utilities for RL, and useful algorithm base classes\r\n* Library of TensorFlow-based algorithms\r\n* **Library of PyTorch-based RL algorithms**\r\n\r\n    **Note: we plan on removing Theano support by the next release.**\r\n\r\n**Environments**\r\n* `gym.Env` wrappers and dependency management for popular environments (e.g. dm_control, ALE, pybullet)\r\n* Custom single-task environments\r\n* Custom multi-task/meta-learning environments and supporting wrappers\r\n* Custom robotics environments, and bindings to ROS for real robot execution\r\n\r\n**Utilities**\r\n* A small library of Python types for RL (e.g. `garage.spaces`)\r\n* Experiment results visualization toolkit (e.g. viskit)\r\n\r\n**Distribution Repository (garage)**\r\ngarage becomes an application repository which pulls all of the above together into a single environment, and demonstrates how to use them. New projects can use garage as a template or as an upstream.\r\n\r\n# Contributors to this release\r\n* Ryan Julian (@ryanjulian)\r\n* Jonathon Shen (@jonashen)\r\n* Angel Ivan-Gonzalez (@gonzaiva)\r\n* Chang Su (@CatherineSue)\r\n* Hejia Zhang (@hjzh4)\r\n* Zhanpeng He (@zhanpenghe)\r\n* Junchao Chen (@cjcchen)\r\n* Keren Zhu (@naeioi)\r\n* Peter Lillian (@pelillian)\r\n* Gautam Salhotra (@gautams3)\r\n* Anson Wong (@ahtsan)\r\n",
                        "tarball_url": "https://api.github.com/repos/rlworkgroup/garage/tarball/v2018.10.0",
                        "zipball_url": "https://api.github.com/repos/rlworkgroup/garage/zipball/v2018.10.0",
                        "html_url": "https://github.com/rlworkgroup/garage/releases/tag/v2018.10.0",
                        "url": "https://api.github.com/repos/rlworkgroup/garage/releases/13761418",
                        "release_id": 13761418,
                        "date_created": "2018-10-31T17:33:28Z",
                        "date_published": "2018-10-31T18:32:13Z"
                    },
                    "confidence": 1,
                    "technique": "GitHub_API"
                }
            ],
            "readme_url": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "contributing_guidelines": [
                {
                    "result": {
                        "value": "# Contributing to garage\nWe welcome all contributions to garage.\n\nUse this guide to prepare your contribution.\n\n## Pull requests\nAll contributions to the garage codebase are submitted via a GitHub pull request.\n\n### Review process\nTo be submitted, a pull request must satisfy the following criteria:\n1. Rebases cleanly on the `master` branch\n1. Passes all continuous integration tests\n1. Conforms to the git commit message [format](#commit-message-format)\n1. Receives approval from another contributor\n1. Receives approval from a maintainer (distinct from the contributor review)\n\nThese criteria may be satisfied in any order, but in practice your PR is unlikely to get attention from contributors until 1-3 are satisfied. Maintainer attention is a scarce resource, so generally maintainers wait for a review from a non-maintainer contributor before reviewing your PR.\n\n## Preparing your repo to make contributions\nAfter following the standard garage setup steps, make sure to run to install the pre-commit hooks into your repository. pre-commit helps streamline the pull request process by catching basic problems locally before they are checked by the CI.\n\nTo setup pre-commit in your repo:\n```sh\n# make sure your Python environment is activated, e.g.\n# conda activate garage\n# pipenv shell\n# poetry shell\n# source venv/bin/activate\npre-commit install -t pre-commit\npre-commit install -t pre-push\npre-commit install -t commit-msg\n```\n\nOnce you've installed pre-commit, it will automatically run every time you type `git commit`.\n\n## Code style\nThe Python code in garage conforms to the [PEP8](https://www.python.org/dev/peps/pep-0008/) standard. Please read and understand it in detail.\n\n### garage-specific Python style\nThese are garage-specific rules which are not part of the aforementioned style guides.\n\n* Python package imports should be sorted alphabetically within their PEP8 groupings.\n\n    The sorting is alphabetical from left to right, ignoring case and Python keywords (i.e. `import`, `from`, `as`). Notable exceptions apply in `__init__.py` files, where sometimes this rule will trigger a circular import.\n\n* Prefer single-quoted strings (`'foo'`) over double-quoted strings (`\"foo\"`).\n\n    Double-quoted strings can be used if there is a compelling escape or formatting reason for using single quotes (e.g. a single quote appears inside the string).\n\n* Prefer [f-strings](https://www.python.org/dev/peps/pep-0498) for string interpolation.\n\n    Keep this consistent within a file. When editing a file, if you encounter non f-string interpolation syntax (e.g. `'Hello, {}!.format('World)` or `'Hello, %s!' % 'World'`), either use the existing format or convert all interpolations in the file to use f-strings.\n\n* Add convenience imports in `__init__.py` of a package for shallow first-level repetitive imports, but not for subpackages, even if that subpackage is defined in a single `.py` file.\n\n    For instance, if an import line reads `from garage.foo.bar import Bar` then you should add `from garage.foo.bar import Bar` to `garage/foo/__init__.py` so that users may instead write `from garage.foo import Bar`. However, if an import line reads `from garage.foo.bar.stuff import Baz`, *do not* add `from garage.foo.bar.stuff import Baz` to `garage/foo/__init__.py`, because that obscures the `stuff` subpackage.\n\n    *Do*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo.stuff import Baz\n    ```\n\n    *Don't*\n\n    `garage/foo/__init__.py`:\n    ```python\n    \"\"\"Foo package.\"\"\"\n    from garage.foo.bar import Bar\n    from garage.foo.bar.stuff import Baz\n    ```\n    `garage/barp/bux.py`:\n    ```python\n    \"\"\"Bux tools for barps.\"\"\"\n    from garage.foo import Bar\n    from garage.foo import Baz\n    ```\n* Imports within the same package should be absolute, to avoid creating circular dependencies due to convenience imports in `__init__.py`\n\n    *Do*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo.baz import Baz\n\n    b = Baz()\n    ```\n\n    *Don't*\n\n    `garage/foo/bar.py`\n    ```python\n    from garage.foo import Baz  # this could lead to a circular import, if Baz is imported in garage/foo/__init__.py\n\n    b = Baz()\n    ```\n\n* Base and interface classes (i.e. classes which are not intended to ever be instantiated) should use the `abc` package to declare themselves as abstract.\n\n   i.e. your class should inherit from `abc.ABC` or use the metaclass `abc.ABCMeta`, it should declare its methods abstract (e.g. using `@abc.abstractmethod`) as-appropriate. Abstract methods should all use `pass` as their implementation, not `raise NotImplementedError`\n\n   *Do*\n   ```python\n   import abc\n\n   class Robot(abc.ABC):\n       \"\"\"Interface for robots.\"\"\"\n\n       @abc.abstractmethod\n       def beep(self):\n           pass\n    ```\n\n    *Don't*\n    ```python\n\n    class Robot(object):\n        \"Base class for robots.\"\"\"\n\n        def beep(self):\n            raise NotImplementedError\n    ```\n\n* When using external dependencies, use the `import` statement only to import whole modules, not individual classes or functions.\n\n    This applies to both packages from the standard library and 3rd-party dependencies. If a package has a long or cumbersome full path, or is used very frequently (e.g. `numpy`, `tensorflow`), you may use the keyword `as` to create a file-specific name which makes sense. Additionally, you should always follow the community concensus short names for common dependencies (see below).\n\n    *Do*\n    ```python\n    import collections\n\n    import gym.spaces\n\n    from garage.tf.models import MLPModel\n\n    q = collections.deque(10)\n    d = gym.spaces.Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Don't*\n    ```python\n    from collections import deque\n\n    from gym.spaces import Discrete\n    import tensorflow as tf\n\n    from garage.tf.models import MLPModel\n\n    q = deque(10)\n    d = Discrete(5)\n    m = MLPModel(output_dim=2)\n    ```\n\n    *Known community-concensus imports*\n    ```python\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import tensorflow as tf\n    import tensorflow_probability as tfp\n    import torch.nn as nn\n    import torch.nn.functional as F\n    import torch.optim as optim\n    import dowel.logger as logger\n    import dowel.tabular as tabular\n    ```\n\n### Other languages\nNon-Python files (including XML, HTML, CSS, JS, and Shell Scripts) should follow the [Google Style Guide](https://github.com/google/styleguide) for that language\n\nYAML files should use 2 spaces for indentation.\n\n### Whitespace (all languages)\n* Use Unix-style line endings\n* Trim trailing whitespace from all lines\n* All files should end in a single newline\n\n## Documentation\nPython files should provide docstrings for all public methods which follow [PEP257](https://www.python.org/dev/peps/pep-0257/) docstring conventions and [Google](http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) docstring formatting. A good docstring example can be found [here](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n\n### Docstrings\n* Docstrings for `__init__` should be included in the class docstring as suggested in the [Google example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\n* Docstrings should provide full type information for all arguments, return values, exceptions, etc. according to the Google format\n* When documenting fields which are numpy arrays or other tensor types (and collections thereof), please carefully document the expected input shape of the field. See below for shape conventions.\n* For shapes and equations, use the Sphinx `:math:` directive to render them properly with mathematical symbols.\n\n#### Conventions for documenting tensor shapes\nData which include a meaningful time-series dimension (e.g. trajectories) should always document that dimension explicitly, even if that dimension has been flattened out. Data containing only non time-series samples should omit the time dimension.\n\nAlways use the Sphinx `:math:` directive to render your shapes properly.\n\n| Symbol    | Description                                                                                                   |\n|-----------|---------------------------------------------------------------------------------------------------------------|\n| `(...)`   | Tensor shapes are enclosed in parentheses, e.g a batch of `(N, S^*)` samples                                  |\n| `N`       | Batch dimension (e.g. trajectories or samples)                                                                |\n| `T`       | Time dimension                                                                                                |\n| `.^*`     | Variadic parts of a tensor shape, which will be broadcast or ignored are denoted with a `*`, e.g. `S^*`       |\n| `[.]`     | Variable-length dimensions are enclosed in square brackets, e.g. `[K]` if `K` is the dimension variable       |\n| `\\bullet` | Flattening operator, e.g. `N \\bullet T` has length `N * T`. `N \\bullet [T]` has length `\\sum_{i \\in N} [T]_i` |\n\n**Example**\n```python\ndef concatenate_time(paths):\n    \"\"\"Concatenate a list of variable-length tensors along the time dimemsion.\n\n    Concatenates a list `paths` of `N` variable-length time-series tensors\n    along their time dimension, producing a single time-series tensor with the\n    component tensors arranged along a single batch dimension.\n\n    Args:\n        paths (list[numpy.ndarray]): A list of :math:`N` tensors to combine\n            into a single batch of tensors, with elements of shape\n            :math:`([T], S^*)`\n\n    Returns:\n        numpy.ndarray: Time-flattened version of `paths`, with shape\n            :math:`(N \\bullet [T], S^*)`\n    \"\"\"\n```\n\n### Application guide\n**Newly created** Python files should follow all of the above standards for docstrings.\n\n**Non-trivially modified** Python files should be submitted with updated docstrings according to the above standard.\n\n**New or heavily-redesigned** modules with non-trivial APIs and functionality should provide full text documentation, in addition to docstrings, which covers:\n* Explanation of the purpose of the module or API\n* Brief overview of its design\n* Usage examples for the most common use cases\n* Explicitly calls out common gotchas, misunderstandings, etc.\n* A quick summary of how to go about advanced usage, configuration, or extension\n\n## Testing\ngarage maintains a test suite to ensure that future changes do not break existing functionality. We use TravisCI to run a unit test suite on every pull request before merging.\n\n* New functionality should always include unit tests and, where appropriate, integration tests.\n* PRs fixing bugs which were not caught by an existing test should always include a test replicating the bug\n\n### Creating Tests\nAdd a test for your functionality under the `garage/tests/` directory. Make sure your test filename is prepended with test(i.e. `test_<filename>.py`) to ensure the test will be run in the CI.\n\n## Git\n\n### Workflow\n__garage uses a linear commit history and rebase-only merging.__\n\nThis means that no merge commits appear in the project history. All pull requests, regardless of number of commits, are squashed to a single atomic commit at merge time.\n\nDo's and Don'ts for avoiding accidental merge commits and other headaches:\n* *Don't* use GitHub's \"Update branch\" button on pull requests, no matter how tempting it seems\n* *Don't* use `git merge`\n* *Don't* use `git pull` (unless git tells you that your branch can be fast-forwarded)\n* *Don't* make commits in the `master` branch---always use a feature branch\n* *Do* fetch upstream (`rlworkgroup/garage`) frequently and keep your `master` branch up-to-date with upstream\n* *Do* rebase your feature branch on `master` frequently\n* *Do* keep only one or a few commits in your feature branch, and use `git commit --amend` to update your changes. This helps prevent long chains of identical merges during a rebase.\n\nPlease see [this guide](https://gist.github.com/markreid/12e7c2203916b93d23c27a263f6091a0) for a tutorial on the workflow. Note: unlike the guide, we don't use separate `develop`/`master` branches, so all PRs should be based on `master` rather than `develop`\n\n### Commit message format\ngarage follows the git commit message guidelines documented [here](https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53) and [here](https://chris.beams.io/posts/git-commit/). You can also find an in-depth guide to writing great commit messages [here](https://github.com/RomuloOliveira/commit-messages-guide/blob/master/README.md)\n\nIn short:\n* All commit messages have an informative subject line of 50 characters\n* A newline between the subject and the body\n* If relevant, an informative body which is wrapped to 72 characters\n\n### Git recipes\n\nThese recipes assume you are working out of a private GitHub fork.\n\nIf you are working directly as a contributor to `rlworkgroup`, you can replace references to `rlworkgroup` with `origin`. You also, of course, do not need to add `rlworkgroup` as a remote, since it will be `origin` in your repository.\n\n#### Clone your GitHub fork and setup the rlworkgroup remote\n```sh\ngit clone git@github.com:<your_github_username>/garage.git\ncd garage\ngit remote add rlworkgroup git@github.com:rlworkgroup/garage.git\ngit fetch rlworkgroup\n```\n\n#### Update your GitHub fork with the latest from upstream\n```sh\ngit fetch rlworkgroup\ngit reset --hard master rlworkgroup/master\ngit push -f origin master\n```\n\n#### Make a new feature branch and push it to your fork\n```sh\ngit checkout master\ngit checkout -b myfeaturebranch\n# make some changes\ngit add file1 file2 file3\ngit commit # Write a commit message conforming to the guidelines\ngit push origin myfeaturebranch\n```\n\n#### Rebase a feature branch so it's up-to-date with upstream and push it to your fork\n```sh\ngit checkout master\ngit fetch rlworkgroup\ngit reset --hard rlworkgroup/master\ngit checkout myfeaturebranch\ngit rebase master\n# you may need to manually reconcile merge conflicts here. Follow git's instructions.\ngit push -f origin myfeaturebranch # -f is frequently necessary because rebases rewrite history\n```\n\n## Release\n\n### Modify CHANGELOG.md\nFor each release in garage, modify [CHANGELOG.md](https://github.com/rlworkgroup/garage/blob/master/CHANGELOG.md) with the most relevant changes from the latest release. The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), which adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n",
                        "type": "File_dump"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/CONTRIBUTING.md"
                }
            ],
            "documentation": [
                {
                    "result": {
                        "value": "https://github.com/rlworkgroup/garage/tree/master/docs",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "type": "Url",
                        "value": "https://garage.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "has_script_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-runtime.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/entrypoint-headless.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_linux.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_macos.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/setup_colab.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_precommit.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_no_deps_changed.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/scripts/ci/check_docs_only.sh",
                        "type": "Url"
                    },
                    "confidence": 1,
                    "technique": "file_exploration"
                }
            ],
            "has_build_file": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile",
                        "type": "Url",
                        "format": "dockerfile"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docker/Dockerfile"
                }
            ],
            "executable_example": [
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/custom_env.ipynb"
                },
                {
                    "result": {
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb",
                        "type": "Url",
                        "format": "jupyter_notebook"
                    },
                    "confidence": 1,
                    "technique": "file_exploration",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/src/garage/examples/jupyter/trpo_gym_tf_cartpole.ipynb"
                }
            ],
            "installation": [
                {
                    "result": {
                        "value": "```\npip install --user garage\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Installation",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "See the [latest documentation](https://garage.readthedocs.org/en/latest/) for\ngetting started instructions and detailed APIs.\n \n",
                        "original_header": "garage"
                    },
                    "confidence": 0.888165541876968,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "Need some help? Want to ask garage is right for your project? Have a question\nwhich is not quite a bug and not quite a feature request? \n",
                        "original_header": "Join the Community"
                    },
                    "confidence": 0.9128931506963142,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Algorithm              | Framework(s)        |\n| ---------------------- | ------------------- |\n| CEM                    | numpy               |\n| CMA-ES                 | numpy               |\n| REINFORCE (a.k.a. VPG) | PyTorch, TensorFlow |\n| DDPG                   | PyTorch, TensorFlow |\n| DQN                    | PyTorch, TensorFlow |\n| DDQN                   | PyTorch, TensorFlow |\n| ERWR                   | TensorFlow          |\n| NPO                    | TensorFlow          |\n| PPO                    | PyTorch, TensorFlow |\n| REPS                   | TensorFlow          |\n| TD3                    | PyTorch, TensorFlow |\n| TNPG                   | TensorFlow          |\n| TRPO                   | PyTorch, TensorFlow |\n| MAML                   | PyTorch             |\n| RL2                    | TensorFlow          |\n| PEARL                  | PyTorch             |\n| SAC                    | PyTorch             |\n| MTSAC                  | PyTorch             |\n| MTPPO                  | PyTorch, TensorFlow |\n| MTTRPO                 | PyTorch, TensorFlow |\n| Task Embedding         | TensorFlow          |\n| Behavioral Cloning     | PyTorch             |\n \n",
                        "original_header": "Algorithms"
                    },
                    "confidence": 1.0,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "garage requires Python 3.6+. If you need Python 3.5 support, the last garage\nrelease to support Python 3.5 was\n[v2020.06](https://github.com/rlworkgroup/garage/releases/tag/v2020.06.0). \nThe package is tested on Ubuntu 18.04. It is also known to run on Ubuntu 16.04,\n18.04, and 20.04, and recent versions of macOS using Homebrew. Windows users can\ninstall garage via WSL, or by making use of the Docker containers. \nThe package is available for download on PyPI, and we ensure that it installs\nsuccessfully into environments defined using\n[conda](https://docs.conda.io/en/latest/),\n[Pipenv](https://pipenv.readthedocs.io/en/latest/), and\n[virtualenv](https://virtualenv.pypa.io/en/latest/).\n \n",
                        "original_header": "Supported Tools and Frameworks"
                    },
                    "confidence": 0.9988346426120459,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "type": "Text_excerpt",
                        "value": "| Release | Build Status | Last date of support |\n| ------- | ------------ | -------------------- |\n| [v2021.03](https://github.com/rlworkgroup/garage/releases/tag/v2021.03.0) | [![Garage CI Release-2021.03](https://github.com/rlworkgroup/garage/workflows/Garage%20CI%20Release-2021.03/badge.svg)](https://github.com/rlworkgroup/garage/actions?query=workflow%3A%22Garage+CI+Release-2021.03%22) | May 31st, 2021 | \n",
                        "original_header": "Supported Releases"
                    },
                    "confidence": 0.9709080481067922,
                    "technique": "supervised_classification",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "usage": [
                {
                    "result": {
                        "value": "Starting from version v2020.10.0, garage comes packaged with examples. To get a\nlist of examples, run:\n\n```\ngarage examples\n```\n\nYou can also run `garage examples --help`, or visit\n[the documentation](https://garage.readthedocs.io/en/latest/user/get_started.html#running-examples)\nfor even more details.\n",
                        "type": "Text_excerpt",
                        "original_header": "Examples",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "citation": [
                {
                    "result": {
                        "value": "If you use garage for academic research, please cite the repository using the\nfollowing BibTeX entry. You should update the `commit` field with the commit or\nrelease tag your publication uses.\n\n```latex\n@misc{garage,\n author = {The garage contributors},\n title = {Garage: A toolkit for reproducible reinforcement learning research},\n year = {2019},\n publisher = {GitHub},\n journal = {GitHub repository},\n howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n commit = {be070842071f736eb24f28e4b902a9f144f5c97b}\n}\n```\n",
                        "type": "Text_excerpt",
                        "original_header": "Citing garage",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "The earliest code for garage was adopted from predecessor project called\n[rllab](https://github.com/rll/rllab). The garage project is grateful for the\ncontributions of the original rllab authors, and hopes to continue advancing the\nstate of reproducibility in RL research in the same spirit. garage has\npreviously been supported by the Amazon Research Award \"Watch, Practice, Learn,\nDo: Unsupervised Learning of Robust and Composable Robot Motion Skills by Fusing\nExpert Demonstrations with Robot Experience.\"\n\n---\n<p align=\"center\" style=\"align-items:center; display:inline-block\">Made with &#10084; &nbsp;at <a href=\"https://robotics.usc.edu/resl/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/resl_logo.png?raw=true\" height=\"60px\"></a> and &nbsp;<a href=\"https://viterbischool.usc.edu/\" target=\"_blank\"><img align=\"absmiddle\" src=\"https://github.com/rlworkgroup/garage/blob/master/docs/_static/viterbi_logo.png?raw=true\" height=\"30px\"></a></p>\n",
                        "type": "Text_excerpt",
                        "original_header": "Credits",
                        "parent_header": [
                            "garage"
                        ]
                    },
                    "confidence": 1,
                    "technique": "header_analysis",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                },
                {
                    "result": {
                        "value": "@misc{garage,\n    commit = {be070842071f736eb24f28e4b902a9f144f5c97b},\n    howpublished = {\\url{https://github.com/rlworkgroup/garage}},\n    journal = {GitHub repository},\n    publisher = {GitHub},\n    year = {2019},\n    title = {Garage: A toolkit for reproducible reinforcement learning research},\n    author = {The garage contributors},\n}",
                        "type": "Text_excerpt",
                        "format": "bibtex",
                        "title": "Garage: A toolkit for reproducible reinforcement learning research",
                        "author": "The garage contributors"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "application_domain": [
                {
                    "result": {
                        "type": "String",
                        "value": "Reinforcement Learning"
                    },
                    "confidence": 53.94,
                    "technique": "supervised_classification"
                }
            ],
            "full_title": [
                {
                    "result": {
                        "type": "String",
                        "value": "garage"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "related_documentation": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://pipenv.readthedocs.io/",
                        "format": "readthedocs"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ],
            "logo": [
                {
                    "result": {
                        "type": "Url",
                        "value": "https://raw.githubusercontent.com/rlworkgroup/garage/master/docs/_static/viterbi_logo.png?raw=true"
                    },
                    "confidence": 1,
                    "technique": "regular_expression",
                    "source": "https://raw.githubusercontent.com/rlworkgroup/garage/master/README.md"
                }
            ]
        }
    }
]